
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033568  0801f130  0801f130  0002f130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052698  08052698  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  08052698  08052698  00062698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080526a0  080526a0  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080526a0  080526a0  000626a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080526a4  080526a4  000626a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080526a8  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          00000b94  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000dcc  20000dcc  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c892  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003454  00000000  00000000  0008cafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  0008ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  0008ff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1ee  00000000  00000000  00090010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb20  00000000  00000000  000aa1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c68  00000000  00000000  00179d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024f6c  00000000  00000000  001809d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f114 	.word	0x0801f114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801f114 	.word	0x0801f114

080001d0 <AT24XX_IsConnected>:
#include "at24xx.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d fc2f 	bl	800da40 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00c fc84 	bl	800cb34 <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 fb46 	bl	80068c4 <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00c fd59 	bl	800cd28 <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f018 fe94 	bl	801905c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 fbab 	bl	8018a9c <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01d ff43 	bl	801e1e0 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 fd51 	bl	8018e08 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f019 f843 	bl	80193f8 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 fcde 	bl	8018d58 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 fcc5 	bl	8018d34 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01d ff93 	bl	801e2e0 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00b f81b 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b f90e 	bl	800b638 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00a ffa3 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00b f896 	bl	800b638 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00a ff06 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00a fffa 	bl	800b638 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00a fe22 	bl	800b43e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00a fe16 	bl	800b43e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00a fe0a 	bl	800b43e <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fe00 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00a fef5 	bl	800b638 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a fdd2 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00a fec7 	bl	800b638 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a fd6e 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00a fe63 	bl	800b638 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a fd5b 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00a fe4f 	bl	800b638 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 f9b4 	bl	8018e08 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f017 fff3 	bl	8018a9c <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 facd 	bl	801905c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d fc03 	bl	801e2e0 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 f990 	bl	8018e08 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 f988 	bl	8018e08 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 faa9 	bl	801905c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f017 ffbc 	bl	8018a98 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 f96b 	bl	8018e08 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f017 ffaf 	bl	8018a9c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 f930 	bl	8018e08 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f017 ff6f 	bl	8018a9c <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 fa49 	bl	801905c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 f917 	bl	8018e08 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 f90e 	bl	8018e08 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d fb6e 	bl	801e2e0 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f018 f8fb 	bl	8018e08 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f017 ff3a 	bl	8018a9c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 fa14 	bl	801905c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a fb96 	bl	800b43e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00a fc8a 	bl	800b638 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002bc 	.word	0x200002bc
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f017 feb2 	bl	8018d14 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f017 ff21 	bl	8018e08 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f017 feaf 	bl	8018d34 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f017 fd5d 	bl	8018a9c <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a fa03 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	200002bc 	.word	0x200002bc

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a f9e3 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	200002bc 	.word	0x200002bc

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a f9c3 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a f9a3 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	200002bc 	.word	0x200002bc

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a f983 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	200002bc 	.word	0x200002bc

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a f963 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	200002bc 	.word	0x200002bc

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a f943 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	200002bc 	.word	0x200002bc

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a f923 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	200002bc 	.word	0x200002bc

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a f903 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	200002bc 	.word	0x200002bc

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f00a f8e3 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	200002bc 	.word	0x200002bc

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f00a f8c3 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002bc 	.word	0x200002bc

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f00a f8a3 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	200002bc 	.word	0x200002bc

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f00a f883 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	200002bc 	.word	0x200002bc

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f00a f863 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	200002bc 	.word	0x200002bc

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f00a f843 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	200002bc 	.word	0x200002bc

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f00a f823 	bl	800b43e <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	200002bc 	.word	0x200002bc

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	08051f2c 	.word	0x08051f2c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01c fe55 	bl	801e1e0 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 faab 	bl	8018a98 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f017 fec9 	bl	80192ec <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 fa97 	bl	8018a9c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 fbb7 	bl	8018d34 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 fba8 	bl	8018d34 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 fa54 	bl	8018a98 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f017 ff66 	bl	80194c8 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 fba3 	bl	8018d9c <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 fbd4 	bl	8018e08 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01c fdb6 	bl	801e1e0 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f017 ff24 	bl	80194c8 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 fb86 	bl	8018d9c <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 fbb7 	bl	8018e08 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 f9f8 	bl	8018a9c <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01c fd90 	bl	801e1e0 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f017 fefe 	bl	80194c8 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f017 ff10 	bl	8019504 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 fb50 	bl	8018d9c <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 fb81 	bl	8018e08 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01c fd63 	bl	801e1e0 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 f9b8 	bl	8018a98 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f017 feca 	bl	80194c8 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 faf9 	bl	8018d9c <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 f972 	bl	8018a98 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f017 fc4b 	bl	801905c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fb0e 	bl	8018e08 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f017 fe00 	bl	80193f8 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f017 fa53 	bl	8018d34 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f014 f903 	bl	8015b40 <HAL_UART_Receive_IT>
//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	20000974 	.word	0x20000974
 800194c:	20000975 	.word	0x20000975
 8001950:	20000964 	.word	0x20000964
 8001954:	200004d8 	.word	0x200004d8

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0c3      	sub	sp, #268	; 0x10c
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f004 fecb 	bl	80066f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f002 f8e1 	bl	8003b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 fa9f 	bl	8003ea8 <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 fb77 	bl	800405c <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f002 f979 	bl	8003c64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 fa47 	bl	8003e04 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 fa0f 	bl	8003d98 <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f002 f9d7 	bl	8003d2c <MX_SPI2_Init>
  MX_DMA_Init();
 800197e:	f002 fa6b 	bl	8003e58 <MX_DMA_Init>
  MX_DAC_Init();
 8001982:	f002 f93b 	bl	8003bfc <MX_DAC_Init>
  MX_SPI1_Init();
 8001986:	f002 f99b 	bl	8003cc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800198a:	f003 fe83 	bl	8005694 <LCD_Init>
	XPT2046_Init();
 800198e:	f004 fdbd 	bl	800650c <XPT2046_Init>
	BME280_Init();
 8001992:	f7fe ff23 	bl	80007dc <BME280_Init>
	W25QXX_Init();
 8001996:	f004 fd7f 	bl	8006498 <W25QXX_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 fc9f 	bl	80042ec <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019b6:	f240 321e 	movw	r2, #798	; 0x31e
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f002 fc95 	bl	80042ec <LCD_Rect_Fill>


	unsigned int id = W25QXX_Read_ID();
 80019c2:	f004 fd39 	bl	8006438 <W25QXX_Read_ID>
 80019c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	char str1[30];
	sprintf(str1,"ID:0x%X\r\n",id);
 80019ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019ce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019d2:	49da      	ldr	r1, [pc, #872]	; (8001d3c <main+0x3e4>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f018 fdf7 	bl	801a5c8 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80019da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019de:	4618      	mov	r0, r3
 80019e0:	f016 fffc 	bl	80189dc <strlen>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	48d3      	ldr	r0, [pc, #844]	; (8001d40 <main+0x3e8>)
 80019f2:	f013 ff2c 	bl	801584e <HAL_UART_Transmit>
		uint8_t   SR3;
	} w25_info_t;

	w25_info_t  w25_info;

	id &= 0x0000FFFF;
 80019f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	switch(id)
 8001a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a04:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001a08:	3b11      	subs	r3, #17
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	d87d      	bhi.n	8001b0a <main+0x1b2>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <main+0xbc>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001af7 	.word	0x08001af7
 8001a18:	08001ae3 	.word	0x08001ae3
 8001a1c:	08001acf 	.word	0x08001acf
 8001a20:	08001abb 	.word	0x08001abb
 8001a24:	08001aa7 	.word	0x08001aa7
 8001a28:	08001a93 	.word	0x08001a93
 8001a2c:	08001a7f 	.word	0x08001a7f
 8001a30:	08001a69 	.word	0x08001a69
 8001a34:	08001a53 	.word	0x08001a53
 8001a38:	08001a3d 	.word	0x08001a3d
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8001a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q512\r\n");
 8001a44:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a48:	49be      	ldr	r1, [pc, #760]	; (8001d44 <main+0x3ec>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f018 fdbc 	bl	801a5c8 <siprintf>
		break;
 8001a50:	e070      	b.n	8001b34 <main+0x1dc>
	case 0x4019:
		w25_info.BlockCount=512;
 8001a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q256\r\n");
 8001a5a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a5e:	49ba      	ldr	r1, [pc, #744]	; (8001d48 <main+0x3f0>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f018 fdb1 	bl	801a5c8 <siprintf>
		break;
 8001a66:	e065      	b.n	8001b34 <main+0x1dc>
	case 0x4018:
		w25_info.BlockCount=256;
 8001a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q128\r\n");
 8001a70:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a74:	49b5      	ldr	r1, [pc, #724]	; (8001d4c <main+0x3f4>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f018 fda6 	bl	801a5c8 <siprintf>
		break;
 8001a7c:	e05a      	b.n	8001b34 <main+0x1dc>
	case 0x4017:
		w25_info.BlockCount=128;
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q64\r\n");
 8001a84:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a88:	49b1      	ldr	r1, [pc, #708]	; (8001d50 <main+0x3f8>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f018 fd9c 	bl	801a5c8 <siprintf>
		break;
 8001a90:	e050      	b.n	8001b34 <main+0x1dc>
	case 0x4016:
		w25_info.BlockCount=64;
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q32\r\n");
 8001a98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a9c:	49ad      	ldr	r1, [pc, #692]	; (8001d54 <main+0x3fc>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f018 fd92 	bl	801a5c8 <siprintf>
		break;
 8001aa4:	e046      	b.n	8001b34 <main+0x1dc>
	case 0x4015:
		w25_info.BlockCount=32;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q16\r\n");
 8001aac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ab0:	49a9      	ldr	r1, [pc, #676]	; (8001d58 <main+0x400>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f018 fd88 	bl	801a5c8 <siprintf>
		break;
 8001ab8:	e03c      	b.n	8001b34 <main+0x1dc>
	case 0x4014:
		w25_info.BlockCount=16;
 8001aba:	2310      	movs	r3, #16
 8001abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q80\r\n");
 8001ac0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ac4:	49a5      	ldr	r1, [pc, #660]	; (8001d5c <main+0x404>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f018 fd7e 	bl	801a5c8 <siprintf>
		break;
 8001acc:	e032      	b.n	8001b34 <main+0x1dc>
	case 0x4013:
		w25_info.BlockCount=8;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q40\r\n");
 8001ad4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ad8:	49a1      	ldr	r1, [pc, #644]	; (8001d60 <main+0x408>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f018 fd74 	bl	801a5c8 <siprintf>
		break;
 8001ae0:	e028      	b.n	8001b34 <main+0x1dc>
	case 0x4012:
		w25_info.BlockCount=4;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q20\r\n");
 8001ae8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001aec:	499d      	ldr	r1, [pc, #628]	; (8001d64 <main+0x40c>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f018 fd6a 	bl	801a5c8 <siprintf>
		break;
 8001af4:	e01e      	b.n	8001b34 <main+0x1dc>
	case 0x4011:
		w25_info.BlockCount=2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q10\r\n");
 8001afc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b00:	4999      	ldr	r1, [pc, #612]	; (8001d68 <main+0x410>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f018 fd60 	bl	801a5c8 <siprintf>
		break;
 8001b08:	e014      	b.n	8001b34 <main+0x1dc>
	default:
		sprintf(str1,"w25qxx Unknown ID\r\n");
 8001b0a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b0e:	4997      	ldr	r1, [pc, #604]	; (8001d6c <main+0x414>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f018 fd59 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b16:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f016 ff5e 	bl	80189dc <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	4884      	ldr	r0, [pc, #528]	; (8001d40 <main+0x3e8>)
 8001b2e:	f013 fe8e 	bl	801584e <HAL_UART_Transmit>
		break;
 8001b32:	bf00      	nop
	}

		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f016 ff4f 	bl	80189dc <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	487d      	ldr	r0, [pc, #500]	; (8001d40 <main+0x3e8>)
 8001b4c:	f013 fe7f 	bl	801584e <HAL_UART_Transmit>
		w25_info.PageSize=256;
 8001b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b54:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		w25_info.SectorSize=0x1000;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		w25_info.SectorCount=w25_info.BlockCount*16;
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8001b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8001b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		w25_info.BlockSize=w25_info.SectorSize*16;
 8001b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8001b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b90:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	0a9b      	lsrs	r3, r3, #10
 8001b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sprintf(str1,"Page Size: %d Bytes\r\n",(unsigned int)w25_info.PageSize);
 8001b9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ba8:	4971      	ldr	r1, [pc, #452]	; (8001d70 <main+0x418>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f018 fd0c 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bb0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f016 ff11 	bl	80189dc <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	485e      	ldr	r0, [pc, #376]	; (8001d40 <main+0x3e8>)
 8001bc8:	f013 fe41 	bl	801584e <HAL_UART_Transmit>
		sprintf(str1,"Page Count: %u\r\n",(unsigned int)w25_info.PageCount);
 8001bcc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001bd0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bd4:	4967      	ldr	r1, [pc, #412]	; (8001d74 <main+0x41c>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f018 fcf6 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bdc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001be0:	4618      	mov	r0, r3
 8001be2:	f016 fefb 	bl	80189dc <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	4853      	ldr	r0, [pc, #332]	; (8001d40 <main+0x3e8>)
 8001bf4:	f013 fe2b 	bl	801584e <HAL_UART_Transmit>
		sprintf(str1,"Sector Size: %u Bytes\r\n",(unsigned int)w25_info.SectorSize);
 8001bf8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bfc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c00:	495d      	ldr	r1, [pc, #372]	; (8001d78 <main+0x420>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f018 fce0 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f016 fee5 	bl	80189dc <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	4848      	ldr	r0, [pc, #288]	; (8001d40 <main+0x3e8>)
 8001c20:	f013 fe15 	bl	801584e <HAL_UART_Transmit>
		sprintf(str1,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 8001c24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c28:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c2c:	4953      	ldr	r1, [pc, #332]	; (8001d7c <main+0x424>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f018 fcca 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f016 fecf 	bl	80189dc <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	483d      	ldr	r0, [pc, #244]	; (8001d40 <main+0x3e8>)
 8001c4c:	f013 fdff 	bl	801584e <HAL_UART_Transmit>
		sprintf(str1,"Block Size: %u Bytes\r\n",(unsigned int)w25_info.BlockSize);
 8001c50:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c58:	4949      	ldr	r1, [pc, #292]	; (8001d80 <main+0x428>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f018 fcb4 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c60:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f016 feb9 	bl	80189dc <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	4832      	ldr	r0, [pc, #200]	; (8001d40 <main+0x3e8>)
 8001c78:	f013 fde9 	bl	801584e <HAL_UART_Transmit>
		sprintf(str1,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
 8001c7c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c80:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c84:	493f      	ldr	r1, [pc, #252]	; (8001d84 <main+0x42c>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f018 fc9e 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c8c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c90:	4618      	mov	r0, r3
 8001c92:	f016 fea3 	bl	80189dc <strlen>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	4827      	ldr	r0, [pc, #156]	; (8001d40 <main+0x3e8>)
 8001ca4:	f013 fdd3 	bl	801584e <HAL_UART_Transmit>
		sprintf(str1,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
 8001ca8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001cac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <main+0x430>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f018 fc88 	bl	801a5c8 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001cb8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f016 fe8d 	bl	80189dc <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	481c      	ldr	r0, [pc, #112]	; (8001d40 <main+0x3e8>)
 8001cd0:	f013 fdbd 	bl	801584e <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001cda:	e027      	b.n	8001d2c <main+0x3d4>
 8001cdc:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001ce0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fad0 	bl	8000290 <AT24XX_Read>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fac4 	bl	8000290 <AT24XX_Read>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fde5 	bl	80018dc <byteS>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d1a:	b211      	sxth	r1, r2
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <main+0x434>)
 8001d1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d22:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d26:	3301      	adds	r3, #1
 8001d28:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001d2c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d30:	2b9a      	cmp	r3, #154	; 0x9a
 8001d32:	d9d3      	bls.n	8001cdc <main+0x384>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001d3a:	e051      	b.n	8001de0 <main+0x488>
 8001d3c:	08051f3c 	.word	0x08051f3c
 8001d40:	200004d8 	.word	0x200004d8
 8001d44:	08051f48 	.word	0x08051f48
 8001d48:	08051f60 	.word	0x08051f60
 8001d4c:	08051f78 	.word	0x08051f78
 8001d50:	08051f90 	.word	0x08051f90
 8001d54:	08051fa8 	.word	0x08051fa8
 8001d58:	08051fc0 	.word	0x08051fc0
 8001d5c:	08051fd8 	.word	0x08051fd8
 8001d60:	08051ff0 	.word	0x08051ff0
 8001d64:	08052008 	.word	0x08052008
 8001d68:	08052020 	.word	0x08052020
 8001d6c:	08052038 	.word	0x08052038
 8001d70:	0805204c 	.word	0x0805204c
 8001d74:	08052064 	.word	0x08052064
 8001d78:	08052078 	.word	0x08052078
 8001d7c:	08052090 	.word	0x08052090
 8001d80:	080520a4 	.word	0x080520a4
 8001d84:	080520bc 	.word	0x080520bc
 8001d88:	080520d0 	.word	0x080520d0
 8001d8c:	200005bc 	.word	0x200005bc
 8001d90:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001d94:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa76 	bl	8000290 <AT24XX_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461c      	mov	r4, r3
 8001da8:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fa6a 	bl	8000290 <AT24XX_Read>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fd8b 	bl	80018dc <byteS>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dce:	b211      	sxth	r1, r2
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <main+0x634>)
 8001dd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dd6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001de0:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001de4:	2b9a      	cmp	r3, #154	; 0x9a
 8001de6:	d9d3      	bls.n	8001d90 <main+0x438>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001dee:	e027      	b.n	8001e40 <main+0x4e8>
 8001df0:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001df4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fa46 	bl	8000290 <AT24XX_Read>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461c      	mov	r4, r3
 8001e08:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fa3a 	bl	8000290 <AT24XX_Read>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4620      	mov	r0, r4
 8001e22:	f7ff fd5b 	bl	80018dc <byteS>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e2e:	b211      	sxth	r1, r2
 8001e30:	4a57      	ldr	r2, [pc, #348]	; (8001f90 <main+0x638>)
 8001e32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001e36:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001e40:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e44:	2b9a      	cmp	r3, #154	; 0x9a
 8001e46:	d9d3      	bls.n	8001df0 <main+0x498>


//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <main+0x63c>)
 8001e4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e50:	c303      	stmia	r3!, {r0, r1}
 8001e52:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001e54:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001e58:	2364      	movs	r3, #100	; 0x64
 8001e5a:	220a      	movs	r2, #10
 8001e5c:	484e      	ldr	r0, [pc, #312]	; (8001f98 <main+0x640>)
 8001e5e:	f013 fcf6 	bl	801584e <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <main+0x644>)
 8001e64:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001e68:	461d      	mov	r5, r3
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001e72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e76:	2214      	movs	r2, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4847      	ldr	r0, [pc, #284]	; (8001f98 <main+0x640>)
 8001e7c:	f013 fe1b 	bl	8015ab6 <HAL_UART_Transmit_IT>

//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001e80:	2210      	movs	r2, #16
 8001e82:	4947      	ldr	r1, [pc, #284]	; (8001fa0 <main+0x648>)
 8001e84:	4844      	ldr	r0, [pc, #272]	; (8001f98 <main+0x640>)
 8001e86:	f013 fe5b 	bl	8015b40 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001e8a:	2120      	movs	r1, #32
 8001e8c:	4845      	ldr	r0, [pc, #276]	; (8001fa4 <main+0x64c>)
 8001e8e:	f009 f8cd 	bl	800b02c <HAL_GPIO_ReadPin>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d12c      	bne.n	8001ef2 <main+0x59a>

			uint16_t touchX = getX();
 8001e98:	f004 fbfa 	bl	8006690 <getX>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			uint16_t touchY = getY();
 8001ea2:	f004 fc0f 	bl	80066c4 <getY>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
			if (touchX && touchY && touchX != 0x0DB)
 8001eac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d012      	beq.n	8001eda <main+0x582>
 8001eb4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00e      	beq.n	8001eda <main+0x582>
 8001ebc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001ec0:	2bdb      	cmp	r3, #219	; 0xdb
 8001ec2:	d00a      	beq.n	8001eda <main+0x582>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001ec4:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001ec8:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001ecc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f002 fa09 	bl	80042ec <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	4832      	ldr	r0, [pc, #200]	; (8001fa8 <main+0x650>)
 8001ee0:	f009 f8bc 	bl	800b05c <HAL_GPIO_WritePin>
			touchX = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			touchY = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8001ef0:	e004      	b.n	8001efc <main+0x5a4>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	482c      	ldr	r0, [pc, #176]	; (8001fa8 <main+0x650>)
 8001ef8:	f009 f8b0 	bl	800b05c <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001efc:	f7fe ff5c 	bl	8000db8 <DS3231_getSec>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <main+0x654>)
 8001f06:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <main+0x658>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <main+0x654>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d0ba      	beq.n	8001e8a <main+0x532>

			rtcMin = DS3231_getMin();
 8001f14:	f7fe ff5e 	bl	8000dd4 <DS3231_getMin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <main+0x65c>)
 8001f1e:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <main+0x660>)
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2301      	movs	r3, #1
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	2123      	movs	r1, #35	; 0x23
 8001f2e:	20aa      	movs	r0, #170	; 0xaa
 8001f30:	f002 fe20 	bl	8004b74 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <main+0x660>)
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2208      	movs	r2, #8
 8001f40:	214b      	movs	r1, #75	; 0x4b
 8001f42:	20aa      	movs	r0, #170	; 0xaa
 8001f44:	f002 fe16 	bl	8004b74 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <main+0x654>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d032      	beq.n	8001fbc <main+0x664>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <main+0x660>)
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2207      	movs	r2, #7
 8001f62:	2123      	movs	r1, #35	; 0x23
 8001f64:	20aa      	movs	r0, #170	; 0xaa
 8001f66:	f002 fe05 	bl	8004b74 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <main+0x660>)
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	2207      	movs	r2, #7
 8001f76:	214b      	movs	r1, #75	; 0x4b
 8001f78:	20aa      	movs	r0, #170	; 0xaa
 8001f7a:	f002 fdfb 	bl	8004b74 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <main+0x64c>)
 8001f86:	f009 f869 	bl	800b05c <HAL_GPIO_WritePin>
 8001f8a:	e031      	b.n	8001ff0 <main+0x698>
 8001f8c:	200006f4 	.word	0x200006f4
 8001f90:	2000082c 	.word	0x2000082c
 8001f94:	08052140 	.word	0x08052140
 8001f98:	200004d8 	.word	0x200004d8
 8001f9c:	0805214c 	.word	0x0805214c
 8001fa0:	20000975 	.word	0x20000975
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	2000056d 	.word	0x2000056d
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	2000056e 	.word	0x2000056e
 8001fb8:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	2123      	movs	r1, #35	; 0x23
 8001fca:	20aa      	movs	r0, #170	; 0xaa
 8001fcc:	f002 fdd2 	bl	8004b74 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	2207      	movs	r2, #7
 8001fdc:	214b      	movs	r1, #75	; 0x4b
 8001fde:	20aa      	movs	r0, #170	; 0xaa
 8001fe0:	f002 fdc8 	bl	8004b74 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	48bb      	ldr	r0, [pc, #748]	; (80022d8 <main+0x980>)
 8001fec:	f009 f836 	bl	800b05c <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001ff0:	4bba      	ldr	r3, [pc, #744]	; (80022dc <main+0x984>)
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	4bba      	ldr	r3, [pc, #744]	; (80022e0 <main+0x988>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f001 8098 	beq.w	800312e <main+0x17d6>

				rtcHrs = DS3231_getHrs();
 8001ffe:	f7fe fef7 	bl	8000df0 <DS3231_getHrs>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4bb7      	ldr	r3, [pc, #732]	; (80022e4 <main+0x98c>)
 8002008:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 800200a:	4bb4      	ldr	r3, [pc, #720]	; (80022dc <main+0x984>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002014:	49b4      	ldr	r1, [pc, #720]	; (80022e8 <main+0x990>)
 8002016:	4618      	mov	r0, r3
 8002018:	f018 fad6 	bl	801a5c8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 800201c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2301      	movs	r3, #1
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4bb0      	ldr	r3, [pc, #704]	; (80022ec <main+0x994>)
 800202a:	2164      	movs	r1, #100	; 0x64
 800202c:	20b2      	movs	r0, #178	; 0xb2
 800202e:	f003 fab7 	bl	80055a0 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8002032:	4bab      	ldr	r3, [pc, #684]	; (80022e0 <main+0x988>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800203c:	49aa      	ldr	r1, [pc, #680]	; (80022e8 <main+0x990>)
 800203e:	4618      	mov	r0, r3
 8002040:	f018 fac2 	bl	801a5c8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8002044:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002048:	4ba9      	ldr	r3, [pc, #676]	; (80022f0 <main+0x998>)
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2301      	movs	r3, #1
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <main+0x994>)
 8002052:	2164      	movs	r1, #100	; 0x64
 8002054:	20b2      	movs	r0, #178	; 0xb2
 8002056:	f003 faa3 	bl	80055a0 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 800205a:	4ba6      	ldr	r3, [pc, #664]	; (80022f4 <main+0x99c>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4ba1      	ldr	r3, [pc, #644]	; (80022e4 <main+0x98c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	f000 80fb 	beq.w	800225e <main+0x906>

					rtcDay = DS3231_getDay();
 8002068:	f7fe fed0 	bl	8000e0c <DS3231_getDay>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	4ba1      	ldr	r3, [pc, #644]	; (80022f8 <main+0x9a0>)
 8002072:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8002074:	f7fe fed8 	bl	8000e28 <DS3231_getDate>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	4b9f      	ldr	r3, [pc, #636]	; (80022fc <main+0x9a4>)
 800207e:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8002080:	f7fe fee0 	bl	8000e44 <DS3231_getMonth>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	4b9d      	ldr	r3, [pc, #628]	; (8002300 <main+0x9a8>)
 800208a:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 800208c:	f7fe fee8 	bl	8000e60 <DS3231_getYear>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b9b      	ldr	r3, [pc, #620]	; (8002304 <main+0x9ac>)
 8002096:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <main+0x99c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020a2:	4991      	ldr	r1, [pc, #580]	; (80022e8 <main+0x990>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f018 fa8f 	bl	801a5c8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80020aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020ae:	2300      	movs	r3, #0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2301      	movs	r3, #1
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <main+0x994>)
 80020b8:	2164      	movs	r1, #100	; 0x64
 80020ba:	2000      	movs	r0, #0
 80020bc:	f003 fa70 	bl	80055a0 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 80020c0:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <main+0x98c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ca:	4987      	ldr	r1, [pc, #540]	; (80022e8 <main+0x990>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f018 fa7b 	bl	801a5c8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80020d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020d6:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <main+0x998>)
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2301      	movs	r3, #1
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b83      	ldr	r3, [pc, #524]	; (80022ec <main+0x994>)
 80020e0:	2164      	movs	r1, #100	; 0x64
 80020e2:	2000      	movs	r0, #0
 80020e4:	f003 fa5c 	bl	80055a0 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 80020e8:	4b87      	ldr	r3, [pc, #540]	; (8002308 <main+0x9b0>)
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <main+0x9a0>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	f000 80a8 	beq.w	8002246 <main+0x8ee>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80020f6:	4b80      	ldr	r3, [pc, #512]	; (80022f8 <main+0x9a0>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	1d5a      	adds	r2, r3, #5
 80020fc:	4b83      	ldr	r3, [pc, #524]	; (800230c <main+0x9b4>)
 80020fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002102:	4413      	add	r3, r2
 8002104:	1099      	asrs	r1, r3, #2
 8002106:	17d3      	asrs	r3, r2, #31
 8002108:	1ac9      	subs	r1, r1, r3
 800210a:	460b      	mov	r3, r1
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	1ad1      	subs	r1, r2, r3
 8002112:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <main+0x9b8>)
 8002114:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002118:	2300      	movs	r3, #0
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	2301      	movs	r3, #1
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <main+0x9bc>)
 8002122:	218c      	movs	r1, #140	; 0x8c
 8002124:	2005      	movs	r0, #5
 8002126:	f003 fa3b 	bl	80055a0 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <main+0x9a0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	1d9a      	adds	r2, r3, #6
 8002130:	4b76      	ldr	r3, [pc, #472]	; (800230c <main+0x9b4>)
 8002132:	fb83 1302 	smull	r1, r3, r3, r2
 8002136:	4413      	add	r3, r2
 8002138:	1099      	asrs	r1, r3, #2
 800213a:	17d3      	asrs	r3, r2, #31
 800213c:	1ac9      	subs	r1, r1, r3
 800213e:	460b      	mov	r3, r1
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	1ad1      	subs	r1, r2, r3
 8002146:	4b72      	ldr	r3, [pc, #456]	; (8002310 <main+0x9b8>)
 8002148:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800214c:	23ff      	movs	r3, #255	; 0xff
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2301      	movs	r3, #1
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <main+0x9bc>)
 8002156:	218c      	movs	r1, #140	; 0x8c
 8002158:	2005      	movs	r0, #5
 800215a:	f003 fa21 	bl	80055a0 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800215e:	4b68      	ldr	r3, [pc, #416]	; (8002300 <main+0x9a8>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	f103 010a 	add.w	r1, r3, #10
 8002166:	4b6c      	ldr	r3, [pc, #432]	; (8002318 <main+0x9c0>)
 8002168:	fb83 2301 	smull	r2, r3, r3, r1
 800216c:	105a      	asrs	r2, r3, #1
 800216e:	17cb      	asrs	r3, r1, #31
 8002170:	1ad2      	subs	r2, r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	1aca      	subs	r2, r1, r3
 800217c:	4b67      	ldr	r3, [pc, #412]	; (800231c <main+0x9c4>)
 800217e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002182:	2300      	movs	r3, #0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	2301      	movs	r3, #1
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	4b62      	ldr	r3, [pc, #392]	; (8002314 <main+0x9bc>)
 800218c:	218c      	movs	r1, #140	; 0x8c
 800218e:	2096      	movs	r0, #150	; 0x96
 8002190:	f003 fa06 	bl	80055a0 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <main+0x9a8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f103 010b 	add.w	r1, r3, #11
 800219c:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <main+0x9c0>)
 800219e:	fb83 2301 	smull	r2, r3, r3, r1
 80021a2:	105a      	asrs	r2, r3, #1
 80021a4:	17cb      	asrs	r3, r1, #31
 80021a6:	1ad2      	subs	r2, r2, r3
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	1aca      	subs	r2, r1, r3
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <main+0x9c4>)
 80021b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	2301      	movs	r3, #1
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <main+0x9bc>)
 80021c4:	218c      	movs	r1, #140	; 0x8c
 80021c6:	2096      	movs	r0, #150	; 0x96
 80021c8:	f003 f9ea 	bl	80055a0 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80021cc:	4b54      	ldr	r3, [pc, #336]	; (8002320 <main+0x9c8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b54      	ldr	r3, [pc, #336]	; (8002324 <main+0x9cc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <main+0x9d0>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	460b      	mov	r3, r1
 80021e4:	4951      	ldr	r1, [pc, #324]	; (800232c <main+0x9d4>)
 80021e6:	f018 f9ef 	bl	801a5c8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80021ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021ee:	2300      	movs	r3, #0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2301      	movs	r3, #1
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <main+0x9bc>)
 80021f8:	218c      	movs	r1, #140	; 0x8c
 80021fa:	20fa      	movs	r0, #250	; 0xfa
 80021fc:	f003 f9d0 	bl	80055a0 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8002200:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <main+0x9a4>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <main+0x9a8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <main+0x9ac>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	460b      	mov	r3, r1
 8002218:	4944      	ldr	r1, [pc, #272]	; (800232c <main+0x9d4>)
 800221a:	f018 f9d5 	bl	801a5c8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 800221e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2301      	movs	r3, #1
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <main+0x9bc>)
 800222e:	218c      	movs	r1, #140	; 0x8c
 8002230:	20fa      	movs	r0, #250	; 0xfa
 8002232:	f003 f9b5 	bl	80055a0 <LCD_Font>

						rtcDayLast = rtcDay;
 8002236:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <main+0x9a0>)
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <main+0x9b0>)
 800223c:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <main+0x9a4>)
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <main+0x9c8>)
 8002244:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <main+0x9a8>)
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	4b36      	ldr	r3, [pc, #216]	; (8002324 <main+0x9cc>)
 800224c:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <main+0x9ac>)
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	4b35      	ldr	r3, [pc, #212]	; (8002328 <main+0x9d0>)
 8002254:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <main+0x98c>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <main+0x99c>)
 800225c:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <main+0x988>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <main+0x984>)
 8002264:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8002266:	f04f 30ff 	mov.w	r0, #4294967295
 800226a:	f7fe f8bd 	bl	80003e8 <BME280_getTemperature>
 800226e:	ee10 3a10 	vmov	r3, s0
 8002272:	4618      	mov	r0, r3
 8002274:	f016 fd70 	bl	8018d58 <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	492c      	ldr	r1, [pc, #176]	; (8002330 <main+0x9d8>)
 800227e:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	f7fe f927 	bl	80004d8 <BME280_getHumidity>
 800228a:	ee10 3a10 	vmov	r3, s0
 800228e:	4618      	mov	r0, r3
 8002290:	f016 fd62 	bl	8018d58 <__aeabi_f2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4926      	ldr	r1, [pc, #152]	; (8002334 <main+0x9dc>)
 800229a:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 800229e:	f7fe f9bb 	bl	8000618 <BME280_getPressure>
 80022a2:	eef0 7a40 	vmov.f32	s15, s0
 80022a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022aa:	ee17 3a90 	vmov	r3, s15
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <main+0x9e0>)
 80022b2:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <main+0x9e0>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022bc:	f240 8737 	bls.w	800312e <main+0x17d6>
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <main+0x9e0>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f240 424b 	movw	r2, #1099	; 0x44b
 80022c8:	4293      	cmp	r3, r2
 80022ca:	f200 8730 	bhi.w	800312e <main+0x17d6>
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <main+0x9d8>)
 80022d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d4:	e032      	b.n	800233c <main+0x9e4>
 80022d6:	bf00      	nop
 80022d8:	40020800 	.word	0x40020800
 80022dc:	20000001 	.word	0x20000001
 80022e0:	2000056e 	.word	0x2000056e
 80022e4:	2000056f 	.word	0x2000056f
 80022e8:	080520e4 	.word	0x080520e4
 80022ec:	08051ef8 	.word	0x08051ef8
 80022f0:	00ffa500 	.word	0x00ffa500
 80022f4:	20000002 	.word	0x20000002
 80022f8:	20000570 	.word	0x20000570
 80022fc:	20000571 	.word	0x20000571
 8002300:	20000572 	.word	0x20000572
 8002304:	20000573 	.word	0x20000573
 8002308:	20000574 	.word	0x20000574
 800230c:	92492493 	.word	0x92492493
 8002310:	20000008 	.word	0x20000008
 8002314:	08029860 	.word	0x08029860
 8002318:	2aaaaaab 	.word	0x2aaaaaab
 800231c:	20000024 	.word	0x20000024
 8002320:	20000575 	.word	0x20000575
 8002324:	20000576 	.word	0x20000576
 8002328:	20000577 	.word	0x20000577
 800232c:	080520ec 	.word	0x080520ec
 8002330:	20000578 	.word	0x20000578
 8002334:	20000588 	.word	0x20000588
 8002338:	200005b8 	.word	0x200005b8
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	4b8a      	ldr	r3, [pc, #552]	; (800256c <main+0xc14>)
 8002342:	f016 ffd3 	bl	80192ec <__aeabi_dcmplt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 86f0 	beq.w	800312e <main+0x17d6>
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <main+0xc18>)
 8002350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	4b86      	ldr	r3, [pc, #536]	; (8002574 <main+0xc1c>)
 800235a:	f016 ffe5 	bl	8019328 <__aeabi_dcmpgt>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 86e4 	beq.w	800312e <main+0x17d6>
 8002366:	4b84      	ldr	r3, [pc, #528]	; (8002578 <main+0xc20>)
 8002368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	f016 ffd8 	bl	8019328 <__aeabi_dcmpgt>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 86d7 	beq.w	800312e <main+0x17d6>
 8002380:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <main+0xc20>)
 8002382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	4b7c      	ldr	r3, [pc, #496]	; (800257c <main+0xc24>)
 800238c:	f016 ffae 	bl	80192ec <__aeabi_dcmplt>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 86cb 	beq.w	800312e <main+0x17d6>

					if (temperature != temperatureLast) {
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <main+0xc18>)
 800239a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239e:	4b78      	ldr	r3, [pc, #480]	; (8002580 <main+0xc28>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f016 ff98 	bl	80192d8 <__aeabi_dcmpeq>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 8120 	bne.w	80025f0 <main+0xc98>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80023b0:	4b73      	ldr	r3, [pc, #460]	; (8002580 <main+0xc28>)
 80023b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b72      	ldr	r3, [pc, #456]	; (8002584 <main+0xc2c>)
 80023bc:	f016 ffaa 	bl	8019314 <__aeabi_dcmpge>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <main+0xa9c>
 80023c6:	4b6e      	ldr	r3, [pc, #440]	; (8002580 <main+0xc28>)
 80023c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	f016 ff8a 	bl	80192ec <__aeabi_dcmplt>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01c      	beq.n	8002418 <main+0xac0>
 80023de:	4b68      	ldr	r3, [pc, #416]	; (8002580 <main+0xc28>)
 80023e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b67      	ldr	r3, [pc, #412]	; (8002588 <main+0xc30>)
 80023ea:	f016 ff9d 	bl	8019328 <__aeabi_dcmpgt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <main+0xac0>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80023f4:	4b62      	ldr	r3, [pc, #392]	; (8002580 <main+0xc28>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	1d38      	adds	r0, r7, #4
 80023fc:	4963      	ldr	r1, [pc, #396]	; (800258c <main+0xc34>)
 80023fe:	f018 f8e3 	bl	801a5c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002402:	1d3a      	adds	r2, r7, #4
 8002404:	2300      	movs	r3, #0
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2301      	movs	r3, #1
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4b60      	ldr	r3, [pc, #384]	; (8002590 <main+0xc38>)
 800240e:	21bb      	movs	r1, #187	; 0xbb
 8002410:	2001      	movs	r0, #1
 8002412:	f003 f8c5 	bl	80055a0 <LCD_Font>
 8002416:	e04c      	b.n	80024b2 <main+0xb5a>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <main+0xc28>)
 800241a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <main+0xc2c>)
 8002424:	f016 ff62 	bl	80192ec <__aeabi_dcmplt>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01d      	beq.n	800246a <main+0xb12>
 800242e:	4b54      	ldr	r3, [pc, #336]	; (8002580 <main+0xc28>)
 8002430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	f016 ff74 	bl	8019328 <__aeabi_dcmpgt>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d011      	beq.n	800246a <main+0xb12>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002446:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <main+0xc28>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	1d38      	adds	r0, r7, #4
 800244e:	494f      	ldr	r1, [pc, #316]	; (800258c <main+0xc34>)
 8002450:	f018 f8ba 	bl	801a5c8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002454:	1d3a      	adds	r2, r7, #4
 8002456:	2300      	movs	r3, #0
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2301      	movs	r3, #1
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <main+0xc38>)
 8002460:	21bb      	movs	r1, #187	; 0xbb
 8002462:	201b      	movs	r0, #27
 8002464:	f003 f89c 	bl	80055a0 <LCD_Font>
 8002468:	e023      	b.n	80024b2 <main+0xb5a>
						}
						else if (temperatureLast <= -10) {
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <main+0xc28>)
 800246c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <main+0xc30>)
 8002476:	f016 ff43 	bl	8019300 <__aeabi_dcmple>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d018      	beq.n	80024b2 <main+0xb5a>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <main+0xc28>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f016 ff6d 	bl	8019368 <__aeabi_d2iz>
 800248e:	4603      	mov	r3, r0
 8002490:	b25b      	sxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	493f      	ldr	r1, [pc, #252]	; (8002594 <main+0xc3c>)
 8002498:	4618      	mov	r0, r3
 800249a:	f018 f895 	bl	801a5c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800249e:	1d3a      	adds	r2, r7, #4
 80024a0:	2300      	movs	r3, #0
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	2301      	movs	r3, #1
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <main+0xc38>)
 80024aa:	21bb      	movs	r1, #187	; 0xbb
 80024ac:	2001      	movs	r0, #1
 80024ae:	f003 f877 	bl	80055a0 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <main+0xc18>)
 80024b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <main+0xc2c>)
 80024be:	f016 ff29 	bl	8019314 <__aeabi_dcmpge>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <main+0xb9e>
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <main+0xc18>)
 80024ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f016 ff09 	bl	80192ec <__aeabi_dcmplt>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <main+0xbc2>
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <main+0xc18>)
 80024e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <main+0xc30>)
 80024ec:	f016 ff1c 	bl	8019328 <__aeabi_dcmpgt>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d011      	beq.n	800251a <main+0xbc2>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <main+0xc18>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	1d38      	adds	r0, r7, #4
 80024fe:	4923      	ldr	r1, [pc, #140]	; (800258c <main+0xc34>)
 8002500:	f018 f862 	bl	801a5c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002504:	1d3a      	adds	r2, r7, #4
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <main+0xc40>)
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	2301      	movs	r3, #1
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <main+0xc38>)
 8002510:	21bb      	movs	r1, #187	; 0xbb
 8002512:	2001      	movs	r0, #1
 8002514:	f003 f844 	bl	80055a0 <LCD_Font>
 8002518:	e064      	b.n	80025e4 <main+0xc8c>
						}
						else if (temperature < 10 && temperature > 0) {
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <main+0xc18>)
 800251c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <main+0xc2c>)
 8002526:	f016 fee1 	bl	80192ec <__aeabi_dcmplt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d035      	beq.n	800259c <main+0xc44>
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <main+0xc18>)
 8002532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	f016 fef3 	bl	8019328 <__aeabi_dcmpgt>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d029      	beq.n	800259c <main+0xc44>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <main+0xc18>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	1d38      	adds	r0, r7, #4
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <main+0xc34>)
 8002552:	f018 f839 	bl	801a5c8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002556:	1d3a      	adds	r2, r7, #4
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <main+0xc40>)
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2301      	movs	r3, #1
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <main+0xc38>)
 8002562:	21bb      	movs	r1, #187	; 0xbb
 8002564:	201b      	movs	r0, #27
 8002566:	f003 f81b 	bl	80055a0 <LCD_Font>
 800256a:	e03b      	b.n	80025e4 <main+0xc8c>
 800256c:	40554000 	.word	0x40554000
 8002570:	20000578 	.word	0x20000578
 8002574:	c0440000 	.word	0xc0440000
 8002578:	20000588 	.word	0x20000588
 800257c:	40590000 	.word	0x40590000
 8002580:	20000580 	.word	0x20000580
 8002584:	40240000 	.word	0x40240000
 8002588:	c0240000 	.word	0xc0240000
 800258c:	080520fc 	.word	0x080520fc
 8002590:	08029860 	.word	0x08029860
 8002594:	08052104 	.word	0x08052104
 8002598:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 800259c:	4ba4      	ldr	r3, [pc, #656]	; (8002830 <main+0xed8>)
 800259e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4ba3      	ldr	r3, [pc, #652]	; (8002834 <main+0xedc>)
 80025a8:	f016 feaa 	bl	8019300 <__aeabi_dcmple>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d018      	beq.n	80025e4 <main+0xc8c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80025b2:	4b9f      	ldr	r3, [pc, #636]	; (8002830 <main+0xed8>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f016 fed4 	bl	8019368 <__aeabi_d2iz>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	499b      	ldr	r1, [pc, #620]	; (8002838 <main+0xee0>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f017 fffc 	bl	801a5c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80025d0:	1d3a      	adds	r2, r7, #4
 80025d2:	4b9a      	ldr	r3, [pc, #616]	; (800283c <main+0xee4>)
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2301      	movs	r3, #1
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4b99      	ldr	r3, [pc, #612]	; (8002840 <main+0xee8>)
 80025dc:	21bb      	movs	r1, #187	; 0xbb
 80025de:	2001      	movs	r0, #1
 80025e0:	f002 ffde 	bl	80055a0 <LCD_Font>
						}

						temperatureLast = temperature;
 80025e4:	4b92      	ldr	r3, [pc, #584]	; (8002830 <main+0xed8>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	4996      	ldr	r1, [pc, #600]	; (8002844 <main+0xeec>)
 80025ec:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80025f0:	4b95      	ldr	r3, [pc, #596]	; (8002848 <main+0xef0>)
 80025f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f6:	4b95      	ldr	r3, [pc, #596]	; (800284c <main+0xef4>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f016 fe6c 	bl	80192d8 <__aeabi_dcmpeq>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15b      	bne.n	80026be <main+0xd66>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8002606:	4b91      	ldr	r3, [pc, #580]	; (800284c <main+0xef4>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f107 000c 	add.w	r0, r7, #12
 8002610:	498f      	ldr	r1, [pc, #572]	; (8002850 <main+0xef8>)
 8002612:	f017 ffd9 	bl	801a5c8 <siprintf>
						if (humidityLast >= 10)
 8002616:	4b8d      	ldr	r3, [pc, #564]	; (800284c <main+0xef4>)
 8002618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b8c      	ldr	r3, [pc, #560]	; (8002854 <main+0xefc>)
 8002622:	f016 fe77 	bl	8019314 <__aeabi_dcmpge>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <main+0xcec>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800262c:	f107 020c 	add.w	r2, r7, #12
 8002630:	2300      	movs	r3, #0
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2301      	movs	r3, #1
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	4b81      	ldr	r3, [pc, #516]	; (8002840 <main+0xee8>)
 800263a:	21bb      	movs	r1, #187	; 0xbb
 800263c:	20a0      	movs	r0, #160	; 0xa0
 800263e:	f002 ffaf 	bl	80055a0 <LCD_Font>
 8002642:	e00a      	b.n	800265a <main+0xd02>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002644:	f107 020c 	add.w	r2, r7, #12
 8002648:	2300      	movs	r3, #0
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	2301      	movs	r3, #1
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4b7b      	ldr	r3, [pc, #492]	; (8002840 <main+0xee8>)
 8002652:	21bb      	movs	r1, #187	; 0xbb
 8002654:	20ba      	movs	r0, #186	; 0xba
 8002656:	f002 ffa3 	bl	80055a0 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 800265a:	4b7b      	ldr	r3, [pc, #492]	; (8002848 <main+0xef0>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f107 000c 	add.w	r0, r7, #12
 8002664:	497a      	ldr	r1, [pc, #488]	; (8002850 <main+0xef8>)
 8002666:	f017 ffaf 	bl	801a5c8 <siprintf>
						if (humidity >= 10)
 800266a:	4b77      	ldr	r3, [pc, #476]	; (8002848 <main+0xef0>)
 800266c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	4b77      	ldr	r3, [pc, #476]	; (8002854 <main+0xefc>)
 8002676:	f016 fe4d 	bl	8019314 <__aeabi_dcmpge>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <main+0xd42>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2301      	movs	r3, #1
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4b6c      	ldr	r3, [pc, #432]	; (8002840 <main+0xee8>)
 8002690:	21bb      	movs	r1, #187	; 0xbb
 8002692:	20a0      	movs	r0, #160	; 0xa0
 8002694:	f002 ff84 	bl	80055a0 <LCD_Font>
 8002698:	e00b      	b.n	80026b2 <main+0xd5a>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800269a:	f107 020c 	add.w	r2, r7, #12
 800269e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	2301      	movs	r3, #1
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4b65      	ldr	r3, [pc, #404]	; (8002840 <main+0xee8>)
 80026aa:	21bb      	movs	r1, #187	; 0xbb
 80026ac:	20ba      	movs	r0, #186	; 0xba
 80026ae:	f002 ff77 	bl	80055a0 <LCD_Font>

						humidityLast = humidity;
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <main+0xef0>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	4964      	ldr	r1, [pc, #400]	; (800284c <main+0xef4>)
 80026ba:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80026be:	4b66      	ldr	r3, [pc, #408]	; (8002858 <main+0xf00>)
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	4b66      	ldr	r3, [pc, #408]	; (800285c <main+0xf04>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d06d      	beq.n	80027a6 <main+0xe4e>

						char weatherPrintP[11];

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <main+0xf00>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d2:	d308      	bcc.n	80026e6 <main+0xd8e>
 80026d4:	4b60      	ldr	r3, [pc, #384]	; (8002858 <main+0xf00>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4960      	ldr	r1, [pc, #384]	; (8002860 <main+0xf08>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f017 ff71 	bl	801a5c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80026e6:	f107 0214 	add.w	r2, r7, #20
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2301      	movs	r3, #1
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4b53      	ldr	r3, [pc, #332]	; (8002840 <main+0xee8>)
 80026f4:	21bb      	movs	r1, #187	; 0xbb
 80026f6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80026fa:	f002 ff51 	bl	80055a0 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 80026fe:	4b56      	ldr	r3, [pc, #344]	; (8002858 <main+0xf00>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002706:	d208      	bcs.n	800271a <main+0xdc2>
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <main+0xf00>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4954      	ldr	r1, [pc, #336]	; (8002864 <main+0xf0c>)
 8002714:	4618      	mov	r0, r3
 8002716:	f017 ff57 	bl	801a5c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 800271a:	f107 0214 	add.w	r2, r7, #20
 800271e:	2300      	movs	r3, #0
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2301      	movs	r3, #1
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <main+0xee8>)
 8002728:	21bb      	movs	r1, #187	; 0xbb
 800272a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800272e:	f002 ff37 	bl	80055a0 <LCD_Font>

						pressureLast = pressure;
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <main+0xf04>)
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	4b48      	ldr	r3, [pc, #288]	; (8002858 <main+0xf00>)
 8002738:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <main+0xf00>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002742:	d308      	bcc.n	8002756 <main+0xdfe>
 8002744:	4b44      	ldr	r3, [pc, #272]	; (8002858 <main+0xf00>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4944      	ldr	r1, [pc, #272]	; (8002860 <main+0xf08>)
 8002750:	4618      	mov	r0, r3
 8002752:	f017 ff39 	bl	801a5c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002756:	f107 0214 	add.w	r2, r7, #20
 800275a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2301      	movs	r3, #1
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <main+0xee8>)
 8002766:	21bb      	movs	r1, #187	; 0xbb
 8002768:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800276c:	f002 ff18 	bl	80055a0 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 8002770:	4b39      	ldr	r3, [pc, #228]	; (8002858 <main+0xf00>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002778:	d208      	bcs.n	800278c <main+0xe34>
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <main+0xf00>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	4937      	ldr	r1, [pc, #220]	; (8002864 <main+0xf0c>)
 8002786:	4618      	mov	r0, r3
 8002788:	f017 ff1e 	bl	801a5c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800278c:	f107 0214 	add.w	r2, r7, #20
 8002790:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	2301      	movs	r3, #1
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <main+0xee8>)
 800279c:	21bb      	movs	r1, #187	; 0xbb
 800279e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80027a2:	f002 fefd 	bl	80055a0 <LCD_Font>
					}

					if (AT24XX_Read(0) != rtcHrs) {
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fd fd72 	bl	8000290 <AT24XX_Read>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <main+0xf10>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f000 81e1 	beq.w	8002b7c <main+0x1224>

						AT24XX_Update(0, rtcHrs);
 80027ba:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <main+0xf10>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fd fd8f 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80027cc:	e027      	b.n	800281e <main+0xec6>
 80027ce:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fd57 	bl	8000290 <AT24XX_Read>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461c      	mov	r4, r3
 80027e6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fd4b 	bl	8000290 <AT24XX_Read>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4619      	mov	r1, r3
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff f86c 	bl	80018dc <byteS>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800280c:	b211      	sxth	r1, r2
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <main+0xf14>)
 8002810:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002814:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002818:	3301      	adds	r3, #1
 800281a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800281e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002822:	2b9a      	cmp	r3, #154	; 0x9a
 8002824:	d9d3      	bls.n	80027ce <main+0xe76>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8002826:	239a      	movs	r3, #154	; 0x9a
 8002828:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 800282c:	e030      	b.n	8002890 <main+0xf38>
 800282e:	bf00      	nop
 8002830:	20000578 	.word	0x20000578
 8002834:	c0240000 	.word	0xc0240000
 8002838:	08052104 	.word	0x08052104
 800283c:	00ffa500 	.word	0x00ffa500
 8002840:	08029860 	.word	0x08029860
 8002844:	20000580 	.word	0x20000580
 8002848:	20000588 	.word	0x20000588
 800284c:	20000590 	.word	0x20000590
 8002850:	0805210c 	.word	0x0805210c
 8002854:	40240000 	.word	0x40240000
 8002858:	200005ba 	.word	0x200005ba
 800285c:	200005b8 	.word	0x200005b8
 8002860:	08052114 	.word	0x08052114
 8002864:	0805211c 	.word	0x0805211c
 8002868:	2000056f 	.word	0x2000056f
 800286c:	200005bc 	.word	0x200005bc
 8002870:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800287a:	499e      	ldr	r1, [pc, #632]	; (8002af4 <main+0x119c>)
 800287c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002880:	4a9c      	ldr	r2, [pc, #624]	; (8002af4 <main+0x119c>)
 8002882:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002886:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800288a:	3b01      	subs	r3, #1
 800288c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8002890:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1eb      	bne.n	8002870 <main+0xf18>
						hT[0] = (uint16_t) (temperature * 10);
 8002898:	4b97      	ldr	r3, [pc, #604]	; (8002af8 <main+0x11a0>)
 800289a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	4b96      	ldr	r3, [pc, #600]	; (8002afc <main+0x11a4>)
 80028a4:	f016 fab0 	bl	8018e08 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f016 fd82 	bl	80193b8 <__aeabi_d2uiz>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b8e      	ldr	r3, [pc, #568]	; (8002af4 <main+0x119c>)
 80028bc:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80028be:	2300      	movs	r3, #0
 80028c0:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80028c4:	e02e      	b.n	8002924 <main+0xfcc>
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80028c6:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	b29c      	uxth	r4, r3
 80028d4:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028d8:	4a86      	ldr	r2, [pc, #536]	; (8002af4 <main+0x119c>)
 80028da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe ffdf 	bl	80018a4 <byteL>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4619      	mov	r1, r3
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7fd fcfa 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80028f0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80028fc:	b29c      	uxth	r4, r3
 80028fe:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002902:	4a7c      	ldr	r2, [pc, #496]	; (8002af4 <main+0x119c>)
 8002904:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe ffd7 	bl	80018be <byteH>
 8002910:	4603      	mov	r3, r0
 8002912:	4619      	mov	r1, r3
 8002914:	4620      	mov	r0, r4
 8002916:	f7fd fce5 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800291a:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800291e:	3301      	adds	r3, #1
 8002920:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8002924:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002928:	2b9a      	cmp	r3, #154	; 0x9a
 800292a:	d9cc      	bls.n	80028c6 <main+0xf6e>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800292c:	2300      	movs	r3, #0
 800292e:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8002932:	e027      	b.n	8002984 <main+0x102c>
 8002934:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002938:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800293c:	b29b      	uxth	r3, r3
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fca4 	bl	8000290 <AT24XX_Read>
 8002948:	4603      	mov	r3, r0
 800294a:	461c      	mov	r4, r3
 800294c:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	b29b      	uxth	r3, r3
 8002954:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002958:	b29b      	uxth	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fc98 	bl	8000290 <AT24XX_Read>
 8002960:	4603      	mov	r3, r0
 8002962:	4619      	mov	r1, r3
 8002964:	4620      	mov	r0, r4
 8002966:	f7fe ffb9 	bl	80018dc <byteS>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002972:	b211      	sxth	r1, r2
 8002974:	4a62      	ldr	r2, [pc, #392]	; (8002b00 <main+0x11a8>)
 8002976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800297a:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 800297e:	3301      	adds	r3, #1
 8002980:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8002984:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002988:	2b9a      	cmp	r3, #154	; 0x9a
 800298a:	d9d3      	bls.n	8002934 <main+0xfdc>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 800298c:	239a      	movs	r3, #154	; 0x9a
 800298e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8002992:	e00f      	b.n	80029b4 <main+0x105c>
 8002994:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8002998:	1e5a      	subs	r2, r3, #1
 800299a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 800299e:	4958      	ldr	r1, [pc, #352]	; (8002b00 <main+0x11a8>)
 80029a0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80029a4:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <main+0x11a8>)
 80029a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80029aa:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80029b4:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1eb      	bne.n	8002994 <main+0x103c>
						hH[0] = (uint16_t) (humidity * 10);
 80029bc:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <main+0x11ac>)
 80029be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b4d      	ldr	r3, [pc, #308]	; (8002afc <main+0x11a4>)
 80029c8:	f016 fa1e 	bl	8018e08 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f016 fcf0 	bl	80193b8 <__aeabi_d2uiz>
 80029d8:	4603      	mov	r3, r0
 80029da:	b29b      	uxth	r3, r3
 80029dc:	b21a      	sxth	r2, r3
 80029de:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <main+0x11a8>)
 80029e0:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80029e8:	e02e      	b.n	8002a48 <main+0x10f0>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80029ea:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80029ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	b29c      	uxth	r4, r3
 80029f8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80029fc:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <main+0x11a8>)
 80029fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe ff4d 	bl	80018a4 <byteL>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7fd fc68 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8002a14:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002a20:	b29c      	uxth	r4, r3
 8002a22:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a26:	4a36      	ldr	r2, [pc, #216]	; (8002b00 <main+0x11a8>)
 8002a28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe ff45 	bl	80018be <byteH>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7fd fc53 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002a3e:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a42:	3301      	adds	r3, #1
 8002a44:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8002a48:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a4c:	2b9a      	cmp	r3, #154	; 0x9a
 8002a4e:	d9cc      	bls.n	80029ea <main+0x1092>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002a56:	e027      	b.n	8002aa8 <main+0x1150>
 8002a58:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a5c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fc12 	bl	8000290 <AT24XX_Read>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461c      	mov	r4, r3
 8002a70:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fc06 	bl	8000290 <AT24XX_Read>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4619      	mov	r1, r3
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7fe ff27 	bl	80018dc <byteS>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a96:	b211      	sxth	r1, r2
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <main+0x11b0>)
 8002a9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002a9e:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002aa8:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002aac:	2b9a      	cmp	r3, #154	; 0x9a
 8002aae:	d9d3      	bls.n	8002a58 <main+0x1100>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8002ab0:	239a      	movs	r3, #154	; 0x9a
 8002ab2:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002ab6:	e00f      	b.n	8002ad8 <main+0x1180>
 8002ab8:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ac2:	4911      	ldr	r1, [pc, #68]	; (8002b08 <main+0x11b0>)
 8002ac4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <main+0x11b0>)
 8002aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ace:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002ad8:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1eb      	bne.n	8002ab8 <main+0x1160>
						hP[0] = (uint16_t)pressure;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <main+0x11b4>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b21a      	sxth	r2, r3
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <main+0x11b0>)
 8002ae8:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002af0:	e03d      	b.n	8002b6e <main+0x1216>
 8002af2:	bf00      	nop
 8002af4:	200005bc 	.word	0x200005bc
 8002af8:	20000578 	.word	0x20000578
 8002afc:	40240000 	.word	0x40240000
 8002b00:	200006f4 	.word	0x200006f4
 8002b04:	20000588 	.word	0x20000588
 8002b08:	2000082c 	.word	0x2000082c
 8002b0c:	200005b8 	.word	0x200005b8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8002b10:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b14:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	b29c      	uxth	r4, r3
 8002b1e:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b22:	4abc      	ldr	r2, [pc, #752]	; (8002e14 <main+0x14bc>)
 8002b24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe feba 	bl	80018a4 <byteL>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4619      	mov	r1, r3
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7fd fbd5 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002b3a:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002b46:	b29c      	uxth	r4, r3
 8002b48:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b4c:	4ab1      	ldr	r2, [pc, #708]	; (8002e14 <main+0x14bc>)
 8002b4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe feb2 	bl	80018be <byteH>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7fd fbc0 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002b64:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002b6e:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b72:	2b9a      	cmp	r3, #154	; 0x9a
 8002b74:	d9cc      	bls.n	8002b10 <main+0x11b8>
						}

						viewGraphs = 0;
 8002b76:	4ba8      	ldr	r3, [pc, #672]	; (8002e18 <main+0x14c0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002b7c:	23ff      	movs	r3, #255	; 0xff
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2301      	movs	r3, #1
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2381      	movs	r3, #129	; 0x81
 8002b86:	229d      	movs	r2, #157	; 0x9d
 8002b88:	21bd      	movs	r1, #189	; 0xbd
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f001 fd54 	bl	8004638 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002b90:	4ba2      	ldr	r3, [pc, #648]	; (8002e1c <main+0x14c4>)
 8002b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4ba1      	ldr	r3, [pc, #644]	; (8002e20 <main+0x14c8>)
 8002b9c:	f016 f934 	bl	8018e08 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f016 fbde 	bl	8019368 <__aeabi_d2iz>
 8002bac:	4603      	mov	r3, r0
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002bbc:	21e2      	movs	r1, #226	; 0xe2
 8002bbe:	f7fe fe45 	bl	800184c <map>
 8002bc2:	ec53 2b10 	vmov	r2, r3, d0
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f016 fbcd 	bl	8019368 <__aeabi_d2iz>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002bd4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da02      	bge.n	8002be2 <main+0x128a>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002be2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002be6:	2b7f      	cmp	r3, #127	; 0x7f
 8002be8:	dd02      	ble.n	8002bf0 <main+0x1298>
 8002bea:	237f      	movs	r3, #127	; 0x7f
 8002bec:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f240 133d 	movw	r3, #317	; 0x13d
 8002bfc:	229e      	movs	r2, #158	; 0x9e
 8002bfe:	21bf      	movs	r1, #191	; 0xbf
 8002c00:	209e      	movs	r0, #158	; 0x9e
 8002c02:	f001 fbb1 	bl	8004368 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c06:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d023      	beq.n	8002c56 <main+0x12fe>
 8002c0e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002c12:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c16:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c18:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c1c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c2a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c2e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f001 fa73 	bl	8004126 <RGB>
 8002c40:	4603      	mov	r3, r0
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	2301      	movs	r3, #1
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f240 133d 	movw	r3, #317	; 0x13d
 8002c4c:	229e      	movs	r2, #158	; 0x9e
 8002c4e:	4621      	mov	r1, r4
 8002c50:	209e      	movs	r0, #158	; 0x9e
 8002c52:	f001 fb89 	bl	8004368 <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8002c56:	23ff      	movs	r3, #255	; 0xff
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2381      	movs	r3, #129	; 0x81
 8002c60:	229d      	movs	r2, #157	; 0x9d
 8002c62:	21bd      	movs	r1, #189	; 0xbd
 8002c64:	20a1      	movs	r0, #161	; 0xa1
 8002c66:	f001 fce7 	bl	8004638 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <main+0x14cc>)
 8002c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <main+0x14c8>)
 8002c76:	f016 f8c7 	bl	8018e08 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f016 fb71 	bl	8019368 <__aeabi_d2iz>
 8002c86:	4603      	mov	r3, r0
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	b298      	uxth	r0, r3
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2300      	movs	r3, #0
 8002c92:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002c96:	2150      	movs	r1, #80	; 0x50
 8002c98:	f7fe fdd8 	bl	800184c <map>
 8002c9c:	ec53 2b10 	vmov	r2, r3, d0
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f016 fb60 	bl	8019368 <__aeabi_d2iz>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002cae:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da02      	bge.n	8002cbc <main+0x1364>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002cbc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc2:	dd02      	ble.n	8002cca <main+0x1372>
 8002cc4:	237f      	movs	r3, #127	; 0x7f
 8002cc6:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f240 133d 	movw	r3, #317	; 0x13d
 8002cd6:	f240 123d 	movw	r2, #317	; 0x13d
 8002cda:	21bf      	movs	r1, #191	; 0xbf
 8002cdc:	f240 103d 	movw	r0, #317	; 0x13d
 8002ce0:	f001 fb42 	bl	8004368 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002ce4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d025      	beq.n	8002d38 <main+0x13e0>
 8002cec:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002cf0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002cf4:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002cf6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cfa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d08:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d0c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f001 fa04 	bl	8004126 <RGB>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2301      	movs	r3, #1
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	f240 133d 	movw	r3, #317	; 0x13d
 8002d2a:	f240 123d 	movw	r2, #317	; 0x13d
 8002d2e:	4621      	mov	r1, r4
 8002d30:	f240 103d 	movw	r0, #317	; 0x13d
 8002d34:	f001 fb18 	bl	8004368 <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8002d38:	23ff      	movs	r3, #255	; 0xff
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	2381      	movs	r3, #129	; 0x81
 8002d42:	229d      	movs	r2, #157	; 0x9d
 8002d44:	21bd      	movs	r1, #189	; 0xbd
 8002d46:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002d4a:	f001 fc75 	bl	8004638 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <main+0x14d0>)
 8002d50:	8818      	ldrh	r0, [r3, #0]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	f240 4229 	movw	r2, #1065	; 0x429
 8002d5c:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002d60:	f7fe fd74 	bl	800184c <map>
 8002d64:	ec53 2b10 	vmov	r2, r3, d0
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f016 fafc 	bl	8019368 <__aeabi_d2iz>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002d76:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da02      	bge.n	8002d84 <main+0x142c>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002d84:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d88:	2b7f      	cmp	r3, #127	; 0x7f
 8002d8a:	dd02      	ble.n	8002d92 <main+0x143a>
 8002d8c:	237f      	movs	r3, #127	; 0x7f
 8002d8e:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002d92:	2300      	movs	r3, #0
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	2301      	movs	r3, #1
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	f240 133d 	movw	r3, #317	; 0x13d
 8002d9e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002da2:	21bf      	movs	r1, #191	; 0xbf
 8002da4:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002da8:	f001 fade 	bl	8004368 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dac:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d025      	beq.n	8002e00 <main+0x14a8>
 8002db4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002db8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002dbc:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002dbe:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dc2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002dd0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dd4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	2100      	movs	r1, #0
 8002de2:	f001 f9a0 	bl	8004126 <RGB>
 8002de6:	4603      	mov	r3, r0
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	2301      	movs	r3, #1
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f240 133d 	movw	r3, #317	; 0x13d
 8002df2:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002df6:	4621      	mov	r1, r4
 8002df8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002dfc:	f001 fab4 	bl	8004368 <LCD_Line>

					if (!viewGraphs) {
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <main+0x14c0>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 8192 	bne.w	800312e <main+0x17d6>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002e10:	e07b      	b.n	8002f0a <main+0x15b2>
 8002e12:	bf00      	nop
 8002e14:	2000082c 	.word	0x2000082c
 8002e18:	2000056c 	.word	0x2000056c
 8002e1c:	20000578 	.word	0x20000578
 8002e20:	40240000 	.word	0x40240000
 8002e24:	20000588 	.word	0x20000588
 8002e28:	200005b8 	.word	0x200005b8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002e2c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e30:	4ab3      	ldr	r2, [pc, #716]	; (8003100 <main+0x17a8>)
 8002e32:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e36:	b298      	uxth	r0, r3
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002e42:	21e2      	movs	r1, #226	; 0xe2
 8002e44:	f7fe fd02 	bl	800184c <map>
 8002e48:	ec53 2b10 	vmov	r2, r3, d0
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f016 fa8a 	bl	8019368 <__aeabi_d2iz>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002e5a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	da02      	bge.n	8002e68 <main+0x1510>
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002e68:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e6e:	dd02      	ble.n	8002e76 <main+0x151e>
 8002e70:	237f      	movs	r3, #127	; 0x7f
 8002e72:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002e76:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e7a:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e7e:	b298      	uxth	r0, r3
 8002e80:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e84:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	2301      	movs	r3, #1
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	f240 133d 	movw	r3, #317	; 0x13d
 8002e96:	21bf      	movs	r1, #191	; 0xbf
 8002e98:	f001 fa66 	bl	8004368 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002e9c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02d      	beq.n	8002f00 <main+0x15a8>
 8002ea4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ea8:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002eac:	b29c      	uxth	r4, r3
 8002eae:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002eb2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002eb6:	b29d      	uxth	r5, r3
 8002eb8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ebc:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ec0:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ec2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ec6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ed4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002ed8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f001 f91e 	bl	8004126 <RGB>
 8002eea:	4603      	mov	r3, r0
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	f240 133d 	movw	r3, #317	; 0x13d
 8002ef6:	4632      	mov	r2, r6
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4620      	mov	r0, r4
 8002efc:	f001 fa34 	bl	8004368 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002f00:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002f0a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002f0e:	2b9a      	cmp	r3, #154	; 0x9a
 8002f10:	d98c      	bls.n	8002e2c <main+0x14d4>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8002f18:	e06e      	b.n	8002ff8 <main+0x16a0>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002f1a:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f1e:	4a79      	ldr	r2, [pc, #484]	; (8003104 <main+0x17ac>)
 8002f20:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002f24:	b298      	uxth	r0, r3
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002f30:	2150      	movs	r1, #80	; 0x50
 8002f32:	f7fe fc8b 	bl	800184c <map>
 8002f36:	ec53 2b10 	vmov	r2, r3, d0
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f016 fa13 	bl	8019368 <__aeabi_d2iz>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002f48:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	da02      	bge.n	8002f56 <main+0x15fe>
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002f56:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f5c:	dd02      	ble.n	8002f64 <main+0x160c>
 8002f5e:	237f      	movs	r3, #127	; 0x7f
 8002f60:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002f64:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f68:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f6c:	b298      	uxth	r0, r3
 8002f6e:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f72:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	2300      	movs	r3, #0
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f240 133d 	movw	r3, #317	; 0x13d
 8002f84:	21bf      	movs	r1, #191	; 0xbf
 8002f86:	f001 f9ef 	bl	8004368 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002f8a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02d      	beq.n	8002fee <main+0x1696>
 8002f92:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f96:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f9a:	b29c      	uxth	r4, r3
 8002f9c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002fa0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002fa4:	b29d      	uxth	r5, r3
 8002fa6:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002faa:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002fae:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fb0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fb4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fc2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fc6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	f001 f8a7 	bl	8004126 <RGB>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f240 133d 	movw	r3, #317	; 0x13d
 8002fe4:	4632      	mov	r2, r6
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f001 f9bd 	bl	8004368 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002fee:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8002ff8:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002ffc:	2b9a      	cmp	r3, #154	; 0x9a
 8002ffe:	d98c      	bls.n	8002f1a <main+0x15c2>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8003000:	2300      	movs	r3, #0
 8003002:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 8003006:	e073      	b.n	80030f0 <main+0x1798>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8003008:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800300c:	4a3e      	ldr	r2, [pc, #248]	; (8003108 <main+0x17b0>)
 800300e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003012:	b298      	uxth	r0, r3
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2300      	movs	r3, #0
 800301a:	f240 4229 	movw	r2, #1065	; 0x429
 800301e:	f240 31a9 	movw	r1, #937	; 0x3a9
 8003022:	f7fe fc13 	bl	800184c <map>
 8003026:	ec53 2b10 	vmov	r2, r3, d0
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f016 f99b 	bl	8019368 <__aeabi_d2iz>
 8003032:	4603      	mov	r3, r0
 8003034:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8003038:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 800303c:	2b00      	cmp	r3, #0
 800303e:	da02      	bge.n	8003046 <main+0x16ee>
 8003040:	2300      	movs	r3, #0
 8003042:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8003046:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 800304a:	2b7f      	cmp	r3, #127	; 0x7f
 800304c:	dd02      	ble.n	8003054 <main+0x16fc>
 800304e:	237f      	movs	r3, #127	; 0x7f
 8003050:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8003054:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003058:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 800305c:	3301      	adds	r3, #1
 800305e:	b298      	uxth	r0, r3
 8003060:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003064:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8003068:	3301      	adds	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	2301      	movs	r3, #1
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f240 133d 	movw	r3, #317	; 0x13d
 8003078:	21bf      	movs	r1, #191	; 0xbf
 800307a:	f001 f975 	bl	8004368 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 800307e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003082:	2b00      	cmp	r3, #0
 8003084:	d02f      	beq.n	80030e6 <main+0x178e>
 8003086:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800308a:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 800308e:	3301      	adds	r3, #1
 8003090:	b29c      	uxth	r4, r3
 8003092:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8003096:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800309a:	b29d      	uxth	r5, r3
 800309c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030a0:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 80030a4:	3301      	adds	r3, #1
 80030a6:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030a8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80030ac:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030ba:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80030be:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f001 f82b 	bl	8004126 <RGB>
 80030d0:	4603      	mov	r3, r0
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	2301      	movs	r3, #1
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	f240 133d 	movw	r3, #317	; 0x13d
 80030dc:	4632      	mov	r2, r6
 80030de:	4629      	mov	r1, r5
 80030e0:	4620      	mov	r0, r4
 80030e2:	f001 f941 	bl	8004368 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 80030e6:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030ea:	3301      	adds	r3, #1
 80030ec:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 80030f0:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030f4:	2b9a      	cmp	r3, #154	; 0x9a
 80030f6:	d987      	bls.n	8003008 <main+0x16b0>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80030fe:	e00e      	b.n	800311e <main+0x17c6>
 8003100:	200005bc 	.word	0x200005bc
 8003104:	200006f4 	.word	0x200006f4
 8003108:	2000082c 	.word	0x2000082c
 800310c:	4a8e      	ldr	r2, [pc, #568]	; (8003348 <main+0x19f0>)
 800310e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003112:	6353      	str	r3, [r2, #52]	; 0x34
 8003114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003118:	3301      	adds	r3, #1
 800311a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800311e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d9f1      	bls.n	800310c <main+0x17b4>
						viewGraphs = 1;
 8003128:	4b88      	ldr	r3, [pc, #544]	; (800334c <main+0x19f4>)
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <main+0x19f8>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8393 	beq.w	800385e <main+0x1f06>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8003138:	2202      	movs	r2, #2
 800313a:	4986      	ldr	r1, [pc, #536]	; (8003354 <main+0x19fc>)
 800313c:	4886      	ldr	r0, [pc, #536]	; (8003358 <main+0x1a00>)
 800313e:	f01b f83f 	bl	801e1c0 <memcmp>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 808a 	bne.w	800325e <main+0x1906>

					char val[2];

					val[0] = rx_buffer[2];
 800314a:	4b83      	ldr	r3, [pc, #524]	; (8003358 <main+0x1a00>)
 800314c:	789b      	ldrb	r3, [r3, #2]
 800314e:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[3];
 8003152:	4b81      	ldr	r3, [pc, #516]	; (8003358 <main+0x1a00>)
 8003154:	78db      	ldrb	r3, [r3, #3]
 8003156:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setHrs(atoi(val));
 800315a:	f107 0320 	add.w	r3, r7, #32
 800315e:	4618      	mov	r0, r3
 8003160:	f016 fb7b 	bl	801985a <atoi>
 8003164:	4603      	mov	r3, r0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd ff8d 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 800316e:	4b7a      	ldr	r3, [pc, #488]	; (8003358 <main+0x1a00>)
 8003170:	791b      	ldrb	r3, [r3, #4]
 8003172:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[5];
 8003176:	4b78      	ldr	r3, [pc, #480]	; (8003358 <main+0x1a00>)
 8003178:	795b      	ldrb	r3, [r3, #5]
 800317a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMin(atoi(val));
 800317e:	f107 0320 	add.w	r3, r7, #32
 8003182:	4618      	mov	r0, r3
 8003184:	f016 fb69 	bl	801985a <atoi>
 8003188:	4603      	mov	r3, r0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd ff5b 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setSec(atoi(val));
 800319e:	f107 0320 	add.w	r3, r7, #32
 80031a2:	4618      	mov	r0, r3
 80031a4:	f016 fb59 	bl	801985a <atoi>
 80031a8:	4603      	mov	r3, r0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd ff2b 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 80031b2:	4b69      	ldr	r3, [pc, #420]	; (8003358 <main+0x1a00>)
 80031b4:	799b      	ldrb	r3, [r3, #6]
 80031b6:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[7];
 80031ba:	4b67      	ldr	r3, [pc, #412]	; (8003358 <main+0x1a00>)
 80031bc:	79db      	ldrb	r3, [r3, #7]
 80031be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDate(atoi(val));
 80031c2:	f107 0320 	add.w	r3, r7, #32
 80031c6:	4618      	mov	r0, r3
 80031c8:	f016 fb47 	bl	801985a <atoi>
 80031cc:	4603      	mov	r3, r0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd ff99 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 80031d6:	4b60      	ldr	r3, [pc, #384]	; (8003358 <main+0x1a00>)
 80031d8:	7a1b      	ldrb	r3, [r3, #8]
 80031da:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[9];
 80031de:	4b5e      	ldr	r3, [pc, #376]	; (8003358 <main+0x1a00>)
 80031e0:	7a5b      	ldrb	r3, [r3, #9]
 80031e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMonth(atoi(val));
 80031e6:	f107 0320 	add.w	r3, r7, #32
 80031ea:	4618      	mov	r0, r3
 80031ec:	f016 fb35 	bl	801985a <atoi>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd ffa7 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <main+0x1a00>)
 80031fc:	7a9b      	ldrb	r3, [r3, #10]
 80031fe:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[11];
 8003202:	4b55      	ldr	r3, [pc, #340]	; (8003358 <main+0x1a00>)
 8003204:	7adb      	ldrb	r3, [r3, #11]
 8003206:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setYear(atoi(val));
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	4618      	mov	r0, r3
 8003210:	f016 fb23 	bl	801985a <atoi>
 8003214:	4603      	mov	r3, r0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd ffb5 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <main+0x1a00>)
 8003220:	7b1b      	ldrb	r3, [r3, #12]
 8003222:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDay(atoi(val));
 8003226:	f107 0320 	add.w	r3, r7, #32
 800322a:	4618      	mov	r0, r3
 800322c:	f016 fb15 	bl	801985a <atoi>
 8003230:	4603      	mov	r3, r0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd ff47 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003240:	e008      	b.n	8003254 <main+0x18fc>
 8003242:	4a41      	ldr	r2, [pc, #260]	; (8003348 <main+0x19f0>)
 8003244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003248:	6353      	str	r3, [r2, #52]	; 0x34
 800324a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800324e:	3301      	adds	r3, #1
 8003250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d9f1      	bls.n	8003242 <main+0x18ea>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 800325e:	2202      	movs	r2, #2
 8003260:	493e      	ldr	r1, [pc, #248]	; (800335c <main+0x1a04>)
 8003262:	483d      	ldr	r0, [pc, #244]	; (8003358 <main+0x1a00>)
 8003264:	f01a ffac 	bl	801e1c0 <memcmp>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d122      	bne.n	80032b4 <main+0x195c>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 800326e:	2300      	movs	r3, #0
 8003270:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 8003274:	e00a      	b.n	800328c <main+0x1934>
 8003276:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f831 	bl	80002e4 <AT24XX_Update>
 8003282:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003286:	3301      	adds	r3, #1
 8003288:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800328c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003294:	d3ef      	bcc.n	8003276 <main+0x191e>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <main+0x1a08>)
 8003298:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800329c:	461d      	mov	r5, r3
 800329e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 80032a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80032aa:	2364      	movs	r3, #100	; 0x64
 80032ac:	2214      	movs	r2, #20
 80032ae:	482d      	ldr	r0, [pc, #180]	; (8003364 <main+0x1a0c>)
 80032b0:	f012 facd 	bl	801584e <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 80032b4:	2202      	movs	r2, #2
 80032b6:	492c      	ldr	r1, [pc, #176]	; (8003368 <main+0x1a10>)
 80032b8:	4827      	ldr	r0, [pc, #156]	; (8003358 <main+0x1a00>)
 80032ba:	f01a ff81 	bl	801e1c0 <memcmp>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 82b7 	bne.w	8003834 <main+0x1edc>

					char valT[4] = { 0 };
 80032c6:	2300      	movs	r3, #0
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80032d0:	e010      	b.n	80032f4 <main+0x199c>
 80032d2:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032d6:	1c9a      	adds	r2, r3, #2
 80032d8:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032dc:	491e      	ldr	r1, [pc, #120]	; (8003358 <main+0x1a00>)
 80032de:	5c8a      	ldrb	r2, [r1, r2]
 80032e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032e4:	443b      	add	r3, r7
 80032e6:	f803 2cb8 	strb.w	r2, [r3, #-184]
 80032ea:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032ee:	3301      	adds	r3, #1
 80032f0:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80032f4:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d9ea      	bls.n	80032d2 <main+0x197a>

					temperatureRemote = atoi(valT);
 80032fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003300:	4618      	mov	r0, r3
 8003302:	f016 faaa 	bl	801985a <atoi>
 8003306:	4603      	mov	r3, r0
 8003308:	4618      	mov	r0, r3
 800330a:	f015 fd13 	bl	8018d34 <__aeabi_i2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4916      	ldr	r1, [pc, #88]	; (800336c <main+0x1a14>)
 8003314:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <main+0x1a14>)
 800331a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <main+0x1a18>)
 8003324:	f015 fe9a 	bl	801905c <__aeabi_ddiv>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	490f      	ldr	r1, [pc, #60]	; (800336c <main+0x1a14>)
 800332e:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <main+0x1a1c>)
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800333a:	2300      	movs	r3, #0
 800333c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8003340:	2300      	movs	r3, #0
 8003342:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8003346:	e028      	b.n	800339a <main+0x1a42>
 8003348:	40010000 	.word	0x40010000
 800334c:	2000056c 	.word	0x2000056c
 8003350:	20000974 	.word	0x20000974
 8003354:	08052124 	.word	0x08052124
 8003358:	20000964 	.word	0x20000964
 800335c:	08052128 	.word	0x08052128
 8003360:	08052160 	.word	0x08052160
 8003364:	200004d8 	.word	0x200004d8
 8003368:	0805212c 	.word	0x0805212c
 800336c:	20000598 	.word	0x20000598
 8003370:	40240000 	.word	0x40240000
 8003374:	08051f04 	.word	0x08051f04
 8003378:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800337c:	1d9a      	adds	r2, r3, #6
 800337e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003382:	499d      	ldr	r1, [pc, #628]	; (80035f8 <main+0x1ca0>)
 8003384:	5c8a      	ldrb	r2, [r1, r2]
 8003386:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800338a:	443b      	add	r3, r7
 800338c:	f803 2cbc 	strb.w	r2, [r3, #-188]
 8003390:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003394:	3301      	adds	r3, #1
 8003396:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800339a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d9ea      	bls.n	8003378 <main+0x1a20>

					humidityRemote = atoi(valH);
 80033a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033a6:	4618      	mov	r0, r3
 80033a8:	f016 fa57 	bl	801985a <atoi>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f015 fcc0 	bl	8018d34 <__aeabi_i2d>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4990      	ldr	r1, [pc, #576]	; (80035fc <main+0x1ca4>)
 80033ba:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 80033be:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <main+0x1ca4>)
 80033c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <main+0x1ca8>)
 80033ca:	f015 fe47 	bl	801905c <__aeabi_ddiv>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	498a      	ldr	r1, [pc, #552]	; (80035fc <main+0x1ca4>)
 80033d4:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80033d8:	4b8a      	ldr	r3, [pc, #552]	; (8003604 <main+0x1cac>)
 80033da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033de:	4b8a      	ldr	r3, [pc, #552]	; (8003608 <main+0x1cb0>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f015 ff78 	bl	80192d8 <__aeabi_dcmpeq>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d115      	bne.n	800341a <main+0x1ac2>
 80033ee:	4b85      	ldr	r3, [pc, #532]	; (8003604 <main+0x1cac>)
 80033f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	4b84      	ldr	r3, [pc, #528]	; (800360c <main+0x1cb4>)
 80033fa:	f015 ff77 	bl	80192ec <__aeabi_dcmplt>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <main+0x1ac2>
 8003404:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <main+0x1cac>)
 8003406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	4b80      	ldr	r3, [pc, #512]	; (8003610 <main+0x1cb8>)
 8003410:	f015 ff8a 	bl	8019328 <__aeabi_dcmpgt>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <main+0x1af4>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 800341a:	4b78      	ldr	r3, [pc, #480]	; (80035fc <main+0x1ca4>)
 800341c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003420:	4b7c      	ldr	r3, [pc, #496]	; (8003614 <main+0x1cbc>)
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003426:	f015 ff57 	bl	80192d8 <__aeabi_dcmpeq>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 8201 	bne.w	8003834 <main+0x1edc>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003432:	4b72      	ldr	r3, [pc, #456]	; (80035fc <main+0x1ca4>)
 8003434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	f015 ff72 	bl	8019328 <__aeabi_dcmpgt>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 81f4 	beq.w	8003834 <main+0x1edc>

						remoteSensorLastUpdate = 0;
 800344c:	4b72      	ldr	r3, [pc, #456]	; (8003618 <main+0x1cc0>)
 800344e:	2200      	movs	r2, #0
 8003450:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 8003452:	4b72      	ldr	r3, [pc, #456]	; (800361c <main+0x1cc4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800345c:	4970      	ldr	r1, [pc, #448]	; (8003620 <main+0x1cc8>)
 800345e:	4618      	mov	r0, r3
 8003460:	f017 f8b2 	bl	801a5c8 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003464:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003468:	2300      	movs	r3, #0
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	2301      	movs	r3, #1
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	4b6c      	ldr	r3, [pc, #432]	; (8003624 <main+0x1ccc>)
 8003472:	2128      	movs	r1, #40	; 0x28
 8003474:	f240 1077 	movw	r0, #375	; 0x177
 8003478:	f002 f892 	bl	80055a0 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <main+0x1cb0>)
 800347e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	4b68      	ldr	r3, [pc, #416]	; (8003628 <main+0x1cd0>)
 8003488:	f015 ff3a 	bl	8019300 <__aeabi_dcmple>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d014      	beq.n	80034bc <main+0x1b64>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003492:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <main+0x1cb0>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800349c:	4963      	ldr	r1, [pc, #396]	; (800362c <main+0x1cd4>)
 800349e:	f017 f893 	bl	801a5c8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80034a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80034a6:	2300      	movs	r3, #0
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2301      	movs	r3, #1
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <main+0x1ccc>)
 80034b0:	215a      	movs	r1, #90	; 0x5a
 80034b2:	f240 1061 	movw	r0, #353	; 0x161
 80034b6:	f002 f873 	bl	80055a0 <LCD_Font>
 80034ba:	e076      	b.n	80035aa <main+0x1c52>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <main+0x1cb0>)
 80034be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f015 ff0f 	bl	80192ec <__aeabi_dcmplt>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01f      	beq.n	8003514 <main+0x1bbc>
 80034d4:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <main+0x1cb0>)
 80034d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	4b52      	ldr	r3, [pc, #328]	; (8003628 <main+0x1cd0>)
 80034e0:	f015 ff22 	bl	8019328 <__aeabi_dcmpgt>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d014      	beq.n	8003514 <main+0x1bbc>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80034ea:	4b47      	ldr	r3, [pc, #284]	; (8003608 <main+0x1cb0>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034f4:	494d      	ldr	r1, [pc, #308]	; (800362c <main+0x1cd4>)
 80034f6:	f017 f867 	bl	801a5c8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80034fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2301      	movs	r3, #1
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <main+0x1ccc>)
 8003508:	215a      	movs	r1, #90	; 0x5a
 800350a:	f240 1081 	movw	r0, #385	; 0x181
 800350e:	f002 f847 	bl	80055a0 <LCD_Font>
 8003512:	e04a      	b.n	80035aa <main+0x1c52>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <main+0x1cb0>)
 8003516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	f015 ff01 	bl	8019328 <__aeabi_dcmpgt>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01f      	beq.n	800356c <main+0x1c14>
 800352c:	4b36      	ldr	r3, [pc, #216]	; (8003608 <main+0x1cb0>)
 800352e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	4b32      	ldr	r3, [pc, #200]	; (8003600 <main+0x1ca8>)
 8003538:	f015 fed8 	bl	80192ec <__aeabi_dcmplt>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d014      	beq.n	800356c <main+0x1c14>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <main+0x1cb0>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800354c:	4938      	ldr	r1, [pc, #224]	; (8003630 <main+0x1cd8>)
 800354e:	f017 f83b 	bl	801a5c8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003552:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003556:	2300      	movs	r3, #0
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2301      	movs	r3, #1
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	4b31      	ldr	r3, [pc, #196]	; (8003624 <main+0x1ccc>)
 8003560:	215a      	movs	r1, #90	; 0x5a
 8003562:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003566:	f002 f81b 	bl	80055a0 <LCD_Font>
 800356a:	e01e      	b.n	80035aa <main+0x1c52>
						}
						else if (temperatureRemoteLast >= 10) {
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <main+0x1cb0>)
 800356e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <main+0x1ca8>)
 8003578:	f015 fecc 	bl	8019314 <__aeabi_dcmpge>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d013      	beq.n	80035aa <main+0x1c52>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <main+0x1cb0>)
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800358c:	4928      	ldr	r1, [pc, #160]	; (8003630 <main+0x1cd8>)
 800358e:	f017 f81b 	bl	801a5c8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003592:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003596:	2300      	movs	r3, #0
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	2301      	movs	r3, #1
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <main+0x1ccc>)
 80035a0:	215a      	movs	r1, #90	; 0x5a
 80035a2:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80035a6:	f001 fffb 	bl	80055a0 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <main+0x1cac>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	4915      	ldr	r1, [pc, #84]	; (8003608 <main+0x1cb0>)
 80035b2:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <main+0x1cb0>)
 80035b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	4b19      	ldr	r3, [pc, #100]	; (8003628 <main+0x1cd0>)
 80035c2:	f015 fe9d 	bl	8019300 <__aeabi_dcmple>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d033      	beq.n	8003634 <main+0x1cdc>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <main+0x1cb0>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035d6:	4915      	ldr	r1, [pc, #84]	; (800362c <main+0x1cd4>)
 80035d8:	f016 fff6 	bl	801a5c8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80035dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2301      	movs	r3, #1
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <main+0x1ccc>)
 80035ec:	215a      	movs	r1, #90	; 0x5a
 80035ee:	f240 1061 	movw	r0, #353	; 0x161
 80035f2:	f001 ffd5 	bl	80055a0 <LCD_Font>
 80035f6:	e097      	b.n	8003728 <main+0x1dd0>
 80035f8:	20000964 	.word	0x20000964
 80035fc:	200005a8 	.word	0x200005a8
 8003600:	40240000 	.word	0x40240000
 8003604:	20000598 	.word	0x20000598
 8003608:	200005a0 	.word	0x200005a0
 800360c:	40554000 	.word	0x40554000
 8003610:	c0440000 	.word	0xc0440000
 8003614:	200005b0 	.word	0x200005b0
 8003618:	20000004 	.word	0x20000004
 800361c:	20000000 	.word	0x20000000
 8003620:	080520e4 	.word	0x080520e4
 8003624:	08029860 	.word	0x08029860
 8003628:	c0240000 	.word	0xc0240000
 800362c:	08052130 	.word	0x08052130
 8003630:	08052138 	.word	0x08052138
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003634:	4bac      	ldr	r3, [pc, #688]	; (80038e8 <main+0x1f90>)
 8003636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f015 fe53 	bl	80192ec <__aeabi_dcmplt>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <main+0x1d36>
 800364c:	4ba6      	ldr	r3, [pc, #664]	; (80038e8 <main+0x1f90>)
 800364e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	4ba5      	ldr	r3, [pc, #660]	; (80038ec <main+0x1f94>)
 8003658:	f015 fe66 	bl	8019328 <__aeabi_dcmpgt>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d015      	beq.n	800368e <main+0x1d36>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003662:	4ba1      	ldr	r3, [pc, #644]	; (80038e8 <main+0x1f90>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800366c:	49a0      	ldr	r1, [pc, #640]	; (80038f0 <main+0x1f98>)
 800366e:	f016 ffab 	bl	801a5c8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003672:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	2301      	movs	r3, #1
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4b9c      	ldr	r3, [pc, #624]	; (80038f4 <main+0x1f9c>)
 8003682:	215a      	movs	r1, #90	; 0x5a
 8003684:	f240 1081 	movw	r0, #385	; 0x181
 8003688:	f001 ff8a 	bl	80055a0 <LCD_Font>
 800368c:	e04c      	b.n	8003728 <main+0x1dd0>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800368e:	4b96      	ldr	r3, [pc, #600]	; (80038e8 <main+0x1f90>)
 8003690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	f015 fe44 	bl	8019328 <__aeabi_dcmpgt>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d020      	beq.n	80036e8 <main+0x1d90>
 80036a6:	4b90      	ldr	r3, [pc, #576]	; (80038e8 <main+0x1f90>)
 80036a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	4b91      	ldr	r3, [pc, #580]	; (80038f8 <main+0x1fa0>)
 80036b2:	f015 fe1b 	bl	80192ec <__aeabi_dcmplt>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <main+0x1d90>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80036bc:	4b8a      	ldr	r3, [pc, #552]	; (80038e8 <main+0x1f90>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036c6:	498d      	ldr	r1, [pc, #564]	; (80038fc <main+0x1fa4>)
 80036c8:	f016 ff7e 	bl	801a5c8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80036cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80036d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2301      	movs	r3, #1
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4b86      	ldr	r3, [pc, #536]	; (80038f4 <main+0x1f9c>)
 80036dc:	215a      	movs	r1, #90	; 0x5a
 80036de:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80036e2:	f001 ff5d 	bl	80055a0 <LCD_Font>
 80036e6:	e01f      	b.n	8003728 <main+0x1dd0>
						}
						else if (temperatureRemoteLast >= 10) {
 80036e8:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <main+0x1f90>)
 80036ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	4b81      	ldr	r3, [pc, #516]	; (80038f8 <main+0x1fa0>)
 80036f4:	f015 fe0e 	bl	8019314 <__aeabi_dcmpge>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d014      	beq.n	8003728 <main+0x1dd0>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80036fe:	4b7a      	ldr	r3, [pc, #488]	; (80038e8 <main+0x1f90>)
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003708:	497c      	ldr	r1, [pc, #496]	; (80038fc <main+0x1fa4>)
 800370a:	f016 ff5d 	bl	801a5c8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800370e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	2301      	movs	r3, #1
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	4b75      	ldr	r3, [pc, #468]	; (80038f4 <main+0x1f9c>)
 800371e:	215a      	movs	r1, #90	; 0x5a
 8003720:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003724:	f001 ff3c 	bl	80055a0 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 8003728:	4b75      	ldr	r3, [pc, #468]	; (8003900 <main+0x1fa8>)
 800372a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	4b71      	ldr	r3, [pc, #452]	; (80038f8 <main+0x1fa0>)
 8003734:	f015 fdee 	bl	8019314 <__aeabi_dcmpge>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <main+0x1e10>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800373e:	4b70      	ldr	r3, [pc, #448]	; (8003900 <main+0x1fa8>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003748:	4969      	ldr	r1, [pc, #420]	; (80038f0 <main+0x1f98>)
 800374a:	f016 ff3d 	bl	801a5c8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800374e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003752:	2300      	movs	r3, #0
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	2301      	movs	r3, #1
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4b66      	ldr	r3, [pc, #408]	; (80038f4 <main+0x1f9c>)
 800375c:	2128      	movs	r1, #40	; 0x28
 800375e:	f240 1073 	movw	r0, #371	; 0x173
 8003762:	f001 ff1d 	bl	80055a0 <LCD_Font>
 8003766:	e01e      	b.n	80037a6 <main+0x1e4e>
						}
						else if (humidityRemoteLast < 10) {
 8003768:	4b65      	ldr	r3, [pc, #404]	; (8003900 <main+0x1fa8>)
 800376a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	4b61      	ldr	r3, [pc, #388]	; (80038f8 <main+0x1fa0>)
 8003774:	f015 fdba 	bl	80192ec <__aeabi_dcmplt>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <main+0x1e4e>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800377e:	4b60      	ldr	r3, [pc, #384]	; (8003900 <main+0x1fa8>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003788:	4959      	ldr	r1, [pc, #356]	; (80038f0 <main+0x1f98>)
 800378a:	f016 ff1d 	bl	801a5c8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800378e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003792:	2300      	movs	r3, #0
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2301      	movs	r3, #1
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <main+0x1f9c>)
 800379c:	2128      	movs	r1, #40	; 0x28
 800379e:	f240 1093 	movw	r0, #403	; 0x193
 80037a2:	f001 fefd 	bl	80055a0 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 80037a6:	4b57      	ldr	r3, [pc, #348]	; (8003904 <main+0x1fac>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	4954      	ldr	r1, [pc, #336]	; (8003900 <main+0x1fa8>)
 80037ae:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <main+0x1fa8>)
 80037b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b4e      	ldr	r3, [pc, #312]	; (80038f8 <main+0x1fa0>)
 80037be:	f015 fda9 	bl	8019314 <__aeabi_dcmpge>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <main+0x1e9c>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80037c8:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <main+0x1fa8>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80037d2:	4947      	ldr	r1, [pc, #284]	; (80038f0 <main+0x1f98>)
 80037d4:	f016 fef8 	bl	801a5c8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80037d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2301      	movs	r3, #1
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <main+0x1f9c>)
 80037e8:	2128      	movs	r1, #40	; 0x28
 80037ea:	f240 1073 	movw	r0, #371	; 0x173
 80037ee:	f001 fed7 	bl	80055a0 <LCD_Font>
 80037f2:	e01f      	b.n	8003834 <main+0x1edc>
						}
						else if (humidityRemoteLast < 10) {
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <main+0x1fa8>)
 80037f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <main+0x1fa0>)
 8003800:	f015 fd74 	bl	80192ec <__aeabi_dcmplt>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <main+0x1edc>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <main+0x1fa8>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003814:	4936      	ldr	r1, [pc, #216]	; (80038f0 <main+0x1f98>)
 8003816:	f016 fed7 	bl	801a5c8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 800381a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800381e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	2301      	movs	r3, #1
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <main+0x1f9c>)
 800382a:	2128      	movs	r1, #40	; 0x28
 800382c:	f240 1093 	movw	r0, #403	; 0x193
 8003830:	f001 feb6 	bl	80055a0 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 8003834:	4b34      	ldr	r3, [pc, #208]	; (8003908 <main+0x1fb0>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8003840:	e009      	b.n	8003856 <main+0x1efe>
 8003842:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003846:	4a31      	ldr	r2, [pc, #196]	; (800390c <main+0x1fb4>)
 8003848:	2100      	movs	r1, #0
 800384a:	54d1      	strb	r1, [r2, r3]
 800384c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003850:	3301      	adds	r3, #1
 8003852:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8003856:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d9f1      	bls.n	8003842 <main+0x1eea>
			}

			remoteSensorLastUpdate++;
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <main+0x1fb8>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <main+0x1fb8>)
 8003868:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <main+0x1fb8>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	f240 813e 	bls.w	8003af0 <main+0x2198>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <main+0x1f90>)
 8003876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f015 fd29 	bl	80192d8 <__aeabi_dcmpeq>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 8107 	bne.w	8003a9c <main+0x2144>
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <main+0x1fa8>)
 8003890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	f015 fd1c 	bl	80192d8 <__aeabi_dcmpeq>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 80fa 	bne.w	8003a9c <main+0x2144>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <main+0x1f90>)
 80038aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <main+0x1f94>)
 80038b4:	f015 fd24 	bl	8019300 <__aeabi_dcmple>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02a      	beq.n	8003914 <main+0x1fbc>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <main+0x1f90>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80038c8:	4909      	ldr	r1, [pc, #36]	; (80038f0 <main+0x1f98>)
 80038ca:	f016 fe7d 	bl	801a5c8 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80038ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038d2:	2300      	movs	r3, #0
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	2301      	movs	r3, #1
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <main+0x1f9c>)
 80038dc:	215a      	movs	r1, #90	; 0x5a
 80038de:	f240 1061 	movw	r0, #353	; 0x161
 80038e2:	f001 fe5d 	bl	80055a0 <LCD_Font>
 80038e6:	e08c      	b.n	8003a02 <main+0x20aa>
 80038e8:	200005a0 	.word	0x200005a0
 80038ec:	c0240000 	.word	0xc0240000
 80038f0:	08052130 	.word	0x08052130
 80038f4:	08029860 	.word	0x08029860
 80038f8:	40240000 	.word	0x40240000
 80038fc:	08052138 	.word	0x08052138
 8003900:	200005b0 	.word	0x200005b0
 8003904:	200005a8 	.word	0x200005a8
 8003908:	20000974 	.word	0x20000974
 800390c:	20000964 	.word	0x20000964
 8003910:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003914:	4b79      	ldr	r3, [pc, #484]	; (8003afc <main+0x21a4>)
 8003916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	f015 fce3 	bl	80192ec <__aeabi_dcmplt>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01f      	beq.n	800396c <main+0x2014>
 800392c:	4b73      	ldr	r3, [pc, #460]	; (8003afc <main+0x21a4>)
 800392e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	4b72      	ldr	r3, [pc, #456]	; (8003b00 <main+0x21a8>)
 8003938:	f015 fcf6 	bl	8019328 <__aeabi_dcmpgt>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d014      	beq.n	800396c <main+0x2014>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003942:	4b6e      	ldr	r3, [pc, #440]	; (8003afc <main+0x21a4>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800394c:	496d      	ldr	r1, [pc, #436]	; (8003b04 <main+0x21ac>)
 800394e:	f016 fe3b 	bl	801a5c8 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003952:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003956:	2300      	movs	r3, #0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2301      	movs	r3, #1
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <main+0x21b0>)
 8003960:	215a      	movs	r1, #90	; 0x5a
 8003962:	f240 1081 	movw	r0, #385	; 0x181
 8003966:	f001 fe1b 	bl	80055a0 <LCD_Font>
 800396a:	e04a      	b.n	8003a02 <main+0x20aa>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800396c:	4b63      	ldr	r3, [pc, #396]	; (8003afc <main+0x21a4>)
 800396e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f015 fcd5 	bl	8019328 <__aeabi_dcmpgt>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01f      	beq.n	80039c4 <main+0x206c>
 8003984:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <main+0x21a4>)
 8003986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <main+0x21b4>)
 8003990:	f015 fcac 	bl	80192ec <__aeabi_dcmplt>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d014      	beq.n	80039c4 <main+0x206c>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800399a:	4b58      	ldr	r3, [pc, #352]	; (8003afc <main+0x21a4>)
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80039a4:	495a      	ldr	r1, [pc, #360]	; (8003b10 <main+0x21b8>)
 80039a6:	f016 fe0f 	bl	801a5c8 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039ae:	2300      	movs	r3, #0
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	2301      	movs	r3, #1
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <main+0x21b0>)
 80039b8:	215a      	movs	r1, #90	; 0x5a
 80039ba:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80039be:	f001 fdef 	bl	80055a0 <LCD_Font>
 80039c2:	e01e      	b.n	8003a02 <main+0x20aa>
					}
					else if (temperatureRemoteLast >= 10) {
 80039c4:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <main+0x21a4>)
 80039c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <main+0x21b4>)
 80039d0:	f015 fca0 	bl	8019314 <__aeabi_dcmpge>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d013      	beq.n	8003a02 <main+0x20aa>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80039da:	4b48      	ldr	r3, [pc, #288]	; (8003afc <main+0x21a4>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80039e4:	494a      	ldr	r1, [pc, #296]	; (8003b10 <main+0x21b8>)
 80039e6:	f016 fdef 	bl	801a5c8 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039ee:	2300      	movs	r3, #0
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	2301      	movs	r3, #1
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <main+0x21b0>)
 80039f8:	215a      	movs	r1, #90	; 0x5a
 80039fa:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80039fe:	f001 fdcf 	bl	80055a0 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8003a02:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <main+0x21bc>)
 8003a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <main+0x21b4>)
 8003a0e:	f015 fc81 	bl	8019314 <__aeabi_dcmpge>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d014      	beq.n	8003a42 <main+0x20ea>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a18:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <main+0x21bc>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a22:	4938      	ldr	r1, [pc, #224]	; (8003b04 <main+0x21ac>)
 8003a24:	f016 fdd0 	bl	801a5c8 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a28:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	2301      	movs	r3, #1
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <main+0x21b0>)
 8003a36:	2128      	movs	r1, #40	; 0x28
 8003a38:	f240 1073 	movw	r0, #371	; 0x173
 8003a3c:	f001 fdb0 	bl	80055a0 <LCD_Font>
 8003a40:	e01e      	b.n	8003a80 <main+0x2128>
					}
					else if (humidityRemoteLast < 10) {
 8003a42:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <main+0x21bc>)
 8003a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <main+0x21b4>)
 8003a4e:	f015 fc4d 	bl	80192ec <__aeabi_dcmplt>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <main+0x2128>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <main+0x21bc>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a62:	4928      	ldr	r1, [pc, #160]	; (8003b04 <main+0x21ac>)
 8003a64:	f016 fdb0 	bl	801a5c8 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a68:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	2301      	movs	r3, #1
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <main+0x21b0>)
 8003a76:	2128      	movs	r1, #40	; 0x28
 8003a78:	f240 1093 	movw	r0, #403	; 0x193
 8003a7c:	f001 fd90 	bl	80055a0 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003a80:	491e      	ldr	r1, [pc, #120]	; (8003afc <main+0x21a4>)
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003a8e:	4921      	ldr	r1, [pc, #132]	; (8003b14 <main+0x21bc>)
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <main+0x21c0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003aa6:	491d      	ldr	r1, [pc, #116]	; (8003b1c <main+0x21c4>)
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f016 fd8d 	bl	801a5c8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003aae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <main+0x21b0>)
 8003abc:	2128      	movs	r1, #40	; 0x28
 8003abe:	f240 1077 	movw	r0, #375	; 0x177
 8003ac2:	f001 fd6d 	bl	80055a0 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <main+0x21c8>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ad0:	4912      	ldr	r1, [pc, #72]	; (8003b1c <main+0x21c4>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f016 fd78 	bl	801a5c8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003ad8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <main+0x21cc>)
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <main+0x21b0>)
 8003ae6:	2128      	movs	r1, #40	; 0x28
 8003ae8:	f240 1077 	movw	r0, #375	; 0x177
 8003aec:	f001 fd58 	bl	80055a0 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <main+0x21c8>)
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <main+0x21c0>)
 8003af6:	701a      	strb	r2, [r3, #0]
	{
 8003af8:	f7fe b9c7 	b.w	8001e8a <main+0x532>
 8003afc:	200005a0 	.word	0x200005a0
 8003b00:	c0240000 	.word	0xc0240000
 8003b04:	08052130 	.word	0x08052130
 8003b08:	08029860 	.word	0x08029860
 8003b0c:	40240000 	.word	0x40240000
 8003b10:	08052138 	.word	0x08052138
 8003b14:	200005b0 	.word	0x200005b0
 8003b18:	20000000 	.word	0x20000000
 8003b1c:	080520e4 	.word	0x080520e4
 8003b20:	2000056d 	.word	0x2000056d
 8003b24:	00ffa500 	.word	0x00ffa500

08003b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b094      	sub	sp, #80	; 0x50
 8003b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b2e:	f107 0320 	add.w	r3, r7, #32
 8003b32:	2230      	movs	r2, #48	; 0x30
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f015 febe 	bl	80198b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b3c:	f107 030c 	add.w	r3, r7, #12
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <SystemClock_Config+0xcc>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	4a27      	ldr	r2, [pc, #156]	; (8003bf4 <SystemClock_Config+0xcc>)
 8003b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5c:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <SystemClock_Config+0xcc>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <SystemClock_Config+0xd0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <SystemClock_Config+0xd0>)
 8003b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <SystemClock_Config+0xd0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003b98:	2304      	movs	r3, #4
 8003b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b9c:	23a8      	movs	r3, #168	; 0xa8
 8003b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ba4:	2307      	movs	r3, #7
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ba8:	f107 0320 	add.w	r3, r7, #32
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00d fea9 	bl	8011904 <HAL_RCC_OscConfig>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003bb8:	f000 fab0 	bl	800411c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bbc:	230f      	movs	r3, #15
 8003bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003bd4:	f107 030c 	add.w	r3, r7, #12
 8003bd8:	2105      	movs	r1, #5
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f00e f90a 	bl	8011df4 <HAL_RCC_ClockConfig>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003be6:	f000 fa99 	bl	800411c <Error_Handler>
  }
}
 8003bea:	bf00      	nop
 8003bec:	3750      	adds	r7, #80	; 0x50
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40007000 	.word	0x40007000

08003bfc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003c02:	463b      	mov	r3, r7
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_DAC_Init+0x60>)
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <MX_DAC_Init+0x64>)
 8003c0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003c10:	4812      	ldr	r0, [pc, #72]	; (8003c5c <MX_DAC_Init+0x60>)
 8003c12:	f003 fa92 	bl	800713a <HAL_DAC_Init>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003c1c:	f000 fa7e 	bl	800411c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c28:	463b      	mov	r3, r7
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	480b      	ldr	r0, [pc, #44]	; (8003c5c <MX_DAC_Init+0x60>)
 8003c30:	f003 fd07 	bl	8007642 <HAL_DAC_ConfigChannel>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003c3a:	f000 fa6f 	bl	800411c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003c3e:	463b      	mov	r3, r7
 8003c40:	2210      	movs	r2, #16
 8003c42:	4619      	mov	r1, r3
 8003c44:	4805      	ldr	r0, [pc, #20]	; (8003c5c <MX_DAC_Init+0x60>)
 8003c46:	f003 fcfc 	bl	8007642 <HAL_DAC_ConfigChannel>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003c50:	f000 fa64 	bl	800411c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200002a8 	.word	0x200002a8
 8003c60:	40007400 	.word	0x40007400

08003c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c68:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <MX_I2C1_Init+0x54>)
 8003c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c70:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <MX_I2C1_Init+0x58>)
 8003c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ca0:	4804      	ldr	r0, [pc, #16]	; (8003cb4 <MX_I2C1_Init+0x50>)
 8003ca2:	f007 fa5a 	bl	800b15a <HAL_I2C_Init>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003cac:	f000 fa36 	bl	800411c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cb0:	bf00      	nop
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	200002bc 	.word	0x200002bc
 8003cb8:	40005400 	.word	0x40005400
 8003cbc:	000186a0 	.word	0x000186a0

08003cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cc4:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cc6:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <MX_SPI1_Init+0x68>)
 8003cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d0c:	220a      	movs	r2, #10
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d10:	4804      	ldr	r0, [pc, #16]	; (8003d24 <MX_SPI1_Init+0x64>)
 8003d12:	f00e fe8f 	bl	8012a34 <HAL_SPI_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d1c:	f000 f9fe 	bl	800411c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000310 	.word	0x20000310
 8003d28:	40013000 	.word	0x40013000

08003d2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d32:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <MX_SPI2_Init+0x68>)
 8003d34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003d5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d60:	2238      	movs	r2, #56	; 0x38
 8003d62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d78:	220a      	movs	r2, #10
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d7c:	4804      	ldr	r0, [pc, #16]	; (8003d90 <MX_SPI2_Init+0x64>)
 8003d7e:	f00e fe59 	bl	8012a34 <HAL_SPI_Init>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d88:	f000 f9c8 	bl	800411c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000368 	.word	0x20000368
 8003d94:	40003800 	.word	0x40003800

08003d98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <MX_SPI3_Init+0x68>)
 8003da0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003da2:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003da8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dc4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003dc8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dcc:	2238      	movs	r2, #56	; 0x38
 8003dce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003de4:	220a      	movs	r2, #10
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003de8:	4804      	ldr	r0, [pc, #16]	; (8003dfc <MX_SPI3_Init+0x64>)
 8003dea:	f00e fe23 	bl	8012a34 <HAL_SPI_Init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003df4:	f000 f992 	bl	800411c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200003c0 	.word	0x200003c0
 8003e00:	40003c00 	.word	0x40003c00

08003e04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <MX_USART1_UART_Init+0x50>)
 8003e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e2a:	220c      	movs	r2, #12
 8003e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e3a:	4805      	ldr	r0, [pc, #20]	; (8003e50 <MX_USART1_UART_Init+0x4c>)
 8003e3c:	f011 fb60 	bl	8015500 <HAL_UART_Init>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e46:	f000 f969 	bl	800411c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200004d8 	.word	0x200004d8
 8003e54:	40011000 	.word	0x40011000

08003e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <MX_DMA_Init+0x4c>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <MX_DMA_Init+0x4c>)
 8003e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <MX_DMA_Init+0x4c>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	200e      	movs	r0, #14
 8003e80:	f003 f817 	bl	8006eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003e84:	200e      	movs	r0, #14
 8003e86:	f003 f830 	bl	8006eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	200f      	movs	r0, #15
 8003e90:	f003 f80f 	bl	8006eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003e94:	200f      	movs	r0, #15
 8003e96:	f003 f828 	bl	8006eea <HAL_NVIC_EnableIRQ>

}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eae:	f107 031c 	add.w	r3, r7, #28
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	4b60      	ldr	r3, [pc, #384]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a5f      	ldr	r2, [pc, #380]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003ec8:	f043 0310 	orr.w	r3, r3, #16
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	4b59      	ldr	r3, [pc, #356]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a58      	ldr	r2, [pc, #352]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b52      	ldr	r3, [pc, #328]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a51      	ldr	r2, [pc, #324]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
 8003f06:	4b4f      	ldr	r3, [pc, #316]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6313      	str	r3, [r2, #48]	; 0x30
 8003f22:	4b48      	ldr	r3, [pc, #288]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	4b44      	ldr	r3, [pc, #272]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	4a43      	ldr	r2, [pc, #268]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3e:	4b41      	ldr	r3, [pc, #260]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a3c      	ldr	r2, [pc, #240]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <MX_GPIO_Init+0x19c>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003f66:	2201      	movs	r2, #1
 8003f68:	2140      	movs	r1, #64	; 0x40
 8003f6a:	4837      	ldr	r0, [pc, #220]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003f6c:	f007 f876 	bl	800b05c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	4834      	ldr	r0, [pc, #208]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003f76:	f007 f871 	bl	800b05c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_RESET);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4833      	ldr	r0, [pc, #204]	; (800404c <MX_GPIO_Init+0x1a4>)
 8003f80:	f007 f86c 	bl	800b05c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003f8a:	4831      	ldr	r0, [pc, #196]	; (8004050 <MX_GPIO_Init+0x1a8>)
 8003f8c:	f007 f866 	bl	800b05c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2104      	movs	r1, #4
 8003f94:	482f      	ldr	r0, [pc, #188]	; (8004054 <MX_GPIO_Init+0x1ac>)
 8003f96:	f007 f861 	bl	800b05c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003f9a:	2318      	movs	r3, #24
 8003f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fa6:	f107 031c 	add.w	r3, r7, #28
 8003faa:	4619      	mov	r1, r3
 8003fac:	482a      	ldr	r0, [pc, #168]	; (8004058 <MX_GPIO_Init+0x1b0>)
 8003fae:	f006 fda5 	bl	800aafc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003fb2:	23c0      	movs	r3, #192	; 0xc0
 8003fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc2:	f107 031c 	add.w	r3, r7, #28
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	481f      	ldr	r0, [pc, #124]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003fca:	f006 fd97 	bl	800aafc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003fda:	f107 031c 	add.w	r3, r7, #28
 8003fde:	4619      	mov	r1, r3
 8003fe0:	481b      	ldr	r0, [pc, #108]	; (8004050 <MX_GPIO_Init+0x1a8>)
 8003fe2:	f006 fd8b 	bl	800aafc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fea:	2301      	movs	r3, #1
 8003fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f107 031c 	add.w	r3, r7, #28
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4813      	ldr	r0, [pc, #76]	; (800404c <MX_GPIO_Init+0x1a4>)
 8003ffe:	f006 fd7d 	bl	800aafc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8004002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004008:	2301      	movs	r3, #1
 800400a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	2300      	movs	r3, #0
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004014:	f107 031c 	add.w	r3, r7, #28
 8004018:	4619      	mov	r1, r3
 800401a:	480d      	ldr	r0, [pc, #52]	; (8004050 <MX_GPIO_Init+0x1a8>)
 800401c:	f006 fd6e 	bl	800aafc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8004020:	2304      	movs	r3, #4
 8004022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004024:	2301      	movs	r3, #1
 8004026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004030:	f107 031c 	add.w	r3, r7, #28
 8004034:	4619      	mov	r1, r3
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <MX_GPIO_Init+0x1ac>)
 8004038:	f006 fd60 	bl	800aafc <HAL_GPIO_Init>

}
 800403c:	bf00      	nop
 800403e:	3730      	adds	r7, #48	; 0x30
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40023800 	.word	0x40023800
 8004048:	40020000 	.word	0x40020000
 800404c:	40020400 	.word	0x40020400
 8004050:	40020800 	.word	0x40020800
 8004054:	40020c00 	.word	0x40020c00
 8004058:	40021000 	.word	0x40021000

0800405c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004062:	1d3b      	adds	r3, r7, #4
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
 8004070:	615a      	str	r2, [r3, #20]
 8004072:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004074:	4b27      	ldr	r3, [pc, #156]	; (8004114 <MX_FSMC_Init+0xb8>)
 8004076:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800407a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <MX_FSMC_Init+0xb8>)
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <MX_FSMC_Init+0xbc>)
 8004080:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004082:	4b24      	ldr	r3, [pc, #144]	; (8004114 <MX_FSMC_Init+0xb8>)
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <MX_FSMC_Init+0xb8>)
 800408a:	2200      	movs	r2, #0
 800408c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800408e:	4b21      	ldr	r3, [pc, #132]	; (8004114 <MX_FSMC_Init+0xb8>)
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004094:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <MX_FSMC_Init+0xb8>)
 8004096:	2210      	movs	r2, #16
 8004098:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <MX_FSMC_Init+0xb8>)
 800409c:	2200      	movs	r2, #0
 800409e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80040a0:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80040ba:	4b16      	ldr	r3, [pc, #88]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 80040d8:	2302      	movs	r3, #2
 80040da:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80040dc:	230f      	movs	r3, #15
 80040de:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80040e0:	2305      	movs	r3, #5
 80040e2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 80040e4:	2302      	movs	r3, #2
 80040e6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80040e8:	2310      	movs	r3, #16
 80040ea:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80040ec:	2311      	movs	r3, #17
 80040ee:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	2200      	movs	r2, #0
 80040f8:	4619      	mov	r1, r3
 80040fa:	4806      	ldr	r0, [pc, #24]	; (8004114 <MX_FSMC_Init+0xb8>)
 80040fc:	f010 ff56 	bl	8014fac <HAL_SRAM_Init>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004106:	f000 f809 	bl	800411c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800410a:	bf00      	nop
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	2000051c 	.word	0x2000051c
 8004118:	a0000104 	.word	0xa0000104

0800411c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004120:	b672      	cpsid	i
}
 8004122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004124:	e7fe      	b.n	8004124 <Error_Handler+0x8>

08004126 <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	460b      	mov	r3, r1
 8004132:	71bb      	strb	r3, [r7, #6]
 8004134:	4613      	mov	r3, r2
 8004136:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	041a      	lsls	r2, r3, #16
 800413c:	79bb      	ldrb	r3, [r7, #6]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	441a      	add	r2, r3
 8004142:	797b      	ldrb	r3, [r7, #5]
 8004144:	4413      	add	r3, r2
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	6039      	str	r1, [r7, #0]
 800415c:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <H24_RGB565+0x4a>
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	02db      	lsls	r3, r3, #11
 800417c:	b21a      	sxth	r2, r3
 800417e:	7bbb      	ldrb	r3, [r7, #14]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	b2db      	uxtb	r3, r3
 8004184:	015b      	lsls	r3, r3, #5
 8004186:	b21b      	sxth	r3, r3
 8004188:	4313      	orrs	r3, r2
 800418a:	b21a      	sxth	r2, r3
 800418c:	7b7b      	ldrb	r3, [r7, #13]
 800418e:	08db      	lsrs	r3, r3, #3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	b21b      	sxth	r3, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	b21b      	sxth	r3, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	e012      	b.n	80041c2 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 800419c:	7b7b      	ldrb	r3, [r7, #13]
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	02db      	lsls	r3, r3, #11
 80041a4:	b21a      	sxth	r2, r3
 80041a6:	7bbb      	ldrb	r3, [r7, #14]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	015b      	lsls	r3, r3, #5
 80041ae:	b21b      	sxth	r3, r3
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	08db      	lsrs	r3, r3, #3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	b21b      	sxth	r3, r3
 80041bc:	4313      	orrs	r3, r2
 80041be:	b21b      	sxth	r3, r3
 80041c0:	b29b      	uxth	r3, r3
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	4603      	mov	r3, r0
 80041d6:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 80041d8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	8013      	strh	r3, [r2, #0]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	e005      	b.n	8004208 <LCD_Send_Dat+0x1c>
	DAT = dat;
 80041fc:	4a07      	ldr	r2, [pc, #28]	; (800421c <LCD_Send_Dat+0x30>)
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3301      	adds	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f6      	beq.n	80041fc <LCD_Send_Dat+0x10>
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	60080000 	.word	0x60080000

08004220 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4604      	mov	r4, r0
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	461a      	mov	r2, r3
 800422e:	4623      	mov	r3, r4
 8004230:	80fb      	strh	r3, [r7, #6]
 8004232:	4603      	mov	r3, r0
 8004234:	80bb      	strh	r3, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	807b      	strh	r3, [r7, #2]
 800423a:	4613      	mov	r3, r2
 800423c:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 800423e:	202a      	movs	r0, #42	; 0x2a
 8004240:	f7ff ffc5 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8004244:	88bb      	ldrh	r3, [r7, #4]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	b29b      	uxth	r3, r3
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff ffce 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8004250:	88bb      	ldrh	r3, [r7, #4]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	b29b      	uxth	r3, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ffc8 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 800425c:	883b      	ldrh	r3, [r7, #0]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	b29b      	uxth	r3, r3
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ffc2 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8004268:	883b      	ldrh	r3, [r7, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	b29b      	uxth	r3, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ffbc 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8004274:	202b      	movs	r0, #43	; 0x2b
 8004276:	f7ff ffaa 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ffb3 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	b29b      	uxth	r3, r3
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ffad 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8004292:	887b      	ldrh	r3, [r7, #2]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	b29b      	uxth	r3, r3
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ffa7 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 800429e:	887b      	ldrh	r3, [r7, #2]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffa1 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 80042aa:	202c      	movs	r0, #44	; 0x2c
 80042ac:	f7ff ff8f 	bl	80041ce <LCD_Send_Cmd>
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd90      	pop	{r4, r7, pc}

080042b8 <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	603a      	str	r2, [r7, #0]
 80042c2:	80fb      	strh	r3, [r7, #6]
 80042c4:	460b      	mov	r3, r1
 80042c6:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 80042c8:	88bb      	ldrh	r3, [r7, #4]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	88b9      	ldrh	r1, [r7, #4]
 80042ce:	88f8      	ldrh	r0, [r7, #6]
 80042d0:	f7ff ffa6 	bl	8004220 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	2001      	movs	r0, #1
 80042d8:	f7ff ff3b 	bl	8004152 <H24_RGB565>
 80042dc:	4603      	mov	r3, r0
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff84 	bl	80041ec <LCD_Send_Dat>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4604      	mov	r4, r0
 80042f4:	4608      	mov	r0, r1
 80042f6:	4611      	mov	r1, r2
 80042f8:	461a      	mov	r2, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	80fb      	strh	r3, [r7, #6]
 80042fe:	4603      	mov	r3, r0
 8004300:	80bb      	strh	r3, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	807b      	strh	r3, [r7, #2]
 8004306:	4613      	mov	r3, r2
 8004308:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 800430e:	887b      	ldrh	r3, [r7, #2]
 8004310:	883a      	ldrh	r2, [r7, #0]
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004318:	88ba      	ldrh	r2, [r7, #4]
 800431a:	883b      	ldrh	r3, [r7, #0]
 800431c:	4413      	add	r3, r2
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29c      	uxth	r4, r3
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	887b      	ldrh	r3, [r7, #2]
 8004328:	4413      	add	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29b      	uxth	r3, r3
 8004330:	88f9      	ldrh	r1, [r7, #6]
 8004332:	88b8      	ldrh	r0, [r7, #4]
 8004334:	4622      	mov	r2, r4
 8004336:	f7ff ff73 	bl	8004220 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e00a      	b.n	8004356 <LCD_Rect_Fill+0x6a>
 8004340:	6a39      	ldr	r1, [r7, #32]
 8004342:	2001      	movs	r0, #1
 8004344:	f7ff ff05 	bl	8004152 <H24_RGB565>
 8004348:	4603      	mov	r3, r0
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ff4e 	bl	80041ec <LCD_Send_Dat>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d3f0      	bcc.n	8004340 <LCD_Rect_Fill+0x54>
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}

08004368 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b08b      	sub	sp, #44	; 0x2c
 800436c:	af02      	add	r7, sp, #8
 800436e:	4604      	mov	r4, r0
 8004370:	4608      	mov	r0, r1
 8004372:	4611      	mov	r1, r2
 8004374:	461a      	mov	r2, r3
 8004376:	4623      	mov	r3, r4
 8004378:	80fb      	strh	r3, [r7, #6]
 800437a:	4603      	mov	r3, r0
 800437c:	80bb      	strh	r3, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	807b      	strh	r3, [r7, #2]
 8004382:	4613      	mov	r3, r2
 8004384:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	bfb8      	it	lt
 8004390:	425b      	neglt	r3, r3
 8004392:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8004394:	883a      	ldrh	r2, [r7, #0]
 8004396:	88bb      	ldrh	r3, [r7, #4]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	bfb8      	it	lt
 800439e:	425b      	neglt	r3, r3
 80043a0:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d201      	bcs.n	80043ae <LCD_Line+0x46>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e001      	b.n	80043b2 <LCD_Line+0x4a>
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 80043b4:	88ba      	ldrh	r2, [r7, #4]
 80043b6:	883b      	ldrh	r3, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d201      	bcs.n	80043c0 <LCD_Line+0x58>
 80043bc:	2301      	movs	r3, #1
 80043be:	e001      	b.n	80043c4 <LCD_Line+0x5c>
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80043d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043dc:	b29c      	uxth	r4, r3
 80043de:	88b9      	ldrh	r1, [r7, #4]
 80043e0:	88f8      	ldrh	r0, [r7, #6]
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	4623      	mov	r3, r4
 80043e8:	f7ff ff80 	bl	80042ec <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	887b      	ldrh	r3, [r7, #2]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d103      	bne.n	80043fc <LCD_Line+0x94>
 80043f4:	88ba      	ldrh	r2, [r7, #4]
 80043f6:	883b      	ldrh	r3, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d01e      	beq.n	800443a <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	425b      	negs	r3, r3
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	dd08      	ble.n	800441e <LCD_Line+0xb6>
		{
			error -= deltaY;
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	b29a      	uxth	r2, r3
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	4413      	add	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	429a      	cmp	r2, r3
 8004424:	dad5      	bge.n	80043d2 <LCD_Line+0x6a>
		{
			error += deltaX;
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	b29a      	uxth	r2, r3
 8004432:	88bb      	ldrh	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004438:	e7cb      	b.n	80043d2 <LCD_Line+0x6a>
		break;
 800443a:	bf00      	nop
		}
	}
}
 800443c:	bf00      	nop
 800443e:	3724      	adds	r7, #36	; 0x24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd90      	pop	{r4, r7, pc}

08004444 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b085      	sub	sp, #20
 8004448:	af02      	add	r7, sp, #8
 800444a:	4604      	mov	r4, r0
 800444c:	4608      	mov	r0, r1
 800444e:	4611      	mov	r1, r2
 8004450:	461a      	mov	r2, r3
 8004452:	4623      	mov	r3, r4
 8004454:	80fb      	strh	r3, [r7, #6]
 8004456:	4603      	mov	r3, r0
 8004458:	80bb      	strh	r3, [r7, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	807b      	strh	r3, [r7, #2]
 800445e:	4613      	mov	r3, r2
 8004460:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 8004462:	883c      	ldrh	r4, [r7, #0]
 8004464:	887a      	ldrh	r2, [r7, #2]
 8004466:	88b9      	ldrh	r1, [r7, #4]
 8004468:	88f8      	ldrh	r0, [r7, #6]
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4623      	mov	r3, r4
 8004476:	f7ff ff77 	bl	8004368 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 800447a:	8bbc      	ldrh	r4, [r7, #28]
 800447c:	8b3a      	ldrh	r2, [r7, #24]
 800447e:	8839      	ldrh	r1, [r7, #0]
 8004480:	8878      	ldrh	r0, [r7, #2]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4623      	mov	r3, r4
 800448e:	f7ff ff6b 	bl	8004368 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 8004492:	88bc      	ldrh	r4, [r7, #4]
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	8bb9      	ldrh	r1, [r7, #28]
 8004498:	8b38      	ldrh	r0, [r7, #24]
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4623      	mov	r3, r4
 80044a6:	f7ff ff5f 	bl	8004368 <LCD_Line>
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}

080044b2 <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 80044b2:	b590      	push	{r4, r7, lr}
 80044b4:	b08d      	sub	sp, #52	; 0x34
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	4604      	mov	r4, r0
 80044ba:	4608      	mov	r0, r1
 80044bc:	4611      	mov	r1, r2
 80044be:	461a      	mov	r2, r3
 80044c0:	4623      	mov	r3, r4
 80044c2:	80fb      	strh	r3, [r7, #6]
 80044c4:	4603      	mov	r3, r0
 80044c6:	80bb      	strh	r3, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
 80044cc:	4613      	mov	r3, r2
 80044ce:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80044d0:	2300      	movs	r3, #0
 80044d2:	823b      	strh	r3, [r7, #16]
 80044d4:	2300      	movs	r3, #0
 80044d6:	81fb      	strh	r3, [r7, #14]
 80044d8:	2300      	movs	r3, #0
 80044da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044dc:	2300      	movs	r3, #0
 80044de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044e0:	2300      	movs	r3, #0
 80044e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80044e4:	2300      	movs	r3, #0
 80044e6:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80044e8:	2300      	movs	r3, #0
 80044ea:	83fb      	strh	r3, [r7, #30]
 80044ec:	2300      	movs	r3, #0
 80044ee:	83bb      	strh	r3, [r7, #28]
 80044f0:	2300      	movs	r3, #0
 80044f2:	837b      	strh	r3, [r7, #26]
 80044f4:	2300      	movs	r3, #0
 80044f6:	833b      	strh	r3, [r7, #24]
 80044f8:	2300      	movs	r3, #0
 80044fa:	82fb      	strh	r3, [r7, #22]
 80044fc:	2300      	movs	r3, #0
 80044fe:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8004504:	887a      	ldrh	r2, [r7, #2]
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	bfb8      	it	lt
 800450e:	425b      	neglt	r3, r3
 8004510:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8004512:	883a      	ldrh	r2, [r7, #0]
 8004514:	88bb      	ldrh	r3, [r7, #4]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bfb8      	it	lt
 800451c:	425b      	neglt	r3, r3
 800451e:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8004524:	88bb      	ldrh	r3, [r7, #4]
 8004526:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 8004528:	887a      	ldrh	r2, [r7, #2]
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	429a      	cmp	r2, r3
 800452e:	d304      	bcc.n	800453a <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 8004530:	2301      	movs	r3, #1
 8004532:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8004534:	2301      	movs	r3, #1
 8004536:	843b      	strh	r3, [r7, #32]
 8004538:	e005      	b.n	8004546 <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 800453a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800453e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8004540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004544:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 8004546:	883a      	ldrh	r2, [r7, #0]
 8004548:	88bb      	ldrh	r3, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d304      	bcc.n	8004558 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	83bb      	strh	r3, [r7, #28]
 8004556:	e005      	b.n	8004564 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 8004558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800455c:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800455e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004562:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8004564:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800456c:	429a      	cmp	r2, r3
 800456e:	db10      	blt.n	8004592 <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8004578:	8a3b      	ldrh	r3, [r7, #16]
 800457a:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 800457c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004580:	0fda      	lsrs	r2, r3, #31
 8004582:	4413      	add	r3, r2
 8004584:	105b      	asrs	r3, r3, #1
 8004586:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 800458c:	8a3b      	ldrh	r3, [r7, #16]
 800458e:	82bb      	strh	r3, [r7, #20]
 8004590:	e00f      	b.n	80045b2 <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 800459e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045a2:	0fda      	lsrs	r2, r3, #31
 80045a4:	4413      	add	r3, r2
 80045a6:	105b      	asrs	r3, r3, #1
 80045a8:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80045aa:	8a3b      	ldrh	r3, [r7, #16]
 80045ac:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80045ae:	89fb      	ldrh	r3, [r7, #14]
 80045b0:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	827b      	strh	r3, [r7, #18]
 80045b6:	e034      	b.n	8004622 <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 80045b8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80045ba:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80045bc:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80045be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80045c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	2301      	movs	r3, #1
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4623      	mov	r3, r4
 80045ca:	f7ff fecd 	bl	8004368 <LCD_Line>

		num += numadd;
 80045ce:	8b3a      	ldrh	r2, [r7, #24]
 80045d0:	8afb      	ldrh	r3, [r7, #22]
 80045d2:	4413      	add	r3, r2
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 80045d8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	db0e      	blt.n	8004602 <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 80045e4:	8b3a      	ldrh	r2, [r7, #24]
 80045e6:	8b7b      	ldrh	r3, [r7, #26]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80045ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045f2:	4413      	add	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80045f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045fa:	8bfb      	ldrh	r3, [r7, #30]
 80045fc:	4413      	add	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8004602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004604:	8c3b      	ldrh	r3, [r7, #32]
 8004606:	4413      	add	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 800460c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800460e:	8bbb      	ldrh	r3, [r7, #28]
 8004610:	4413      	add	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004616:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800461a:	b29b      	uxth	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	b29b      	uxth	r3, r3
 8004620:	827b      	strh	r3, [r7, #18]
 8004622:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004626:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800462a:	429a      	cmp	r2, r3
 800462c:	ddc4      	ble.n	80045b8 <LCD_Triangle_Fill+0x106>
	}
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	372c      	adds	r7, #44	; 0x2c
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}

08004638 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b085      	sub	sp, #20
 800463c:	af02      	add	r7, sp, #8
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4623      	mov	r3, r4
 8004648:	80fb      	strh	r3, [r7, #6]
 800464a:	4603      	mov	r3, r0
 800464c:	80bb      	strh	r3, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	807b      	strh	r3, [r7, #2]
 8004652:	4613      	mov	r3, r2
 8004654:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	4413      	add	r3, r2
 800465c:	b29a      	uxth	r2, r3
 800465e:	88bc      	ldrh	r4, [r7, #4]
 8004660:	88b9      	ldrh	r1, [r7, #4]
 8004662:	88f8      	ldrh	r0, [r7, #6]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	7e3b      	ldrb	r3, [r7, #24]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4623      	mov	r3, r4
 800466e:	f7ff fe7b 	bl	8004368 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004672:	88ba      	ldrh	r2, [r7, #4]
 8004674:	883b      	ldrh	r3, [r7, #0]
 8004676:	4413      	add	r3, r2
 8004678:	b299      	uxth	r1, r3
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	887b      	ldrh	r3, [r7, #2]
 800467e:	4413      	add	r3, r2
 8004680:	b29c      	uxth	r4, r3
 8004682:	88ba      	ldrh	r2, [r7, #4]
 8004684:	883b      	ldrh	r3, [r7, #0]
 8004686:	4413      	add	r3, r2
 8004688:	b29a      	uxth	r2, r3
 800468a:	88f8      	ldrh	r0, [r7, #6]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	7e3b      	ldrb	r3, [r7, #24]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	4622      	mov	r2, r4
 8004698:	f7ff fe66 	bl	8004368 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 800469c:	88ba      	ldrh	r2, [r7, #4]
 800469e:	883b      	ldrh	r3, [r7, #0]
 80046a0:	4413      	add	r3, r2
 80046a2:	b29c      	uxth	r4, r3
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	88b9      	ldrh	r1, [r7, #4]
 80046a8:	88f8      	ldrh	r0, [r7, #6]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	7e3b      	ldrb	r3, [r7, #24]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	4623      	mov	r3, r4
 80046b4:	f7ff fe58 	bl	8004368 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	887b      	ldrh	r3, [r7, #2]
 80046bc:	4413      	add	r3, r2
 80046be:	b298      	uxth	r0, r3
 80046c0:	88fa      	ldrh	r2, [r7, #6]
 80046c2:	887b      	ldrh	r3, [r7, #2]
 80046c4:	4413      	add	r3, r2
 80046c6:	b29c      	uxth	r4, r3
 80046c8:	88ba      	ldrh	r2, [r7, #4]
 80046ca:	883b      	ldrh	r3, [r7, #0]
 80046cc:	4413      	add	r3, r2
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	88b9      	ldrh	r1, [r7, #4]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	7e3b      	ldrb	r3, [r7, #24]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	4622      	mov	r2, r4
 80046de:	f7ff fe43 	bl	8004368 <LCD_Line>
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd90      	pop	{r4, r7, pc}

080046ea <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 80046ea:	b590      	push	{r4, r7, lr}
 80046ec:	b08b      	sub	sp, #44	; 0x2c
 80046ee:	af02      	add	r7, sp, #8
 80046f0:	4604      	mov	r4, r0
 80046f2:	4608      	mov	r0, r1
 80046f4:	4611      	mov	r1, r2
 80046f6:	461a      	mov	r2, r3
 80046f8:	4623      	mov	r3, r4
 80046fa:	80fb      	strh	r3, [r7, #6]
 80046fc:	4603      	mov	r3, r0
 80046fe:	80bb      	strh	r3, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
 8004704:	4613      	mov	r3, r2
 8004706:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 8004708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800470c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004710:	fb02 f303 	mul.w	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 8004716:	f9b7 3000 	ldrsh.w	r3, [r7]
 800471a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 8004730:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8101 	beq.w	800493c <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800473a:	2300      	movs	r3, #0
 800473c:	83fb      	strh	r3, [r7, #30]
 800473e:	883b      	ldrh	r3, [r7, #0]
 8004740:	83bb      	strh	r3, [r7, #28]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	005a      	lsls	r2, r3, #1
 8004746:	f9b7 3000 	ldrsh.w	r3, [r7]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	f1c3 0301 	rsb	r3, r3, #1
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e062      	b.n	8004822 <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 800475c:	88fa      	ldrh	r2, [r7, #6]
 800475e:	8bfb      	ldrh	r3, [r7, #30]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	b298      	uxth	r0, r3
 8004764:	88ba      	ldrh	r2, [r7, #4]
 8004766:	8bbb      	ldrh	r3, [r7, #28]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	b299      	uxth	r1, r3
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	8bfb      	ldrh	r3, [r7, #30]
 8004770:	4413      	add	r3, r2
 8004772:	b29a      	uxth	r2, r3
 8004774:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004778:	b29b      	uxth	r3, r3
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	b29b      	uxth	r3, r3
 800477e:	3301      	adds	r3, #1
 8004780:	b29c      	uxth	r4, r3
 8004782:	88ba      	ldrh	r2, [r7, #4]
 8004784:	8bbb      	ldrh	r3, [r7, #28]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	b29a      	uxth	r2, r3
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	4622      	mov	r2, r4
 8004798:	f7ff fde6 	bl	8004368 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	8bfb      	ldrh	r3, [r7, #30]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b298      	uxth	r0, r3
 80047a4:	88ba      	ldrh	r2, [r7, #4]
 80047a6:	8bbb      	ldrh	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	b299      	uxth	r1, r3
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	8bfb      	ldrh	r3, [r7, #30]
 80047b0:	4413      	add	r3, r2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	b29c      	uxth	r4, r3
 80047c2:	88ba      	ldrh	r2, [r7, #4]
 80047c4:	8bbb      	ldrh	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	4622      	mov	r2, r4
 80047d8:	f7ff fdc6 	bl	8004368 <LCD_Line>
			if (s >= 0)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	db0f      	blt.n	8004802 <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 80047e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047e6:	f1c3 0301 	rsb	r3, r3, #1
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4413      	add	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
				y--;
 80047f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29b      	uxth	r3, r3
 8004800:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 8004802:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	3306      	adds	r3, #6
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	fb02 f303 	mul.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4413      	add	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004816:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800481a:	b29b      	uxth	r3, r3
 800481c:	3301      	adds	r3, #1
 800481e:	b29b      	uxth	r3, r3
 8004820:	83fb      	strh	r3, [r7, #30]
 8004822:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	fb03 f202 	mul.w	r2, r3, r2
 800482c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004830:	6979      	ldr	r1, [r7, #20]
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	429a      	cmp	r2, r3
 8004838:	dd90      	ble.n	800475c <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	83fb      	strh	r3, [r7, #30]
 800483e:	2300      	movs	r3, #0
 8004840:	83bb      	strh	r3, [r7, #28]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	005a      	lsls	r2, r3, #1
 8004846:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	f1c3 0301 	rsb	r3, r3, #1
 8004850:	6939      	ldr	r1, [r7, #16]
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	e062      	b.n	8004922 <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	8bfb      	ldrh	r3, [r7, #30]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	b298      	uxth	r0, r3
 8004864:	88ba      	ldrh	r2, [r7, #4]
 8004866:	8bbb      	ldrh	r3, [r7, #28]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	b299      	uxth	r1, r3
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	8bfb      	ldrh	r3, [r7, #30]
 8004870:	4413      	add	r3, r2
 8004872:	b29a      	uxth	r2, r3
 8004874:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004878:	b29b      	uxth	r3, r3
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	b29b      	uxth	r3, r3
 800487e:	3301      	adds	r3, #1
 8004880:	b29c      	uxth	r4, r3
 8004882:	88ba      	ldrh	r2, [r7, #4]
 8004884:	8bbb      	ldrh	r3, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	b29a      	uxth	r2, r3
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	4622      	mov	r2, r4
 8004898:	f7ff fd66 	bl	8004368 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	8bfb      	ldrh	r3, [r7, #30]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	b298      	uxth	r0, r3
 80048a4:	88ba      	ldrh	r2, [r7, #4]
 80048a6:	8bbb      	ldrh	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	b299      	uxth	r1, r3
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	8bfb      	ldrh	r3, [r7, #30]
 80048b0:	4413      	add	r3, r2
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	b29c      	uxth	r4, r3
 80048c2:	88ba      	ldrh	r2, [r7, #4]
 80048c4:	8bbb      	ldrh	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	4622      	mov	r2, r4
 80048d8:	f7ff fd46 	bl	8004368 <LCD_Line>
			if (s >= 0)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db0f      	blt.n	8004902 <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 80048e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80048e6:	f1c3 0301 	rsb	r3, r3, #1
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4413      	add	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
				x--;
 80048f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 8004902:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	3306      	adds	r3, #6
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	fb02 f303 	mul.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4413      	add	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 8004916:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800491a:	b29b      	uxth	r3, r3
 800491c:	3301      	adds	r3, #1
 800491e:	b29b      	uxth	r3, r3
 8004920:	83bb      	strh	r3, [r7, #28]
 8004922:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	fb03 f202 	mul.w	r2, r3, r2
 800492c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004930:	6939      	ldr	r1, [r7, #16]
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	429a      	cmp	r2, r3
 8004938:	dd90      	ble.n	800485c <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 800493a:	e117      	b.n	8004b6c <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800493c:	2300      	movs	r3, #0
 800493e:	83fb      	strh	r3, [r7, #30]
 8004940:	883b      	ldrh	r3, [r7, #0]
 8004942:	83bb      	strh	r3, [r7, #28]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	005a      	lsls	r2, r3, #1
 8004948:	f9b7 3000 	ldrsh.w	r3, [r7]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	f1c3 0301 	rsb	r3, r3, #1
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e06e      	b.n	8004a3c <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	8bfb      	ldrh	r3, [r7, #30]
 8004962:	4413      	add	r3, r2
 8004964:	b298      	uxth	r0, r3
 8004966:	88ba      	ldrh	r2, [r7, #4]
 8004968:	8bbb      	ldrh	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	b299      	uxth	r1, r3
 800496e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004972:	b29a      	uxth	r2, r3
 8004974:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004978:	b29c      	uxth	r4, r3
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4623      	mov	r3, r4
 8004980:	f7ff fcb4 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004984:	88fa      	ldrh	r2, [r7, #6]
 8004986:	8bfb      	ldrh	r3, [r7, #30]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	b298      	uxth	r0, r3
 800498c:	88ba      	ldrh	r2, [r7, #4]
 800498e:	8bbb      	ldrh	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	b299      	uxth	r1, r3
 8004994:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004998:	b29a      	uxth	r2, r3
 800499a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800499e:	b29c      	uxth	r4, r3
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7ff fca1 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	8bfb      	ldrh	r3, [r7, #30]
 80049ae:	4413      	add	r3, r2
 80049b0:	b298      	uxth	r0, r3
 80049b2:	88ba      	ldrh	r2, [r7, #4]
 80049b4:	8bbb      	ldrh	r3, [r7, #28]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b299      	uxth	r1, r3
 80049ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049be:	b29a      	uxth	r2, r3
 80049c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049c4:	b29c      	uxth	r4, r3
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4623      	mov	r3, r4
 80049cc:	f7ff fc8e 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	8bfb      	ldrh	r3, [r7, #30]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	b298      	uxth	r0, r3
 80049d8:	88ba      	ldrh	r2, [r7, #4]
 80049da:	8bbb      	ldrh	r3, [r7, #28]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	b299      	uxth	r1, r3
 80049e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049ea:	b29c      	uxth	r4, r3
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	4623      	mov	r3, r4
 80049f2:	f7ff fc7b 	bl	80042ec <LCD_Rect_Fill>
			if (s >= 0)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0f      	blt.n	8004a1c <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 80049fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a00:	f1c3 0301 	rsb	r3, r3, #1
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
				y--;
 8004a10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 8004a1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	3306      	adds	r3, #6
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004a30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	83fb      	strh	r3, [r7, #30]
 8004a3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	fb03 f202 	mul.w	r2, r3, r2
 8004a46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a4a:	6979      	ldr	r1, [r7, #20]
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	429a      	cmp	r2, r3
 8004a52:	dd84      	ble.n	800495e <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	83fb      	strh	r3, [r7, #30]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	83bb      	strh	r3, [r7, #28]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005a      	lsls	r2, r3, #1
 8004a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	f1c3 0301 	rsb	r3, r3, #1
 8004a6a:	6939      	ldr	r1, [r7, #16]
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e06e      	b.n	8004b54 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	8bfb      	ldrh	r3, [r7, #30]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	b298      	uxth	r0, r3
 8004a7e:	88ba      	ldrh	r2, [r7, #4]
 8004a80:	8bbb      	ldrh	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	b299      	uxth	r1, r3
 8004a86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a90:	b29c      	uxth	r4, r3
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4623      	mov	r3, r4
 8004a98:	f7ff fc28 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	8bfb      	ldrh	r3, [r7, #30]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	b298      	uxth	r0, r3
 8004aa4:	88ba      	ldrh	r2, [r7, #4]
 8004aa6:	8bbb      	ldrh	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	b299      	uxth	r1, r3
 8004aac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ab6:	b29c      	uxth	r4, r3
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4623      	mov	r3, r4
 8004abe:	f7ff fc15 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	8bfb      	ldrh	r3, [r7, #30]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b298      	uxth	r0, r3
 8004aca:	88ba      	ldrh	r2, [r7, #4]
 8004acc:	8bbb      	ldrh	r3, [r7, #28]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004adc:	b29c      	uxth	r4, r3
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	f7ff fc02 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	8bfb      	ldrh	r3, [r7, #30]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	b298      	uxth	r0, r3
 8004af0:	88ba      	ldrh	r2, [r7, #4]
 8004af2:	8bbb      	ldrh	r3, [r7, #28]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	b299      	uxth	r1, r3
 8004af8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b02:	b29c      	uxth	r4, r3
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	4623      	mov	r3, r4
 8004b0a:	f7ff fbef 	bl	80042ec <LCD_Rect_Fill>
			if (s >= 0)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db0f      	blt.n	8004b34 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 8004b14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b18:	f1c3 0301 	rsb	r3, r3, #1
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4413      	add	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
				x--;
 8004b28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8004b34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	3306      	adds	r3, #6
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4413      	add	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004b48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	83bb      	strh	r3, [r7, #28]
 8004b54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	fb03 f202 	mul.w	r2, r3, r2
 8004b5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b62:	6939      	ldr	r1, [r7, #16]
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	dd84      	ble.n	8004a76 <LCD_Ellipse+0x38c>
}
 8004b6c:	bf00      	nop
 8004b6e:	3724      	adds	r7, #36	; 0x24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd90      	pop	{r4, r7, pc}

08004b74 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	80fb      	strh	r3, [r7, #6]
 8004b86:	4603      	mov	r3, r0
 8004b88:	80bb      	strh	r3, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	70fb      	strb	r3, [r7, #3]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	f1c3 0301 	rsb	r3, r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004ba2:	e0fc      	b.n	8004d9e <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004ba4:	78bb      	ldrb	r3, [r7, #2]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d136      	bne.n	8004c18 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b298      	uxth	r0, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	88ba      	ldrh	r2, [r7, #4]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	b299      	uxth	r1, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	b29c      	uxth	r4, r3
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	4623      	mov	r3, r4
 8004bdc:	f7ff fb86 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	b298      	uxth	r0, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	88ba      	ldrh	r2, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	b299      	uxth	r1, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b29c      	uxth	r4, r3
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4623      	mov	r3, r4
 8004c12:	f7ff fb6b 	bl	80042ec <LCD_Rect_Fill>
 8004c16:	e0a7      	b.n	8004d68 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	4413      	add	r3, r2
 8004c20:	b298      	uxth	r0, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	88bb      	ldrh	r3, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	b299      	uxth	r1, r3
 8004c2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c36:	b29c      	uxth	r4, r3
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4623      	mov	r3, r4
 8004c3e:	f7ff fb55 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	4413      	add	r3, r2
 8004c4a:	b298      	uxth	r0, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	88bb      	ldrh	r3, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	b299      	uxth	r1, r3
 8004c56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c60:	b29c      	uxth	r4, r3
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4623      	mov	r3, r4
 8004c68:	f7ff fb40 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	b298      	uxth	r0, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	88bb      	ldrh	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b299      	uxth	r1, r3
 8004c80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c8a:	b29c      	uxth	r4, r3
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4623      	mov	r3, r4
 8004c92:	f7ff fb2b 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	b298      	uxth	r0, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	88bb      	ldrh	r3, [r7, #4]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	b299      	uxth	r1, r3
 8004caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cb4:	b29c      	uxth	r4, r3
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	4623      	mov	r3, r4
 8004cbc:	f7ff fb16 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	b298      	uxth	r0, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	88ba      	ldrh	r2, [r7, #4]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	b299      	uxth	r1, r3
 8004cd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cde:	b29c      	uxth	r4, r3
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	4623      	mov	r3, r4
 8004ce6:	f7ff fb01 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b298      	uxth	r0, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	88ba      	ldrh	r2, [r7, #4]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	b299      	uxth	r1, r3
 8004cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d08:	b29c      	uxth	r4, r3
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	4623      	mov	r3, r4
 8004d10:	f7ff faec 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	b298      	uxth	r0, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	88ba      	ldrh	r2, [r7, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	b299      	uxth	r1, r3
 8004d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d32:	b29c      	uxth	r4, r3
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4623      	mov	r3, r4
 8004d3a:	f7ff fad7 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	b298      	uxth	r0, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	88ba      	ldrh	r2, [r7, #4]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	b299      	uxth	r1, r3
 8004d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d5c:	b29c      	uxth	r4, r3
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	4623      	mov	r3, r4
 8004d64:	f7ff fac2 	bl	80042ec <LCD_Rect_Fill>
		}
		if (P < 0)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da09      	bge.n	8004d82 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1cda      	adds	r2, r3, #3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
			a_++;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e00d      	b.n	8004d9e <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1d5a      	adds	r2, r3, #5
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1acb      	subs	r3, r1, r3
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
			a_++;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	3301      	adds	r3, #1
 8004d96:	617b      	str	r3, [r7, #20]
			b_--;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	f77f aefe 	ble.w	8004ba4 <LCD_Circle+0x30>
		}
	}
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}

08004db2 <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004db2:	b590      	push	{r4, r7, lr}
 8004db4:	b089      	sub	sp, #36	; 0x24
 8004db6:	af02      	add	r7, sp, #8
 8004db8:	4604      	mov	r4, r0
 8004dba:	4608      	mov	r0, r1
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	80fb      	strh	r3, [r7, #6]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	80bb      	strh	r3, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	f1c3 0301 	rsb	r3, r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004dde:	887b      	ldrh	r3, [r7, #2]
 8004de0:	461a      	mov	r2, r3
 8004de2:	03d2      	lsls	r2, r2, #15
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004df4:	e0cd      	b.n	8004f92 <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004df6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db0e      	blt.n	8004e1c <LCD_Circle_Helper+0x6a>
			y--;
 8004dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004e0a:	8a7b      	ldrh	r3, [r7, #18]
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004e12:	8afa      	ldrh	r2, [r7, #22]
 8004e14:	8a7b      	ldrh	r3, [r7, #18]
 8004e16:	4413      	add	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004e1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3301      	adds	r3, #1
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004e28:	8abb      	ldrh	r3, [r7, #20]
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004e30:	8afa      	ldrh	r2, [r7, #22]
 8004e32:	8abb      	ldrh	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004e3a:	787b      	ldrb	r3, [r7, #1]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d025      	beq.n	8004e90 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	8a3b      	ldrh	r3, [r7, #16]
 8004e48:	4413      	add	r3, r2
 8004e4a:	b298      	uxth	r0, r3
 8004e4c:	88ba      	ldrh	r2, [r7, #4]
 8004e4e:	89fb      	ldrh	r3, [r7, #14]
 8004e50:	4413      	add	r3, r2
 8004e52:	b299      	uxth	r1, r3
 8004e54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e5e:	b29c      	uxth	r4, r3
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4623      	mov	r3, r4
 8004e66:	f7ff fa41 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	4413      	add	r3, r2
 8004e70:	b298      	uxth	r0, r3
 8004e72:	88ba      	ldrh	r2, [r7, #4]
 8004e74:	8a3b      	ldrh	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	b299      	uxth	r1, r3
 8004e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e84:	b29c      	uxth	r4, r3
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	f7ff fa2e 	bl	80042ec <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004e90:	787b      	ldrb	r3, [r7, #1]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d025      	beq.n	8004ee6 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	8a3b      	ldrh	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	b298      	uxth	r0, r3
 8004ea2:	88ba      	ldrh	r2, [r7, #4]
 8004ea4:	89fb      	ldrh	r3, [r7, #14]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	b299      	uxth	r1, r3
 8004eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eb4:	b29c      	uxth	r4, r3
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4623      	mov	r3, r4
 8004ebc:	f7ff fa16 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	89fb      	ldrh	r3, [r7, #14]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	b298      	uxth	r0, r3
 8004ec8:	88ba      	ldrh	r2, [r7, #4]
 8004eca:	8a3b      	ldrh	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eda:	b29c      	uxth	r4, r3
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	f7ff fa03 	bl	80042ec <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004ee6:	787b      	ldrb	r3, [r7, #1]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d025      	beq.n	8004f3c <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	89fb      	ldrh	r3, [r7, #14]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	b298      	uxth	r0, r3
 8004ef8:	88ba      	ldrh	r2, [r7, #4]
 8004efa:	8a3b      	ldrh	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	b299      	uxth	r1, r3
 8004f00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f0a:	b29c      	uxth	r4, r3
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4623      	mov	r3, r4
 8004f12:	f7ff f9eb 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	8a3b      	ldrh	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	b298      	uxth	r0, r3
 8004f1e:	88ba      	ldrh	r2, [r7, #4]
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	4413      	add	r3, r2
 8004f24:	b299      	uxth	r1, r3
 8004f26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f30:	b29c      	uxth	r4, r3
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4623      	mov	r3, r4
 8004f38:	f7ff f9d8 	bl	80042ec <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d025      	beq.n	8004f92 <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004f46:	88fa      	ldrh	r2, [r7, #6]
 8004f48:	89fb      	ldrh	r3, [r7, #14]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	b298      	uxth	r0, r3
 8004f4e:	88ba      	ldrh	r2, [r7, #4]
 8004f50:	8a3b      	ldrh	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	b299      	uxth	r1, r3
 8004f56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f60:	b29c      	uxth	r4, r3
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	4623      	mov	r3, r4
 8004f68:	f7ff f9c0 	bl	80042ec <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	8a3b      	ldrh	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	b298      	uxth	r0, r3
 8004f74:	88ba      	ldrh	r2, [r7, #4]
 8004f76:	89fb      	ldrh	r3, [r7, #14]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	b299      	uxth	r1, r3
 8004f7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	4623      	mov	r3, r4
 8004f8e:	f7ff f9ad 	bl	80042ec <LCD_Rect_Fill>
	while (x < y) {
 8004f92:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	f6ff af2b 	blt.w	8004df6 <LCD_Circle_Helper+0x44>
		}
	}
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd90      	pop	{r4, r7, pc}

08004faa <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004faa:	b590      	push	{r4, r7, lr}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af02      	add	r7, sp, #8
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4623      	mov	r3, r4
 8004fba:	80fb      	strh	r3, [r7, #6]
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	80bb      	strh	r3, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004fc8:	8b3a      	ldrh	r2, [r7, #24]
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	4413      	add	r3, r2
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	b298      	uxth	r0, r3
 8004fd4:	88fa      	ldrh	r2, [r7, #6]
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	4413      	add	r3, r2
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	7f3b      	ldrb	r3, [r7, #28]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	8b3b      	ldrh	r3, [r7, #24]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b02      	subs	r3, #2
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	88bc      	ldrh	r4, [r7, #4]
 8004ff0:	88b9      	ldrh	r1, [r7, #4]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	7f3b      	ldrb	r3, [r7, #28]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	f7ff f9b4 	bl	8004368 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8005000:	8b3a      	ldrh	r2, [r7, #24]
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	4413      	add	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	3302      	adds	r3, #2
 800500a:	b298      	uxth	r0, r3
 800500c:	88ba      	ldrh	r2, [r7, #4]
 800500e:	883b      	ldrh	r3, [r7, #0]
 8005010:	4413      	add	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b299      	uxth	r1, r3
 8005018:	88fa      	ldrh	r2, [r7, #6]
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	4413      	add	r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	7f3b      	ldrb	r3, [r7, #28]
 8005022:	b29b      	uxth	r3, r3
 8005024:	4413      	add	r3, r2
 8005026:	b29a      	uxth	r2, r3
 8005028:	8b3b      	ldrh	r3, [r7, #24]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b02      	subs	r3, #2
 8005030:	b29c      	uxth	r4, r3
 8005032:	88ba      	ldrh	r2, [r7, #4]
 8005034:	883b      	ldrh	r3, [r7, #0]
 8005036:	4413      	add	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	7f3b      	ldrb	r3, [r7, #28]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	4622      	mov	r2, r4
 800504a:	f7ff f98d 	bl	8004368 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 800504e:	8b3a      	ldrh	r2, [r7, #24]
 8005050:	88bb      	ldrh	r3, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	b29b      	uxth	r3, r3
 8005056:	3302      	adds	r3, #2
 8005058:	b299      	uxth	r1, r3
 800505a:	88ba      	ldrh	r2, [r7, #4]
 800505c:	883b      	ldrh	r3, [r7, #0]
 800505e:	4413      	add	r3, r2
 8005060:	b29a      	uxth	r2, r3
 8005062:	7f3b      	ldrb	r3, [r7, #28]
 8005064:	b29b      	uxth	r3, r3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	b29a      	uxth	r2, r3
 800506a:	8b3b      	ldrh	r3, [r7, #24]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b02      	subs	r3, #2
 8005072:	b29c      	uxth	r4, r3
 8005074:	88fa      	ldrh	r2, [r7, #6]
 8005076:	88f8      	ldrh	r0, [r7, #6]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	7f3b      	ldrb	r3, [r7, #28]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4623      	mov	r3, r4
 8005082:	f7ff f971 	bl	8004368 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	887b      	ldrh	r3, [r7, #2]
 800508a:	4413      	add	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b298      	uxth	r0, r3
 8005092:	8b3a      	ldrh	r2, [r7, #24]
 8005094:	88bb      	ldrh	r3, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	b29b      	uxth	r3, r3
 800509a:	3302      	adds	r3, #2
 800509c:	b299      	uxth	r1, r3
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	887b      	ldrh	r3, [r7, #2]
 80050a2:	4413      	add	r3, r2
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29c      	uxth	r4, r3
 80050aa:	88ba      	ldrh	r2, [r7, #4]
 80050ac:	883b      	ldrh	r3, [r7, #0]
 80050ae:	4413      	add	r3, r2
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	7f3b      	ldrb	r3, [r7, #28]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	8b3b      	ldrh	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b02      	subs	r3, #2
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	7f3b      	ldrb	r3, [r7, #28]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	4622      	mov	r2, r4
 80050d0:	f7ff f94a 	bl	8004368 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 80050d4:	8b3a      	ldrh	r2, [r7, #24]
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	4413      	add	r3, r2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3302      	adds	r3, #2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	b218      	sxth	r0, r3
 80050e2:	8b3a      	ldrh	r2, [r7, #24]
 80050e4:	88bb      	ldrh	r3, [r7, #4]
 80050e6:	4413      	add	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3302      	adds	r3, #2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	b219      	sxth	r1, r3
 80050f0:	8b3b      	ldrh	r3, [r7, #24]
 80050f2:	3302      	adds	r3, #2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	b21a      	sxth	r2, r3
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	7f3b      	ldrb	r3, [r7, #28]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2301      	movs	r3, #1
 8005102:	f7ff fe56 	bl	8004db2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	887b      	ldrh	r3, [r7, #2]
 800510a:	4413      	add	r3, r2
 800510c:	b29a      	uxth	r2, r3
 800510e:	8b3b      	ldrh	r3, [r7, #24]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b03      	subs	r3, #3
 8005116:	b29b      	uxth	r3, r3
 8005118:	b218      	sxth	r0, r3
 800511a:	8b3a      	ldrh	r2, [r7, #24]
 800511c:	88bb      	ldrh	r3, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	b29b      	uxth	r3, r3
 8005122:	3302      	adds	r3, #2
 8005124:	b29b      	uxth	r3, r3
 8005126:	b219      	sxth	r1, r3
 8005128:	8b3b      	ldrh	r3, [r7, #24]
 800512a:	3302      	adds	r3, #2
 800512c:	b29b      	uxth	r3, r3
 800512e:	b21a      	sxth	r2, r3
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	7f3b      	ldrb	r3, [r7, #28]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2302      	movs	r3, #2
 800513a:	f7ff fe3a 	bl	8004db2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 800513e:	88fa      	ldrh	r2, [r7, #6]
 8005140:	887b      	ldrh	r3, [r7, #2]
 8005142:	4413      	add	r3, r2
 8005144:	b29a      	uxth	r2, r3
 8005146:	8b3b      	ldrh	r3, [r7, #24]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b03      	subs	r3, #3
 800514e:	b29b      	uxth	r3, r3
 8005150:	b218      	sxth	r0, r3
 8005152:	88ba      	ldrh	r2, [r7, #4]
 8005154:	883b      	ldrh	r3, [r7, #0]
 8005156:	4413      	add	r3, r2
 8005158:	b29a      	uxth	r2, r3
 800515a:	8b3b      	ldrh	r3, [r7, #24]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b03      	subs	r3, #3
 8005162:	b29b      	uxth	r3, r3
 8005164:	b219      	sxth	r1, r3
 8005166:	8b3b      	ldrh	r3, [r7, #24]
 8005168:	3302      	adds	r3, #2
 800516a:	b29b      	uxth	r3, r3
 800516c:	b21a      	sxth	r2, r3
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	7f3b      	ldrb	r3, [r7, #28]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2304      	movs	r3, #4
 8005178:	f7ff fe1b 	bl	8004db2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 800517c:	8b3a      	ldrh	r2, [r7, #24]
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	4413      	add	r3, r2
 8005182:	b29b      	uxth	r3, r3
 8005184:	3302      	adds	r3, #2
 8005186:	b29b      	uxth	r3, r3
 8005188:	b218      	sxth	r0, r3
 800518a:	88ba      	ldrh	r2, [r7, #4]
 800518c:	883b      	ldrh	r3, [r7, #0]
 800518e:	4413      	add	r3, r2
 8005190:	b29a      	uxth	r2, r3
 8005192:	8b3b      	ldrh	r3, [r7, #24]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b03      	subs	r3, #3
 800519a:	b29b      	uxth	r3, r3
 800519c:	b219      	sxth	r1, r3
 800519e:	8b3b      	ldrh	r3, [r7, #24]
 80051a0:	3302      	adds	r3, #2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	b21a      	sxth	r2, r3
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	7f3b      	ldrb	r3, [r7, #28]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	2308      	movs	r3, #8
 80051b0:	f7ff fdff 	bl	8004db2 <LCD_Circle_Helper>
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd90      	pop	{r4, r7, pc}

080051bc <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b089      	sub	sp, #36	; 0x24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	4604      	mov	r4, r0
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	4623      	mov	r3, r4
 80051cc:	80fb      	strh	r3, [r7, #6]
 80051ce:	4603      	mov	r3, r0
 80051d0:	80bb      	strh	r3, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	807b      	strh	r3, [r7, #2]
 80051d6:	4613      	mov	r3, r2
 80051d8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80051da:	887b      	ldrh	r3, [r7, #2]
 80051dc:	f1c3 0301 	rsb	r3, r3, #1
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80051e4:	2301      	movs	r3, #1
 80051e6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	461a      	mov	r2, r3
 80051ec:	03d2      	lsls	r2, r2, #15
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80051fa:	887b      	ldrh	r3, [r7, #2]
 80051fc:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80051fe:	e0ab      	b.n	8005358 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8005200:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005204:	2b00      	cmp	r3, #0
 8005206:	db0e      	blt.n	8005226 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8005208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29b      	uxth	r3, r3
 8005212:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005214:	8a7b      	ldrh	r3, [r7, #18]
 8005216:	3302      	adds	r3, #2
 8005218:	b29b      	uxth	r3, r3
 800521a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800521c:	8afa      	ldrh	r2, [r7, #22]
 800521e:	8a7b      	ldrh	r3, [r7, #18]
 8005220:	4413      	add	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005226:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800522a:	b29b      	uxth	r3, r3
 800522c:	3301      	adds	r3, #1
 800522e:	b29b      	uxth	r3, r3
 8005230:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005232:	8abb      	ldrh	r3, [r7, #20]
 8005234:	3302      	adds	r3, #2
 8005236:	b29b      	uxth	r3, r3
 8005238:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800523a:	8afa      	ldrh	r2, [r7, #22]
 800523c:	8abb      	ldrh	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8005244:	787b      	ldrb	r3, [r7, #1]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d03f      	beq.n	80052ce <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	8a3b      	ldrh	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	b298      	uxth	r0, r3
 8005256:	88ba      	ldrh	r2, [r7, #4]
 8005258:	89fb      	ldrh	r3, [r7, #14]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	b299      	uxth	r1, r3
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	8a3b      	ldrh	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	b29c      	uxth	r4, r3
 8005266:	88ba      	ldrh	r2, [r7, #4]
 8005268:	89fb      	ldrh	r3, [r7, #14]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	b29a      	uxth	r2, r3
 800526e:	89fb      	ldrh	r3, [r7, #14]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	4413      	add	r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800527a:	4413      	add	r3, r2
 800527c:	b29a      	uxth	r2, r3
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	2301      	movs	r3, #1
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	4622      	mov	r2, r4
 800528a:	f7ff f86d 	bl	8004368 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	89fb      	ldrh	r3, [r7, #14]
 8005292:	4413      	add	r3, r2
 8005294:	b298      	uxth	r0, r3
 8005296:	88ba      	ldrh	r2, [r7, #4]
 8005298:	8a3b      	ldrh	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	b299      	uxth	r1, r3
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	4413      	add	r3, r2
 80052a4:	b29c      	uxth	r4, r3
 80052a6:	88ba      	ldrh	r2, [r7, #4]
 80052a8:	8a3b      	ldrh	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	8a3b      	ldrh	r3, [r7, #16]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4413      	add	r3, r2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052ba:	4413      	add	r3, r2
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	2301      	movs	r3, #1
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	4622      	mov	r2, r4
 80052ca:	f7ff f84d 	bl	8004368 <LCD_Line>
		}
		if (cornername & 0x2) {
 80052ce:	787b      	ldrb	r3, [r7, #1]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d03f      	beq.n	8005358 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	8a3b      	ldrh	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	b298      	uxth	r0, r3
 80052e0:	88ba      	ldrh	r2, [r7, #4]
 80052e2:	89fb      	ldrh	r3, [r7, #14]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	b299      	uxth	r1, r3
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	8a3b      	ldrh	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	b29c      	uxth	r4, r3
 80052f0:	88ba      	ldrh	r2, [r7, #4]
 80052f2:	89fb      	ldrh	r3, [r7, #14]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4413      	add	r3, r2
 8005300:	b29a      	uxth	r2, r3
 8005302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005304:	4413      	add	r3, r2
 8005306:	b29a      	uxth	r2, r3
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	2301      	movs	r3, #1
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	4622      	mov	r2, r4
 8005314:	f7ff f828 	bl	8004368 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	89fb      	ldrh	r3, [r7, #14]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	b298      	uxth	r0, r3
 8005320:	88ba      	ldrh	r2, [r7, #4]
 8005322:	8a3b      	ldrh	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	b299      	uxth	r1, r3
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	89fb      	ldrh	r3, [r7, #14]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	b29c      	uxth	r4, r3
 8005330:	88ba      	ldrh	r2, [r7, #4]
 8005332:	8a3b      	ldrh	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	b29a      	uxth	r2, r3
 8005338:	8a3b      	ldrh	r3, [r7, #16]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	b29b      	uxth	r3, r3
 800533e:	4413      	add	r3, r2
 8005340:	b29a      	uxth	r2, r3
 8005342:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005344:	4413      	add	r3, r2
 8005346:	b29a      	uxth	r2, r3
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	2301      	movs	r3, #1
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	4622      	mov	r2, r4
 8005354:	f7ff f808 	bl	8004368 <LCD_Line>
	while (x < y) {
 8005358:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800535c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005360:	429a      	cmp	r2, r3
 8005362:	f6ff af4d 	blt.w	8005200 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd90      	pop	{r4, r7, pc}

08005370 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b085      	sub	sp, #20
 8005374:	af02      	add	r7, sp, #8
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	4623      	mov	r3, r4
 8005380:	80fb      	strh	r3, [r7, #6]
 8005382:	4603      	mov	r3, r0
 8005384:	80bb      	strh	r3, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	807b      	strh	r3, [r7, #2]
 800538a:	4613      	mov	r3, r2
 800538c:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	8b3b      	ldrh	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	b298      	uxth	r0, r3
 8005396:	8b3b      	ldrh	r3, [r7, #24]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	b29b      	uxth	r3, r3
 800539c:	887a      	ldrh	r2, [r7, #2]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	883c      	ldrh	r4, [r7, #0]
 80053a4:	88b9      	ldrh	r1, [r7, #4]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4623      	mov	r3, r4
 80053ac:	f7fe ff9e 	bl	80042ec <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 80053b0:	88fa      	ldrh	r2, [r7, #6]
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	4413      	add	r3, r2
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	8b3b      	ldrh	r3, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	b218      	sxth	r0, r3
 80053c4:	88ba      	ldrh	r2, [r7, #4]
 80053c6:	8b3b      	ldrh	r3, [r7, #24]
 80053c8:	4413      	add	r3, r2
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	b219      	sxth	r1, r3
 80053ce:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80053d2:	8b3b      	ldrh	r3, [r7, #24]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	883a      	ldrh	r2, [r7, #0]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	b21b      	sxth	r3, r3
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	9201      	str	r2, [sp, #4]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2301      	movs	r3, #1
 80053ec:	4622      	mov	r2, r4
 80053ee:	f7ff fee5 	bl	80051bc <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 80053f2:	88fa      	ldrh	r2, [r7, #6]
 80053f4:	8b3b      	ldrh	r3, [r7, #24]
 80053f6:	4413      	add	r3, r2
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	b218      	sxth	r0, r3
 80053fc:	88ba      	ldrh	r2, [r7, #4]
 80053fe:	8b3b      	ldrh	r3, [r7, #24]
 8005400:	4413      	add	r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	b219      	sxth	r1, r3
 8005406:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800540a:	8b3b      	ldrh	r3, [r7, #24]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	883a      	ldrh	r2, [r7, #0]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	b21b      	sxth	r3, r3
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	9201      	str	r2, [sp, #4]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2302      	movs	r3, #2
 8005424:	4622      	mov	r2, r4
 8005426:	f7ff fec9 	bl	80051bc <LCD_Circle_Fill_Helper>
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}

08005432 <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8005432:	b590      	push	{r4, r7, lr}
 8005434:	b08b      	sub	sp, #44	; 0x2c
 8005436:	af02      	add	r7, sp, #8
 8005438:	60ba      	str	r2, [r7, #8]
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	4603      	mov	r3, r0
 800543e:	81fb      	strh	r3, [r7, #14]
 8005440:	460b      	mov	r3, r1
 8005442:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	777b      	strb	r3, [r7, #29]
 8005454:	2300      	movs	r3, #0
 8005456:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800545c:	2300      	movs	r3, #0
 800545e:	763b      	strb	r3, [r7, #24]
 8005460:	e093      	b.n	800558a <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005462:	2300      	movs	r3, #0
 8005464:	767b      	strb	r3, [r7, #25]
 8005466:	e052      	b.n	800550e <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005468:	7f3b      	ldrb	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800546e:	8bfb      	ldrh	r3, [r7, #30]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	83fa      	strh	r2, [r7, #30]
 8005474:	461a      	mov	r2, r3
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	4413      	add	r3, r2
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8005482:	7f7a      	ldrb	r2, [r7, #29]
 8005484:	7f3b      	ldrb	r3, [r7, #28]
 8005486:	4013      	ands	r3, r2
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <LCD_Char+0x64>
			{
				set_pixels++;
 800548e:	8b7b      	ldrh	r3, [r7, #26]
 8005490:	3301      	adds	r3, #1
 8005492:	837b      	strh	r3, [r7, #26]
 8005494:	e035      	b.n	8005502 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8005496:	8b7b      	ldrh	r3, [r7, #26]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80054a2:	461a      	mov	r2, r3
 80054a4:	7e7b      	ldrb	r3, [r7, #25]
 80054a6:	441a      	add	r2, r3
 80054a8:	8b7b      	ldrh	r3, [r7, #26]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	fb12 f303 	smulbb	r3, r2, r3
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	89fb      	ldrh	r3, [r7, #14]
 80054bc:	4413      	add	r3, r2
 80054be:	b298      	uxth	r0, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80054c6:	461a      	mov	r2, r3
 80054c8:	7e3b      	ldrb	r3, [r7, #24]
 80054ca:	4413      	add	r3, r2
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	fb12 f303 	smulbb	r3, r2, r3
 80054d8:	b29a      	uxth	r2, r3
 80054da:	89bb      	ldrh	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	b299      	uxth	r1, r3
 80054e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8b7a      	ldrh	r2, [r7, #26]
 80054e8:	fb12 f303 	smulbb	r3, r2, r3
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054f2:	b29c      	uxth	r4, r3
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	4623      	mov	r3, r4
 80054fa:	f7fe fef7 	bl	80042ec <LCD_Rect_Fill>
				set_pixels = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8005502:	7f3b      	ldrb	r3, [r7, #28]
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005508:	7e7b      	ldrb	r3, [r7, #25]
 800550a:	3301      	adds	r3, #1
 800550c:	767b      	strb	r3, [r7, #25]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	7e7a      	ldrb	r2, [r7, #25]
 8005514:	429a      	cmp	r2, r3
 8005516:	d3a7      	bcc.n	8005468 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8005518:	8b7b      	ldrh	r3, [r7, #26]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d032      	beq.n	8005584 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005524:	461a      	mov	r2, r3
 8005526:	7e7b      	ldrb	r3, [r7, #25]
 8005528:	441a      	add	r2, r3
 800552a:	8b7b      	ldrh	r3, [r7, #26]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	b29a      	uxth	r2, r3
 8005530:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005534:	b29b      	uxth	r3, r3
 8005536:	fb12 f303 	smulbb	r3, r2, r3
 800553a:	b29a      	uxth	r2, r3
 800553c:	89fb      	ldrh	r3, [r7, #14]
 800553e:	4413      	add	r3, r2
 8005540:	b298      	uxth	r0, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005548:	461a      	mov	r2, r3
 800554a:	7e3b      	ldrb	r3, [r7, #24]
 800554c:	4413      	add	r3, r2
 800554e:	b29a      	uxth	r2, r3
 8005550:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005554:	b29b      	uxth	r3, r3
 8005556:	fb12 f303 	smulbb	r3, r2, r3
 800555a:	b29a      	uxth	r2, r3
 800555c:	89bb      	ldrh	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	b299      	uxth	r1, r3
 8005562:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005566:	b29b      	uxth	r3, r3
 8005568:	8b7a      	ldrh	r2, [r7, #26]
 800556a:	fb12 f303 	smulbb	r3, r2, r3
 800556e:	b29a      	uxth	r2, r3
 8005570:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005574:	b29c      	uxth	r4, r3
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	4623      	mov	r3, r4
 800557c:	f7fe feb6 	bl	80042ec <LCD_Rect_Fill>
			set_pixels = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005584:	7e3b      	ldrb	r3, [r7, #24]
 8005586:	3301      	adds	r3, #1
 8005588:	763b      	strb	r3, [r7, #24]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	78db      	ldrb	r3, [r3, #3]
 800558e:	7e3a      	ldrb	r2, [r7, #24]
 8005590:	429a      	cmp	r2, r3
 8005592:	f4ff af66 	bcc.w	8005462 <LCD_Char+0x30>
		}
	}
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	3724      	adds	r7, #36	; 0x24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd90      	pop	{r4, r7, pc}

080055a0 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b08f      	sub	sp, #60	; 0x3c
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60ba      	str	r2, [r7, #8]
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	4603      	mov	r3, r0
 80055ac:	81fb      	strh	r3, [r7, #14]
 80055ae:	460b      	mov	r3, r1
 80055b0:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80055b2:	89fb      	ldrh	r3, [r7, #14]
 80055b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80055b6:	89bb      	ldrh	r3, [r7, #12]
 80055b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80055ba:	f107 031c 	add.w	r3, r7, #28
 80055be:	220c      	movs	r2, #12
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f017 f8e0 	bl	801c788 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055cc:	e056      	b.n	800567c <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80055ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80055da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80055de:	2b0a      	cmp	r3, #10
 80055e0:	d10f      	bne.n	8005602 <LCD_Font+0x62>
		{
			cursor_x = x;
 80055e2:	89fb      	ldrh	r3, [r7, #14]
 80055e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80055e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	fb12 f303 	smulbb	r3, r2, r3
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055fa:	4413      	add	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005600:	e039      	b.n	8005676 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8005602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005606:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800560a:	429a      	cmp	r2, r3
 800560c:	d333      	bcc.n	8005676 <LCD_Font+0xd6>
 800560e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005612:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005616:	429a      	cmp	r2, r3
 8005618:	d82d      	bhi.n	8005676 <LCD_Font+0xd6>
 800561a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800561e:	2b0d      	cmp	r3, #13
 8005620:	d029      	beq.n	8005676 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005628:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800562c:	1a5b      	subs	r3, r3, r1
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	18d1      	adds	r1, r2, r3
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	2208      	movs	r2, #8
 8005638:	4618      	mov	r0, r3
 800563a:	f017 f8a5 	bl	801c788 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800563e:	f107 041c 	add.w	r4, r7, #28
 8005642:	f107 0214 	add.w	r2, r7, #20
 8005646:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800564a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800564e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	4623      	mov	r3, r4
 800565a:	f7ff feea 	bl	8005432 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800565e:	7e3b      	ldrb	r3, [r7, #24]
 8005660:	b29a      	uxth	r2, r3
 8005662:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005666:	b29b      	uxth	r3, r3
 8005668:	fb12 f303 	smulbb	r3, r2, r3
 800566c:	b29a      	uxth	r2, r3
 800566e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005670:	4413      	add	r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005676:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005678:	3301      	adds	r3, #1
 800567a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800567c:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800567e:	68b8      	ldr	r0, [r7, #8]
 8005680:	f013 f9ac 	bl	80189dc <strlen>
 8005684:	4603      	mov	r3, r0
 8005686:	429c      	cmp	r4, r3
 8005688:	d3a1      	bcc.n	80055ce <LCD_Font+0x2e>
		}
	}
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	3734      	adds	r7, #52	; 0x34
 8005690:	46bd      	mov	sp, r7
 8005692:	bd90      	pop	{r4, r7, pc}

08005694 <LCD_Init>:

void LCD_Init(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8005698:	2096      	movs	r0, #150	; 0x96
 800569a:	f001 f913 	bl	80068c4 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 800569e:	2001      	movs	r0, #1
 80056a0:	f7fe fd95 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 80056a4:	2029      	movs	r0, #41	; 0x29
 80056a6:	f7fe fd92 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 80056aa:	20e2      	movs	r0, #226	; 0xe2
 80056ac:	f7fe fd8f 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 80056b0:	201d      	movs	r0, #29
 80056b2:	f7fe fd9b 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 80056b6:	2002      	movs	r0, #2
 80056b8:	f7fe fd98 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 80056bc:	20ff      	movs	r0, #255	; 0xff
 80056be:	f7fe fd95 	bl	80041ec <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 80056c2:	20e0      	movs	r0, #224	; 0xe0
 80056c4:	f7fe fd83 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80056c8:	2001      	movs	r0, #1
 80056ca:	f7fe fd8f 	bl	80041ec <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 80056ce:	2078      	movs	r0, #120	; 0x78
 80056d0:	f001 f8f8 	bl	80068c4 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 80056d4:	20e0      	movs	r0, #224	; 0xe0
 80056d6:	f7fe fd7a 	bl	80041ce <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 80056da:	2003      	movs	r0, #3
 80056dc:	f7fe fd86 	bl	80041ec <LCD_Send_Dat>
	HAL_Delay(120);
 80056e0:	2078      	movs	r0, #120	; 0x78
 80056e2:	f001 f8ef 	bl	80068c4 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80056e6:	2001      	movs	r0, #1
 80056e8:	f7fe fd71 	bl	80041ce <LCD_Send_Cmd>
	HAL_Delay(120);
 80056ec:	2078      	movs	r0, #120	; 0x78
 80056ee:	f001 f8e9 	bl	80068c4 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 80056f2:	20e6      	movs	r0, #230	; 0xe6
 80056f4:	f7fe fd6b 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 80056f8:	2003      	movs	r0, #3
 80056fa:	f7fe fd77 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 80056fe:	2085      	movs	r0, #133	; 0x85
 8005700:	f7fe fd74 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8005704:	201d      	movs	r0, #29
 8005706:	f7fe fd71 	bl	80041ec <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 800570a:	20b0      	movs	r0, #176	; 0xb0
 800570c:	f7fe fd5f 	bl	80041ce <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 8005710:	20ae      	movs	r0, #174	; 0xae
 8005712:	f7fe fd6b 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 8005716:	2020      	movs	r0, #32
 8005718:	f7fe fd68 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 800571c:	2003      	movs	r0, #3
 800571e:	f7fe fd65 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 8005722:	201f      	movs	r0, #31
 8005724:	f7fe fd62 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 8005728:	2001      	movs	r0, #1
 800572a:	f7fe fd5f 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 800572e:	20df      	movs	r0, #223	; 0xdf
 8005730:	f7fe fd5c 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005734:	202d      	movs	r0, #45	; 0x2d
 8005736:	f7fe fd59 	bl	80041ec <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 800573a:	20b4      	movs	r0, #180	; 0xb4
 800573c:	f7fe fd47 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8005740:	2003      	movs	r0, #3
 8005742:	f7fe fd53 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8005746:	20a0      	movs	r0, #160	; 0xa0
 8005748:	f7fe fd50 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 800574c:	2000      	movs	r0, #0
 800574e:	f7fe fd4d 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8005752:	202e      	movs	r0, #46	; 0x2e
 8005754:	f7fe fd4a 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8005758:	2030      	movs	r0, #48	; 0x30
 800575a:	f7fe fd47 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 800575e:	2000      	movs	r0, #0
 8005760:	f7fe fd44 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005764:	200f      	movs	r0, #15
 8005766:	f7fe fd41 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 800576a:	2000      	movs	r0, #0
 800576c:	f7fe fd3e 	bl	80041ec <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8005770:	20b6      	movs	r0, #182	; 0xb6
 8005772:	f7fe fd2c 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 8005776:	2002      	movs	r0, #2
 8005778:	f7fe fd38 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 800577c:	200d      	movs	r0, #13
 800577e:	f7fe fd35 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 8005782:	2000      	movs	r0, #0
 8005784:	f7fe fd32 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8005788:	2010      	movs	r0, #16
 800578a:	f7fe fd2f 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 800578e:	2010      	movs	r0, #16
 8005790:	f7fe fd2c 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 8005794:	2008      	movs	r0, #8
 8005796:	f7fe fd29 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 800579a:	2000      	movs	r0, #0
 800579c:	f7fe fd26 	bl	80041ec <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 80057a0:	20be      	movs	r0, #190	; 0xbe
 80057a2:	f7fe fd14 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80057a6:	2008      	movs	r0, #8
 80057a8:	f7fe fd20 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 80057ac:	20ff      	movs	r0, #255	; 0xff
 80057ae:	f7fe fd1d 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7fe fd1a 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 80057b8:	2036      	movs	r0, #54	; 0x36
 80057ba:	f7fe fd08 	bl	80041ce <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 80057be:	2003      	movs	r0, #3
 80057c0:	f7fe fd14 	bl	80041ec <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80057c4:	20f0      	movs	r0, #240	; 0xf0
 80057c6:	f7fe fd02 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80057ca:	2003      	movs	r0, #3
 80057cc:	f7fe fd0e 	bl	80041ec <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 80057d0:	2029      	movs	r0, #41	; 0x29
 80057d2:	f7fe fcfc 	bl	80041ce <LCD_Send_Cmd>
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}

080057da <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	4603      	mov	r3, r0
 80057e2:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 80057e4:	20be      	movs	r0, #190	; 0xbe
 80057e6:	f7fe fcf2 	bl	80041ce <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80057ea:	2008      	movs	r0, #8
 80057ec:	f7fe fcfe 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fcf9 	bl	80041ec <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 80057fa:	2001      	movs	r0, #1
 80057fc:	f7fe fcf6 	bl	80041ec <LCD_Send_Dat>
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800580e:	2300      	movs	r3, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_MspInit+0x4c>)
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	4a0f      	ldr	r2, [pc, #60]	; (8005854 <HAL_MspInit+0x4c>)
 8005818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800581c:	6453      	str	r3, [r2, #68]	; 0x44
 800581e:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <HAL_MspInit+0x4c>)
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_MspInit+0x4c>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	4a08      	ldr	r2, [pc, #32]	; (8005854 <HAL_MspInit+0x4c>)
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005838:	6413      	str	r3, [r2, #64]	; 0x40
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_MspInit+0x4c>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800

08005858 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	60da      	str	r2, [r3, #12]
 800586e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a17      	ldr	r2, [pc, #92]	; (80058d4 <HAL_DAC_MspInit+0x7c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d127      	bne.n	80058ca <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <HAL_DAC_MspInit+0x80>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <HAL_DAC_MspInit+0x80>)
 8005884:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005888:	6413      	str	r3, [r2, #64]	; 0x40
 800588a:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <HAL_DAC_MspInit+0x80>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <HAL_DAC_MspInit+0x80>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	4a0e      	ldr	r2, [pc, #56]	; (80058d8 <HAL_DAC_MspInit+0x80>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6313      	str	r3, [r2, #48]	; 0x30
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <HAL_DAC_MspInit+0x80>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80058b2:	2330      	movs	r3, #48	; 0x30
 80058b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058b6:	2303      	movs	r3, #3
 80058b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058be:	f107 0314 	add.w	r3, r7, #20
 80058c2:	4619      	mov	r1, r3
 80058c4:	4805      	ldr	r0, [pc, #20]	; (80058dc <HAL_DAC_MspInit+0x84>)
 80058c6:	f005 f919 	bl	800aafc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80058ca:	bf00      	nop
 80058cc:	3728      	adds	r7, #40	; 0x28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40007400 	.word	0x40007400
 80058d8:	40023800 	.word	0x40023800
 80058dc:	40020000 	.word	0x40020000

080058e0 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <HAL_DAC_MspDeInit+0x30>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d109      	bne.n	8005906 <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <HAL_DAC_MspDeInit+0x34>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	4a07      	ldr	r2, [pc, #28]	; (8005914 <HAL_DAC_MspDeInit+0x34>)
 80058f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058fc:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 80058fe:	2130      	movs	r1, #48	; 0x30
 8005900:	4805      	ldr	r0, [pc, #20]	; (8005918 <HAL_DAC_MspDeInit+0x38>)
 8005902:	f005 fa97 	bl	800ae34 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40007400 	.word	0x40007400
 8005914:	40023800 	.word	0x40023800
 8005918:	40020000 	.word	0x40020000

0800591c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a21      	ldr	r2, [pc, #132]	; (80059c0 <HAL_I2C_MspInit+0xa4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d13b      	bne.n	80059b6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_I2C_MspInit+0xa8>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <HAL_I2C_MspInit+0xa8>)
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	6313      	str	r3, [r2, #48]	; 0x30
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_I2C_MspInit+0xa8>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800595a:	23c0      	movs	r3, #192	; 0xc0
 800595c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800595e:	2312      	movs	r3, #18
 8005960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005962:	2301      	movs	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005966:	2303      	movs	r3, #3
 8005968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800596a:	2304      	movs	r3, #4
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800596e:	f107 0314 	add.w	r3, r7, #20
 8005972:	4619      	mov	r1, r3
 8005974:	4814      	ldr	r0, [pc, #80]	; (80059c8 <HAL_I2C_MspInit+0xac>)
 8005976:	f005 f8c1 	bl	800aafc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <HAL_I2C_MspInit+0xa8>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <HAL_I2C_MspInit+0xa8>)
 8005984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005988:	6413      	str	r3, [r2, #64]	; 0x40
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <HAL_I2C_MspInit+0xa8>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005996:	2200      	movs	r2, #0
 8005998:	2100      	movs	r1, #0
 800599a:	201f      	movs	r0, #31
 800599c:	f001 fa89 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80059a0:	201f      	movs	r0, #31
 80059a2:	f001 faa2 	bl	8006eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2100      	movs	r1, #0
 80059aa:	2020      	movs	r0, #32
 80059ac:	f001 fa81 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80059b0:	2020      	movs	r0, #32
 80059b2:	f001 fa9a 	bl	8006eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059b6:	bf00      	nop
 80059b8:	3728      	adds	r7, #40	; 0x28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40005400 	.word	0x40005400
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40020400 	.word	0x40020400

080059cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <HAL_I2C_MspDeInit+0x44>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d113      	bne.n	8005a06 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <HAL_I2C_MspDeInit+0x48>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	4a0c      	ldr	r2, [pc, #48]	; (8005a14 <HAL_I2C_MspDeInit+0x48>)
 80059e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059e8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80059ea:	2140      	movs	r1, #64	; 0x40
 80059ec:	480a      	ldr	r0, [pc, #40]	; (8005a18 <HAL_I2C_MspDeInit+0x4c>)
 80059ee:	f005 fa21 	bl	800ae34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80059f2:	2180      	movs	r1, #128	; 0x80
 80059f4:	4808      	ldr	r0, [pc, #32]	; (8005a18 <HAL_I2C_MspDeInit+0x4c>)
 80059f6:	f005 fa1d 	bl	800ae34 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80059fa:	201f      	movs	r0, #31
 80059fc:	f001 fa83 	bl	8006f06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005a00:	2020      	movs	r0, #32
 8005a02:	f001 fa80 	bl	8006f06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40005400 	.word	0x40005400
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40020400 	.word	0x40020400

08005a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08e      	sub	sp, #56	; 0x38
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a89      	ldr	r2, [pc, #548]	; (8005c60 <HAL_SPI_MspInit+0x244>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d12c      	bne.n	8005a98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	4b88      	ldr	r3, [pc, #544]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	4a87      	ldr	r2, [pc, #540]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a4e:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a56:	60bb      	str	r3, [r7, #8]
 8005a58:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	4b81      	ldr	r3, [pc, #516]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	4a80      	ldr	r2, [pc, #512]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005a64:	f043 0302 	orr.w	r3, r3, #2
 8005a68:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6a:	4b7e      	ldr	r3, [pc, #504]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005a76:	2338      	movs	r3, #56	; 0x38
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a82:	2303      	movs	r3, #3
 8005a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a86:	2305      	movs	r3, #5
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4875      	ldr	r0, [pc, #468]	; (8005c68 <HAL_SPI_MspInit+0x24c>)
 8005a92:	f005 f833 	bl	800aafc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005a96:	e0de      	b.n	8005c56 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a73      	ldr	r2, [pc, #460]	; (8005c6c <HAL_SPI_MspInit+0x250>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	f040 8088 	bne.w	8005bb4 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	4b6e      	ldr	r3, [pc, #440]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	4a6d      	ldr	r2, [pc, #436]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab4:	4b6b      	ldr	r3, [pc, #428]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	4b67      	ldr	r3, [pc, #412]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	4a66      	ldr	r2, [pc, #408]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad0:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005adc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aea:	2303      	movs	r3, #3
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005aee:	2305      	movs	r3, #5
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af6:	4619      	mov	r1, r3
 8005af8:	485b      	ldr	r0, [pc, #364]	; (8005c68 <HAL_SPI_MspInit+0x24c>)
 8005afa:	f004 ffff 	bl	800aafc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005afe:	4b5c      	ldr	r3, [pc, #368]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b00:	4a5c      	ldr	r2, [pc, #368]	; (8005c74 <HAL_SPI_MspInit+0x258>)
 8005b02:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005b04:	4b5a      	ldr	r3, [pc, #360]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b0a:	4b59      	ldr	r3, [pc, #356]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b0c:	2240      	movs	r2, #64	; 0x40
 8005b0e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b10:	4b57      	ldr	r3, [pc, #348]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b16:	4b56      	ldr	r3, [pc, #344]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b1c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b1e:	4b54      	ldr	r3, [pc, #336]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b24:	4b52      	ldr	r3, [pc, #328]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005b2a:	4b51      	ldr	r3, [pc, #324]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b30:	4b4f      	ldr	r3, [pc, #316]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b36:	4b4e      	ldr	r3, [pc, #312]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005b3c:	484c      	ldr	r0, [pc, #304]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b3e:	f001 ff97 	bl	8007a70 <HAL_DMA_Init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8005b48:	f7fe fae8 	bl	800411c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a48      	ldr	r2, [pc, #288]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b50:	649a      	str	r2, [r3, #72]	; 0x48
 8005b52:	4a47      	ldr	r2, [pc, #284]	; (8005c70 <HAL_SPI_MspInit+0x254>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005b58:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b5a:	4a48      	ldr	r2, [pc, #288]	; (8005c7c <HAL_SPI_MspInit+0x260>)
 8005b5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005b5e:	4b46      	ldr	r3, [pc, #280]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b64:	4b44      	ldr	r3, [pc, #272]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b6a:	4b43      	ldr	r3, [pc, #268]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b70:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b76:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b78:	4b3f      	ldr	r3, [pc, #252]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b7e:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005b84:	4b3c      	ldr	r3, [pc, #240]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b90:	4b39      	ldr	r3, [pc, #228]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005b96:	4838      	ldr	r0, [pc, #224]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005b98:	f001 ff6a 	bl	8007a70 <HAL_DMA_Init>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8005ba2:	f7fe fabb 	bl	800411c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a33      	ldr	r2, [pc, #204]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005baa:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bac:	4a32      	ldr	r2, [pc, #200]	; (8005c78 <HAL_SPI_MspInit+0x25c>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005bb2:	e050      	b.n	8005c56 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a31      	ldr	r2, [pc, #196]	; (8005c80 <HAL_SPI_MspInit+0x264>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d14b      	bne.n	8005c56 <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	4b28      	ldr	r3, [pc, #160]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bce:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	4b21      	ldr	r3, [pc, #132]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bea:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005c00:	f043 0304 	orr.w	r3, r3, #4
 8005c04:	6313      	str	r3, [r2, #48]	; 0x30
 8005c06:	4b17      	ldr	r3, [pc, #92]	; (8005c64 <HAL_SPI_MspInit+0x248>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	623b      	str	r3, [r7, #32]
 8005c10:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c20:	2303      	movs	r3, #3
 8005c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c24:	2306      	movs	r3, #6
 8005c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4815      	ldr	r0, [pc, #84]	; (8005c84 <HAL_SPI_MspInit+0x268>)
 8005c30:	f004 ff64 	bl	800aafc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005c34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c42:	2303      	movs	r3, #3
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c46:	2306      	movs	r3, #6
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c4e:	4619      	mov	r1, r3
 8005c50:	480d      	ldr	r0, [pc, #52]	; (8005c88 <HAL_SPI_MspInit+0x26c>)
 8005c52:	f004 ff53 	bl	800aafc <HAL_GPIO_Init>
}
 8005c56:	bf00      	nop
 8005c58:	3738      	adds	r7, #56	; 0x38
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40013000 	.word	0x40013000
 8005c64:	40023800 	.word	0x40023800
 8005c68:	40020400 	.word	0x40020400
 8005c6c:	40003800 	.word	0x40003800
 8005c70:	20000418 	.word	0x20000418
 8005c74:	40026070 	.word	0x40026070
 8005c78:	20000478 	.word	0x20000478
 8005c7c:	40026058 	.word	0x40026058
 8005c80:	40003c00 	.word	0x40003c00
 8005c84:	40020000 	.word	0x40020000
 8005c88:	40020800 	.word	0x40020800

08005c8c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <HAL_SPI_MspDeInit+0x90>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10a      	bne.n	8005cb4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <HAL_SPI_MspDeInit+0x94>)
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <HAL_SPI_MspDeInit+0x94>)
 8005ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8005caa:	2138      	movs	r1, #56	; 0x38
 8005cac:	481d      	ldr	r0, [pc, #116]	; (8005d24 <HAL_SPI_MspDeInit+0x98>)
 8005cae:	f005 f8c1 	bl	800ae34 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005cb2:	e02f      	b.n	8005d14 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <HAL_SPI_MspDeInit+0x9c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d115      	bne.n	8005cea <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005cbe:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <HAL_SPI_MspDeInit+0x94>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <HAL_SPI_MspDeInit+0x94>)
 8005cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8005cca:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005cce:	4815      	ldr	r0, [pc, #84]	; (8005d24 <HAL_SPI_MspDeInit+0x98>)
 8005cd0:	f005 f8b0 	bl	800ae34 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 ff77 	bl	8007bcc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 ff72 	bl	8007bcc <HAL_DMA_DeInit>
}
 8005ce8:	e014      	b.n	8005d14 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a0f      	ldr	r2, [pc, #60]	; (8005d2c <HAL_SPI_MspDeInit+0xa0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d10f      	bne.n	8005d14 <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <HAL_SPI_MspDeInit+0x94>)
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <HAL_SPI_MspDeInit+0x94>)
 8005cfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cfe:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d04:	480a      	ldr	r0, [pc, #40]	; (8005d30 <HAL_SPI_MspDeInit+0xa4>)
 8005d06:	f005 f895 	bl	800ae34 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005d0a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8005d0e:	4809      	ldr	r0, [pc, #36]	; (8005d34 <HAL_SPI_MspDeInit+0xa8>)
 8005d10:	f005 f890 	bl	800ae34 <HAL_GPIO_DeInit>
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40013000 	.word	0x40013000
 8005d20:	40023800 	.word	0x40023800
 8005d24:	40020400 	.word	0x40020400
 8005d28:	40003800 	.word	0x40003800
 8005d2c:	40003c00 	.word	0x40003c00
 8005d30:	40020000 	.word	0x40020000
 8005d34:	40020800 	.word	0x40020800

08005d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08a      	sub	sp, #40	; 0x28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d40:	f107 0314 	add.w	r3, r7, #20
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	605a      	str	r2, [r3, #4]
 8005d4a:	609a      	str	r2, [r3, #8]
 8005d4c:	60da      	str	r2, [r3, #12]
 8005d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1d      	ldr	r2, [pc, #116]	; (8005dcc <HAL_UART_MspInit+0x94>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d134      	bne.n	8005dc4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <HAL_UART_MspInit+0x98>)
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <HAL_UART_MspInit+0x98>)
 8005d64:	f043 0310 	orr.w	r3, r3, #16
 8005d68:	6453      	str	r3, [r2, #68]	; 0x44
 8005d6a:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <HAL_UART_MspInit+0x98>)
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <HAL_UART_MspInit+0x98>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	4a14      	ldr	r2, [pc, #80]	; (8005dd0 <HAL_UART_MspInit+0x98>)
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	6313      	str	r3, [r2, #48]	; 0x30
 8005d86:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <HAL_UART_MspInit+0x98>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005d92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005da0:	2303      	movs	r3, #3
 8005da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005da4:	2307      	movs	r3, #7
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4619      	mov	r1, r3
 8005dae:	4809      	ldr	r0, [pc, #36]	; (8005dd4 <HAL_UART_MspInit+0x9c>)
 8005db0:	f004 fea4 	bl	800aafc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005db4:	2200      	movs	r2, #0
 8005db6:	2100      	movs	r1, #0
 8005db8:	2025      	movs	r0, #37	; 0x25
 8005dba:	f001 f87a 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005dbe:	2025      	movs	r0, #37	; 0x25
 8005dc0:	f001 f893 	bl	8006eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005dc4:	bf00      	nop
 8005dc6:	3728      	adds	r7, #40	; 0x28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	40020000 	.word	0x40020000

08005dd8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <HAL_UART_MspDeInit+0x38>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10d      	bne.n	8005e06 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005dea:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <HAL_UART_MspDeInit+0x3c>)
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <HAL_UART_MspDeInit+0x3c>)
 8005df0:	f023 0310 	bic.w	r3, r3, #16
 8005df4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005df6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005dfa:	4807      	ldr	r0, [pc, #28]	; (8005e18 <HAL_UART_MspDeInit+0x40>)
 8005dfc:	f005 f81a 	bl	800ae34 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005e00:	2025      	movs	r0, #37	; 0x25
 8005e02:	f001 f880 	bl	8006f06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40011000 	.word	0x40011000
 8005e14:	40023800 	.word	0x40023800
 8005e18:	40020000 	.word	0x40020000

08005e1c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005e30:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <HAL_FSMC_MspInit+0x88>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d131      	bne.n	8005e9c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005e38:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <HAL_FSMC_MspInit+0x88>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <HAL_FSMC_MspInit+0x8c>)
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_FSMC_MspInit+0x8c>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	6393      	str	r3, [r2, #56]	; 0x38
 8005e4e:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <HAL_FSMC_MspInit+0x8c>)
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005e5a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005e5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e60:	2302      	movs	r3, #2
 8005e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e70:	1d3b      	adds	r3, r7, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	480d      	ldr	r0, [pc, #52]	; (8005eac <HAL_FSMC_MspInit+0x90>)
 8005e76:	f004 fe41 	bl	800aafc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005e7a:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005e7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e80:	2302      	movs	r3, #2
 8005e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e90:	1d3b      	adds	r3, r7, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4806      	ldr	r0, [pc, #24]	; (8005eb0 <HAL_FSMC_MspInit+0x94>)
 8005e96:	f004 fe31 	bl	800aafc <HAL_GPIO_Init>
 8005e9a:	e000      	b.n	8005e9e <HAL_FSMC_MspInit+0x82>
    return;
 8005e9c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000978 	.word	0x20000978
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40020c00 	.word	0x40020c00

08005eb4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005ebc:	f7ff ffae 	bl	8005e1c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <HAL_FSMC_MspDeInit+0x38>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d113      	bne.n	8005efc <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <HAL_FSMC_MspDeInit+0x38>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_FSMC_MspDeInit+0x3c>)
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <HAL_FSMC_MspDeInit+0x3c>)
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005ee6:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005eea:	4807      	ldr	r0, [pc, #28]	; (8005f08 <HAL_FSMC_MspDeInit+0x40>)
 8005eec:	f004 ffa2 	bl	800ae34 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005ef0:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005ef4:	4805      	ldr	r0, [pc, #20]	; (8005f0c <HAL_FSMC_MspDeInit+0x44>)
 8005ef6:	f004 ff9d 	bl	800ae34 <HAL_GPIO_DeInit>
 8005efa:	e000      	b.n	8005efe <HAL_FSMC_MspDeInit+0x36>
    return;
 8005efc:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	2000097c 	.word	0x2000097c
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	40020c00 	.word	0x40020c00

08005f10 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005f18:	f7ff ffd6 	bl	8005ec8 <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f28:	e7fe      	b.n	8005f28 <NMI_Handler+0x4>

08005f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f2e:	e7fe      	b.n	8005f2e <HardFault_Handler+0x4>

08005f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f34:	e7fe      	b.n	8005f34 <MemManage_Handler+0x4>

08005f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f36:	b480      	push	{r7}
 8005f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f3a:	e7fe      	b.n	8005f3a <BusFault_Handler+0x4>

08005f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f40:	e7fe      	b.n	8005f40 <UsageFault_Handler+0x4>

08005f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f42:	b480      	push	{r7}
 8005f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f62:	bf00      	nop
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f70:	f000 fc48 	bl	8006804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f74:	bf00      	nop
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005f7c:	4802      	ldr	r0, [pc, #8]	; (8005f88 <DMA1_Stream3_IRQHandler+0x10>)
 8005f7e:	f002 f887 	bl	8008090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000478 	.word	0x20000478

08005f8c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005f90:	4802      	ldr	r0, [pc, #8]	; (8005f9c <DMA1_Stream4_IRQHandler+0x10>)
 8005f92:	f002 f87d 	bl	8008090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005f96:	bf00      	nop
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000418 	.word	0x20000418

08005fa0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005fa4:	4802      	ldr	r0, [pc, #8]	; (8005fb0 <I2C1_EV_IRQHandler+0x10>)
 8005fa6:	f008 ff71 	bl	800ee8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200002bc 	.word	0x200002bc

08005fb4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005fb8:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <I2C1_ER_IRQHandler+0x10>)
 8005fba:	f009 f8d8 	bl	800f16e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005fbe:	bf00      	nop
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200002bc 	.word	0x200002bc

08005fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005fcc:	4802      	ldr	r0, [pc, #8]	; (8005fd8 <USART1_IRQHandler+0x10>)
 8005fce:	f010 fe31 	bl	8016c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005fd2:	bf00      	nop
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200004d8 	.word	0x200004d8

08005fdc <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
}
 8005fe0:	bf00      	nop
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <_getpid>:

int _getpid(void)
{
 8005fea:	b480      	push	{r7}
 8005fec:	af00      	add	r7, sp, #0
	return 1;
 8005fee:	2301      	movs	r3, #1
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <_kill>:

int _kill(int pid, int sig)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006004:	f013 fc2e 	bl	8019864 <__errno>
 8006008:	4603      	mov	r3, r0
 800600a:	2216      	movs	r2, #22
 800600c:	601a      	str	r2, [r3, #0]
	return -1;
 800600e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <_exit>:

void _exit (int status)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006022:	f04f 31ff 	mov.w	r1, #4294967295
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ffe7 	bl	8005ffa <_kill>
	while (1) {}		/* Make sure we hang here */
 800602c:	e7fe      	b.n	800602c <_exit+0x12>

0800602e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e00a      	b.n	8006056 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006040:	f3af 8000 	nop.w
 8006044:	4601      	mov	r1, r0
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	60ba      	str	r2, [r7, #8]
 800604c:	b2ca      	uxtb	r2, r1
 800604e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	3301      	adds	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	dbf0      	blt.n	8006040 <_read+0x12>
	}

return len;
 800605e:	687b      	ldr	r3, [r7, #4]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	e009      	b.n	800608e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	60ba      	str	r2, [r7, #8]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	3301      	adds	r3, #1
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	dbf1      	blt.n	800607a <_write+0x12>
	}
	return len;
 8006096:	687b      	ldr	r3, [r7, #4]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <_close>:

int _close(int file)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	return -1;
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060c8:	605a      	str	r2, [r3, #4]
	return 0;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <_isatty>:

int _isatty(int file)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	return 1;
 80060e0:	2301      	movs	r3, #1
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
	return 0;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <_open>:

int _open(char *path, int flags, ...)
{
 8006108:	b40e      	push	{r1, r2, r3}
 800610a:	b480      	push	{r7}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	b003      	add	sp, #12
 8006122:	4770      	bx	lr

08006124 <_wait>:

int _wait(int *status)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 800612c:	f013 fb9a 	bl	8019864 <__errno>
 8006130:	4603      	mov	r3, r0
 8006132:	220a      	movs	r2, #10
 8006134:	601a      	str	r2, [r3, #0]
	return -1;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <_unlink>:

int _unlink(char *name)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 800614a:	f013 fb8b 	bl	8019864 <__errno>
 800614e:	4603      	mov	r3, r0
 8006150:	2202      	movs	r2, #2
 8006152:	601a      	str	r2, [r3, #0]
	return -1;
 8006154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_times>:

int _times(struct tms *buf)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	return -1;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <_stat>:

int _stat(char *file, struct stat *st)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006188:	605a      	str	r2, [r3, #4]
	return 0;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <_link>:

int _link(char *old, char *new)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 80061a2:	f013 fb5f 	bl	8019864 <__errno>
 80061a6:	4603      	mov	r3, r0
 80061a8:	221f      	movs	r2, #31
 80061aa:	601a      	str	r2, [r3, #0]
	return -1;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <_fork>:

int _fork(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 80061bc:	f013 fb52 	bl	8019864 <__errno>
 80061c0:	4603      	mov	r3, r0
 80061c2:	220b      	movs	r2, #11
 80061c4:	601a      	str	r2, [r3, #0]
	return -1;
 80061c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_execve>:

int _execve(char *name, char **argv, char **env)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 80061da:	f013 fb43 	bl	8019864 <__errno>
 80061de:	4603      	mov	r3, r0
 80061e0:	220c      	movs	r2, #12
 80061e2:	601a      	str	r2, [r3, #0]
	return -1;
 80061e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <_sbrk+0x5c>)
 80061fa:	4b15      	ldr	r3, [pc, #84]	; (8006250 <_sbrk+0x60>)
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <_sbrk+0x64>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <_sbrk+0x64>)
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <_sbrk+0x68>)
 8006210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <_sbrk+0x64>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	429a      	cmp	r2, r3
 800621e:	d207      	bcs.n	8006230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006220:	f013 fb20 	bl	8019864 <__errno>
 8006224:	4603      	mov	r3, r0
 8006226:	220c      	movs	r2, #12
 8006228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	e009      	b.n	8006244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006230:	4b08      	ldr	r3, [pc, #32]	; (8006254 <_sbrk+0x64>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <_sbrk+0x64>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	4a05      	ldr	r2, [pc, #20]	; (8006254 <_sbrk+0x64>)
 8006240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006242:	68fb      	ldr	r3, [r7, #12]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20020000 	.word	0x20020000
 8006250:	00000400 	.word	0x00000400
 8006254:	20000984 	.word	0x20000984
 8006258:	20000dd0 	.word	0x20000dd0

0800625c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <SystemInit+0x20>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	4a05      	ldr	r2, [pc, #20]	; (800627c <SystemInit+0x20>)
 8006268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800626c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	e000ed00 	.word	0xe000ed00

08006280 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	2302      	movs	r3, #2
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	2302      	movs	r3, #2
 8006298:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800629a:	4b34      	ldr	r3, [pc, #208]	; (800636c <SystemCoreClockUpdate+0xec>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d011      	beq.n	80062ce <SystemCoreClockUpdate+0x4e>
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d844      	bhi.n	800633a <SystemCoreClockUpdate+0xba>
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <SystemCoreClockUpdate+0x3e>
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d004      	beq.n	80062c6 <SystemCoreClockUpdate+0x46>
 80062bc:	e03d      	b.n	800633a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80062be:	4b2c      	ldr	r3, [pc, #176]	; (8006370 <SystemCoreClockUpdate+0xf0>)
 80062c0:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <SystemCoreClockUpdate+0xf4>)
 80062c2:	601a      	str	r2, [r3, #0]
      break;
 80062c4:	e03d      	b.n	8006342 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80062c6:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <SystemCoreClockUpdate+0xf0>)
 80062c8:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <SystemCoreClockUpdate+0xf8>)
 80062ca:	601a      	str	r2, [r3, #0]
      break;
 80062cc:	e039      	b.n	8006342 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80062ce:	4b27      	ldr	r3, [pc, #156]	; (800636c <SystemCoreClockUpdate+0xec>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	0d9b      	lsrs	r3, r3, #22
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062da:	4b24      	ldr	r3, [pc, #144]	; (800636c <SystemCoreClockUpdate+0xec>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062e2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80062ea:	4a23      	ldr	r2, [pc, #140]	; (8006378 <SystemCoreClockUpdate+0xf8>)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f2:	4a1e      	ldr	r2, [pc, #120]	; (800636c <SystemCoreClockUpdate+0xec>)
 80062f4:	6852      	ldr	r2, [r2, #4]
 80062f6:	0992      	lsrs	r2, r2, #6
 80062f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062fc:	fb02 f303 	mul.w	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	e00b      	b.n	800631c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <SystemCoreClockUpdate+0xf4>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	fbb2 f3f3 	udiv	r3, r2, r3
 800630c:	4a17      	ldr	r2, [pc, #92]	; (800636c <SystemCoreClockUpdate+0xec>)
 800630e:	6852      	ldr	r2, [r2, #4]
 8006310:	0992      	lsrs	r2, r2, #6
 8006312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800631c:	4b13      	ldr	r3, [pc, #76]	; (800636c <SystemCoreClockUpdate+0xec>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	0c1b      	lsrs	r3, r3, #16
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	3301      	adds	r3, #1
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	4a0e      	ldr	r2, [pc, #56]	; (8006370 <SystemCoreClockUpdate+0xf0>)
 8006336:	6013      	str	r3, [r2, #0]
      break;
 8006338:	e003      	b.n	8006342 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <SystemCoreClockUpdate+0xf0>)
 800633c:	4a0d      	ldr	r2, [pc, #52]	; (8006374 <SystemCoreClockUpdate+0xf4>)
 800633e:	601a      	str	r2, [r3, #0]
      break;
 8006340:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <SystemCoreClockUpdate+0xec>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	091b      	lsrs	r3, r3, #4
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	4a0b      	ldr	r2, [pc, #44]	; (800637c <SystemCoreClockUpdate+0xfc>)
 800634e:	5cd3      	ldrb	r3, [r2, r3]
 8006350:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <SystemCoreClockUpdate+0xf0>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	4a04      	ldr	r2, [pc, #16]	; (8006370 <SystemCoreClockUpdate+0xf0>)
 800635e:	6013      	str	r3, [r2, #0]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40023800 	.word	0x40023800
 8006370:	20000058 	.word	0x20000058
 8006374:	00f42400 	.word	0x00f42400
 8006378:	007a1200 	.word	0x007a1200
 800637c:	08051f08 	.word	0x08051f08

08006380 <W25QXX_Reset>:

uint8_t rx_buf[1025];
uint8_t tx_buf[10];

void W25QXX_Reset (void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 8006384:	2200      	movs	r2, #0
 8006386:	2101      	movs	r1, #1
 8006388:	480b      	ldr	r0, [pc, #44]	; (80063b8 <W25QXX_Reset+0x38>)
 800638a:	f004 fe67 	bl	800b05c <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_ENABLE_RESET;
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <W25QXX_Reset+0x3c>)
 8006390:	2266      	movs	r2, #102	; 0x66
 8006392:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = W25QXX_RESET;
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <W25QXX_Reset+0x3c>)
 8006396:	2299      	movs	r2, #153	; 0x99
 8006398:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25QXX_SPI, tx_buf, 2, 1000);
 800639a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800639e:	2202      	movs	r2, #2
 80063a0:	4906      	ldr	r1, [pc, #24]	; (80063bc <W25QXX_Reset+0x3c>)
 80063a2:	4807      	ldr	r0, [pc, #28]	; (80063c0 <W25QXX_Reset+0x40>)
 80063a4:	f00c fbf7 	bl	8012b96 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 80063a8:	2201      	movs	r2, #1
 80063aa:	2101      	movs	r1, #1
 80063ac:	4802      	ldr	r0, [pc, #8]	; (80063b8 <W25QXX_Reset+0x38>)
 80063ae:	f004 fe55 	bl	800b05c <HAL_GPIO_WritePin>
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40020400 	.word	0x40020400
 80063bc:	20000d8c 	.word	0x20000d8c
 80063c0:	20000310 	.word	0x20000310

080063c4 <W25QXX_Read_Data>:

void W25QXX_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 80063d0:	2200      	movs	r2, #0
 80063d2:	2101      	movs	r1, #1
 80063d4:	4815      	ldr	r0, [pc, #84]	; (800642c <W25QXX_Read_Data+0x68>)
 80063d6:	f004 fe41 	bl	800b05c <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_READ;
 80063da:	4b15      	ldr	r3, [pc, #84]	; (8006430 <W25QXX_Read_Data+0x6c>)
 80063dc:	2203      	movs	r2, #3
 80063de:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (addr >> 16) & 0xFF;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <W25QXX_Read_Data+0x6c>)
 80063e8:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (addr >> 8) & 0xFF;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <W25QXX_Read_Data+0x6c>)
 80063f2:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = addr & 0xFF;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <W25QXX_Read_Data+0x6c>)
 80063fa:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit (&W25QXX_SPI, tx_buf, 4, 1000);
 80063fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006400:	2204      	movs	r2, #4
 8006402:	490b      	ldr	r1, [pc, #44]	; (8006430 <W25QXX_Read_Data+0x6c>)
 8006404:	480b      	ldr	r0, [pc, #44]	; (8006434 <W25QXX_Read_Data+0x70>)
 8006406:	f00c fbc6 	bl	8012b96 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25QXX_SPI, data, sz, 1000);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	b29a      	uxth	r2, r3
 800640e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4807      	ldr	r0, [pc, #28]	; (8006434 <W25QXX_Read_Data+0x70>)
 8006416:	f00c fcfa 	bl	8012e0e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 800641a:	2201      	movs	r2, #1
 800641c:	2101      	movs	r1, #1
 800641e:	4803      	ldr	r0, [pc, #12]	; (800642c <W25QXX_Read_Data+0x68>)
 8006420:	f004 fe1c 	bl	800b05c <HAL_GPIO_WritePin>
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40020400 	.word	0x40020400
 8006430:	20000d8c 	.word	0x20000d8c
 8006434:	20000310 	.word	0x20000310

08006438 <W25QXX_Read_ID>:

uint32_t W25QXX_Read_ID(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	tx_buf[0] = W25QXX_GET_JEDEC_ID;
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <W25QXX_Read_ID+0x54>)
 8006440:	229f      	movs	r2, #159	; 0x9f
 8006442:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 8006444:	2200      	movs	r2, #0
 8006446:	2101      	movs	r1, #1
 8006448:	4811      	ldr	r0, [pc, #68]	; (8006490 <W25QXX_Read_ID+0x58>)
 800644a:	f004 fe07 	bl	800b05c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25QXX_SPI, tx_buf, 1, 1000);
 800644e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006452:	2201      	movs	r2, #1
 8006454:	490d      	ldr	r1, [pc, #52]	; (800648c <W25QXX_Read_ID+0x54>)
 8006456:	480f      	ldr	r0, [pc, #60]	; (8006494 <W25QXX_Read_ID+0x5c>)
 8006458:	f00c fb9d 	bl	8012b96 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25QXX_SPI, dt, 3, 1000);
 800645c:	1d39      	adds	r1, r7, #4
 800645e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006462:	2203      	movs	r2, #3
 8006464:	480b      	ldr	r0, [pc, #44]	; (8006494 <W25QXX_Read_ID+0x5c>)
 8006466:	f00c fcd2 	bl	8012e0e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 800646a:	2201      	movs	r2, #1
 800646c:	2101      	movs	r1, #1
 800646e:	4808      	ldr	r0, [pc, #32]	; (8006490 <W25QXX_Read_ID+0x58>)
 8006470:	f004 fdf4 	bl	800b05c <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8006474:	793b      	ldrb	r3, [r7, #4]
 8006476:	041a      	lsls	r2, r3, #16
 8006478:	797b      	ldrb	r3, [r7, #5]
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	4313      	orrs	r3, r2
 800647e:	79ba      	ldrb	r2, [r7, #6]
 8006480:	4313      	orrs	r3, r2
 8006482:	bf00      	nop
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000d8c 	.word	0x20000d8c
 8006490:	40020400 	.word	0x40020400
 8006494:	20000310 	.word	0x20000310

08006498 <W25QXX_Init>:

void W25QXX_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800649c:	2064      	movs	r0, #100	; 0x64
 800649e:	f000 fa11 	bl	80068c4 <HAL_Delay>
	W25QXX_Reset();
 80064a2:	f7ff ff6d 	bl	8006380 <W25QXX_Reset>
	HAL_Delay(100);
 80064a6:	2064      	movs	r0, #100	; 0x64
 80064a8:	f000 fa0c 	bl	80068c4 <HAL_Delay>
}
 80064ac:	bf00      	nop
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80064ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80064be:	ed87 1a03 	vstr	s2, [r7, #12]
 80064c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80064c6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80064ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80064ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80064d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064d6:	edd7 6a01 	vldr	s13, [r7, #4]
 80064da:	edd7 7a02 	vldr	s15, [r7, #8]
 80064de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80064e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80064ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80064ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80064fa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80064fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <XPT2046_Init>:

void XPT2046_Init(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8006510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006514:	2201      	movs	r2, #1
 8006516:	2180      	movs	r1, #128	; 0x80
 8006518:	4809      	ldr	r0, [pc, #36]	; (8006540 <XPT2046_Init+0x34>)
 800651a:	f00c fb3c 	bl	8012b96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800651e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006522:	2201      	movs	r2, #1
 8006524:	2100      	movs	r1, #0
 8006526:	4806      	ldr	r0, [pc, #24]	; (8006540 <XPT2046_Init+0x34>)
 8006528:	f00c fb35 	bl	8012b96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800652c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006530:	2201      	movs	r2, #1
 8006532:	2100      	movs	r1, #0
 8006534:	4802      	ldr	r0, [pc, #8]	; (8006540 <XPT2046_Init+0x34>)
 8006536:	f00c fb2e 	bl	8012b96 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 800653a:	bf00      	nop
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000368 	.word	0x20000368

08006544 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af02      	add	r7, sp, #8
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 800654e:	2001      	movs	r0, #1
 8006550:	f000 f9b8 	bl	80068c4 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8006554:	1df9      	adds	r1, r7, #7
 8006556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800655a:	2201      	movs	r2, #1
 800655c:	4814      	ldr	r0, [pc, #80]	; (80065b0 <getRaw+0x6c>)
 800655e:	f00c fb1a 	bl	8012b96 <HAL_SPI_Transmit>
	address = 0x00;
 8006562:	2300      	movs	r3, #0
 8006564:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006566:	f107 020b 	add.w	r2, r7, #11
 800656a:	1df9      	adds	r1, r7, #7
 800656c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2301      	movs	r3, #1
 8006574:	480e      	ldr	r0, [pc, #56]	; (80065b0 <getRaw+0x6c>)
 8006576:	f00c fd5b 	bl	8013030 <HAL_SPI_TransmitReceive>
	MSB = data;   
 800657a:	7afb      	ldrb	r3, [r7, #11]
 800657c:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 800657e:	2300      	movs	r3, #0
 8006580:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006582:	f107 020b 	add.w	r2, r7, #11
 8006586:	1df9      	adds	r1, r7, #7
 8006588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	2301      	movs	r3, #1
 8006590:	4807      	ldr	r0, [pc, #28]	; (80065b0 <getRaw+0x6c>)
 8006592:	f00c fd4d 	bl	8013030 <HAL_SPI_TransmitReceive>
	LSB = data;
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 800659a:	89fb      	ldrh	r3, [r7, #14]
 800659c:	021a      	lsls	r2, r3, #8
 800659e:	89bb      	ldrh	r3, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	10db      	asrs	r3, r3, #3
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	bf00      	nop
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20000368 	.word	0x20000368

080065b4 <X>:

inline static uint16_t X(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80065ba:	20d0      	movs	r0, #208	; 0xd0
 80065bc:	f7ff ffc2 	bl	8006544 <getRaw>
 80065c0:	4603      	mov	r3, r0
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006618 <X+0x64>
 80065ce:	eddf 1a13 	vldr	s3, [pc, #76]	; 800661c <X+0x68>
 80065d2:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006620 <X+0x6c>
 80065d6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006624 <X+0x70>
 80065da:	eeb0 0a67 	vmov.f32	s0, s15
 80065de:	f7ff ff67 	bl	80064b0 <remap>
 80065e2:	eef0 7a40 	vmov.f32	s15, s0
 80065e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ea:	ee17 3a90 	vmov	r3, s15
 80065ee:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80065f6:	3303      	adds	r3, #3
 80065f8:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <X+0x5a>
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	f240 321e 	movw	r2, #798	; 0x31e
 8006606:	4293      	cmp	r3, r2
 8006608:	d801      	bhi.n	800660e <X+0x5a>
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	e000      	b.n	8006610 <X+0x5c>
	else return 0;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	4447c000 	.word	0x4447c000
 800661c:	00000000 	.word	0x00000000
 8006620:	457a0000 	.word	0x457a0000
 8006624:	43480000 	.word	0x43480000

08006628 <Y>:

inline static uint16_t Y(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800662e:	2090      	movs	r0, #144	; 0x90
 8006630:	f7ff ff88 	bl	8006544 <getRaw>
 8006634:	4603      	mov	r3, r0
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006680 <Y+0x58>
 8006642:	eddf 1a10 	vldr	s3, [pc, #64]	; 8006684 <Y+0x5c>
 8006646:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8006688 <Y+0x60>
 800664a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800668c <Y+0x64>
 800664e:	eeb0 0a67 	vmov.f32	s0, s15
 8006652:	f7ff ff2d 	bl	80064b0 <remap>
 8006656:	eef0 7a40 	vmov.f32	s15, s0
 800665a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665e:	ee17 3a90 	vmov	r3, s15
 8006662:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <Y+0x4e>
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006670:	d801      	bhi.n	8006676 <Y+0x4e>
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	e000      	b.n	8006678 <Y+0x50>
	else return 0;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	43ef8000 	.word	0x43ef8000
 8006684:	00000000 	.word	0x00000000
 8006688:	456d8000 	.word	0x456d8000
 800668c:	43480000 	.word	0x43480000

08006690 <getX>:

uint16_t getX(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <getX+0x30>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 800669c:	e007      	b.n	80066ae <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 800669e:	f7ff ff89 	bl	80065b4 <X>
 80066a2:	4603      	mov	r3, r0
 80066a4:	80bb      	strh	r3, [r7, #4]
 80066a6:	f7ff ff85 	bl	80065b4 <X>
 80066aa:	4603      	mov	r3, r0
 80066ac:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 80066ae:	88ba      	ldrh	r2, [r7, #4]
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d1f3      	bne.n	800669e <getX+0xe>
		}
		return x[0];
 80066b6:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	08051f20 	.word	0x08051f20

080066c4 <getY>:

uint16_t getY(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <getY+0x30>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80066d0:	e007      	b.n	80066e2 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 80066d2:	f7ff ffa9 	bl	8006628 <Y>
 80066d6:	4603      	mov	r3, r0
 80066d8:	80bb      	strh	r3, [r7, #4]
 80066da:	f7ff ffa5 	bl	8006628 <Y>
 80066de:	4603      	mov	r3, r0
 80066e0:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80066e2:	88ba      	ldrh	r2, [r7, #4]
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d1f3      	bne.n	80066d2 <getY+0xe>
		}
		return y[0];
 80066ea:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	08051f20 	.word	0x08051f20

080066f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <HAL_Init+0x40>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a0d      	ldr	r2, [pc, #52]	; (8006738 <HAL_Init+0x40>)
 8006702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_Init+0x40>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a0a      	ldr	r2, [pc, #40]	; (8006738 <HAL_Init+0x40>)
 800670e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006714:	4b08      	ldr	r3, [pc, #32]	; (8006738 <HAL_Init+0x40>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a07      	ldr	r2, [pc, #28]	; (8006738 <HAL_Init+0x40>)
 800671a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006720:	2003      	movs	r0, #3
 8006722:	f000 fbbb 	bl	8006e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006726:	2000      	movs	r0, #0
 8006728:	f000 f83b 	bl	80067a2 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800672c:	f7ff f86c 	bl	8005808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40023c00 	.word	0x40023c00

0800673c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <HAL_DeInit+0x54>)
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006748:	4b11      	ldr	r3, [pc, #68]	; (8006790 <HAL_DeInit+0x54>)
 800674a:	2200      	movs	r2, #0
 800674c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800674e:	4b10      	ldr	r3, [pc, #64]	; (8006790 <HAL_DeInit+0x54>)
 8006750:	f04f 32ff 	mov.w	r2, #4294967295
 8006754:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006756:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <HAL_DeInit+0x54>)
 8006758:	2200      	movs	r2, #0
 800675a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800675c:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <HAL_DeInit+0x54>)
 800675e:	f04f 32ff 	mov.w	r2, #4294967295
 8006762:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <HAL_DeInit+0x54>)
 8006766:	2200      	movs	r2, #0
 8006768:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800676a:	4b09      	ldr	r3, [pc, #36]	; (8006790 <HAL_DeInit+0x54>)
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <HAL_DeInit+0x54>)
 8006774:	2200      	movs	r2, #0
 8006776:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <HAL_DeInit+0x54>)
 800677a:	f04f 32ff 	mov.w	r2, #4294967295
 800677e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <HAL_DeInit+0x54>)
 8006782:	2200      	movs	r2, #0
 8006784:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006786:	f000 f805 	bl	8006794 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40023800 	.word	0x40023800

08006794 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <HAL_InitTick+0x56>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <HAL_InitTick+0x5a>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4619      	mov	r1, r3
 80067b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fbb2 	bl	8006f2a <HAL_SYSTICK_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e00e      	b.n	80067ee <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b0f      	cmp	r3, #15
 80067d4:	d80a      	bhi.n	80067ec <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067d6:	2200      	movs	r2, #0
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	f000 fb68 	bl	8006eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067e2:	4a07      	ldr	r2, [pc, #28]	; (8006800 <HAL_InitTick+0x5e>)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000058 	.word	0x20000058
 80067fc:	20000060 	.word	0x20000060
 8006800:	2000005c 	.word	0x2000005c

08006804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006808:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_IncTick+0x20>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <HAL_IncTick+0x24>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4413      	add	r3, r2
 8006814:	4a04      	ldr	r2, [pc, #16]	; (8006828 <HAL_IncTick+0x24>)
 8006816:	6013      	str	r3, [r2, #0]
}
 8006818:	bf00      	nop
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000060 	.word	0x20000060
 8006828:	20000d98 	.word	0x20000d98

0800682c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return uwTick;
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <HAL_GetTick+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
}
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000d98 	.word	0x20000d98

08006844 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_GetTickPrio+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	2000005c 	.word	0x2000005c

0800685c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800686a:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <HAL_SetTickFreq+0x48>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	79fa      	ldrb	r2, [r7, #7]
 8006870:	429a      	cmp	r2, r3
 8006872:	d012      	beq.n	800689a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <HAL_SetTickFreq+0x48>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 800687a:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <HAL_SetTickFreq+0x48>)
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006880:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <HAL_SetTickFreq+0x4c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff ff8c 	bl	80067a2 <HAL_InitTick>
 800688a:	4603      	mov	r3, r0
 800688c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8006894:	4a03      	ldr	r2, [pc, #12]	; (80068a4 <HAL_SetTickFreq+0x48>)
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 800689a:	7bfb      	ldrb	r3, [r7, #15]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000060 	.word	0x20000060
 80068a8:	2000005c 	.word	0x2000005c

080068ac <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80068b0:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <HAL_GetTickFreq+0x14>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000060 	.word	0x20000060

080068c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068cc:	f7ff ffae 	bl	800682c <HAL_GetTick>
 80068d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d005      	beq.n	80068ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <HAL_Delay+0x44>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80068ea:	bf00      	nop
 80068ec:	f7ff ff9e 	bl	800682c <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d8f7      	bhi.n	80068ec <HAL_Delay+0x28>
  {
  }
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20000060 	.word	0x20000060

0800690c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_SuspendTick+0x1c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a04      	ldr	r2, [pc, #16]	; (8006928 <HAL_SuspendTick+0x1c>)
 8006916:	f023 0302 	bic.w	r3, r3, #2
 800691a:	6013      	str	r3, [r2, #0]
}
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	e000e010 	.word	0xe000e010

0800692c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_ResumeTick+0x1c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <HAL_ResumeTick+0x1c>)
 8006936:	f043 0302 	orr.w	r3, r3, #2
 800693a:	6013      	str	r3, [r2, #0]
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	e000e010 	.word	0xe000e010

0800694c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <HAL_GetHalVersion+0x10>)
}
 8006952:	4618      	mov	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	01070d00 	.word	0x01070d00

08006960 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8006964:	4b03      	ldr	r3, [pc, #12]	; (8006974 <HAL_GetREVID+0x14>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	0c1b      	lsrs	r3, r3, #16
}
 800696a:	4618      	mov	r0, r3
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	e0042000 	.word	0xe0042000

08006978 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <HAL_GetDEVID+0x18>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8006984:	4618      	mov	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	e0042000 	.word	0xe0042000

08006994 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006998:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4a04      	ldr	r2, [pc, #16]	; (80069b0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6053      	str	r3, [r2, #4]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e0042000 	.word	0xe0042000

080069b4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	6053      	str	r3, [r2, #4]
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	e0042000 	.word	0xe0042000

080069d4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80069de:	f043 0302 	orr.w	r3, r3, #2
 80069e2:	6053      	str	r3, [r2, #4]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	e0042000 	.word	0xe0042000

080069f4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80069fe:	f023 0302 	bic.w	r3, r3, #2
 8006a02:	6053      	str	r3, [r2, #4]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	e0042000 	.word	0xe0042000

08006a14 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a1e:	f043 0304 	orr.w	r3, r3, #4
 8006a22:	6053      	str	r3, [r2, #4]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	e0042000 	.word	0xe0042000

08006a34 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a3e:	f023 0304 	bic.w	r3, r3, #4
 8006a42:	6053      	str	r3, [r2, #4]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e0042000 	.word	0xe0042000

08006a54 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <HAL_EnableCompensationCell+0x14>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	42270400 	.word	0x42270400

08006a6c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8006a70:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <HAL_DisableCompensationCell+0x14>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
}
 8006a76:	bf00      	nop
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	42270400 	.word	0x42270400

08006a84 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006a88:	4b03      	ldr	r3, [pc, #12]	; (8006a98 <HAL_GetUIDw0+0x14>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	1fff7a10 	.word	0x1fff7a10

08006a9c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006aa0:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <HAL_GetUIDw1+0x14>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	1fff7a14 	.word	0x1fff7a14

08006ab4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006ab8:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <HAL_GetUIDw2+0x14>)
 8006aba:	681b      	ldr	r3, [r3, #0]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	1fff7a18 	.word	0x1fff7a18

08006acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <__NVIC_SetPriorityGrouping+0x44>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006afe:	4a04      	ldr	r2, [pc, #16]	; (8006b10 <__NVIC_SetPriorityGrouping+0x44>)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	60d3      	str	r3, [r2, #12]
}
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	e000ed00 	.word	0xe000ed00

08006b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <__NVIC_GetPriorityGrouping+0x18>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	f003 0307 	and.w	r3, r3, #7
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	e000ed00 	.word	0xe000ed00

08006b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	db0b      	blt.n	8006b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	f003 021f 	and.w	r2, r3, #31
 8006b48:	4907      	ldr	r1, [pc, #28]	; (8006b68 <__NVIC_EnableIRQ+0x38>)
 8006b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	2001      	movs	r0, #1
 8006b52:	fa00 f202 	lsl.w	r2, r0, r2
 8006b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	e000e100 	.word	0xe000e100

08006b6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	db12      	blt.n	8006ba4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	f003 021f 	and.w	r2, r3, #31
 8006b84:	490a      	ldr	r1, [pc, #40]	; (8006bb0 <__NVIC_DisableIRQ+0x44>)
 8006b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b92:	3320      	adds	r3, #32
 8006b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006b98:	f3bf 8f4f 	dsb	sy
}
 8006b9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b9e:	f3bf 8f6f 	isb	sy
}
 8006ba2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	e000e100 	.word	0xe000e100

08006bb4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	db0e      	blt.n	8006be4 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006bc6:	4a0b      	ldr	r2, [pc, #44]	; (8006bf4 <__NVIC_GetPendingIRQ+0x40>)
 8006bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	3340      	adds	r3, #64	; 0x40
 8006bd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	fa22 f303 	lsr.w	r3, r2, r3
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	e000      	b.n	8006be6 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006be4:	2300      	movs	r3, #0
  }
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	e000e100 	.word	0xe000e100

08006bf8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	db0c      	blt.n	8006c24 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	f003 021f 	and.w	r2, r3, #31
 8006c10:	4907      	ldr	r1, [pc, #28]	; (8006c30 <__NVIC_SetPendingIRQ+0x38>)
 8006c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	2001      	movs	r0, #1
 8006c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c1e:	3340      	adds	r3, #64	; 0x40
 8006c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	e000e100 	.word	0xe000e100

08006c34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	db0c      	blt.n	8006c60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	f003 021f 	and.w	r2, r3, #31
 8006c4c:	4907      	ldr	r1, [pc, #28]	; (8006c6c <__NVIC_ClearPendingIRQ+0x38>)
 8006c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	2001      	movs	r0, #1
 8006c56:	fa00 f202 	lsl.w	r2, r0, r2
 8006c5a:	3360      	adds	r3, #96	; 0x60
 8006c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	e000e100 	.word	0xe000e100

08006c70 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	db0e      	blt.n	8006ca0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006c82:	4a0b      	ldr	r2, [pc, #44]	; (8006cb0 <__NVIC_GetActive+0x40>)
 8006c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	3380      	adds	r3, #128	; 0x80
 8006c8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	f003 031f 	and.w	r3, r3, #31
 8006c96:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	e000      	b.n	8006ca2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8006ca0:	2300      	movs	r3, #0
  }
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e100 	.word	0xe000e100

08006cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	6039      	str	r1, [r7, #0]
 8006cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	db0a      	blt.n	8006cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	490c      	ldr	r1, [pc, #48]	; (8006d00 <__NVIC_SetPriority+0x4c>)
 8006cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cd2:	0112      	lsls	r2, r2, #4
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cdc:	e00a      	b.n	8006cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4908      	ldr	r1, [pc, #32]	; (8006d04 <__NVIC_SetPriority+0x50>)
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	3b04      	subs	r3, #4
 8006cec:	0112      	lsls	r2, r2, #4
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	761a      	strb	r2, [r3, #24]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	e000e100 	.word	0xe000e100
 8006d04:	e000ed00 	.word	0xe000ed00

08006d08 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8006d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	db09      	blt.n	8006d2e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8006d1a:	4a0d      	ldr	r2, [pc, #52]	; (8006d50 <__NVIC_GetPriority+0x48>)
 8006d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d20:	4413      	add	r3, r2
 8006d22:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	e009      	b.n	8006d42 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8006d2e:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <__NVIC_GetPriority+0x4c>)
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	3b04      	subs	r3, #4
 8006d38:	4413      	add	r3, r2
 8006d3a:	7e1b      	ldrb	r3, [r3, #24]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	091b      	lsrs	r3, r3, #4
 8006d40:	b2db      	uxtb	r3, r3
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000e100 	.word	0xe000e100
 8006d54:	e000ed00 	.word	0xe000ed00

08006d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b089      	sub	sp, #36	; 0x24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f1c3 0307 	rsb	r3, r3, #7
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	bf28      	it	cs
 8006d76:	2304      	movcs	r3, #4
 8006d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d902      	bls.n	8006d88 <NVIC_EncodePriority+0x30>
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3b03      	subs	r3, #3
 8006d86:	e000      	b.n	8006d8a <NVIC_EncodePriority+0x32>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	43da      	mvns	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006da0:	f04f 31ff 	mov.w	r1, #4294967295
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	43d9      	mvns	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db0:	4313      	orrs	r3, r2
         );
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3724      	adds	r7, #36	; 0x24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b089      	sub	sp, #36	; 0x24
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f1c3 0307 	rsb	r3, r3, #7
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	bf28      	it	cs
 8006dde:	2304      	movcs	r3, #4
 8006de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	3304      	adds	r3, #4
 8006de6:	2b06      	cmp	r3, #6
 8006de8:	d902      	bls.n	8006df0 <NVIC_DecodePriority+0x32>
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	3b03      	subs	r3, #3
 8006dee:	e000      	b.n	8006df2 <NVIC_DecodePriority+0x34>
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	40da      	lsrs	r2, r3
 8006dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	43db      	mvns	r3, r3
 8006e06:	401a      	ands	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8006e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43da      	mvns	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	401a      	ands	r2, r3
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	601a      	str	r2, [r3, #0]
}
 8006e20:	bf00      	nop
 8006e22:	3724      	adds	r7, #36	; 0x24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006e30:	f3bf 8f4f 	dsb	sy
}
 8006e34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <__NVIC_SystemReset+0x24>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e3e:	4904      	ldr	r1, [pc, #16]	; (8006e50 <__NVIC_SystemReset+0x24>)
 8006e40:	4b04      	ldr	r3, [pc, #16]	; (8006e54 <__NVIC_SystemReset+0x28>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e46:	f3bf 8f4f 	dsb	sy
}
 8006e4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <__NVIC_SystemReset+0x20>
 8006e50:	e000ed00 	.word	0xe000ed00
 8006e54:	05fa0004 	.word	0x05fa0004

08006e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e68:	d301      	bcc.n	8006e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e00f      	b.n	8006e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e6e:	4a0a      	ldr	r2, [pc, #40]	; (8006e98 <SysTick_Config+0x40>)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e76:	210f      	movs	r1, #15
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	f7ff ff1a 	bl	8006cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <SysTick_Config+0x40>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <SysTick_Config+0x40>)
 8006e88:	2207      	movs	r2, #7
 8006e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	e000e010 	.word	0xe000e010

08006e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff fe11 	bl	8006acc <__NVIC_SetPriorityGrouping>
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	4603      	mov	r3, r0
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ec4:	f7ff fe26 	bl	8006b14 <__NVIC_GetPriorityGrouping>
 8006ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	6978      	ldr	r0, [r7, #20]
 8006ed0:	f7ff ff42 	bl	8006d58 <NVIC_EncodePriority>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fee9 	bl	8006cb4 <__NVIC_SetPriority>
}
 8006ee2:	bf00      	nop
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fe19 	bl	8006b30 <__NVIC_EnableIRQ>
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fe29 	bl	8006b6c <__NVIC_DisableIRQ>
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006f26:	f7ff ff81 	bl	8006e2c <__NVIC_SystemReset>

08006f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff ff90 	bl	8006e58 <SysTick_Config>
 8006f38:	4603      	mov	r3, r0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006f42:	b480      	push	{r7}
 8006f44:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006f46:	f3bf 8f5f 	dmb	sy
}
 8006f4a:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <HAL_MPU_Disable+0x26>)
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	4a05      	ldr	r2, [pc, #20]	; (8006f68 <HAL_MPU_Disable+0x26>)
 8006f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f56:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006f58:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <HAL_MPU_Disable+0x2a>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
}
 8006f5e:	bf00      	nop
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	e000ed00 	.word	0xe000ed00
 8006f6c:	e000ed90 	.word	0xe000ed90

08006f70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f78:	4a0b      	ldr	r2, [pc, #44]	; (8006fa8 <HAL_MPU_Enable+0x38>)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f82:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <HAL_MPU_Enable+0x3c>)
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <HAL_MPU_Enable+0x3c>)
 8006f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f8e:	f3bf 8f4f 	dsb	sy
}
 8006f92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f94:	f3bf 8f6f 	isb	sy
}
 8006f98:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	e000ed90 	.word	0xe000ed90
 8006fac:	e000ed00 	.word	0xe000ed00

08006fb0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	785a      	ldrb	r2, [r3, #1]
 8006fbc:	4b1d      	ldr	r3, [pc, #116]	; (8007034 <HAL_MPU_ConfigRegion+0x84>)
 8006fbe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d029      	beq.n	800701c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006fc8:	4a1a      	ldr	r2, [pc, #104]	; (8007034 <HAL_MPU_ConfigRegion+0x84>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7adb      	ldrb	r3, [r3, #11]
 8006fda:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7a9b      	ldrb	r3, [r3, #10]
 8006fe2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fe4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7b5b      	ldrb	r3, [r3, #13]
 8006fea:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7b9b      	ldrb	r3, [r3, #14]
 8006ff2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006ff4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7bdb      	ldrb	r3, [r3, #15]
 8006ffa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006ffc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7a5b      	ldrb	r3, [r3, #9]
 8007002:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007004:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7a1b      	ldrb	r3, [r3, #8]
 800700a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800700c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007014:	4a07      	ldr	r2, [pc, #28]	; (8007034 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007016:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007018:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800701a:	e005      	b.n	8007028 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <HAL_MPU_ConfigRegion+0x84>)
 800701e:	2200      	movs	r2, #0
 8007020:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8007022:	4b04      	ldr	r3, [pc, #16]	; (8007034 <HAL_MPU_ConfigRegion+0x84>)
 8007024:	2200      	movs	r2, #0
 8007026:	611a      	str	r2, [r3, #16]
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	e000ed90 	.word	0xe000ed90

08007038 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 800703c:	f7ff fd6a 	bl	8006b14 <__NVIC_GetPriorityGrouping>
 8007040:	4603      	mov	r3, r0
}
 8007042:	4618      	mov	r0, r3
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8007056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff fe54 	bl	8006d08 <__NVIC_GetPriority>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	f7ff feaa 	bl	8006dbe <NVIC_DecodePriority>
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	4603      	mov	r3, r0
 800707a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800707c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff fdb9 	bl	8006bf8 <__NVIC_SetPendingIRQ>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	4603      	mov	r3, r0
 8007096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff fd89 	bl	8006bb4 <__NVIC_GetPendingIRQ>
 80070a2:	4603      	mov	r3, r0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80070b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fdba 	bl	8006c34 <__NVIC_ClearPendingIRQ>
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 80070d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fdca 	bl	8006c70 <__NVIC_GetActive>
 80070dc:	4603      	mov	r3, r0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d106      	bne.n	8007102 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80070f4:	4b09      	ldr	r3, [pc, #36]	; (800711c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a08      	ldr	r2, [pc, #32]	; (800711c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80070fa:	f043 0304 	orr.w	r3, r3, #4
 80070fe:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8007100:	e005      	b.n	800710e <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a05      	ldr	r2, [pc, #20]	; (800711c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007108:	f023 0304 	bic.w	r3, r3, #4
 800710c:	6013      	str	r3, [r2, #0]
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	e000e010 	.word	0xe000e010

08007120 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007124:	f000 f802 	bl	800712c <HAL_SYSTICK_Callback>
}
 8007128:	bf00      	nop
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e014      	b.n	8007176 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	791b      	ldrb	r3, [r3, #4]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7fe fb7b 	bl	8005858 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e00f      	b.n	80071b0 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fe fba2 	bl	80058e0 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	795b      	ldrb	r3, [r3, #5]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_DAC_Start+0x16>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e040      	b.n	8007250 <HAL_DAC_Start+0x98>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2201      	movs	r2, #1
 80071e8:	409a      	lsls	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10f      	bne.n	8007218 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007202:	2b3c      	cmp	r3, #60	; 0x3c
 8007204:	d11d      	bne.n	8007242 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0201 	orr.w	r2, r2, #1
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	e014      	b.n	8007242 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	213c      	movs	r1, #60	; 0x3c
 800722a:	fa01 f303 	lsl.w	r3, r1, r3
 800722e:	429a      	cmp	r2, r3
 8007230:	d107      	bne.n	8007242 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0202 	orr.w	r2, r2, #2
 8007240:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2201      	movs	r2, #1
 8007274:	fa02 f303 	lsl.w	r3, r2, r3
 8007278:	43da      	mvns	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	400a      	ands	r2, r1
 8007280:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	795b      	ldrb	r3, [r3, #5]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_DAC_Start_DMA+0x22>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e0ab      	b.n	8007410 <HAL_DAC_Start_DMA+0x17a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2202      	movs	r2, #2
 80072c2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d12f      	bne.n	800732a <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4a52      	ldr	r2, [pc, #328]	; (8007418 <HAL_DAC_Start_DMA+0x182>)
 80072d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	4a51      	ldr	r2, [pc, #324]	; (800741c <HAL_DAC_Start_DMA+0x186>)
 80072d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	4a50      	ldr	r2, [pc, #320]	; (8007420 <HAL_DAC_Start_DMA+0x18a>)
 80072e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072f0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d013      	beq.n	8007320 <HAL_DAC_Start_DMA+0x8a>
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d845      	bhi.n	800738a <HAL_DAC_Start_DMA+0xf4>
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_DAC_Start_DMA+0x76>
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2b04      	cmp	r3, #4
 8007308:	d005      	beq.n	8007316 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800730a:	e03e      	b.n	800738a <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	613b      	str	r3, [r7, #16]
        break;
 8007314:	e03c      	b.n	8007390 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	613b      	str	r3, [r7, #16]
        break;
 800731e:	e037      	b.n	8007390 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3310      	adds	r3, #16
 8007326:	613b      	str	r3, [r7, #16]
        break;
 8007328:	e032      	b.n	8007390 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4a3d      	ldr	r2, [pc, #244]	; (8007424 <HAL_DAC_Start_DMA+0x18e>)
 8007330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	4a3c      	ldr	r2, [pc, #240]	; (8007428 <HAL_DAC_Start_DMA+0x192>)
 8007338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	4a3b      	ldr	r2, [pc, #236]	; (800742c <HAL_DAC_Start_DMA+0x196>)
 8007340:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007350:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d013      	beq.n	8007380 <HAL_DAC_Start_DMA+0xea>
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2b08      	cmp	r3, #8
 800735c:	d817      	bhi.n	800738e <HAL_DAC_Start_DMA+0xf8>
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_DAC_Start_DMA+0xd6>
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d005      	beq.n	8007376 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800736a:	e010      	b.n	800738e <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	613b      	str	r3, [r7, #16]
        break;
 8007374:	e00c      	b.n	8007390 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3318      	adds	r3, #24
 800737c:	613b      	str	r3, [r7, #16]
        break;
 800737e:	e007      	b.n	8007390 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	331c      	adds	r3, #28
 8007386:	613b      	str	r3, [r7, #16]
        break;
 8007388:	e002      	b.n	8007390 <HAL_DAC_Start_DMA+0xfa>
        break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_DAC_Start_DMA+0xfa>
        break;
 800738e:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d111      	bne.n	80073ba <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6898      	ldr	r0, [r3, #8]
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	f000 fca5 	bl	8007cfe <HAL_DMA_Start_IT>
 80073b4:	4603      	mov	r3, r0
 80073b6:	75fb      	strb	r3, [r7, #23]
 80073b8:	e010      	b.n	80073dc <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80073c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68d8      	ldr	r0, [r3, #12]
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	f000 fc93 	bl	8007cfe <HAL_DMA_Start_IT>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10c      	bne.n	8007402 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2201      	movs	r2, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e005      	b.n	800740e <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f043 0204 	orr.w	r2, r3, #4
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	08007713 	.word	0x08007713
 800741c:	08007735 	.word	0x08007735
 8007420:	08007751 	.word	0x08007751
 8007424:	08007a05 	.word	0x08007a05
 8007428:	08007a27 	.word	0x08007a27
 800742c:	08007a43 	.word	0x08007a43

08007430 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43da      	mvns	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	400a      	ands	r2, r1
 8007456:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2201      	movs	r2, #1
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	43da      	mvns	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	400a      	ands	r2, r1
 8007472:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10d      	bne.n	8007496 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fc95 	bl	8007dae <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e00c      	b.n	80074b0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fc87 	bl	8007dae <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80074ae:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d6:	d120      	bne.n	800751a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e6:	d118      	bne.n	800751a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2204      	movs	r2, #4
 80074ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f043 0201 	orr.w	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007512:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f870 	bl	80075fa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007528:	d120      	bne.n	800756c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007538:	d118      	bne.n	800756c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2204      	movs	r2, #4
 800753e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f043 0202 	orr.w	r2, r3, #2
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007554:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007564:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa28 	bl	80079bc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4413      	add	r3, r2
 8007598:	3308      	adds	r3, #8
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e004      	b.n	80075a8 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4413      	add	r3, r2
 80075a4:	3314      	adds	r3, #20
 80075a6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	461a      	mov	r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800760e:	b480      	push	{r7}
 8007610:	b085      	sub	sp, #20
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	e003      	b.n	8007634 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8007634:	68fb      	ldr	r3, [r7, #12]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007642:	b480      	push	{r7}
 8007644:	b087      	sub	sp, #28
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	795b      	ldrb	r3, [r3, #5]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_DAC_ConfigChannel+0x18>
 8007656:	2302      	movs	r3, #2
 8007658:	e03c      	b.n	80076d4 <HAL_DAC_ConfigChannel+0x92>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2201      	movs	r2, #1
 800765e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2202      	movs	r2, #2
 8007664:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	43db      	mvns	r3, r3
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4013      	ands	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	4313      	orrs	r3, r2
 800768e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6819      	ldr	r1, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	22c0      	movs	r2, #192	; 0xc0
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	43da      	mvns	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	400a      	ands	r2, r1
 80076c4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	791b      	ldrb	r3, [r3, #4]
 80076ec:	b2db      	uxtb	r3, r3
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff ff4c 	bl	80075be <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	711a      	strb	r2, [r3, #4]
}
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff ff45 	bl	80075d2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f043 0204 	orr.w	r2, r3, #4
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff ff3b 	bl	80075e6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	711a      	strb	r2, [r3, #4]
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	795b      	ldrb	r3, [r3, #5]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_DACEx_DualStart+0x18>
 8007792:	2302      	movs	r3, #2
 8007794:	e03b      	b.n	800780e <HAL_DACEx_DualStart+0x90>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80077c0:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80077cc:	2b3c      	cmp	r3, #60	; 0x3c
 80077ce:	d103      	bne.n	80077d8 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80077e2:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80077e6:	d103      	bne.n	80077f0 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f043 0302 	orr.w	r3, r3, #2
 80077ee:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6859      	ldr	r1, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0201 	bic.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007840:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <HAL_DACEx_TriangleWaveGenerate+0x18>
 800786a:	2302      	movs	r3, #2
 800786c:	e024      	b.n	80078b8 <HAL_DACEx_TriangleWaveGenerate+0x62>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2202      	movs	r2, #2
 8007878:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800788a:	fa01 f303 	lsl.w	r3, r1, r3
 800788e:	43db      	mvns	r3, r3
 8007890:	ea02 0103 	and.w	r1, r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	409a      	lsls	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	795b      	ldrb	r3, [r3, #5]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_DACEx_NoiseWaveGenerate+0x18>
 80078d8:	2302      	movs	r3, #2
 80078da:	e024      	b.n	8007926 <HAL_DACEx_NoiseWaveGenerate+0x62>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2202      	movs	r2, #2
 80078e6:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80078f8:	fa01 f303 	lsl.w	r3, r1, r3
 80078fc:	43db      	mvns	r3, r3
 80078fe:	ea02 0103 	and.w	r1, r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	409a      	lsls	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b08      	cmp	r3, #8
 8007944:	d105      	bne.n	8007952 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e004      	b.n	800795c <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	041b      	lsls	r3, r3, #16
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	3320      	adds	r3, #32
 800796a:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	041b      	lsls	r3, r3, #16
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7ff ffb4 	bl	8007980 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	711a      	strb	r2, [r3, #4]
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff ffad 	bl	8007994 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f043 0204 	orr.w	r2, r3, #4
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff ffa3 	bl	80079a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	711a      	strb	r2, [r3, #4]
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a7c:	f7fe fed6 	bl	800682c <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e099      	b.n	8007bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0201 	bic.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aac:	e00f      	b.n	8007ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007aae:	f7fe febd 	bl	800682c <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b05      	cmp	r3, #5
 8007aba:	d908      	bls.n	8007ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e078      	b.n	8007bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e8      	bne.n	8007aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4b38      	ldr	r3, [pc, #224]	; (8007bc8 <HAL_DMA_Init+0x158>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d107      	bne.n	8007b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	4313      	orrs	r3, r2
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d117      	bne.n	8007b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00e      	beq.n	8007b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fd4d 	bl	8008614 <DMA_CheckFifoParam>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d008      	beq.n	8007b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2240      	movs	r2, #64	; 0x40
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e016      	b.n	8007bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fd05 	bl	80085aa <DMA_CalcBaseAndBitshift>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba8:	223f      	movs	r2, #63	; 0x3f
 8007baa:	409a      	lsls	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	f010803f 	.word	0xf010803f

08007bcc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e050      	b.n	8007c80 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d101      	bne.n	8007bee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007bea:	2302      	movs	r3, #2
 8007bec:	e048      	b.n	8007c80 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0201 	bic.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2200      	movs	r2, #0
 8007c14:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2200      	movs	r2, #0
 8007c24:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2221      	movs	r2, #33	; 0x21
 8007c2c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fcbb 	bl	80085aa <DMA_CalcBaseAndBitshift>
 8007c34:	4603      	mov	r3, r0
 8007c36:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c60:	223f      	movs	r2, #63	; 0x3f
 8007c62:	409a      	lsls	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_DMA_Start+0x20>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e026      	b.n	8007cf6 <HAL_DMA_Start+0x6e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d115      	bne.n	8007ce8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fc3c 	bl	800854e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0201 	orr.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e005      	b.n	8007cf4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d14:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_DMA_Start_IT+0x26>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e040      	b.n	8007da6 <HAL_DMA_Start_IT+0xa8>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d12f      	bne.n	8007d98 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 fbfe 	bl	800854e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d56:	223f      	movs	r2, #63	; 0x3f
 8007d58:	409a      	lsls	r2, r3
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0216 	orr.w	r2, r2, #22
 8007d6c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0208 	orr.w	r2, r2, #8
 8007d84:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0201 	orr.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e005      	b.n	8007da4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007da0:	2302      	movs	r3, #2
 8007da2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007dbc:	f7fe fd36 	bl	800682c <HAL_GetTick>
 8007dc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d008      	beq.n	8007de0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2280      	movs	r2, #128	; 0x80
 8007dd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e052      	b.n	8007e86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0216 	bic.w	r2, r2, #22
 8007dee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dfe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <HAL_DMA_Abort+0x62>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d007      	beq.n	8007e20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0208 	bic.w	r2, r2, #8
 8007e1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0201 	bic.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e30:	e013      	b.n	8007e5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e32:	f7fe fcfb 	bl	800682c <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b05      	cmp	r3, #5
 8007e3e:	d90c      	bls.n	8007e5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2203      	movs	r2, #3
 8007e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e015      	b.n	8007e86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e4      	bne.n	8007e32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6c:	223f      	movs	r2, #63	; 0x3f
 8007e6e:	409a      	lsls	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d004      	beq.n	8007eac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2280      	movs	r2, #128	; 0x80
 8007ea6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e00c      	b.n	8007ec6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2205      	movs	r2, #5
 8007eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b08a      	sub	sp, #40	; 0x28
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	460b      	mov	r3, r1
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8007ee4:	f7fe fca2 	bl	800682c <HAL_GetTick>
 8007ee8:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d008      	beq.n	8007f08 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2280      	movs	r2, #128	; 0x80
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0bf      	b.n	8008088 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e0b2      	b.n	8008088 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
 8007f34:	e005      	b.n	8007f42 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f46:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007f4e:	e05a      	b.n	8008006 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d017      	beq.n	8007f88 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_DMA_PollForTransfer+0x9c>
 8007f5e:	f7fe fc65 	bl	800682c <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d20c      	bcs.n	8007f88 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2220      	movs	r2, #32
 8007f72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e07f      	b.n	8008088 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	2208      	movs	r2, #8
 8007f94:	409a      	lsls	r2, r3
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa2:	f043 0201 	orr.w	r2, r3, #1
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fae:	2208      	movs	r2, #8
 8007fb0:	409a      	lsls	r2, r3
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fba:	2201      	movs	r2, #1
 8007fbc:	409a      	lsls	r2, r3
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fca:	f043 0202 	orr.w	r2, r3, #2
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	409a      	lsls	r2, r3
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	409a      	lsls	r2, r3
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff2:	f043 0204 	orr.w	r2, r3, #4
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffe:	2204      	movs	r2, #4
 8008000:	409a      	lsls	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8008006:	6a3a      	ldr	r2, [r7, #32]
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <HAL_DMA_PollForTransfer+0x14a>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d099      	beq.n	8007f50 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	2b00      	cmp	r3, #0
 8008022:	d018      	beq.n	8008056 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7ff febc 	bl	8007dae <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803a:	2230      	movs	r2, #48	; 0x30
 800803c:	409a      	lsls	r2, r3
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e018      	b.n	8008088 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10e      	bne.n	800807a <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008060:	2230      	movs	r2, #48	; 0x30
 8008062:	409a      	lsls	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008078:	e005      	b.n	8008086 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	2210      	movs	r2, #16
 8008080:	409a      	lsls	r2, r3
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8008086:	7ffb      	ldrb	r3, [r7, #31]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3728      	adds	r7, #40	; 0x28
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800809c:	4b8e      	ldr	r3, [pc, #568]	; (80082d8 <HAL_DMA_IRQHandler+0x248>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a8e      	ldr	r2, [pc, #568]	; (80082dc <HAL_DMA_IRQHandler+0x24c>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	0a9b      	lsrs	r3, r3, #10
 80080a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ba:	2208      	movs	r2, #8
 80080bc:	409a      	lsls	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01a      	beq.n	80080fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d013      	beq.n	80080fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0204 	bic.w	r2, r2, #4
 80080e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	2208      	movs	r2, #8
 80080ea:	409a      	lsls	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f4:	f043 0201 	orr.w	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008100:	2201      	movs	r2, #1
 8008102:	409a      	lsls	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4013      	ands	r3, r2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d012      	beq.n	8008132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811e:	2201      	movs	r2, #1
 8008120:	409a      	lsls	r2, r3
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812a:	f043 0202 	orr.w	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008136:	2204      	movs	r2, #4
 8008138:	409a      	lsls	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d012      	beq.n	8008168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	2204      	movs	r2, #4
 8008156:	409a      	lsls	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	f043 0204 	orr.w	r2, r3, #4
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816c:	2210      	movs	r2, #16
 800816e:	409a      	lsls	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d043      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d03c      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818a:	2210      	movs	r2, #16
 800818c:	409a      	lsls	r2, r3
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d018      	beq.n	80081d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d024      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	e01f      	b.n	8008200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01b      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
 80081d0:	e016      	b.n	8008200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d107      	bne.n	80081f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0208 	bic.w	r2, r2, #8
 80081ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008204:	2220      	movs	r2, #32
 8008206:	409a      	lsls	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 808f 	beq.w	8008330 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8087 	beq.w	8008330 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008226:	2220      	movs	r2, #32
 8008228:	409a      	lsls	r2, r3
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b05      	cmp	r3, #5
 8008238:	d136      	bne.n	80082a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0216 	bic.w	r2, r2, #22
 8008248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d103      	bne.n	800826a <HAL_DMA_IRQHandler+0x1da>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0208 	bic.w	r2, r2, #8
 8008278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827e:	223f      	movs	r2, #63	; 0x3f
 8008280:	409a      	lsls	r2, r3
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829a:	2b00      	cmp	r3, #0
 800829c:	d07e      	beq.n	800839c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
        }
        return;
 80082a6:	e079      	b.n	800839c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d01d      	beq.n	80082f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10d      	bne.n	80082e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d031      	beq.n	8008330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
 80082d4:	e02c      	b.n	8008330 <HAL_DMA_IRQHandler+0x2a0>
 80082d6:	bf00      	nop
 80082d8:	20000058 	.word	0x20000058
 80082dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d023      	beq.n	8008330 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
 80082f0:	e01e      	b.n	8008330 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10f      	bne.n	8008320 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0210 	bic.w	r2, r2, #16
 800830e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008334:	2b00      	cmp	r3, #0
 8008336:	d032      	beq.n	800839e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d022      	beq.n	800838a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2205      	movs	r2, #5
 8008348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0201 	bic.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	3301      	adds	r3, #1
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	429a      	cmp	r2, r3
 8008366:	d307      	bcc.n	8008378 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f2      	bne.n	800835c <HAL_DMA_IRQHandler+0x2cc>
 8008376:	e000      	b.n	800837a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008378:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
 800839a:	e000      	b.n	800839e <HAL_DMA_IRQHandler+0x30e>
        return;
 800839c:	bf00      	nop
    }
  }
}
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	460b      	mov	r3, r1
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <HAL_DMA_RegisterCallback+0x20>
 80083c0:	2302      	movs	r3, #2
 80083c2:	e03c      	b.n	800843e <HAL_DMA_RegisterCallback+0x9a>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d129      	bne.n	800842c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d829      	bhi.n	8008432 <HAL_DMA_RegisterCallback+0x8e>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <HAL_DMA_RegisterCallback+0x40>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	080083fd 	.word	0x080083fd
 80083e8:	08008405 	.word	0x08008405
 80083ec:	0800840d 	.word	0x0800840d
 80083f0:	08008415 	.word	0x08008415
 80083f4:	0800841d 	.word	0x0800841d
 80083f8:	08008425 	.word	0x08008425
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008402:	e017      	b.n	8008434 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800840a:	e013      	b.n	8008434 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008412:	e00f      	b.n	8008434 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800841a:	e00b      	b.n	8008434 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008422:	e007      	b.n	8008434 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800842a:	e003      	b.n	8008434 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
 8008430:	e000      	b.n	8008434 <HAL_DMA_RegisterCallback+0x90>
      break;
 8008432:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
}
 800843e:	4618      	mov	r0, r3
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_DMA_UnRegisterCallback+0x1e>
 8008464:	2302      	movs	r3, #2
 8008466:	e052      	b.n	800850e <HAL_DMA_UnRegisterCallback+0xc4>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	d141      	bne.n	8008500 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	2b06      	cmp	r3, #6
 8008480:	d83b      	bhi.n	80084fa <HAL_DMA_UnRegisterCallback+0xb0>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <HAL_DMA_UnRegisterCallback+0x3e>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084a5 	.word	0x080084a5
 800848c:	080084ad 	.word	0x080084ad
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	080084cd 	.word	0x080084cd
 80084a0:	080084d5 	.word	0x080084d5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80084aa:	e02b      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80084b2:	e027      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80084ba:	e023      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80084c2:	e01f      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80084ca:	e01b      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80084d2:	e017      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80084f8:	e004      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	73fb      	strb	r3, [r7, #15]
      break;
 80084fe:	e001      	b.n	8008504 <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008528:	b2db      	uxtb	r3, r3
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800856a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2b40      	cmp	r3, #64	; 0x40
 800857a:	d108      	bne.n	800858e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800858c:	e007      	b.n	800859e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
}
 800859e:	bf00      	nop
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	3b10      	subs	r3, #16
 80085ba:	4a14      	ldr	r2, [pc, #80]	; (800860c <DMA_CalcBaseAndBitshift+0x62>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	091b      	lsrs	r3, r3, #4
 80085c2:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085c4:	4a12      	ldr	r2, [pc, #72]	; (8008610 <DMA_CalcBaseAndBitshift+0x66>)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	461a      	mov	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d909      	bls.n	80085ec <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80085e0:	f023 0303 	bic.w	r3, r3, #3
 80085e4:	1d1a      	adds	r2, r3, #4
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	659a      	str	r2, [r3, #88]	; 0x58
 80085ea:	e007      	b.n	80085fc <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80085f4:	f023 0303 	bic.w	r3, r3, #3
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	aaaaaaab 	.word	0xaaaaaaab
 8008610:	08051f24 	.word	0x08051f24

08008614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d11f      	bne.n	800866e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d856      	bhi.n	80086e2 <DMA_CheckFifoParam+0xce>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <DMA_CheckFifoParam+0x28>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	0800864d 	.word	0x0800864d
 8008640:	0800865f 	.word	0x0800865f
 8008644:	0800864d 	.word	0x0800864d
 8008648:	080086e3 	.word	0x080086e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d046      	beq.n	80086e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800865c:	e043      	b.n	80086e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008666:	d140      	bne.n	80086ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800866c:	e03d      	b.n	80086ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008676:	d121      	bne.n	80086bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b03      	cmp	r3, #3
 800867c:	d837      	bhi.n	80086ee <DMA_CheckFifoParam+0xda>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <DMA_CheckFifoParam+0x70>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	08008695 	.word	0x08008695
 8008688:	0800869b 	.word	0x0800869b
 800868c:	08008695 	.word	0x08008695
 8008690:	080086ad 	.word	0x080086ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
      break;
 8008698:	e030      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d025      	beq.n	80086f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086aa:	e022      	b.n	80086f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086b4:	d11f      	bne.n	80086f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80086ba:	e01c      	b.n	80086f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d903      	bls.n	80086ca <DMA_CheckFifoParam+0xb6>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d003      	beq.n	80086d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80086c8:	e018      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	73fb      	strb	r3, [r7, #15]
      break;
 80086ce:	e015      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00e      	beq.n	80086fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
      break;
 80086e0:	e00b      	b.n	80086fa <DMA_CheckFifoParam+0xe6>
      break;
 80086e2:	bf00      	nop
 80086e4:	e00a      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      break;
 80086e6:	bf00      	nop
 80086e8:	e008      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      break;
 80086ea:	bf00      	nop
 80086ec:	e006      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      break;
 80086ee:	bf00      	nop
 80086f0:	e004      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      break;
 80086f2:	bf00      	nop
 80086f4:	e002      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      break;   
 80086f6:	bf00      	nop
 80086f8:	e000      	b.n	80086fc <DMA_CheckFifoParam+0xe8>
      break;
 80086fa:	bf00      	nop
    }
  } 
  
  return status; 
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
 8008716:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b80      	cmp	r3, #128	; 0x80
 8008722:	d106      	bne.n	8008732 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800872a:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
 8008730:	e031      	b.n	8008796 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_DMAEx_MultiBufferStart+0x36>
 800873c:	2302      	movs	r3, #2
 800873e:	e02b      	b.n	8008798 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b01      	cmp	r3, #1
 8008752:	d11e      	bne.n	8008792 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800876a:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f001 f972 	bl	8009a64 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e001      	b.n	8008796 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 8008792:	2302      	movs	r3, #2
 8008794:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	2b80      	cmp	r3, #128	; 0x80
 80087b8:	d106      	bne.n	80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f001 b911 	b.w	80099ea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d105      	bne.n	80087ec <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2240      	movs	r2, #64	; 0x40
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f001 b8ff 	b.w	80099ea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d102      	bne.n	80087fc <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80087f6:	2302      	movs	r3, #2
 80087f8:	f001 b8f7 	b.w	80099ea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	f041 80e5 	bne.w	80099dc <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2202      	movs	r2, #2
 8008816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800882e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f001 f910 	bl	8009a64 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	4b8d      	ldr	r3, [pc, #564]	; (8008a80 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800884c:	429a      	cmp	r2, r3
 800884e:	d960      	bls.n	8008912 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a8b      	ldr	r2, [pc, #556]	; (8008a84 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d057      	beq.n	800890a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a8a      	ldr	r2, [pc, #552]	; (8008a88 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d050      	beq.n	8008906 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a88      	ldr	r2, [pc, #544]	; (8008a8c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d049      	beq.n	8008902 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a87      	ldr	r2, [pc, #540]	; (8008a90 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d042      	beq.n	80088fe <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a85      	ldr	r2, [pc, #532]	; (8008a94 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d03a      	beq.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a84      	ldr	r2, [pc, #528]	; (8008a98 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d032      	beq.n	80088f2 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a82      	ldr	r2, [pc, #520]	; (8008a9c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d02a      	beq.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a81      	ldr	r2, [pc, #516]	; (8008aa0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d022      	beq.n	80088e6 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a7f      	ldr	r2, [pc, #508]	; (8008aa4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d01a      	beq.n	80088e0 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a7e      	ldr	r2, [pc, #504]	; (8008aa8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d012      	beq.n	80088da <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a7c      	ldr	r2, [pc, #496]	; (8008aac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d00a      	beq.n	80088d4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a7b      	ldr	r2, [pc, #492]	; (8008ab0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d102      	bne.n	80088ce <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80088c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088cc:	e01e      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088d2:	e01b      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088d8:	e018      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088de:	e015      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088e4:	e012      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ea:	e00f      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f0:	e00c      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f6:	e009      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088fc:	e006      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80088fe:	2320      	movs	r3, #32
 8008900:	e004      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008902:	2320      	movs	r3, #32
 8008904:	e002      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008906:	2320      	movs	r3, #32
 8008908:	e000      	b.n	800890c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800890a:	2320      	movs	r3, #32
 800890c:	4a69      	ldr	r2, [pc, #420]	; (8008ab4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800890e:	60d3      	str	r3, [r2, #12]
 8008910:	e14f      	b.n	8008bb2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	4b67      	ldr	r3, [pc, #412]	; (8008ab8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800891a:	429a      	cmp	r2, r3
 800891c:	d960      	bls.n	80089e0 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a58      	ldr	r2, [pc, #352]	; (8008a84 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d057      	beq.n	80089d8 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a56      	ldr	r2, [pc, #344]	; (8008a88 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d050      	beq.n	80089d4 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a55      	ldr	r2, [pc, #340]	; (8008a8c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d049      	beq.n	80089d0 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a53      	ldr	r2, [pc, #332]	; (8008a90 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d042      	beq.n	80089cc <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a52      	ldr	r2, [pc, #328]	; (8008a94 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d03a      	beq.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a50      	ldr	r2, [pc, #320]	; (8008a98 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d032      	beq.n	80089c0 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a4f      	ldr	r2, [pc, #316]	; (8008a9c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d02a      	beq.n	80089ba <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a4d      	ldr	r2, [pc, #308]	; (8008aa0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d022      	beq.n	80089b4 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a4c      	ldr	r2, [pc, #304]	; (8008aa4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d01a      	beq.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a4a      	ldr	r2, [pc, #296]	; (8008aa8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d012      	beq.n	80089a8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a49      	ldr	r2, [pc, #292]	; (8008aac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00a      	beq.n	80089a2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a47      	ldr	r2, [pc, #284]	; (8008ab0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d102      	bne.n	800899c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8008996:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800899a:	e01e      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800899c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089a0:	e01b      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089a6:	e018      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089ac:	e015      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089b2:	e012      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089b8:	e00f      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089be:	e00c      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089c4:	e009      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ca:	e006      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089cc:	2320      	movs	r3, #32
 80089ce:	e004      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089d0:	2320      	movs	r3, #32
 80089d2:	e002      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089d4:	2320      	movs	r3, #32
 80089d6:	e000      	b.n	80089da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089d8:	2320      	movs	r3, #32
 80089da:	4a36      	ldr	r2, [pc, #216]	; (8008ab4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80089dc:	6093      	str	r3, [r2, #8]
 80089de:	e0e8      	b.n	8008bb2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	4b35      	ldr	r3, [pc, #212]	; (8008abc <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80089e8:	429a      	cmp	r2, r3
 80089ea:	f240 8082 	bls.w	8008af2 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d078      	beq.n	8008aea <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a22      	ldr	r2, [pc, #136]	; (8008a88 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d071      	beq.n	8008ae6 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d06a      	beq.n	8008ae2 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a1f      	ldr	r2, [pc, #124]	; (8008a90 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d063      	beq.n	8008ade <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a1e      	ldr	r2, [pc, #120]	; (8008a94 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d05b      	beq.n	8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a1c      	ldr	r2, [pc, #112]	; (8008a98 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d053      	beq.n	8008ad2 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a1b      	ldr	r2, [pc, #108]	; (8008a9c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d04b      	beq.n	8008acc <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d043      	beq.n	8008ac6 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a18      	ldr	r2, [pc, #96]	; (8008aa4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d03b      	beq.n	8008ac0 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d012      	beq.n	8008a78 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a15      	ldr	r2, [pc, #84]	; (8008aac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00a      	beq.n	8008a72 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d102      	bne.n	8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8008a66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a6a:	e03f      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a70:	e03c      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a76:	e039      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a7c:	e036      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008a7e:	bf00      	nop
 8008a80:	40026458 	.word	0x40026458
 8008a84:	40026010 	.word	0x40026010
 8008a88:	40026410 	.word	0x40026410
 8008a8c:	40026070 	.word	0x40026070
 8008a90:	40026470 	.word	0x40026470
 8008a94:	40026028 	.word	0x40026028
 8008a98:	40026428 	.word	0x40026428
 8008a9c:	40026088 	.word	0x40026088
 8008aa0:	40026488 	.word	0x40026488
 8008aa4:	40026040 	.word	0x40026040
 8008aa8:	40026440 	.word	0x40026440
 8008aac:	400260a0 	.word	0x400260a0
 8008ab0:	400264a0 	.word	0x400264a0
 8008ab4:	40026400 	.word	0x40026400
 8008ab8:	400260b8 	.word	0x400260b8
 8008abc:	40026058 	.word	0x40026058
 8008ac0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ac4:	e012      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008aca:	e00f      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ad0:	e00c      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ad6:	e009      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ad8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008adc:	e006      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ade:	2320      	movs	r3, #32
 8008ae0:	e004      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	e002      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ae6:	2320      	movs	r3, #32
 8008ae8:	e000      	b.n	8008aec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008aea:	2320      	movs	r3, #32
 8008aec:	4a8c      	ldr	r2, [pc, #560]	; (8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008aee:	60d3      	str	r3, [r2, #12]
 8008af0:	e05f      	b.n	8008bb2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a8b      	ldr	r2, [pc, #556]	; (8008d24 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d057      	beq.n	8008bac <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a89      	ldr	r2, [pc, #548]	; (8008d28 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d050      	beq.n	8008ba8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a88      	ldr	r2, [pc, #544]	; (8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d049      	beq.n	8008ba4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a86      	ldr	r2, [pc, #536]	; (8008d30 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d042      	beq.n	8008ba0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a85      	ldr	r2, [pc, #532]	; (8008d34 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d03a      	beq.n	8008b9a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a83      	ldr	r2, [pc, #524]	; (8008d38 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d032      	beq.n	8008b94 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a82      	ldr	r2, [pc, #520]	; (8008d3c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d02a      	beq.n	8008b8e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a80      	ldr	r2, [pc, #512]	; (8008d40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d022      	beq.n	8008b88 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a7f      	ldr	r2, [pc, #508]	; (8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d01a      	beq.n	8008b82 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a7d      	ldr	r2, [pc, #500]	; (8008d48 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d012      	beq.n	8008b7c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a7c      	ldr	r2, [pc, #496]	; (8008d4c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00a      	beq.n	8008b76 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a7a      	ldr	r2, [pc, #488]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d102      	bne.n	8008b70 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8008b6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b6e:	e01e      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b74:	e01b      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b7a:	e018      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b80:	e015      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b86:	e012      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b8c:	e00f      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b92:	e00c      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b98:	e009      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008b9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b9e:	e006      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	e004      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	e002      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008ba8:	2320      	movs	r3, #32
 8008baa:	e000      	b.n	8008bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bac:	2320      	movs	r3, #32
 8008bae:	4a5c      	ldr	r2, [pc, #368]	; (8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008bb0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	4b66      	ldr	r3, [pc, #408]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d960      	bls.n	8008c80 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a58      	ldr	r2, [pc, #352]	; (8008d24 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d057      	beq.n	8008c78 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a56      	ldr	r2, [pc, #344]	; (8008d28 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d050      	beq.n	8008c74 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a55      	ldr	r2, [pc, #340]	; (8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d049      	beq.n	8008c70 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a53      	ldr	r2, [pc, #332]	; (8008d30 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d042      	beq.n	8008c6c <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a52      	ldr	r2, [pc, #328]	; (8008d34 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d03a      	beq.n	8008c66 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a50      	ldr	r2, [pc, #320]	; (8008d38 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d032      	beq.n	8008c60 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a4f      	ldr	r2, [pc, #316]	; (8008d3c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d02a      	beq.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a4d      	ldr	r2, [pc, #308]	; (8008d40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d022      	beq.n	8008c54 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a4c      	ldr	r2, [pc, #304]	; (8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d01a      	beq.n	8008c4e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a4a      	ldr	r2, [pc, #296]	; (8008d48 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d012      	beq.n	8008c48 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a49      	ldr	r2, [pc, #292]	; (8008d4c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00a      	beq.n	8008c42 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a47      	ldr	r2, [pc, #284]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d102      	bne.n	8008c3c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8008c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c3a:	e01e      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c40:	e01b      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c46:	e018      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c4c:	e015      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c52:	e012      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c58:	e00f      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5e:	e00c      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c64:	e009      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c6a:	e006      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	e004      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c70:	2310      	movs	r3, #16
 8008c72:	e002      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c74:	2310      	movs	r3, #16
 8008c76:	e000      	b.n	8008c7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	4a37      	ldr	r2, [pc, #220]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8008c7c:	60d3      	str	r3, [r2, #12]
 8008c7e:	e14f      	b.n	8008f20 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	4b35      	ldr	r3, [pc, #212]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	f240 8082 	bls.w	8008d92 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a24      	ldr	r2, [pc, #144]	; (8008d24 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d078      	beq.n	8008d8a <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a22      	ldr	r2, [pc, #136]	; (8008d28 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d071      	beq.n	8008d86 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a21      	ldr	r2, [pc, #132]	; (8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d06a      	beq.n	8008d82 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1f      	ldr	r2, [pc, #124]	; (8008d30 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d063      	beq.n	8008d7e <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1e      	ldr	r2, [pc, #120]	; (8008d34 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d05b      	beq.n	8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a1c      	ldr	r2, [pc, #112]	; (8008d38 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d053      	beq.n	8008d72 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a1b      	ldr	r2, [pc, #108]	; (8008d3c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d04b      	beq.n	8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a19      	ldr	r2, [pc, #100]	; (8008d40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d043      	beq.n	8008d66 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a18      	ldr	r2, [pc, #96]	; (8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d03b      	beq.n	8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a16      	ldr	r2, [pc, #88]	; (8008d48 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d012      	beq.n	8008d18 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00a      	beq.n	8008d12 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d102      	bne.n	8008d0c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8008d06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d0a:	e03f      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d10:	e03c      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d16:	e039      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d1c:	e036      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d1e:	bf00      	nop
 8008d20:	40026000 	.word	0x40026000
 8008d24:	40026010 	.word	0x40026010
 8008d28:	40026410 	.word	0x40026410
 8008d2c:	40026070 	.word	0x40026070
 8008d30:	40026470 	.word	0x40026470
 8008d34:	40026028 	.word	0x40026028
 8008d38:	40026428 	.word	0x40026428
 8008d3c:	40026088 	.word	0x40026088
 8008d40:	40026488 	.word	0x40026488
 8008d44:	40026040 	.word	0x40026040
 8008d48:	40026440 	.word	0x40026440
 8008d4c:	400260a0 	.word	0x400260a0
 8008d50:	400264a0 	.word	0x400264a0
 8008d54:	40026458 	.word	0x40026458
 8008d58:	40026400 	.word	0x40026400
 8008d5c:	400260b8 	.word	0x400260b8
 8008d60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d64:	e012      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d6a:	e00f      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d70:	e00c      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d76:	e009      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d7c:	e006      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d7e:	2310      	movs	r3, #16
 8008d80:	e004      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d82:	2310      	movs	r3, #16
 8008d84:	e002      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d86:	2310      	movs	r3, #16
 8008d88:	e000      	b.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d8a:	2310      	movs	r3, #16
 8008d8c:	4a8c      	ldr	r2, [pc, #560]	; (8008fc0 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8008d8e:	6093      	str	r3, [r2, #8]
 8008d90:	e0c6      	b.n	8008f20 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	4b8a      	ldr	r3, [pc, #552]	; (8008fc4 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d960      	bls.n	8008e60 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a89      	ldr	r2, [pc, #548]	; (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d057      	beq.n	8008e58 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a87      	ldr	r2, [pc, #540]	; (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d050      	beq.n	8008e54 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a86      	ldr	r2, [pc, #536]	; (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d049      	beq.n	8008e50 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a84      	ldr	r2, [pc, #528]	; (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d042      	beq.n	8008e4c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a83      	ldr	r2, [pc, #524]	; (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d03a      	beq.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a81      	ldr	r2, [pc, #516]	; (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d032      	beq.n	8008e40 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a80      	ldr	r2, [pc, #512]	; (8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d02a      	beq.n	8008e3a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a7e      	ldr	r2, [pc, #504]	; (8008fe4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d022      	beq.n	8008e34 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a7d      	ldr	r2, [pc, #500]	; (8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d01a      	beq.n	8008e2e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a7b      	ldr	r2, [pc, #492]	; (8008fec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d012      	beq.n	8008e28 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a7a      	ldr	r2, [pc, #488]	; (8008ff0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00a      	beq.n	8008e22 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a78      	ldr	r2, [pc, #480]	; (8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d102      	bne.n	8008e1c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8008e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e1a:	e01e      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e20:	e01b      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e26:	e018      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e2c:	e015      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e32:	e012      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e38:	e00f      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e3e:	e00c      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e44:	e009      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e4a:	e006      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e4c:	2310      	movs	r3, #16
 8008e4e:	e004      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e50:	2310      	movs	r3, #16
 8008e52:	e002      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e54:	2310      	movs	r3, #16
 8008e56:	e000      	b.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	4a67      	ldr	r2, [pc, #412]	; (8008ff8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008e5c:	60d3      	str	r3, [r2, #12]
 8008e5e:	e05f      	b.n	8008f20 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a58      	ldr	r2, [pc, #352]	; (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d057      	beq.n	8008f1a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a57      	ldr	r2, [pc, #348]	; (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d050      	beq.n	8008f16 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a55      	ldr	r2, [pc, #340]	; (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d049      	beq.n	8008f12 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a54      	ldr	r2, [pc, #336]	; (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d042      	beq.n	8008f0e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a52      	ldr	r2, [pc, #328]	; (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d03a      	beq.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a51      	ldr	r2, [pc, #324]	; (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d032      	beq.n	8008f02 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a4f      	ldr	r2, [pc, #316]	; (8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d02a      	beq.n	8008efc <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a4e      	ldr	r2, [pc, #312]	; (8008fe4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d022      	beq.n	8008ef6 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a4c      	ldr	r2, [pc, #304]	; (8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01a      	beq.n	8008ef0 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a4b      	ldr	r2, [pc, #300]	; (8008fec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d012      	beq.n	8008eea <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a49      	ldr	r2, [pc, #292]	; (8008ff0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00a      	beq.n	8008ee4 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a48      	ldr	r2, [pc, #288]	; (8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d102      	bne.n	8008ede <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8008ed8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008edc:	e01e      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ede:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ee2:	e01b      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ee4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ee8:	e018      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008eea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008eee:	e015      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ef0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ef4:	e012      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efa:	e00f      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f00:	e00c      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f06:	e009      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f0c:	e006      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f0e:	2310      	movs	r3, #16
 8008f10:	e004      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f12:	2310      	movs	r3, #16
 8008f14:	e002      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f16:	2310      	movs	r3, #16
 8008f18:	e000      	b.n	8008f1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f1a:	2310      	movs	r3, #16
 8008f1c:	4a36      	ldr	r2, [pc, #216]	; (8008ff8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008f1e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b35      	ldr	r3, [pc, #212]	; (8008ffc <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	f240 8082 	bls.w	8009032 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a25      	ldr	r2, [pc, #148]	; (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d078      	beq.n	800902a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a23      	ldr	r2, [pc, #140]	; (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d071      	beq.n	8009026 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a22      	ldr	r2, [pc, #136]	; (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d06a      	beq.n	8009022 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a20      	ldr	r2, [pc, #128]	; (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d063      	beq.n	800901e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a1f      	ldr	r2, [pc, #124]	; (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d05b      	beq.n	8009018 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a1d      	ldr	r2, [pc, #116]	; (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d053      	beq.n	8009012 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1c      	ldr	r2, [pc, #112]	; (8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d04b      	beq.n	800900c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a1a      	ldr	r2, [pc, #104]	; (8008fe4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d043      	beq.n	8009006 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a19      	ldr	r2, [pc, #100]	; (8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d03b      	beq.n	8009000 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a17      	ldr	r2, [pc, #92]	; (8008fec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d012      	beq.n	8008fb8 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a16      	ldr	r2, [pc, #88]	; (8008ff0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d00a      	beq.n	8008fb2 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a14      	ldr	r2, [pc, #80]	; (8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d102      	bne.n	8008fac <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8008fa6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008faa:	e03f      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fb0:	e03c      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fb6:	e039      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fbc:	e036      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fbe:	bf00      	nop
 8008fc0:	40026400 	.word	0x40026400
 8008fc4:	40026058 	.word	0x40026058
 8008fc8:	40026010 	.word	0x40026010
 8008fcc:	40026410 	.word	0x40026410
 8008fd0:	40026070 	.word	0x40026070
 8008fd4:	40026470 	.word	0x40026470
 8008fd8:	40026028 	.word	0x40026028
 8008fdc:	40026428 	.word	0x40026428
 8008fe0:	40026088 	.word	0x40026088
 8008fe4:	40026488 	.word	0x40026488
 8008fe8:	40026040 	.word	0x40026040
 8008fec:	40026440 	.word	0x40026440
 8008ff0:	400260a0 	.word	0x400260a0
 8008ff4:	400264a0 	.word	0x400264a0
 8008ff8:	40026000 	.word	0x40026000
 8008ffc:	40026458 	.word	0x40026458
 8009000:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009004:	e012      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800900a:	e00f      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800900c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009010:	e00c      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009016:	e009      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800901c:	e006      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800901e:	2308      	movs	r3, #8
 8009020:	e004      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009022:	2308      	movs	r3, #8
 8009024:	e002      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009026:	2308      	movs	r3, #8
 8009028:	e000      	b.n	800902c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800902a:	2308      	movs	r3, #8
 800902c:	4a8c      	ldr	r2, [pc, #560]	; (8009260 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800902e:	60d3      	str	r3, [r2, #12]
 8009030:	e14e      	b.n	80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	4b8a      	ldr	r3, [pc, #552]	; (8009264 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800903a:	429a      	cmp	r2, r3
 800903c:	d960      	bls.n	8009100 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a89      	ldr	r2, [pc, #548]	; (8009268 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d057      	beq.n	80090f8 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a87      	ldr	r2, [pc, #540]	; (800926c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d050      	beq.n	80090f4 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a86      	ldr	r2, [pc, #536]	; (8009270 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d049      	beq.n	80090f0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a84      	ldr	r2, [pc, #528]	; (8009274 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d042      	beq.n	80090ec <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a83      	ldr	r2, [pc, #524]	; (8009278 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d03a      	beq.n	80090e6 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a81      	ldr	r2, [pc, #516]	; (800927c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d032      	beq.n	80090e0 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a80      	ldr	r2, [pc, #512]	; (8009280 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d02a      	beq.n	80090da <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a7e      	ldr	r2, [pc, #504]	; (8009284 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d022      	beq.n	80090d4 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a7d      	ldr	r2, [pc, #500]	; (8009288 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d01a      	beq.n	80090ce <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a7b      	ldr	r2, [pc, #492]	; (800928c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d012      	beq.n	80090c8 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a7a      	ldr	r2, [pc, #488]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d00a      	beq.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a78      	ldr	r2, [pc, #480]	; (8009294 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d102      	bne.n	80090bc <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 80090b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090ba:	e01e      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090c0:	e01b      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090c6:	e018      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090cc:	e015      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090d2:	e012      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090d8:	e00f      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090de:	e00c      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090e4:	e009      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ea:	e006      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090ec:	2308      	movs	r3, #8
 80090ee:	e004      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090f0:	2308      	movs	r3, #8
 80090f2:	e002      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090f4:	2308      	movs	r3, #8
 80090f6:	e000      	b.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090f8:	2308      	movs	r3, #8
 80090fa:	4a59      	ldr	r2, [pc, #356]	; (8009260 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80090fc:	6093      	str	r3, [r2, #8]
 80090fe:	e0e7      	b.n	80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	461a      	mov	r2, r3
 8009106:	4b64      	ldr	r3, [pc, #400]	; (8009298 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8009108:	429a      	cmp	r2, r3
 800910a:	d960      	bls.n	80091ce <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a55      	ldr	r2, [pc, #340]	; (8009268 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d057      	beq.n	80091c6 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a54      	ldr	r2, [pc, #336]	; (800926c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d050      	beq.n	80091c2 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a52      	ldr	r2, [pc, #328]	; (8009270 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d049      	beq.n	80091be <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a51      	ldr	r2, [pc, #324]	; (8009274 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d042      	beq.n	80091ba <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a4f      	ldr	r2, [pc, #316]	; (8009278 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d03a      	beq.n	80091b4 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a4e      	ldr	r2, [pc, #312]	; (800927c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d032      	beq.n	80091ae <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a4c      	ldr	r2, [pc, #304]	; (8009280 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d02a      	beq.n	80091a8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a4b      	ldr	r2, [pc, #300]	; (8009284 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d022      	beq.n	80091a2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a49      	ldr	r2, [pc, #292]	; (8009288 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d01a      	beq.n	800919c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a48      	ldr	r2, [pc, #288]	; (800928c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d012      	beq.n	8009196 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a46      	ldr	r2, [pc, #280]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00a      	beq.n	8009190 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a45      	ldr	r2, [pc, #276]	; (8009294 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d102      	bne.n	800918a <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8009184:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009188:	e01e      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800918a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800918e:	e01b      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009190:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009194:	e018      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009196:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800919a:	e015      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800919c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091a0:	e012      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091a6:	e00f      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091ac:	e00c      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091b2:	e009      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091b8:	e006      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091ba:	2308      	movs	r3, #8
 80091bc:	e004      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091be:	2308      	movs	r3, #8
 80091c0:	e002      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091c2:	2308      	movs	r3, #8
 80091c4:	e000      	b.n	80091c8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091c6:	2308      	movs	r3, #8
 80091c8:	4a34      	ldr	r2, [pc, #208]	; (800929c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80091ca:	60d3      	str	r3, [r2, #12]
 80091cc:	e080      	b.n	80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a25      	ldr	r2, [pc, #148]	; (8009268 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d078      	beq.n	80092ca <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a23      	ldr	r2, [pc, #140]	; (800926c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d071      	beq.n	80092c6 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a22      	ldr	r2, [pc, #136]	; (8009270 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d06a      	beq.n	80092c2 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a20      	ldr	r2, [pc, #128]	; (8009274 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d063      	beq.n	80092be <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d05b      	beq.n	80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a1d      	ldr	r2, [pc, #116]	; (800927c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d053      	beq.n	80092b2 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a1c      	ldr	r2, [pc, #112]	; (8009280 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d04b      	beq.n	80092ac <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a1a      	ldr	r2, [pc, #104]	; (8009284 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d043      	beq.n	80092a6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a19      	ldr	r2, [pc, #100]	; (8009288 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d03b      	beq.n	80092a0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a17      	ldr	r2, [pc, #92]	; (800928c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d012      	beq.n	8009258 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a16      	ldr	r2, [pc, #88]	; (8009290 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00a      	beq.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a14      	ldr	r2, [pc, #80]	; (8009294 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d102      	bne.n	800924c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8009246:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800924a:	e03f      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800924c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009250:	e03c      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009252:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009256:	e039      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009258:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800925c:	e036      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800925e:	bf00      	nop
 8009260:	40026400 	.word	0x40026400
 8009264:	400260b8 	.word	0x400260b8
 8009268:	40026010 	.word	0x40026010
 800926c:	40026410 	.word	0x40026410
 8009270:	40026070 	.word	0x40026070
 8009274:	40026470 	.word	0x40026470
 8009278:	40026028 	.word	0x40026028
 800927c:	40026428 	.word	0x40026428
 8009280:	40026088 	.word	0x40026088
 8009284:	40026488 	.word	0x40026488
 8009288:	40026040 	.word	0x40026040
 800928c:	40026440 	.word	0x40026440
 8009290:	400260a0 	.word	0x400260a0
 8009294:	400264a0 	.word	0x400264a0
 8009298:	40026058 	.word	0x40026058
 800929c:	40026000 	.word	0x40026000
 80092a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092a4:	e012      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092aa:	e00f      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092b0:	e00c      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092b6:	e009      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092bc:	e006      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092be:	2308      	movs	r3, #8
 80092c0:	e004      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092c2:	2308      	movs	r3, #8
 80092c4:	e002      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092c6:	2308      	movs	r3, #8
 80092c8:	e000      	b.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092ca:	2308      	movs	r3, #8
 80092cc:	4a8a      	ldr	r2, [pc, #552]	; (80094f8 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80092ce:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	4b89      	ldr	r3, [pc, #548]	; (80094fc <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80092d8:	429a      	cmp	r2, r3
 80092da:	d960      	bls.n	800939e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a87      	ldr	r2, [pc, #540]	; (8009500 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d057      	beq.n	8009396 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a86      	ldr	r2, [pc, #536]	; (8009504 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d050      	beq.n	8009392 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a84      	ldr	r2, [pc, #528]	; (8009508 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d049      	beq.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a83      	ldr	r2, [pc, #524]	; (800950c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d042      	beq.n	800938a <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a81      	ldr	r2, [pc, #516]	; (8009510 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d03a      	beq.n	8009384 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a80      	ldr	r2, [pc, #512]	; (8009514 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d032      	beq.n	800937e <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a7e      	ldr	r2, [pc, #504]	; (8009518 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d02a      	beq.n	8009378 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a7d      	ldr	r2, [pc, #500]	; (800951c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d022      	beq.n	8009372 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a7b      	ldr	r2, [pc, #492]	; (8009520 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d01a      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a7a      	ldr	r2, [pc, #488]	; (8009524 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d012      	beq.n	8009366 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a78      	ldr	r2, [pc, #480]	; (8009528 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d00a      	beq.n	8009360 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a77      	ldr	r2, [pc, #476]	; (800952c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d102      	bne.n	800935a <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8009354:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009358:	e01e      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800935a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800935e:	e01b      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009364:	e018      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009366:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800936a:	e015      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800936c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009370:	e012      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009376:	e00f      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800937c:	e00c      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800937e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009382:	e009      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009388:	e006      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800938a:	2304      	movs	r3, #4
 800938c:	e004      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800938e:	2304      	movs	r3, #4
 8009390:	e002      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009392:	2304      	movs	r3, #4
 8009394:	e000      	b.n	8009398 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009396:	2304      	movs	r3, #4
 8009398:	4a65      	ldr	r2, [pc, #404]	; (8009530 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800939a:	60d3      	str	r3, [r2, #12]
 800939c:	e150      	b.n	8009640 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	4b63      	ldr	r3, [pc, #396]	; (8009534 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d960      	bls.n	800946c <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a54      	ldr	r2, [pc, #336]	; (8009500 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d057      	beq.n	8009464 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a52      	ldr	r2, [pc, #328]	; (8009504 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d050      	beq.n	8009460 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a51      	ldr	r2, [pc, #324]	; (8009508 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d049      	beq.n	800945c <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a4f      	ldr	r2, [pc, #316]	; (800950c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d042      	beq.n	8009458 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a4e      	ldr	r2, [pc, #312]	; (8009510 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d03a      	beq.n	8009452 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a4c      	ldr	r2, [pc, #304]	; (8009514 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d032      	beq.n	800944c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a4b      	ldr	r2, [pc, #300]	; (8009518 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d02a      	beq.n	8009446 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a49      	ldr	r2, [pc, #292]	; (800951c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d022      	beq.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a48      	ldr	r2, [pc, #288]	; (8009520 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d01a      	beq.n	800943a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a46      	ldr	r2, [pc, #280]	; (8009524 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d012      	beq.n	8009434 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a45      	ldr	r2, [pc, #276]	; (8009528 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00a      	beq.n	800942e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a43      	ldr	r2, [pc, #268]	; (800952c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d102      	bne.n	8009428 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009422:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009426:	e01e      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800942c:	e01b      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800942e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009432:	e018      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009434:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009438:	e015      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800943a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800943e:	e012      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009444:	e00f      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800944a:	e00c      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800944c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009450:	e009      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009456:	e006      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009458:	2304      	movs	r3, #4
 800945a:	e004      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800945c:	2304      	movs	r3, #4
 800945e:	e002      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009460:	2304      	movs	r3, #4
 8009462:	e000      	b.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009464:	2304      	movs	r3, #4
 8009466:	4a32      	ldr	r2, [pc, #200]	; (8009530 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009468:	6093      	str	r3, [r2, #8]
 800946a:	e0e9      	b.n	8009640 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	461a      	mov	r2, r3
 8009472:	4b31      	ldr	r3, [pc, #196]	; (8009538 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8009474:	429a      	cmp	r2, r3
 8009476:	f240 8083 	bls.w	8009580 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a20      	ldr	r2, [pc, #128]	; (8009500 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d079      	beq.n	8009578 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d072      	beq.n	8009574 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a1d      	ldr	r2, [pc, #116]	; (8009508 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d06b      	beq.n	8009570 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a1b      	ldr	r2, [pc, #108]	; (800950c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d064      	beq.n	800956c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a1a      	ldr	r2, [pc, #104]	; (8009510 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d05c      	beq.n	8009566 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a18      	ldr	r2, [pc, #96]	; (8009514 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d054      	beq.n	8009560 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a17      	ldr	r2, [pc, #92]	; (8009518 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d04c      	beq.n	800955a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a15      	ldr	r2, [pc, #84]	; (800951c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d044      	beq.n	8009554 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a14      	ldr	r2, [pc, #80]	; (8009520 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d03c      	beq.n	800954e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a12      	ldr	r2, [pc, #72]	; (8009524 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d034      	beq.n	8009548 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a11      	ldr	r2, [pc, #68]	; (8009528 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d02c      	beq.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a0f      	ldr	r2, [pc, #60]	; (800952c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d124      	bne.n	800953c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80094f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80094f6:	e040      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80094f8:	40026000 	.word	0x40026000
 80094fc:	40026458 	.word	0x40026458
 8009500:	40026010 	.word	0x40026010
 8009504:	40026410 	.word	0x40026410
 8009508:	40026070 	.word	0x40026070
 800950c:	40026470 	.word	0x40026470
 8009510:	40026028 	.word	0x40026028
 8009514:	40026428 	.word	0x40026428
 8009518:	40026088 	.word	0x40026088
 800951c:	40026488 	.word	0x40026488
 8009520:	40026040 	.word	0x40026040
 8009524:	40026440 	.word	0x40026440
 8009528:	400260a0 	.word	0x400260a0
 800952c:	400264a0 	.word	0x400264a0
 8009530:	40026400 	.word	0x40026400
 8009534:	400260b8 	.word	0x400260b8
 8009538:	40026058 	.word	0x40026058
 800953c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009540:	e01b      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009542:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009546:	e018      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009548:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800954c:	e015      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800954e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009552:	e012      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009558:	e00f      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800955a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800955e:	e00c      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009564:	e009      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800956a:	e006      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800956c:	2304      	movs	r3, #4
 800956e:	e004      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009570:	2304      	movs	r3, #4
 8009572:	e002      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009574:	2304      	movs	r3, #4
 8009576:	e000      	b.n	800957a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009578:	2304      	movs	r3, #4
 800957a:	4a8b      	ldr	r2, [pc, #556]	; (80097a8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800957c:	60d3      	str	r3, [r2, #12]
 800957e:	e05f      	b.n	8009640 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a89      	ldr	r2, [pc, #548]	; (80097ac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d057      	beq.n	800963a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a88      	ldr	r2, [pc, #544]	; (80097b0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d050      	beq.n	8009636 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a86      	ldr	r2, [pc, #536]	; (80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d049      	beq.n	8009632 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a85      	ldr	r2, [pc, #532]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d042      	beq.n	800962e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a83      	ldr	r2, [pc, #524]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d03a      	beq.n	8009628 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a82      	ldr	r2, [pc, #520]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d032      	beq.n	8009622 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a80      	ldr	r2, [pc, #512]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d02a      	beq.n	800961c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a7f      	ldr	r2, [pc, #508]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d022      	beq.n	8009616 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a7d      	ldr	r2, [pc, #500]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d01a      	beq.n	8009610 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a7c      	ldr	r2, [pc, #496]	; (80097d0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d012      	beq.n	800960a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a7a      	ldr	r2, [pc, #488]	; (80097d4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d00a      	beq.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a79      	ldr	r2, [pc, #484]	; (80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d102      	bne.n	80095fe <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80095f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095fc:	e01e      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80095fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009602:	e01b      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009604:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009608:	e018      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800960a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800960e:	e015      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009610:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009614:	e012      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800961a:	e00f      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800961c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009620:	e00c      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009626:	e009      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800962c:	e006      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800962e:	2304      	movs	r3, #4
 8009630:	e004      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009632:	2304      	movs	r3, #4
 8009634:	e002      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009636:	2304      	movs	r3, #4
 8009638:	e000      	b.n	800963c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800963a:	2304      	movs	r3, #4
 800963c:	4a5a      	ldr	r2, [pc, #360]	; (80097a8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800963e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	4b65      	ldr	r3, [pc, #404]	; (80097dc <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009648:	429a      	cmp	r2, r3
 800964a:	d95c      	bls.n	8009706 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a56      	ldr	r2, [pc, #344]	; (80097ac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d053      	beq.n	80096fe <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a55      	ldr	r2, [pc, #340]	; (80097b0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d04c      	beq.n	80096fa <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a53      	ldr	r2, [pc, #332]	; (80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d045      	beq.n	80096f6 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a52      	ldr	r2, [pc, #328]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d03e      	beq.n	80096f2 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a50      	ldr	r2, [pc, #320]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d037      	beq.n	80096ee <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a4f      	ldr	r2, [pc, #316]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d030      	beq.n	80096ea <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a4d      	ldr	r2, [pc, #308]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d029      	beq.n	80096e6 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a4c      	ldr	r2, [pc, #304]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d022      	beq.n	80096e2 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a4a      	ldr	r2, [pc, #296]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d01a      	beq.n	80096dc <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a49      	ldr	r2, [pc, #292]	; (80097d0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d012      	beq.n	80096d6 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a47      	ldr	r2, [pc, #284]	; (80097d4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00a      	beq.n	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a46      	ldr	r2, [pc, #280]	; (80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d102      	bne.n	80096ca <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80096c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096c8:	e01a      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096ce:	e017      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096d4:	e014      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096da:	e011      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096e0:	e00e      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096e2:	2340      	movs	r3, #64	; 0x40
 80096e4:	e00c      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096e6:	2340      	movs	r3, #64	; 0x40
 80096e8:	e00a      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096ea:	2340      	movs	r3, #64	; 0x40
 80096ec:	e008      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096ee:	2340      	movs	r3, #64	; 0x40
 80096f0:	e006      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e004      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e002      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e000      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80096fe:	2301      	movs	r3, #1
 8009700:	4a37      	ldr	r2, [pc, #220]	; (80097e0 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8009702:	60d3      	str	r3, [r2, #12]
 8009704:	e141      	b.n	800998a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	4b35      	ldr	r3, [pc, #212]	; (80097e4 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800970e:	429a      	cmp	r2, r3
 8009710:	d97c      	bls.n	800980c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a25      	ldr	r2, [pc, #148]	; (80097ac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d073      	beq.n	8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a23      	ldr	r2, [pc, #140]	; (80097b0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d06c      	beq.n	8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a22      	ldr	r2, [pc, #136]	; (80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d065      	beq.n	80097fc <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d05e      	beq.n	80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d057      	beq.n	80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1d      	ldr	r2, [pc, #116]	; (80097c0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d050      	beq.n	80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a1c      	ldr	r2, [pc, #112]	; (80097c4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d049      	beq.n	80097ec <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1a      	ldr	r2, [pc, #104]	; (80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d042      	beq.n	80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a19      	ldr	r2, [pc, #100]	; (80097cc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d01a      	beq.n	80097a2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a17      	ldr	r2, [pc, #92]	; (80097d0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d012      	beq.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a16      	ldr	r2, [pc, #88]	; (80097d4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00a      	beq.n	8009796 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a14      	ldr	r2, [pc, #80]	; (80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d102      	bne.n	8009790 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800978a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800978e:	e03a      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009790:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009794:	e037      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800979a:	e034      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800979c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097a0:	e031      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097a6:	e02e      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097a8:	40026000 	.word	0x40026000
 80097ac:	40026010 	.word	0x40026010
 80097b0:	40026410 	.word	0x40026410
 80097b4:	40026070 	.word	0x40026070
 80097b8:	40026470 	.word	0x40026470
 80097bc:	40026028 	.word	0x40026028
 80097c0:	40026428 	.word	0x40026428
 80097c4:	40026088 	.word	0x40026088
 80097c8:	40026488 	.word	0x40026488
 80097cc:	40026040 	.word	0x40026040
 80097d0:	40026440 	.word	0x40026440
 80097d4:	400260a0 	.word	0x400260a0
 80097d8:	400264a0 	.word	0x400264a0
 80097dc:	40026458 	.word	0x40026458
 80097e0:	40026400 	.word	0x40026400
 80097e4:	400260b8 	.word	0x400260b8
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	e00c      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	e00a      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	e008      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	e006      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e004      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e002      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009804:	2301      	movs	r3, #1
 8009806:	4a7b      	ldr	r2, [pc, #492]	; (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009808:	6093      	str	r3, [r2, #8]
 800980a:	e0be      	b.n	800998a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	461a      	mov	r2, r3
 8009812:	4b79      	ldr	r3, [pc, #484]	; (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009814:	429a      	cmp	r2, r3
 8009816:	d95c      	bls.n	80098d2 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a77      	ldr	r2, [pc, #476]	; (80099fc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d053      	beq.n	80098ca <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a76      	ldr	r2, [pc, #472]	; (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d04c      	beq.n	80098c6 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a74      	ldr	r2, [pc, #464]	; (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d045      	beq.n	80098c2 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a73      	ldr	r2, [pc, #460]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d03e      	beq.n	80098be <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a71      	ldr	r2, [pc, #452]	; (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d037      	beq.n	80098ba <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a70      	ldr	r2, [pc, #448]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d030      	beq.n	80098b6 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a6e      	ldr	r2, [pc, #440]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d029      	beq.n	80098b2 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a6d      	ldr	r2, [pc, #436]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d022      	beq.n	80098ae <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a6b      	ldr	r2, [pc, #428]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01a      	beq.n	80098a8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a6a      	ldr	r2, [pc, #424]	; (8009a20 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d012      	beq.n	80098a2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a68      	ldr	r2, [pc, #416]	; (8009a24 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00a      	beq.n	800989c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a67      	ldr	r2, [pc, #412]	; (8009a28 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d102      	bne.n	8009896 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8009890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009894:	e01a      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800989a:	e017      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800989c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098a0:	e014      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098a6:	e011      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098ac:	e00e      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098ae:	2340      	movs	r3, #64	; 0x40
 80098b0:	e00c      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098b2:	2340      	movs	r3, #64	; 0x40
 80098b4:	e00a      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098b6:	2340      	movs	r3, #64	; 0x40
 80098b8:	e008      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	e006      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098be:	2301      	movs	r3, #1
 80098c0:	e004      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e002      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098ca:	2301      	movs	r3, #1
 80098cc:	4a57      	ldr	r2, [pc, #348]	; (8009a2c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80098ce:	60d3      	str	r3, [r2, #12]
 80098d0:	e05b      	b.n	800998a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a49      	ldr	r2, [pc, #292]	; (80099fc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d053      	beq.n	8009984 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a47      	ldr	r2, [pc, #284]	; (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d04c      	beq.n	8009980 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a46      	ldr	r2, [pc, #280]	; (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d045      	beq.n	800997c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a44      	ldr	r2, [pc, #272]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d03e      	beq.n	8009978 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a43      	ldr	r2, [pc, #268]	; (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d037      	beq.n	8009974 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a41      	ldr	r2, [pc, #260]	; (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d030      	beq.n	8009970 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a40      	ldr	r2, [pc, #256]	; (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d029      	beq.n	800996c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a3e      	ldr	r2, [pc, #248]	; (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d022      	beq.n	8009968 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a3d      	ldr	r2, [pc, #244]	; (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d01a      	beq.n	8009962 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a3b      	ldr	r2, [pc, #236]	; (8009a20 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d012      	beq.n	800995c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a3a      	ldr	r2, [pc, #232]	; (8009a24 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d00a      	beq.n	8009956 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a38      	ldr	r2, [pc, #224]	; (8009a28 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d102      	bne.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800994a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800994e:	e01a      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009950:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009954:	e017      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800995a:	e014      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800995c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009960:	e011      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009966:	e00e      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009968:	2340      	movs	r3, #64	; 0x40
 800996a:	e00c      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800996c:	2340      	movs	r3, #64	; 0x40
 800996e:	e00a      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	e008      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	e006      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009978:	2301      	movs	r3, #1
 800997a:	e004      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800997c:	2301      	movs	r3, #1
 800997e:	e002      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009984:	2301      	movs	r3, #1
 8009986:	4a29      	ldr	r2, [pc, #164]	; (8009a2c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009988:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0216 	orr.w	r2, r2, #22
 8009998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695a      	ldr	r2, [r3, #20]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d007      	beq.n	80099ca <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0208 	orr.w	r2, r2, #8
 80099c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0201 	orr.w	r2, r2, #1
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	e005      	b.n	80099e8 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80099e4:	2302      	movs	r3, #2
 80099e6:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	40026400 	.word	0x40026400
 80099f8:	40026058 	.word	0x40026058
 80099fc:	40026010 	.word	0x40026010
 8009a00:	40026410 	.word	0x40026410
 8009a04:	40026070 	.word	0x40026070
 8009a08:	40026470 	.word	0x40026470
 8009a0c:	40026028 	.word	0x40026028
 8009a10:	40026428 	.word	0x40026428
 8009a14:	40026088 	.word	0x40026088
 8009a18:	40026488 	.word	0x40026488
 8009a1c:	40026040 	.word	0x40026040
 8009a20:	40026440 	.word	0x40026440
 8009a24:	400260a0 	.word	0x400260a0
 8009a28:	400264a0 	.word	0x400264a0
 8009a2c:	40026000 	.word	0x40026000

08009a30 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d104      	bne.n	8009a4e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	60da      	str	r2, [r3, #12]
 8009a4c:	e003      	b.n	8009a56 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d108      	bne.n	8009a94 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009a92:	e007      	b.n	8009aa4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	60da      	str	r2, [r3, #12]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HAL_EXTI_SetConfigLine+0x16>
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e08f      	b.n	8009bea <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 031f 	and.w	r3, r3, #31
 8009ada:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009adc:	2201      	movs	r2, #1
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d052      	beq.n	8009b98 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d006      	beq.n	8009b0c <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8009afe:	4b3e      	ldr	r3, [pc, #248]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b00:	689a      	ldr	r2, [r3, #8]
 8009b02:	493d      	ldr	r1, [pc, #244]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	608b      	str	r3, [r1, #8]
 8009b0a:	e006      	b.n	8009b1a <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8009b0c:	4b3a      	ldr	r3, [pc, #232]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	43db      	mvns	r3, r3
 8009b14:	4938      	ldr	r1, [pc, #224]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b16:	4013      	ands	r3, r2
 8009b18:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d006      	beq.n	8009b34 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8009b26:	4b34      	ldr	r3, [pc, #208]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	4933      	ldr	r1, [pc, #204]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60cb      	str	r3, [r1, #12]
 8009b32:	e006      	b.n	8009b42 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8009b34:	4b30      	ldr	r3, [pc, #192]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	492e      	ldr	r1, [pc, #184]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009b3e:	4013      	ands	r3, r2
 8009b40:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009b4a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009b4e:	d123      	bne.n	8009b98 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009b50:	4a2a      	ldr	r2, [pc, #168]	; (8009bfc <HAL_EXTI_SetConfigLine+0x14c>)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	089b      	lsrs	r3, r3, #2
 8009b56:	3302      	adds	r3, #2
 8009b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5c:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f003 0303 	and.w	r3, r3, #3
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	220f      	movs	r2, #15
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4013      	ands	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	fa02 f303 	lsl.w	r3, r2, r3
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009b8a:	491c      	ldr	r1, [pc, #112]	; (8009bfc <HAL_EXTI_SetConfigLine+0x14c>)
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	089b      	lsrs	r3, r3, #2
 8009b90:	3302      	adds	r3, #2
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d006      	beq.n	8009bb2 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8009ba4:	4b14      	ldr	r3, [pc, #80]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	4913      	ldr	r1, [pc, #76]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	600b      	str	r3, [r1, #0]
 8009bb0:	e006      	b.n	8009bc0 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8009bb2:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	490f      	ldr	r1, [pc, #60]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	4909      	ldr	r1, [pc, #36]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	604b      	str	r3, [r1, #4]
 8009bd8:	e006      	b.n	8009be8 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8009bda:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	43db      	mvns	r3, r3
 8009be2:	4905      	ldr	r1, [pc, #20]	; (8009bf8 <HAL_EXTI_SetConfigLine+0x148>)
 8009be4:	4013      	ands	r3, r2
 8009be6:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	40013c00 	.word	0x40013c00
 8009bfc:	40013800 	.word	0x40013800

08009c00 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <HAL_EXTI_GetConfigLine+0x16>
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e061      	b.n	8009cde <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 031f 	and.w	r3, r3, #31
 8009c2a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	fa02 f303 	lsl.w	r3, r2, r3
 8009c34:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8009c36:	4b2d      	ldr	r3, [pc, #180]	; (8009cec <HAL_EXTI_GetConfigLine+0xec>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2201      	movs	r2, #1
 8009c46:	605a      	str	r2, [r3, #4]
 8009c48:	e002      	b.n	8009c50 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8009c50:	4b26      	ldr	r3, [pc, #152]	; (8009cec <HAL_EXTI_GetConfigLine+0xec>)
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f043 0202 	orr.w	r2, r3, #2
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d02d      	beq.n	8009cdc <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8009c80:	4b1a      	ldr	r3, [pc, #104]	; (8009cec <HAL_EXTI_GetConfigLine+0xec>)
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	4013      	ands	r3, r2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8009c92:	4b16      	ldr	r3, [pc, #88]	; (8009cec <HAL_EXTI_GetConfigLine+0xec>)
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	4013      	ands	r3, r2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d005      	beq.n	8009caa <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f043 0202 	orr.w	r2, r3, #2
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009cb2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009cb6:	d111      	bne.n	8009cdc <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009cb8:	4a0d      	ldr	r2, [pc, #52]	; (8009cf0 <HAL_EXTI_GetConfigLine+0xf0>)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	089b      	lsrs	r3, r3, #2
 8009cbe:	3302      	adds	r3, #2
 8009cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cc4:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd6:	0e1a      	lsrs	r2, r3, #24
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	40013c00 	.word	0x40013c00
 8009cf0:	40013800 	.word	0x40013800

08009cf4 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e04c      	b.n	8009da0 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 031f 	and.w	r3, r3, #31
 8009d0e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009d10:	2201      	movs	r2, #1
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	fa02 f303 	lsl.w	r3, r2, r3
 8009d18:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8009d1a:	4b24      	ldr	r3, [pc, #144]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	43db      	mvns	r3, r3
 8009d22:	4922      	ldr	r1, [pc, #136]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d24:	4013      	ands	r3, r2
 8009d26:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8009d28:	4b20      	ldr	r3, [pc, #128]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	43db      	mvns	r3, r3
 8009d30:	491e      	ldr	r1, [pc, #120]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d32:	4013      	ands	r3, r2
 8009d34:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d02d      	beq.n	8009d9e <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8009d42:	4b1a      	ldr	r3, [pc, #104]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	43db      	mvns	r3, r3
 8009d4a:	4918      	ldr	r1, [pc, #96]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8009d50:	4b16      	ldr	r3, [pc, #88]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	43db      	mvns	r3, r3
 8009d58:	4914      	ldr	r1, [pc, #80]	; (8009dac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009d66:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009d6a:	d118      	bne.n	8009d9e <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009d6c:	4a10      	ldr	r2, [pc, #64]	; (8009db0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	089b      	lsrs	r3, r3, #2
 8009d72:	3302      	adds	r3, #2
 8009d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d78:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f003 0303 	and.w	r3, r3, #3
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	220f      	movs	r2, #15
 8009d84:	fa02 f303 	lsl.w	r3, r2, r3
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009d90:	4907      	ldr	r1, [pc, #28]	; (8009db0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	089b      	lsrs	r3, r3, #2
 8009d96:	3302      	adds	r3, #2
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	371c      	adds	r7, #28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	40013c00 	.word	0x40013c00
 8009db0:	40013800 	.word	0x40013800

08009db4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009dc6:	7afb      	ldrb	r3, [r7, #11]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d103      	bne.n	8009dd4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	605a      	str	r2, [r3, #4]
      break;
 8009dd2:	e002      	b.n	8009dda <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd8:	bf00      	nop
  }

  return status;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e003      	b.n	8009e04 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009e02:	2300      	movs	r3, #0
  }
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 031f 	and.w	r3, r3, #31
 8009e20:	2201      	movs	r2, #1
 8009e22:	fa02 f303 	lsl.w	r3, r2, r3
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009e28:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <HAL_EXTI_IRQHandler+0x44>)
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4013      	ands	r3, r2
 8009e30:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d009      	beq.n	8009e4c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009e38:	4a06      	ldr	r2, [pc, #24]	; (8009e54 <HAL_EXTI_IRQHandler+0x44>)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	4798      	blx	r3
    }
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	40013c00 	.word	0x40013c00

08009e58 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 031f 	and.w	r3, r3, #31
 8009e6a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	fa02 f303 	lsl.w	r3, r2, r3
 8009e74:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8009e76:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <HAL_EXTI_GetPending+0x3c>)
 8009e78:	695a      	ldr	r2, [r3, #20]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	401a      	ands	r2, r3
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	fa22 f303 	lsr.w	r3, r2, r3
 8009e84:	60fb      	str	r3, [r7, #12]
  return regval;
 8009e86:	68fb      	ldr	r3, [r7, #12]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	40013c00 	.word	0x40013c00

08009e98 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 031f 	and.w	r3, r3, #31
 8009eaa:	2201      	movs	r2, #1
 8009eac:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8009eb2:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <HAL_EXTI_ClearPending+0x2c>)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6153      	str	r3, [r2, #20]
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	40013c00 	.word	0x40013c00

08009ec8 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 031f 	and.w	r3, r3, #31
 8009ed8:	2201      	movs	r2, #1
 8009eda:	fa02 f303 	lsl.w	r3, r2, r3
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8009ee0:	4a04      	ldr	r2, [pc, #16]	; (8009ef4 <HAL_EXTI_GenerateSWI+0x2c>)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6113      	str	r3, [r2, #16]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40013c00 	.word	0x40013c00

08009ef8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f0a:	4b23      	ldr	r3, [pc, #140]	; (8009f98 <HAL_FLASH_Program+0xa0>)
 8009f0c:	7e1b      	ldrb	r3, [r3, #24]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d101      	bne.n	8009f16 <HAL_FLASH_Program+0x1e>
 8009f12:	2302      	movs	r3, #2
 8009f14:	e03b      	b.n	8009f8e <HAL_FLASH_Program+0x96>
 8009f16:	4b20      	ldr	r3, [pc, #128]	; (8009f98 <HAL_FLASH_Program+0xa0>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f20:	f000 f9be 	bl	800a2a0 <FLASH_WaitForLastOperation>
 8009f24:	4603      	mov	r3, r0
 8009f26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d12b      	bne.n	8009f86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d105      	bne.n	8009f40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009f34:	783b      	ldrb	r3, [r7, #0]
 8009f36:	4619      	mov	r1, r3
 8009f38:	68b8      	ldr	r0, [r7, #8]
 8009f3a:	f000 fa69 	bl	800a410 <FLASH_Program_Byte>
 8009f3e:	e016      	b.n	8009f6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d105      	bne.n	8009f52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009f46:	883b      	ldrh	r3, [r7, #0]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68b8      	ldr	r0, [r7, #8]
 8009f4c:	f000 fa3c 	bl	800a3c8 <FLASH_Program_HalfWord>
 8009f50:	e00d      	b.n	8009f6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d105      	bne.n	8009f64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	f000 fa11 	bl	800a384 <FLASH_Program_Word>
 8009f62:	e004      	b.n	8009f6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f68:	68b8      	ldr	r0, [r7, #8]
 8009f6a:	f000 f9d9 	bl	800a320 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f72:	f000 f995 	bl	800a2a0 <FLASH_WaitForLastOperation>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009f7a:	4b08      	ldr	r3, [pc, #32]	; (8009f9c <HAL_FLASH_Program+0xa4>)
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	4a07      	ldr	r2, [pc, #28]	; (8009f9c <HAL_FLASH_Program+0xa4>)
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f86:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <HAL_FLASH_Program+0xa0>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20000d9c 	.word	0x20000d9c
 8009f9c:	40023c00 	.word	0x40023c00

08009fa0 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009fb2:	4b20      	ldr	r3, [pc, #128]	; (800a034 <HAL_FLASH_Program_IT+0x94>)
 8009fb4:	7e1b      	ldrb	r3, [r3, #24]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <HAL_FLASH_Program_IT+0x1e>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e035      	b.n	800a02a <HAL_FLASH_Program_IT+0x8a>
 8009fbe:	4b1d      	ldr	r3, [pc, #116]	; (800a034 <HAL_FLASH_Program_IT+0x94>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8009fc4:	4b1c      	ldr	r3, [pc, #112]	; (800a038 <HAL_FLASH_Program_IT+0x98>)
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <HAL_FLASH_Program_IT+0x98>)
 8009fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fce:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8009fd0:	4b19      	ldr	r3, [pc, #100]	; (800a038 <HAL_FLASH_Program_IT+0x98>)
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	4a18      	ldr	r2, [pc, #96]	; (800a038 <HAL_FLASH_Program_IT+0x98>)
 8009fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009fda:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8009fdc:	4b15      	ldr	r3, [pc, #84]	; (800a034 <HAL_FLASH_Program_IT+0x94>)
 8009fde:	2203      	movs	r2, #3
 8009fe0:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 8009fe2:	4a14      	ldr	r2, [pc, #80]	; (800a034 <HAL_FLASH_Program_IT+0x94>)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d105      	bne.n	8009ffa <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009fee:	783b      	ldrb	r3, [r7, #0]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	68b8      	ldr	r0, [r7, #8]
 8009ff4:	f000 fa0c 	bl	800a410 <FLASH_Program_Byte>
 8009ff8:	e016      	b.n	800a028 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d105      	bne.n	800a00c <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a000:	883b      	ldrh	r3, [r7, #0]
 800a002:	4619      	mov	r1, r3
 800a004:	68b8      	ldr	r0, [r7, #8]
 800a006:	f000 f9df 	bl	800a3c8 <FLASH_Program_HalfWord>
 800a00a:	e00d      	b.n	800a028 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d105      	bne.n	800a01e <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	4619      	mov	r1, r3
 800a016:	68b8      	ldr	r0, [r7, #8]
 800a018:	f000 f9b4 	bl	800a384 <FLASH_Program_Word>
 800a01c:	e004      	b.n	800a028 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a01e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a022:	68b8      	ldr	r0, [r7, #8]
 800a024:	f000 f97c 	bl	800a320 <FLASH_Program_DoubleWord>
  }

  return status;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20000d9c 	.word	0x20000d9c
 800a038:	40023c00 	.word	0x40023c00

0800a03c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a046:	4b4b      	ldr	r3, [pc, #300]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d020      	beq.n	800a094 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a052:	4b49      	ldr	r3, [pc, #292]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d107      	bne.n	800a06c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a05c:	4b46      	ldr	r3, [pc, #280]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a062:	4b45      	ldr	r3, [pc, #276]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a064:	f04f 32ff 	mov.w	r2, #4294967295
 800a068:	60da      	str	r2, [r3, #12]
 800a06a:	e00b      	b.n	800a084 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a06c:	4b42      	ldr	r3, [pc, #264]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d103      	bne.n	800a07e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a076:	4b40      	ldr	r3, [pc, #256]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	607b      	str	r3, [r7, #4]
 800a07c:	e002      	b.n	800a084 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a07e:	4b3e      	ldr	r3, [pc, #248]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a084:	f000 f9e6 	bl	800a454 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f881 	bl	800a190 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a08e:	4b3a      	ldr	r3, [pc, #232]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a094:	4b37      	ldr	r3, [pc, #220]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d04a      	beq.n	800a136 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a0a0:	4b34      	ldr	r3, [pc, #208]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a0a6:	4b34      	ldr	r3, [pc, #208]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d12d      	bne.n	800a10c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a0b0:	4b31      	ldr	r3, [pc, #196]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	4a30      	ldr	r2, [pc, #192]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0b8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a0ba:	4b2f      	ldr	r3, [pc, #188]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d015      	beq.n	800a0ee <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800a0c2:	4b2d      	ldr	r3, [pc, #180]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f857 	bl	800a17c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a0ce:	4b2a      	ldr	r3, [pc, #168]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	4a28      	ldr	r2, [pc, #160]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0d6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800a0d8:	4b27      	ldr	r3, [pc, #156]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a0de:	4b26      	ldr	r3, [pc, #152]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0e0:	7a1b      	ldrb	r3, [r3, #8]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fb84 	bl	800a7f4 <FLASH_Erase_Sector>
 800a0ec:	e023      	b.n	800a136 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	4a20      	ldr	r2, [pc, #128]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a0fa:	4b1f      	ldr	r3, [pc, #124]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a100:	f000 fcb6 	bl	800aa70 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f839 	bl	800a17c <HAL_FLASH_EndOfOperationCallback>
 800a10a:	e014      	b.n	800a136 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a10c:	4b1a      	ldr	r3, [pc, #104]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b02      	cmp	r3, #2
 800a114:	d107      	bne.n	800a126 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a116:	f000 fcab 	bl	800aa70 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a11a:	4b17      	ldr	r3, [pc, #92]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f82c 	bl	800a17c <HAL_FLASH_EndOfOperationCallback>
 800a124:	e004      	b.n	800a130 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a126:	4b14      	ldr	r3, [pc, #80]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f826 	bl	800a17c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a130:	4b11      	ldr	r3, [pc, #68]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a136:	4b10      	ldr	r3, [pc, #64]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d114      	bne.n	800a16a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	4a0b      	ldr	r2, [pc, #44]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a14a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	4a08      	ldr	r2, [pc, #32]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a156:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	4a05      	ldr	r2, [pc, #20]	; (800a174 <HAL_FLASH_IRQHandler+0x138>)
 800a15e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a162:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <HAL_FLASH_IRQHandler+0x13c>)
 800a166:	2200      	movs	r2, #0
 800a168:	761a      	strb	r2, [r3, #24]
  }
}
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	40023c00 	.word	0x40023c00
 800a178:	20000d9c 	.word	0x20000d9c

0800a17c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <HAL_FLASH_Unlock+0x38>)
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da0b      	bge.n	800a1ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a1b6:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <HAL_FLASH_Unlock+0x38>)
 800a1b8:	4a09      	ldr	r2, [pc, #36]	; (800a1e0 <HAL_FLASH_Unlock+0x3c>)
 800a1ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <HAL_FLASH_Unlock+0x38>)
 800a1be:	4a09      	ldr	r2, [pc, #36]	; (800a1e4 <HAL_FLASH_Unlock+0x40>)
 800a1c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a1c2:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <HAL_FLASH_Unlock+0x38>)
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da01      	bge.n	800a1ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	40023c00 	.word	0x40023c00
 800a1e0:	45670123 	.word	0x45670123
 800a1e4:	cdef89ab 	.word	0xcdef89ab

0800a1e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <HAL_FLASH_Lock+0x1c>)
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	4a04      	ldr	r2, [pc, #16]	; (800a204 <HAL_FLASH_Lock+0x1c>)
 800a1f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	40023c00 	.word	0x40023c00

0800a208 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a20c:	4b09      	ldr	r3, [pc, #36]	; (800a234 <HAL_FLASH_OB_Unlock+0x2c>)
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a218:	4b06      	ldr	r3, [pc, #24]	; (800a234 <HAL_FLASH_OB_Unlock+0x2c>)
 800a21a:	4a07      	ldr	r2, [pc, #28]	; (800a238 <HAL_FLASH_OB_Unlock+0x30>)
 800a21c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <HAL_FLASH_OB_Unlock+0x2c>)
 800a220:	4a06      	ldr	r2, [pc, #24]	; (800a23c <HAL_FLASH_OB_Unlock+0x34>)
 800a222:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a224:	2300      	movs	r3, #0
 800a226:	e000      	b.n	800a22a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	40023c00 	.word	0x40023c00
 800a238:	08192a3b 	.word	0x08192a3b
 800a23c:	4c5d6e7f 	.word	0x4c5d6e7f

0800a240 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <HAL_FLASH_OB_Lock+0x1c>)
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	4a04      	ldr	r2, [pc, #16]	; (800a25c <HAL_FLASH_OB_Lock+0x1c>)
 800a24a:	f043 0301 	orr.w	r3, r3, #1
 800a24e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	40023c00 	.word	0x40023c00

0800a260 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <HAL_FLASH_OB_Launch+0x24>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	4a06      	ldr	r2, [pc, #24]	; (800a284 <HAL_FLASH_OB_Launch+0x24>)
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	b2db      	uxtb	r3, r3
 800a272:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a274:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a278:	f000 f812 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a27c:	4603      	mov	r3, r0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	40023c14 	.word	0x40023c14

0800a288 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a288:	b480      	push	{r7}
 800a28a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a28c:	4b03      	ldr	r3, [pc, #12]	; (800a29c <HAL_FLASH_GetError+0x14>)
 800a28e:	69db      	ldr	r3, [r3, #28]
}  
 800a290:	4618      	mov	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000d9c 	.word	0x20000d9c

0800a2a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2ac:	4b1a      	ldr	r3, [pc, #104]	; (800a318 <FLASH_WaitForLastOperation+0x78>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a2b2:	f7fc fabb 	bl	800682c <HAL_GetTick>
 800a2b6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a2b8:	e010      	b.n	800a2dc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c0:	d00c      	beq.n	800a2dc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <FLASH_WaitForLastOperation+0x38>
 800a2c8:	f7fc fab0 	bl	800682c <HAL_GetTick>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d201      	bcs.n	800a2dc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e019      	b.n	800a310 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a2dc:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <FLASH_WaitForLastOperation+0x7c>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e8      	bne.n	800a2ba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a2e8:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <FLASH_WaitForLastOperation+0x7c>)
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a2f4:	4b09      	ldr	r3, [pc, #36]	; (800a31c <FLASH_WaitForLastOperation+0x7c>)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a2fa:	4b08      	ldr	r3, [pc, #32]	; (800a31c <FLASH_WaitForLastOperation+0x7c>)
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a306:	f000 f8a5 	bl	800a454 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
  
}  
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000d9c 	.word	0x20000d9c
 800a31c:	40023c00 	.word	0x40023c00

0800a320 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a32c:	4b14      	ldr	r3, [pc, #80]	; (800a380 <FLASH_Program_DoubleWord+0x60>)
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	4a13      	ldr	r2, [pc, #76]	; (800a380 <FLASH_Program_DoubleWord+0x60>)
 800a332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a336:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a338:	4b11      	ldr	r3, [pc, #68]	; (800a380 <FLASH_Program_DoubleWord+0x60>)
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	4a10      	ldr	r2, [pc, #64]	; (800a380 <FLASH_Program_DoubleWord+0x60>)
 800a33e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a342:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a344:	4b0e      	ldr	r3, [pc, #56]	; (800a380 <FLASH_Program_DoubleWord+0x60>)
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	4a0d      	ldr	r2, [pc, #52]	; (800a380 <FLASH_Program_DoubleWord+0x60>)
 800a34a:	f043 0301 	orr.w	r3, r3, #1
 800a34e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a356:	f3bf 8f6f 	isb	sy
}
 800a35a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a35c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a360:	f04f 0200 	mov.w	r2, #0
 800a364:	f04f 0300 	mov.w	r3, #0
 800a368:	000a      	movs	r2, r1
 800a36a:	2300      	movs	r3, #0
 800a36c:	68f9      	ldr	r1, [r7, #12]
 800a36e:	3104      	adds	r1, #4
 800a370:	4613      	mov	r3, r2
 800a372:	600b      	str	r3, [r1, #0]
}
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	40023c00 	.word	0x40023c00

0800a384 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <FLASH_Program_Word+0x40>)
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	4a0c      	ldr	r2, [pc, #48]	; (800a3c4 <FLASH_Program_Word+0x40>)
 800a394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a398:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a39a:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <FLASH_Program_Word+0x40>)
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	4a09      	ldr	r2, [pc, #36]	; (800a3c4 <FLASH_Program_Word+0x40>)
 800a3a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <FLASH_Program_Word+0x40>)
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	4a06      	ldr	r2, [pc, #24]	; (800a3c4 <FLASH_Program_Word+0x40>)
 800a3ac:	f043 0301 	orr.w	r3, r3, #1
 800a3b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	601a      	str	r2, [r3, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	40023c00 	.word	0x40023c00

0800a3c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <FLASH_Program_HalfWord+0x44>)
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	4a0c      	ldr	r2, [pc, #48]	; (800a40c <FLASH_Program_HalfWord+0x44>)
 800a3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <FLASH_Program_HalfWord+0x44>)
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	4a09      	ldr	r2, [pc, #36]	; (800a40c <FLASH_Program_HalfWord+0x44>)
 800a3e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a3ec:	4b07      	ldr	r3, [pc, #28]	; (800a40c <FLASH_Program_HalfWord+0x44>)
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	4a06      	ldr	r2, [pc, #24]	; (800a40c <FLASH_Program_HalfWord+0x44>)
 800a3f2:	f043 0301 	orr.w	r3, r3, #1
 800a3f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	887a      	ldrh	r2, [r7, #2]
 800a3fc:	801a      	strh	r2, [r3, #0]
}
 800a3fe:	bf00      	nop
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	40023c00 	.word	0x40023c00

0800a410 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a41c:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <FLASH_Program_Byte+0x40>)
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	4a0b      	ldr	r2, [pc, #44]	; (800a450 <FLASH_Program_Byte+0x40>)
 800a422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a428:	4b09      	ldr	r3, [pc, #36]	; (800a450 <FLASH_Program_Byte+0x40>)
 800a42a:	4a09      	ldr	r2, [pc, #36]	; (800a450 <FLASH_Program_Byte+0x40>)
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <FLASH_Program_Byte+0x40>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	4a06      	ldr	r2, [pc, #24]	; (800a450 <FLASH_Program_Byte+0x40>)
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	701a      	strb	r2, [r3, #0]
}
 800a442:	bf00      	nop
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	40023c00 	.word	0x40023c00

0800a454 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a454:	b480      	push	{r7}
 800a456:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a458:	4b27      	ldr	r3, [pc, #156]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b00      	cmp	r3, #0
 800a462:	d008      	beq.n	800a476 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a464:	4b25      	ldr	r3, [pc, #148]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	f043 0310 	orr.w	r3, r3, #16
 800a46c:	4a23      	ldr	r2, [pc, #140]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a46e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a470:	4b21      	ldr	r3, [pc, #132]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a472:	2210      	movs	r2, #16
 800a474:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a476:	4b20      	ldr	r3, [pc, #128]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a482:	4b1e      	ldr	r3, [pc, #120]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	f043 0308 	orr.w	r3, r3, #8
 800a48a:	4a1c      	ldr	r2, [pc, #112]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a48c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a48e:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a490:	2220      	movs	r2, #32
 800a492:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a494:	4b18      	ldr	r3, [pc, #96]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d008      	beq.n	800a4b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a4a0:	4b16      	ldr	r3, [pc, #88]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	f043 0304 	orr.w	r3, r3, #4
 800a4a8:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a4aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a4ac:	4b12      	ldr	r3, [pc, #72]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a4ae:	2240      	movs	r2, #64	; 0x40
 800a4b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a4b2:	4b11      	ldr	r3, [pc, #68]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d008      	beq.n	800a4d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a4be:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	f043 0302 	orr.w	r3, r3, #2
 800a4c6:	4a0d      	ldr	r2, [pc, #52]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a4c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a4cc:	2280      	movs	r2, #128	; 0x80
 800a4ce:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a4d0:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d008      	beq.n	800a4ee <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a4dc:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	f043 0320 	orr.w	r3, r3, #32
 800a4e4:	4a05      	ldr	r2, [pc, #20]	; (800a4fc <FLASH_SetErrorCode+0xa8>)
 800a4e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a4e8:	4b03      	ldr	r3, [pc, #12]	; (800a4f8 <FLASH_SetErrorCode+0xa4>)
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	60da      	str	r2, [r3, #12]
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	40023c00 	.word	0x40023c00
 800a4fc:	20000d9c 	.word	0x20000d9c

0800a500 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a512:	4b31      	ldr	r3, [pc, #196]	; (800a5d8 <HAL_FLASHEx_Erase+0xd8>)
 800a514:	7e1b      	ldrb	r3, [r3, #24]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d101      	bne.n	800a51e <HAL_FLASHEx_Erase+0x1e>
 800a51a:	2302      	movs	r3, #2
 800a51c:	e058      	b.n	800a5d0 <HAL_FLASHEx_Erase+0xd0>
 800a51e:	4b2e      	ldr	r3, [pc, #184]	; (800a5d8 <HAL_FLASHEx_Erase+0xd8>)
 800a520:	2201      	movs	r2, #1
 800a522:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a524:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a528:	f7ff feba 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d148      	bne.n	800a5c8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	f04f 32ff 	mov.w	r2, #4294967295
 800a53c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d115      	bne.n	800a572 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f000 f92b 	bl	800a7ae <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a558:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a55c:	f7ff fea0 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a564:	4b1d      	ldr	r3, [pc, #116]	; (800a5dc <HAL_FLASHEx_Erase+0xdc>)
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4a1c      	ldr	r2, [pc, #112]	; (800a5dc <HAL_FLASHEx_Erase+0xdc>)
 800a56a:	f023 0304 	bic.w	r3, r3, #4
 800a56e:	6113      	str	r3, [r2, #16]
 800a570:	e028      	b.n	800a5c4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	60bb      	str	r3, [r7, #8]
 800a578:	e01c      	b.n	800a5b4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	4619      	mov	r1, r3
 800a582:	68b8      	ldr	r0, [r7, #8]
 800a584:	f000 f936 	bl	800a7f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a588:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a58c:	f7ff fe88 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <HAL_FLASHEx_Erase+0xdc>)
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	4a10      	ldr	r2, [pc, #64]	; (800a5dc <HAL_FLASHEx_Erase+0xdc>)
 800a59a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a59e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	601a      	str	r2, [r3, #0]
          break;
 800a5ac:	e00a      	b.n	800a5c4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	60bb      	str	r3, [r7, #8]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68da      	ldr	r2, [r3, #12]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	4413      	add	r3, r2
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d3da      	bcc.n	800a57a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a5c4:	f000 fa54 	bl	800aa70 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a5c8:	4b03      	ldr	r3, [pc, #12]	; (800a5d8 <HAL_FLASHEx_Erase+0xd8>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	761a      	strb	r2, [r3, #24]

  return status;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20000d9c 	.word	0x20000d9c
 800a5dc:	40023c00 	.word	0x40023c00

0800a5e0 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a5ec:	4b25      	ldr	r3, [pc, #148]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a5ee:	7e1b      	ldrb	r3, [r3, #24]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_FLASHEx_Erase_IT+0x18>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e040      	b.n	800a67a <HAL_FLASHEx_Erase_IT+0x9a>
 800a5f8:	4b22      	ldr	r3, [pc, #136]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a5fe:	4b22      	ldr	r3, [pc, #136]	; (800a688 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	4a21      	ldr	r2, [pc, #132]	; (800a688 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a608:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a60a:	4b1f      	ldr	r3, [pc, #124]	; (800a688 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	4a1e      	ldr	r2, [pc, #120]	; (800a688 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a614:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800a616:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a618:	22f3      	movs	r2, #243	; 0xf3
 800a61a:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d110      	bne.n	800a646 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800a624:	4b17      	ldr	r3, [pc, #92]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a626:	2202      	movs	r2, #2
 800a628:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	4a15      	ldr	r2, [pc, #84]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a630:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	b2da      	uxtb	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f000 f8b5 	bl	800a7ae <FLASH_MassErase>
 800a644:	e018      	b.n	800a678 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800a646:	4b0f      	ldr	r3, [pc, #60]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a648:	2201      	movs	r2, #1
 800a64a:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	4a0c      	ldr	r2, [pc, #48]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a652:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	4a0a      	ldr	r2, [pc, #40]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a65a:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	b2da      	uxtb	r2, r3
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a664:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	4619      	mov	r1, r3
 800a672:	4610      	mov	r0, r2
 800a674:	f000 f8be 	bl	800a7f4 <FLASH_Erase_Sector>
  }

  return status;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000d9c 	.word	0x20000d9c
 800a688:	40023c00 	.word	0x40023c00

0800a68c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a698:	4b32      	ldr	r3, [pc, #200]	; (800a764 <HAL_FLASHEx_OBProgram+0xd8>)
 800a69a:	7e1b      	ldrb	r3, [r3, #24]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d101      	bne.n	800a6a4 <HAL_FLASHEx_OBProgram+0x18>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e05b      	b.n	800a75c <HAL_FLASHEx_OBProgram+0xd0>
 800a6a4:	4b2f      	ldr	r3, [pc, #188]	; (800a764 <HAL_FLASHEx_OBProgram+0xd8>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d018      	beq.n	800a6e8 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d10a      	bne.n	800a6d4 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f000 f8db 	bl	800a884 <FLASH_OB_EnableWRP>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73fb      	strb	r3, [r7, #15]
 800a6d2:	e009      	b.n	800a6e8 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	f000 f8f2 	bl	800a8c8 <FLASH_OB_DisableWRP>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d007      	beq.n	800a704 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 f904 	bl	800a908 <FLASH_OB_RDP_LevelConfig>
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d013      	beq.n	800a738 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	7e1b      	ldrb	r3, [r3, #24]
 800a714:	f003 0320 	and.w	r3, r3, #32
 800a718:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a722:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a728:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	461a      	mov	r2, r3
 800a730:	f000 f904 	bl	800a93c <FLASH_OB_UserConfig>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0308 	and.w	r3, r3, #8
 800a740:	2b00      	cmp	r3, #0
 800a742:	d007      	beq.n	800a754 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 f926 	bl	800a99c <FLASH_OB_BOR_LevelConfig>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a754:	4b03      	ldr	r3, [pc, #12]	; (800a764 <HAL_FLASHEx_OBProgram+0xd8>)
 800a756:	2200      	movs	r2, #0
 800a758:	761a      	strb	r2, [r3, #24]

  return status;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	20000d9c 	.word	0x20000d9c

0800a768 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	220f      	movs	r2, #15
 800a774:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800a776:	f000 f93f 	bl	800a9f8 <FLASH_OB_GetWRP>
 800a77a:	4603      	mov	r3, r0
 800a77c:	461a      	mov	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800a782:	f000 f945 	bl	800aa10 <FLASH_OB_GetRDP>
 800a786:	4603      	mov	r3, r0
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800a78e:	f000 f923 	bl	800a9d8 <FLASH_OB_GetUser>
 800a792:	4603      	mov	r3, r0
 800a794:	461a      	mov	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800a79a:	f000 f959 	bl	800aa50 <FLASH_OB_GetBOR>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	615a      	str	r2, [r3, #20]
}
 800a7a6:	bf00      	nop
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	6039      	str	r1, [r7, #0]
 800a7b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	; (800a7f0 <FLASH_MassErase+0x42>)
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	4a0c      	ldr	r2, [pc, #48]	; (800a7f0 <FLASH_MassErase+0x42>)
 800a7c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a7c6:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <FLASH_MassErase+0x42>)
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	4a09      	ldr	r2, [pc, #36]	; (800a7f0 <FLASH_MassErase+0x42>)
 800a7cc:	f043 0304 	orr.w	r3, r3, #4
 800a7d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a7d2:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <FLASH_MassErase+0x42>)
 800a7d4:	691a      	ldr	r2, [r3, #16]
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	021b      	lsls	r3, r3, #8
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	4a04      	ldr	r2, [pc, #16]	; (800a7f0 <FLASH_MassErase+0x42>)
 800a7de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7e2:	6113      	str	r3, [r2, #16]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	40023c00 	.word	0x40023c00

0800a7f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e010      	b.n	800a832 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d103      	bne.n	800a81e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e009      	b.n	800a832 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d103      	bne.n	800a82c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a824:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	e002      	b.n	800a832 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a82c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a830:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	4a12      	ldr	r2, [pc, #72]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a83c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a83e:	4b10      	ldr	r3, [pc, #64]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	490f      	ldr	r1, [pc, #60]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	4a0c      	ldr	r2, [pc, #48]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a850:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a854:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a856:	4b0a      	ldr	r3, [pc, #40]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a858:	691a      	ldr	r2, [r3, #16]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	4313      	orrs	r3, r2
 800a860:	4a07      	ldr	r2, [pc, #28]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a862:	f043 0302 	orr.w	r3, r3, #2
 800a866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a868:	4b05      	ldr	r3, [pc, #20]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	4a04      	ldr	r2, [pc, #16]	; (800a880 <FLASH_Erase_Sector+0x8c>)
 800a86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a872:	6113      	str	r3, [r2, #16]
}
 800a874:	bf00      	nop
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	40023c00 	.word	0x40023c00

0800a884 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a892:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a896:	f7ff fd03 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800a8a4:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <FLASH_OB_EnableWRP+0x40>)
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	4904      	ldr	r1, [pc, #16]	; (800a8c4 <FLASH_OB_EnableWRP+0x40>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	40023c16 	.word	0x40023c16

0800a8c8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8da:	f7ff fce1 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d108      	bne.n	800a8fa <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800a8e8:	4b06      	ldr	r3, [pc, #24]	; (800a904 <FLASH_OB_DisableWRP+0x3c>)
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	4904      	ldr	r1, [pc, #16]	; (800a904 <FLASH_OB_DisableWRP+0x3c>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40023c16 	.word	0x40023c16

0800a908 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a916:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a91a:	f7ff fcc1 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800a928:	4a03      	ldr	r2, [pc, #12]	; (800a938 <FLASH_OB_RDP_LevelConfig+0x30>)
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	40023c15 	.word	0x40023c15

0800a93c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	71fb      	strb	r3, [r7, #7]
 800a946:	460b      	mov	r3, r1
 800a948:	71bb      	strb	r3, [r7, #6]
 800a94a:	4613      	mov	r3, r2
 800a94c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800a94e:	23ff      	movs	r3, #255	; 0xff
 800a950:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a956:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a95a:	f7ff fca1 	bl	800a2a0 <FLASH_WaitForLastOperation>
 800a95e:	4603      	mov	r3, r0
 800a960:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d111      	bne.n	800a98c <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800a968:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <FLASH_OB_UserConfig+0x5c>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 031f 	and.w	r3, r3, #31
 800a972:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800a974:	79ba      	ldrb	r2, [r7, #6]
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	4313      	orrs	r3, r2
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	797b      	ldrb	r3, [r7, #5]
 800a97e:	4313      	orrs	r3, r2
 800a980:	b2da      	uxtb	r2, r3
 800a982:	4905      	ldr	r1, [pc, #20]	; (800a998 <FLASH_OB_UserConfig+0x5c>)
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	4313      	orrs	r3, r2
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	40023c14 	.word	0x40023c14

0800a99c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9ae:	f023 030c 	bic.w	r3, r3, #12
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800a9b6:	4b07      	ldr	r3, [pc, #28]	; (800a9d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	4905      	ldr	r1, [pc, #20]	; (800a9d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0

}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	40023c14 	.word	0x40023c14

0800a9d8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <FLASH_OB_GetUser+0x1c>)
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	f023 031f 	bic.w	r3, r3, #31
 800a9e6:	b2db      	uxtb	r3, r3
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	40023c00 	.word	0x40023c00

0800a9f8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800a9fc:	4b03      	ldr	r3, [pc, #12]	; (800aa0c <FLASH_OB_GetWRP+0x14>)
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	b29b      	uxth	r3, r3
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	40023c16 	.word	0x40023c16

0800aa10 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800aa16:	23aa      	movs	r3, #170	; 0xaa
 800aa18:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <FLASH_OB_GetRDP+0x3c>)
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2bcc      	cmp	r3, #204	; 0xcc
 800aa22:	d102      	bne.n	800aa2a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800aa24:	23cc      	movs	r3, #204	; 0xcc
 800aa26:	71fb      	strb	r3, [r7, #7]
 800aa28:	e009      	b.n	800aa3e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800aa2a:	4b08      	ldr	r3, [pc, #32]	; (800aa4c <FLASH_OB_GetRDP+0x3c>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2baa      	cmp	r3, #170	; 0xaa
 800aa32:	d102      	bne.n	800aa3a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800aa34:	23aa      	movs	r3, #170	; 0xaa
 800aa36:	71fb      	strb	r3, [r7, #7]
 800aa38:	e001      	b.n	800aa3e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800aa3a:	2355      	movs	r3, #85	; 0x55
 800aa3c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	40023c15 	.word	0x40023c15

0800aa50 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <FLASH_OB_GetBOR+0x1c>)
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	f003 030c 	and.w	r3, r3, #12
 800aa5e:	b2db      	uxtb	r3, r3
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	40023c14 	.word	0x40023c14

0800aa70 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800aa70:	b480      	push	{r7}
 800aa72:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800aa74:	4b20      	ldr	r3, [pc, #128]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d017      	beq.n	800aab0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800aa80:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a1c      	ldr	r2, [pc, #112]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aa86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa8a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800aa8c:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a19      	ldr	r2, [pc, #100]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aa92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	4b17      	ldr	r3, [pc, #92]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a16      	ldr	r2, [pc, #88]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aa9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaa2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800aaa4:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a13      	ldr	r2, [pc, #76]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aaaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aaae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800aab0:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d017      	beq.n	800aaec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800aabc:	4b0e      	ldr	r3, [pc, #56]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a0d      	ldr	r2, [pc, #52]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aac6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800aac8:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a0a      	ldr	r2, [pc, #40]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	4b08      	ldr	r3, [pc, #32]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a07      	ldr	r2, [pc, #28]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aade:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800aae0:	4b05      	ldr	r3, [pc, #20]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a04      	ldr	r2, [pc, #16]	; (800aaf8 <FLASH_FlushCaches+0x88>)
 800aae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aaea:	6013      	str	r3, [r2, #0]
  }
}
 800aaec:	bf00      	nop
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40023c00 	.word	0x40023c00

0800aafc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b089      	sub	sp, #36	; 0x24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab12:	2300      	movs	r3, #0
 800ab14:	61fb      	str	r3, [r7, #28]
 800ab16:	e16b      	b.n	800adf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ab18:	2201      	movs	r2, #1
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	4013      	ands	r3, r2
 800ab2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	f040 815a 	bne.w	800adea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d005      	beq.n	800ab4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d130      	bne.n	800abb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	2203      	movs	r2, #3
 800ab5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5e:	43db      	mvns	r3, r3
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	4013      	ands	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab72:	69ba      	ldr	r2, [r7, #24]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	69ba      	ldr	r2, [r7, #24]
 800ab7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab84:	2201      	movs	r2, #1
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8c:	43db      	mvns	r3, r3
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	4013      	ands	r3, r2
 800ab92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	091b      	lsrs	r3, r3, #4
 800ab9a:	f003 0201 	and.w	r2, r3, #1
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	fa02 f303 	lsl.w	r3, r2, r3
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	69ba      	ldr	r2, [r7, #24]
 800abae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d017      	beq.n	800abec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	2203      	movs	r2, #3
 800abc8:	fa02 f303 	lsl.w	r3, r2, r3
 800abcc:	43db      	mvns	r3, r3
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	4013      	ands	r3, r2
 800abd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	fa02 f303 	lsl.w	r3, r2, r3
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d123      	bne.n	800ac40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	08da      	lsrs	r2, r3, #3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	3208      	adds	r2, #8
 800ac00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	220f      	movs	r2, #15
 800ac10:	fa02 f303 	lsl.w	r3, r2, r3
 800ac14:	43db      	mvns	r3, r3
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	691a      	ldr	r2, [r3, #16]
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	08da      	lsrs	r2, r3, #3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3208      	adds	r2, #8
 800ac3a:	69b9      	ldr	r1, [r7, #24]
 800ac3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac50:	43db      	mvns	r3, r3
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	4013      	ands	r3, r2
 800ac56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f003 0203 	and.w	r2, r3, #3
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69ba      	ldr	r2, [r7, #24]
 800ac72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 80b4 	beq.w	800adea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	4b60      	ldr	r3, [pc, #384]	; (800ae08 <HAL_GPIO_Init+0x30c>)
 800ac88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8a:	4a5f      	ldr	r2, [pc, #380]	; (800ae08 <HAL_GPIO_Init+0x30c>)
 800ac8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac90:	6453      	str	r3, [r2, #68]	; 0x44
 800ac92:	4b5d      	ldr	r3, [pc, #372]	; (800ae08 <HAL_GPIO_Init+0x30c>)
 800ac94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac9e:	4a5b      	ldr	r2, [pc, #364]	; (800ae0c <HAL_GPIO_Init+0x310>)
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	089b      	lsrs	r3, r3, #2
 800aca4:	3302      	adds	r3, #2
 800aca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	f003 0303 	and.w	r3, r3, #3
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	220f      	movs	r2, #15
 800acb6:	fa02 f303 	lsl.w	r3, r2, r3
 800acba:	43db      	mvns	r3, r3
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	4013      	ands	r3, r2
 800acc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a52      	ldr	r2, [pc, #328]	; (800ae10 <HAL_GPIO_Init+0x314>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d02b      	beq.n	800ad22 <HAL_GPIO_Init+0x226>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a51      	ldr	r2, [pc, #324]	; (800ae14 <HAL_GPIO_Init+0x318>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d025      	beq.n	800ad1e <HAL_GPIO_Init+0x222>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a50      	ldr	r2, [pc, #320]	; (800ae18 <HAL_GPIO_Init+0x31c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d01f      	beq.n	800ad1a <HAL_GPIO_Init+0x21e>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a4f      	ldr	r2, [pc, #316]	; (800ae1c <HAL_GPIO_Init+0x320>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d019      	beq.n	800ad16 <HAL_GPIO_Init+0x21a>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a4e      	ldr	r2, [pc, #312]	; (800ae20 <HAL_GPIO_Init+0x324>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d013      	beq.n	800ad12 <HAL_GPIO_Init+0x216>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a4d      	ldr	r2, [pc, #308]	; (800ae24 <HAL_GPIO_Init+0x328>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d00d      	beq.n	800ad0e <HAL_GPIO_Init+0x212>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a4c      	ldr	r2, [pc, #304]	; (800ae28 <HAL_GPIO_Init+0x32c>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d007      	beq.n	800ad0a <HAL_GPIO_Init+0x20e>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a4b      	ldr	r2, [pc, #300]	; (800ae2c <HAL_GPIO_Init+0x330>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d101      	bne.n	800ad06 <HAL_GPIO_Init+0x20a>
 800ad02:	2307      	movs	r3, #7
 800ad04:	e00e      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad06:	2308      	movs	r3, #8
 800ad08:	e00c      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad0a:	2306      	movs	r3, #6
 800ad0c:	e00a      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad0e:	2305      	movs	r3, #5
 800ad10:	e008      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad12:	2304      	movs	r3, #4
 800ad14:	e006      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad16:	2303      	movs	r3, #3
 800ad18:	e004      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	e002      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <HAL_GPIO_Init+0x228>
 800ad22:	2300      	movs	r3, #0
 800ad24:	69fa      	ldr	r2, [r7, #28]
 800ad26:	f002 0203 	and.w	r2, r2, #3
 800ad2a:	0092      	lsls	r2, r2, #2
 800ad2c:	4093      	lsls	r3, r2
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad34:	4935      	ldr	r1, [pc, #212]	; (800ae0c <HAL_GPIO_Init+0x310>)
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	089b      	lsrs	r3, r3, #2
 800ad3a:	3302      	adds	r3, #2
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad42:	4b3b      	ldr	r3, [pc, #236]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	43db      	mvns	r3, r3
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ad66:	4a32      	ldr	r2, [pc, #200]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ad6c:	4b30      	ldr	r3, [pc, #192]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	43db      	mvns	r3, r3
 800ad76:	69ba      	ldr	r2, [r7, #24]
 800ad78:	4013      	ands	r3, r2
 800ad7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ad88:	69ba      	ldr	r2, [r7, #24]
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad90:	4a27      	ldr	r2, [pc, #156]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad96:	4b26      	ldr	r3, [pc, #152]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	43db      	mvns	r3, r3
 800ada0:	69ba      	ldr	r2, [r7, #24]
 800ada2:	4013      	ands	r3, r2
 800ada4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800adba:	4a1d      	ldr	r2, [pc, #116]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800adc0:	4b1b      	ldr	r3, [pc, #108]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	43db      	mvns	r3, r3
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	4013      	ands	r3, r2
 800adce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ade4:	4a12      	ldr	r2, [pc, #72]	; (800ae30 <HAL_GPIO_Init+0x334>)
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	3301      	adds	r3, #1
 800adee:	61fb      	str	r3, [r7, #28]
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	2b0f      	cmp	r3, #15
 800adf4:	f67f ae90 	bls.w	800ab18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	3724      	adds	r7, #36	; 0x24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	40023800 	.word	0x40023800
 800ae0c:	40013800 	.word	0x40013800
 800ae10:	40020000 	.word	0x40020000
 800ae14:	40020400 	.word	0x40020400
 800ae18:	40020800 	.word	0x40020800
 800ae1c:	40020c00 	.word	0x40020c00
 800ae20:	40021000 	.word	0x40021000
 800ae24:	40021400 	.word	0x40021400
 800ae28:	40021800 	.word	0x40021800
 800ae2c:	40021c00 	.word	0x40021c00
 800ae30:	40013c00 	.word	0x40013c00

0800ae34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	e0cd      	b.n	800afec <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae50:	2201      	movs	r2, #1
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	fa02 f303 	lsl.w	r3, r2, r3
 800ae58:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ae5a:	683a      	ldr	r2, [r7, #0]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	f040 80bd 	bne.w	800afe6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ae6c:	4a65      	ldr	r2, [pc, #404]	; (800b004 <HAL_GPIO_DeInit+0x1d0>)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	089b      	lsrs	r3, r3, #2
 800ae72:	3302      	adds	r3, #2
 800ae74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae78:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	220f      	movs	r2, #15
 800ae84:	fa02 f303 	lsl.w	r3, r2, r3
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a5d      	ldr	r2, [pc, #372]	; (800b008 <HAL_GPIO_DeInit+0x1d4>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d02b      	beq.n	800aeee <HAL_GPIO_DeInit+0xba>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a5c      	ldr	r2, [pc, #368]	; (800b00c <HAL_GPIO_DeInit+0x1d8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d025      	beq.n	800aeea <HAL_GPIO_DeInit+0xb6>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a5b      	ldr	r2, [pc, #364]	; (800b010 <HAL_GPIO_DeInit+0x1dc>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d01f      	beq.n	800aee6 <HAL_GPIO_DeInit+0xb2>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a5a      	ldr	r2, [pc, #360]	; (800b014 <HAL_GPIO_DeInit+0x1e0>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d019      	beq.n	800aee2 <HAL_GPIO_DeInit+0xae>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a59      	ldr	r2, [pc, #356]	; (800b018 <HAL_GPIO_DeInit+0x1e4>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d013      	beq.n	800aede <HAL_GPIO_DeInit+0xaa>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a58      	ldr	r2, [pc, #352]	; (800b01c <HAL_GPIO_DeInit+0x1e8>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d00d      	beq.n	800aeda <HAL_GPIO_DeInit+0xa6>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a57      	ldr	r2, [pc, #348]	; (800b020 <HAL_GPIO_DeInit+0x1ec>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d007      	beq.n	800aed6 <HAL_GPIO_DeInit+0xa2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a56      	ldr	r2, [pc, #344]	; (800b024 <HAL_GPIO_DeInit+0x1f0>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d101      	bne.n	800aed2 <HAL_GPIO_DeInit+0x9e>
 800aece:	2307      	movs	r3, #7
 800aed0:	e00e      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aed2:	2308      	movs	r3, #8
 800aed4:	e00c      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aed6:	2306      	movs	r3, #6
 800aed8:	e00a      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aeda:	2305      	movs	r3, #5
 800aedc:	e008      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aede:	2304      	movs	r3, #4
 800aee0:	e006      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aee2:	2303      	movs	r3, #3
 800aee4:	e004      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aee6:	2302      	movs	r3, #2
 800aee8:	e002      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e000      	b.n	800aef0 <HAL_GPIO_DeInit+0xbc>
 800aeee:	2300      	movs	r3, #0
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	f002 0203 	and.w	r2, r2, #3
 800aef6:	0092      	lsls	r2, r2, #2
 800aef8:	4093      	lsls	r3, r2
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d132      	bne.n	800af66 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800af00:	4b49      	ldr	r3, [pc, #292]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	43db      	mvns	r3, r3
 800af08:	4947      	ldr	r1, [pc, #284]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af0a:	4013      	ands	r3, r2
 800af0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800af0e:	4b46      	ldr	r3, [pc, #280]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	43db      	mvns	r3, r3
 800af16:	4944      	ldr	r1, [pc, #272]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af18:	4013      	ands	r3, r2
 800af1a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800af1c:	4b42      	ldr	r3, [pc, #264]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	43db      	mvns	r3, r3
 800af24:	4940      	ldr	r1, [pc, #256]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af26:	4013      	ands	r3, r2
 800af28:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800af2a:	4b3f      	ldr	r3, [pc, #252]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	43db      	mvns	r3, r3
 800af32:	493d      	ldr	r1, [pc, #244]	; (800b028 <HAL_GPIO_DeInit+0x1f4>)
 800af34:	4013      	ands	r3, r2
 800af36:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	220f      	movs	r2, #15
 800af42:	fa02 f303 	lsl.w	r3, r2, r3
 800af46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800af48:	4a2e      	ldr	r2, [pc, #184]	; (800b004 <HAL_GPIO_DeInit+0x1d0>)
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	089b      	lsrs	r3, r3, #2
 800af4e:	3302      	adds	r3, #2
 800af50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	43da      	mvns	r2, r3
 800af58:	482a      	ldr	r0, [pc, #168]	; (800b004 <HAL_GPIO_DeInit+0x1d0>)
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	089b      	lsrs	r3, r3, #2
 800af5e:	400a      	ands	r2, r1
 800af60:	3302      	adds	r3, #2
 800af62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	2103      	movs	r1, #3
 800af70:	fa01 f303 	lsl.w	r3, r1, r3
 800af74:	43db      	mvns	r3, r3
 800af76:	401a      	ands	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	08da      	lsrs	r2, r3, #3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3208      	adds	r2, #8
 800af84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f003 0307 	and.w	r3, r3, #7
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	220f      	movs	r2, #15
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	43db      	mvns	r3, r3
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	08d2      	lsrs	r2, r2, #3
 800af9c:	4019      	ands	r1, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3208      	adds	r2, #8
 800afa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	2103      	movs	r1, #3
 800afb0:	fa01 f303 	lsl.w	r3, r1, r3
 800afb4:	43db      	mvns	r3, r3
 800afb6:	401a      	ands	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	2101      	movs	r1, #1
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	fa01 f303 	lsl.w	r3, r1, r3
 800afc8:	43db      	mvns	r3, r3
 800afca:	401a      	ands	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	005b      	lsls	r3, r3, #1
 800afd8:	2103      	movs	r1, #3
 800afda:	fa01 f303 	lsl.w	r3, r1, r3
 800afde:	43db      	mvns	r3, r3
 800afe0:	401a      	ands	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	3301      	adds	r3, #1
 800afea:	617b      	str	r3, [r7, #20]
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	2b0f      	cmp	r3, #15
 800aff0:	f67f af2e 	bls.w	800ae50 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40013800 	.word	0x40013800
 800b008:	40020000 	.word	0x40020000
 800b00c:	40020400 	.word	0x40020400
 800b010:	40020800 	.word	0x40020800
 800b014:	40020c00 	.word	0x40020c00
 800b018:	40021000 	.word	0x40021000
 800b01c:	40021400 	.word	0x40021400
 800b020:	40021800 	.word	0x40021800
 800b024:	40021c00 	.word	0x40021c00
 800b028:	40013c00 	.word	0x40013c00

0800b02c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	691a      	ldr	r2, [r3, #16]
 800b03c:	887b      	ldrh	r3, [r7, #2]
 800b03e:	4013      	ands	r3, r2
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b044:	2301      	movs	r3, #1
 800b046:	73fb      	strb	r3, [r7, #15]
 800b048:	e001      	b.n	800b04e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	807b      	strh	r3, [r7, #2]
 800b068:	4613      	mov	r3, r2
 800b06a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b06c:	787b      	ldrb	r3, [r7, #1]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b072:	887a      	ldrh	r2, [r7, #2]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b078:	e003      	b.n	800b082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b07a:	887b      	ldrh	r3, [r7, #2]
 800b07c:	041a      	lsls	r2, r3, #16
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	619a      	str	r2, [r3, #24]
}
 800b082:	bf00      	nop
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	460b      	mov	r3, r1
 800b098:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b0a0:	887a      	ldrh	r2, [r7, #2]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	041a      	lsls	r2, r3, #16
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	43d9      	mvns	r1, r3
 800b0ac:	887b      	ldrh	r3, [r7, #2]
 800b0ae:	400b      	ands	r3, r1
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	619a      	str	r2, [r3, #24]
}
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800b0ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b0d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800b0d4:	887a      	ldrh	r2, [r7, #2]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800b0e2:	887a      	ldrh	r2, [r7, #2]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	69db      	ldr	r3, [r3, #28]
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	e000      	b.n	800b106 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
  }
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	4603      	mov	r3, r0
 800b11a:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b11c:	4b08      	ldr	r3, [pc, #32]	; (800b140 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b11e:	695a      	ldr	r2, [r3, #20]
 800b120:	88fb      	ldrh	r3, [r7, #6]
 800b122:	4013      	ands	r3, r2
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b128:	4a05      	ldr	r2, [pc, #20]	; (800b140 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b12a:	88fb      	ldrh	r3, [r7, #6]
 800b12c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b12e:	88fb      	ldrh	r3, [r7, #6]
 800b130:	4618      	mov	r0, r3
 800b132:	f000 f807 	bl	800b144 <HAL_GPIO_EXTI_Callback>
  }
}
 800b136:	bf00      	nop
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	40013c00 	.word	0x40013c00

0800b144 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	4603      	mov	r3, r0
 800b14c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e12b      	b.n	800b3c4 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d106      	bne.n	800b186 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7fa fbcb 	bl	800591c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2224      	movs	r2, #36	; 0x24
 800b18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0201 	bic.w	r2, r2, #1
 800b19c:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1ac:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1bc:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b1be:	f007 f891 	bl	80122e4 <HAL_RCC_GetPCLK1Freq>
 800b1c2:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	4a80      	ldr	r2, [pc, #512]	; (800b3cc <HAL_I2C_Init+0x272>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d807      	bhi.n	800b1de <HAL_I2C_Init+0x84>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4a7f      	ldr	r2, [pc, #508]	; (800b3d0 <HAL_I2C_Init+0x276>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	bf94      	ite	ls
 800b1d6:	2301      	movls	r3, #1
 800b1d8:	2300      	movhi	r3, #0
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	e006      	b.n	800b1ec <HAL_I2C_Init+0x92>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4a7c      	ldr	r2, [pc, #496]	; (800b3d4 <HAL_I2C_Init+0x27a>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	bf94      	ite	ls
 800b1e6:	2301      	movls	r3, #1
 800b1e8:	2300      	movhi	r3, #0
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e0e7      	b.n	800b3c4 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4a78      	ldr	r2, [pc, #480]	; (800b3d8 <HAL_I2C_Init+0x27e>)
 800b1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1fc:	0c9b      	lsrs	r3, r3, #18
 800b1fe:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	430a      	orrs	r2, r1
 800b212:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	4a6a      	ldr	r2, [pc, #424]	; (800b3cc <HAL_I2C_Init+0x272>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d802      	bhi.n	800b22e <HAL_I2C_Init+0xd4>
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3301      	adds	r3, #1
 800b22c:	e009      	b.n	800b242 <HAL_I2C_Init+0xe8>
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b234:	fb02 f303 	mul.w	r3, r2, r3
 800b238:	4a68      	ldr	r2, [pc, #416]	; (800b3dc <HAL_I2C_Init+0x282>)
 800b23a:	fba2 2303 	umull	r2, r3, r2, r3
 800b23e:	099b      	lsrs	r3, r3, #6
 800b240:	3301      	adds	r3, #1
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	6812      	ldr	r2, [r2, #0]
 800b246:	430b      	orrs	r3, r1
 800b248:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b254:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	495b      	ldr	r1, [pc, #364]	; (800b3cc <HAL_I2C_Init+0x272>)
 800b25e:	428b      	cmp	r3, r1
 800b260:	d819      	bhi.n	800b296 <HAL_I2C_Init+0x13c>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	1e59      	subs	r1, r3, #1
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b270:	1c59      	adds	r1, r3, #1
 800b272:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b276:	400b      	ands	r3, r1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <HAL_I2C_Init+0x138>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	1e59      	subs	r1, r3, #1
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	fbb1 f3f3 	udiv	r3, r1, r3
 800b28a:	3301      	adds	r3, #1
 800b28c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b290:	e051      	b.n	800b336 <HAL_I2C_Init+0x1dc>
 800b292:	2304      	movs	r3, #4
 800b294:	e04f      	b.n	800b336 <HAL_I2C_Init+0x1dc>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d111      	bne.n	800b2c2 <HAL_I2C_Init+0x168>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	1e58      	subs	r0, r3, #1
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6859      	ldr	r1, [r3, #4]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	440b      	add	r3, r1
 800b2ac:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	bf0c      	ite	eq
 800b2ba:	2301      	moveq	r3, #1
 800b2bc:	2300      	movne	r3, #0
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	e012      	b.n	800b2e8 <HAL_I2C_Init+0x18e>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	1e58      	subs	r0, r3, #1
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6859      	ldr	r1, [r3, #4]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	0099      	lsls	r1, r3, #2
 800b2d2:	440b      	add	r3, r1
 800b2d4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2d8:	3301      	adds	r3, #1
 800b2da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	bf0c      	ite	eq
 800b2e2:	2301      	moveq	r3, #1
 800b2e4:	2300      	movne	r3, #0
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <HAL_I2C_Init+0x196>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e022      	b.n	800b336 <HAL_I2C_Init+0x1dc>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10e      	bne.n	800b316 <HAL_I2C_Init+0x1bc>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	1e58      	subs	r0, r3, #1
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6859      	ldr	r1, [r3, #4]
 800b300:	460b      	mov	r3, r1
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	440b      	add	r3, r1
 800b306:	fbb0 f3f3 	udiv	r3, r0, r3
 800b30a:	3301      	adds	r3, #1
 800b30c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b314:	e00f      	b.n	800b336 <HAL_I2C_Init+0x1dc>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	1e58      	subs	r0, r3, #1
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6859      	ldr	r1, [r3, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	0099      	lsls	r1, r3, #2
 800b326:	440b      	add	r3, r1
 800b328:	fbb0 f3f3 	udiv	r3, r0, r3
 800b32c:	3301      	adds	r3, #1
 800b32e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	6809      	ldr	r1, [r1, #0]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	69da      	ldr	r2, [r3, #28]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	431a      	orrs	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	430a      	orrs	r2, r1
 800b358:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b364:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	6911      	ldr	r1, [r2, #16]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	68d2      	ldr	r2, [r2, #12]
 800b370:	4311      	orrs	r1, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	6812      	ldr	r2, [r2, #0]
 800b376:	430b      	orrs	r3, r1
 800b378:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	695a      	ldr	r2, [r3, #20]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	431a      	orrs	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	430a      	orrs	r2, r1
 800b394:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0201 	orr.w	r2, r2, #1
 800b3a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2220      	movs	r2, #32
 800b3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	000186a0 	.word	0x000186a0
 800b3d0:	001e847f 	.word	0x001e847f
 800b3d4:	003d08ff 	.word	0x003d08ff
 800b3d8:	431bde83 	.word	0x431bde83
 800b3dc:	10624dd3 	.word	0x10624dd3

0800b3e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e021      	b.n	800b436 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2224      	movs	r2, #36	; 0x24
 800b3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 0201 	bic.w	r2, r2, #1
 800b408:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7fa fade 	bl	80059cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b088      	sub	sp, #32
 800b442:	af02      	add	r7, sp, #8
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	461a      	mov	r2, r3
 800b44a:	460b      	mov	r3, r1
 800b44c:	817b      	strh	r3, [r7, #10]
 800b44e:	4613      	mov	r3, r2
 800b450:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b452:	f7fb f9eb 	bl	800682c <HAL_GetTick>
 800b456:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b20      	cmp	r3, #32
 800b462:	f040 80e0 	bne.w	800b626 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	2319      	movs	r3, #25
 800b46c:	2201      	movs	r2, #1
 800b46e:	4970      	ldr	r1, [pc, #448]	; (800b630 <HAL_I2C_Master_Transmit+0x1f2>)
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f005 fd97 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b47c:	2302      	movs	r3, #2
 800b47e:	e0d3      	b.n	800b628 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b486:	2b01      	cmp	r3, #1
 800b488:	d101      	bne.n	800b48e <HAL_I2C_Master_Transmit+0x50>
 800b48a:	2302      	movs	r3, #2
 800b48c:	e0cc      	b.n	800b628 <HAL_I2C_Master_Transmit+0x1ea>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d007      	beq.n	800b4b4 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4c2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2221      	movs	r2, #33	; 0x21
 800b4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2210      	movs	r2, #16
 800b4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	893a      	ldrh	r2, [r7, #8]
 800b4e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4a50      	ldr	r2, [pc, #320]	; (800b634 <HAL_I2C_Master_Transmit+0x1f6>)
 800b4f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4f6:	8979      	ldrh	r1, [r7, #10]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	6a3a      	ldr	r2, [r7, #32]
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f005 f8c9 	bl	8010694 <I2C_MasterRequestWrite>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	e08d      	b.n	800b628 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b50c:	2300      	movs	r3, #0
 800b50e:	613b      	str	r3, [r7, #16]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	613b      	str	r3, [r7, #16]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	613b      	str	r3, [r7, #16]
 800b520:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b522:	e066      	b.n	800b5f2 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	6a39      	ldr	r1, [r7, #32]
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f005 fe11 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00d      	beq.n	800b550 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b538:	2b04      	cmp	r3, #4
 800b53a:	d107      	bne.n	800b54c <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b54a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	e06b      	b.n	800b628 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d11b      	bne.n	800b5c6 <HAL_I2C_Master_Transmit+0x188>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b592:	2b00      	cmp	r3, #0
 800b594:	d017      	beq.n	800b5c6 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	781a      	ldrb	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	6a39      	ldr	r1, [r7, #32]
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f005 fe01 	bl	80111d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00d      	beq.n	800b5f2 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5da:	2b04      	cmp	r3, #4
 800b5dc:	d107      	bne.n	800b5ee <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e01a      	b.n	800b628 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d194      	bne.n	800b524 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2220      	movs	r2, #32
 800b60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	e000      	b.n	800b628 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b626:	2302      	movs	r3, #2
  }
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	00100002 	.word	0x00100002
 800b634:	ffff0000 	.word	0xffff0000

0800b638 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08c      	sub	sp, #48	; 0x30
 800b63c:	af02      	add	r7, sp, #8
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	607a      	str	r2, [r7, #4]
 800b642:	461a      	mov	r2, r3
 800b644:	460b      	mov	r3, r1
 800b646:	817b      	strh	r3, [r7, #10]
 800b648:	4613      	mov	r3, r2
 800b64a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b64c:	f7fb f8ee 	bl	800682c <HAL_GetTick>
 800b650:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b20      	cmp	r3, #32
 800b65c:	f040 820b 	bne.w	800ba76 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	2319      	movs	r3, #25
 800b666:	2201      	movs	r2, #1
 800b668:	497c      	ldr	r1, [pc, #496]	; (800b85c <HAL_I2C_Master_Receive+0x224>)
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f005 fc9a 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b676:	2302      	movs	r3, #2
 800b678:	e1fe      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <HAL_I2C_Master_Receive+0x50>
 800b684:	2302      	movs	r3, #2
 800b686:	e1f7      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d007      	beq.n	800b6ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f042 0201 	orr.w	r2, r2, #1
 800b6ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b6bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2222      	movs	r2, #34	; 0x22
 800b6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2210      	movs	r2, #16
 800b6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	893a      	ldrh	r2, [r7, #8]
 800b6de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	4a5c      	ldr	r2, [pc, #368]	; (800b860 <HAL_I2C_Master_Receive+0x228>)
 800b6ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b6f0:	8979      	ldrh	r1, [r7, #10]
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f005 f84e 	bl	8010798 <I2C_MasterRequestRead>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e1b8      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d113      	bne.n	800b736 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	617b      	str	r3, [r7, #20]
 800b722:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	e18c      	b.n	800ba50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d11b      	bne.n	800b776 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b74c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b74e:	2300      	movs	r3, #0
 800b750:	61bb      	str	r3, [r7, #24]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	61bb      	str	r3, [r7, #24]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	61bb      	str	r3, [r7, #24]
 800b762:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	e16c      	b.n	800ba50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d11b      	bne.n	800b7b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b78c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b79c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61fb      	str	r3, [r7, #28]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	61fb      	str	r3, [r7, #28]
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	e14c      	b.n	800ba50 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	623b      	str	r3, [r7, #32]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	623b      	str	r3, [r7, #32]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	623b      	str	r3, [r7, #32]
 800b7da:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800b7dc:	e138      	b.n	800ba50 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	f200 80f1 	bhi.w	800b9ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d123      	bne.n	800b838 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f005 fd9d 	bl	8011334 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e139      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	691a      	ldr	r2, [r3, #16]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	b2d2      	uxtb	r2, r2
 800b810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b820:	3b01      	subs	r3, #1
 800b822:	b29a      	uxth	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	3b01      	subs	r3, #1
 800b830:	b29a      	uxth	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b836:	e10b      	b.n	800ba50 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d14e      	bne.n	800b8de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	2200      	movs	r2, #0
 800b848:	4906      	ldr	r1, [pc, #24]	; (800b864 <HAL_I2C_Master_Receive+0x22c>)
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f005 fbaa 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d008      	beq.n	800b868 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e10e      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
 800b85a:	bf00      	nop
 800b85c:	00100002 	.word	0x00100002
 800b860:	ffff0000 	.word	0xffff0000
 800b864:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	691a      	ldr	r2, [r3, #16]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	b2d2      	uxtb	r2, r2
 800b884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b894:	3b01      	subs	r3, #1
 800b896:	b29a      	uxth	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8dc:	e0b8      	b.n	800ba50 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4966      	ldr	r1, [pc, #408]	; (800ba80 <HAL_I2C_Master_Receive+0x448>)
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f005 fb5b 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e0bf      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	691a      	ldr	r2, [r3, #16]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	b2d2      	uxtb	r2, r2
 800b914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	1c5a      	adds	r2, r3, #1
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b924:	3b01      	subs	r3, #1
 800b926:	b29a      	uxth	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b930:	b29b      	uxth	r3, r3
 800b932:	3b01      	subs	r3, #1
 800b934:	b29a      	uxth	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b940:	2200      	movs	r2, #0
 800b942:	494f      	ldr	r1, [pc, #316]	; (800ba80 <HAL_I2C_Master_Receive+0x448>)
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f005 fb2d 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e091      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	691a      	ldr	r2, [r3, #16]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96e:	b2d2      	uxtb	r2, r2
 800b970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b980:	3b01      	subs	r3, #1
 800b982:	b29a      	uxth	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	3b01      	subs	r3, #1
 800b990:	b29a      	uxth	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	691a      	ldr	r2, [r3, #16]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	b2d2      	uxtb	r2, r2
 800b9a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9c8:	e042      	b.n	800ba50 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f005 fcb0 	bl	8011334 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e04c      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	691a      	ldr	r2, [r3, #16]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	b2d2      	uxtb	r2, r2
 800b9ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	f003 0304 	and.w	r3, r3, #4
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	d118      	bne.n	800ba50 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	691a      	ldr	r2, [r3, #16]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	b2d2      	uxtb	r2, r2
 800ba2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f47f aec2 	bne.w	800b7de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	e000      	b.n	800ba78 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ba76:	2302      	movs	r3, #2
  }
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3728      	adds	r7, #40	; 0x28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	00010004 	.word	0x00010004

0800ba84 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	; 0x28
 800ba88:	af02      	add	r7, sp, #8
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4613      	mov	r3, r2
 800ba92:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba94:	f7fa feca 	bl	800682c <HAL_GetTick>
 800ba98:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	f040 80fb 	bne.w	800bc9e <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d002      	beq.n	800bab4 <HAL_I2C_Slave_Transmit+0x30>
 800baae:	88fb      	ldrh	r3, [r7, #6]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e0f3      	b.n	800bca0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d101      	bne.n	800bac6 <HAL_I2C_Slave_Transmit+0x42>
 800bac2:	2302      	movs	r3, #2
 800bac4:	e0ec      	b.n	800bca0 <HAL_I2C_Slave_Transmit+0x21c>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0301 	and.w	r3, r3, #1
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d007      	beq.n	800baec <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f042 0201 	orr.w	r2, r2, #1
 800baea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bafa:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2221      	movs	r2, #33	; 0x21
 800bb00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	88fa      	ldrh	r2, [r7, #6]
 800bb1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4a5f      	ldr	r2, [pc, #380]	; (800bca8 <HAL_I2C_Slave_Transmit+0x224>)
 800bb2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb3c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2200      	movs	r2, #0
 800bb46:	4959      	ldr	r1, [pc, #356]	; (800bcac <HAL_I2C_Slave_Transmit+0x228>)
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f005 fa2b 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e0a3      	b.n	800bca0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb58:	2300      	movs	r3, #0
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	617b      	str	r3, [r7, #20]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bb76:	d165      	bne.n	800bc44 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	494a      	ldr	r1, [pc, #296]	; (800bcac <HAL_I2C_Slave_Transmit+0x228>)
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f005 fa0e 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e086      	b.n	800bca0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb92:	2300      	movs	r3, #0
 800bb94:	61bb      	str	r3, [r7, #24]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	61bb      	str	r3, [r7, #24]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	61bb      	str	r3, [r7, #24]
 800bba6:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800bba8:	e04c      	b.n	800bc44 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f005 face 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d009      	beq.n	800bbce <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbc8:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e068      	b.n	800bca0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	781a      	ldrb	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	3b01      	subs	r3, #1
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b04      	cmp	r3, #4
 800bc0a:	d11b      	bne.n	800bc44 <HAL_I2C_Slave_Transmit+0x1c0>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d017      	beq.n	800bc44 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	781a      	ldrb	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	1c5a      	adds	r2, r3, #1
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1ae      	bne.n	800bbaa <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f005 f9a3 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e01b      	b.n	800bca0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bc70:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2220      	movs	r2, #32
 800bc86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e000      	b.n	800bca0 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bc9e:	2302      	movs	r3, #2
  }
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3720      	adds	r7, #32
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	ffff0000 	.word	0xffff0000
 800bcac:	00010002 	.word	0x00010002

0800bcb0 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08a      	sub	sp, #40	; 0x28
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bcc0:	f7fa fdb4 	bl	800682c <HAL_GetTick>
 800bcc4:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	f040 80ee 	bne.w	800beb0 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <HAL_I2C_Slave_Receive+0x30>
 800bcda:	88fb      	ldrh	r3, [r7, #6]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e0e6      	b.n	800beb2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d101      	bne.n	800bcf2 <HAL_I2C_Slave_Receive+0x42>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e0df      	b.n	800beb2 <HAL_I2C_Slave_Receive+0x202>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d007      	beq.n	800bd18 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd26:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2222      	movs	r2, #34	; 0x22
 800bd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2220      	movs	r2, #32
 800bd34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	88fa      	ldrh	r2, [r7, #6]
 800bd48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4a59      	ldr	r2, [pc, #356]	; (800bebc <HAL_I2C_Slave_Receive+0x20c>)
 800bd58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd68:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	2200      	movs	r2, #0
 800bd72:	4953      	ldr	r1, [pc, #332]	; (800bec0 <HAL_I2C_Slave_Receive+0x210>)
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f005 f915 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e096      	b.n	800beb2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd84:	2300      	movs	r3, #0
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	617b      	str	r3, [r7, #20]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800bd9a:	e04e      	b.n	800be3a <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd9c:	69fa      	ldr	r2, [r7, #28]
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f005 fac7 	bl	8011334 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d009      	beq.n	800bdc0 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdba:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e078      	b.n	800beb2 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	691a      	ldr	r2, [r3, #16]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd2:	1c5a      	adds	r2, r3, #1
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	3b01      	subs	r3, #1
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d11c      	bne.n	800be3a <HAL_I2C_Slave_Receive+0x18a>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be04:	2b00      	cmp	r3, #0
 800be06:	d018      	beq.n	800be3a <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	691a      	ldr	r2, [r3, #16]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be24:	3b01      	subs	r3, #1
 800be26:	b29a      	uxth	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be30:	b29b      	uxth	r3, r3
 800be32:	3b01      	subs	r3, #1
 800be34:	b29a      	uxth	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1ac      	bne.n	800bd9c <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be42:	69fa      	ldr	r2, [r7, #28]
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f005 fa04 	bl	8011254 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be60:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e025      	b.n	800beb2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800be66:	2300      	movs	r3, #0
 800be68:	61bb      	str	r3, [r7, #24]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	61bb      	str	r3, [r7, #24]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f042 0201 	orr.w	r2, r2, #1
 800be80:	601a      	str	r2, [r3, #0]
 800be82:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2220      	movs	r2, #32
 800be98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	e000      	b.n	800beb2 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800beb0:	2302      	movs	r3, #2
  }
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3720      	adds	r7, #32
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	ffff0000 	.word	0xffff0000
 800bec0:	00010002 	.word	0x00010002

0800bec4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	607a      	str	r2, [r7, #4]
 800bece:	461a      	mov	r2, r3
 800bed0:	460b      	mov	r3, r1
 800bed2:	817b      	strh	r3, [r7, #10]
 800bed4:	4613      	mov	r3, r2
 800bed6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bed8:	2300      	movs	r3, #0
 800beda:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	f040 8085 	bne.w	800bff4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800beea:	4b46      	ldr	r3, [pc, #280]	; (800c004 <HAL_I2C_Master_Transmit_IT+0x140>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	08db      	lsrs	r3, r3, #3
 800bef0:	4a45      	ldr	r2, [pc, #276]	; (800c008 <HAL_I2C_Master_Transmit_IT+0x144>)
 800bef2:	fba2 2303 	umull	r2, r3, r2, r3
 800bef6:	0a1a      	lsrs	r2, r3, #8
 800bef8:	4613      	mov	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	009a      	lsls	r2, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d116      	bne.n	800bf3e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2220      	movs	r2, #32
 800bf1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2a:	f043 0220 	orr.w	r2, r3, #32
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e05b      	b.n	800bff6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	f003 0302 	and.w	r3, r3, #2
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d0db      	beq.n	800bf04 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d101      	bne.n	800bf5a <HAL_I2C_Master_Transmit_IT+0x96>
 800bf56:	2302      	movs	r3, #2
 800bf58:	e04d      	b.n	800bff6 <HAL_I2C_Master_Transmit_IT+0x132>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d007      	beq.n	800bf80 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f042 0201 	orr.w	r2, r2, #1
 800bf7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2221      	movs	r2, #33	; 0x21
 800bf94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2210      	movs	r2, #16
 800bf9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	893a      	ldrh	r2, [r7, #8]
 800bfb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4a13      	ldr	r2, [pc, #76]	; (800c00c <HAL_I2C_Master_Transmit_IT+0x148>)
 800bfc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bfc2:	897a      	ldrh	r2, [r7, #10]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bfde:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	e000      	b.n	800bff6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800bff4:	2302      	movs	r3, #2
  }
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	20000058 	.word	0x20000058
 800c008:	14f8b589 	.word	0x14f8b589
 800c00c:	ffff0000 	.word	0xffff0000

0800c010 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c010:	b480      	push	{r7}
 800c012:	b087      	sub	sp, #28
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	607a      	str	r2, [r7, #4]
 800c01a:	461a      	mov	r2, r3
 800c01c:	460b      	mov	r3, r1
 800c01e:	817b      	strh	r3, [r7, #10]
 800c020:	4613      	mov	r3, r2
 800c022:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b20      	cmp	r3, #32
 800c032:	f040 808d 	bne.w	800c150 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c036:	4b4a      	ldr	r3, [pc, #296]	; (800c160 <HAL_I2C_Master_Receive_IT+0x150>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	08db      	lsrs	r3, r3, #3
 800c03c:	4a49      	ldr	r2, [pc, #292]	; (800c164 <HAL_I2C_Master_Receive_IT+0x154>)
 800c03e:	fba2 2303 	umull	r2, r3, r2, r3
 800c042:	0a1a      	lsrs	r2, r3, #8
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	009a      	lsls	r2, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	3b01      	subs	r3, #1
 800c054:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d116      	bne.n	800c08a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2220      	movs	r2, #32
 800c066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c076:	f043 0220 	orr.w	r2, r3, #32
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e063      	b.n	800c152 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	2b02      	cmp	r3, #2
 800c096:	d0db      	beq.n	800c050 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d101      	bne.n	800c0a6 <HAL_I2C_Master_Receive_IT+0x96>
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e055      	b.n	800c152 <HAL_I2C_Master_Receive_IT+0x142>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d007      	beq.n	800c0cc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 0201 	orr.w	r2, r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2222      	movs	r2, #34	; 0x22
 800c0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2210      	movs	r2, #16
 800c0e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	893a      	ldrh	r2, [r7, #8]
 800c0fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c102:	b29a      	uxth	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4a17      	ldr	r2, [pc, #92]	; (800c168 <HAL_I2C_Master_Receive_IT+0x158>)
 800c10c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c10e:	897a      	ldrh	r2, [r7, #10]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c12a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c13a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c14a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	e000      	b.n	800c152 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800c150:	2302      	movs	r3, #2
  }
}
 800c152:	4618      	mov	r0, r3
 800c154:	371c      	adds	r7, #28
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	20000058 	.word	0x20000058
 800c164:	14f8b589 	.word	0x14f8b589
 800c168:	ffff0000 	.word	0xffff0000

0800c16c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	4613      	mov	r3, r2
 800c178:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b20      	cmp	r3, #32
 800c184:	d158      	bne.n	800c238 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <HAL_I2C_Slave_Transmit_IT+0x26>
 800c18c:	88fb      	ldrh	r3, [r7, #6]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e051      	b.n	800c23a <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d101      	bne.n	800c1a4 <HAL_I2C_Slave_Transmit_IT+0x38>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	e04a      	b.n	800c23a <HAL_I2C_Slave_Transmit_IT+0xce>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d007      	beq.n	800c1ca <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2221      	movs	r2, #33	; 0x21
 800c1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	88fa      	ldrh	r2, [r7, #6]
 800c1fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c200:	b29a      	uxth	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	4a0f      	ldr	r2, [pc, #60]	; (800c248 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c20a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c21a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c232:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	e000      	b.n	800c23a <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c238:	2302      	movs	r3, #2
  }
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	ffff0000 	.word	0xffff0000

0800c24c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c260:	b2db      	uxtb	r3, r3
 800c262:	2b20      	cmp	r3, #32
 800c264:	d158      	bne.n	800c318 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <HAL_I2C_Slave_Receive_IT+0x26>
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e051      	b.n	800c31a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d101      	bne.n	800c284 <HAL_I2C_Slave_Receive_IT+0x38>
 800c280:	2302      	movs	r3, #2
 800c282:	e04a      	b.n	800c31a <HAL_I2C_Slave_Receive_IT+0xce>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b01      	cmp	r3, #1
 800c298:	d007      	beq.n	800c2aa <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0201 	orr.w	r2, r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2b8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2222      	movs	r2, #34	; 0x22
 800c2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	68ba      	ldr	r2, [r7, #8]
 800c2d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	88fa      	ldrh	r2, [r7, #6]
 800c2da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	4a0f      	ldr	r2, [pc, #60]	; (800c328 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800c2ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2fa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	685a      	ldr	r2, [r3, #4]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c312:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	e000      	b.n	800c31a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c318:	2302      	movs	r3, #2
  }
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	ffff0000 	.word	0xffff0000

0800c32c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	607a      	str	r2, [r7, #4]
 800c336:	461a      	mov	r2, r3
 800c338:	460b      	mov	r3, r1
 800c33a:	817b      	strh	r3, [r7, #10]
 800c33c:	4613      	mov	r3, r2
 800c33e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b20      	cmp	r3, #32
 800c34e:	f040 810d 	bne.w	800c56c <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c352:	4b89      	ldr	r3, [pc, #548]	; (800c578 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	08db      	lsrs	r3, r3, #3
 800c358:	4a88      	ldr	r2, [pc, #544]	; (800c57c <HAL_I2C_Master_Transmit_DMA+0x250>)
 800c35a:	fba2 2303 	umull	r2, r3, r2, r3
 800c35e:	0a1a      	lsrs	r2, r3, #8
 800c360:	4613      	mov	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	009a      	lsls	r2, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	3b01      	subs	r3, #1
 800c370:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d116      	bne.n	800c3a6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2220      	movs	r2, #32
 800c382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2200      	movs	r2, #0
 800c38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c392:	f043 0220 	orr.w	r2, r3, #32
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e0e3      	b.n	800c56e <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d0db      	beq.n	800c36c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d101      	bne.n	800c3c2 <HAL_I2C_Master_Transmit_DMA+0x96>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e0d5      	b.n	800c56e <HAL_I2C_Master_Transmit_DMA+0x242>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d007      	beq.n	800c3e8 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 0201 	orr.w	r2, r2, #1
 800c3e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c3f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2221      	movs	r2, #33	; 0x21
 800c3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2210      	movs	r2, #16
 800c404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	893a      	ldrh	r2, [r7, #8]
 800c418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c41e:	b29a      	uxth	r2, r3
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	4a56      	ldr	r2, [pc, #344]	; (800c580 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c42a:	897a      	ldrh	r2, [r7, #10]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c434:	2b00      	cmp	r3, #0
 800c436:	d07b      	beq.n	800c530 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d02a      	beq.n	800c496 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c444:	4a4f      	ldr	r2, [pc, #316]	; (800c584 <HAL_I2C_Master_Transmit_DMA+0x258>)
 800c446:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44c:	4a4e      	ldr	r2, [pc, #312]	; (800c588 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800c44e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c454:	2200      	movs	r2, #0
 800c456:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45c:	2200      	movs	r2, #0
 800c45e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c464:	2200      	movs	r2, #0
 800c466:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c46c:	2200      	movs	r2, #0
 800c46e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	4619      	mov	r1, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3310      	adds	r3, #16
 800c480:	461a      	mov	r2, r3
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c486:	f7fb fc3a 	bl	8007cfe <HAL_DMA_Start_IT>
 800c48a:	4603      	mov	r3, r0
 800c48c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d139      	bne.n	800c508 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800c494:	e013      	b.n	800c4be <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2220      	movs	r2, #32
 800c49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e057      	b.n	800c56e <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c4d4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4e4:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4f4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	e02f      	b.n	800c568 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2220      	movs	r2, #32
 800c50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51c:	f043 0210 	orr.w	r2, r3, #16
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e01e      	b.n	800c56e <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c53e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c54e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c566:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800c568:	2300      	movs	r3, #0
 800c56a:	e000      	b.n	800c56e <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c56c:	2302      	movs	r3, #2
  }
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20000058 	.word	0x20000058
 800c57c:	14f8b589 	.word	0x14f8b589
 800c580:	ffff0000 	.word	0xffff0000
 800c584:	08010c31 	.word	0x08010c31
 800c588:	08010ddb 	.word	0x08010ddb

0800c58c <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	607a      	str	r2, [r7, #4]
 800c596:	461a      	mov	r2, r3
 800c598:	460b      	mov	r3, r1
 800c59a:	817b      	strh	r3, [r7, #10]
 800c59c:	4613      	mov	r3, r2
 800c59e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	f040 810d 	bne.w	800c7cc <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c5b2:	4b89      	ldr	r3, [pc, #548]	; (800c7d8 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	08db      	lsrs	r3, r3, #3
 800c5b8:	4a88      	ldr	r2, [pc, #544]	; (800c7dc <HAL_I2C_Master_Receive_DMA+0x250>)
 800c5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c5be:	0a1a      	lsrs	r2, r3, #8
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	009a      	lsls	r2, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d116      	bne.n	800c606 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2220      	movs	r2, #32
 800c5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f2:	f043 0220 	orr.w	r2, r3, #32
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	e0e3      	b.n	800c7ce <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	699b      	ldr	r3, [r3, #24]
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b02      	cmp	r3, #2
 800c612:	d0db      	beq.n	800c5cc <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d101      	bne.n	800c622 <HAL_I2C_Master_Receive_DMA+0x96>
 800c61e:	2302      	movs	r3, #2
 800c620:	e0d5      	b.n	800c7ce <HAL_I2C_Master_Receive_DMA+0x242>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2201      	movs	r2, #1
 800c626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b01      	cmp	r3, #1
 800c636:	d007      	beq.n	800c648 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f042 0201 	orr.w	r2, r2, #1
 800c646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2222      	movs	r2, #34	; 0x22
 800c65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2210      	movs	r2, #16
 800c664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	893a      	ldrh	r2, [r7, #8]
 800c678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c67e:	b29a      	uxth	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	4a56      	ldr	r2, [pc, #344]	; (800c7e0 <HAL_I2C_Master_Receive_DMA+0x254>)
 800c688:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c68a:	897a      	ldrh	r2, [r7, #10]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c694:	2b00      	cmp	r3, #0
 800c696:	d07b      	beq.n	800c790 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d02a      	beq.n	800c6f6 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a4:	4a4f      	ldr	r2, [pc, #316]	; (800c7e4 <HAL_I2C_Master_Receive_DMA+0x258>)
 800c6a6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	4a4e      	ldr	r2, [pc, #312]	; (800c7e8 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800c6ae:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6bc:	2200      	movs	r2, #0
 800c6be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3310      	adds	r3, #16
 800c6da:	4619      	mov	r1, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6e6:	f7fb fb0a 	bl	8007cfe <HAL_DMA_Start_IT>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c6ee:	7dfb      	ldrb	r3, [r7, #23]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d139      	bne.n	800c768 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800c6f4:	e013      	b.n	800c71e <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2220      	movs	r2, #32
 800c6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2200      	movs	r2, #0
 800c716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e057      	b.n	800c7ce <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c72c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c73c:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c754:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c764:	605a      	str	r2, [r3, #4]
 800c766:	e02f      	b.n	800c7c8 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2220      	movs	r2, #32
 800c76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77c:	f043 0210 	orr.w	r2, r3, #16
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2200      	movs	r2, #0
 800c788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e01e      	b.n	800c7ce <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c7a6:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c7b6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7c6:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e000      	b.n	800c7ce <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c7cc:	2302      	movs	r3, #2
  }
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3718      	adds	r7, #24
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	20000058 	.word	0x20000058
 800c7dc:	14f8b589 	.word	0x14f8b589
 800c7e0:	ffff0000 	.word	0xffff0000
 800c7e4:	08010c31 	.word	0x08010c31
 800c7e8:	08010ddb 	.word	0x08010ddb

0800c7ec <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c800:	b2db      	uxtb	r3, r3
 800c802:	2b20      	cmp	r3, #32
 800c804:	f040 80b8 	bne.w	800c978 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800c80e:	88fb      	ldrh	r3, [r7, #6]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	e0b0      	b.n	800c97a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d101      	bne.n	800c826 <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800c822:	2302      	movs	r3, #2
 800c824:	e0a9      	b.n	800c97a <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d007      	beq.n	800c84c <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f042 0201 	orr.w	r2, r2, #1
 800c84a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c85a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2221      	movs	r2, #33	; 0x21
 800c860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2220      	movs	r2, #32
 800c868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	68ba      	ldr	r2, [r7, #8]
 800c876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	88fa      	ldrh	r2, [r7, #6]
 800c87c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c882:	b29a      	uxth	r2, r3
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4a3e      	ldr	r2, [pc, #248]	; (800c984 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800c88c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c892:	2b00      	cmp	r3, #0
 800c894:	d02a      	beq.n	800c8ec <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c89a:	4a3b      	ldr	r2, [pc, #236]	; (800c988 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800c89c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a2:	4a3a      	ldr	r2, [pc, #232]	; (800c98c <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800c8a4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3310      	adds	r3, #16
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8dc:	f7fb fa0f 	bl	8007cfe <HAL_DMA_Start_IT>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d132      	bne.n	800c950 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800c8ea:	e013      	b.n	800c914 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2228      	movs	r2, #40	; 0x28
 800c8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c900:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e032      	b.n	800c97a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c922:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c93a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	685a      	ldr	r2, [r3, #4]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c94a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	e014      	b.n	800c97a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2220      	movs	r2, #32
 800c954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c964:	f043 0210 	orr.w	r2, r3, #16
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e000      	b.n	800c97a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c978:	2302      	movs	r3, #2
  }
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	ffff0000 	.word	0xffff0000
 800c988:	08010c31 	.word	0x08010c31
 800c98c:	08010ddb 	.word	0x08010ddb

0800c990 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4613      	mov	r3, r2
 800c99c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	2b20      	cmp	r3, #32
 800c9a8:	f040 80b8 	bne.w	800cb1c <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d002      	beq.n	800c9b8 <HAL_I2C_Slave_Receive_DMA+0x28>
 800c9b2:	88fb      	ldrh	r3, [r7, #6]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d101      	bne.n	800c9bc <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e0b0      	b.n	800cb1e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d101      	bne.n	800c9ca <HAL_I2C_Slave_Receive_DMA+0x3a>
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	e0a9      	b.n	800cb1e <HAL_I2C_Slave_Receive_DMA+0x18e>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d007      	beq.n	800c9f0 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f042 0201 	orr.w	r2, r2, #1
 800c9ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2222      	movs	r2, #34	; 0x22
 800ca04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2220      	movs	r2, #32
 800ca0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	88fa      	ldrh	r2, [r7, #6]
 800ca20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4a3e      	ldr	r2, [pc, #248]	; (800cb28 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800ca30:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d02a      	beq.n	800ca90 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	4a3b      	ldr	r2, [pc, #236]	; (800cb2c <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800ca40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca46:	4a3a      	ldr	r2, [pc, #232]	; (800cb30 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800ca48:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4e:	2200      	movs	r2, #0
 800ca50:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca56:	2200      	movs	r2, #0
 800ca58:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5e:	2200      	movs	r2, #0
 800ca60:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca66:	2200      	movs	r2, #0
 800ca68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3310      	adds	r3, #16
 800ca74:	4619      	mov	r1, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca80:	f7fb f93d 	bl	8007cfe <HAL_DMA_Start_IT>
 800ca84:	4603      	mov	r3, r0
 800ca86:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d132      	bne.n	800caf4 <HAL_I2C_Slave_Receive_DMA+0x164>
 800ca8e:	e013      	b.n	800cab8 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2228      	movs	r2, #40	; 0x28
 800ca94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	e032      	b.n	800cb1e <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cac6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cade:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	685a      	ldr	r2, [r3, #4]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800caee:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	e014      	b.n	800cb1e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2220      	movs	r2, #32
 800caf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb08:	f043 0210 	orr.w	r2, r3, #16
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e000      	b.n	800cb1e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800cb1c:	2302      	movs	r3, #2
  }
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	ffff0000 	.word	0xffff0000
 800cb2c:	08010c31 	.word	0x08010c31
 800cb30:	08010ddb 	.word	0x08010ddb

0800cb34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	4611      	mov	r1, r2
 800cb40:	461a      	mov	r2, r3
 800cb42:	4603      	mov	r3, r0
 800cb44:	817b      	strh	r3, [r7, #10]
 800cb46:	460b      	mov	r3, r1
 800cb48:	813b      	strh	r3, [r7, #8]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb4e:	f7f9 fe6d 	bl	800682c <HAL_GetTick>
 800cb52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	2b20      	cmp	r3, #32
 800cb5e:	f040 80d9 	bne.w	800cd14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	2319      	movs	r3, #25
 800cb68:	2201      	movs	r2, #1
 800cb6a:	496d      	ldr	r1, [pc, #436]	; (800cd20 <HAL_I2C_Mem_Write+0x1ec>)
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f004 fa19 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cb78:	2302      	movs	r3, #2
 800cb7a:	e0cc      	b.n	800cd16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d101      	bne.n	800cb8a <HAL_I2C_Mem_Write+0x56>
 800cb86:	2302      	movs	r3, #2
 800cb88:	e0c5      	b.n	800cd16 <HAL_I2C_Mem_Write+0x1e2>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d007      	beq.n	800cbb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f042 0201 	orr.w	r2, r2, #1
 800cbae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2221      	movs	r2, #33	; 0x21
 800cbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2240      	movs	r2, #64	; 0x40
 800cbcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6a3a      	ldr	r2, [r7, #32]
 800cbda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cbe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbe6:	b29a      	uxth	r2, r3
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	4a4d      	ldr	r2, [pc, #308]	; (800cd24 <HAL_I2C_Mem_Write+0x1f0>)
 800cbf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cbf2:	88f8      	ldrh	r0, [r7, #6]
 800cbf4:	893a      	ldrh	r2, [r7, #8]
 800cbf6:	8979      	ldrh	r1, [r7, #10]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	4603      	mov	r3, r0
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f003 fe96 	bl	8010934 <I2C_RequestMemoryWrite>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d052      	beq.n	800ccb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e081      	b.n	800cd16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f004 fa9a 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00d      	beq.n	800cc3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	d107      	bne.n	800cc3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e06b      	b.n	800cd16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	3b01      	subs	r3, #1
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d11b      	bne.n	800ccb4 <HAL_I2C_Mem_Write+0x180>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d017      	beq.n	800ccb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc88:	781a      	ldrb	r2, [r3, #0]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	3b01      	subs	r3, #1
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1aa      	bne.n	800cc12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f004 fa86 	bl	80111d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00d      	beq.n	800cce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd0:	2b04      	cmp	r3, #4
 800ccd2:	d107      	bne.n	800cce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e016      	b.n	800cd16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2220      	movs	r2, #32
 800ccfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	e000      	b.n	800cd16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800cd14:	2302      	movs	r3, #2
  }
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	00100002 	.word	0x00100002
 800cd24:	ffff0000 	.word	0xffff0000

0800cd28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08c      	sub	sp, #48	; 0x30
 800cd2c:	af02      	add	r7, sp, #8
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	4608      	mov	r0, r1
 800cd32:	4611      	mov	r1, r2
 800cd34:	461a      	mov	r2, r3
 800cd36:	4603      	mov	r3, r0
 800cd38:	817b      	strh	r3, [r7, #10]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	813b      	strh	r3, [r7, #8]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd42:	f7f9 fd73 	bl	800682c <HAL_GetTick>
 800cd46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b20      	cmp	r3, #32
 800cd52:	f040 8208 	bne.w	800d166 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	2319      	movs	r3, #25
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	497b      	ldr	r1, [pc, #492]	; (800cf4c <HAL_I2C_Mem_Read+0x224>)
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f004 f91f 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e1fb      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d101      	bne.n	800cd7e <HAL_I2C_Mem_Read+0x56>
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	e1f4      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d007      	beq.n	800cda4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f042 0201 	orr.w	r2, r2, #1
 800cda2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2222      	movs	r2, #34	; 0x22
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2240      	movs	r2, #64	; 0x40
 800cdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cdd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	4a5b      	ldr	r2, [pc, #364]	; (800cf50 <HAL_I2C_Mem_Read+0x228>)
 800cde4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cde6:	88f8      	ldrh	r0, [r7, #6]
 800cde8:	893a      	ldrh	r2, [r7, #8]
 800cdea:	8979      	ldrh	r1, [r7, #10]
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f003 fe32 	bl	8010a60 <I2C_RequestMemoryRead>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e1b0      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d113      	bne.n	800ce36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce0e:	2300      	movs	r3, #0
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	617b      	str	r3, [r7, #20]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	e184      	b.n	800d140 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d11b      	bne.n	800ce76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce4e:	2300      	movs	r3, #0
 800ce50:	61bb      	str	r3, [r7, #24]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	61bb      	str	r3, [r7, #24]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	61bb      	str	r3, [r7, #24]
 800ce62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	e164      	b.n	800d140 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d11b      	bne.n	800ceb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61fb      	str	r3, [r7, #28]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	61fb      	str	r3, [r7, #28]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	61fb      	str	r3, [r7, #28]
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	e144      	b.n	800d140 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	623b      	str	r3, [r7, #32]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	623b      	str	r3, [r7, #32]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	623b      	str	r3, [r7, #32]
 800ceca:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800cecc:	e138      	b.n	800d140 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ced2:	2b03      	cmp	r3, #3
 800ced4:	f200 80f1 	bhi.w	800d0ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d123      	bne.n	800cf28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f004 fa25 	bl	8011334 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	e139      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefe:	b2d2      	uxtb	r2, r2
 800cf00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf06:	1c5a      	adds	r2, r3, #1
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf10:	3b01      	subs	r3, #1
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf26:	e10b      	b.n	800d140 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d14e      	bne.n	800cfce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	2200      	movs	r2, #0
 800cf38:	4906      	ldr	r1, [pc, #24]	; (800cf54 <HAL_I2C_Mem_Read+0x22c>)
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f004 f832 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d008      	beq.n	800cf58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e10e      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
 800cf4a:	bf00      	nop
 800cf4c:	00100002 	.word	0x00100002
 800cf50:	ffff0000 	.word	0xffff0000
 800cf54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	691a      	ldr	r2, [r3, #16]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf72:	b2d2      	uxtb	r2, r2
 800cf74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf84:	3b01      	subs	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	3b01      	subs	r3, #1
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	691a      	ldr	r2, [r3, #16]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa4:	b2d2      	uxtb	r2, r2
 800cfa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cfcc:	e0b8      	b.n	800d140 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	4966      	ldr	r1, [pc, #408]	; (800d170 <HAL_I2C_Mem_Read+0x448>)
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f003 ffe3 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e0bf      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	691a      	ldr	r2, [r3, #16]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d014:	3b01      	subs	r3, #1
 800d016:	b29a      	uxth	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d020:	b29b      	uxth	r3, r3
 800d022:	3b01      	subs	r3, #1
 800d024:	b29a      	uxth	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	2200      	movs	r2, #0
 800d032:	494f      	ldr	r1, [pc, #316]	; (800d170 <HAL_I2C_Mem_Read+0x448>)
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f003 ffb5 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e091      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	691a      	ldr	r2, [r3, #16]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05e:	b2d2      	uxtb	r2, r2
 800d060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d066:	1c5a      	adds	r2, r3, #1
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d070:	3b01      	subs	r3, #1
 800d072:	b29a      	uxth	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	3b01      	subs	r3, #1
 800d080:	b29a      	uxth	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	691a      	ldr	r2, [r3, #16]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d090:	b2d2      	uxtb	r2, r2
 800d092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0b8:	e042      	b.n	800d140 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f004 f938 	bl	8011334 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e04c      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	691a      	ldr	r2, [r3, #16]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d8:	b2d2      	uxtb	r2, r2
 800d0da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	f003 0304 	and.w	r3, r3, #4
 800d10a:	2b04      	cmp	r3, #4
 800d10c:	d118      	bne.n	800d140 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	691a      	ldr	r2, [r3, #16]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d118:	b2d2      	uxtb	r2, r2
 800d11a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d12a:	3b01      	subs	r3, #1
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d136:	b29b      	uxth	r3, r3
 800d138:	3b01      	subs	r3, #1
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d144:	2b00      	cmp	r3, #0
 800d146:	f47f aec2 	bne.w	800cece <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2220      	movs	r2, #32
 800d14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	e000      	b.n	800d168 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d166:	2302      	movs	r3, #2
  }
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3728      	adds	r7, #40	; 0x28
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	00010004 	.word	0x00010004

0800d174 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	4608      	mov	r0, r1
 800d17e:	4611      	mov	r1, r2
 800d180:	461a      	mov	r2, r3
 800d182:	4603      	mov	r3, r0
 800d184:	817b      	strh	r3, [r7, #10]
 800d186:	460b      	mov	r3, r1
 800d188:	813b      	strh	r3, [r7, #8]
 800d18a:	4613      	mov	r3, r2
 800d18c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d18e:	2300      	movs	r3, #0
 800d190:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b20      	cmp	r3, #32
 800d19c:	f040 808e 	bne.w	800d2bc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d1a0:	4b4a      	ldr	r3, [pc, #296]	; (800d2cc <HAL_I2C_Mem_Write_IT+0x158>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	08db      	lsrs	r3, r3, #3
 800d1a6:	4a4a      	ldr	r2, [pc, #296]	; (800d2d0 <HAL_I2C_Mem_Write_IT+0x15c>)
 800d1a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ac:	0a1a      	lsrs	r2, r3, #8
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	009a      	lsls	r2, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d116      	bne.n	800d1f4 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2220      	movs	r2, #32
 800d1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e0:	f043 0220 	orr.w	r2, r3, #32
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e064      	b.n	800d2be <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	f003 0302 	and.w	r3, r3, #2
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d0db      	beq.n	800d1ba <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d101      	bne.n	800d210 <HAL_I2C_Mem_Write_IT+0x9c>
 800d20c:	2302      	movs	r3, #2
 800d20e:	e056      	b.n	800d2be <HAL_I2C_Mem_Write_IT+0x14a>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b01      	cmp	r3, #1
 800d224:	d007      	beq.n	800d236 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f042 0201 	orr.w	r2, r2, #1
 800d234:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d244:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2221      	movs	r2, #33	; 0x21
 800d24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2240      	movs	r2, #64	; 0x40
 800d252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6a3a      	ldr	r2, [r7, #32]
 800d260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4a17      	ldr	r2, [pc, #92]	; (800d2d4 <HAL_I2C_Mem_Write_IT+0x160>)
 800d276:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d278:	897a      	ldrh	r2, [r7, #10]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d27e:	893a      	ldrh	r2, [r7, #8]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d284:	88fa      	ldrh	r2, [r7, #6]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d29e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d2b6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e000      	b.n	800d2be <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800d2bc:	2302      	movs	r3, #2
  }
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	371c      	adds	r7, #28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	20000058 	.word	0x20000058
 800d2d0:	14f8b589 	.word	0x14f8b589
 800d2d4:	ffff0000 	.word	0xffff0000

0800d2d8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	817b      	strh	r3, [r7, #10]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	813b      	strh	r3, [r7, #8]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	2b20      	cmp	r3, #32
 800d300:	f040 809a 	bne.w	800d438 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d304:	4b50      	ldr	r3, [pc, #320]	; (800d448 <HAL_I2C_Mem_Read_IT+0x170>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	08db      	lsrs	r3, r3, #3
 800d30a:	4a50      	ldr	r2, [pc, #320]	; (800d44c <HAL_I2C_Mem_Read_IT+0x174>)
 800d30c:	fba2 2303 	umull	r2, r3, r2, r3
 800d310:	0a1a      	lsrs	r2, r3, #8
 800d312:	4613      	mov	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	009a      	lsls	r2, r3, #2
 800d31a:	4413      	add	r3, r2
 800d31c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	3b01      	subs	r3, #1
 800d322:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d116      	bne.n	800d358 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2220      	movs	r2, #32
 800d334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2200      	movs	r2, #0
 800d33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d344:	f043 0220 	orr.w	r2, r3, #32
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	e070      	b.n	800d43a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	f003 0302 	and.w	r3, r3, #2
 800d362:	2b02      	cmp	r3, #2
 800d364:	d0db      	beq.n	800d31e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d101      	bne.n	800d374 <HAL_I2C_Mem_Read_IT+0x9c>
 800d370:	2302      	movs	r3, #2
 800d372:	e062      	b.n	800d43a <HAL_I2C_Mem_Read_IT+0x162>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	2b01      	cmp	r3, #1
 800d388:	d007      	beq.n	800d39a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f042 0201 	orr.w	r2, r2, #1
 800d398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3a8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2222      	movs	r2, #34	; 0x22
 800d3ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2240      	movs	r2, #64	; 0x40
 800d3b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6a3a      	ldr	r2, [r7, #32]
 800d3c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	4a1d      	ldr	r2, [pc, #116]	; (800d450 <HAL_I2C_Mem_Read_IT+0x178>)
 800d3da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d3dc:	897a      	ldrh	r2, [r7, #10]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d3e2:	893a      	ldrh	r2, [r7, #8]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d3e8:	88fa      	ldrh	r2, [r7, #6]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d402:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d412:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d420:	2b00      	cmp	r3, #0
 800d422:	d007      	beq.n	800d434 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d432:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	e000      	b.n	800d43a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800d438:	2302      	movs	r3, #2
  }
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	371c      	adds	r7, #28
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	20000058 	.word	0x20000058
 800d44c:	14f8b589 	.word	0x14f8b589
 800d450:	ffff0000 	.word	0xffff0000

0800d454 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08a      	sub	sp, #40	; 0x28
 800d458:	af02      	add	r7, sp, #8
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	4608      	mov	r0, r1
 800d45e:	4611      	mov	r1, r2
 800d460:	461a      	mov	r2, r3
 800d462:	4603      	mov	r3, r0
 800d464:	817b      	strh	r3, [r7, #10]
 800d466:	460b      	mov	r3, r1
 800d468:	813b      	strh	r3, [r7, #8]
 800d46a:	4613      	mov	r3, r2
 800d46c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d46e:	2300      	movs	r3, #0
 800d470:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d472:	f7f9 f9db 	bl	800682c <HAL_GetTick>
 800d476:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b20      	cmp	r3, #32
 800d482:	f040 8145 	bne.w	800d710 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d486:	4b9d      	ldr	r3, [pc, #628]	; (800d6fc <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	08db      	lsrs	r3, r3, #3
 800d48c:	4a9c      	ldr	r2, [pc, #624]	; (800d700 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800d48e:	fba2 2303 	umull	r2, r3, r2, r3
 800d492:	0a1a      	lsrs	r2, r3, #8
 800d494:	4613      	mov	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	4413      	add	r3, r2
 800d49a:	009a      	lsls	r2, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d116      	bne.n	800d4da <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2220      	movs	r2, #32
 800d4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c6:	f043 0220 	orr.w	r2, r3, #32
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e11b      	b.n	800d712 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	f003 0302 	and.w	r3, r3, #2
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d0db      	beq.n	800d4a0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d101      	bne.n	800d4f6 <HAL_I2C_Mem_Write_DMA+0xa2>
 800d4f2:	2302      	movs	r3, #2
 800d4f4:	e10d      	b.n	800d712 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d007      	beq.n	800d51c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f042 0201 	orr.w	r2, r2, #1
 800d51a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d52a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2221      	movs	r2, #33	; 0x21
 800d530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2240      	movs	r2, #64	; 0x40
 800d538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2200      	movs	r2, #0
 800d540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d54c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d552:	b29a      	uxth	r2, r3
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	4a6a      	ldr	r2, [pc, #424]	; (800d704 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800d55c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d55e:	897a      	ldrh	r2, [r7, #10]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d564:	893a      	ldrh	r2, [r7, #8]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d56a:	88fa      	ldrh	r2, [r7, #6]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 80a9 	beq.w	800d6d2 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d584:	2b00      	cmp	r3, #0
 800d586:	d02a      	beq.n	800d5de <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58c:	4a5e      	ldr	r2, [pc, #376]	; (800d708 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800d58e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d594:	4a5d      	ldr	r2, [pc, #372]	; (800d70c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800d596:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59c:	2200      	movs	r2, #0
 800d59e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	3310      	adds	r3, #16
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ce:	f7fa fb96 	bl	8007cfe <HAL_DMA_Start_IT>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d5d6:	7efb      	ldrb	r3, [r7, #27]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d166      	bne.n	800d6aa <HAL_I2C_Mem_Write_DMA+0x256>
 800d5dc:	e013      	b.n	800d606 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2220      	movs	r2, #32
 800d5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d602:	2301      	movs	r3, #1
 800d604:	e085      	b.n	800d712 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d606:	88f8      	ldrh	r0, [r7, #6]
 800d608:	893a      	ldrh	r2, [r7, #8]
 800d60a:	8979      	ldrh	r1, [r7, #10]
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	9301      	str	r3, [sp, #4]
 800d610:	2323      	movs	r3, #35	; 0x23
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	4603      	mov	r3, r0
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f003 f98c 	bl	8010934 <I2C_RequestMemoryWrite>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d022      	beq.n	800d668 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d626:	4618      	mov	r0, r3
 800d628:	f7fa fc31 	bl	8007e8e <HAL_DMA_Abort_IT>
 800d62c:	4603      	mov	r3, r0
 800d62e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d634:	2200      	movs	r2, #0
 800d636:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d646:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2200      	movs	r2, #0
 800d652:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f022 0201 	bic.w	r2, r2, #1
 800d662:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e054      	b.n	800d712 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d668:	2300      	movs	r3, #0
 800d66a:	613b      	str	r3, [r7, #16]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	613b      	str	r3, [r7, #16]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	613b      	str	r3, [r7, #16]
 800d67c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d694:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6a4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e033      	b.n	800d712 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	f043 0210 	orr.w	r2, r3, #16
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e01f      	b.n	800d712 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e00b      	b.n	800d712 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d6fa:	bf00      	nop
 800d6fc:	20000058 	.word	0x20000058
 800d700:	14f8b589 	.word	0x14f8b589
 800d704:	ffff0000 	.word	0xffff0000
 800d708:	08010c31 	.word	0x08010c31
 800d70c:	08010ddb 	.word	0x08010ddb
    }
  }
  else
  {
    return HAL_BUSY;
 800d710:	2302      	movs	r3, #2
  }
}
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b08c      	sub	sp, #48	; 0x30
 800d71e:	af02      	add	r7, sp, #8
 800d720:	60f8      	str	r0, [r7, #12]
 800d722:	4608      	mov	r0, r1
 800d724:	4611      	mov	r1, r2
 800d726:	461a      	mov	r2, r3
 800d728:	4603      	mov	r3, r0
 800d72a:	817b      	strh	r3, [r7, #10]
 800d72c:	460b      	mov	r3, r1
 800d72e:	813b      	strh	r3, [r7, #8]
 800d730:	4613      	mov	r3, r2
 800d732:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d734:	f7f9 f87a 	bl	800682c <HAL_GetTick>
 800d738:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d73a:	2300      	movs	r3, #0
 800d73c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b20      	cmp	r3, #32
 800d748:	f040 8175 	bne.w	800da36 <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d74c:	4b94      	ldr	r3, [pc, #592]	; (800d9a0 <HAL_I2C_Mem_Read_DMA+0x286>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	08db      	lsrs	r3, r3, #3
 800d752:	4a94      	ldr	r2, [pc, #592]	; (800d9a4 <HAL_I2C_Mem_Read_DMA+0x28a>)
 800d754:	fba2 2303 	umull	r2, r3, r2, r3
 800d758:	0a1a      	lsrs	r2, r3, #8
 800d75a:	4613      	mov	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	009a      	lsls	r2, r3, #2
 800d762:	4413      	add	r3, r2
 800d764:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	3b01      	subs	r3, #1
 800d76a:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d116      	bne.n	800d7a0 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2220      	movs	r2, #32
 800d77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78c:	f043 0220 	orr.w	r2, r3, #32
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e14b      	b.n	800da38 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	f003 0302 	and.w	r3, r3, #2
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d0db      	beq.n	800d766 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d101      	bne.n	800d7bc <HAL_I2C_Mem_Read_DMA+0xa2>
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	e13d      	b.n	800da38 <HAL_I2C_Mem_Read_DMA+0x31e>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d007      	beq.n	800d7e2 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f042 0201 	orr.w	r2, r2, #1
 800d7e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d7f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2222      	movs	r2, #34	; 0x22
 800d7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2240      	movs	r2, #64	; 0x40
 800d7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d80c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d818:	b29a      	uxth	r2, r3
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4a61      	ldr	r2, [pc, #388]	; (800d9a8 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800d822:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d824:	897a      	ldrh	r2, [r7, #10]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d82a:	893a      	ldrh	r2, [r7, #8]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d830:	88fa      	ldrh	r2, [r7, #6]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2200      	movs	r2, #0
 800d83a:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 80cb 	beq.w	800d9dc <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d02d      	beq.n	800d8aa <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d852:	4a56      	ldr	r2, [pc, #344]	; (800d9ac <HAL_I2C_Mem_Read_DMA+0x292>)
 800d854:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	4a55      	ldr	r2, [pc, #340]	; (800d9b0 <HAL_I2C_Mem_Read_DMA+0x296>)
 800d85c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d862:	2200      	movs	r2, #0
 800d864:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86a:	2200      	movs	r2, #0
 800d86c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	2200      	movs	r2, #0
 800d874:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87a:	2200      	movs	r2, #0
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3310      	adds	r3, #16
 800d888:	4619      	mov	r1, r3
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88e:	461a      	mov	r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d894:	f7fa fa33 	bl	8007cfe <HAL_DMA_Start_IT>
 800d898:	4603      	mov	r3, r0
 800d89a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d89e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f040 8086 	bne.w	800d9b4 <HAL_I2C_Mem_Read_DMA+0x29a>
 800d8a8:	e013      	b.n	800d8d2 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2220      	movs	r2, #32
 800d8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e0b2      	b.n	800da38 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d8d2:	88f8      	ldrh	r0, [r7, #6]
 800d8d4:	893a      	ldrh	r2, [r7, #8]
 800d8d6:	8979      	ldrh	r1, [r7, #10]
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	2323      	movs	r3, #35	; 0x23
 800d8de:	9300      	str	r3, [sp, #0]
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f003 f8bc 	bl	8010a60 <I2C_RequestMemoryRead>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d023      	beq.n	800d936 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fa facb 	bl	8007e8e <HAL_DMA_Abort_IT>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d902:	2200      	movs	r2, #0
 800d904:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d914:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f022 0201 	bic.w	r2, r2, #1
 800d930:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	e080      	b.n	800da38 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d108      	bne.n	800d950 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	e007      	b.n	800d960 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d95e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d960:	2300      	movs	r3, #0
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	685a      	ldr	r2, [r3, #4]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d98c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	685a      	ldr	r2, [r3, #4]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	e048      	b.n	800da32 <HAL_I2C_Mem_Read_DMA+0x318>
 800d9a0:	20000058 	.word	0x20000058
 800d9a4:	14f8b589 	.word	0x14f8b589
 800d9a8:	ffff0000 	.word	0xffff0000
 800d9ac:	08010c31 	.word	0x08010c31
 800d9b0:	08010ddb 	.word	0x08010ddb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2220      	movs	r2, #32
 800d9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c8:	f043 0210 	orr.w	r2, r3, #16
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e02d      	b.n	800da38 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d9dc:	88f8      	ldrh	r0, [r7, #6]
 800d9de:	893a      	ldrh	r2, [r7, #8]
 800d9e0:	8979      	ldrh	r1, [r7, #10]
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	2323      	movs	r3, #35	; 0x23
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f003 f837 	bl	8010a60 <I2C_RequestMemoryRead>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e01d      	b.n	800da38 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	61bb      	str	r3, [r7, #24]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	61bb      	str	r3, [r7, #24]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	61bb      	str	r3, [r7, #24]
 800da10:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da20:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2220      	movs	r2, #32
 800da26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	e000      	b.n	800da38 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800da36:	2302      	movs	r3, #2
  }
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3728      	adds	r7, #40	; 0x28
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08a      	sub	sp, #40	; 0x28
 800da44:	af02      	add	r7, sp, #8
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	607a      	str	r2, [r7, #4]
 800da4a:	603b      	str	r3, [r7, #0]
 800da4c:	460b      	mov	r3, r1
 800da4e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800da50:	f7f8 feec 	bl	800682c <HAL_GetTick>
 800da54:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800da56:	2301      	movs	r3, #1
 800da58:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b20      	cmp	r3, #32
 800da64:	f040 8111 	bne.w	800dc8a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	2319      	movs	r3, #25
 800da6e:	2201      	movs	r2, #1
 800da70:	4988      	ldr	r1, [pc, #544]	; (800dc94 <HAL_I2C_IsDeviceReady+0x254>)
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f003 fa96 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800da7e:	2302      	movs	r3, #2
 800da80:	e104      	b.n	800dc8c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d101      	bne.n	800da90 <HAL_I2C_IsDeviceReady+0x50>
 800da8c:	2302      	movs	r3, #2
 800da8e:	e0fd      	b.n	800dc8c <HAL_I2C_IsDeviceReady+0x24c>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d007      	beq.n	800dab6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f042 0201 	orr.w	r2, r2, #1
 800dab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2224      	movs	r2, #36	; 0x24
 800daca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2200      	movs	r2, #0
 800dad2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	4a70      	ldr	r2, [pc, #448]	; (800dc98 <HAL_I2C_IsDeviceReady+0x258>)
 800dad8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dae8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f003 fa54 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00d      	beq.n	800db1e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db10:	d103      	bne.n	800db1a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db18:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800db1a:	2303      	movs	r3, #3
 800db1c:	e0b6      	b.n	800dc8c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800db1e:	897b      	ldrh	r3, [r7, #10]
 800db20:	b2db      	uxtb	r3, r3
 800db22:	461a      	mov	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800db2c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800db2e:	f7f8 fe7d 	bl	800682c <HAL_GetTick>
 800db32:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	f003 0302 	and.w	r3, r3, #2
 800db3e:	2b02      	cmp	r3, #2
 800db40:	bf0c      	ite	eq
 800db42:	2301      	moveq	r3, #1
 800db44:	2300      	movne	r3, #0
 800db46:	b2db      	uxtb	r3, r3
 800db48:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db58:	bf0c      	ite	eq
 800db5a:	2301      	moveq	r3, #1
 800db5c:	2300      	movne	r3, #0
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800db62:	e025      	b.n	800dbb0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800db64:	f7f8 fe62 	bl	800682c <HAL_GetTick>
 800db68:	4602      	mov	r2, r0
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	1ad3      	subs	r3, r2, r3
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	429a      	cmp	r2, r3
 800db72:	d302      	bcc.n	800db7a <HAL_I2C_IsDeviceReady+0x13a>
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d103      	bne.n	800db82 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	22a0      	movs	r2, #160	; 0xa0
 800db7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	f003 0302 	and.w	r3, r3, #2
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	bf0c      	ite	eq
 800db90:	2301      	moveq	r3, #1
 800db92:	2300      	movne	r3, #0
 800db94:	b2db      	uxtb	r3, r3
 800db96:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	695b      	ldr	r3, [r3, #20]
 800db9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dba6:	bf0c      	ite	eq
 800dba8:	2301      	moveq	r3, #1
 800dbaa:	2300      	movne	r3, #0
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2ba0      	cmp	r3, #160	; 0xa0
 800dbba:	d005      	beq.n	800dbc8 <HAL_I2C_IsDeviceReady+0x188>
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d102      	bne.n	800dbc8 <HAL_I2C_IsDeviceReady+0x188>
 800dbc2:	7dbb      	ldrb	r3, [r7, #22]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d0cd      	beq.n	800db64 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2220      	movs	r2, #32
 800dbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	f003 0302 	and.w	r3, r3, #2
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d129      	bne.n	800dc32 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbee:	2300      	movs	r3, #0
 800dbf0:	613b      	str	r3, [r7, #16]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	695b      	ldr	r3, [r3, #20]
 800dbf8:	613b      	str	r3, [r7, #16]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	613b      	str	r3, [r7, #16]
 800dc02:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	2319      	movs	r3, #25
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	4921      	ldr	r1, [pc, #132]	; (800dc94 <HAL_I2C_IsDeviceReady+0x254>)
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f003 f9c8 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d001      	beq.n	800dc1e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e036      	b.n	800dc8c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2220      	movs	r2, #32
 800dc22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	e02c      	b.n	800dc8c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc40:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dc4a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	2319      	movs	r3, #25
 800dc52:	2201      	movs	r2, #1
 800dc54:	490f      	ldr	r1, [pc, #60]	; (800dc94 <HAL_I2C_IsDeviceReady+0x254>)
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f003 f9a4 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e012      	b.n	800dc8c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	f4ff af32 	bcc.w	800dada <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2220      	movs	r2, #32
 800dc7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e000      	b.n	800dc8c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800dc8a:	2302      	movs	r3, #2
  }
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3720      	adds	r7, #32
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	00100002 	.word	0x00100002
 800dc98:	ffff0000 	.word	0xffff0000

0800dc9c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b087      	sub	sp, #28
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	607a      	str	r2, [r7, #4]
 800dca6:	461a      	mov	r2, r3
 800dca8:	460b      	mov	r3, r1
 800dcaa:	817b      	strh	r3, [r7, #10]
 800dcac:	4613      	mov	r3, r2
 800dcae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	2b20      	cmp	r3, #32
 800dcc2:	f040 80a6 	bne.w	800de12 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcd4:	d005      	beq.n	800dce2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dcd6:	6a3b      	ldr	r3, [r7, #32]
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	d002      	beq.n	800dce2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d130      	bne.n	800dd44 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dce2:	4b4f      	ldr	r3, [pc, #316]	; (800de20 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	08db      	lsrs	r3, r3, #3
 800dce8:	4a4e      	ldr	r2, [pc, #312]	; (800de24 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800dcea:	fba2 2303 	umull	r2, r3, r2, r3
 800dcee:	0a1a      	lsrs	r2, r3, #8
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	009a      	lsls	r2, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d116      	bne.n	800dd36 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2220      	movs	r2, #32
 800dd12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd22:	f043 0220 	orr.w	r2, r3, #32
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e06e      	b.n	800de14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	f003 0302 	and.w	r3, r3, #2
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d0db      	beq.n	800dcfc <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d101      	bne.n	800dd52 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800dd4e:	2302      	movs	r3, #2
 800dd50:	e060      	b.n	800de14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2201      	movs	r2, #1
 800dd56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d007      	beq.n	800dd78 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f042 0201 	orr.w	r2, r2, #1
 800dd76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2221      	movs	r2, #33	; 0x21
 800dd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2210      	movs	r2, #16
 800dd94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	893a      	ldrh	r2, [r7, #8]
 800dda8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6a3a      	ldr	r2, [r7, #32]
 800ddb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800ddba:	897a      	ldrh	r2, [r7, #10]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	2b11      	cmp	r3, #17
 800ddca:	d10c      	bne.n	800dde6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ddd2:	d003      	beq.n	800dddc <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ddda:	d101      	bne.n	800dde0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e000      	b.n	800dde2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800dde0:	2300      	movs	r3, #0
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d107      	bne.n	800ddf6 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddf4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685a      	ldr	r2, [r3, #4]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800de0c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800de0e:	2300      	movs	r3, #0
 800de10:	e000      	b.n	800de14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800de12:	2302      	movs	r3, #2
  }
}
 800de14:	4618      	mov	r0, r3
 800de16:	371c      	adds	r7, #28
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr
 800de20:	20000058 	.word	0x20000058
 800de24:	14f8b589 	.word	0x14f8b589

0800de28 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b088      	sub	sp, #32
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	607a      	str	r2, [r7, #4]
 800de32:	461a      	mov	r2, r3
 800de34:	460b      	mov	r3, r1
 800de36:	817b      	strh	r3, [r7, #10]
 800de38:	4613      	mov	r3, r2
 800de3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800de3c:	2300      	movs	r3, #0
 800de3e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800de40:	2300      	movs	r3, #0
 800de42:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b20      	cmp	r3, #32
 800de4e:	f040 8149 	bne.w	800e0e4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de60:	d005      	beq.n	800de6e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de64:	2b08      	cmp	r3, #8
 800de66:	d002      	beq.n	800de6e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d130      	bne.n	800ded0 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800de6e:	4b99      	ldr	r3, [pc, #612]	; (800e0d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	08db      	lsrs	r3, r3, #3
 800de74:	4a98      	ldr	r2, [pc, #608]	; (800e0d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800de76:	fba2 2303 	umull	r2, r3, r2, r3
 800de7a:	0a1a      	lsrs	r2, r3, #8
 800de7c:	4613      	mov	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	009a      	lsls	r2, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	3b01      	subs	r3, #1
 800de8c:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d116      	bne.n	800dec2 <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2200      	movs	r2, #0
 800de98:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2220      	movs	r2, #32
 800de9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deae:	f043 0220 	orr.w	r2, r3, #32
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	e111      	b.n	800e0e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	f003 0302 	and.w	r3, r3, #2
 800decc:	2b02      	cmp	r3, #2
 800dece:	d0db      	beq.n	800de88 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d101      	bne.n	800dede <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800deda:	2302      	movs	r3, #2
 800dedc:	e103      	b.n	800e0e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2201      	movs	r2, #1
 800dee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f003 0301 	and.w	r3, r3, #1
 800def0:	2b01      	cmp	r3, #1
 800def2:	d007      	beq.n	800df04 <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f042 0201 	orr.w	r2, r2, #1
 800df02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2221      	movs	r2, #33	; 0x21
 800df18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2210      	movs	r2, #16
 800df20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2200      	movs	r2, #0
 800df28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	893a      	ldrh	r2, [r7, #8]
 800df34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800df46:	897a      	ldrh	r2, [r7, #10]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df50:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 808d 	beq.w	800e076 <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df60:	2b00      	cmp	r3, #0
 800df62:	d022      	beq.n	800dfaa <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df68:	4a5c      	ldr	r2, [pc, #368]	; (800e0dc <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800df6a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df70:	4a5b      	ldr	r2, [pc, #364]	; (800e0e0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800df72:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df78:	2200      	movs	r2, #0
 800df7a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df80:	2200      	movs	r2, #0
 800df82:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8c:	4619      	mov	r1, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	3310      	adds	r3, #16
 800df94:	461a      	mov	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df9a:	f7f9 feb0 	bl	8007cfe <HAL_DMA_Start_IT>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dfa2:	7ffb      	ldrb	r3, [r7, #31]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d152      	bne.n	800e04e <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800dfa8:	e013      	b.n	800dfd2 <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2220      	movs	r2, #32
 800dfae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e089      	b.n	800e0e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfe0:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	2b11      	cmp	r3, #17
 800dfe6:	d10c      	bne.n	800e002 <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800dfee:	d003      	beq.n	800dff8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800dff6:	d101      	bne.n	800dffc <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800dff8:	2301      	movs	r3, #1
 800dffa:	e000      	b.n	800dffe <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800dffc:	2300      	movs	r3, #0
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d107      	bne.n	800e012 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e010:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01c:	2b04      	cmp	r3, #4
 800e01e:	d005      	beq.n	800e02c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	2b20      	cmp	r3, #32
 800e024:	d002      	beq.n	800e02c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e028:	2b10      	cmp	r3, #16
 800e02a:	d107      	bne.n	800e03c <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	685a      	ldr	r2, [r3, #4]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e03a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	685a      	ldr	r2, [r3, #4]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e04a:	605a      	str	r2, [r3, #4]
 800e04c:	e03f      	b.n	800e0ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2220      	movs	r2, #32
 800e052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2200      	movs	r2, #0
 800e05a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e062:	f043 0210 	orr.w	r2, r3, #16
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	e037      	b.n	800e0e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e084:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	2b11      	cmp	r3, #17
 800e08a:	d10c      	bne.n	800e0a6 <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e092:	d003      	beq.n	800e09c <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e09a:	d101      	bne.n	800e0a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d107      	bne.n	800e0b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0b4:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e0cc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e009      	b.n	800e0e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e0d2:	bf00      	nop
 800e0d4:	20000058 	.word	0x20000058
 800e0d8:	14f8b589 	.word	0x14f8b589
 800e0dc:	08010c31 	.word	0x08010c31
 800e0e0:	08010ddb 	.word	0x08010ddb
  }
  else
  {
    return HAL_BUSY;
 800e0e4:	2302      	movs	r3, #2
  }
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e0ee:	b480      	push	{r7}
 800e0f0:	b089      	sub	sp, #36	; 0x24
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	60f8      	str	r0, [r7, #12]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	817b      	strh	r3, [r7, #10]
 800e0fe:	4613      	mov	r3, r2
 800e100:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e102:	2300      	movs	r3, #0
 800e104:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e106:	2300      	movs	r3, #0
 800e108:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e10a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e10e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e116:	b2db      	uxtb	r3, r3
 800e118:	2b20      	cmp	r3, #32
 800e11a:	f040 80da 	bne.w	800e2d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e12c:	d005      	beq.n	800e13a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	2b08      	cmp	r3, #8
 800e132:	d002      	beq.n	800e13a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e136:	2b01      	cmp	r3, #1
 800e138:	d130      	bne.n	800e19c <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e13a:	4b69      	ldr	r3, [pc, #420]	; (800e2e0 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	08db      	lsrs	r3, r3, #3
 800e140:	4a68      	ldr	r2, [pc, #416]	; (800e2e4 <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800e142:	fba2 2303 	umull	r2, r3, r2, r3
 800e146:	0a1a      	lsrs	r2, r3, #8
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	009a      	lsls	r2, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	3b01      	subs	r3, #1
 800e158:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d116      	bne.n	800e18e <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2200      	movs	r2, #0
 800e164:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2220      	movs	r2, #32
 800e16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e17a:	f043 0220 	orr.w	r2, r3, #32
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	e0a2      	b.n	800e2d4 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	699b      	ldr	r3, [r3, #24]
 800e194:	f003 0302 	and.w	r3, r3, #2
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d0db      	beq.n	800e154 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d101      	bne.n	800e1aa <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	e094      	b.n	800e2d4 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d007      	beq.n	800e1d0 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f042 0201 	orr.w	r2, r2, #1
 800e1ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2222      	movs	r2, #34	; 0x22
 800e1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2210      	movs	r2, #16
 800e1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	893a      	ldrh	r2, [r7, #8]
 800e200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e206:	b29a      	uxth	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e210:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e212:	897a      	ldrh	r2, [r7, #10]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21c:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e222:	b29b      	uxth	r3, r3
 800e224:	2b02      	cmp	r3, #2
 800e226:	d126      	bne.n	800e276 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22a:	2b20      	cmp	r3, #32
 800e22c:	d002      	beq.n	800e234 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	2b10      	cmp	r3, #16
 800e232:	d120      	bne.n	800e276 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	2b12      	cmp	r3, #18
 800e238:	d114      	bne.n	800e264 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e248:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e258:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e260:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e262:	e010      	b.n	800e286 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e272:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e274:	e007      	b.n	800e286 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e284:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	2b12      	cmp	r3, #18
 800e28a:	d10c      	bne.n	800e2a6 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e292:	d003      	beq.n	800e29c <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e29a:	d101      	bne.n	800e2a0 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800e29c:	2301      	movs	r3, #1
 800e29e:	e000      	b.n	800e2a2 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d107      	bne.n	800e2b6 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2b4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	6859      	ldr	r1, [r3, #4]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	69fa      	ldr	r2, [r7, #28]
 800e2ca:	430a      	orrs	r2, r1
 800e2cc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e000      	b.n	800e2d4 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800e2d2:	2302      	movs	r3, #2
  }
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3724      	adds	r7, #36	; 0x24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	20000058 	.word	0x20000058
 800e2e4:	14f8b589 	.word	0x14f8b589

0800e2e8 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b088      	sub	sp, #32
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	607a      	str	r2, [r7, #4]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	817b      	strh	r3, [r7, #10]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e300:	2300      	movs	r3, #0
 800e302:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e304:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e308:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b20      	cmp	r3, #32
 800e314:	f040 8199 	bne.w	800e64a <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e326:	d005      	beq.n	800e334 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	2b08      	cmp	r3, #8
 800e32c:	d002      	beq.n	800e334 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	2b01      	cmp	r3, #1
 800e332:	d130      	bne.n	800e396 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e334:	4b8f      	ldr	r3, [pc, #572]	; (800e574 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	08db      	lsrs	r3, r3, #3
 800e33a:	4a8f      	ldr	r2, [pc, #572]	; (800e578 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800e33c:	fba2 2303 	umull	r2, r3, r2, r3
 800e340:	0a1a      	lsrs	r2, r3, #8
 800e342:	4613      	mov	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	009a      	lsls	r2, r3, #2
 800e34a:	4413      	add	r3, r2
 800e34c:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	3b01      	subs	r3, #1
 800e352:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d116      	bne.n	800e388 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2220      	movs	r2, #32
 800e364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2200      	movs	r2, #0
 800e36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e374:	f043 0220 	orr.w	r2, r3, #32
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e384:	2301      	movs	r3, #1
 800e386:	e161      	b.n	800e64c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b02      	cmp	r3, #2
 800e394:	d0db      	beq.n	800e34e <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d101      	bne.n	800e3a4 <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	e153      	b.n	800e64c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f003 0301 	and.w	r3, r3, #1
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d007      	beq.n	800e3ca <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f042 0201 	orr.w	r2, r2, #1
 800e3c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e3d8:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	685a      	ldr	r2, [r3, #4]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e3e8:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2222      	movs	r2, #34	; 0x22
 800e3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2210      	movs	r2, #16
 800e3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	893a      	ldrh	r2, [r7, #8]
 800e40a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e410:	b29a      	uxth	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e41a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e41c:	897a      	ldrh	r2, [r7, #10]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e426:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f000 80de 	beq.w	800e5ee <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e436:	b29b      	uxth	r3, r3
 800e438:	2b02      	cmp	r3, #2
 800e43a:	d12a      	bne.n	800e492 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	2b20      	cmp	r3, #32
 800e440:	d002      	beq.n	800e448 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800e442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e444:	2b10      	cmp	r3, #16
 800e446:	d124      	bne.n	800e492 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	2b12      	cmp	r3, #18
 800e44c:	d118      	bne.n	800e480 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e45c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e46c:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	685a      	ldr	r2, [r3, #4]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e47c:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e47e:	e022      	b.n	800e4c6 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e48e:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e490:	e019      	b.n	800e4c6 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4a0:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	2b20      	cmp	r3, #32
 800e4a6:	d006      	beq.n	800e4b6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e4ae:	d002      	beq.n	800e4b6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b2:	2b10      	cmp	r3, #16
 800e4b4:	d107      	bne.n	800e4c6 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4c4:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d022      	beq.n	800e514 <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d2:	4a2a      	ldr	r2, [pc, #168]	; (800e57c <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800e4d4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4da:	4a29      	ldr	r2, [pc, #164]	; (800e580 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800e4dc:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	3310      	adds	r3, #16
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fe:	461a      	mov	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e504:	f7f9 fbfb 	bl	8007cfe <HAL_DMA_Start_IT>
 800e508:	4603      	mov	r3, r0
 800e50a:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800e50c:	7efb      	ldrb	r3, [r7, #27]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d159      	bne.n	800e5c6 <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800e512:	e013      	b.n	800e53c <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2220      	movs	r2, #32
 800e518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e528:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e087      	b.n	800e64c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	2b12      	cmp	r3, #18
 800e540:	d10c      	bne.n	800e55c <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e548:	d003      	beq.n	800e552 <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e550:	d101      	bne.n	800e556 <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800e552:	2301      	movs	r3, #1
 800e554:	e000      	b.n	800e558 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800e556:	2300      	movs	r3, #0
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d113      	bne.n	800e584 <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e56a:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800e56c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e570:	61fb      	str	r3, [r7, #28]
 800e572:	e00a      	b.n	800e58a <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800e574:	20000058 	.word	0x20000058
 800e578:	14f8b589 	.word	0x14f8b589
 800e57c:	08010c31 	.word	0x08010c31
 800e580:	08010ddb 	.word	0x08010ddb
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800e584:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e588:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	2b04      	cmp	r3, #4
 800e596:	d005      	beq.n	800e5a4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59a:	2b20      	cmp	r3, #32
 800e59c:	d002      	beq.n	800e5a4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	2b10      	cmp	r3, #16
 800e5a2:	d107      	bne.n	800e5b4 <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5b2:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6859      	ldr	r1, [r3, #4]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	69fa      	ldr	r2, [r7, #28]
 800e5c0:	430a      	orrs	r2, r1
 800e5c2:	605a      	str	r2, [r3, #4]
 800e5c4:	e03f      	b.n	800e646 <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2220      	movs	r2, #32
 800e5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5da:	f043 0210 	orr.w	r2, r3, #16
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e02e      	b.n	800e64c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e5fc:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b12      	cmp	r3, #18
 800e602:	d10c      	bne.n	800e61e <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800e604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e606:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e60a:	d003      	beq.n	800e614 <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e612:	d101      	bne.n	800e618 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800e614:	2301      	movs	r3, #1
 800e616:	e000      	b.n	800e61a <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800e618:	2300      	movs	r3, #0
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d107      	bne.n	800e62e <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e62c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6859      	ldr	r1, [r3, #4]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	69fa      	ldr	r2, [r7, #28]
 800e642:	430a      	orrs	r2, r1
 800e644:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	e000      	b.n	800e64c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800e64a:	2302      	movs	r3, #2
  }
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3720      	adds	r7, #32
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e654:	b480      	push	{r7}
 800e656:	b087      	sub	sp, #28
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	603b      	str	r3, [r7, #0]
 800e660:	4613      	mov	r3, r2
 800e662:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e670:	2b28      	cmp	r3, #40	; 0x28
 800e672:	d15b      	bne.n	800e72c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800e67a:	88fb      	ldrh	r3, [r7, #6]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d101      	bne.n	800e684 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800e680:	2301      	movs	r3, #1
 800e682:	e054      	b.n	800e72e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d101      	bne.n	800e692 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800e68e:	2302      	movs	r3, #2
 800e690:	e04d      	b.n	800e72e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2201      	movs	r2, #1
 800e696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d007      	beq.n	800e6b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f042 0201 	orr.w	r2, r2, #1
 800e6b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e6c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2229      	movs	r2, #41	; 0x29
 800e6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2220      	movs	r2, #32
 800e6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	88fa      	ldrh	r2, [r7, #6]
 800e6e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	617b      	str	r3, [r7, #20]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	617b      	str	r3, [r7, #20]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2200      	movs	r2, #0
 800e714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e726:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	e000      	b.n	800e72e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e72c:	2302      	movs	r3, #2
  }
}
 800e72e:	4618      	mov	r0, r3
 800e730:	371c      	adds	r7, #28
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b086      	sub	sp, #24
 800e73e:	af00      	add	r7, sp, #0
 800e740:	60f8      	str	r0, [r7, #12]
 800e742:	60b9      	str	r1, [r7, #8]
 800e744:	603b      	str	r3, [r7, #0]
 800e746:	4613      	mov	r3, r2
 800e748:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e750:	b2db      	uxtb	r3, r3
 800e752:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e756:	2b28      	cmp	r3, #40	; 0x28
 800e758:	f040 811e 	bne.w	800e998 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800e762:	88fb      	ldrh	r3, [r7, #6]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	e116      	b.n	800e99a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e772:	2b01      	cmp	r3, #1
 800e774:	d101      	bne.n	800e77a <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800e776:	2302      	movs	r3, #2
 800e778:	e10f      	b.n	800e99a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e790:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b2a      	cmp	r3, #42	; 0x2a
 800e79c:	d127      	bne.n	800e7ee <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7ac:	d14c      	bne.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d048      	beq.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	685a      	ldr	r2, [r3, #4]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e7c4:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ca:	4a76      	ldr	r2, [pc, #472]	; (800e9a4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e7cc:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7f9 fb5b 	bl	8007e8e <HAL_DMA_Abort_IT>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d034      	beq.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	4798      	blx	r3
 800e7ec:	e02c      	b.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b29      	cmp	r3, #41	; 0x29
 800e7f8:	d126      	bne.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e808:	d11e      	bne.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	685a      	ldr	r2, [r3, #4]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e818:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d012      	beq.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e826:	4a5f      	ldr	r2, [pc, #380]	; (800e9a4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e828:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82e:	4618      	mov	r0, r3
 800e830:	f7f9 fb2d 	bl	8007e8e <HAL_DMA_Abort_IT>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d006      	beq.n	800e848 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e844:	4610      	mov	r0, r2
 800e846:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f003 0301 	and.w	r3, r3, #1
 800e852:	2b01      	cmp	r3, #1
 800e854:	d007      	beq.n	800e866 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f042 0201 	orr.w	r2, r2, #1
 800e864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e874:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2229      	movs	r2, #41	; 0x29
 800e87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2220      	movs	r2, #32
 800e882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2200      	movs	r2, #0
 800e88a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	68ba      	ldr	r2, [r7, #8]
 800e890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	88fa      	ldrh	r2, [r7, #6]
 800e896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d022      	beq.n	800e8f6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b4:	4a3c      	ldr	r2, [pc, #240]	; (800e9a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800e8b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8bc:	4a3b      	ldr	r2, [pc, #236]	; (800e9ac <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800e8be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d8:	4619      	mov	r1, r3
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3310      	adds	r3, #16
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8e6:	f7f9 fa0a 	bl	8007cfe <HAL_DMA_Start_IT>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d13d      	bne.n	800e970 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800e8f4:	e013      	b.n	800e91e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2228      	movs	r2, #40	; 0x28
 800e8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e90a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e91a:	2301      	movs	r3, #1
 800e91c:	e03d      	b.n	800e99a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e92c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e92e:	2300      	movs	r3, #0
 800e930:	613b      	str	r3, [r7, #16]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	695b      	ldr	r3, [r3, #20]
 800e938:	613b      	str	r3, [r7, #16]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	613b      	str	r3, [r7, #16]
 800e942:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	685a      	ldr	r2, [r3, #4]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e95a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	685a      	ldr	r2, [r3, #4]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e96a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	e014      	b.n	800e99a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2220      	movs	r2, #32
 800e974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e984:	f043 0210 	orr.w	r2, r3, #16
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	e000      	b.n	800e99a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e998:	2302      	movs	r3, #2
  }
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3718      	adds	r7, #24
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	08010e55 	.word	0x08010e55
 800e9a8:	08010c31 	.word	0x08010c31
 800e9ac:	08010ddb 	.word	0x08010ddb

0800e9b0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b087      	sub	sp, #28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	603b      	str	r3, [r7, #0]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e9cc:	2b28      	cmp	r3, #40	; 0x28
 800e9ce:	d15b      	bne.n	800ea88 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800e9d6:	88fb      	ldrh	r3, [r7, #6]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e054      	b.n	800ea8a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d101      	bne.n	800e9ee <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800e9ea:	2302      	movs	r3, #2
 800e9ec:	e04d      	b.n	800ea8a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d007      	beq.n	800ea14 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f042 0201 	orr.w	r2, r2, #1
 800ea12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	222a      	movs	r2, #42	; 0x2a
 800ea28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2220      	movs	r2, #32
 800ea30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2200      	movs	r2, #0
 800ea38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	68ba      	ldr	r2, [r7, #8]
 800ea3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	88fa      	ldrh	r2, [r7, #6]
 800ea44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ea56:	2300      	movs	r3, #0
 800ea58:	617b      	str	r3, [r7, #20]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	617b      	str	r3, [r7, #20]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	617b      	str	r3, [r7, #20]
 800ea6a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	685a      	ldr	r2, [r3, #4]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ea82:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	e000      	b.n	800ea8a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800ea88:	2302      	movs	r3, #2
  }
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	371c      	adds	r7, #28
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b086      	sub	sp, #24
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	60f8      	str	r0, [r7, #12]
 800ea9e:	60b9      	str	r1, [r7, #8]
 800eaa0:	603b      	str	r3, [r7, #0]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eab2:	2b28      	cmp	r3, #40	; 0x28
 800eab4:	f040 811e 	bne.w	800ecf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d002      	beq.n	800eac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800eabe:	88fb      	ldrh	r3, [r7, #6]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d101      	bne.n	800eac8 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	e116      	b.n	800ecf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d101      	bne.n	800ead6 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800ead2:	2302      	movs	r3, #2
 800ead4:	e10f      	b.n	800ecf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2201      	movs	r2, #1
 800eada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	685a      	ldr	r2, [r3, #4]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800eaec:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	2b2a      	cmp	r3, #42	; 0x2a
 800eaf8:	d127      	bne.n	800eb4a <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb08:	d14c      	bne.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d048      	beq.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb20:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb26:	4a76      	ldr	r2, [pc, #472]	; (800ed00 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800eb28:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f9 f9ad 	bl	8007e8e <HAL_DMA_Abort_IT>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d034      	beq.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eb44:	4610      	mov	r0, r2
 800eb46:	4798      	blx	r3
 800eb48:	e02c      	b.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b29      	cmp	r3, #41	; 0x29
 800eb54:	d126      	bne.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb64:	d11e      	bne.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb74:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d012      	beq.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb82:	4a5f      	ldr	r2, [pc, #380]	; (800ed00 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800eb84:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7f9 f97f 	bl	8007e8e <HAL_DMA_Abort_IT>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d006      	beq.n	800eba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eba0:	4610      	mov	r0, r2
 800eba2:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d007      	beq.n	800ebc2 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f042 0201 	orr.w	r2, r2, #1
 800ebc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebd0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	222a      	movs	r2, #42	; 0x2a
 800ebd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2220      	movs	r2, #32
 800ebde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	88fa      	ldrh	r2, [r7, #6]
 800ebf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d022      	beq.n	800ec52 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec10:	4a3c      	ldr	r2, [pc, #240]	; (800ed04 <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800ec12:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec18:	4a3b      	ldr	r2, [pc, #236]	; (800ed08 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800ec1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec20:	2200      	movs	r2, #0
 800ec22:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec28:	2200      	movs	r2, #0
 800ec2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	3310      	adds	r3, #16
 800ec36:	4619      	mov	r1, r3
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec42:	f7f9 f85c 	bl	8007cfe <HAL_DMA_Start_IT>
 800ec46:	4603      	mov	r3, r0
 800ec48:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ec4a:	7dfb      	ldrb	r3, [r7, #23]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d13d      	bne.n	800eccc <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800ec50:	e013      	b.n	800ec7a <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2228      	movs	r2, #40	; 0x28
 800ec56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	e03d      	b.n	800ecf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ec88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	613b      	str	r3, [r7, #16]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	613b      	str	r3, [r7, #16]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	699b      	ldr	r3, [r3, #24]
 800ec9c:	613b      	str	r3, [r7, #16]
 800ec9e:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	685a      	ldr	r2, [r3, #4]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecb6:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ecc6:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	e014      	b.n	800ecf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2220      	movs	r2, #32
 800ecd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece0:	f043 0210 	orr.w	r2, r3, #16
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	e000      	b.n	800ecf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800ecf4:	2302      	movs	r3, #2
  }
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3718      	adds	r7, #24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	08010e55 	.word	0x08010e55
 800ed04:	08010c31 	.word	0x08010c31
 800ed08:	08010ddb 	.word	0x08010ddb

0800ed0c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b20      	cmp	r3, #32
 800ed1e:	d124      	bne.n	800ed6a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2228      	movs	r2, #40	; 0x28
 800ed24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d007      	beq.n	800ed46 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f042 0201 	orr.w	r2, r2, #1
 800ed44:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed54:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ed64:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	e000      	b.n	800ed6c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ed6a:	2302      	movs	r3, #2
  }
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b28      	cmp	r3, #40	; 0x28
 800ed8a:	d129      	bne.n	800ede0 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	f003 0303 	and.w	r3, r3, #3
 800ed98:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	461a      	mov	r2, r3
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	431a      	orrs	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2220      	movs	r2, #32
 800edb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800edca:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800edda:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800eddc:	2300      	movs	r3, #0
 800edde:	e000      	b.n	800ede2 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800ede0:	2302      	movs	r3, #2
  }
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	460b      	mov	r3, r1
 800edf8:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee00:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	f003 0302 	and.w	r3, r3, #2
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d138      	bne.n	800ee82 <HAL_I2C_Master_Abort_IT+0x94>
 800ee10:	7bfb      	ldrb	r3, [r7, #15]
 800ee12:	2b10      	cmp	r3, #16
 800ee14:	d135      	bne.n	800ee82 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d101      	bne.n	800ee24 <HAL_I2C_Master_Abort_IT+0x36>
 800ee20:	2302      	movs	r3, #2
 800ee22:	e02f      	b.n	800ee84 <HAL_I2C_Master_Abort_IT+0x96>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2260      	movs	r2, #96	; 0x60
 800ee36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee48:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee58:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	685a      	ldr	r2, [r3, #4]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f001 fad9 	bl	8010430 <I2C_ITError>

    return HAL_OK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	e000      	b.n	800ee84 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
  }
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b088      	sub	sp, #32
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800ee94:	2300      	movs	r3, #0
 800ee96:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eeac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eeb4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	2b10      	cmp	r3, #16
 800eeba:	d003      	beq.n	800eec4 <HAL_I2C_EV_IRQHandler+0x38>
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
 800eebe:	2b40      	cmp	r3, #64	; 0x40
 800eec0:	f040 80c1 	bne.w	800f046 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	695b      	ldr	r3, [r3, #20]
 800eed2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	f003 0301 	and.w	r3, r3, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d10d      	bne.n	800eefa <HAL_I2C_EV_IRQHandler+0x6e>
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800eee4:	d003      	beq.n	800eeee <HAL_I2C_EV_IRQHandler+0x62>
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800eeec:	d101      	bne.n	800eef2 <HAL_I2C_EV_IRQHandler+0x66>
 800eeee:	2301      	movs	r3, #1
 800eef0:	e000      	b.n	800eef4 <HAL_I2C_EV_IRQHandler+0x68>
 800eef2:	2300      	movs	r3, #0
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	f000 8132 	beq.w	800f15e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	f003 0301 	and.w	r3, r3, #1
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00c      	beq.n	800ef1e <HAL_I2C_EV_IRQHandler+0x92>
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	0a5b      	lsrs	r3, r3, #9
 800ef08:	f003 0301 	and.w	r3, r3, #1
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d006      	beq.n	800ef1e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f002 fa94 	bl	801143e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 fda1 	bl	800fa5e <I2C_Master_SB>
 800ef1c:	e092      	b.n	800f044 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	08db      	lsrs	r3, r3, #3
 800ef22:	f003 0301 	and.w	r3, r3, #1
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d009      	beq.n	800ef3e <HAL_I2C_EV_IRQHandler+0xb2>
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	0a5b      	lsrs	r3, r3, #9
 800ef2e:	f003 0301 	and.w	r3, r3, #1
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d003      	beq.n	800ef3e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 fe17 	bl	800fb6a <I2C_Master_ADD10>
 800ef3c:	e082      	b.n	800f044 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	085b      	lsrs	r3, r3, #1
 800ef42:	f003 0301 	and.w	r3, r3, #1
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d009      	beq.n	800ef5e <HAL_I2C_EV_IRQHandler+0xd2>
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	0a5b      	lsrs	r3, r3, #9
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d003      	beq.n	800ef5e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fe31 	bl	800fbbe <I2C_Master_ADDR>
 800ef5c:	e072      	b.n	800f044 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	089b      	lsrs	r3, r3, #2
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d03b      	beq.n	800efe2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef78:	f000 80f3 	beq.w	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	09db      	lsrs	r3, r3, #7
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00f      	beq.n	800efa8 <HAL_I2C_EV_IRQHandler+0x11c>
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	0a9b      	lsrs	r3, r3, #10
 800ef8c:	f003 0301 	and.w	r3, r3, #1
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d009      	beq.n	800efa8 <HAL_I2C_EV_IRQHandler+0x11c>
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	089b      	lsrs	r3, r3, #2
 800ef98:	f003 0301 	and.w	r3, r3, #1
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d103      	bne.n	800efa8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 fa1b 	bl	800f3dc <I2C_MasterTransmit_TXE>
 800efa6:	e04d      	b.n	800f044 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	089b      	lsrs	r3, r3, #2
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 80d6 	beq.w	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	0a5b      	lsrs	r3, r3, #9
 800efba:	f003 0301 	and.w	r3, r3, #1
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 80cf 	beq.w	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800efc4:	7bbb      	ldrb	r3, [r7, #14]
 800efc6:	2b21      	cmp	r3, #33	; 0x21
 800efc8:	d103      	bne.n	800efd2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 faa2 	bl	800f514 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800efd0:	e0c7      	b.n	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800efd2:	7bfb      	ldrb	r3, [r7, #15]
 800efd4:	2b40      	cmp	r3, #64	; 0x40
 800efd6:	f040 80c4 	bne.w	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 fb10 	bl	800f600 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800efe0:	e0bf      	b.n	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eff0:	f000 80b7 	beq.w	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	099b      	lsrs	r3, r3, #6
 800eff8:	f003 0301 	and.w	r3, r3, #1
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00f      	beq.n	800f020 <HAL_I2C_EV_IRQHandler+0x194>
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	0a9b      	lsrs	r3, r3, #10
 800f004:	f003 0301 	and.w	r3, r3, #1
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d009      	beq.n	800f020 <HAL_I2C_EV_IRQHandler+0x194>
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	089b      	lsrs	r3, r3, #2
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	2b00      	cmp	r3, #0
 800f016:	d103      	bne.n	800f020 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 fb85 	bl	800f728 <I2C_MasterReceive_RXNE>
 800f01e:	e011      	b.n	800f044 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	089b      	lsrs	r3, r3, #2
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f000 809a 	beq.w	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	0a5b      	lsrs	r3, r3, #9
 800f032:	f003 0301 	and.w	r3, r3, #1
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 8093 	beq.w	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 fc24 	bl	800f88a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f042:	e08e      	b.n	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f044:	e08d      	b.n	800f162 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d004      	beq.n	800f058 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	695b      	ldr	r3, [r3, #20]
 800f054:	61fb      	str	r3, [r7, #28]
 800f056:	e007      	b.n	800f068 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	085b      	lsrs	r3, r3, #1
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	2b00      	cmp	r3, #0
 800f072:	d012      	beq.n	800f09a <HAL_I2C_EV_IRQHandler+0x20e>
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	0a5b      	lsrs	r3, r3, #9
 800f078:	f003 0301 	and.w	r3, r3, #1
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00c      	beq.n	800f09a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f084:	2b00      	cmp	r3, #0
 800f086:	d003      	beq.n	800f090 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	699b      	ldr	r3, [r3, #24]
 800f08e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800f090:	69b9      	ldr	r1, [r7, #24]
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 ffe2 	bl	801005c <I2C_Slave_ADDR>
 800f098:	e066      	b.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	091b      	lsrs	r3, r3, #4
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d009      	beq.n	800f0ba <HAL_I2C_EV_IRQHandler+0x22e>
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	0a5b      	lsrs	r3, r3, #9
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d003      	beq.n	800f0ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f001 f81c 	bl	80100f0 <I2C_Slave_STOPF>
 800f0b8:	e056      	b.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f0ba:	7bbb      	ldrb	r3, [r7, #14]
 800f0bc:	2b21      	cmp	r3, #33	; 0x21
 800f0be:	d002      	beq.n	800f0c6 <HAL_I2C_EV_IRQHandler+0x23a>
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
 800f0c2:	2b29      	cmp	r3, #41	; 0x29
 800f0c4:	d125      	bne.n	800f112 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	09db      	lsrs	r3, r3, #7
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00f      	beq.n	800f0f2 <HAL_I2C_EV_IRQHandler+0x266>
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	0a9b      	lsrs	r3, r3, #10
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d009      	beq.n	800f0f2 <HAL_I2C_EV_IRQHandler+0x266>
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	089b      	lsrs	r3, r3, #2
 800f0e2:	f003 0301 	and.w	r3, r3, #1
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d103      	bne.n	800f0f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 fef8 	bl	800fee0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f0f0:	e039      	b.n	800f166 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f0f2:	69fb      	ldr	r3, [r7, #28]
 800f0f4:	089b      	lsrs	r3, r3, #2
 800f0f6:	f003 0301 	and.w	r3, r3, #1
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d033      	beq.n	800f166 <HAL_I2C_EV_IRQHandler+0x2da>
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	0a5b      	lsrs	r3, r3, #9
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b00      	cmp	r3, #0
 800f108:	d02d      	beq.n	800f166 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 ff25 	bl	800ff5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f110:	e029      	b.n	800f166 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	099b      	lsrs	r3, r3, #6
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00f      	beq.n	800f13e <HAL_I2C_EV_IRQHandler+0x2b2>
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	0a9b      	lsrs	r3, r3, #10
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	2b00      	cmp	r3, #0
 800f128:	d009      	beq.n	800f13e <HAL_I2C_EV_IRQHandler+0x2b2>
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	089b      	lsrs	r3, r3, #2
 800f12e:	f003 0301 	and.w	r3, r3, #1
 800f132:	2b00      	cmp	r3, #0
 800f134:	d103      	bne.n	800f13e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 ff30 	bl	800ff9c <I2C_SlaveReceive_RXNE>
 800f13c:	e014      	b.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	089b      	lsrs	r3, r3, #2
 800f142:	f003 0301 	and.w	r3, r3, #1
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00e      	beq.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	0a5b      	lsrs	r3, r3, #9
 800f14e:	f003 0301 	and.w	r3, r3, #1
 800f152:	2b00      	cmp	r3, #0
 800f154:	d008      	beq.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 ff5e 	bl	8010018 <I2C_SlaveReceive_BTF>
 800f15c:	e004      	b.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800f15e:	bf00      	nop
 800f160:	e002      	b.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f162:	bf00      	nop
 800f164:	e000      	b.n	800f168 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f166:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800f168:	3720      	adds	r7, #32
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b08a      	sub	sp, #40	; 0x28
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f186:	2300      	movs	r3, #0
 800f188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f190:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	0a1b      	lsrs	r3, r3, #8
 800f196:	f003 0301 	and.w	r3, r3, #1
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00e      	beq.n	800f1bc <HAL_I2C_ER_IRQHandler+0x4e>
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	0a1b      	lsrs	r3, r3, #8
 800f1a2:	f003 0301 	and.w	r3, r3, #1
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d008      	beq.n	800f1bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	f043 0301 	orr.w	r3, r3, #1
 800f1b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f1ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f1bc:	6a3b      	ldr	r3, [r7, #32]
 800f1be:	0a5b      	lsrs	r3, r3, #9
 800f1c0:	f003 0301 	and.w	r3, r3, #1
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00e      	beq.n	800f1e6 <HAL_I2C_ER_IRQHandler+0x78>
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	0a1b      	lsrs	r3, r3, #8
 800f1cc:	f003 0301 	and.w	r3, r3, #1
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d008      	beq.n	800f1e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	f043 0302 	orr.w	r3, r3, #2
 800f1da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800f1e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f1e6:	6a3b      	ldr	r3, [r7, #32]
 800f1e8:	0a9b      	lsrs	r3, r3, #10
 800f1ea:	f003 0301 	and.w	r3, r3, #1
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d03f      	beq.n	800f272 <HAL_I2C_ER_IRQHandler+0x104>
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	0a1b      	lsrs	r3, r3, #8
 800f1f6:	f003 0301 	and.w	r3, r3, #1
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d039      	beq.n	800f272 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800f1fe:	7efb      	ldrb	r3, [r7, #27]
 800f200:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f206:	b29b      	uxth	r3, r3
 800f208:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f210:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f216:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f218:	7ebb      	ldrb	r3, [r7, #26]
 800f21a:	2b20      	cmp	r3, #32
 800f21c:	d112      	bne.n	800f244 <HAL_I2C_ER_IRQHandler+0xd6>
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10f      	bne.n	800f244 <HAL_I2C_ER_IRQHandler+0xd6>
 800f224:	7cfb      	ldrb	r3, [r7, #19]
 800f226:	2b21      	cmp	r3, #33	; 0x21
 800f228:	d008      	beq.n	800f23c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f22a:	7cfb      	ldrb	r3, [r7, #19]
 800f22c:	2b29      	cmp	r3, #41	; 0x29
 800f22e:	d005      	beq.n	800f23c <HAL_I2C_ER_IRQHandler+0xce>
 800f230:	7cfb      	ldrb	r3, [r7, #19]
 800f232:	2b28      	cmp	r3, #40	; 0x28
 800f234:	d106      	bne.n	800f244 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2b21      	cmp	r3, #33	; 0x21
 800f23a:	d103      	bne.n	800f244 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f001 f887 	bl	8010350 <I2C_Slave_AF>
 800f242:	e016      	b.n	800f272 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f24c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f250:	f043 0304 	orr.w	r3, r3, #4
 800f254:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f256:	7efb      	ldrb	r3, [r7, #27]
 800f258:	2b10      	cmp	r3, #16
 800f25a:	d002      	beq.n	800f262 <HAL_I2C_ER_IRQHandler+0xf4>
 800f25c:	7efb      	ldrb	r3, [r7, #27]
 800f25e:	2b40      	cmp	r3, #64	; 0x40
 800f260:	d107      	bne.n	800f272 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f270:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f272:	6a3b      	ldr	r3, [r7, #32]
 800f274:	0adb      	lsrs	r3, r3, #11
 800f276:	f003 0301 	and.w	r3, r3, #1
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00e      	beq.n	800f29c <HAL_I2C_ER_IRQHandler+0x12e>
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	0a1b      	lsrs	r3, r3, #8
 800f282:	f003 0301 	and.w	r3, r3, #1
 800f286:	2b00      	cmp	r3, #0
 800f288:	d008      	beq.n	800f29c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28c:	f043 0308 	orr.w	r3, r3, #8
 800f290:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800f29a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d008      	beq.n	800f2b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	431a      	orrs	r2, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f001 f8be 	bl	8010430 <I2C_ITError>
  }
}
 800f2b4:	bf00      	nop
 800f2b6:	3728      	adds	r7, #40	; 0x28
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f2c4:	bf00      	nop
 800f2c6:	370c      	adds	r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	460b      	mov	r3, r1
 800f316:	70fb      	strb	r3, [r7, #3]
 800f318:	4613      	mov	r3, r2
 800f31a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f344:	bf00      	nop
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f358:	bf00      	nop
 800f35a:	370c      	adds	r7, #12
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f36c:	bf00      	nop
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f378:	b480      	push	{r7}
 800f37a:	b083      	sub	sp, #12
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f380:	bf00      	nop
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f39a:	b2db      	uxtb	r3, r3
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3b6:	b2db      	uxtb	r3, r3
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d150      	bne.n	800f4a4 <I2C_MasterTransmit_TXE+0xc8>
 800f402:	7bfb      	ldrb	r3, [r7, #15]
 800f404:	2b21      	cmp	r3, #33	; 0x21
 800f406:	d14d      	bne.n	800f4a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	2b08      	cmp	r3, #8
 800f40c:	d01d      	beq.n	800f44a <I2C_MasterTransmit_TXE+0x6e>
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2b20      	cmp	r3, #32
 800f412:	d01a      	beq.n	800f44a <I2C_MasterTransmit_TXE+0x6e>
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f41a:	d016      	beq.n	800f44a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f42a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2211      	movs	r2, #17
 800f430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2220      	movs	r2, #32
 800f43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f7ff ff3a 	bl	800f2bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f448:	e060      	b.n	800f50c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f458:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f468:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2220      	movs	r2, #32
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	2b40      	cmp	r3, #64	; 0x40
 800f482:	d107      	bne.n	800f494 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff ff55 	bl	800f33c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f492:	e03b      	b.n	800f50c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff ff0d 	bl	800f2bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f4a2:	e033      	b.n	800f50c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800f4a4:	7bfb      	ldrb	r3, [r7, #15]
 800f4a6:	2b21      	cmp	r3, #33	; 0x21
 800f4a8:	d005      	beq.n	800f4b6 <I2C_MasterTransmit_TXE+0xda>
 800f4aa:	7bbb      	ldrb	r3, [r7, #14]
 800f4ac:	2b40      	cmp	r3, #64	; 0x40
 800f4ae:	d12d      	bne.n	800f50c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
 800f4b2:	2b22      	cmp	r3, #34	; 0x22
 800f4b4:	d12a      	bne.n	800f50c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d108      	bne.n	800f4d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	685a      	ldr	r2, [r3, #4]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800f4d0:	e01c      	b.n	800f50c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b40      	cmp	r3, #64	; 0x40
 800f4dc:	d103      	bne.n	800f4e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 f88e 	bl	800f600 <I2C_MemoryTransmit_TXE_BTF>
}
 800f4e4:	e012      	b.n	800f50c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ea:	781a      	ldrb	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f6:	1c5a      	adds	r2, r3, #1
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f500:	b29b      	uxth	r3, r3
 800f502:	3b01      	subs	r3, #1
 800f504:	b29a      	uxth	r2, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f50a:	e7ff      	b.n	800f50c <I2C_MasterTransmit_TXE+0x130>
 800f50c:	bf00      	nop
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f520:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	2b21      	cmp	r3, #33	; 0x21
 800f52c:	d164      	bne.n	800f5f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f532:	b29b      	uxth	r3, r3
 800f534:	2b00      	cmp	r3, #0
 800f536:	d012      	beq.n	800f55e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f53c:	781a      	ldrb	r2, [r3, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f548:	1c5a      	adds	r2, r3, #1
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f552:	b29b      	uxth	r3, r3
 800f554:	3b01      	subs	r3, #1
 800f556:	b29a      	uxth	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800f55c:	e04c      	b.n	800f5f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2b08      	cmp	r3, #8
 800f562:	d01d      	beq.n	800f5a0 <I2C_MasterTransmit_BTF+0x8c>
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b20      	cmp	r3, #32
 800f568:	d01a      	beq.n	800f5a0 <I2C_MasterTransmit_BTF+0x8c>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f570:	d016      	beq.n	800f5a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	685a      	ldr	r2, [r3, #4]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f580:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2211      	movs	r2, #17
 800f586:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2220      	movs	r2, #32
 800f594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7ff fe8f 	bl	800f2bc <HAL_I2C_MasterTxCpltCallback>
}
 800f59e:	e02b      	b.n	800f5f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f5ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2220      	movs	r2, #32
 800f5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b40      	cmp	r3, #64	; 0x40
 800f5d8:	d107      	bne.n	800f5ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f7ff feaa 	bl	800f33c <HAL_I2C_MemTxCpltCallback>
}
 800f5e8:	e006      	b.n	800f5f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7ff fe62 	bl	800f2bc <HAL_I2C_MasterTxCpltCallback>
}
 800f5f8:	bf00      	nop
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f60e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f614:	2b00      	cmp	r3, #0
 800f616:	d11d      	bne.n	800f654 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d10b      	bne.n	800f638 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f624:	b2da      	uxtb	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f630:	1c9a      	adds	r2, r3, #2
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800f636:	e073      	b.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	121b      	asrs	r3, r3, #8
 800f640:	b2da      	uxtb	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f64c:	1c5a      	adds	r2, r3, #1
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f652:	e065      	b.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d10b      	bne.n	800f674 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f660:	b2da      	uxtb	r2, r3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f672:	e055      	b.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f678:	2b02      	cmp	r3, #2
 800f67a:	d151      	bne.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
 800f67e:	2b22      	cmp	r3, #34	; 0x22
 800f680:	d10d      	bne.n	800f69e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f690:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f696:	1c5a      	adds	r2, r3, #1
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f69c:	e040      	b.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d015      	beq.n	800f6d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
 800f6aa:	2b21      	cmp	r3, #33	; 0x21
 800f6ac:	d112      	bne.n	800f6d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b2:	781a      	ldrb	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f6d2:	e025      	b.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d120      	bne.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
 800f6e0:	2b21      	cmp	r3, #33	; 0x21
 800f6e2:	d11d      	bne.n	800f720 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	685a      	ldr	r2, [r3, #4]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f6f2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f702:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2200      	movs	r2, #0
 800f708:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2220      	movs	r2, #32
 800f70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7ff fe0e 	bl	800f33c <HAL_I2C_MemTxCpltCallback>
}
 800f720:	bf00      	nop
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f736:	b2db      	uxtb	r3, r3
 800f738:	2b22      	cmp	r3, #34	; 0x22
 800f73a:	f040 80a2 	bne.w	800f882 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f742:	b29b      	uxth	r3, r3
 800f744:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2b03      	cmp	r3, #3
 800f74a:	d921      	bls.n	800f790 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	691a      	ldr	r2, [r3, #16]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f756:	b2d2      	uxtb	r2, r2
 800f758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f768:	b29b      	uxth	r3, r3
 800f76a:	3b01      	subs	r3, #1
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f776:	b29b      	uxth	r3, r3
 800f778:	2b03      	cmp	r3, #3
 800f77a:	f040 8082 	bne.w	800f882 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	685a      	ldr	r2, [r3, #4]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f78c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f78e:	e078      	b.n	800f882 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f794:	2b02      	cmp	r3, #2
 800f796:	d074      	beq.n	800f882 <I2C_MasterReceive_RXNE+0x15a>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d002      	beq.n	800f7a4 <I2C_MasterReceive_RXNE+0x7c>
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d16e      	bne.n	800f882 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f001 fd92 	bl	80112ce <I2C_WaitOnSTOPRequestThroughIT>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d142      	bne.n	800f836 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f7ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	691a      	ldr	r2, [r3, #16]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7da:	b2d2      	uxtb	r2, r2
 800f7dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2220      	movs	r2, #32
 800f7fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f804:	b2db      	uxtb	r3, r3
 800f806:	2b40      	cmp	r3, #64	; 0x40
 800f808:	d10a      	bne.n	800f820 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2200      	movs	r2, #0
 800f816:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff fd99 	bl	800f350 <HAL_I2C_MemRxCpltCallback>
}
 800f81e:	e030      	b.n	800f882 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2212      	movs	r2, #18
 800f82c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7ff fd4e 	bl	800f2d0 <HAL_I2C_MasterRxCpltCallback>
}
 800f834:	e025      	b.n	800f882 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	685a      	ldr	r2, [r3, #4]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f844:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	691a      	ldr	r2, [r3, #16]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f850:	b2d2      	uxtb	r2, r2
 800f852:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f862:	b29b      	uxth	r3, r3
 800f864:	3b01      	subs	r3, #1
 800f866:	b29a      	uxth	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2220      	movs	r2, #32
 800f870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f7ff fd71 	bl	800f364 <HAL_I2C_ErrorCallback>
}
 800f882:	bf00      	nop
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f896:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	2b04      	cmp	r3, #4
 800f8a0:	d11b      	bne.n	800f8da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	691a      	ldr	r2, [r3, #16]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8bc:	b2d2      	uxtb	r2, r2
 800f8be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c4:	1c5a      	adds	r2, r3, #1
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f8d8:	e0bd      	b.n	800fa56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	2b03      	cmp	r3, #3
 800f8e2:	d129      	bne.n	800f938 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2b04      	cmp	r3, #4
 800f8f8:	d00a      	beq.n	800f910 <I2C_MasterReceive_BTF+0x86>
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2b02      	cmp	r3, #2
 800f8fe:	d007      	beq.n	800f910 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f90e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	691a      	ldr	r2, [r3, #16]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91a:	b2d2      	uxtb	r2, r2
 800f91c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f922:	1c5a      	adds	r2, r3, #1
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	3b01      	subs	r3, #1
 800f930:	b29a      	uxth	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f936:	e08e      	b.n	800fa56 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	2b02      	cmp	r3, #2
 800f940:	d176      	bne.n	800fa30 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d002      	beq.n	800f94e <I2C_MasterReceive_BTF+0xc4>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b10      	cmp	r3, #16
 800f94c:	d108      	bne.n	800f960 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f95c:	601a      	str	r2, [r3, #0]
 800f95e:	e019      	b.n	800f994 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2b04      	cmp	r3, #4
 800f964:	d002      	beq.n	800f96c <I2C_MasterReceive_BTF+0xe2>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b02      	cmp	r3, #2
 800f96a:	d108      	bne.n	800f97e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f97a:	601a      	str	r2, [r3, #0]
 800f97c:	e00a      	b.n	800f994 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2b10      	cmp	r3, #16
 800f982:	d007      	beq.n	800f994 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f992:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	691a      	ldr	r2, [r3, #16]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99e:	b2d2      	uxtb	r2, r2
 800f9a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a6:	1c5a      	adds	r2, r3, #1
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	691a      	ldr	r2, [r3, #16]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c4:	b2d2      	uxtb	r2, r2
 800f9c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685a      	ldr	r2, [r3, #4]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f9ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2220      	movs	r2, #32
 800f9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	2b40      	cmp	r3, #64	; 0x40
 800fa02:	d10a      	bne.n	800fa1a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7ff fc9c 	bl	800f350 <HAL_I2C_MemRxCpltCallback>
}
 800fa18:	e01d      	b.n	800fa56 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2212      	movs	r2, #18
 800fa26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7ff fc51 	bl	800f2d0 <HAL_I2C_MasterRxCpltCallback>
}
 800fa2e:	e012      	b.n	800fa56 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	691a      	ldr	r2, [r3, #16]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3a:	b2d2      	uxtb	r2, r2
 800fa3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa42:	1c5a      	adds	r2, r3, #1
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	3b01      	subs	r3, #1
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fa56:	bf00      	nop
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b083      	sub	sp, #12
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	2b40      	cmp	r3, #64	; 0x40
 800fa70:	d117      	bne.n	800faa2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d109      	bne.n	800fa8e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	461a      	mov	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fa8a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800fa8c:	e067      	b.n	800fb5e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	f043 0301 	orr.w	r3, r3, #1
 800fa98:	b2da      	uxtb	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	611a      	str	r2, [r3, #16]
}
 800faa0:	e05d      	b.n	800fb5e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800faaa:	d133      	bne.n	800fb14 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	2b21      	cmp	r3, #33	; 0x21
 800fab6:	d109      	bne.n	800facc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	461a      	mov	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fac8:	611a      	str	r2, [r3, #16]
 800faca:	e008      	b.n	800fade <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	f043 0301 	orr.w	r3, r3, #1
 800fad6:	b2da      	uxtb	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d004      	beq.n	800faf0 <I2C_Master_SB+0x92>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faec:	2b00      	cmp	r3, #0
 800faee:	d108      	bne.n	800fb02 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d032      	beq.n	800fb5e <I2C_Master_SB+0x100>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d02d      	beq.n	800fb5e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	685a      	ldr	r2, [r3, #4]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb10:	605a      	str	r2, [r3, #4]
}
 800fb12:	e024      	b.n	800fb5e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10e      	bne.n	800fb3a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	11db      	asrs	r3, r3, #7
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	f003 0306 	and.w	r3, r3, #6
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	f063 030f 	orn	r3, r3, #15
 800fb30:	b2da      	uxtb	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	611a      	str	r2, [r3, #16]
}
 800fb38:	e011      	b.n	800fb5e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d10d      	bne.n	800fb5e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	11db      	asrs	r3, r3, #7
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	f003 0306 	and.w	r3, r3, #6
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	f063 030e 	orn	r3, r3, #14
 800fb56:	b2da      	uxtb	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	611a      	str	r2, [r3, #16]
}
 800fb5e:	bf00      	nop
 800fb60:	370c      	adds	r7, #12
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b083      	sub	sp, #12
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d004      	beq.n	800fb90 <I2C_Master_ADD10+0x26>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d108      	bne.n	800fba2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d00c      	beq.n	800fbb2 <I2C_Master_ADD10+0x48>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d007      	beq.n	800fbb2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	685a      	ldr	r2, [r3, #4]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbb0:	605a      	str	r2, [r3, #4]
  }
}
 800fbb2:	bf00      	nop
 800fbb4:	370c      	adds	r7, #12
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr

0800fbbe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800fbbe:	b480      	push	{r7}
 800fbc0:	b091      	sub	sp, #68	; 0x44
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbda:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b22      	cmp	r3, #34	; 0x22
 800fbe6:	f040 8169 	bne.w	800febc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10f      	bne.n	800fc12 <I2C_Master_ADDR+0x54>
 800fbf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbf6:	2b40      	cmp	r3, #64	; 0x40
 800fbf8:	d10b      	bne.n	800fc12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	60fb      	str	r3, [r7, #12]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	695b      	ldr	r3, [r3, #20]
 800fc04:	60fb      	str	r3, [r7, #12]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	699b      	ldr	r3, [r3, #24]
 800fc0c:	60fb      	str	r3, [r7, #12]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	e160      	b.n	800fed4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d11d      	bne.n	800fc56 <I2C_Master_ADDR+0x98>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	691b      	ldr	r3, [r3, #16]
 800fc1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fc22:	d118      	bne.n	800fc56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc24:	2300      	movs	r3, #0
 800fc26:	613b      	str	r3, [r7, #16]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	695b      	ldr	r3, [r3, #20]
 800fc2e:	613b      	str	r3, [r7, #16]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	699b      	ldr	r3, [r3, #24]
 800fc36:	613b      	str	r3, [r7, #16]
 800fc38:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc4e:	1c5a      	adds	r2, r3, #1
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	651a      	str	r2, [r3, #80]	; 0x50
 800fc54:	e13e      	b.n	800fed4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d113      	bne.n	800fc88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc60:	2300      	movs	r3, #0
 800fc62:	617b      	str	r3, [r7, #20]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	695b      	ldr	r3, [r3, #20]
 800fc6a:	617b      	str	r3, [r7, #20]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	699b      	ldr	r3, [r3, #24]
 800fc72:	617b      	str	r3, [r7, #20]
 800fc74:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	e115      	b.n	800feb4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	f040 808a 	bne.w	800fda8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc9a:	d137      	bne.n	800fd0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcaa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fcba:	d113      	bne.n	800fce4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fccc:	2300      	movs	r3, #0
 800fcce:	61bb      	str	r3, [r7, #24]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	61bb      	str	r3, [r7, #24]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	699b      	ldr	r3, [r3, #24]
 800fcde:	61bb      	str	r3, [r7, #24]
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	e0e7      	b.n	800feb4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fce4:	2300      	movs	r3, #0
 800fce6:	61fb      	str	r3, [r7, #28]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	61fb      	str	r3, [r7, #28]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	61fb      	str	r3, [r7, #28]
 800fcf8:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd08:	601a      	str	r2, [r3, #0]
 800fd0a:	e0d3      	b.n	800feb4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	2b08      	cmp	r3, #8
 800fd10:	d02e      	beq.n	800fd70 <I2C_Master_ADDR+0x1b2>
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	2b20      	cmp	r3, #32
 800fd16:	d02b      	beq.n	800fd70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800fd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1a:	2b12      	cmp	r3, #18
 800fd1c:	d102      	bne.n	800fd24 <I2C_Master_ADDR+0x166>
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d125      	bne.n	800fd70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	2b04      	cmp	r3, #4
 800fd28:	d00e      	beq.n	800fd48 <I2C_Master_ADDR+0x18a>
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d00b      	beq.n	800fd48 <I2C_Master_ADDR+0x18a>
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	2b10      	cmp	r3, #16
 800fd34:	d008      	beq.n	800fd48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd44:	601a      	str	r2, [r3, #0]
 800fd46:	e007      	b.n	800fd58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd58:	2300      	movs	r3, #0
 800fd5a:	623b      	str	r3, [r7, #32]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	695b      	ldr	r3, [r3, #20]
 800fd62:	623b      	str	r3, [r7, #32]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	699b      	ldr	r3, [r3, #24]
 800fd6a:	623b      	str	r3, [r7, #32]
 800fd6c:	6a3b      	ldr	r3, [r7, #32]
 800fd6e:	e0a1      	b.n	800feb4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd80:	2300      	movs	r3, #0
 800fd82:	627b      	str	r3, [r7, #36]	; 0x24
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	695b      	ldr	r3, [r3, #20]
 800fd8a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	699b      	ldr	r3, [r3, #24]
 800fd92:	627b      	str	r3, [r7, #36]	; 0x24
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	e085      	b.n	800feb4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d14d      	bne.n	800fe4e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb4:	2b04      	cmp	r3, #4
 800fdb6:	d016      	beq.n	800fde6 <I2C_Master_ADDR+0x228>
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	2b02      	cmp	r3, #2
 800fdbc:	d013      	beq.n	800fde6 <I2C_Master_ADDR+0x228>
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc0:	2b10      	cmp	r3, #16
 800fdc2:	d010      	beq.n	800fde6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdd2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fde2:	601a      	str	r2, [r3, #0]
 800fde4:	e007      	b.n	800fdf6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fdf4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe04:	d117      	bne.n	800fe36 <I2C_Master_ADDR+0x278>
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fe0c:	d00b      	beq.n	800fe26 <I2C_Master_ADDR+0x268>
 800fe0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d008      	beq.n	800fe26 <I2C_Master_ADDR+0x268>
 800fe14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe16:	2b08      	cmp	r3, #8
 800fe18:	d005      	beq.n	800fe26 <I2C_Master_ADDR+0x268>
 800fe1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1c:	2b10      	cmp	r3, #16
 800fe1e:	d002      	beq.n	800fe26 <I2C_Master_ADDR+0x268>
 800fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe22:	2b20      	cmp	r3, #32
 800fe24:	d107      	bne.n	800fe36 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe36:	2300      	movs	r3, #0
 800fe38:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	695b      	ldr	r3, [r3, #20]
 800fe40:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	699b      	ldr	r3, [r3, #24]
 800fe48:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4c:	e032      	b.n	800feb4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe6c:	d117      	bne.n	800fe9e <I2C_Master_ADDR+0x2e0>
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fe74:	d00b      	beq.n	800fe8e <I2C_Master_ADDR+0x2d0>
 800fe76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d008      	beq.n	800fe8e <I2C_Master_ADDR+0x2d0>
 800fe7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7e:	2b08      	cmp	r3, #8
 800fe80:	d005      	beq.n	800fe8e <I2C_Master_ADDR+0x2d0>
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	2b10      	cmp	r3, #16
 800fe86:	d002      	beq.n	800fe8e <I2C_Master_ADDR+0x2d0>
 800fe88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8a:	2b20      	cmp	r3, #32
 800fe8c:	d107      	bne.n	800fe9e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe9e:	2300      	movs	r3, #0
 800fea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	695b      	ldr	r3, [r3, #20]
 800fea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	699b      	ldr	r3, [r3, #24]
 800feb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800feba:	e00b      	b.n	800fed4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800febc:	2300      	movs	r3, #0
 800febe:	633b      	str	r3, [r7, #48]	; 0x30
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	695b      	ldr	r3, [r3, #20]
 800fec6:	633b      	str	r3, [r7, #48]	; 0x30
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	699b      	ldr	r3, [r3, #24]
 800fece:	633b      	str	r3, [r7, #48]	; 0x30
 800fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800fed2:	e7ff      	b.n	800fed4 <I2C_Master_ADDR+0x316>
 800fed4:	bf00      	nop
 800fed6:	3744      	adds	r7, #68	; 0x44
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800feee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d02b      	beq.n	800ff52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefe:	781a      	ldrb	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0a:	1c5a      	adds	r2, r3, #1
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	3b01      	subs	r3, #1
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d114      	bne.n	800ff52 <I2C_SlaveTransmit_TXE+0x72>
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	2b29      	cmp	r3, #41	; 0x29
 800ff2c:	d111      	bne.n	800ff52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2221      	movs	r2, #33	; 0x21
 800ff42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2228      	movs	r2, #40	; 0x28
 800ff48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7ff f9c9 	bl	800f2e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ff52:	bf00      	nop
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b083      	sub	sp, #12
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d011      	beq.n	800ff90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff70:	781a      	ldrb	r2, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff7c:	1c5a      	adds	r2, r3, #1
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ff90:	bf00      	nop
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffaa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d02c      	beq.n	8010010 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	691a      	ldr	r2, [r3, #16]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	b2d2      	uxtb	r2, r2
 800ffc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	1c5a      	adds	r2, r3, #1
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d114      	bne.n	8010010 <I2C_SlaveReceive_RXNE+0x74>
 800ffe6:	7bfb      	ldrb	r3, [r7, #15]
 800ffe8:	2b2a      	cmp	r3, #42	; 0x2a
 800ffea:	d111      	bne.n	8010010 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fffa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2222      	movs	r2, #34	; 0x22
 8010000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2228      	movs	r2, #40	; 0x28
 8010006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff f974 	bl	800f2f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8010010:	bf00      	nop
 8010012:	3710      	adds	r7, #16
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010024:	b29b      	uxth	r3, r3
 8010026:	2b00      	cmp	r3, #0
 8010028:	d012      	beq.n	8010050 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	691a      	ldr	r2, [r3, #16]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010034:	b2d2      	uxtb	r2, r2
 8010036:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003c:	1c5a      	adds	r2, r3, #1
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010046:	b29b      	uxth	r3, r3
 8010048:	3b01      	subs	r3, #1
 801004a:	b29a      	uxth	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010050:	bf00      	nop
 8010052:	370c      	adds	r7, #12
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr

0801005c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8010066:	2300      	movs	r3, #0
 8010068:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010070:	b2db      	uxtb	r3, r3
 8010072:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010076:	2b28      	cmp	r3, #40	; 0x28
 8010078:	d127      	bne.n	80100ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	685a      	ldr	r2, [r3, #4]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010088:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	089b      	lsrs	r3, r3, #2
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	2b00      	cmp	r3, #0
 8010094:	d101      	bne.n	801009a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8010096:	2301      	movs	r3, #1
 8010098:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	09db      	lsrs	r3, r3, #7
 801009e:	f003 0301 	and.w	r3, r3, #1
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d103      	bne.n	80100ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	81bb      	strh	r3, [r7, #12]
 80100ac:	e002      	b.n	80100b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	699b      	ldr	r3, [r3, #24]
 80100b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80100bc:	89ba      	ldrh	r2, [r7, #12]
 80100be:	7bfb      	ldrb	r3, [r7, #15]
 80100c0:	4619      	mov	r1, r3
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7ff f922 	bl	800f30c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80100c8:	e00e      	b.n	80100e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80100ca:	2300      	movs	r3, #0
 80100cc:	60bb      	str	r3, [r7, #8]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	60bb      	str	r3, [r7, #8]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	699b      	ldr	r3, [r3, #24]
 80100dc:	60bb      	str	r3, [r7, #8]
 80100de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80100e8:	bf00      	nop
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	685a      	ldr	r2, [r3, #4]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801010e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8010110:	2300      	movs	r3, #0
 8010112:	60bb      	str	r3, [r7, #8]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	695b      	ldr	r3, [r3, #20]
 801011a:	60bb      	str	r3, [r7, #8]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f042 0201 	orr.w	r2, r2, #1
 801012a:	601a      	str	r2, [r3, #0]
 801012c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801013c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801014c:	d172      	bne.n	8010234 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801014e:	7bfb      	ldrb	r3, [r7, #15]
 8010150:	2b22      	cmp	r3, #34	; 0x22
 8010152:	d002      	beq.n	801015a <I2C_Slave_STOPF+0x6a>
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	2b2a      	cmp	r3, #42	; 0x2a
 8010158:	d135      	bne.n	80101c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	b29a      	uxth	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801016c:	b29b      	uxth	r3, r3
 801016e:	2b00      	cmp	r3, #0
 8010170:	d005      	beq.n	801017e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010176:	f043 0204 	orr.w	r2, r3, #4
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	685a      	ldr	r2, [r3, #4]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801018c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010192:	4618      	mov	r0, r3
 8010194:	f7f8 f9c1 	bl	800851a <HAL_DMA_GetState>
 8010198:	4603      	mov	r3, r0
 801019a:	2b01      	cmp	r3, #1
 801019c:	d049      	beq.n	8010232 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a2:	4a69      	ldr	r2, [pc, #420]	; (8010348 <I2C_Slave_STOPF+0x258>)
 80101a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7f7 fe6f 	bl	8007e8e <HAL_DMA_Abort_IT>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d03d      	beq.n	8010232 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80101c0:	4610      	mov	r0, r2
 80101c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80101c4:	e035      	b.n	8010232 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101d8:	b29b      	uxth	r3, r3
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d005      	beq.n	80101ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101e2:	f043 0204 	orr.w	r2, r3, #4
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	685a      	ldr	r2, [r3, #4]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80101f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101fe:	4618      	mov	r0, r3
 8010200:	f7f8 f98b 	bl	800851a <HAL_DMA_GetState>
 8010204:	4603      	mov	r3, r0
 8010206:	2b01      	cmp	r3, #1
 8010208:	d014      	beq.n	8010234 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801020e:	4a4e      	ldr	r2, [pc, #312]	; (8010348 <I2C_Slave_STOPF+0x258>)
 8010210:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010216:	4618      	mov	r0, r3
 8010218:	f7f7 fe39 	bl	8007e8e <HAL_DMA_Abort_IT>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d008      	beq.n	8010234 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801022c:	4610      	mov	r0, r2
 801022e:	4798      	blx	r3
 8010230:	e000      	b.n	8010234 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010232:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010238:	b29b      	uxth	r3, r3
 801023a:	2b00      	cmp	r3, #0
 801023c:	d03e      	beq.n	80102bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	f003 0304 	and.w	r3, r3, #4
 8010248:	2b04      	cmp	r3, #4
 801024a:	d112      	bne.n	8010272 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	691a      	ldr	r2, [r3, #16]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010256:	b2d2      	uxtb	r2, r2
 8010258:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025e:	1c5a      	adds	r2, r3, #1
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010268:	b29b      	uxth	r3, r3
 801026a:	3b01      	subs	r3, #1
 801026c:	b29a      	uxth	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	695b      	ldr	r3, [r3, #20]
 8010278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801027c:	2b40      	cmp	r3, #64	; 0x40
 801027e:	d112      	bne.n	80102a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	691a      	ldr	r2, [r3, #16]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028a:	b2d2      	uxtb	r2, r2
 801028c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010292:	1c5a      	adds	r2, r3, #1
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801029c:	b29b      	uxth	r3, r3
 801029e:	3b01      	subs	r3, #1
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102b4:	f043 0204 	orr.w	r2, r3, #4
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d003      	beq.n	80102cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 f8b3 	bl	8010430 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80102ca:	e039      	b.n	8010340 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80102cc:	7bfb      	ldrb	r3, [r7, #15]
 80102ce:	2b2a      	cmp	r3, #42	; 0x2a
 80102d0:	d109      	bne.n	80102e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2228      	movs	r2, #40	; 0x28
 80102dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f7ff f809 	bl	800f2f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	2b28      	cmp	r3, #40	; 0x28
 80102f0:	d111      	bne.n	8010316 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a15      	ldr	r2, [pc, #84]	; (801034c <I2C_Slave_STOPF+0x25c>)
 80102f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2220      	movs	r2, #32
 8010302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2200      	movs	r2, #0
 801030a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7ff f80a 	bl	800f328 <HAL_I2C_ListenCpltCallback>
}
 8010314:	e014      	b.n	8010340 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801031a:	2b22      	cmp	r3, #34	; 0x22
 801031c:	d002      	beq.n	8010324 <I2C_Slave_STOPF+0x234>
 801031e:	7bfb      	ldrb	r3, [r7, #15]
 8010320:	2b22      	cmp	r3, #34	; 0x22
 8010322:	d10d      	bne.n	8010340 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2220      	movs	r2, #32
 801032e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7fe ffdc 	bl	800f2f8 <HAL_I2C_SlaveRxCpltCallback>
}
 8010340:	bf00      	nop
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	08010e55 	.word	0x08010e55
 801034c:	ffff0000 	.word	0xffff0000

08010350 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801035e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010364:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	2b08      	cmp	r3, #8
 801036a:	d002      	beq.n	8010372 <I2C_Slave_AF+0x22>
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	2b20      	cmp	r3, #32
 8010370:	d129      	bne.n	80103c6 <I2C_Slave_AF+0x76>
 8010372:	7bfb      	ldrb	r3, [r7, #15]
 8010374:	2b28      	cmp	r3, #40	; 0x28
 8010376:	d126      	bne.n	80103c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4a2c      	ldr	r2, [pc, #176]	; (801042c <I2C_Slave_AF+0xdc>)
 801037c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	685a      	ldr	r2, [r3, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801038c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010396:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2220      	movs	r2, #32
 80103b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f7fe ffb2 	bl	800f328 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80103c4:	e02e      	b.n	8010424 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80103c6:	7bfb      	ldrb	r3, [r7, #15]
 80103c8:	2b21      	cmp	r3, #33	; 0x21
 80103ca:	d126      	bne.n	801041a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a17      	ldr	r2, [pc, #92]	; (801042c <I2C_Slave_AF+0xdc>)
 80103d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2221      	movs	r2, #33	; 0x21
 80103d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2220      	movs	r2, #32
 80103dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	685a      	ldr	r2, [r3, #4]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80103f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010400:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010410:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7fe ff66 	bl	800f2e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8010418:	e004      	b.n	8010424 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010422:	615a      	str	r2, [r3, #20]
}
 8010424:	bf00      	nop
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	ffff0000 	.word	0xffff0000

08010430 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801043e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010446:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010448:	7bbb      	ldrb	r3, [r7, #14]
 801044a:	2b10      	cmp	r3, #16
 801044c:	d002      	beq.n	8010454 <I2C_ITError+0x24>
 801044e:	7bbb      	ldrb	r3, [r7, #14]
 8010450:	2b40      	cmp	r3, #64	; 0x40
 8010452:	d10a      	bne.n	801046a <I2C_ITError+0x3a>
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	2b22      	cmp	r3, #34	; 0x22
 8010458:	d107      	bne.n	801046a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010468:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801046a:	7bfb      	ldrb	r3, [r7, #15]
 801046c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010470:	2b28      	cmp	r3, #40	; 0x28
 8010472:	d107      	bne.n	8010484 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2200      	movs	r2, #0
 8010478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2228      	movs	r2, #40	; 0x28
 801047e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010482:	e015      	b.n	80104b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801048e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010492:	d00a      	beq.n	80104aa <I2C_ITError+0x7a>
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	2b60      	cmp	r3, #96	; 0x60
 8010498:	d007      	beq.n	80104aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2220      	movs	r2, #32
 801049e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104be:	d162      	bne.n	8010586 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d020      	beq.n	8010520 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104e2:	4a6a      	ldr	r2, [pc, #424]	; (801068c <I2C_ITError+0x25c>)
 80104e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7f7 fccf 	bl	8007e8e <HAL_DMA_Abort_IT>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f000 8089 	beq.w	801060a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f022 0201 	bic.w	r2, r2, #1
 8010506:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2220      	movs	r2, #32
 801050c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801051a:	4610      	mov	r0, r2
 801051c:	4798      	blx	r3
 801051e:	e074      	b.n	801060a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010524:	4a59      	ldr	r2, [pc, #356]	; (801068c <I2C_ITError+0x25c>)
 8010526:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801052c:	4618      	mov	r0, r3
 801052e:	f7f7 fcae 	bl	8007e8e <HAL_DMA_Abort_IT>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d068      	beq.n	801060a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	695b      	ldr	r3, [r3, #20]
 801053e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010542:	2b40      	cmp	r3, #64	; 0x40
 8010544:	d10b      	bne.n	801055e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	691a      	ldr	r2, [r3, #16]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010550:	b2d2      	uxtb	r2, r2
 8010552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010558:	1c5a      	adds	r2, r3, #1
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f022 0201 	bic.w	r2, r2, #1
 801056c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2220      	movs	r2, #32
 8010572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801057a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010580:	4610      	mov	r0, r2
 8010582:	4798      	blx	r3
 8010584:	e041      	b.n	801060a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801058c:	b2db      	uxtb	r3, r3
 801058e:	2b60      	cmp	r3, #96	; 0x60
 8010590:	d125      	bne.n	80105de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2220      	movs	r2, #32
 8010596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	695b      	ldr	r3, [r3, #20]
 80105a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105aa:	2b40      	cmp	r3, #64	; 0x40
 80105ac:	d10b      	bne.n	80105c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	691a      	ldr	r2, [r3, #16]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b8:	b2d2      	uxtb	r2, r2
 80105ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c0:	1c5a      	adds	r2, r3, #1
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f022 0201 	bic.w	r2, r2, #1
 80105d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f7fe fece 	bl	800f378 <HAL_I2C_AbortCpltCallback>
 80105dc:	e015      	b.n	801060a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105e8:	2b40      	cmp	r3, #64	; 0x40
 80105ea:	d10b      	bne.n	8010604 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	691a      	ldr	r2, [r3, #16]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f6:	b2d2      	uxtb	r2, r2
 80105f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7fe fead 	bl	800f364 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801060e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	f003 0301 	and.w	r3, r3, #1
 8010616:	2b00      	cmp	r3, #0
 8010618:	d10e      	bne.n	8010638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010620:	2b00      	cmp	r3, #0
 8010622:	d109      	bne.n	8010638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801062a:	2b00      	cmp	r3, #0
 801062c:	d104      	bne.n	8010638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010634:	2b00      	cmp	r3, #0
 8010636:	d007      	beq.n	8010648 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	685a      	ldr	r2, [r3, #4]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010646:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801064e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010654:	f003 0304 	and.w	r3, r3, #4
 8010658:	2b04      	cmp	r3, #4
 801065a:	d113      	bne.n	8010684 <I2C_ITError+0x254>
 801065c:	7bfb      	ldrb	r3, [r7, #15]
 801065e:	2b28      	cmp	r3, #40	; 0x28
 8010660:	d110      	bne.n	8010684 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a0a      	ldr	r2, [pc, #40]	; (8010690 <I2C_ITError+0x260>)
 8010666:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2220      	movs	r2, #32
 8010672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7fe fe52 	bl	800f328 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010684:	bf00      	nop
 8010686:	3710      	adds	r7, #16
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	08010e55 	.word	0x08010e55
 8010690:	ffff0000 	.word	0xffff0000

08010694 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b088      	sub	sp, #32
 8010698:	af02      	add	r7, sp, #8
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	607a      	str	r2, [r7, #4]
 801069e:	603b      	str	r3, [r7, #0]
 80106a0:	460b      	mov	r3, r1
 80106a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	2b08      	cmp	r3, #8
 80106ae:	d006      	beq.n	80106be <I2C_MasterRequestWrite+0x2a>
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	d003      	beq.n	80106be <I2C_MasterRequestWrite+0x2a>
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80106bc:	d108      	bne.n	80106d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	e00b      	b.n	80106e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d4:	2b12      	cmp	r3, #18
 80106d6:	d107      	bne.n	80106e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	9300      	str	r3, [sp, #0]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f000 fc55 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00d      	beq.n	801071c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801070a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801070e:	d103      	bne.n	8010718 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010718:	2303      	movs	r3, #3
 801071a:	e035      	b.n	8010788 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	691b      	ldr	r3, [r3, #16]
 8010720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010724:	d108      	bne.n	8010738 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010726:	897b      	ldrh	r3, [r7, #10]
 8010728:	b2db      	uxtb	r3, r3
 801072a:	461a      	mov	r2, r3
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010734:	611a      	str	r2, [r3, #16]
 8010736:	e01b      	b.n	8010770 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010738:	897b      	ldrh	r3, [r7, #10]
 801073a:	11db      	asrs	r3, r3, #7
 801073c:	b2db      	uxtb	r3, r3
 801073e:	f003 0306 	and.w	r3, r3, #6
 8010742:	b2db      	uxtb	r3, r3
 8010744:	f063 030f 	orn	r3, r3, #15
 8010748:	b2da      	uxtb	r2, r3
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	490e      	ldr	r1, [pc, #56]	; (8010790 <I2C_MasterRequestWrite+0xfc>)
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f000 fc7b 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e010      	b.n	8010788 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010766:	897b      	ldrh	r3, [r7, #10]
 8010768:	b2da      	uxtb	r2, r3
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	4907      	ldr	r1, [pc, #28]	; (8010794 <I2C_MasterRequestWrite+0x100>)
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f000 fc6b 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d001      	beq.n	8010786 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8010782:	2301      	movs	r3, #1
 8010784:	e000      	b.n	8010788 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	00010008 	.word	0x00010008
 8010794:	00010002 	.word	0x00010002

08010798 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b088      	sub	sp, #32
 801079c:	af02      	add	r7, sp, #8
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	607a      	str	r2, [r7, #4]
 80107a2:	603b      	str	r3, [r7, #0]
 80107a4:	460b      	mov	r3, r1
 80107a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80107bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	2b08      	cmp	r3, #8
 80107c2:	d006      	beq.n	80107d2 <I2C_MasterRequestRead+0x3a>
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d003      	beq.n	80107d2 <I2C_MasterRequestRead+0x3a>
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80107d0:	d108      	bne.n	80107e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107e0:	601a      	str	r2, [r3, #0]
 80107e2:	e00b      	b.n	80107fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107e8:	2b11      	cmp	r3, #17
 80107ea:	d107      	bne.n	80107fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2200      	movs	r2, #0
 8010804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010808:	68f8      	ldr	r0, [r7, #12]
 801080a:	f000 fbcb 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 801080e:	4603      	mov	r3, r0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d00d      	beq.n	8010830 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801081e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010822:	d103      	bne.n	801082c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f44f 7200 	mov.w	r2, #512	; 0x200
 801082a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801082c:	2303      	movs	r3, #3
 801082e:	e079      	b.n	8010924 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010838:	d108      	bne.n	801084c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801083a:	897b      	ldrh	r3, [r7, #10]
 801083c:	b2db      	uxtb	r3, r3
 801083e:	f043 0301 	orr.w	r3, r3, #1
 8010842:	b2da      	uxtb	r2, r3
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	611a      	str	r2, [r3, #16]
 801084a:	e05f      	b.n	801090c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801084c:	897b      	ldrh	r3, [r7, #10]
 801084e:	11db      	asrs	r3, r3, #7
 8010850:	b2db      	uxtb	r3, r3
 8010852:	f003 0306 	and.w	r3, r3, #6
 8010856:	b2db      	uxtb	r3, r3
 8010858:	f063 030f 	orn	r3, r3, #15
 801085c:	b2da      	uxtb	r2, r3
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	4930      	ldr	r1, [pc, #192]	; (801092c <I2C_MasterRequestRead+0x194>)
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f000 fbf1 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	d001      	beq.n	801087a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8010876:	2301      	movs	r3, #1
 8010878:	e054      	b.n	8010924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801087a:	897b      	ldrh	r3, [r7, #10]
 801087c:	b2da      	uxtb	r2, r3
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	4929      	ldr	r1, [pc, #164]	; (8010930 <I2C_MasterRequestRead+0x198>)
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f000 fbe1 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8010896:	2301      	movs	r3, #1
 8010898:	e044      	b.n	8010924 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801089a:	2300      	movs	r3, #0
 801089c:	613b      	str	r3, [r7, #16]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	695b      	ldr	r3, [r3, #20]
 80108a4:	613b      	str	r3, [r7, #16]
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	699b      	ldr	r3, [r3, #24]
 80108ac:	613b      	str	r3, [r7, #16]
 80108ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80108cc:	68f8      	ldr	r0, [r7, #12]
 80108ce:	f000 fb69 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00d      	beq.n	80108f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108e6:	d103      	bne.n	80108f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80108f0:	2303      	movs	r3, #3
 80108f2:	e017      	b.n	8010924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80108f4:	897b      	ldrh	r3, [r7, #10]
 80108f6:	11db      	asrs	r3, r3, #7
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	f003 0306 	and.w	r3, r3, #6
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	f063 030e 	orn	r3, r3, #14
 8010904:	b2da      	uxtb	r2, r3
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	4907      	ldr	r1, [pc, #28]	; (8010930 <I2C_MasterRequestRead+0x198>)
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f000 fb9d 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d001      	beq.n	8010922 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801091e:	2301      	movs	r3, #1
 8010920:	e000      	b.n	8010924 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8010922:	2300      	movs	r3, #0
}
 8010924:	4618      	mov	r0, r3
 8010926:	3718      	adds	r7, #24
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	00010008 	.word	0x00010008
 8010930:	00010002 	.word	0x00010002

08010934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b088      	sub	sp, #32
 8010938:	af02      	add	r7, sp, #8
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	4608      	mov	r0, r1
 801093e:	4611      	mov	r1, r2
 8010940:	461a      	mov	r2, r3
 8010942:	4603      	mov	r3, r0
 8010944:	817b      	strh	r3, [r7, #10]
 8010946:	460b      	mov	r3, r1
 8010948:	813b      	strh	r3, [r7, #8]
 801094a:	4613      	mov	r3, r2
 801094c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801095c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	2200      	movs	r2, #0
 8010966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f000 fb1a 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00d      	beq.n	8010992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010984:	d103      	bne.n	801098e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f44f 7200 	mov.w	r2, #512	; 0x200
 801098c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801098e:	2303      	movs	r3, #3
 8010990:	e05f      	b.n	8010a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010992:	897b      	ldrh	r3, [r7, #10]
 8010994:	b2db      	uxtb	r3, r3
 8010996:	461a      	mov	r2, r3
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80109a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80109a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a4:	6a3a      	ldr	r2, [r7, #32]
 80109a6:	492d      	ldr	r1, [pc, #180]	; (8010a5c <I2C_RequestMemoryWrite+0x128>)
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f000 fb52 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d001      	beq.n	80109b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	e04c      	b.n	8010a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80109b8:	2300      	movs	r3, #0
 80109ba:	617b      	str	r3, [r7, #20]
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	695b      	ldr	r3, [r3, #20]
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	699b      	ldr	r3, [r3, #24]
 80109ca:	617b      	str	r3, [r7, #20]
 80109cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80109ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109d0:	6a39      	ldr	r1, [r7, #32]
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f000 fbbc 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00d      	beq.n	80109fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e2:	2b04      	cmp	r3, #4
 80109e4:	d107      	bne.n	80109f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80109f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80109f6:	2301      	movs	r3, #1
 80109f8:	e02b      	b.n	8010a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80109fa:	88fb      	ldrh	r3, [r7, #6]
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	d105      	bne.n	8010a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010a00:	893b      	ldrh	r3, [r7, #8]
 8010a02:	b2da      	uxtb	r2, r3
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	611a      	str	r2, [r3, #16]
 8010a0a:	e021      	b.n	8010a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010a0c:	893b      	ldrh	r3, [r7, #8]
 8010a0e:	0a1b      	lsrs	r3, r3, #8
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a1c:	6a39      	ldr	r1, [r7, #32]
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f000 fb96 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00d      	beq.n	8010a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2e:	2b04      	cmp	r3, #4
 8010a30:	d107      	bne.n	8010a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	e005      	b.n	8010a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010a46:	893b      	ldrh	r3, [r7, #8]
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	00010002 	.word	0x00010002

08010a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b088      	sub	sp, #32
 8010a64:	af02      	add	r7, sp, #8
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	4608      	mov	r0, r1
 8010a6a:	4611      	mov	r1, r2
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	4603      	mov	r3, r0
 8010a70:	817b      	strh	r3, [r7, #10]
 8010a72:	460b      	mov	r3, r1
 8010a74:	813b      	strh	r3, [r7, #8]
 8010a76:	4613      	mov	r3, r2
 8010a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	6a3b      	ldr	r3, [r7, #32]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f000 fa7c 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d00d      	beq.n	8010ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ac0:	d103      	bne.n	8010aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010aca:	2303      	movs	r3, #3
 8010acc:	e0aa      	b.n	8010c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010ace:	897b      	ldrh	r3, [r7, #10]
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae0:	6a3a      	ldr	r2, [r7, #32]
 8010ae2:	4952      	ldr	r1, [pc, #328]	; (8010c2c <I2C_RequestMemoryRead+0x1cc>)
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f000 fab4 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d001      	beq.n	8010af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8010af0:	2301      	movs	r3, #1
 8010af2:	e097      	b.n	8010c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010af4:	2300      	movs	r3, #0
 8010af6:	617b      	str	r3, [r7, #20]
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	695b      	ldr	r3, [r3, #20]
 8010afe:	617b      	str	r3, [r7, #20]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	699b      	ldr	r3, [r3, #24]
 8010b06:	617b      	str	r3, [r7, #20]
 8010b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b0c:	6a39      	ldr	r1, [r7, #32]
 8010b0e:	68f8      	ldr	r0, [r7, #12]
 8010b10:	f000 fb1e 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d00d      	beq.n	8010b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b1e:	2b04      	cmp	r3, #4
 8010b20:	d107      	bne.n	8010b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010b32:	2301      	movs	r3, #1
 8010b34:	e076      	b.n	8010c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010b36:	88fb      	ldrh	r3, [r7, #6]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d105      	bne.n	8010b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010b3c:	893b      	ldrh	r3, [r7, #8]
 8010b3e:	b2da      	uxtb	r2, r3
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	611a      	str	r2, [r3, #16]
 8010b46:	e021      	b.n	8010b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010b48:	893b      	ldrh	r3, [r7, #8]
 8010b4a:	0a1b      	lsrs	r3, r3, #8
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	b2da      	uxtb	r2, r3
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b58:	6a39      	ldr	r1, [r7, #32]
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f000 faf8 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00d      	beq.n	8010b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6a:	2b04      	cmp	r3, #4
 8010b6c:	d107      	bne.n	8010b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e050      	b.n	8010c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010b82:	893b      	ldrh	r3, [r7, #8]
 8010b84:	b2da      	uxtb	r2, r3
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b8e:	6a39      	ldr	r1, [r7, #32]
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f000 fadd 	bl	8011150 <I2C_WaitOnTXEFlagUntilTimeout>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00d      	beq.n	8010bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba0:	2b04      	cmp	r3, #4
 8010ba2:	d107      	bne.n	8010bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e035      	b.n	8010c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f000 f9e5 	bl	8010fa4 <I2C_WaitOnFlagUntilTimeout>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d00d      	beq.n	8010bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bee:	d103      	bne.n	8010bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	e013      	b.n	8010c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010bfc:	897b      	ldrh	r3, [r7, #10]
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	f043 0301 	orr.w	r3, r3, #1
 8010c04:	b2da      	uxtb	r2, r3
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0e:	6a3a      	ldr	r2, [r7, #32]
 8010c10:	4906      	ldr	r1, [pc, #24]	; (8010c2c <I2C_RequestMemoryRead+0x1cc>)
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f000 fa1d 	bl	8011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e000      	b.n	8010c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3718      	adds	r7, #24
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	00010002 	.word	0x00010002

08010c30 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c3c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c44:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c4c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c52:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010c62:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d003      	beq.n	8010c74 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c70:	2200      	movs	r2, #0
 8010c72:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d003      	beq.n	8010c84 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c80:	2200      	movs	r2, #0
 8010c82:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8010c84:	7cfb      	ldrb	r3, [r7, #19]
 8010c86:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8010c8a:	2b21      	cmp	r3, #33	; 0x21
 8010c8c:	d007      	beq.n	8010c9e <I2C_DMAXferCplt+0x6e>
 8010c8e:	7cfb      	ldrb	r3, [r7, #19]
 8010c90:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010c94:	2b22      	cmp	r3, #34	; 0x22
 8010c96:	d131      	bne.n	8010cfc <I2C_DMAXferCplt+0xcc>
 8010c98:	7cbb      	ldrb	r3, [r7, #18]
 8010c9a:	2b20      	cmp	r3, #32
 8010c9c:	d12e      	bne.n	8010cfc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	685a      	ldr	r2, [r3, #4]
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010cac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010cb4:	7cfb      	ldrb	r3, [r7, #19]
 8010cb6:	2b29      	cmp	r3, #41	; 0x29
 8010cb8:	d10a      	bne.n	8010cd0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	2221      	movs	r2, #33	; 0x21
 8010cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	2228      	movs	r2, #40	; 0x28
 8010cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010cc8:	6978      	ldr	r0, [r7, #20]
 8010cca:	f7fe fb0b 	bl	800f2e4 <HAL_I2C_SlaveTxCpltCallback>
 8010cce:	e00c      	b.n	8010cea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010cd0:	7cfb      	ldrb	r3, [r7, #19]
 8010cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8010cd4:	d109      	bne.n	8010cea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	2222      	movs	r2, #34	; 0x22
 8010cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	2228      	movs	r2, #40	; 0x28
 8010ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010ce4:	6978      	ldr	r0, [r7, #20]
 8010ce6:	f7fe fb07 	bl	800f2f8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	685a      	ldr	r2, [r3, #4]
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010cf8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010cfa:	e06a      	b.n	8010dd2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d064      	beq.n	8010dd2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d107      	bne.n	8010d22 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d20:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	685a      	ldr	r2, [r3, #4]
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010d30:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010d38:	d009      	beq.n	8010d4e <I2C_DMAXferCplt+0x11e>
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2b08      	cmp	r3, #8
 8010d3e:	d006      	beq.n	8010d4e <I2C_DMAXferCplt+0x11e>
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010d46:	d002      	beq.n	8010d4e <I2C_DMAXferCplt+0x11e>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2b20      	cmp	r3, #32
 8010d4c:	d107      	bne.n	8010d5e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d5c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	685a      	ldr	r2, [r3, #4]
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010d6c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	685a      	ldr	r2, [r3, #4]
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010d7c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	2200      	movs	r2, #0
 8010d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d003      	beq.n	8010d94 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010d8c:	6978      	ldr	r0, [r7, #20]
 8010d8e:	f7fe fae9 	bl	800f364 <HAL_I2C_ErrorCallback>
}
 8010d92:	e01e      	b.n	8010dd2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	2220      	movs	r2, #32
 8010d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	2b40      	cmp	r3, #64	; 0x40
 8010da6:	d10a      	bne.n	8010dbe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	2200      	movs	r2, #0
 8010dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2200      	movs	r2, #0
 8010db4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010db6:	6978      	ldr	r0, [r7, #20]
 8010db8:	f7fe faca 	bl	800f350 <HAL_I2C_MemRxCpltCallback>
}
 8010dbc:	e009      	b.n	8010dd2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	2212      	movs	r2, #18
 8010dca:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8010dcc:	6978      	ldr	r0, [r7, #20]
 8010dce:	f7fe fa7f 	bl	800f2d0 <HAL_I2C_MasterRxCpltCallback>
}
 8010dd2:	bf00      	nop
 8010dd4:	3718      	adds	r7, #24
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b084      	sub	sp, #16
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d003      	beq.n	8010df8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010df4:	2200      	movs	r2, #0
 8010df6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d003      	beq.n	8010e08 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e04:	2200      	movs	r2, #0
 8010e06:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7f7 fb94 	bl	8008536 <HAL_DMA_GetError>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d01b      	beq.n	8010e4c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e22:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2200      	movs	r2, #0
 8010e28:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2220      	movs	r2, #32
 8010e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e3e:	f043 0210 	orr.w	r2, r3, #16
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f7fe fa8c 	bl	800f364 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010e4c:	bf00      	nop
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b086      	sub	sp, #24
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010e6e:	4b4b      	ldr	r3, [pc, #300]	; (8010f9c <I2C_DMAAbort+0x148>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	08db      	lsrs	r3, r3, #3
 8010e74:	4a4a      	ldr	r2, [pc, #296]	; (8010fa0 <I2C_DMAAbort+0x14c>)
 8010e76:	fba2 2303 	umull	r2, r3, r2, r3
 8010e7a:	0a1a      	lsrs	r2, r3, #8
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	4413      	add	r3, r2
 8010e82:	00da      	lsls	r2, r3, #3
 8010e84:	1ad3      	subs	r3, r2, r3
 8010e86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d106      	bne.n	8010e9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e92:	f043 0220 	orr.w	r2, r3, #32
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8010e9a:	e00a      	b.n	8010eb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010eb0:	d0ea      	beq.n	8010e88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d003      	beq.n	8010ec2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d003      	beq.n	8010ed2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ece:	2200      	movs	r2, #0
 8010ed0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ee0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d003      	beq.n	8010ef8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d003      	beq.n	8010f08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f04:	2200      	movs	r2, #0
 8010f06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f022 0201 	bic.w	r2, r2, #1
 8010f16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	2b60      	cmp	r3, #96	; 0x60
 8010f22:	d10e      	bne.n	8010f42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	2220      	movs	r2, #32
 8010f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	2200      	movs	r2, #0
 8010f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010f3a:	6978      	ldr	r0, [r7, #20]
 8010f3c:	f7fe fa1c 	bl	800f378 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f40:	e027      	b.n	8010f92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f42:	7cfb      	ldrb	r3, [r7, #19]
 8010f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010f48:	2b28      	cmp	r3, #40	; 0x28
 8010f4a:	d117      	bne.n	8010f7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f042 0201 	orr.w	r2, r2, #1
 8010f5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010f6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	2228      	movs	r2, #40	; 0x28
 8010f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010f7a:	e007      	b.n	8010f8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	2220      	movs	r2, #32
 8010f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	2200      	movs	r2, #0
 8010f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8010f8c:	6978      	ldr	r0, [r7, #20]
 8010f8e:	f7fe f9e9 	bl	800f364 <HAL_I2C_ErrorCallback>
}
 8010f92:	bf00      	nop
 8010f94:	3718      	adds	r7, #24
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop
 8010f9c:	20000058 	.word	0x20000058
 8010fa0:	14f8b589 	.word	0x14f8b589

08010fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	603b      	str	r3, [r7, #0]
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010fb4:	e025      	b.n	8011002 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fbc:	d021      	beq.n	8011002 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010fbe:	f7f5 fc35 	bl	800682c <HAL_GetTick>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	1ad3      	subs	r3, r2, r3
 8010fc8:	683a      	ldr	r2, [r7, #0]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d302      	bcc.n	8010fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d116      	bne.n	8011002 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2220      	movs	r2, #32
 8010fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fee:	f043 0220 	orr.w	r2, r3, #32
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010ffe:	2301      	movs	r3, #1
 8011000:	e023      	b.n	801104a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	0c1b      	lsrs	r3, r3, #16
 8011006:	b2db      	uxtb	r3, r3
 8011008:	2b01      	cmp	r3, #1
 801100a:	d10d      	bne.n	8011028 <I2C_WaitOnFlagUntilTimeout+0x84>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	695b      	ldr	r3, [r3, #20]
 8011012:	43da      	mvns	r2, r3
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	4013      	ands	r3, r2
 8011018:	b29b      	uxth	r3, r3
 801101a:	2b00      	cmp	r3, #0
 801101c:	bf0c      	ite	eq
 801101e:	2301      	moveq	r3, #1
 8011020:	2300      	movne	r3, #0
 8011022:	b2db      	uxtb	r3, r3
 8011024:	461a      	mov	r2, r3
 8011026:	e00c      	b.n	8011042 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	699b      	ldr	r3, [r3, #24]
 801102e:	43da      	mvns	r2, r3
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	4013      	ands	r3, r2
 8011034:	b29b      	uxth	r3, r3
 8011036:	2b00      	cmp	r3, #0
 8011038:	bf0c      	ite	eq
 801103a:	2301      	moveq	r3, #1
 801103c:	2300      	movne	r3, #0
 801103e:	b2db      	uxtb	r3, r3
 8011040:	461a      	mov	r2, r3
 8011042:	79fb      	ldrb	r3, [r7, #7]
 8011044:	429a      	cmp	r2, r3
 8011046:	d0b6      	beq.n	8010fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8011052:	b580      	push	{r7, lr}
 8011054:	b084      	sub	sp, #16
 8011056:	af00      	add	r7, sp, #0
 8011058:	60f8      	str	r0, [r7, #12]
 801105a:	60b9      	str	r1, [r7, #8]
 801105c:	607a      	str	r2, [r7, #4]
 801105e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011060:	e051      	b.n	8011106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	695b      	ldr	r3, [r3, #20]
 8011068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801106c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011070:	d123      	bne.n	80110ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011080:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801108a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2200      	movs	r2, #0
 8011090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2220      	movs	r2, #32
 8011096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	2200      	movs	r2, #0
 801109e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a6:	f043 0204 	orr.w	r2, r3, #4
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2200      	movs	r2, #0
 80110b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80110b6:	2301      	movs	r3, #1
 80110b8:	e046      	b.n	8011148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110c0:	d021      	beq.n	8011106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110c2:	f7f5 fbb3 	bl	800682c <HAL_GetTick>
 80110c6:	4602      	mov	r2, r0
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d302      	bcc.n	80110d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d116      	bne.n	8011106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2200      	movs	r2, #0
 80110dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2220      	movs	r2, #32
 80110e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2200      	movs	r2, #0
 80110ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f2:	f043 0220 	orr.w	r2, r3, #32
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2200      	movs	r2, #0
 80110fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011102:	2301      	movs	r3, #1
 8011104:	e020      	b.n	8011148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	0c1b      	lsrs	r3, r3, #16
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b01      	cmp	r3, #1
 801110e:	d10c      	bne.n	801112a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	695b      	ldr	r3, [r3, #20]
 8011116:	43da      	mvns	r2, r3
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	4013      	ands	r3, r2
 801111c:	b29b      	uxth	r3, r3
 801111e:	2b00      	cmp	r3, #0
 8011120:	bf14      	ite	ne
 8011122:	2301      	movne	r3, #1
 8011124:	2300      	moveq	r3, #0
 8011126:	b2db      	uxtb	r3, r3
 8011128:	e00b      	b.n	8011142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	699b      	ldr	r3, [r3, #24]
 8011130:	43da      	mvns	r2, r3
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	4013      	ands	r3, r2
 8011136:	b29b      	uxth	r3, r3
 8011138:	2b00      	cmp	r3, #0
 801113a:	bf14      	ite	ne
 801113c:	2301      	movne	r3, #1
 801113e:	2300      	moveq	r3, #0
 8011140:	b2db      	uxtb	r3, r3
 8011142:	2b00      	cmp	r3, #0
 8011144:	d18d      	bne.n	8011062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801115c:	e02d      	b.n	80111ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	f000 f93e 	bl	80113e0 <I2C_IsAcknowledgeFailed>
 8011164:	4603      	mov	r3, r0
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801116a:	2301      	movs	r3, #1
 801116c:	e02d      	b.n	80111ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011174:	d021      	beq.n	80111ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011176:	f7f5 fb59 	bl	800682c <HAL_GetTick>
 801117a:	4602      	mov	r2, r0
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	429a      	cmp	r2, r3
 8011184:	d302      	bcc.n	801118c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d116      	bne.n	80111ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2200      	movs	r2, #0
 8011190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2220      	movs	r2, #32
 8011196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2200      	movs	r2, #0
 801119e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111a6:	f043 0220 	orr.w	r2, r3, #32
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80111b6:	2301      	movs	r3, #1
 80111b8:	e007      	b.n	80111ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	695b      	ldr	r3, [r3, #20]
 80111c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111c4:	2b80      	cmp	r3, #128	; 0x80
 80111c6:	d1ca      	bne.n	801115e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80111c8:	2300      	movs	r3, #0
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b084      	sub	sp, #16
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	60f8      	str	r0, [r7, #12]
 80111da:	60b9      	str	r1, [r7, #8]
 80111dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80111de:	e02d      	b.n	801123c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f000 f8fd 	bl	80113e0 <I2C_IsAcknowledgeFailed>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80111ec:	2301      	movs	r3, #1
 80111ee:	e02d      	b.n	801124c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f6:	d021      	beq.n	801123c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111f8:	f7f5 fb18 	bl	800682c <HAL_GetTick>
 80111fc:	4602      	mov	r2, r0
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	68ba      	ldr	r2, [r7, #8]
 8011204:	429a      	cmp	r2, r3
 8011206:	d302      	bcc.n	801120e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d116      	bne.n	801123c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2200      	movs	r2, #0
 8011212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2220      	movs	r2, #32
 8011218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2200      	movs	r2, #0
 8011220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011228:	f043 0220 	orr.w	r2, r3, #32
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2200      	movs	r2, #0
 8011234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011238:	2301      	movs	r3, #1
 801123a:	e007      	b.n	801124c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	695b      	ldr	r3, [r3, #20]
 8011242:	f003 0304 	and.w	r3, r3, #4
 8011246:	2b04      	cmp	r3, #4
 8011248:	d1ca      	bne.n	80111e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801124a:	2300      	movs	r3, #0
}
 801124c:	4618      	mov	r0, r3
 801124e:	3710      	adds	r7, #16
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011260:	e029      	b.n	80112b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f000 f8bc 	bl	80113e0 <I2C_IsAcknowledgeFailed>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d001      	beq.n	8011272 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801126e:	2301      	movs	r3, #1
 8011270:	e029      	b.n	80112c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011272:	f7f5 fadb 	bl	800682c <HAL_GetTick>
 8011276:	4602      	mov	r2, r0
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	429a      	cmp	r2, r3
 8011280:	d302      	bcc.n	8011288 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d116      	bne.n	80112b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2200      	movs	r2, #0
 801128c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2220      	movs	r2, #32
 8011292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2200      	movs	r2, #0
 801129a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112a2:	f043 0220 	orr.w	r2, r3, #32
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80112b2:	2301      	movs	r3, #1
 80112b4:	e007      	b.n	80112c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	695b      	ldr	r3, [r3, #20]
 80112bc:	f003 0310 	and.w	r3, r3, #16
 80112c0:	2b10      	cmp	r3, #16
 80112c2:	d1ce      	bne.n	8011262 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80112c4:	2300      	movs	r3, #0
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3710      	adds	r7, #16
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}

080112ce <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80112ce:	b480      	push	{r7}
 80112d0:	b085      	sub	sp, #20
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80112d6:	2300      	movs	r3, #0
 80112d8:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80112da:	4b14      	ldr	r3, [pc, #80]	; (801132c <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	08db      	lsrs	r3, r3, #3
 80112e0:	4a13      	ldr	r2, [pc, #76]	; (8011330 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 80112e2:	fba2 2303 	umull	r2, r3, r2, r3
 80112e6:	0a1a      	lsrs	r2, r3, #8
 80112e8:	4613      	mov	r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	4413      	add	r3, r2
 80112ee:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	3b01      	subs	r3, #1
 80112f4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d107      	bne.n	801130c <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011300:	f043 0220 	orr.w	r2, r3, #32
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011308:	2301      	movs	r3, #1
 801130a:	e008      	b.n	801131e <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801131a:	d0e9      	beq.n	80112f0 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801131c:	2300      	movs	r3, #0
}
 801131e:	4618      	mov	r0, r3
 8011320:	3714      	adds	r7, #20
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
 801132a:	bf00      	nop
 801132c:	20000058 	.word	0x20000058
 8011330:	14f8b589 	.word	0x14f8b589

08011334 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011340:	e042      	b.n	80113c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	695b      	ldr	r3, [r3, #20]
 8011348:	f003 0310 	and.w	r3, r3, #16
 801134c:	2b10      	cmp	r3, #16
 801134e:	d119      	bne.n	8011384 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f06f 0210 	mvn.w	r2, #16
 8011358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2200      	movs	r2, #0
 801135e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2220      	movs	r2, #32
 8011364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2200      	movs	r2, #0
 801136c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2200      	movs	r2, #0
 801137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011380:	2301      	movs	r3, #1
 8011382:	e029      	b.n	80113d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011384:	f7f5 fa52 	bl	800682c <HAL_GetTick>
 8011388:	4602      	mov	r2, r0
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	68ba      	ldr	r2, [r7, #8]
 8011390:	429a      	cmp	r2, r3
 8011392:	d302      	bcc.n	801139a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d116      	bne.n	80113c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2200      	movs	r2, #0
 801139e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2220      	movs	r2, #32
 80113a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2200      	movs	r2, #0
 80113ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113b4:	f043 0220 	orr.w	r2, r3, #32
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e007      	b.n	80113d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	695b      	ldr	r3, [r3, #20]
 80113ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113d2:	2b40      	cmp	r3, #64	; 0x40
 80113d4:	d1b5      	bne.n	8011342 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3710      	adds	r7, #16
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	695b      	ldr	r3, [r3, #20]
 80113ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80113f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113f6:	d11b      	bne.n	8011430 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011400:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2220      	movs	r2, #32
 801140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141c:	f043 0204 	orr.w	r2, r3, #4
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801142c:	2301      	movs	r3, #1
 801142e:	e000      	b.n	8011432 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011430:	2300      	movs	r3, #0
}
 8011432:	4618      	mov	r0, r3
 8011434:	370c      	adds	r7, #12
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr

0801143e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801143e:	b480      	push	{r7}
 8011440:	b083      	sub	sp, #12
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801144e:	d103      	bne.n	8011458 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2201      	movs	r2, #1
 8011454:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8011456:	e007      	b.n	8011468 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8011460:	d102      	bne.n	8011468 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2208      	movs	r2, #8
 8011466:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011468:	bf00      	nop
 801146a:	370c      	adds	r7, #12
 801146c:	46bd      	mov	sp, r7
 801146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011472:	4770      	bx	lr

08011474 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8011474:	b480      	push	{r7}
 8011476:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8011478:	4b08      	ldr	r3, [pc, #32]	; (801149c <HAL_PWR_DeInit+0x28>)
 801147a:	6a1b      	ldr	r3, [r3, #32]
 801147c:	4a07      	ldr	r2, [pc, #28]	; (801149c <HAL_PWR_DeInit+0x28>)
 801147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011482:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8011484:	4b05      	ldr	r3, [pc, #20]	; (801149c <HAL_PWR_DeInit+0x28>)
 8011486:	6a1b      	ldr	r3, [r3, #32]
 8011488:	4a04      	ldr	r2, [pc, #16]	; (801149c <HAL_PWR_DeInit+0x28>)
 801148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801148e:	6213      	str	r3, [r2, #32]
}
 8011490:	bf00      	nop
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	40023800 	.word	0x40023800

080114a0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80114a6:	4b06      	ldr	r3, [pc, #24]	; (80114c0 <HAL_PWR_EnableBkUpAccess+0x20>)
 80114a8:	2201      	movs	r2, #1
 80114aa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80114ac:	4b05      	ldr	r3, [pc, #20]	; (80114c4 <HAL_PWR_EnableBkUpAccess+0x24>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80114b2:	687b      	ldr	r3, [r7, #4]
}
 80114b4:	bf00      	nop
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	420e0020 	.word	0x420e0020
 80114c4:	40007000 	.word	0x40007000

080114c8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80114ce:	4b06      	ldr	r3, [pc, #24]	; (80114e8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80114d0:	2200      	movs	r2, #0
 80114d2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80114d4:	4b05      	ldr	r3, [pc, #20]	; (80114ec <HAL_PWR_DisableBkUpAccess+0x24>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80114da:	687b      	ldr	r3, [r7, #4]
}
 80114dc:	bf00      	nop
 80114de:	370c      	adds	r7, #12
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	420e0020 	.word	0x420e0020
 80114ec:	40007000 	.word	0x40007000

080114f0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80114f8:	4b2b      	ldr	r3, [pc, #172]	; (80115a8 <HAL_PWR_ConfigPVD+0xb8>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4928      	ldr	r1, [pc, #160]	; (80115a8 <HAL_PWR_ConfigPVD+0xb8>)
 8011506:	4313      	orrs	r3, r2
 8011508:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 801150a:	4b28      	ldr	r3, [pc, #160]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	4a27      	ldr	r2, [pc, #156]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011514:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8011516:	4b25      	ldr	r3, [pc, #148]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4a24      	ldr	r2, [pc, #144]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 801151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011520:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8011522:	4b22      	ldr	r3, [pc, #136]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	4a21      	ldr	r2, [pc, #132]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801152c:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 801152e:	4b1f      	ldr	r3, [pc, #124]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	4a1e      	ldr	r2, [pc, #120]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011538:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011542:	2b00      	cmp	r3, #0
 8011544:	d005      	beq.n	8011552 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8011546:	4b19      	ldr	r3, [pc, #100]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	4a18      	ldr	r2, [pc, #96]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 801154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011550:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801155a:	2b00      	cmp	r3, #0
 801155c:	d005      	beq.n	801156a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 801155e:	4b13      	ldr	r3, [pc, #76]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	4a12      	ldr	r2, [pc, #72]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011568:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	f003 0301 	and.w	r3, r3, #1
 8011572:	2b00      	cmp	r3, #0
 8011574:	d005      	beq.n	8011582 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8011576:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	4a0c      	ldr	r2, [pc, #48]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 801157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011580:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	f003 0302 	and.w	r3, r3, #2
 801158a:	2b00      	cmp	r3, #0
 801158c:	d005      	beq.n	801159a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 801158e:	4b07      	ldr	r3, [pc, #28]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	4a06      	ldr	r2, [pc, #24]	; (80115ac <HAL_PWR_ConfigPVD+0xbc>)
 8011594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011598:	60d3      	str	r3, [r2, #12]
  }
}
 801159a:	bf00      	nop
 801159c:	370c      	adds	r7, #12
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	40007000 	.word	0x40007000
 80115ac:	40013c00 	.word	0x40013c00

080115b0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80115b0:	b480      	push	{r7}
 80115b2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80115b4:	4b03      	ldr	r3, [pc, #12]	; (80115c4 <HAL_PWR_EnablePVD+0x14>)
 80115b6:	2201      	movs	r2, #1
 80115b8:	601a      	str	r2, [r3, #0]
}
 80115ba:	bf00      	nop
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	420e0010 	.word	0x420e0010

080115c8 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80115c8:	b480      	push	{r7}
 80115ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80115cc:	4b03      	ldr	r3, [pc, #12]	; (80115dc <HAL_PWR_DisablePVD+0x14>)
 80115ce:	2200      	movs	r2, #0
 80115d0:	601a      	str	r2, [r3, #0]
}
 80115d2:	bf00      	nop
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr
 80115dc:	420e0010 	.word	0x420e0010

080115e0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b083      	sub	sp, #12
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80115e8:	4b05      	ldr	r3, [pc, #20]	; (8011600 <HAL_PWR_EnableWakeUpPin+0x20>)
 80115ea:	685a      	ldr	r2, [r3, #4]
 80115ec:	4904      	ldr	r1, [pc, #16]	; (8011600 <HAL_PWR_EnableWakeUpPin+0x20>)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4313      	orrs	r3, r2
 80115f2:	604b      	str	r3, [r1, #4]
}
 80115f4:	bf00      	nop
 80115f6:	370c      	adds	r7, #12
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr
 8011600:	40007000 	.word	0x40007000

08011604 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 801160c:	4b06      	ldr	r3, [pc, #24]	; (8011628 <HAL_PWR_DisableWakeUpPin+0x24>)
 801160e:	685a      	ldr	r2, [r3, #4]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	43db      	mvns	r3, r3
 8011614:	4904      	ldr	r1, [pc, #16]	; (8011628 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011616:	4013      	ands	r3, r2
 8011618:	604b      	str	r3, [r1, #4]
}
 801161a:	bf00      	nop
 801161c:	370c      	adds	r7, #12
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr
 8011626:	bf00      	nop
 8011628:	40007000 	.word	0x40007000

0801162c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	460b      	mov	r3, r1
 8011636:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011638:	4b09      	ldr	r3, [pc, #36]	; (8011660 <HAL_PWR_EnterSLEEPMode+0x34>)
 801163a:	691b      	ldr	r3, [r3, #16]
 801163c:	4a08      	ldr	r2, [pc, #32]	; (8011660 <HAL_PWR_EnterSLEEPMode+0x34>)
 801163e:	f023 0304 	bic.w	r3, r3, #4
 8011642:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011644:	78fb      	ldrb	r3, [r7, #3]
 8011646:	2b01      	cmp	r3, #1
 8011648:	d101      	bne.n	801164e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801164a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 801164c:	e002      	b.n	8011654 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 801164e:	bf40      	sev
    __WFE();
 8011650:	bf20      	wfe
    __WFE();
 8011652:	bf20      	wfe
}
 8011654:	bf00      	nop
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr
 8011660:	e000ed00 	.word	0xe000ed00

08011664 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	460b      	mov	r3, r1
 801166e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8011670:	4b10      	ldr	r3, [pc, #64]	; (80116b4 <HAL_PWR_EnterSTOPMode+0x50>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f023 0203 	bic.w	r2, r3, #3
 8011678:	490e      	ldr	r1, [pc, #56]	; (80116b4 <HAL_PWR_EnterSTOPMode+0x50>)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	4313      	orrs	r3, r2
 801167e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011680:	4b0d      	ldr	r3, [pc, #52]	; (80116b8 <HAL_PWR_EnterSTOPMode+0x54>)
 8011682:	691b      	ldr	r3, [r3, #16]
 8011684:	4a0c      	ldr	r2, [pc, #48]	; (80116b8 <HAL_PWR_EnterSTOPMode+0x54>)
 8011686:	f043 0304 	orr.w	r3, r3, #4
 801168a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801168c:	78fb      	ldrb	r3, [r7, #3]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d101      	bne.n	8011696 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011692:	bf30      	wfi
 8011694:	e002      	b.n	801169c <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8011696:	bf40      	sev
    __WFE();
 8011698:	bf20      	wfe
    __WFE();
 801169a:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 801169c:	4b06      	ldr	r3, [pc, #24]	; (80116b8 <HAL_PWR_EnterSTOPMode+0x54>)
 801169e:	691b      	ldr	r3, [r3, #16]
 80116a0:	4a05      	ldr	r2, [pc, #20]	; (80116b8 <HAL_PWR_EnterSTOPMode+0x54>)
 80116a2:	f023 0304 	bic.w	r3, r3, #4
 80116a6:	6113      	str	r3, [r2, #16]
}
 80116a8:	bf00      	nop
 80116aa:	370c      	adds	r7, #12
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr
 80116b4:	40007000 	.word	0x40007000
 80116b8:	e000ed00 	.word	0xe000ed00

080116bc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80116c0:	4b08      	ldr	r3, [pc, #32]	; (80116e4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4a07      	ldr	r2, [pc, #28]	; (80116e4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80116c6:	f043 0302 	orr.w	r3, r3, #2
 80116ca:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80116cc:	4b06      	ldr	r3, [pc, #24]	; (80116e8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80116ce:	691b      	ldr	r3, [r3, #16]
 80116d0:	4a05      	ldr	r2, [pc, #20]	; (80116e8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80116d2:	f043 0304 	orr.w	r3, r3, #4
 80116d6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80116d8:	bf30      	wfi
}
 80116da:	bf00      	nop
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr
 80116e4:	40007000 	.word	0x40007000
 80116e8:	e000ed00 	.word	0xe000ed00

080116ec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80116f0:	4b06      	ldr	r3, [pc, #24]	; (801170c <HAL_PWR_PVD_IRQHandler+0x20>)
 80116f2:	695b      	ldr	r3, [r3, #20]
 80116f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d005      	beq.n	8011708 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80116fc:	f000 f808 	bl	8011710 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011700:	4b02      	ldr	r3, [pc, #8]	; (801170c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011706:	615a      	str	r2, [r3, #20]
  }
}
 8011708:	bf00      	nop
 801170a:	bd80      	pop	{r7, pc}
 801170c:	40013c00 	.word	0x40013c00

08011710 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011710:	b480      	push	{r7}
 8011712:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8011714:	bf00      	nop
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 801171e:	b480      	push	{r7}
 8011720:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011722:	4b05      	ldr	r3, [pc, #20]	; (8011738 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011724:	691b      	ldr	r3, [r3, #16]
 8011726:	4a04      	ldr	r2, [pc, #16]	; (8011738 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011728:	f043 0302 	orr.w	r3, r3, #2
 801172c:	6113      	str	r3, [r2, #16]
}
 801172e:	bf00      	nop
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr
 8011738:	e000ed00 	.word	0xe000ed00

0801173c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 801173c:	b480      	push	{r7}
 801173e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011740:	4b05      	ldr	r3, [pc, #20]	; (8011758 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011742:	691b      	ldr	r3, [r3, #16]
 8011744:	4a04      	ldr	r2, [pc, #16]	; (8011758 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011746:	f023 0302 	bic.w	r3, r3, #2
 801174a:	6113      	str	r3, [r2, #16]
}
 801174c:	bf00      	nop
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr
 8011756:	bf00      	nop
 8011758:	e000ed00 	.word	0xe000ed00

0801175c <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 801175c:	b480      	push	{r7}
 801175e:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011760:	4b05      	ldr	r3, [pc, #20]	; (8011778 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	4a04      	ldr	r2, [pc, #16]	; (8011778 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011766:	f043 0310 	orr.w	r3, r3, #16
 801176a:	6113      	str	r3, [r2, #16]
}
 801176c:	bf00      	nop
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop
 8011778:	e000ed00 	.word	0xe000ed00

0801177c <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 801177c:	b480      	push	{r7}
 801177e:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011780:	4b05      	ldr	r3, [pc, #20]	; (8011798 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	4a04      	ldr	r2, [pc, #16]	; (8011798 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011786:	f023 0310 	bic.w	r3, r3, #16
 801178a:	6113      	str	r3, [r2, #16]
}
 801178c:	bf00      	nop
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr
 8011796:	bf00      	nop
 8011798:	e000ed00 	.word	0xe000ed00

0801179c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80117a2:	2300      	movs	r3, #0
 80117a4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80117a6:	4b0e      	ldr	r3, [pc, #56]	; (80117e0 <HAL_PWREx_EnableBkUpReg+0x44>)
 80117a8:	2201      	movs	r2, #1
 80117aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80117ac:	f7f5 f83e 	bl	800682c <HAL_GetTick>
 80117b0:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80117b2:	e009      	b.n	80117c8 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80117b4:	f7f5 f83a 	bl	800682c <HAL_GetTick>
 80117b8:	4602      	mov	r2, r0
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	1ad3      	subs	r3, r2, r3
 80117be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80117c2:	d901      	bls.n	80117c8 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 80117c4:	2303      	movs	r3, #3
 80117c6:	e006      	b.n	80117d6 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80117c8:	4b06      	ldr	r3, [pc, #24]	; (80117e4 <HAL_PWREx_EnableBkUpReg+0x48>)
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	f003 0308 	and.w	r3, r3, #8
 80117d0:	2b08      	cmp	r3, #8
 80117d2:	d1ef      	bne.n	80117b4 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	420e00a4 	.word	0x420e00a4
 80117e4:	40007000 	.word	0x40007000

080117e8 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80117ee:	2300      	movs	r3, #0
 80117f0:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 80117f2:	4b0e      	ldr	r3, [pc, #56]	; (801182c <HAL_PWREx_DisableBkUpReg+0x44>)
 80117f4:	2200      	movs	r2, #0
 80117f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80117f8:	f7f5 f818 	bl	800682c <HAL_GetTick>
 80117fc:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 80117fe:	e009      	b.n	8011814 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011800:	f7f5 f814 	bl	800682c <HAL_GetTick>
 8011804:	4602      	mov	r2, r0
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801180e:	d901      	bls.n	8011814 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011810:	2303      	movs	r3, #3
 8011812:	e006      	b.n	8011822 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011814:	4b06      	ldr	r3, [pc, #24]	; (8011830 <HAL_PWREx_DisableBkUpReg+0x48>)
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	f003 0308 	and.w	r3, r3, #8
 801181c:	2b08      	cmp	r3, #8
 801181e:	d0ef      	beq.n	8011800 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011820:	2300      	movs	r3, #0
}
 8011822:	4618      	mov	r0, r3
 8011824:	3708      	adds	r7, #8
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	420e00a4 	.word	0x420e00a4
 8011830:	40007000 	.word	0x40007000

08011834 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011834:	b480      	push	{r7}
 8011836:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011838:	4b03      	ldr	r3, [pc, #12]	; (8011848 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 801183a:	2201      	movs	r2, #1
 801183c:	601a      	str	r2, [r3, #0]
}
 801183e:	bf00      	nop
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	420e0024 	.word	0x420e0024

0801184c <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 801184c:	b480      	push	{r7}
 801184e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011850:	4b03      	ldr	r3, [pc, #12]	; (8011860 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]
}
 8011856:	bf00      	nop
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr
 8011860:	420e0024 	.word	0x420e0024

08011864 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011864:	b480      	push	{r7}
 8011866:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011868:	4b04      	ldr	r3, [pc, #16]	; (801187c <HAL_PWREx_GetVoltageRange+0x18>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8011870:	4618      	mov	r0, r3
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	40007000 	.word	0x40007000

08011880 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b086      	sub	sp, #24
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011888:	2300      	movs	r3, #0
 801188a:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 801188c:	2300      	movs	r3, #0
 801188e:	60fb      	str	r3, [r7, #12]
 8011890:	4b1a      	ldr	r3, [pc, #104]	; (80118fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011894:	4a19      	ldr	r2, [pc, #100]	; (80118fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801189a:	6413      	str	r3, [r2, #64]	; 0x40
 801189c:	4b17      	ldr	r3, [pc, #92]	; (80118fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118a4:	60fb      	str	r3, [r7, #12]
 80118a6:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 80118a8:	2300      	movs	r3, #0
 80118aa:	613b      	str	r3, [r7, #16]
 80118ac:	4b14      	ldr	r3, [pc, #80]	; (8011900 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80118b4:	4912      	ldr	r1, [pc, #72]	; (8011900 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	4313      	orrs	r3, r2
 80118ba:	600b      	str	r3, [r1, #0]
 80118bc:	4b10      	ldr	r3, [pc, #64]	; (8011900 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118c4:	613b      	str	r3, [r7, #16]
 80118c6:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80118c8:	f7f4 ffb0 	bl	800682c <HAL_GetTick>
 80118cc:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80118ce:	e009      	b.n	80118e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 80118d0:	f7f4 ffac 	bl	800682c <HAL_GetTick>
 80118d4:	4602      	mov	r2, r0
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80118de:	d901      	bls.n	80118e4 <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 80118e0:	2303      	movs	r3, #3
 80118e2:	e007      	b.n	80118f4 <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80118e4:	4b06      	ldr	r3, [pc, #24]	; (8011900 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80118f0:	d1ee      	bne.n	80118d0 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	40023800 	.word	0x40023800
 8011900:	40007000 	.word	0x40007000

08011904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b086      	sub	sp, #24
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d101      	bne.n	8011916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011912:	2301      	movs	r3, #1
 8011914:	e267      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f003 0301 	and.w	r3, r3, #1
 801191e:	2b00      	cmp	r3, #0
 8011920:	d075      	beq.n	8011a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011922:	4b88      	ldr	r3, [pc, #544]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011924:	689b      	ldr	r3, [r3, #8]
 8011926:	f003 030c 	and.w	r3, r3, #12
 801192a:	2b04      	cmp	r3, #4
 801192c:	d00c      	beq.n	8011948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801192e:	4b85      	ldr	r3, [pc, #532]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011936:	2b08      	cmp	r3, #8
 8011938:	d112      	bne.n	8011960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801193a:	4b82      	ldr	r3, [pc, #520]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011946:	d10b      	bne.n	8011960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011948:	4b7e      	ldr	r3, [pc, #504]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011950:	2b00      	cmp	r3, #0
 8011952:	d05b      	beq.n	8011a0c <HAL_RCC_OscConfig+0x108>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d157      	bne.n	8011a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801195c:	2301      	movs	r3, #1
 801195e:	e242      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011968:	d106      	bne.n	8011978 <HAL_RCC_OscConfig+0x74>
 801196a:	4b76      	ldr	r3, [pc, #472]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	4a75      	ldr	r2, [pc, #468]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011974:	6013      	str	r3, [r2, #0]
 8011976:	e01d      	b.n	80119b4 <HAL_RCC_OscConfig+0xb0>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011980:	d10c      	bne.n	801199c <HAL_RCC_OscConfig+0x98>
 8011982:	4b70      	ldr	r3, [pc, #448]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a6f      	ldr	r2, [pc, #444]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801198c:	6013      	str	r3, [r2, #0]
 801198e:	4b6d      	ldr	r3, [pc, #436]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	4a6c      	ldr	r2, [pc, #432]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011998:	6013      	str	r3, [r2, #0]
 801199a:	e00b      	b.n	80119b4 <HAL_RCC_OscConfig+0xb0>
 801199c:	4b69      	ldr	r3, [pc, #420]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a68      	ldr	r2, [pc, #416]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 80119a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80119a6:	6013      	str	r3, [r2, #0]
 80119a8:	4b66      	ldr	r3, [pc, #408]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a65      	ldr	r2, [pc, #404]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 80119ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80119b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d013      	beq.n	80119e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119bc:	f7f4 ff36 	bl	800682c <HAL_GetTick>
 80119c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119c2:	e008      	b.n	80119d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119c4:	f7f4 ff32 	bl	800682c <HAL_GetTick>
 80119c8:	4602      	mov	r2, r0
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	1ad3      	subs	r3, r2, r3
 80119ce:	2b64      	cmp	r3, #100	; 0x64
 80119d0:	d901      	bls.n	80119d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80119d2:	2303      	movs	r3, #3
 80119d4:	e207      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80119d6:	4b5b      	ldr	r3, [pc, #364]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d0f0      	beq.n	80119c4 <HAL_RCC_OscConfig+0xc0>
 80119e2:	e014      	b.n	8011a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119e4:	f7f4 ff22 	bl	800682c <HAL_GetTick>
 80119e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80119ea:	e008      	b.n	80119fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119ec:	f7f4 ff1e 	bl	800682c <HAL_GetTick>
 80119f0:	4602      	mov	r2, r0
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	1ad3      	subs	r3, r2, r3
 80119f6:	2b64      	cmp	r3, #100	; 0x64
 80119f8:	d901      	bls.n	80119fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80119fa:	2303      	movs	r3, #3
 80119fc:	e1f3      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80119fe:	4b51      	ldr	r3, [pc, #324]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1f0      	bne.n	80119ec <HAL_RCC_OscConfig+0xe8>
 8011a0a:	e000      	b.n	8011a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f003 0302 	and.w	r3, r3, #2
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d063      	beq.n	8011ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a1a:	4b4a      	ldr	r3, [pc, #296]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	f003 030c 	and.w	r3, r3, #12
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00b      	beq.n	8011a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a26:	4b47      	ldr	r3, [pc, #284]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a28:	689b      	ldr	r3, [r3, #8]
 8011a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a2e:	2b08      	cmp	r3, #8
 8011a30:	d11c      	bne.n	8011a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a32:	4b44      	ldr	r3, [pc, #272]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d116      	bne.n	8011a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011a3e:	4b41      	ldr	r3, [pc, #260]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f003 0302 	and.w	r3, r3, #2
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d005      	beq.n	8011a56 <HAL_RCC_OscConfig+0x152>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d001      	beq.n	8011a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011a52:	2301      	movs	r3, #1
 8011a54:	e1c7      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a56:	4b3b      	ldr	r3, [pc, #236]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	691b      	ldr	r3, [r3, #16]
 8011a62:	00db      	lsls	r3, r3, #3
 8011a64:	4937      	ldr	r1, [pc, #220]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a66:	4313      	orrs	r3, r2
 8011a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011a6a:	e03a      	b.n	8011ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d020      	beq.n	8011ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011a74:	4b34      	ldr	r3, [pc, #208]	; (8011b48 <HAL_RCC_OscConfig+0x244>)
 8011a76:	2201      	movs	r2, #1
 8011a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a7a:	f7f4 fed7 	bl	800682c <HAL_GetTick>
 8011a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a80:	e008      	b.n	8011a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a82:	f7f4 fed3 	bl	800682c <HAL_GetTick>
 8011a86:	4602      	mov	r2, r0
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	2b02      	cmp	r3, #2
 8011a8e:	d901      	bls.n	8011a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011a90:	2303      	movs	r3, #3
 8011a92:	e1a8      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a94:	4b2b      	ldr	r3, [pc, #172]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f003 0302 	and.w	r3, r3, #2
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d0f0      	beq.n	8011a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011aa0:	4b28      	ldr	r3, [pc, #160]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	691b      	ldr	r3, [r3, #16]
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	4925      	ldr	r1, [pc, #148]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	600b      	str	r3, [r1, #0]
 8011ab4:	e015      	b.n	8011ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011ab6:	4b24      	ldr	r3, [pc, #144]	; (8011b48 <HAL_RCC_OscConfig+0x244>)
 8011ab8:	2200      	movs	r2, #0
 8011aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011abc:	f7f4 feb6 	bl	800682c <HAL_GetTick>
 8011ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011ac2:	e008      	b.n	8011ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011ac4:	f7f4 feb2 	bl	800682c <HAL_GetTick>
 8011ac8:	4602      	mov	r2, r0
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	1ad3      	subs	r3, r2, r3
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	d901      	bls.n	8011ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	e187      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011ad6:	4b1b      	ldr	r3, [pc, #108]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f003 0302 	and.w	r3, r3, #2
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d1f0      	bne.n	8011ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f003 0308 	and.w	r3, r3, #8
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d036      	beq.n	8011b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	695b      	ldr	r3, [r3, #20]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d016      	beq.n	8011b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011af6:	4b15      	ldr	r3, [pc, #84]	; (8011b4c <HAL_RCC_OscConfig+0x248>)
 8011af8:	2201      	movs	r2, #1
 8011afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011afc:	f7f4 fe96 	bl	800682c <HAL_GetTick>
 8011b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011b02:	e008      	b.n	8011b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b04:	f7f4 fe92 	bl	800682c <HAL_GetTick>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	2b02      	cmp	r3, #2
 8011b10:	d901      	bls.n	8011b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011b12:	2303      	movs	r3, #3
 8011b14:	e167      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011b16:	4b0b      	ldr	r3, [pc, #44]	; (8011b44 <HAL_RCC_OscConfig+0x240>)
 8011b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b1a:	f003 0302 	and.w	r3, r3, #2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d0f0      	beq.n	8011b04 <HAL_RCC_OscConfig+0x200>
 8011b22:	e01b      	b.n	8011b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011b24:	4b09      	ldr	r3, [pc, #36]	; (8011b4c <HAL_RCC_OscConfig+0x248>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b2a:	f7f4 fe7f 	bl	800682c <HAL_GetTick>
 8011b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011b30:	e00e      	b.n	8011b50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b32:	f7f4 fe7b 	bl	800682c <HAL_GetTick>
 8011b36:	4602      	mov	r2, r0
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	d907      	bls.n	8011b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011b40:	2303      	movs	r3, #3
 8011b42:	e150      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
 8011b44:	40023800 	.word	0x40023800
 8011b48:	42470000 	.word	0x42470000
 8011b4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011b50:	4b88      	ldr	r3, [pc, #544]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b54:	f003 0302 	and.w	r3, r3, #2
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d1ea      	bne.n	8011b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f003 0304 	and.w	r3, r3, #4
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	f000 8097 	beq.w	8011c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011b6e:	4b81      	ldr	r3, [pc, #516]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d10f      	bne.n	8011b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60bb      	str	r3, [r7, #8]
 8011b7e:	4b7d      	ldr	r3, [pc, #500]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b82:	4a7c      	ldr	r2, [pc, #496]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b88:	6413      	str	r3, [r2, #64]	; 0x40
 8011b8a:	4b7a      	ldr	r3, [pc, #488]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b92:	60bb      	str	r3, [r7, #8]
 8011b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011b96:	2301      	movs	r3, #1
 8011b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011b9a:	4b77      	ldr	r3, [pc, #476]	; (8011d78 <HAL_RCC_OscConfig+0x474>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d118      	bne.n	8011bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011ba6:	4b74      	ldr	r3, [pc, #464]	; (8011d78 <HAL_RCC_OscConfig+0x474>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	4a73      	ldr	r2, [pc, #460]	; (8011d78 <HAL_RCC_OscConfig+0x474>)
 8011bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011bb2:	f7f4 fe3b 	bl	800682c <HAL_GetTick>
 8011bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011bb8:	e008      	b.n	8011bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011bba:	f7f4 fe37 	bl	800682c <HAL_GetTick>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	2b02      	cmp	r3, #2
 8011bc6:	d901      	bls.n	8011bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011bc8:	2303      	movs	r3, #3
 8011bca:	e10c      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011bcc:	4b6a      	ldr	r3, [pc, #424]	; (8011d78 <HAL_RCC_OscConfig+0x474>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d0f0      	beq.n	8011bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d106      	bne.n	8011bee <HAL_RCC_OscConfig+0x2ea>
 8011be0:	4b64      	ldr	r3, [pc, #400]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011be4:	4a63      	ldr	r2, [pc, #396]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011be6:	f043 0301 	orr.w	r3, r3, #1
 8011bea:	6713      	str	r3, [r2, #112]	; 0x70
 8011bec:	e01c      	b.n	8011c28 <HAL_RCC_OscConfig+0x324>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	689b      	ldr	r3, [r3, #8]
 8011bf2:	2b05      	cmp	r3, #5
 8011bf4:	d10c      	bne.n	8011c10 <HAL_RCC_OscConfig+0x30c>
 8011bf6:	4b5f      	ldr	r3, [pc, #380]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bfa:	4a5e      	ldr	r2, [pc, #376]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011bfc:	f043 0304 	orr.w	r3, r3, #4
 8011c00:	6713      	str	r3, [r2, #112]	; 0x70
 8011c02:	4b5c      	ldr	r3, [pc, #368]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c06:	4a5b      	ldr	r2, [pc, #364]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c08:	f043 0301 	orr.w	r3, r3, #1
 8011c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8011c0e:	e00b      	b.n	8011c28 <HAL_RCC_OscConfig+0x324>
 8011c10:	4b58      	ldr	r3, [pc, #352]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c14:	4a57      	ldr	r2, [pc, #348]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c16:	f023 0301 	bic.w	r3, r3, #1
 8011c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8011c1c:	4b55      	ldr	r3, [pc, #340]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c20:	4a54      	ldr	r2, [pc, #336]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c22:	f023 0304 	bic.w	r3, r3, #4
 8011c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d015      	beq.n	8011c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c30:	f7f4 fdfc 	bl	800682c <HAL_GetTick>
 8011c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c36:	e00a      	b.n	8011c4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c38:	f7f4 fdf8 	bl	800682c <HAL_GetTick>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d901      	bls.n	8011c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011c4a:	2303      	movs	r3, #3
 8011c4c:	e0cb      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c4e:	4b49      	ldr	r3, [pc, #292]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c52:	f003 0302 	and.w	r3, r3, #2
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d0ee      	beq.n	8011c38 <HAL_RCC_OscConfig+0x334>
 8011c5a:	e014      	b.n	8011c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011c5c:	f7f4 fde6 	bl	800682c <HAL_GetTick>
 8011c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011c62:	e00a      	b.n	8011c7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c64:	f7f4 fde2 	bl	800682c <HAL_GetTick>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d901      	bls.n	8011c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011c76:	2303      	movs	r3, #3
 8011c78:	e0b5      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011c7a:	4b3e      	ldr	r3, [pc, #248]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c7e:	f003 0302 	and.w	r3, r3, #2
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1ee      	bne.n	8011c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011c86:	7dfb      	ldrb	r3, [r7, #23]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d105      	bne.n	8011c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011c8c:	4b39      	ldr	r3, [pc, #228]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c90:	4a38      	ldr	r2, [pc, #224]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011c96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	699b      	ldr	r3, [r3, #24]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f000 80a1 	beq.w	8011de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011ca2:	4b34      	ldr	r3, [pc, #208]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011ca4:	689b      	ldr	r3, [r3, #8]
 8011ca6:	f003 030c 	and.w	r3, r3, #12
 8011caa:	2b08      	cmp	r3, #8
 8011cac:	d05c      	beq.n	8011d68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	2b02      	cmp	r3, #2
 8011cb4:	d141      	bne.n	8011d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011cb6:	4b31      	ldr	r3, [pc, #196]	; (8011d7c <HAL_RCC_OscConfig+0x478>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011cbc:	f7f4 fdb6 	bl	800682c <HAL_GetTick>
 8011cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011cc2:	e008      	b.n	8011cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011cc4:	f7f4 fdb2 	bl	800682c <HAL_GetTick>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	2b02      	cmp	r3, #2
 8011cd0:	d901      	bls.n	8011cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011cd2:	2303      	movs	r3, #3
 8011cd4:	e087      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011cd6:	4b27      	ldr	r3, [pc, #156]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d1f0      	bne.n	8011cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	69da      	ldr	r2, [r3, #28]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6a1b      	ldr	r3, [r3, #32]
 8011cea:	431a      	orrs	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cf0:	019b      	lsls	r3, r3, #6
 8011cf2:	431a      	orrs	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cf8:	085b      	lsrs	r3, r3, #1
 8011cfa:	3b01      	subs	r3, #1
 8011cfc:	041b      	lsls	r3, r3, #16
 8011cfe:	431a      	orrs	r2, r3
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d04:	061b      	lsls	r3, r3, #24
 8011d06:	491b      	ldr	r1, [pc, #108]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011d08:	4313      	orrs	r3, r2
 8011d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011d0c:	4b1b      	ldr	r3, [pc, #108]	; (8011d7c <HAL_RCC_OscConfig+0x478>)
 8011d0e:	2201      	movs	r2, #1
 8011d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d12:	f7f4 fd8b 	bl	800682c <HAL_GetTick>
 8011d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d18:	e008      	b.n	8011d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d1a:	f7f4 fd87 	bl	800682c <HAL_GetTick>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d901      	bls.n	8011d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011d28:	2303      	movs	r3, #3
 8011d2a:	e05c      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d2c:	4b11      	ldr	r3, [pc, #68]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d0f0      	beq.n	8011d1a <HAL_RCC_OscConfig+0x416>
 8011d38:	e054      	b.n	8011de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d3a:	4b10      	ldr	r3, [pc, #64]	; (8011d7c <HAL_RCC_OscConfig+0x478>)
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d40:	f7f4 fd74 	bl	800682c <HAL_GetTick>
 8011d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d46:	e008      	b.n	8011d5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d48:	f7f4 fd70 	bl	800682c <HAL_GetTick>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d901      	bls.n	8011d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011d56:	2303      	movs	r3, #3
 8011d58:	e045      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d5a:	4b06      	ldr	r3, [pc, #24]	; (8011d74 <HAL_RCC_OscConfig+0x470>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1f0      	bne.n	8011d48 <HAL_RCC_OscConfig+0x444>
 8011d66:	e03d      	b.n	8011de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	699b      	ldr	r3, [r3, #24]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d107      	bne.n	8011d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011d70:	2301      	movs	r3, #1
 8011d72:	e038      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
 8011d74:	40023800 	.word	0x40023800
 8011d78:	40007000 	.word	0x40007000
 8011d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011d80:	4b1b      	ldr	r3, [pc, #108]	; (8011df0 <HAL_RCC_OscConfig+0x4ec>)
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	699b      	ldr	r3, [r3, #24]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d028      	beq.n	8011de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d121      	bne.n	8011de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d11a      	bne.n	8011de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011daa:	68fa      	ldr	r2, [r7, #12]
 8011dac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011db0:	4013      	ands	r3, r2
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d111      	bne.n	8011de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dc6:	085b      	lsrs	r3, r3, #1
 8011dc8:	3b01      	subs	r3, #1
 8011dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d107      	bne.n	8011de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d001      	beq.n	8011de4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8011de0:	2301      	movs	r3, #1
 8011de2:	e000      	b.n	8011de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011de4:	2300      	movs	r3, #0
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3718      	adds	r7, #24
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	40023800 	.word	0x40023800

08011df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d101      	bne.n	8011e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011e04:	2301      	movs	r3, #1
 8011e06:	e0cc      	b.n	8011fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011e08:	4b68      	ldr	r3, [pc, #416]	; (8011fac <HAL_RCC_ClockConfig+0x1b8>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f003 0307 	and.w	r3, r3, #7
 8011e10:	683a      	ldr	r2, [r7, #0]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d90c      	bls.n	8011e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e16:	4b65      	ldr	r3, [pc, #404]	; (8011fac <HAL_RCC_ClockConfig+0x1b8>)
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	b2d2      	uxtb	r2, r2
 8011e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e1e:	4b63      	ldr	r3, [pc, #396]	; (8011fac <HAL_RCC_ClockConfig+0x1b8>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	f003 0307 	and.w	r3, r3, #7
 8011e26:	683a      	ldr	r2, [r7, #0]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d001      	beq.n	8011e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	e0b8      	b.n	8011fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f003 0302 	and.w	r3, r3, #2
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d020      	beq.n	8011e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f003 0304 	and.w	r3, r3, #4
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d005      	beq.n	8011e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011e48:	4b59      	ldr	r3, [pc, #356]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	4a58      	ldr	r2, [pc, #352]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f003 0308 	and.w	r3, r3, #8
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d005      	beq.n	8011e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011e60:	4b53      	ldr	r3, [pc, #332]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	4a52      	ldr	r2, [pc, #328]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011e6c:	4b50      	ldr	r3, [pc, #320]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e6e:	689b      	ldr	r3, [r3, #8]
 8011e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	689b      	ldr	r3, [r3, #8]
 8011e78:	494d      	ldr	r1, [pc, #308]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e7a:	4313      	orrs	r3, r2
 8011e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f003 0301 	and.w	r3, r3, #1
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d044      	beq.n	8011f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d107      	bne.n	8011ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011e92:	4b47      	ldr	r3, [pc, #284]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d119      	bne.n	8011ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e07f      	b.n	8011fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	2b02      	cmp	r3, #2
 8011ea8:	d003      	beq.n	8011eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011eae:	2b03      	cmp	r3, #3
 8011eb0:	d107      	bne.n	8011ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011eb2:	4b3f      	ldr	r3, [pc, #252]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d109      	bne.n	8011ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	e06f      	b.n	8011fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ec2:	4b3b      	ldr	r3, [pc, #236]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	f003 0302 	and.w	r3, r3, #2
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d101      	bne.n	8011ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	e067      	b.n	8011fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011ed2:	4b37      	ldr	r3, [pc, #220]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	f023 0203 	bic.w	r2, r3, #3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	4934      	ldr	r1, [pc, #208]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011ee4:	f7f4 fca2 	bl	800682c <HAL_GetTick>
 8011ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011eea:	e00a      	b.n	8011f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011eec:	f7f4 fc9e 	bl	800682c <HAL_GetTick>
 8011ef0:	4602      	mov	r2, r0
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	1ad3      	subs	r3, r2, r3
 8011ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011efa:	4293      	cmp	r3, r2
 8011efc:	d901      	bls.n	8011f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011efe:	2303      	movs	r3, #3
 8011f00:	e04f      	b.n	8011fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f02:	4b2b      	ldr	r3, [pc, #172]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f04:	689b      	ldr	r3, [r3, #8]
 8011f06:	f003 020c 	and.w	r2, r3, #12
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d1eb      	bne.n	8011eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011f14:	4b25      	ldr	r3, [pc, #148]	; (8011fac <HAL_RCC_ClockConfig+0x1b8>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f003 0307 	and.w	r3, r3, #7
 8011f1c:	683a      	ldr	r2, [r7, #0]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d20c      	bcs.n	8011f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f22:	4b22      	ldr	r3, [pc, #136]	; (8011fac <HAL_RCC_ClockConfig+0x1b8>)
 8011f24:	683a      	ldr	r2, [r7, #0]
 8011f26:	b2d2      	uxtb	r2, r2
 8011f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f2a:	4b20      	ldr	r3, [pc, #128]	; (8011fac <HAL_RCC_ClockConfig+0x1b8>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f003 0307 	and.w	r3, r3, #7
 8011f32:	683a      	ldr	r2, [r7, #0]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d001      	beq.n	8011f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	e032      	b.n	8011fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f003 0304 	and.w	r3, r3, #4
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d008      	beq.n	8011f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011f48:	4b19      	ldr	r3, [pc, #100]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f4a:	689b      	ldr	r3, [r3, #8]
 8011f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	4916      	ldr	r1, [pc, #88]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f56:	4313      	orrs	r3, r2
 8011f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f003 0308 	and.w	r3, r3, #8
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d009      	beq.n	8011f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011f66:	4b12      	ldr	r3, [pc, #72]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	691b      	ldr	r3, [r3, #16]
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	490e      	ldr	r1, [pc, #56]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f76:	4313      	orrs	r3, r2
 8011f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011f7a:	f000 f8a1 	bl	80120c0 <HAL_RCC_GetSysClockFreq>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	4b0b      	ldr	r3, [pc, #44]	; (8011fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f82:	689b      	ldr	r3, [r3, #8]
 8011f84:	091b      	lsrs	r3, r3, #4
 8011f86:	f003 030f 	and.w	r3, r3, #15
 8011f8a:	490a      	ldr	r1, [pc, #40]	; (8011fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8011f8c:	5ccb      	ldrb	r3, [r1, r3]
 8011f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8011f92:	4a09      	ldr	r2, [pc, #36]	; (8011fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8011f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011f96:	4b09      	ldr	r3, [pc, #36]	; (8011fbc <HAL_RCC_ClockConfig+0x1c8>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7f4 fc01 	bl	80067a2 <HAL_InitTick>

  return HAL_OK;
 8011fa0:	2300      	movs	r3, #0
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3710      	adds	r7, #16
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	40023c00 	.word	0x40023c00
 8011fb0:	40023800 	.word	0x40023800
 8011fb4:	08051f08 	.word	0x08051f08
 8011fb8:	20000058 	.word	0x20000058
 8011fbc:	2000005c 	.word	0x2000005c

08011fc0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b08c      	sub	sp, #48	; 0x30
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d129      	bne.n	8012026 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	617b      	str	r3, [r7, #20]
 8011fd6:	4b2b      	ldr	r3, [pc, #172]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8011fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fda:	4a2a      	ldr	r2, [pc, #168]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8011fdc:	f043 0301 	orr.w	r3, r3, #1
 8011fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8011fe2:	4b28      	ldr	r3, [pc, #160]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8011fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe6:	f003 0301 	and.w	r3, r3, #1
 8011fea:	617b      	str	r3, [r7, #20]
 8011fec:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8011fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ff4:	2302      	movs	r3, #2
 8011ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ff8:	2303      	movs	r3, #3
 8011ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012000:	2300      	movs	r3, #0
 8012002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8012004:	f107 031c 	add.w	r3, r7, #28
 8012008:	4619      	mov	r1, r3
 801200a:	481f      	ldr	r0, [pc, #124]	; (8012088 <HAL_RCC_MCOConfig+0xc8>)
 801200c:	f7f8 fd76 	bl	800aafc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8012010:	4b1c      	ldr	r3, [pc, #112]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8012012:	689b      	ldr	r3, [r3, #8]
 8012014:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8012018:	68b9      	ldr	r1, [r7, #8]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	430b      	orrs	r3, r1
 801201e:	4919      	ldr	r1, [pc, #100]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8012020:	4313      	orrs	r3, r2
 8012022:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8012024:	e029      	b.n	801207a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8012026:	2300      	movs	r3, #0
 8012028:	61bb      	str	r3, [r7, #24]
 801202a:	4b16      	ldr	r3, [pc, #88]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 801202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801202e:	4a15      	ldr	r2, [pc, #84]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8012030:	f043 0304 	orr.w	r3, r3, #4
 8012034:	6313      	str	r3, [r2, #48]	; 0x30
 8012036:	4b13      	ldr	r3, [pc, #76]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8012038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801203a:	f003 0304 	and.w	r3, r3, #4
 801203e:	61bb      	str	r3, [r7, #24]
 8012040:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8012042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012048:	2302      	movs	r3, #2
 801204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801204c:	2303      	movs	r3, #3
 801204e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012050:	2300      	movs	r3, #0
 8012052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012054:	2300      	movs	r3, #0
 8012056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8012058:	f107 031c 	add.w	r3, r7, #28
 801205c:	4619      	mov	r1, r3
 801205e:	480b      	ldr	r0, [pc, #44]	; (801208c <HAL_RCC_MCOConfig+0xcc>)
 8012060:	f7f8 fd4c 	bl	800aafc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8012064:	4b07      	ldr	r3, [pc, #28]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	00d9      	lsls	r1, r3, #3
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	430b      	orrs	r3, r1
 8012074:	4903      	ldr	r1, [pc, #12]	; (8012084 <HAL_RCC_MCOConfig+0xc4>)
 8012076:	4313      	orrs	r3, r2
 8012078:	608b      	str	r3, [r1, #8]
}
 801207a:	bf00      	nop
 801207c:	3730      	adds	r7, #48	; 0x30
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	40023800 	.word	0x40023800
 8012088:	40020000 	.word	0x40020000
 801208c:	40020800 	.word	0x40020800

08012090 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012090:	b480      	push	{r7}
 8012092:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8012094:	4b03      	ldr	r3, [pc, #12]	; (80120a4 <HAL_RCC_EnableCSS+0x14>)
 8012096:	2201      	movs	r2, #1
 8012098:	601a      	str	r2, [r3, #0]
}
 801209a:	bf00      	nop
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	4247004c 	.word	0x4247004c

080120a8 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 80120a8:	b480      	push	{r7}
 80120aa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80120ac:	4b03      	ldr	r3, [pc, #12]	; (80120bc <HAL_RCC_DisableCSS+0x14>)
 80120ae:	2200      	movs	r2, #0
 80120b0:	601a      	str	r2, [r3, #0]
}
 80120b2:	bf00      	nop
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr
 80120bc:	4247004c 	.word	0x4247004c

080120c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80120c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120c4:	b094      	sub	sp, #80	; 0x50
 80120c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80120c8:	2300      	movs	r3, #0
 80120ca:	647b      	str	r3, [r7, #68]	; 0x44
 80120cc:	2300      	movs	r3, #0
 80120ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120d0:	2300      	movs	r3, #0
 80120d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80120d4:	2300      	movs	r3, #0
 80120d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80120d8:	4b79      	ldr	r3, [pc, #484]	; (80122c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80120da:	689b      	ldr	r3, [r3, #8]
 80120dc:	f003 030c 	and.w	r3, r3, #12
 80120e0:	2b08      	cmp	r3, #8
 80120e2:	d00d      	beq.n	8012100 <HAL_RCC_GetSysClockFreq+0x40>
 80120e4:	2b08      	cmp	r3, #8
 80120e6:	f200 80e1 	bhi.w	80122ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d002      	beq.n	80120f4 <HAL_RCC_GetSysClockFreq+0x34>
 80120ee:	2b04      	cmp	r3, #4
 80120f0:	d003      	beq.n	80120fa <HAL_RCC_GetSysClockFreq+0x3a>
 80120f2:	e0db      	b.n	80122ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80120f4:	4b73      	ldr	r3, [pc, #460]	; (80122c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80120f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80120f8:	e0db      	b.n	80122b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80120fa:	4b73      	ldr	r3, [pc, #460]	; (80122c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80120fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80120fe:	e0d8      	b.n	80122b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012100:	4b6f      	ldr	r3, [pc, #444]	; (80122c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012108:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801210a:	4b6d      	ldr	r3, [pc, #436]	; (80122c0 <HAL_RCC_GetSysClockFreq+0x200>)
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012112:	2b00      	cmp	r3, #0
 8012114:	d063      	beq.n	80121de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012116:	4b6a      	ldr	r3, [pc, #424]	; (80122c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	099b      	lsrs	r3, r3, #6
 801211c:	2200      	movs	r2, #0
 801211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012120:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012128:	633b      	str	r3, [r7, #48]	; 0x30
 801212a:	2300      	movs	r3, #0
 801212c:	637b      	str	r3, [r7, #52]	; 0x34
 801212e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8012132:	4622      	mov	r2, r4
 8012134:	462b      	mov	r3, r5
 8012136:	f04f 0000 	mov.w	r0, #0
 801213a:	f04f 0100 	mov.w	r1, #0
 801213e:	0159      	lsls	r1, r3, #5
 8012140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012144:	0150      	lsls	r0, r2, #5
 8012146:	4602      	mov	r2, r0
 8012148:	460b      	mov	r3, r1
 801214a:	4621      	mov	r1, r4
 801214c:	1a51      	subs	r1, r2, r1
 801214e:	6139      	str	r1, [r7, #16]
 8012150:	4629      	mov	r1, r5
 8012152:	eb63 0301 	sbc.w	r3, r3, r1
 8012156:	617b      	str	r3, [r7, #20]
 8012158:	f04f 0200 	mov.w	r2, #0
 801215c:	f04f 0300 	mov.w	r3, #0
 8012160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012164:	4659      	mov	r1, fp
 8012166:	018b      	lsls	r3, r1, #6
 8012168:	4651      	mov	r1, sl
 801216a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801216e:	4651      	mov	r1, sl
 8012170:	018a      	lsls	r2, r1, #6
 8012172:	4651      	mov	r1, sl
 8012174:	ebb2 0801 	subs.w	r8, r2, r1
 8012178:	4659      	mov	r1, fp
 801217a:	eb63 0901 	sbc.w	r9, r3, r1
 801217e:	f04f 0200 	mov.w	r2, #0
 8012182:	f04f 0300 	mov.w	r3, #0
 8012186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801218a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801218e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012192:	4690      	mov	r8, r2
 8012194:	4699      	mov	r9, r3
 8012196:	4623      	mov	r3, r4
 8012198:	eb18 0303 	adds.w	r3, r8, r3
 801219c:	60bb      	str	r3, [r7, #8]
 801219e:	462b      	mov	r3, r5
 80121a0:	eb49 0303 	adc.w	r3, r9, r3
 80121a4:	60fb      	str	r3, [r7, #12]
 80121a6:	f04f 0200 	mov.w	r2, #0
 80121aa:	f04f 0300 	mov.w	r3, #0
 80121ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80121b2:	4629      	mov	r1, r5
 80121b4:	024b      	lsls	r3, r1, #9
 80121b6:	4621      	mov	r1, r4
 80121b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80121bc:	4621      	mov	r1, r4
 80121be:	024a      	lsls	r2, r1, #9
 80121c0:	4610      	mov	r0, r2
 80121c2:	4619      	mov	r1, r3
 80121c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121c6:	2200      	movs	r2, #0
 80121c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80121ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80121d0:	f007 f998 	bl	8019504 <__aeabi_uldivmod>
 80121d4:	4602      	mov	r2, r0
 80121d6:	460b      	mov	r3, r1
 80121d8:	4613      	mov	r3, r2
 80121da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121dc:	e058      	b.n	8012290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80121de:	4b38      	ldr	r3, [pc, #224]	; (80122c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	099b      	lsrs	r3, r3, #6
 80121e4:	2200      	movs	r2, #0
 80121e6:	4618      	mov	r0, r3
 80121e8:	4611      	mov	r1, r2
 80121ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80121ee:	623b      	str	r3, [r7, #32]
 80121f0:	2300      	movs	r3, #0
 80121f2:	627b      	str	r3, [r7, #36]	; 0x24
 80121f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80121f8:	4642      	mov	r2, r8
 80121fa:	464b      	mov	r3, r9
 80121fc:	f04f 0000 	mov.w	r0, #0
 8012200:	f04f 0100 	mov.w	r1, #0
 8012204:	0159      	lsls	r1, r3, #5
 8012206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801220a:	0150      	lsls	r0, r2, #5
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	4641      	mov	r1, r8
 8012212:	ebb2 0a01 	subs.w	sl, r2, r1
 8012216:	4649      	mov	r1, r9
 8012218:	eb63 0b01 	sbc.w	fp, r3, r1
 801221c:	f04f 0200 	mov.w	r2, #0
 8012220:	f04f 0300 	mov.w	r3, #0
 8012224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801222c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012230:	ebb2 040a 	subs.w	r4, r2, sl
 8012234:	eb63 050b 	sbc.w	r5, r3, fp
 8012238:	f04f 0200 	mov.w	r2, #0
 801223c:	f04f 0300 	mov.w	r3, #0
 8012240:	00eb      	lsls	r3, r5, #3
 8012242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012246:	00e2      	lsls	r2, r4, #3
 8012248:	4614      	mov	r4, r2
 801224a:	461d      	mov	r5, r3
 801224c:	4643      	mov	r3, r8
 801224e:	18e3      	adds	r3, r4, r3
 8012250:	603b      	str	r3, [r7, #0]
 8012252:	464b      	mov	r3, r9
 8012254:	eb45 0303 	adc.w	r3, r5, r3
 8012258:	607b      	str	r3, [r7, #4]
 801225a:	f04f 0200 	mov.w	r2, #0
 801225e:	f04f 0300 	mov.w	r3, #0
 8012262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012266:	4629      	mov	r1, r5
 8012268:	028b      	lsls	r3, r1, #10
 801226a:	4621      	mov	r1, r4
 801226c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012270:	4621      	mov	r1, r4
 8012272:	028a      	lsls	r2, r1, #10
 8012274:	4610      	mov	r0, r2
 8012276:	4619      	mov	r1, r3
 8012278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801227a:	2200      	movs	r2, #0
 801227c:	61bb      	str	r3, [r7, #24]
 801227e:	61fa      	str	r2, [r7, #28]
 8012280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012284:	f007 f93e 	bl	8019504 <__aeabi_uldivmod>
 8012288:	4602      	mov	r2, r0
 801228a:	460b      	mov	r3, r1
 801228c:	4613      	mov	r3, r2
 801228e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012290:	4b0b      	ldr	r3, [pc, #44]	; (80122c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	0c1b      	lsrs	r3, r3, #16
 8012296:	f003 0303 	and.w	r3, r3, #3
 801229a:	3301      	adds	r3, #1
 801229c:	005b      	lsls	r3, r3, #1
 801229e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80122a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80122a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80122aa:	e002      	b.n	80122b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80122ac:	4b05      	ldr	r3, [pc, #20]	; (80122c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80122ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80122b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80122b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3750      	adds	r7, #80	; 0x50
 80122b8:	46bd      	mov	sp, r7
 80122ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122be:	bf00      	nop
 80122c0:	40023800 	.word	0x40023800
 80122c4:	00f42400 	.word	0x00f42400
 80122c8:	007a1200 	.word	0x007a1200

080122cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80122cc:	b480      	push	{r7}
 80122ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80122d0:	4b03      	ldr	r3, [pc, #12]	; (80122e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80122d2:	681b      	ldr	r3, [r3, #0]
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	20000058 	.word	0x20000058

080122e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80122e8:	f7ff fff0 	bl	80122cc <HAL_RCC_GetHCLKFreq>
 80122ec:	4602      	mov	r2, r0
 80122ee:	4b05      	ldr	r3, [pc, #20]	; (8012304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80122f0:	689b      	ldr	r3, [r3, #8]
 80122f2:	0a9b      	lsrs	r3, r3, #10
 80122f4:	f003 0307 	and.w	r3, r3, #7
 80122f8:	4903      	ldr	r1, [pc, #12]	; (8012308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80122fa:	5ccb      	ldrb	r3, [r1, r3]
 80122fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012300:	4618      	mov	r0, r3
 8012302:	bd80      	pop	{r7, pc}
 8012304:	40023800 	.word	0x40023800
 8012308:	08051f18 	.word	0x08051f18

0801230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012310:	f7ff ffdc 	bl	80122cc <HAL_RCC_GetHCLKFreq>
 8012314:	4602      	mov	r2, r0
 8012316:	4b05      	ldr	r3, [pc, #20]	; (801232c <HAL_RCC_GetPCLK2Freq+0x20>)
 8012318:	689b      	ldr	r3, [r3, #8]
 801231a:	0b5b      	lsrs	r3, r3, #13
 801231c:	f003 0307 	and.w	r3, r3, #7
 8012320:	4903      	ldr	r1, [pc, #12]	; (8012330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012322:	5ccb      	ldrb	r3, [r1, r3]
 8012324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012328:	4618      	mov	r0, r3
 801232a:	bd80      	pop	{r7, pc}
 801232c:	40023800 	.word	0x40023800
 8012330:	08051f18 	.word	0x08051f18

08012334 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012334:	b480      	push	{r7}
 8012336:	b083      	sub	sp, #12
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	220f      	movs	r2, #15
 8012340:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8012342:	4b45      	ldr	r3, [pc, #276]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801234a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801234e:	d104      	bne.n	801235a <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8012356:	605a      	str	r2, [r3, #4]
 8012358:	e00e      	b.n	8012378 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 801235a:	4b3f      	ldr	r3, [pc, #252]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012366:	d104      	bne.n	8012372 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801236e:	605a      	str	r2, [r3, #4]
 8012370:	e002      	b.n	8012378 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2200      	movs	r2, #0
 8012376:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8012378:	4b37      	ldr	r3, [pc, #220]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f003 0301 	and.w	r3, r3, #1
 8012380:	2b01      	cmp	r3, #1
 8012382:	d103      	bne.n	801238c <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2201      	movs	r2, #1
 8012388:	60da      	str	r2, [r3, #12]
 801238a:	e002      	b.n	8012392 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2200      	movs	r2, #0
 8012390:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8012392:	4b31      	ldr	r3, [pc, #196]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	08db      	lsrs	r3, r3, #3
 8012398:	f003 021f 	and.w	r2, r3, #31
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80123a0:	4b2d      	ldr	r3, [pc, #180]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 80123a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a4:	f003 0304 	and.w	r3, r3, #4
 80123a8:	2b04      	cmp	r3, #4
 80123aa:	d103      	bne.n	80123b4 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2205      	movs	r2, #5
 80123b0:	609a      	str	r2, [r3, #8]
 80123b2:	e00c      	b.n	80123ce <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80123b4:	4b28      	ldr	r3, [pc, #160]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 80123b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b8:	f003 0301 	and.w	r3, r3, #1
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d103      	bne.n	80123c8 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2201      	movs	r2, #1
 80123c4:	609a      	str	r2, [r3, #8]
 80123c6:	e002      	b.n	80123ce <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80123ce:	4b22      	ldr	r3, [pc, #136]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 80123d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123d2:	f003 0301 	and.w	r3, r3, #1
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d103      	bne.n	80123e2 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2201      	movs	r2, #1
 80123de:	615a      	str	r2, [r3, #20]
 80123e0:	e002      	b.n	80123e8 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2200      	movs	r2, #0
 80123e6:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80123e8:	4b1b      	ldr	r3, [pc, #108]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80123f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80123f4:	d103      	bne.n	80123fe <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2202      	movs	r2, #2
 80123fa:	619a      	str	r2, [r3, #24]
 80123fc:	e002      	b.n	8012404 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012404:	4b14      	ldr	r3, [pc, #80]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8012410:	4b11      	ldr	r3, [pc, #68]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801241c:	4b0e      	ldr	r3, [pc, #56]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	099b      	lsrs	r3, r3, #6
 8012422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 801242a:	4b0b      	ldr	r3, [pc, #44]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012432:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	0c1a      	lsrs	r2, r3, #16
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 801243e:	4b06      	ldr	r3, [pc, #24]	; (8012458 <HAL_RCC_GetOscConfig+0x124>)
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	0e1b      	lsrs	r3, r3, #24
 8012444:	f003 020f 	and.w	r2, r3, #15
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801244c:	bf00      	nop
 801244e:	370c      	adds	r7, #12
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr
 8012458:	40023800 	.word	0x40023800

0801245c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801245c:	b480      	push	{r7}
 801245e:	b083      	sub	sp, #12
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	220f      	movs	r2, #15
 801246a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801246c:	4b12      	ldr	r3, [pc, #72]	; (80124b8 <HAL_RCC_GetClockConfig+0x5c>)
 801246e:	689b      	ldr	r3, [r3, #8]
 8012470:	f003 0203 	and.w	r2, r3, #3
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012478:	4b0f      	ldr	r3, [pc, #60]	; (80124b8 <HAL_RCC_GetClockConfig+0x5c>)
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012484:	4b0c      	ldr	r3, [pc, #48]	; (80124b8 <HAL_RCC_GetClockConfig+0x5c>)
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012490:	4b09      	ldr	r3, [pc, #36]	; (80124b8 <HAL_RCC_GetClockConfig+0x5c>)
 8012492:	689b      	ldr	r3, [r3, #8]
 8012494:	08db      	lsrs	r3, r3, #3
 8012496:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801249e:	4b07      	ldr	r3, [pc, #28]	; (80124bc <HAL_RCC_GetClockConfig+0x60>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f003 0207 	and.w	r2, r3, #7
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	601a      	str	r2, [r3, #0]
}
 80124aa:	bf00      	nop
 80124ac:	370c      	adds	r7, #12
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr
 80124b6:	bf00      	nop
 80124b8:	40023800 	.word	0x40023800
 80124bc:	40023c00 	.word	0x40023c00

080124c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80124c4:	4b06      	ldr	r3, [pc, #24]	; (80124e0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124cc:	2b80      	cmp	r3, #128	; 0x80
 80124ce:	d104      	bne.n	80124da <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80124d0:	f000 f80a 	bl	80124e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80124d4:	4b03      	ldr	r3, [pc, #12]	; (80124e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80124d6:	2280      	movs	r2, #128	; 0x80
 80124d8:	701a      	strb	r2, [r3, #0]
  }
}
 80124da:	bf00      	nop
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	40023800 	.word	0x40023800
 80124e4:	4002380e 	.word	0x4002380e

080124e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80124e8:	b480      	push	{r7}
 80124ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80124ec:	bf00      	nop
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr

080124f6 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80124f6:	b580      	push	{r7, lr}
 80124f8:	b086      	sub	sp, #24
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80124fe:	2300      	movs	r3, #0
 8012500:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8012502:	2300      	movs	r3, #0
 8012504:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f003 0301 	and.w	r3, r3, #1
 801250e:	2b00      	cmp	r3, #0
 8012510:	d105      	bne.n	801251e <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801251a:	2b00      	cmp	r3, #0
 801251c:	d035      	beq.n	801258a <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801251e:	4b62      	ldr	r3, [pc, #392]	; (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012520:	2200      	movs	r2, #0
 8012522:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012524:	f7f4 f982 	bl	800682c <HAL_GetTick>
 8012528:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801252a:	e008      	b.n	801253e <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801252c:	f7f4 f97e 	bl	800682c <HAL_GetTick>
 8012530:	4602      	mov	r2, r0
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	2b02      	cmp	r3, #2
 8012538:	d901      	bls.n	801253e <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801253a:	2303      	movs	r3, #3
 801253c:	e0b0      	b.n	80126a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801253e:	4b5b      	ldr	r3, [pc, #364]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1f0      	bne.n	801252c <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	019a      	lsls	r2, r3, #6
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	689b      	ldr	r3, [r3, #8]
 8012554:	071b      	lsls	r3, r3, #28
 8012556:	4955      	ldr	r1, [pc, #340]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012558:	4313      	orrs	r3, r2
 801255a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801255e:	4b52      	ldr	r3, [pc, #328]	; (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012560:	2201      	movs	r2, #1
 8012562:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012564:	f7f4 f962 	bl	800682c <HAL_GetTick>
 8012568:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801256a:	e008      	b.n	801257e <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801256c:	f7f4 f95e 	bl	800682c <HAL_GetTick>
 8012570:	4602      	mov	r2, r0
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	1ad3      	subs	r3, r2, r3
 8012576:	2b02      	cmp	r3, #2
 8012578:	d901      	bls.n	801257e <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801257a:	2303      	movs	r3, #3
 801257c:	e090      	b.n	80126a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801257e:	4b4b      	ldr	r3, [pc, #300]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012586:	2b00      	cmp	r3, #0
 8012588:	d0f0      	beq.n	801256c <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f003 0302 	and.w	r3, r3, #2
 8012592:	2b00      	cmp	r3, #0
 8012594:	f000 8083 	beq.w	801269e <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8012598:	2300      	movs	r3, #0
 801259a:	60fb      	str	r3, [r7, #12]
 801259c:	4b43      	ldr	r3, [pc, #268]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a0:	4a42      	ldr	r2, [pc, #264]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125a6:	6413      	str	r3, [r2, #64]	; 0x40
 80125a8:	4b40      	ldr	r3, [pc, #256]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80125b0:	60fb      	str	r3, [r7, #12]
 80125b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80125b4:	4b3e      	ldr	r3, [pc, #248]	; (80126b0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a3d      	ldr	r2, [pc, #244]	; (80126b0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80125ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80125be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80125c0:	f7f4 f934 	bl	800682c <HAL_GetTick>
 80125c4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80125c6:	e008      	b.n	80125da <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80125c8:	f7f4 f930 	bl	800682c <HAL_GetTick>
 80125cc:	4602      	mov	r2, r0
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	1ad3      	subs	r3, r2, r3
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	d901      	bls.n	80125da <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80125d6:	2303      	movs	r3, #3
 80125d8:	e062      	b.n	80126a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80125da:	4b35      	ldr	r3, [pc, #212]	; (80126b0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d0f0      	beq.n	80125c8 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80125e6:	4b31      	ldr	r3, [pc, #196]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80125ee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d02f      	beq.n	8012656 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80125fe:	693a      	ldr	r2, [r7, #16]
 8012600:	429a      	cmp	r2, r3
 8012602:	d028      	beq.n	8012656 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012604:	4b29      	ldr	r3, [pc, #164]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801260c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801260e:	4b29      	ldr	r3, [pc, #164]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012610:	2201      	movs	r2, #1
 8012612:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012614:	4b27      	ldr	r3, [pc, #156]	; (80126b4 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012616:	2200      	movs	r2, #0
 8012618:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801261a:	4a24      	ldr	r2, [pc, #144]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012620:	4b22      	ldr	r3, [pc, #136]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012624:	f003 0301 	and.w	r3, r3, #1
 8012628:	2b01      	cmp	r3, #1
 801262a:	d114      	bne.n	8012656 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801262c:	f7f4 f8fe 	bl	800682c <HAL_GetTick>
 8012630:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012632:	e00a      	b.n	801264a <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012634:	f7f4 f8fa 	bl	800682c <HAL_GetTick>
 8012638:	4602      	mov	r2, r0
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012642:	4293      	cmp	r3, r2
 8012644:	d901      	bls.n	801264a <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8012646:	2303      	movs	r3, #3
 8012648:	e02a      	b.n	80126a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801264a:	4b18      	ldr	r3, [pc, #96]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801264e:	f003 0302 	and.w	r3, r3, #2
 8012652:	2b00      	cmp	r3, #0
 8012654:	d0ee      	beq.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801265e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012662:	d10d      	bne.n	8012680 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8012664:	4b11      	ldr	r3, [pc, #68]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012666:	689b      	ldr	r3, [r3, #8]
 8012668:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012678:	490c      	ldr	r1, [pc, #48]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801267a:	4313      	orrs	r3, r2
 801267c:	608b      	str	r3, [r1, #8]
 801267e:	e005      	b.n	801268c <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012680:	4b0a      	ldr	r3, [pc, #40]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	4a09      	ldr	r2, [pc, #36]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012686:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801268a:	6093      	str	r3, [r2, #8]
 801268c:	4b07      	ldr	r3, [pc, #28]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801268e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012698:	4904      	ldr	r1, [pc, #16]	; (80126ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801269a:	4313      	orrs	r3, r2
 801269c:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 801269e:	2300      	movs	r3, #0
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3718      	adds	r7, #24
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	42470068 	.word	0x42470068
 80126ac:	40023800 	.word	0x40023800
 80126b0:	40007000 	.word	0x40007000
 80126b4:	42470e40 	.word	0x42470e40

080126b8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b085      	sub	sp, #20
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2203      	movs	r2, #3
 80126c4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80126c6:	4b11      	ldr	r3, [pc, #68]	; (801270c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126cc:	099b      	lsrs	r3, r3, #6
 80126ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80126d6:	4b0d      	ldr	r3, [pc, #52]	; (801270c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126dc:	0f1b      	lsrs	r3, r3, #28
 80126de:	f003 0207 	and.w	r2, r3, #7
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80126e6:	4b09      	ldr	r3, [pc, #36]	; (801270c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80126ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80126f0:	4b06      	ldr	r3, [pc, #24]	; (801270c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80126f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	431a      	orrs	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012700:	bf00      	nop
 8012702:	3714      	adds	r7, #20
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	40023800 	.word	0x40023800

08012710 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012710:	b480      	push	{r7}
 8012712:	b087      	sub	sp, #28
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012718:	2300      	movs	r3, #0
 801271a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 801271c:	2300      	movs	r3, #0
 801271e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012720:	2300      	movs	r3, #0
 8012722:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012724:	2300      	movs	r3, #0
 8012726:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2b01      	cmp	r3, #1
 801272c:	d13e      	bne.n	80127ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 801272e:	4b23      	ldr	r3, [pc, #140]	; (80127bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012730:	689b      	ldr	r3, [r3, #8]
 8012732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012736:	60fb      	str	r3, [r7, #12]
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d005      	beq.n	801274a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	2b01      	cmp	r3, #1
 8012742:	d12f      	bne.n	80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012744:	4b1e      	ldr	r3, [pc, #120]	; (80127c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012746:	617b      	str	r3, [r7, #20]
          break;
 8012748:	e02f      	b.n	80127aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801274a:	4b1c      	ldr	r3, [pc, #112]	; (80127bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012756:	d108      	bne.n	801276a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012758:	4b18      	ldr	r3, [pc, #96]	; (80127bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012760:	4a18      	ldr	r2, [pc, #96]	; (80127c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8012762:	fbb2 f3f3 	udiv	r3, r2, r3
 8012766:	613b      	str	r3, [r7, #16]
 8012768:	e007      	b.n	801277a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 801276a:	4b14      	ldr	r3, [pc, #80]	; (80127bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012772:	4a15      	ldr	r2, [pc, #84]	; (80127c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8012774:	fbb2 f3f3 	udiv	r3, r2, r3
 8012778:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 801277a:	4b10      	ldr	r3, [pc, #64]	; (80127bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012780:	099b      	lsrs	r3, r3, #6
 8012782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	fb02 f303 	mul.w	r3, r2, r3
 801278c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 801278e:	4b0b      	ldr	r3, [pc, #44]	; (80127bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012794:	0f1b      	lsrs	r3, r3, #28
 8012796:	f003 0307 	and.w	r3, r3, #7
 801279a:	68ba      	ldr	r2, [r7, #8]
 801279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80127a0:	617b      	str	r3, [r7, #20]
          break;
 80127a2:	e002      	b.n	80127aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80127a4:	2300      	movs	r3, #0
 80127a6:	617b      	str	r3, [r7, #20]
          break;
 80127a8:	bf00      	nop
        }
      }
      break;
 80127aa:	bf00      	nop
    }
  }
  return frequency;
 80127ac:	697b      	ldr	r3, [r7, #20]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	371c      	adds	r7, #28
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	40023800 	.word	0x40023800
 80127c0:	00bb8000 	.word	0x00bb8000
 80127c4:	007a1200 	.word	0x007a1200
 80127c8:	00f42400 	.word	0x00f42400

080127cc <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 80127d4:	4b1d      	ldr	r3, [pc, #116]	; (801284c <HAL_RCCEx_EnablePLLI2S+0x80>)
 80127d6:	2200      	movs	r2, #0
 80127d8:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 80127da:	f7f4 f827 	bl	800682c <HAL_GetTick>
 80127de:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80127e0:	e008      	b.n	80127f4 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80127e2:	f7f4 f823 	bl	800682c <HAL_GetTick>
 80127e6:	4602      	mov	r2, r0
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	2b02      	cmp	r3, #2
 80127ee:	d901      	bls.n	80127f4 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80127f0:	2303      	movs	r3, #3
 80127f2:	e026      	b.n	8012842 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80127f4:	4b16      	ldr	r3, [pc, #88]	; (8012850 <HAL_RCCEx_EnablePLLI2S+0x84>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d1f0      	bne.n	80127e2 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	019a      	lsls	r2, r3, #6
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	071b      	lsls	r3, r3, #28
 801280c:	4910      	ldr	r1, [pc, #64]	; (8012850 <HAL_RCCEx_EnablePLLI2S+0x84>)
 801280e:	4313      	orrs	r3, r2
 8012810:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8012814:	4b0d      	ldr	r3, [pc, #52]	; (801284c <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012816:	2201      	movs	r2, #1
 8012818:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 801281a:	f7f4 f807 	bl	800682c <HAL_GetTick>
 801281e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012820:	e008      	b.n	8012834 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012822:	f7f4 f803 	bl	800682c <HAL_GetTick>
 8012826:	4602      	mov	r2, r0
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	1ad3      	subs	r3, r2, r3
 801282c:	2b02      	cmp	r3, #2
 801282e:	d901      	bls.n	8012834 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012830:	2303      	movs	r3, #3
 8012832:	e006      	b.n	8012842 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012834:	4b06      	ldr	r3, [pc, #24]	; (8012850 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801283c:	2b00      	cmp	r3, #0
 801283e:	d0f0      	beq.n	8012822 <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3710      	adds	r7, #16
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	42470068 	.word	0x42470068
 8012850:	40023800 	.word	0x40023800

08012854 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 801285a:	4b0d      	ldr	r3, [pc, #52]	; (8012890 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 801285c:	2200      	movs	r2, #0
 801285e:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012860:	f7f3 ffe4 	bl	800682c <HAL_GetTick>
 8012864:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012866:	e008      	b.n	801287a <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012868:	f7f3 ffe0 	bl	800682c <HAL_GetTick>
 801286c:	4602      	mov	r2, r0
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	2b02      	cmp	r3, #2
 8012874:	d901      	bls.n	801287a <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012876:	2303      	movs	r3, #3
 8012878:	e006      	b.n	8012888 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801287a:	4b06      	ldr	r3, [pc, #24]	; (8012894 <HAL_RCCEx_DisablePLLI2S+0x40>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012882:	2b00      	cmp	r3, #0
 8012884:	d1f0      	bne.n	8012868 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	42470068 	.word	0x42470068
 8012894:	40023800 	.word	0x40023800

08012898 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801289e:	f7f3 ffc5 	bl	800682c <HAL_GetTick>
 80128a2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80128a4:	4b5d      	ldr	r3, [pc, #372]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4a5c      	ldr	r2, [pc, #368]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80128aa:	f043 0301 	orr.w	r3, r3, #1
 80128ae:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80128b0:	e008      	b.n	80128c4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80128b2:	f7f3 ffbb 	bl	800682c <HAL_GetTick>
 80128b6:	4602      	mov	r2, r0
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	1ad3      	subs	r3, r2, r3
 80128bc:	2b02      	cmp	r3, #2
 80128be:	d901      	bls.n	80128c4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80128c0:	2303      	movs	r3, #3
 80128c2:	e0a7      	b.n	8012a14 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80128c4:	4b55      	ldr	r3, [pc, #340]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	f003 0302 	and.w	r3, r3, #2
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d0f0      	beq.n	80128b2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80128d0:	4b52      	ldr	r3, [pc, #328]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4a51      	ldr	r2, [pc, #324]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80128d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80128dc:	f7f3 ffa6 	bl	800682c <HAL_GetTick>
 80128e0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80128e2:	4b4e      	ldr	r3, [pc, #312]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80128e4:	2200      	movs	r2, #0
 80128e6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80128e8:	e00a      	b.n	8012900 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80128ea:	f7f3 ff9f 	bl	800682c <HAL_GetTick>
 80128ee:	4602      	mov	r2, r0
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	1ad3      	subs	r3, r2, r3
 80128f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d901      	bls.n	8012900 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80128fc:	2303      	movs	r3, #3
 80128fe:	e089      	b.n	8012a14 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012900:	4b46      	ldr	r3, [pc, #280]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012902:	689b      	ldr	r3, [r3, #8]
 8012904:	f003 030c 	and.w	r3, r3, #12
 8012908:	2b00      	cmp	r3, #0
 801290a:	d1ee      	bne.n	80128ea <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801290c:	f7f3 ff8e 	bl	800682c <HAL_GetTick>
 8012910:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8012912:	4b42      	ldr	r3, [pc, #264]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	4a41      	ldr	r2, [pc, #260]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012918:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 801291c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801291e:	e008      	b.n	8012932 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012920:	f7f3 ff84 	bl	800682c <HAL_GetTick>
 8012924:	4602      	mov	r2, r0
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	1ad3      	subs	r3, r2, r3
 801292a:	2b64      	cmp	r3, #100	; 0x64
 801292c:	d901      	bls.n	8012932 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 801292e:	2303      	movs	r3, #3
 8012930:	e070      	b.n	8012a14 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012932:	4b3a      	ldr	r3, [pc, #232]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801293a:	2b00      	cmp	r3, #0
 801293c:	d1f0      	bne.n	8012920 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801293e:	f7f3 ff75 	bl	800682c <HAL_GetTick>
 8012942:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8012944:	4b35      	ldr	r3, [pc, #212]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4a34      	ldr	r2, [pc, #208]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 801294a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801294e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012950:	e008      	b.n	8012964 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012952:	f7f3 ff6b 	bl	800682c <HAL_GetTick>
 8012956:	4602      	mov	r2, r0
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	1ad3      	subs	r3, r2, r3
 801295c:	2b02      	cmp	r3, #2
 801295e:	d901      	bls.n	8012964 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8012960:	2303      	movs	r3, #3
 8012962:	e057      	b.n	8012a14 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012964:	4b2d      	ldr	r3, [pc, #180]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801296c:	2b00      	cmp	r3, #0
 801296e:	d1f0      	bne.n	8012952 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012970:	f7f3 ff5c 	bl	800682c <HAL_GetTick>
 8012974:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8012976:	4b29      	ldr	r3, [pc, #164]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a28      	ldr	r2, [pc, #160]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 801297c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012980:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012982:	e008      	b.n	8012996 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012984:	f7f3 ff52 	bl	800682c <HAL_GetTick>
 8012988:	4602      	mov	r2, r0
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	1ad3      	subs	r3, r2, r3
 801298e:	2b02      	cmp	r3, #2
 8012990:	d901      	bls.n	8012996 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8012992:	2303      	movs	r3, #3
 8012994:	e03e      	b.n	8012a14 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012996:	4b21      	ldr	r3, [pc, #132]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d1f0      	bne.n	8012984 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80129a2:	4b1e      	ldr	r3, [pc, #120]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129a4:	4a1e      	ldr	r2, [pc, #120]	; (8012a20 <HAL_RCC_DeInit+0x188>)
 80129a6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80129a8:	4b1c      	ldr	r3, [pc, #112]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129aa:	4a1e      	ldr	r2, [pc, #120]	; (8012a24 <HAL_RCC_DeInit+0x18c>)
 80129ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80129b0:	4b1a      	ldr	r3, [pc, #104]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	4a19      	ldr	r2, [pc, #100]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80129ba:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80129bc:	4b17      	ldr	r3, [pc, #92]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	4a16      	ldr	r2, [pc, #88]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80129c6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80129c8:	4b14      	ldr	r3, [pc, #80]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	4a13      	ldr	r2, [pc, #76]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129ce:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80129d2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80129d4:	4b11      	ldr	r3, [pc, #68]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	4a10      	ldr	r2, [pc, #64]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80129de:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80129e0:	4b0e      	ldr	r3, [pc, #56]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129e4:	4a0d      	ldr	r2, [pc, #52]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129e6:	f023 0301 	bic.w	r3, r3, #1
 80129ea:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80129ec:	4b0b      	ldr	r3, [pc, #44]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129f0:	4a0a      	ldr	r2, [pc, #40]	; (8012a1c <HAL_RCC_DeInit+0x184>)
 80129f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80129f6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80129f8:	4b0b      	ldr	r3, [pc, #44]	; (8012a28 <HAL_RCC_DeInit+0x190>)
 80129fa:	4a0c      	ldr	r2, [pc, #48]	; (8012a2c <HAL_RCC_DeInit+0x194>)
 80129fc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80129fe:	4b0c      	ldr	r3, [pc, #48]	; (8012a30 <HAL_RCC_DeInit+0x198>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7f3 fecd 	bl	80067a2 <HAL_InitTick>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d001      	beq.n	8012a12 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8012a0e:	2301      	movs	r3, #1
 8012a10:	e000      	b.n	8012a14 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8012a12:	2300      	movs	r3, #0
  }
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	40023800 	.word	0x40023800
 8012a20:	04003010 	.word	0x04003010
 8012a24:	20003000 	.word	0x20003000
 8012a28:	20000058 	.word	0x20000058
 8012a2c:	00f42400 	.word	0x00f42400
 8012a30:	2000005c 	.word	0x2000005c

08012a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d101      	bne.n	8012a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012a42:	2301      	movs	r3, #1
 8012a44:	e07b      	b.n	8012b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d108      	bne.n	8012a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012a56:	d009      	beq.n	8012a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	61da      	str	r2, [r3, #28]
 8012a5e:	e005      	b.n	8012a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d106      	bne.n	8012a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2200      	movs	r2, #0
 8012a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f7f2 ffc8 	bl	8005a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2202      	movs	r2, #2
 8012a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012ab4:	431a      	orrs	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012abe:	431a      	orrs	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	691b      	ldr	r3, [r3, #16]
 8012ac4:	f003 0302 	and.w	r3, r3, #2
 8012ac8:	431a      	orrs	r2, r3
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	695b      	ldr	r3, [r3, #20]
 8012ace:	f003 0301 	and.w	r3, r3, #1
 8012ad2:	431a      	orrs	r2, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	699b      	ldr	r3, [r3, #24]
 8012ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012adc:	431a      	orrs	r2, r3
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	69db      	ldr	r3, [r3, #28]
 8012ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012ae6:	431a      	orrs	r2, r3
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6a1b      	ldr	r3, [r3, #32]
 8012aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012af0:	ea42 0103 	orr.w	r1, r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	430a      	orrs	r2, r1
 8012b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	699b      	ldr	r3, [r3, #24]
 8012b08:	0c1b      	lsrs	r3, r3, #16
 8012b0a:	f003 0104 	and.w	r1, r3, #4
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b12:	f003 0210 	and.w	r2, r3, #16
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	430a      	orrs	r2, r1
 8012b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	69da      	ldr	r2, [r3, #28]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2200      	movs	r2, #0
 8012b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2201      	movs	r2, #1
 8012b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012b3c:	2300      	movs	r3, #0
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b082      	sub	sp, #8
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d101      	bne.n	8012b58 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012b54:	2301      	movs	r3, #1
 8012b56:	e01a      	b.n	8012b8e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2202      	movs	r2, #2
 8012b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012b6e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f7f3 f88b 	bl	8005c8c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012b8c:	2300      	movs	r3, #0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b088      	sub	sp, #32
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	60f8      	str	r0, [r7, #12]
 8012b9e:	60b9      	str	r1, [r7, #8]
 8012ba0:	603b      	str	r3, [r7, #0]
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d101      	bne.n	8012bb8 <HAL_SPI_Transmit+0x22>
 8012bb4:	2302      	movs	r3, #2
 8012bb6:	e126      	b.n	8012e06 <HAL_SPI_Transmit+0x270>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	2201      	movs	r2, #1
 8012bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012bc0:	f7f3 fe34 	bl	800682c <HAL_GetTick>
 8012bc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012bc6:	88fb      	ldrh	r3, [r7, #6]
 8012bc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d002      	beq.n	8012bdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012bd6:	2302      	movs	r3, #2
 8012bd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012bda:	e10b      	b.n	8012df4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d002      	beq.n	8012be8 <HAL_SPI_Transmit+0x52>
 8012be2:	88fb      	ldrh	r3, [r7, #6]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d102      	bne.n	8012bee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012be8:	2301      	movs	r3, #1
 8012bea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012bec:	e102      	b.n	8012df4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2203      	movs	r2, #3
 8012bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	68ba      	ldr	r2, [r7, #8]
 8012c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	88fa      	ldrh	r2, [r7, #6]
 8012c06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	88fa      	ldrh	r2, [r7, #6]
 8012c0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2200      	movs	r2, #0
 8012c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2200      	movs	r2, #0
 8012c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2200      	movs	r2, #0
 8012c24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	689b      	ldr	r3, [r3, #8]
 8012c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c34:	d10f      	bne.n	8012c56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012c54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c60:	2b40      	cmp	r3, #64	; 0x40
 8012c62:	d007      	beq.n	8012c74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	681a      	ldr	r2, [r3, #0]
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c7c:	d14b      	bne.n	8012d16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d002      	beq.n	8012c8c <HAL_SPI_Transmit+0xf6>
 8012c86:	8afb      	ldrh	r3, [r7, #22]
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	d13e      	bne.n	8012d0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c90:	881a      	ldrh	r2, [r3, #0]
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c9c:	1c9a      	adds	r2, r3, #2
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	3b01      	subs	r3, #1
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012cb0:	e02b      	b.n	8012d0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	f003 0302 	and.w	r3, r3, #2
 8012cbc:	2b02      	cmp	r3, #2
 8012cbe:	d112      	bne.n	8012ce6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc4:	881a      	ldrh	r2, [r3, #0]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd0:	1c9a      	adds	r2, r3, #2
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	3b01      	subs	r3, #1
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	86da      	strh	r2, [r3, #54]	; 0x36
 8012ce4:	e011      	b.n	8012d0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012ce6:	f7f3 fda1 	bl	800682c <HAL_GetTick>
 8012cea:	4602      	mov	r2, r0
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	1ad3      	subs	r3, r2, r3
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d803      	bhi.n	8012cfe <HAL_SPI_Transmit+0x168>
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cfc:	d102      	bne.n	8012d04 <HAL_SPI_Transmit+0x16e>
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d102      	bne.n	8012d0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8012d04:	2303      	movs	r3, #3
 8012d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012d08:	e074      	b.n	8012df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d1ce      	bne.n	8012cb2 <HAL_SPI_Transmit+0x11c>
 8012d14:	e04c      	b.n	8012db0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d002      	beq.n	8012d24 <HAL_SPI_Transmit+0x18e>
 8012d1e:	8afb      	ldrh	r3, [r7, #22]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d140      	bne.n	8012da6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	330c      	adds	r3, #12
 8012d2e:	7812      	ldrb	r2, [r2, #0]
 8012d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d36:	1c5a      	adds	r2, r3, #1
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	3b01      	subs	r3, #1
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012d4a:	e02c      	b.n	8012da6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	689b      	ldr	r3, [r3, #8]
 8012d52:	f003 0302 	and.w	r3, r3, #2
 8012d56:	2b02      	cmp	r3, #2
 8012d58:	d113      	bne.n	8012d82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	330c      	adds	r3, #12
 8012d64:	7812      	ldrb	r2, [r2, #0]
 8012d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d6c:	1c5a      	adds	r2, r3, #1
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	3b01      	subs	r3, #1
 8012d7a:	b29a      	uxth	r2, r3
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8012d80:	e011      	b.n	8012da6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012d82:	f7f3 fd53 	bl	800682c <HAL_GetTick>
 8012d86:	4602      	mov	r2, r0
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	683a      	ldr	r2, [r7, #0]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d803      	bhi.n	8012d9a <HAL_SPI_Transmit+0x204>
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d98:	d102      	bne.n	8012da0 <HAL_SPI_Transmit+0x20a>
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d102      	bne.n	8012da6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8012da0:	2303      	movs	r3, #3
 8012da2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012da4:	e026      	b.n	8012df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d1cd      	bne.n	8012d4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012db0:	69ba      	ldr	r2, [r7, #24]
 8012db2:	6839      	ldr	r1, [r7, #0]
 8012db4:	68f8      	ldr	r0, [r7, #12]
 8012db6:	f001 ff3e 	bl	8014c36 <SPI_EndRxTxTransaction>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d002      	beq.n	8012dc6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2220      	movs	r2, #32
 8012dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	689b      	ldr	r3, [r3, #8]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10a      	bne.n	8012de4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012dce:	2300      	movs	r3, #0
 8012dd0:	613b      	str	r3, [r7, #16]
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	68db      	ldr	r3, [r3, #12]
 8012dd8:	613b      	str	r3, [r7, #16]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	613b      	str	r3, [r7, #16]
 8012de2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8012dec:	2301      	movs	r3, #1
 8012dee:	77fb      	strb	r3, [r7, #31]
 8012df0:	e000      	b.n	8012df4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8012df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2201      	movs	r2, #1
 8012df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3720      	adds	r7, #32
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b088      	sub	sp, #32
 8012e12:	af02      	add	r7, sp, #8
 8012e14:	60f8      	str	r0, [r7, #12]
 8012e16:	60b9      	str	r1, [r7, #8]
 8012e18:	603b      	str	r3, [r7, #0]
 8012e1a:	4613      	mov	r3, r2
 8012e1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e2a:	d112      	bne.n	8012e52 <HAL_SPI_Receive+0x44>
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	689b      	ldr	r3, [r3, #8]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d10e      	bne.n	8012e52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2204      	movs	r2, #4
 8012e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012e3c:	88fa      	ldrh	r2, [r7, #6]
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	9300      	str	r3, [sp, #0]
 8012e42:	4613      	mov	r3, r2
 8012e44:	68ba      	ldr	r2, [r7, #8]
 8012e46:	68b9      	ldr	r1, [r7, #8]
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f000 f8f1 	bl	8013030 <HAL_SPI_TransmitReceive>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	e0ea      	b.n	8013028 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d101      	bne.n	8012e60 <HAL_SPI_Receive+0x52>
 8012e5c:	2302      	movs	r3, #2
 8012e5e:	e0e3      	b.n	8013028 <HAL_SPI_Receive+0x21a>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2201      	movs	r2, #1
 8012e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012e68:	f7f3 fce0 	bl	800682c <HAL_GetTick>
 8012e6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d002      	beq.n	8012e80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012e7a:	2302      	movs	r3, #2
 8012e7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012e7e:	e0ca      	b.n	8013016 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d002      	beq.n	8012e8c <HAL_SPI_Receive+0x7e>
 8012e86:	88fb      	ldrh	r3, [r7, #6]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d102      	bne.n	8012e92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012e90:	e0c1      	b.n	8013016 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2204      	movs	r2, #4
 8012e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	68ba      	ldr	r2, [r7, #8]
 8012ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	88fa      	ldrh	r2, [r7, #6]
 8012eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	88fa      	ldrh	r2, [r7, #6]
 8012eb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	689b      	ldr	r3, [r3, #8]
 8012ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ed8:	d10f      	bne.n	8012efa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	681a      	ldr	r2, [r3, #0]
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012ef8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f04:	2b40      	cmp	r3, #64	; 0x40
 8012f06:	d007      	beq.n	8012f18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d162      	bne.n	8012fe6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012f20:	e02e      	b.n	8012f80 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	689b      	ldr	r3, [r3, #8]
 8012f28:	f003 0301 	and.w	r3, r3, #1
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d115      	bne.n	8012f5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f103 020c 	add.w	r2, r3, #12
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f3c:	7812      	ldrb	r2, [r2, #0]
 8012f3e:	b2d2      	uxtb	r2, r2
 8012f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f46:	1c5a      	adds	r2, r3, #1
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	3b01      	subs	r3, #1
 8012f54:	b29a      	uxth	r2, r3
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012f5a:	e011      	b.n	8012f80 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012f5c:	f7f3 fc66 	bl	800682c <HAL_GetTick>
 8012f60:	4602      	mov	r2, r0
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	1ad3      	subs	r3, r2, r3
 8012f66:	683a      	ldr	r2, [r7, #0]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d803      	bhi.n	8012f74 <HAL_SPI_Receive+0x166>
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f72:	d102      	bne.n	8012f7a <HAL_SPI_Receive+0x16c>
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d102      	bne.n	8012f80 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012f7e:	e04a      	b.n	8013016 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d1cb      	bne.n	8012f22 <HAL_SPI_Receive+0x114>
 8012f8a:	e031      	b.n	8012ff0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	689b      	ldr	r3, [r3, #8]
 8012f92:	f003 0301 	and.w	r3, r3, #1
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d113      	bne.n	8012fc2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	68da      	ldr	r2, [r3, #12]
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fa4:	b292      	uxth	r2, r2
 8012fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fac:	1c9a      	adds	r2, r3, #2
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	b29a      	uxth	r2, r3
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012fc0:	e011      	b.n	8012fe6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012fc2:	f7f3 fc33 	bl	800682c <HAL_GetTick>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	683a      	ldr	r2, [r7, #0]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d803      	bhi.n	8012fda <HAL_SPI_Receive+0x1cc>
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd8:	d102      	bne.n	8012fe0 <HAL_SPI_Receive+0x1d2>
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8012fe0:	2303      	movs	r3, #3
 8012fe2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012fe4:	e017      	b.n	8013016 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1cd      	bne.n	8012f8c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012ff0:	693a      	ldr	r2, [r7, #16]
 8012ff2:	6839      	ldr	r1, [r7, #0]
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f001 fdb9 	bl	8014b6c <SPI_EndRxTransaction>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d002      	beq.n	8013006 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2220      	movs	r2, #32
 8013004:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801300a:	2b00      	cmp	r3, #0
 801300c:	d002      	beq.n	8013014 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801300e:	2301      	movs	r3, #1
 8013010:	75fb      	strb	r3, [r7, #23]
 8013012:	e000      	b.n	8013016 <HAL_SPI_Receive+0x208>
  }

error :
 8013014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2201      	movs	r2, #1
 801301a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2200      	movs	r2, #0
 8013022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013026:	7dfb      	ldrb	r3, [r7, #23]
}
 8013028:	4618      	mov	r0, r3
 801302a:	3718      	adds	r7, #24
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08c      	sub	sp, #48	; 0x30
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
 801303c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801303e:	2301      	movs	r3, #1
 8013040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013042:	2300      	movs	r3, #0
 8013044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801304e:	2b01      	cmp	r3, #1
 8013050:	d101      	bne.n	8013056 <HAL_SPI_TransmitReceive+0x26>
 8013052:	2302      	movs	r3, #2
 8013054:	e18a      	b.n	801336c <HAL_SPI_TransmitReceive+0x33c>
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2201      	movs	r2, #1
 801305a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801305e:	f7f3 fbe5 	bl	800682c <HAL_GetTick>
 8013062:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013074:	887b      	ldrh	r3, [r7, #2]
 8013076:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801307c:	2b01      	cmp	r3, #1
 801307e:	d00f      	beq.n	80130a0 <HAL_SPI_TransmitReceive+0x70>
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013086:	d107      	bne.n	8013098 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	689b      	ldr	r3, [r3, #8]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d103      	bne.n	8013098 <HAL_SPI_TransmitReceive+0x68>
 8013090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013094:	2b04      	cmp	r3, #4
 8013096:	d003      	beq.n	80130a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013098:	2302      	movs	r3, #2
 801309a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801309e:	e15b      	b.n	8013358 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d005      	beq.n	80130b2 <HAL_SPI_TransmitReceive+0x82>
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d002      	beq.n	80130b2 <HAL_SPI_TransmitReceive+0x82>
 80130ac:	887b      	ldrh	r3, [r7, #2]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d103      	bne.n	80130ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80130b2:	2301      	movs	r3, #1
 80130b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80130b8:	e14e      	b.n	8013358 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80130c0:	b2db      	uxtb	r3, r3
 80130c2:	2b04      	cmp	r3, #4
 80130c4:	d003      	beq.n	80130ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2205      	movs	r2, #5
 80130ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2200      	movs	r2, #0
 80130d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	887a      	ldrh	r2, [r7, #2]
 80130de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	887a      	ldrh	r2, [r7, #2]
 80130e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	887a      	ldrh	r2, [r7, #2]
 80130f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	887a      	ldrh	r2, [r7, #2]
 80130f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2200      	movs	r2, #0
 80130fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	2200      	movs	r2, #0
 8013102:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801310e:	2b40      	cmp	r3, #64	; 0x40
 8013110:	d007      	beq.n	8013122 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681a      	ldr	r2, [r3, #0]
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	68db      	ldr	r3, [r3, #12]
 8013126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801312a:	d178      	bne.n	801321e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d002      	beq.n	801313a <HAL_SPI_TransmitReceive+0x10a>
 8013134:	8b7b      	ldrh	r3, [r7, #26]
 8013136:	2b01      	cmp	r3, #1
 8013138:	d166      	bne.n	8013208 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801313e:	881a      	ldrh	r2, [r3, #0]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801314a:	1c9a      	adds	r2, r3, #2
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013154:	b29b      	uxth	r3, r3
 8013156:	3b01      	subs	r3, #1
 8013158:	b29a      	uxth	r2, r3
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801315e:	e053      	b.n	8013208 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	689b      	ldr	r3, [r3, #8]
 8013166:	f003 0302 	and.w	r3, r3, #2
 801316a:	2b02      	cmp	r3, #2
 801316c:	d11b      	bne.n	80131a6 <HAL_SPI_TransmitReceive+0x176>
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013172:	b29b      	uxth	r3, r3
 8013174:	2b00      	cmp	r3, #0
 8013176:	d016      	beq.n	80131a6 <HAL_SPI_TransmitReceive+0x176>
 8013178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317a:	2b01      	cmp	r3, #1
 801317c:	d113      	bne.n	80131a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013182:	881a      	ldrh	r2, [r3, #0]
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801318e:	1c9a      	adds	r2, r3, #2
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013198:	b29b      	uxth	r3, r3
 801319a:	3b01      	subs	r3, #1
 801319c:	b29a      	uxth	r2, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80131a2:	2300      	movs	r3, #0
 80131a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	f003 0301 	and.w	r3, r3, #1
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d119      	bne.n	80131e8 <HAL_SPI_TransmitReceive+0x1b8>
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d014      	beq.n	80131e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	68da      	ldr	r2, [r3, #12]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131c8:	b292      	uxth	r2, r2
 80131ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131d0:	1c9a      	adds	r2, r3, #2
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131da:	b29b      	uxth	r3, r3
 80131dc:	3b01      	subs	r3, #1
 80131de:	b29a      	uxth	r2, r3
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80131e4:	2301      	movs	r3, #1
 80131e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80131e8:	f7f3 fb20 	bl	800682c <HAL_GetTick>
 80131ec:	4602      	mov	r2, r0
 80131ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d807      	bhi.n	8013208 <HAL_SPI_TransmitReceive+0x1d8>
 80131f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131fe:	d003      	beq.n	8013208 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013200:	2303      	movs	r3, #3
 8013202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013206:	e0a7      	b.n	8013358 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801320c:	b29b      	uxth	r3, r3
 801320e:	2b00      	cmp	r3, #0
 8013210:	d1a6      	bne.n	8013160 <HAL_SPI_TransmitReceive+0x130>
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013216:	b29b      	uxth	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1a1      	bne.n	8013160 <HAL_SPI_TransmitReceive+0x130>
 801321c:	e07c      	b.n	8013318 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d002      	beq.n	801322c <HAL_SPI_TransmitReceive+0x1fc>
 8013226:	8b7b      	ldrh	r3, [r7, #26]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d16b      	bne.n	8013304 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	330c      	adds	r3, #12
 8013236:	7812      	ldrb	r2, [r2, #0]
 8013238:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801323e:	1c5a      	adds	r2, r3, #1
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013248:	b29b      	uxth	r3, r3
 801324a:	3b01      	subs	r3, #1
 801324c:	b29a      	uxth	r2, r3
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013252:	e057      	b.n	8013304 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	689b      	ldr	r3, [r3, #8]
 801325a:	f003 0302 	and.w	r3, r3, #2
 801325e:	2b02      	cmp	r3, #2
 8013260:	d11c      	bne.n	801329c <HAL_SPI_TransmitReceive+0x26c>
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013266:	b29b      	uxth	r3, r3
 8013268:	2b00      	cmp	r3, #0
 801326a:	d017      	beq.n	801329c <HAL_SPI_TransmitReceive+0x26c>
 801326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326e:	2b01      	cmp	r3, #1
 8013270:	d114      	bne.n	801329c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	330c      	adds	r3, #12
 801327c:	7812      	ldrb	r2, [r2, #0]
 801327e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013284:	1c5a      	adds	r2, r3, #1
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801328e:	b29b      	uxth	r3, r3
 8013290:	3b01      	subs	r3, #1
 8013292:	b29a      	uxth	r2, r3
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013298:	2300      	movs	r3, #0
 801329a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	689b      	ldr	r3, [r3, #8]
 80132a2:	f003 0301 	and.w	r3, r3, #1
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d119      	bne.n	80132de <HAL_SPI_TransmitReceive+0x2ae>
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d014      	beq.n	80132de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	68da      	ldr	r2, [r3, #12]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132be:	b2d2      	uxtb	r2, r2
 80132c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c6:	1c5a      	adds	r2, r3, #1
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	3b01      	subs	r3, #1
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80132da:	2301      	movs	r3, #1
 80132dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80132de:	f7f3 faa5 	bl	800682c <HAL_GetTick>
 80132e2:	4602      	mov	r2, r0
 80132e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e6:	1ad3      	subs	r3, r2, r3
 80132e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d803      	bhi.n	80132f6 <HAL_SPI_TransmitReceive+0x2c6>
 80132ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132f4:	d102      	bne.n	80132fc <HAL_SPI_TransmitReceive+0x2cc>
 80132f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d103      	bne.n	8013304 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80132fc:	2303      	movs	r3, #3
 80132fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013302:	e029      	b.n	8013358 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013308:	b29b      	uxth	r3, r3
 801330a:	2b00      	cmp	r3, #0
 801330c:	d1a2      	bne.n	8013254 <HAL_SPI_TransmitReceive+0x224>
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013312:	b29b      	uxth	r3, r3
 8013314:	2b00      	cmp	r3, #0
 8013316:	d19d      	bne.n	8013254 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801331a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801331c:	68f8      	ldr	r0, [r7, #12]
 801331e:	f001 fc8a 	bl	8014c36 <SPI_EndRxTxTransaction>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d006      	beq.n	8013336 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013328:	2301      	movs	r3, #1
 801332a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2220      	movs	r2, #32
 8013332:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013334:	e010      	b.n	8013358 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	689b      	ldr	r3, [r3, #8]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10b      	bne.n	8013356 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801333e:	2300      	movs	r3, #0
 8013340:	617b      	str	r3, [r7, #20]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	617b      	str	r3, [r7, #20]
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	617b      	str	r3, [r7, #20]
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	e000      	b.n	8013358 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	2201      	movs	r2, #1
 801335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2200      	movs	r2, #0
 8013364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801336c:	4618      	mov	r0, r3
 801336e:	3730      	adds	r7, #48	; 0x30
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013374:	b480      	push	{r7}
 8013376:	b087      	sub	sp, #28
 8013378:	af00      	add	r7, sp, #0
 801337a:	60f8      	str	r0, [r7, #12]
 801337c:	60b9      	str	r1, [r7, #8]
 801337e:	4613      	mov	r3, r2
 8013380:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013382:	2300      	movs	r3, #0
 8013384:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801338c:	2b01      	cmp	r3, #1
 801338e:	d101      	bne.n	8013394 <HAL_SPI_Transmit_IT+0x20>
 8013390:	2302      	movs	r3, #2
 8013392:	e06f      	b.n	8013474 <HAL_SPI_Transmit_IT+0x100>
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	2201      	movs	r2, #1
 8013398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d002      	beq.n	80133a8 <HAL_SPI_Transmit_IT+0x34>
 80133a2:	88fb      	ldrh	r3, [r7, #6]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80133a8:	2301      	movs	r3, #1
 80133aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80133ac:	e05d      	b.n	801346a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80133b4:	b2db      	uxtb	r3, r3
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d002      	beq.n	80133c0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80133ba:	2302      	movs	r3, #2
 80133bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80133be:	e054      	b.n	801346a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2203      	movs	r2, #3
 80133c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	2200      	movs	r2, #0
 80133cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	68ba      	ldr	r2, [r7, #8]
 80133d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	88fa      	ldrh	r2, [r7, #6]
 80133d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	88fa      	ldrh	r2, [r7, #6]
 80133de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2200      	movs	r2, #0
 80133e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2200      	movs	r2, #0
 80133ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2200      	movs	r2, #0
 80133f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2200      	movs	r2, #0
 80133f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d003      	beq.n	8013408 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	4a1f      	ldr	r2, [pc, #124]	; (8013480 <HAL_SPI_Transmit_IT+0x10c>)
 8013404:	645a      	str	r2, [r3, #68]	; 0x44
 8013406:	e002      	b.n	801340e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	4a1e      	ldr	r2, [pc, #120]	; (8013484 <HAL_SPI_Transmit_IT+0x110>)
 801340c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013416:	d10f      	bne.n	8013438 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	681a      	ldr	r2, [r3, #0]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013426:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	681a      	ldr	r2, [r3, #0]
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013436:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	685a      	ldr	r2, [r3, #4]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8013446:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013452:	2b40      	cmp	r3, #64	; 0x40
 8013454:	d008      	beq.n	8013468 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	681a      	ldr	r2, [r3, #0]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013464:	601a      	str	r2, [r3, #0]
 8013466:	e000      	b.n	801346a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8013468:	bf00      	nop
  __HAL_UNLOCK(hspi);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2200      	movs	r2, #0
 801346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013472:	7dfb      	ldrb	r3, [r7, #23]
}
 8013474:	4618      	mov	r0, r3
 8013476:	371c      	adds	r7, #28
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr
 8013480:	08014a19 	.word	0x08014a19
 8013484:	080149d3 	.word	0x080149d3

08013488 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	4613      	mov	r3, r2
 8013494:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013496:	2300      	movs	r3, #0
 8013498:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d110      	bne.n	80134c4 <HAL_SPI_Receive_IT+0x3c>
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80134aa:	d10b      	bne.n	80134c4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2204      	movs	r2, #4
 80134b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80134b4:	88fb      	ldrh	r3, [r7, #6]
 80134b6:	68ba      	ldr	r2, [r7, #8]
 80134b8:	68b9      	ldr	r1, [r7, #8]
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f000 f882 	bl	80135c4 <HAL_SPI_TransmitReceive_IT>
 80134c0:	4603      	mov	r3, r0
 80134c2:	e076      	b.n	80135b2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d101      	bne.n	80134d2 <HAL_SPI_Receive_IT+0x4a>
 80134ce:	2302      	movs	r3, #2
 80134d0:	e06f      	b.n	80135b2 <HAL_SPI_Receive_IT+0x12a>
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2201      	movs	r2, #1
 80134d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	2b01      	cmp	r3, #1
 80134e4:	d002      	beq.n	80134ec <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80134e6:	2302      	movs	r3, #2
 80134e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80134ea:	e05d      	b.n	80135a8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d002      	beq.n	80134f8 <HAL_SPI_Receive_IT+0x70>
 80134f2:	88fb      	ldrh	r3, [r7, #6]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d102      	bne.n	80134fe <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80134f8:	2301      	movs	r3, #1
 80134fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80134fc:	e054      	b.n	80135a8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2204      	movs	r2, #4
 8013502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2200      	movs	r2, #0
 801350a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	68ba      	ldr	r2, [r7, #8]
 8013510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	88fa      	ldrh	r2, [r7, #6]
 8013516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	88fa      	ldrh	r2, [r7, #6]
 801351c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2200      	movs	r2, #0
 8013522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2200      	movs	r2, #0
 8013528:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2200      	movs	r2, #0
 801352e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2200      	movs	r2, #0
 8013534:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	68db      	ldr	r3, [r3, #12]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d003      	beq.n	8013546 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	4a1e      	ldr	r2, [pc, #120]	; (80135bc <HAL_SPI_Receive_IT+0x134>)
 8013542:	641a      	str	r2, [r3, #64]	; 0x40
 8013544:	e002      	b.n	801354c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	4a1d      	ldr	r2, [pc, #116]	; (80135c0 <HAL_SPI_Receive_IT+0x138>)
 801354a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013554:	d10f      	bne.n	8013576 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013574:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	685a      	ldr	r2, [r3, #4]
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8013584:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013590:	2b40      	cmp	r3, #64	; 0x40
 8013592:	d008      	beq.n	80135a6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80135a2:	601a      	str	r2, [r3, #0]
 80135a4:	e000      	b.n	80135a8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80135a6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2200      	movs	r2, #0
 80135ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80135b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3718      	adds	r7, #24
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	0801498d 	.word	0x0801498d
 80135c0:	08014943 	.word	0x08014943

080135c4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80135c4:	b480      	push	{r7}
 80135c6:	b087      	sub	sp, #28
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80135d2:	2300      	movs	r3, #0
 80135d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80135dc:	2b01      	cmp	r3, #1
 80135de:	d101      	bne.n	80135e4 <HAL_SPI_TransmitReceive_IT+0x20>
 80135e0:	2302      	movs	r3, #2
 80135e2:	e075      	b.n	80136d0 <HAL_SPI_TransmitReceive_IT+0x10c>
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2201      	movs	r2, #1
 80135e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80135f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80135fa:	7dbb      	ldrb	r3, [r7, #22]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d00d      	beq.n	801361c <HAL_SPI_TransmitReceive_IT+0x58>
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013606:	d106      	bne.n	8013616 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d102      	bne.n	8013616 <HAL_SPI_TransmitReceive_IT+0x52>
 8013610:	7dbb      	ldrb	r3, [r7, #22]
 8013612:	2b04      	cmp	r3, #4
 8013614:	d002      	beq.n	801361c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8013616:	2302      	movs	r3, #2
 8013618:	75fb      	strb	r3, [r7, #23]
    goto error;
 801361a:	e054      	b.n	80136c6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d005      	beq.n	801362e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d002      	beq.n	801362e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013628:	887b      	ldrh	r3, [r7, #2]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d102      	bne.n	8013634 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 801362e:	2301      	movs	r3, #1
 8013630:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013632:	e048      	b.n	80136c6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801363a:	b2db      	uxtb	r3, r3
 801363c:	2b04      	cmp	r3, #4
 801363e:	d003      	beq.n	8013648 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	2205      	movs	r2, #5
 8013644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2200      	movs	r2, #0
 801364c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	68ba      	ldr	r2, [r7, #8]
 8013652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	887a      	ldrh	r2, [r7, #2]
 8013658:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	887a      	ldrh	r2, [r7, #2]
 801365e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	887a      	ldrh	r2, [r7, #2]
 801366a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	887a      	ldrh	r2, [r7, #2]
 8013670:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	68db      	ldr	r3, [r3, #12]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d006      	beq.n	8013688 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	4a17      	ldr	r2, [pc, #92]	; (80136dc <HAL_SPI_TransmitReceive_IT+0x118>)
 801367e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	4a17      	ldr	r2, [pc, #92]	; (80136e0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8013684:	645a      	str	r2, [r3, #68]	; 0x44
 8013686:	e005      	b.n	8013694 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	4a16      	ldr	r2, [pc, #88]	; (80136e4 <HAL_SPI_TransmitReceive_IT+0x120>)
 801368c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	4a15      	ldr	r2, [pc, #84]	; (80136e8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8013692:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	685a      	ldr	r2, [r3, #4]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80136a2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136ae:	2b40      	cmp	r3, #64	; 0x40
 80136b0:	d008      	beq.n	80136c4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80136c0:	601a      	str	r2, [r3, #0]
 80136c2:	e000      	b.n	80136c6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80136c4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	2200      	movs	r2, #0
 80136ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80136ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	371c      	adds	r7, #28
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr
 80136dc:	08014885 	.word	0x08014885
 80136e0:	080148e5 	.word	0x080148e5
 80136e4:	080147c1 	.word	0x080147c1
 80136e8:	08014825 	.word	0x08014825

080136ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b086      	sub	sp, #24
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	4613      	mov	r3, r2
 80136f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80136fa:	2300      	movs	r3, #0
 80136fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013704:	2b01      	cmp	r3, #1
 8013706:	d101      	bne.n	801370c <HAL_SPI_Transmit_DMA+0x20>
 8013708:	2302      	movs	r3, #2
 801370a:	e09b      	b.n	8013844 <HAL_SPI_Transmit_DMA+0x158>
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2201      	movs	r2, #1
 8013710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801371a:	b2db      	uxtb	r3, r3
 801371c:	2b01      	cmp	r3, #1
 801371e:	d002      	beq.n	8013726 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013720:	2302      	movs	r3, #2
 8013722:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013724:	e089      	b.n	801383a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d002      	beq.n	8013732 <HAL_SPI_Transmit_DMA+0x46>
 801372c:	88fb      	ldrh	r3, [r7, #6]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d102      	bne.n	8013738 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8013732:	2301      	movs	r3, #1
 8013734:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013736:	e080      	b.n	801383a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	2203      	movs	r2, #3
 801373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2200      	movs	r2, #0
 8013744:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	68ba      	ldr	r2, [r7, #8]
 801374a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	88fa      	ldrh	r2, [r7, #6]
 8013750:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	88fa      	ldrh	r2, [r7, #6]
 8013756:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2200      	movs	r2, #0
 801375c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2200      	movs	r2, #0
 8013762:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2200      	movs	r2, #0
 8013768:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2200      	movs	r2, #0
 801376e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2200      	movs	r2, #0
 8013774:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	689b      	ldr	r3, [r3, #8]
 801377a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801377e:	d10f      	bne.n	80137a0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801378e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801379e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137a4:	4a29      	ldr	r2, [pc, #164]	; (801384c <HAL_SPI_Transmit_DMA+0x160>)
 80137a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137ac:	4a28      	ldr	r2, [pc, #160]	; (8013850 <HAL_SPI_Transmit_DMA+0x164>)
 80137ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137b4:	4a27      	ldr	r2, [pc, #156]	; (8013854 <HAL_SPI_Transmit_DMA+0x168>)
 80137b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137bc:	2200      	movs	r2, #0
 80137be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c8:	4619      	mov	r1, r3
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	330c      	adds	r3, #12
 80137d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80137d8:	f7f4 fa91 	bl	8007cfe <HAL_DMA_Start_IT>
 80137dc:	4603      	mov	r3, r0
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00c      	beq.n	80137fc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137e6:	f043 0210 	orr.w	r2, r3, #16
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80137ee:	2301      	movs	r3, #1
 80137f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2201      	movs	r2, #1
 80137f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80137fa:	e01e      	b.n	801383a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013806:	2b40      	cmp	r3, #64	; 0x40
 8013808:	d007      	beq.n	801381a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013818:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	685a      	ldr	r2, [r3, #4]
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	f042 0220 	orr.w	r2, r2, #32
 8013828:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	685a      	ldr	r2, [r3, #4]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	f042 0202 	orr.w	r2, r2, #2
 8013838:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2200      	movs	r2, #0
 801383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013842:	7dfb      	ldrb	r3, [r7, #23]
}
 8013844:	4618      	mov	r0, r3
 8013846:	3718      	adds	r7, #24
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	08014571 	.word	0x08014571
 8013850:	08014391 	.word	0x08014391
 8013854:	080145c5 	.word	0x080145c5

08013858 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af00      	add	r7, sp, #0
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	4613      	mov	r3, r2
 8013864:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013866:	2300      	movs	r3, #0
 8013868:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	689b      	ldr	r3, [r3, #8]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d110      	bne.n	8013894 <HAL_SPI_Receive_DMA+0x3c>
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801387a:	d10b      	bne.n	8013894 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2204      	movs	r2, #4
 8013880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8013884:	88fb      	ldrh	r3, [r7, #6]
 8013886:	68ba      	ldr	r2, [r7, #8]
 8013888:	68b9      	ldr	r1, [r7, #8]
 801388a:	68f8      	ldr	r0, [r7, #12]
 801388c:	f000 f8ac 	bl	80139e8 <HAL_SPI_TransmitReceive_DMA>
 8013890:	4603      	mov	r3, r0
 8013892:	e09f      	b.n	80139d4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801389a:	2b01      	cmp	r3, #1
 801389c:	d101      	bne.n	80138a2 <HAL_SPI_Receive_DMA+0x4a>
 801389e:	2302      	movs	r3, #2
 80138a0:	e098      	b.n	80139d4 <HAL_SPI_Receive_DMA+0x17c>
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2201      	movs	r2, #1
 80138a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d002      	beq.n	80138bc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80138b6:	2302      	movs	r3, #2
 80138b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138ba:	e086      	b.n	80139ca <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d002      	beq.n	80138c8 <HAL_SPI_Receive_DMA+0x70>
 80138c2:	88fb      	ldrh	r3, [r7, #6]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d102      	bne.n	80138ce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80138c8:	2301      	movs	r3, #1
 80138ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138cc:	e07d      	b.n	80139ca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2204      	movs	r2, #4
 80138d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	88fa      	ldrh	r2, [r7, #6]
 80138e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	88fa      	ldrh	r2, [r7, #6]
 80138ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2200      	movs	r2, #0
 80138f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2200      	movs	r2, #0
 80138f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	689b      	ldr	r3, [r3, #8]
 801390a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801390e:	d10f      	bne.n	8013930 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801391e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801392e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013934:	4a29      	ldr	r2, [pc, #164]	; (80139dc <HAL_SPI_Receive_DMA+0x184>)
 8013936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801393c:	4a28      	ldr	r2, [pc, #160]	; (80139e0 <HAL_SPI_Receive_DMA+0x188>)
 801393e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013944:	4a27      	ldr	r2, [pc, #156]	; (80139e4 <HAL_SPI_Receive_DMA+0x18c>)
 8013946:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801394c:	2200      	movs	r2, #0
 801394e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	330c      	adds	r3, #12
 801395a:	4619      	mov	r1, r3
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013960:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013966:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013968:	f7f4 f9c9 	bl	8007cfe <HAL_DMA_Start_IT>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00c      	beq.n	801398c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013976:	f043 0210 	orr.w	r2, r3, #16
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801397e:	2301      	movs	r3, #1
 8013980:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2201      	movs	r2, #1
 8013986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801398a:	e01e      	b.n	80139ca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013996:	2b40      	cmp	r3, #64	; 0x40
 8013998:	d007      	beq.n	80139aa <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	685a      	ldr	r2, [r3, #4]
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f042 0220 	orr.w	r2, r2, #32
 80139b8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	685a      	ldr	r2, [r3, #4]
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	f042 0201 	orr.w	r2, r2, #1
 80139c8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2200      	movs	r2, #0
 80139ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80139d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3718      	adds	r7, #24
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	0801458d 	.word	0x0801458d
 80139e0:	08014439 	.word	0x08014439
 80139e4:	080145c5 	.word	0x080145c5

080139e8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	607a      	str	r2, [r7, #4]
 80139f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80139f6:	2300      	movs	r3, #0
 80139f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d101      	bne.n	8013a08 <HAL_SPI_TransmitReceive_DMA+0x20>
 8013a04:	2302      	movs	r3, #2
 8013a06:	e0e3      	b.n	8013bd0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8013a1e:	7dbb      	ldrb	r3, [r7, #22]
 8013a20:	2b01      	cmp	r3, #1
 8013a22:	d00d      	beq.n	8013a40 <HAL_SPI_TransmitReceive_DMA+0x58>
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a2a:	d106      	bne.n	8013a3a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d102      	bne.n	8013a3a <HAL_SPI_TransmitReceive_DMA+0x52>
 8013a34:	7dbb      	ldrb	r3, [r7, #22]
 8013a36:	2b04      	cmp	r3, #4
 8013a38:	d002      	beq.n	8013a40 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a3e:	e0c2      	b.n	8013bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d005      	beq.n	8013a52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d002      	beq.n	8013a52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a4c:	887b      	ldrh	r3, [r7, #2]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d102      	bne.n	8013a58 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8013a52:	2301      	movs	r3, #1
 8013a54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a56:	e0b6      	b.n	8013bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	2b04      	cmp	r3, #4
 8013a62:	d003      	beq.n	8013a6c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	2205      	movs	r2, #5
 8013a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	68ba      	ldr	r2, [r7, #8]
 8013a76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	887a      	ldrh	r2, [r7, #2]
 8013a7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	887a      	ldrh	r2, [r7, #2]
 8013a82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	887a      	ldrh	r2, [r7, #2]
 8013a8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	887a      	ldrh	r2, [r7, #2]
 8013a94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	2b04      	cmp	r3, #4
 8013aac:	d108      	bne.n	8013ac0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ab2:	4a49      	ldr	r2, [pc, #292]	; (8013bd8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8013ab4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aba:	4a48      	ldr	r2, [pc, #288]	; (8013bdc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8013abc:	63da      	str	r2, [r3, #60]	; 0x3c
 8013abe:	e007      	b.n	8013ad0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ac4:	4a46      	ldr	r2, [pc, #280]	; (8013be0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8013ac6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013acc:	4a45      	ldr	r2, [pc, #276]	; (8013be4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8013ace:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ad4:	4a44      	ldr	r2, [pc, #272]	; (8013be8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8013ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013adc:	2200      	movs	r2, #0
 8013ade:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	330c      	adds	r3, #12
 8013aea:	4619      	mov	r1, r3
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013af0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013af6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013af8:	f7f4 f901 	bl	8007cfe <HAL_DMA_Start_IT>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00c      	beq.n	8013b1c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b06:	f043 0210 	orr.w	r2, r3, #16
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013b0e:	2301      	movs	r3, #1
 8013b10:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	2201      	movs	r2, #1
 8013b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013b1a:	e054      	b.n	8013bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	685a      	ldr	r2, [r3, #4]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	f042 0201 	orr.w	r2, r2, #1
 8013b2a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b30:	2200      	movs	r2, #0
 8013b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b38:	2200      	movs	r2, #0
 8013b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b40:	2200      	movs	r2, #0
 8013b42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b48:	2200      	movs	r2, #0
 8013b4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b54:	4619      	mov	r1, r3
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	330c      	adds	r3, #12
 8013b5c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013b64:	f7f4 f8cb 	bl	8007cfe <HAL_DMA_Start_IT>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d00c      	beq.n	8013b88 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b72:	f043 0210 	orr.w	r2, r3, #16
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2201      	movs	r2, #1
 8013b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013b86:	e01e      	b.n	8013bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b92:	2b40      	cmp	r3, #64	; 0x40
 8013b94:	d007      	beq.n	8013ba6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	681a      	ldr	r2, [r3, #0]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013ba4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	685a      	ldr	r2, [r3, #4]
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	f042 0220 	orr.w	r2, r2, #32
 8013bb4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	685a      	ldr	r2, [r3, #4]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	f042 0202 	orr.w	r2, r2, #2
 8013bc4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3718      	adds	r7, #24
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}
 8013bd8:	0801458d 	.word	0x0801458d
 8013bdc:	08014439 	.word	0x08014439
 8013be0:	080145a9 	.word	0x080145a9
 8013be4:	080144e1 	.word	0x080144e1
 8013be8:	080145c5 	.word	0x080145c5

08013bec <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b088      	sub	sp, #32
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013bf8:	4b6e      	ldr	r3, [pc, #440]	; (8013db4 <HAL_SPI_Abort+0x1c8>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	4a6e      	ldr	r2, [pc, #440]	; (8013db8 <HAL_SPI_Abort+0x1cc>)
 8013bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8013c02:	0a5b      	lsrs	r3, r3, #9
 8013c04:	2264      	movs	r2, #100	; 0x64
 8013c06:	fb02 f303 	mul.w	r3, r2, r3
 8013c0a:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	685a      	ldr	r2, [r3, #4]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	f022 0220 	bic.w	r2, r2, #32
 8013c1e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c2a:	2b80      	cmp	r3, #128	; 0x80
 8013c2c:	d117      	bne.n	8013c5e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	4a62      	ldr	r2, [pc, #392]	; (8013dbc <HAL_SPI_Abort+0x1d0>)
 8013c32:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c34:	69bb      	ldr	r3, [r7, #24]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d106      	bne.n	8013c48 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c46:	e008      	b.n	8013c5a <HAL_SPI_Abort+0x6e>
      }
      count--;
 8013c48:	69bb      	ldr	r3, [r7, #24]
 8013c4a:	3b01      	subs	r3, #1
 8013c4c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	2b07      	cmp	r3, #7
 8013c58:	d1ec      	bne.n	8013c34 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c68:	2b40      	cmp	r3, #64	; 0x40
 8013c6a:	d117      	bne.n	8013c9c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4a54      	ldr	r2, [pc, #336]	; (8013dc0 <HAL_SPI_Abort+0x1d4>)
 8013c70:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d106      	bne.n	8013c86 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c84:	e008      	b.n	8013c98 <HAL_SPI_Abort+0xac>
      }
      count--;
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	3b01      	subs	r3, #1
 8013c8a:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c92:	b2db      	uxtb	r3, r3
 8013c94:	2b07      	cmp	r3, #7
 8013c96:	d1ec      	bne.n	8013c72 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	f003 0302 	and.w	r3, r3, #2
 8013ca6:	2b02      	cmp	r3, #2
 8013ca8:	d12e      	bne.n	8013d08 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d02a      	beq.n	8013d08 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7f4 f875 	bl	8007dae <HAL_DMA_Abort>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d002      	beq.n	8013cd0 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2240      	movs	r2, #64	; 0x40
 8013cce:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	685a      	ldr	r2, [r3, #4]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f022 0202 	bic.w	r2, r2, #2
 8013cde:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8013ce0:	69bb      	ldr	r3, [r7, #24]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d106      	bne.n	8013cf4 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8013cf2:	e009      	b.n	8013d08 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8013cf4:	69bb      	ldr	r3, [r7, #24]
 8013cf6:	3b01      	subs	r3, #1
 8013cf8:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	689b      	ldr	r3, [r3, #8]
 8013d00:	f003 0302 	and.w	r3, r3, #2
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d0eb      	beq.n	8013ce0 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	f003 0301 	and.w	r3, r3, #1
 8013d12:	2b01      	cmp	r3, #1
 8013d14:	d122      	bne.n	8013d5c <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d01e      	beq.n	8013d5c <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d22:	2200      	movs	r2, #0
 8013d24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7f4 f83f 	bl	8007dae <HAL_DMA_Abort>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d002      	beq.n	8013d3c <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2240      	movs	r2, #64	; 0x40
 8013d3a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d4a:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	685a      	ldr	r2, [r3, #4]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	f022 0201 	bic.w	r2, r2, #1
 8013d5a:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2200      	movs	r2, #0
 8013d66:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d6c:	2b40      	cmp	r3, #64	; 0x40
 8013d6e:	d102      	bne.n	8013d76 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8013d70:	2301      	movs	r3, #1
 8013d72:	77fb      	strb	r3, [r7, #31]
 8013d74:	e002      	b.n	8013d7c <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	60fb      	str	r3, [r7, #12]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	60fb      	str	r3, [r7, #12]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	689b      	ldr	r3, [r3, #8]
 8013d8e:	60fb      	str	r3, [r7, #12]
 8013d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013d92:	2300      	movs	r3, #0
 8013d94:	613b      	str	r3, [r7, #16]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	689b      	ldr	r3, [r3, #8]
 8013d9c:	613b      	str	r3, [r7, #16]
 8013d9e:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2201      	movs	r2, #1
 8013da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8013da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3720      	adds	r7, #32
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	20000058 	.word	0x20000058
 8013db8:	057619f1 	.word	0x057619f1
 8013dbc:	08014f71 	.word	0x08014f71
 8013dc0:	08014ee1 	.word	0x08014ee1

08013dc4 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b088      	sub	sp, #32
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013dd4:	4b72      	ldr	r3, [pc, #456]	; (8013fa0 <HAL_SPI_Abort_IT+0x1dc>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	4a72      	ldr	r2, [pc, #456]	; (8013fa4 <HAL_SPI_Abort_IT+0x1e0>)
 8013dda:	fba2 2303 	umull	r2, r3, r2, r3
 8013dde:	0a5b      	lsrs	r3, r3, #9
 8013de0:	2264      	movs	r2, #100	; 0x64
 8013de2:	fb02 f303 	mul.w	r3, r2, r3
 8013de6:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	685a      	ldr	r2, [r3, #4]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f022 0220 	bic.w	r2, r2, #32
 8013dfa:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e06:	2b80      	cmp	r3, #128	; 0x80
 8013e08:	d117      	bne.n	8013e3a <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	4a66      	ldr	r2, [pc, #408]	; (8013fa8 <HAL_SPI_Abort_IT+0x1e4>)
 8013e0e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d106      	bne.n	8013e24 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013e22:	e008      	b.n	8013e36 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	3b01      	subs	r3, #1
 8013e28:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e30:	b2db      	uxtb	r3, r3
 8013e32:	2b07      	cmp	r3, #7
 8013e34:	d1ec      	bne.n	8013e10 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	685b      	ldr	r3, [r3, #4]
 8013e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e44:	2b40      	cmp	r3, #64	; 0x40
 8013e46:	d117      	bne.n	8013e78 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	4a58      	ldr	r2, [pc, #352]	; (8013fac <HAL_SPI_Abort_IT+0x1e8>)
 8013e4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d106      	bne.n	8013e62 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013e60:	e008      	b.n	8013e74 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	3b01      	subs	r3, #1
 8013e66:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	2b07      	cmp	r3, #7
 8013e72:	d1ec      	bne.n	8013e4e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d00f      	beq.n	8013ea0 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	f003 0302 	and.w	r3, r3, #2
 8013e8a:	2b02      	cmp	r3, #2
 8013e8c:	d104      	bne.n	8013e98 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e92:	4a47      	ldr	r2, [pc, #284]	; (8013fb0 <HAL_SPI_Abort_IT+0x1ec>)
 8013e94:	651a      	str	r2, [r3, #80]	; 0x50
 8013e96:	e003      	b.n	8013ea0 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d00f      	beq.n	8013ec8 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	f003 0301 	and.w	r3, r3, #1
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d104      	bne.n	8013ec0 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eba:	4a3e      	ldr	r2, [pc, #248]	; (8013fb4 <HAL_SPI_Abort_IT+0x1f0>)
 8013ebc:	651a      	str	r2, [r3, #80]	; 0x50
 8013ebe:	e003      	b.n	8013ec8 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	f003 0302 	and.w	r3, r3, #2
 8013ed2:	2b02      	cmp	r3, #2
 8013ed4:	d115      	bne.n	8013f02 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d011      	beq.n	8013f02 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7f3 ffd3 	bl	8007e8e <HAL_DMA_Abort_IT>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d007      	beq.n	8013efe <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2240      	movs	r2, #64	; 0x40
 8013efa:	655a      	str	r2, [r3, #84]	; 0x54
 8013efc:	e001      	b.n	8013f02 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8013efe:	2300      	movs	r3, #0
 8013f00:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	685b      	ldr	r3, [r3, #4]
 8013f08:	f003 0301 	and.w	r3, r3, #1
 8013f0c:	2b01      	cmp	r3, #1
 8013f0e:	d115      	bne.n	8013f3c <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d011      	beq.n	8013f3c <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7f3 ffb6 	bl	8007e8e <HAL_DMA_Abort_IT>
 8013f22:	4603      	mov	r3, r0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d007      	beq.n	8013f38 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2240      	movs	r2, #64	; 0x40
 8013f34:	655a      	str	r2, [r3, #84]	; 0x54
 8013f36:	e001      	b.n	8013f3c <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	2b01      	cmp	r3, #1
 8013f40:	d128      	bne.n	8013f94 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2200      	movs	r2, #0
 8013f46:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f52:	2b40      	cmp	r3, #64	; 0x40
 8013f54:	d102      	bne.n	8013f5c <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8013f56:	2301      	movs	r3, #1
 8013f58:	77fb      	strb	r3, [r7, #31]
 8013f5a:	e002      	b.n	8013f62 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013f62:	2300      	movs	r3, #0
 8013f64:	60bb      	str	r3, [r7, #8]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	60bb      	str	r3, [r7, #8]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	60bb      	str	r3, [r7, #8]
 8013f76:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013f78:	2300      	movs	r3, #0
 8013f7a:	60fb      	str	r3, [r7, #12]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	689b      	ldr	r3, [r3, #8]
 8013f82:	60fb      	str	r3, [r7, #12]
 8013f84:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2201      	movs	r2, #1
 8013f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 f9da 	bl	8014348 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8013f94:	7ffb      	ldrb	r3, [r7, #31]
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3720      	adds	r7, #32
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	20000058 	.word	0x20000058
 8013fa4:	057619f1 	.word	0x057619f1
 8013fa8:	08014f71 	.word	0x08014f71
 8013fac:	08014ee1 	.word	0x08014ee1
 8013fb0:	0801462d 	.word	0x0801462d
 8013fb4:	08014701 	.word	0x08014701

08013fb8 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b083      	sub	sp, #12
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	d101      	bne.n	8013fce <HAL_SPI_DMAPause+0x16>
 8013fca:	2302      	movs	r3, #2
 8013fcc:	e010      	b.n	8013ff0 <HAL_SPI_DMAPause+0x38>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	685a      	ldr	r2, [r3, #4]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	f022 0203 	bic.w	r2, r2, #3
 8013fe4:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2200      	movs	r2, #0
 8013fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013fee:	2300      	movs	r3, #0
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	370c      	adds	r7, #12
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr

08013ffc <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b083      	sub	sp, #12
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801400a:	2b01      	cmp	r3, #1
 801400c:	d101      	bne.n	8014012 <HAL_SPI_DMAResume+0x16>
 801400e:	2302      	movs	r3, #2
 8014010:	e010      	b.n	8014034 <HAL_SPI_DMAResume+0x38>
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2201      	movs	r2, #1
 8014016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	685a      	ldr	r2, [r3, #4]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	f042 0203 	orr.w	r2, r2, #3
 8014028:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2200      	movs	r2, #0
 801402e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8014032:	2300      	movs	r3, #0
}
 8014034:	4618      	mov	r0, r3
 8014036:	370c      	adds	r7, #12
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr

08014040 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014048:	2300      	movs	r3, #0
 801404a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00f      	beq.n	8014074 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014058:	4618      	mov	r0, r3
 801405a:	f7f3 fea8 	bl	8007dae <HAL_DMA_Abort>
 801405e:	4603      	mov	r3, r0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d007      	beq.n	8014074 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014068:	f043 0210 	orr.w	r2, r3, #16
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014070:	2301      	movs	r3, #1
 8014072:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014078:	2b00      	cmp	r3, #0
 801407a:	d00f      	beq.n	801409c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014080:	4618      	mov	r0, r3
 8014082:	f7f3 fe94 	bl	8007dae <HAL_DMA_Abort>
 8014086:	4603      	mov	r3, r0
 8014088:	2b00      	cmp	r3, #0
 801408a:	d007      	beq.n	801409c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014090:	f043 0210 	orr.w	r2, r3, #16
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014098:	2301      	movs	r3, #1
 801409a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	685a      	ldr	r2, [r3, #4]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	f022 0203 	bic.w	r2, r2, #3
 80140aa:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2201      	movs	r2, #1
 80140b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80140b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}

080140be <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b088      	sub	sp, #32
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	685b      	ldr	r3, [r3, #4]
 80140cc:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	099b      	lsrs	r3, r3, #6
 80140da:	f003 0301 	and.w	r3, r3, #1
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d10f      	bne.n	8014102 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80140e2:	69bb      	ldr	r3, [r7, #24]
 80140e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d00a      	beq.n	8014102 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	099b      	lsrs	r3, r3, #6
 80140f0:	f003 0301 	and.w	r3, r3, #1
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d004      	beq.n	8014102 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	4798      	blx	r3
    return;
 8014100:	e0d7      	b.n	80142b2 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	085b      	lsrs	r3, r3, #1
 8014106:	f003 0301 	and.w	r3, r3, #1
 801410a:	2b00      	cmp	r3, #0
 801410c:	d00a      	beq.n	8014124 <HAL_SPI_IRQHandler+0x66>
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	09db      	lsrs	r3, r3, #7
 8014112:	f003 0301 	and.w	r3, r3, #1
 8014116:	2b00      	cmp	r3, #0
 8014118:	d004      	beq.n	8014124 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	4798      	blx	r3
    return;
 8014122:	e0c6      	b.n	80142b2 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	095b      	lsrs	r3, r3, #5
 8014128:	f003 0301 	and.w	r3, r3, #1
 801412c:	2b00      	cmp	r3, #0
 801412e:	d10c      	bne.n	801414a <HAL_SPI_IRQHandler+0x8c>
 8014130:	69bb      	ldr	r3, [r7, #24]
 8014132:	099b      	lsrs	r3, r3, #6
 8014134:	f003 0301 	and.w	r3, r3, #1
 8014138:	2b00      	cmp	r3, #0
 801413a:	d106      	bne.n	801414a <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	0a1b      	lsrs	r3, r3, #8
 8014140:	f003 0301 	and.w	r3, r3, #1
 8014144:	2b00      	cmp	r3, #0
 8014146:	f000 80b4 	beq.w	80142b2 <HAL_SPI_IRQHandler+0x1f4>
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	095b      	lsrs	r3, r3, #5
 801414e:	f003 0301 	and.w	r3, r3, #1
 8014152:	2b00      	cmp	r3, #0
 8014154:	f000 80ad 	beq.w	80142b2 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	099b      	lsrs	r3, r3, #6
 801415c:	f003 0301 	and.w	r3, r3, #1
 8014160:	2b00      	cmp	r3, #0
 8014162:	d023      	beq.n	80141ac <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801416a:	b2db      	uxtb	r3, r3
 801416c:	2b03      	cmp	r3, #3
 801416e:	d011      	beq.n	8014194 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014174:	f043 0204 	orr.w	r2, r3, #4
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801417c:	2300      	movs	r3, #0
 801417e:	60bb      	str	r3, [r7, #8]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	68db      	ldr	r3, [r3, #12]
 8014186:	60bb      	str	r3, [r7, #8]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	689b      	ldr	r3, [r3, #8]
 801418e:	60bb      	str	r3, [r7, #8]
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	e00b      	b.n	80141ac <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014194:	2300      	movs	r3, #0
 8014196:	60fb      	str	r3, [r7, #12]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	68db      	ldr	r3, [r3, #12]
 801419e:	60fb      	str	r3, [r7, #12]
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	60fb      	str	r3, [r7, #12]
 80141a8:	68fb      	ldr	r3, [r7, #12]
        return;
 80141aa:	e082      	b.n	80142b2 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	095b      	lsrs	r3, r3, #5
 80141b0:	f003 0301 	and.w	r3, r3, #1
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d014      	beq.n	80141e2 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141bc:	f043 0201 	orr.w	r2, r3, #1
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80141c4:	2300      	movs	r3, #0
 80141c6:	613b      	str	r3, [r7, #16]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	689b      	ldr	r3, [r3, #8]
 80141ce:	613b      	str	r3, [r7, #16]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80141de:	601a      	str	r2, [r3, #0]
 80141e0:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80141e2:	69bb      	ldr	r3, [r7, #24]
 80141e4:	0a1b      	lsrs	r3, r3, #8
 80141e6:	f003 0301 	and.w	r3, r3, #1
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d00c      	beq.n	8014208 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141f2:	f043 0208 	orr.w	r2, r3, #8
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80141fa:	2300      	movs	r3, #0
 80141fc:	617b      	str	r3, [r7, #20]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	689b      	ldr	r3, [r3, #8]
 8014204:	617b      	str	r3, [r7, #20]
 8014206:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801420c:	2b00      	cmp	r3, #0
 801420e:	d04f      	beq.n	80142b0 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	685a      	ldr	r2, [r3, #4]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801421e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2201      	movs	r2, #1
 8014224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	f003 0302 	and.w	r3, r3, #2
 801422e:	2b00      	cmp	r3, #0
 8014230:	d104      	bne.n	801423c <HAL_SPI_IRQHandler+0x17e>
 8014232:	69fb      	ldr	r3, [r7, #28]
 8014234:	f003 0301 	and.w	r3, r3, #1
 8014238:	2b00      	cmp	r3, #0
 801423a:	d034      	beq.n	80142a6 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	685a      	ldr	r2, [r3, #4]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f022 0203 	bic.w	r2, r2, #3
 801424a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014250:	2b00      	cmp	r3, #0
 8014252:	d011      	beq.n	8014278 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014258:	4a17      	ldr	r2, [pc, #92]	; (80142b8 <HAL_SPI_IRQHandler+0x1fa>)
 801425a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014260:	4618      	mov	r0, r3
 8014262:	f7f3 fe14 	bl	8007e8e <HAL_DMA_Abort_IT>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d005      	beq.n	8014278 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014270:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801427c:	2b00      	cmp	r3, #0
 801427e:	d016      	beq.n	80142ae <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014284:	4a0c      	ldr	r2, [pc, #48]	; (80142b8 <HAL_SPI_IRQHandler+0x1fa>)
 8014286:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801428c:	4618      	mov	r0, r3
 801428e:	f7f3 fdfe 	bl	8007e8e <HAL_DMA_Abort_IT>
 8014292:	4603      	mov	r3, r0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00a      	beq.n	80142ae <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801429c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80142a4:	e003      	b.n	80142ae <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 f844 	bl	8014334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80142ac:	e000      	b.n	80142b0 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80142ae:	bf00      	nop
    return;
 80142b0:	bf00      	nop
  }
}
 80142b2:	3720      	adds	r7, #32
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	08014605 	.word	0x08014605

080142bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142bc:	b480      	push	{r7}
 80142be:	b083      	sub	sp, #12
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80142c4:	bf00      	nop
 80142c6:	370c      	adds	r7, #12
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80142d8:	bf00      	nop
 80142da:	370c      	adds	r7, #12
 80142dc:	46bd      	mov	sp, r7
 80142de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e2:	4770      	bx	lr

080142e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80142ec:	bf00      	nop
 80142ee:	370c      	adds	r7, #12
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr

080142f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b083      	sub	sp, #12
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8014300:	bf00      	nop
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430a:	4770      	bx	lr

0801430c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801430c:	b480      	push	{r7}
 801430e:	b083      	sub	sp, #12
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8014314:	bf00      	nop
 8014316:	370c      	adds	r7, #12
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr

08014320 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014328:	bf00      	nop
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801433c:	bf00      	nop
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8014350:	bf00      	nop
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr

0801435c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801436a:	b2db      	uxtb	r3, r3
}
 801436c:	4618      	mov	r0, r3
 801436e:	370c      	adds	r7, #12
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8014378:	b480      	push	{r7}
 801437a:	b083      	sub	sp, #12
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8014384:	4618      	mov	r0, r3
 8014386:	370c      	adds	r7, #12
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr

08014390 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b086      	sub	sp, #24
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801439c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801439e:	f7f2 fa45 	bl	800682c <HAL_GetTick>
 80143a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143b2:	d03b      	beq.n	801442c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	685a      	ldr	r2, [r3, #4]
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	f022 0220 	bic.w	r2, r2, #32
 80143c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80143c4:	697b      	ldr	r3, [r7, #20]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	685a      	ldr	r2, [r3, #4]
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	f022 0202 	bic.w	r2, r2, #2
 80143d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80143d4:	693a      	ldr	r2, [r7, #16]
 80143d6:	2164      	movs	r1, #100	; 0x64
 80143d8:	6978      	ldr	r0, [r7, #20]
 80143da:	f000 fc2c 	bl	8014c36 <SPI_EndRxTxTransaction>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d005      	beq.n	80143f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143e8:	f043 0220 	orr.w	r2, r3, #32
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	689b      	ldr	r3, [r3, #8]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d10a      	bne.n	801440e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80143f8:	2300      	movs	r3, #0
 80143fa:	60fb      	str	r3, [r7, #12]
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	60fb      	str	r3, [r7, #12]
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	689b      	ldr	r3, [r3, #8]
 801440a:	60fb      	str	r3, [r7, #12]
 801440c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	2200      	movs	r2, #0
 8014412:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	2201      	movs	r2, #1
 8014418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014420:	2b00      	cmp	r3, #0
 8014422:	d003      	beq.n	801442c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014424:	6978      	ldr	r0, [r7, #20]
 8014426:	f7ff ff85 	bl	8014334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801442a:	e002      	b.n	8014432 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 801442c:	6978      	ldr	r0, [r7, #20]
 801442e:	f7ff ff45 	bl	80142bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014432:	3718      	adds	r7, #24
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b084      	sub	sp, #16
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014444:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014446:	f7f2 f9f1 	bl	800682c <HAL_GetTick>
 801444a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801445a:	d03b      	beq.n	80144d4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	685a      	ldr	r2, [r3, #4]
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f022 0220 	bic.w	r2, r2, #32
 801446a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d10d      	bne.n	8014490 <SPI_DMAReceiveCplt+0x58>
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801447c:	d108      	bne.n	8014490 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	685a      	ldr	r2, [r3, #4]
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	f022 0203 	bic.w	r2, r2, #3
 801448c:	605a      	str	r2, [r3, #4]
 801448e:	e007      	b.n	80144a0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	685a      	ldr	r2, [r3, #4]
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	f022 0201 	bic.w	r2, r2, #1
 801449e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	2164      	movs	r1, #100	; 0x64
 80144a4:	68f8      	ldr	r0, [r7, #12]
 80144a6:	f000 fb61 	bl	8014b6c <SPI_EndRxTransaction>
 80144aa:	4603      	mov	r3, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d002      	beq.n	80144b6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	2220      	movs	r2, #32
 80144b4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	2200      	movs	r2, #0
 80144ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2201      	movs	r2, #1
 80144c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d003      	beq.n	80144d4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	f7ff ff31 	bl	8014334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80144d2:	e002      	b.n	80144da <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80144d4:	68f8      	ldr	r0, [r7, #12]
 80144d6:	f7ff fefb 	bl	80142d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b084      	sub	sp, #16
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144ec:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80144ee:	f7f2 f99d 	bl	800682c <HAL_GetTick>
 80144f2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014502:	d02f      	beq.n	8014564 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	685a      	ldr	r2, [r3, #4]
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	f022 0220 	bic.w	r2, r2, #32
 8014512:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014514:	68ba      	ldr	r2, [r7, #8]
 8014516:	2164      	movs	r1, #100	; 0x64
 8014518:	68f8      	ldr	r0, [r7, #12]
 801451a:	f000 fb8c 	bl	8014c36 <SPI_EndRxTxTransaction>
 801451e:	4603      	mov	r3, r0
 8014520:	2b00      	cmp	r3, #0
 8014522:	d005      	beq.n	8014530 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014528:	f043 0220 	orr.w	r2, r3, #32
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	685a      	ldr	r2, [r3, #4]
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	f022 0203 	bic.w	r2, r2, #3
 801453e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	2200      	movs	r2, #0
 8014544:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	2200      	movs	r2, #0
 801454a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2201      	movs	r2, #1
 8014550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014558:	2b00      	cmp	r3, #0
 801455a:	d003      	beq.n	8014564 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801455c:	68f8      	ldr	r0, [r7, #12]
 801455e:	f7ff fee9 	bl	8014334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014562:	e002      	b.n	801456a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f7ff febd 	bl	80142e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801456a:	3710      	adds	r7, #16
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801457c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f7ff feba 	bl	80142f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014584:	bf00      	nop
 8014586:	3710      	adds	r7, #16
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b084      	sub	sp, #16
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014598:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801459a:	68f8      	ldr	r0, [r7, #12]
 801459c:	f7ff feb6 	bl	801430c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145a0:	bf00      	nop
 80145a2:	3710      	adds	r7, #16
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145b4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80145b6:	68f8      	ldr	r0, [r7, #12]
 80145b8:	f7ff feb2 	bl	8014320 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145bc:	bf00      	nop
 80145be:	3710      	adds	r7, #16
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b084      	sub	sp, #16
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145d0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	685a      	ldr	r2, [r3, #4]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	f022 0203 	bic.w	r2, r2, #3
 80145e0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145e6:	f043 0210 	orr.w	r2, r3, #16
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	2201      	movs	r2, #1
 80145f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f7ff fe9c 	bl	8014334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145fc:	bf00      	nop
 80145fe:	3710      	adds	r7, #16
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014610:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	2200      	movs	r2, #0
 8014616:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2200      	movs	r2, #0
 801461c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801461e:	68f8      	ldr	r0, [r7, #12]
 8014620:	f7ff fe88 	bl	8014334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014624:	bf00      	nop
 8014626:	3710      	adds	r7, #16
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}

0801462c <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b086      	sub	sp, #24
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014638:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801463e:	2200      	movs	r2, #0
 8014640:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014642:	4b2d      	ldr	r3, [pc, #180]	; (80146f8 <SPI_DMATxAbortCallback+0xcc>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	4a2d      	ldr	r2, [pc, #180]	; (80146fc <SPI_DMATxAbortCallback+0xd0>)
 8014648:	fba2 2303 	umull	r2, r3, r2, r3
 801464c:	0a5b      	lsrs	r3, r3, #9
 801464e:	2264      	movs	r2, #100	; 0x64
 8014650:	fb02 f303 	mul.w	r3, r2, r3
 8014654:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	685a      	ldr	r2, [r3, #4]
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	f022 0202 	bic.w	r2, r2, #2
 8014664:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d106      	bne.n	801467a <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014670:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014678:	e009      	b.n	801468e <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	3b01      	subs	r3, #1
 801467e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	689b      	ldr	r3, [r3, #8]
 8014686:	f003 0302 	and.w	r3, r3, #2
 801468a:	2b00      	cmp	r3, #0
 801468c:	d0eb      	beq.n	8014666 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014692:	2b00      	cmp	r3, #0
 8014694:	d004      	beq.n	80146a0 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801469c:	2b00      	cmp	r3, #0
 801469e:	d126      	bne.n	80146ee <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	2200      	movs	r2, #0
 80146a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	2200      	movs	r2, #0
 80146aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146b0:	2b40      	cmp	r3, #64	; 0x40
 80146b2:	d002      	beq.n	80146ba <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	2200      	movs	r2, #0
 80146b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80146ba:	2300      	movs	r3, #0
 80146bc:	60bb      	str	r3, [r7, #8]
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	60bb      	str	r3, [r7, #8]
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	689b      	ldr	r3, [r3, #8]
 80146cc:	60bb      	str	r3, [r7, #8]
 80146ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80146d0:	2300      	movs	r3, #0
 80146d2:	60fb      	str	r3, [r7, #12]
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	60fb      	str	r3, [r7, #12]
 80146dc:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	2201      	movs	r2, #1
 80146e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80146e6:	6978      	ldr	r0, [r7, #20]
 80146e8:	f7ff fe2e 	bl	8014348 <HAL_SPI_AbortCpltCallback>
 80146ec:	e000      	b.n	80146f0 <SPI_DMATxAbortCallback+0xc4>
      return;
 80146ee:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80146f0:	3718      	adds	r7, #24
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	20000058 	.word	0x20000058
 80146fc:	057619f1 	.word	0x057619f1

08014700 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b086      	sub	sp, #24
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801470c:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	681a      	ldr	r2, [r3, #0]
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801471c:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014722:	2200      	movs	r2, #0
 8014724:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	685a      	ldr	r2, [r3, #4]
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	f022 0201 	bic.w	r2, r2, #1
 8014734:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014736:	f7f2 f879 	bl	800682c <HAL_GetTick>
 801473a:	4603      	mov	r3, r0
 801473c:	461a      	mov	r2, r3
 801473e:	2164      	movs	r1, #100	; 0x64
 8014740:	6978      	ldr	r0, [r7, #20]
 8014742:	f000 fa78 	bl	8014c36 <SPI_EndRxTxTransaction>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d005      	beq.n	8014758 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014750:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801475c:	2b00      	cmp	r3, #0
 801475e:	d004      	beq.n	801476a <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8014760:	697b      	ldr	r3, [r7, #20]
 8014762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014766:	2b00      	cmp	r3, #0
 8014768:	d126      	bne.n	80147b8 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	2200      	movs	r2, #0
 801476e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	2200      	movs	r2, #0
 8014774:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801477a:	2b40      	cmp	r3, #64	; 0x40
 801477c:	d002      	beq.n	8014784 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	2200      	movs	r2, #0
 8014782:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014784:	2300      	movs	r3, #0
 8014786:	60fb      	str	r3, [r7, #12]
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	60fb      	str	r3, [r7, #12]
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	689b      	ldr	r3, [r3, #8]
 8014796:	60fb      	str	r3, [r7, #12]
 8014798:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 801479a:	2300      	movs	r3, #0
 801479c:	613b      	str	r3, [r7, #16]
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	689b      	ldr	r3, [r3, #8]
 80147a4:	613b      	str	r3, [r7, #16]
 80147a6:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	2201      	movs	r2, #1
 80147ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80147b0:	6978      	ldr	r0, [r7, #20]
 80147b2:	f7ff fdc9 	bl	8014348 <HAL_SPI_AbortCpltCallback>
 80147b6:	e000      	b.n	80147ba <SPI_DMARxAbortCallback+0xba>
      return;
 80147b8:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80147ba:	3718      	adds	r7, #24
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}

080147c0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b082      	sub	sp, #8
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	f103 020c 	add.w	r2, r3, #12
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147d4:	7812      	ldrb	r2, [r2, #0]
 80147d6:	b2d2      	uxtb	r2, r2
 80147d8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147de:	1c5a      	adds	r2, r3, #1
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	3b01      	subs	r3, #1
 80147ec:	b29a      	uxth	r2, r3
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d10f      	bne.n	801481c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	685a      	ldr	r2, [r3, #4]
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801480a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014810:	b29b      	uxth	r3, r3
 8014812:	2b00      	cmp	r3, #0
 8014814:	d102      	bne.n	801481c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 fa4e 	bl	8014cb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801481c:	bf00      	nop
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}

08014824 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	330c      	adds	r3, #12
 8014836:	7812      	ldrb	r2, [r2, #0]
 8014838:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801483e:	1c5a      	adds	r2, r3, #1
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014848:	b29b      	uxth	r3, r3
 801484a:	3b01      	subs	r3, #1
 801484c:	b29a      	uxth	r2, r3
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014856:	b29b      	uxth	r3, r3
 8014858:	2b00      	cmp	r3, #0
 801485a:	d10f      	bne.n	801487c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	685a      	ldr	r2, [r3, #4]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801486a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014870:	b29b      	uxth	r3, r3
 8014872:	2b00      	cmp	r3, #0
 8014874:	d102      	bne.n	801487c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f000 fa1e 	bl	8014cb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801487c:	bf00      	nop
 801487e:	3708      	adds	r7, #8
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	68da      	ldr	r2, [r3, #12]
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014896:	b292      	uxth	r2, r2
 8014898:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801489e:	1c9a      	adds	r2, r3, #2
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	3b01      	subs	r3, #1
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d10f      	bne.n	80148dc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	685a      	ldr	r2, [r3, #4]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d102      	bne.n	80148dc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 f9ee 	bl	8014cb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80148dc:	bf00      	nop
 80148de:	3708      	adds	r7, #8
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148f0:	881a      	ldrh	r2, [r3, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148fc:	1c9a      	adds	r2, r3, #2
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014906:	b29b      	uxth	r3, r3
 8014908:	3b01      	subs	r3, #1
 801490a:	b29a      	uxth	r2, r3
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014914:	b29b      	uxth	r3, r3
 8014916:	2b00      	cmp	r3, #0
 8014918:	d10f      	bne.n	801493a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	685a      	ldr	r2, [r3, #4]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014928:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801492e:	b29b      	uxth	r3, r3
 8014930:	2b00      	cmp	r3, #0
 8014932:	d102      	bne.n	801493a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f000 f9bf 	bl	8014cb8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801493a:	bf00      	nop
 801493c:	3708      	adds	r7, #8
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}

08014942 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014942:	b580      	push	{r7, lr}
 8014944:	b082      	sub	sp, #8
 8014946:	af00      	add	r7, sp, #0
 8014948:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	f103 020c 	add.w	r2, r3, #12
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014956:	7812      	ldrb	r2, [r2, #0]
 8014958:	b2d2      	uxtb	r2, r2
 801495a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014960:	1c5a      	adds	r2, r3, #1
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801496a:	b29b      	uxth	r3, r3
 801496c:	3b01      	subs	r3, #1
 801496e:	b29a      	uxth	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014978:	b29b      	uxth	r3, r3
 801497a:	2b00      	cmp	r3, #0
 801497c:	d102      	bne.n	8014984 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f000 fa0e 	bl	8014da0 <SPI_CloseRx_ISR>
  }
}
 8014984:	bf00      	nop
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	68da      	ldr	r2, [r3, #12]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801499e:	b292      	uxth	r2, r2
 80149a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149a6:	1c9a      	adds	r2, r3, #2
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	3b01      	subs	r3, #1
 80149b4:	b29a      	uxth	r2, r3
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149be:	b29b      	uxth	r3, r3
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d102      	bne.n	80149ca <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f000 f9eb 	bl	8014da0 <SPI_CloseRx_ISR>
  }
}
 80149ca:	bf00      	nop
 80149cc:	3708      	adds	r7, #8
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}

080149d2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80149d2:	b580      	push	{r7, lr}
 80149d4:	b082      	sub	sp, #8
 80149d6:	af00      	add	r7, sp, #0
 80149d8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	330c      	adds	r3, #12
 80149e4:	7812      	ldrb	r2, [r2, #0]
 80149e6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ec:	1c5a      	adds	r2, r3, #1
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149f6:	b29b      	uxth	r3, r3
 80149f8:	3b01      	subs	r3, #1
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d102      	bne.n	8014a10 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f000 fa07 	bl	8014e1e <SPI_CloseTx_ISR>
  }
}
 8014a10:	bf00      	nop
 8014a12:	3708      	adds	r7, #8
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a24:	881a      	ldrh	r2, [r3, #0]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a30:	1c9a      	adds	r2, r3, #2
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	3b01      	subs	r3, #1
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a48:	b29b      	uxth	r3, r3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d102      	bne.n	8014a54 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 f9e5 	bl	8014e1e <SPI_CloseTx_ISR>
  }
}
 8014a54:	bf00      	nop
 8014a56:	3708      	adds	r7, #8
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b088      	sub	sp, #32
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	603b      	str	r3, [r7, #0]
 8014a68:	4613      	mov	r3, r2
 8014a6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014a6c:	f7f1 fede 	bl	800682c <HAL_GetTick>
 8014a70:	4602      	mov	r2, r0
 8014a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a74:	1a9b      	subs	r3, r3, r2
 8014a76:	683a      	ldr	r2, [r7, #0]
 8014a78:	4413      	add	r3, r2
 8014a7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014a7c:	f7f1 fed6 	bl	800682c <HAL_GetTick>
 8014a80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014a82:	4b39      	ldr	r3, [pc, #228]	; (8014b68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	015b      	lsls	r3, r3, #5
 8014a88:	0d1b      	lsrs	r3, r3, #20
 8014a8a:	69fa      	ldr	r2, [r7, #28]
 8014a8c:	fb02 f303 	mul.w	r3, r2, r3
 8014a90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014a92:	e054      	b.n	8014b3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a9a:	d050      	beq.n	8014b3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014a9c:	f7f1 fec6 	bl	800682c <HAL_GetTick>
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	1ad3      	subs	r3, r2, r3
 8014aa6:	69fa      	ldr	r2, [r7, #28]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d902      	bls.n	8014ab2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8014aac:	69fb      	ldr	r3, [r7, #28]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d13d      	bne.n	8014b2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	685a      	ldr	r2, [r3, #4]
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014ac0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014aca:	d111      	bne.n	8014af0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	689b      	ldr	r3, [r3, #8]
 8014ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ad4:	d004      	beq.n	8014ae0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	689b      	ldr	r3, [r3, #8]
 8014ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ade:	d107      	bne.n	8014af0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014aee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014af8:	d10f      	bne.n	8014b1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014b08:	601a      	str	r2, [r3, #0]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014b18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2200      	movs	r2, #0
 8014b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014b2a:	2303      	movs	r3, #3
 8014b2c:	e017      	b.n	8014b5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d101      	bne.n	8014b38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014b34:	2300      	movs	r3, #0
 8014b36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	3b01      	subs	r3, #1
 8014b3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	689a      	ldr	r2, [r3, #8]
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	4013      	ands	r3, r2
 8014b48:	68ba      	ldr	r2, [r7, #8]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	bf0c      	ite	eq
 8014b4e:	2301      	moveq	r3, #1
 8014b50:	2300      	movne	r3, #0
 8014b52:	b2db      	uxtb	r3, r3
 8014b54:	461a      	mov	r2, r3
 8014b56:	79fb      	ldrb	r3, [r7, #7]
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d19b      	bne.n	8014a94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014b5c:	2300      	movs	r3, #0
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3720      	adds	r7, #32
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}
 8014b66:	bf00      	nop
 8014b68:	20000058 	.word	0x20000058

08014b6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b086      	sub	sp, #24
 8014b70:	af02      	add	r7, sp, #8
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b80:	d111      	bne.n	8014ba6 <SPI_EndRxTransaction+0x3a>
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	689b      	ldr	r3, [r3, #8]
 8014b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b8a:	d004      	beq.n	8014b96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	689b      	ldr	r3, [r3, #8]
 8014b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b94:	d107      	bne.n	8014ba6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ba4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bae:	d12a      	bne.n	8014c06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	689b      	ldr	r3, [r3, #8]
 8014bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bb8:	d012      	beq.n	8014be0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	2180      	movs	r1, #128	; 0x80
 8014bc4:	68f8      	ldr	r0, [r7, #12]
 8014bc6:	f7ff ff49 	bl	8014a5c <SPI_WaitFlagStateUntilTimeout>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d02d      	beq.n	8014c2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bd4:	f043 0220 	orr.w	r2, r3, #32
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	e026      	b.n	8014c2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	9300      	str	r3, [sp, #0]
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	2200      	movs	r2, #0
 8014be8:	2101      	movs	r1, #1
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f7ff ff36 	bl	8014a5c <SPI_WaitFlagStateUntilTimeout>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d01a      	beq.n	8014c2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bfa:	f043 0220 	orr.w	r2, r3, #32
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014c02:	2303      	movs	r3, #3
 8014c04:	e013      	b.n	8014c2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	9300      	str	r3, [sp, #0]
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	2101      	movs	r1, #1
 8014c10:	68f8      	ldr	r0, [r7, #12]
 8014c12:	f7ff ff23 	bl	8014a5c <SPI_WaitFlagStateUntilTimeout>
 8014c16:	4603      	mov	r3, r0
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d007      	beq.n	8014c2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c20:	f043 0220 	orr.w	r2, r3, #32
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014c28:	2303      	movs	r3, #3
 8014c2a:	e000      	b.n	8014c2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014c2c:	2300      	movs	r3, #0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3710      	adds	r7, #16
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b088      	sub	sp, #32
 8014c3a:	af02      	add	r7, sp, #8
 8014c3c:	60f8      	str	r0, [r7, #12]
 8014c3e:	60b9      	str	r1, [r7, #8]
 8014c40:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014c42:	4b1b      	ldr	r3, [pc, #108]	; (8014cb0 <SPI_EndRxTxTransaction+0x7a>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	4a1b      	ldr	r2, [pc, #108]	; (8014cb4 <SPI_EndRxTxTransaction+0x7e>)
 8014c48:	fba2 2303 	umull	r2, r3, r2, r3
 8014c4c:	0d5b      	lsrs	r3, r3, #21
 8014c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014c52:	fb02 f303 	mul.w	r3, r2, r3
 8014c56:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014c60:	d112      	bne.n	8014c88 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	9300      	str	r3, [sp, #0]
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	2180      	movs	r1, #128	; 0x80
 8014c6c:	68f8      	ldr	r0, [r7, #12]
 8014c6e:	f7ff fef5 	bl	8014a5c <SPI_WaitFlagStateUntilTimeout>
 8014c72:	4603      	mov	r3, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d016      	beq.n	8014ca6 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c7c:	f043 0220 	orr.w	r2, r3, #32
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014c84:	2303      	movs	r3, #3
 8014c86:	e00f      	b.n	8014ca8 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d00a      	beq.n	8014ca4 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	3b01      	subs	r3, #1
 8014c92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	689b      	ldr	r3, [r3, #8]
 8014c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c9e:	2b80      	cmp	r3, #128	; 0x80
 8014ca0:	d0f2      	beq.n	8014c88 <SPI_EndRxTxTransaction+0x52>
 8014ca2:	e000      	b.n	8014ca6 <SPI_EndRxTxTransaction+0x70>
        break;
 8014ca4:	bf00      	nop
  }

  return HAL_OK;
 8014ca6:	2300      	movs	r3, #0
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3718      	adds	r7, #24
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}
 8014cb0:	20000058 	.word	0x20000058
 8014cb4:	165e9f81 	.word	0x165e9f81

08014cb8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b086      	sub	sp, #24
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014cc0:	4b35      	ldr	r3, [pc, #212]	; (8014d98 <SPI_CloseRxTx_ISR+0xe0>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	4a35      	ldr	r2, [pc, #212]	; (8014d9c <SPI_CloseRxTx_ISR+0xe4>)
 8014cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8014cca:	0a5b      	lsrs	r3, r3, #9
 8014ccc:	2264      	movs	r2, #100	; 0x64
 8014cce:	fb02 f303 	mul.w	r3, r2, r3
 8014cd2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014cd4:	f7f1 fdaa 	bl	800682c <HAL_GetTick>
 8014cd8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	685a      	ldr	r2, [r3, #4]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	f022 0220 	bic.w	r2, r2, #32
 8014ce8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d106      	bne.n	8014cfe <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cf4:	f043 0220 	orr.w	r2, r3, #32
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014cfc:	e009      	b.n	8014d12 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	3b01      	subs	r3, #1
 8014d02:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	689b      	ldr	r3, [r3, #8]
 8014d0a:	f003 0302 	and.w	r3, r3, #2
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d0eb      	beq.n	8014cea <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014d12:	697a      	ldr	r2, [r7, #20]
 8014d14:	2164      	movs	r1, #100	; 0x64
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f7ff ff8d 	bl	8014c36 <SPI_EndRxTxTransaction>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d005      	beq.n	8014d2e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d26:	f043 0220 	orr.w	r2, r3, #32
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	689b      	ldr	r3, [r3, #8]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d10a      	bne.n	8014d4c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014d36:	2300      	movs	r3, #0
 8014d38:	60fb      	str	r3, [r7, #12]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	68db      	ldr	r3, [r3, #12]
 8014d40:	60fb      	str	r3, [r7, #12]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	689b      	ldr	r3, [r3, #8]
 8014d48:	60fb      	str	r3, [r7, #12]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d115      	bne.n	8014d80 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	2b04      	cmp	r3, #4
 8014d5e:	d107      	bne.n	8014d70 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2201      	movs	r2, #1
 8014d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f7ff fab1 	bl	80142d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014d6e:	e00e      	b.n	8014d8e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2201      	movs	r2, #1
 8014d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f7ff fab3 	bl	80142e4 <HAL_SPI_TxRxCpltCallback>
}
 8014d7e:	e006      	b.n	8014d8e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2201      	movs	r2, #1
 8014d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f7ff fad3 	bl	8014334 <HAL_SPI_ErrorCallback>
}
 8014d8e:	bf00      	nop
 8014d90:	3718      	adds	r7, #24
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	20000058 	.word	0x20000058
 8014d9c:	057619f1 	.word	0x057619f1

08014da0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	685a      	ldr	r2, [r3, #4]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014db6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014db8:	f7f1 fd38 	bl	800682c <HAL_GetTick>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	2164      	movs	r1, #100	; 0x64
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f7ff fed2 	bl	8014b6c <SPI_EndRxTransaction>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d005      	beq.n	8014dda <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dd2:	f043 0220 	orr.w	r2, r3, #32
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	689b      	ldr	r3, [r3, #8]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d10a      	bne.n	8014df8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014de2:	2300      	movs	r3, #0
 8014de4:	60fb      	str	r3, [r7, #12]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	68db      	ldr	r3, [r3, #12]
 8014dec:	60fb      	str	r3, [r7, #12]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	689b      	ldr	r3, [r3, #8]
 8014df4:	60fb      	str	r3, [r7, #12]
 8014df6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d103      	bne.n	8014e10 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f7ff fa61 	bl	80142d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014e0e:	e002      	b.n	8014e16 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f7ff fa8f 	bl	8014334 <HAL_SPI_ErrorCallback>
}
 8014e16:	bf00      	nop
 8014e18:	3710      	adds	r7, #16
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}

08014e1e <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014e1e:	b580      	push	{r7, lr}
 8014e20:	b086      	sub	sp, #24
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014e26:	4b2c      	ldr	r3, [pc, #176]	; (8014ed8 <SPI_CloseTx_ISR+0xba>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	4a2c      	ldr	r2, [pc, #176]	; (8014edc <SPI_CloseTx_ISR+0xbe>)
 8014e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8014e30:	0a5b      	lsrs	r3, r3, #9
 8014e32:	2264      	movs	r2, #100	; 0x64
 8014e34:	fb02 f303 	mul.w	r3, r2, r3
 8014e38:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014e3a:	f7f1 fcf7 	bl	800682c <HAL_GetTick>
 8014e3e:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d106      	bne.n	8014e54 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e4a:	f043 0220 	orr.w	r2, r3, #32
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014e52:	e009      	b.n	8014e68 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	3b01      	subs	r3, #1
 8014e58:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	689b      	ldr	r3, [r3, #8]
 8014e60:	f003 0302 	and.w	r3, r3, #2
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d0eb      	beq.n	8014e40 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	685a      	ldr	r2, [r3, #4]
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014e76:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014e78:	697a      	ldr	r2, [r7, #20]
 8014e7a:	2164      	movs	r1, #100	; 0x64
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7ff feda 	bl	8014c36 <SPI_EndRxTxTransaction>
 8014e82:	4603      	mov	r3, r0
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d005      	beq.n	8014e94 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e8c:	f043 0220 	orr.w	r2, r3, #32
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	689b      	ldr	r3, [r3, #8]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d10a      	bne.n	8014eb2 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	60fb      	str	r3, [r7, #12]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	68db      	ldr	r3, [r3, #12]
 8014ea6:	60fb      	str	r3, [r7, #12]
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	689b      	ldr	r3, [r3, #8]
 8014eae:	60fb      	str	r3, [r7, #12]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d003      	beq.n	8014eca <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f7ff fa36 	bl	8014334 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014ec8:	e002      	b.n	8014ed0 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f7ff f9f6 	bl	80142bc <HAL_SPI_TxCpltCallback>
}
 8014ed0:	bf00      	nop
 8014ed2:	3718      	adds	r7, #24
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	20000058 	.word	0x20000058
 8014edc:	057619f1 	.word	0x057619f1

08014ee0 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b085      	sub	sp, #20
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014eec:	4b1e      	ldr	r3, [pc, #120]	; (8014f68 <SPI_AbortRx_ISR+0x88>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4a1e      	ldr	r2, [pc, #120]	; (8014f6c <SPI_AbortRx_ISR+0x8c>)
 8014ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ef6:	0a5b      	lsrs	r3, r3, #9
 8014ef8:	2264      	movs	r2, #100	; 0x64
 8014efa:	fb02 f303 	mul.w	r3, r2, r3
 8014efe:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d106      	bne.n	8014f14 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014f12:	e009      	b.n	8014f28 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	3b01      	subs	r3, #1
 8014f18:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	689b      	ldr	r3, [r3, #8]
 8014f20:	f003 0302 	and.w	r3, r3, #2
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d0eb      	beq.n	8014f00 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f36:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	685a      	ldr	r2, [r3, #4]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014f46:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	68db      	ldr	r3, [r3, #12]
 8014f4e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8014f50:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2207      	movs	r2, #7
 8014f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014f5a:	bf00      	nop
 8014f5c:	3714      	adds	r7, #20
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr
 8014f66:	bf00      	nop
 8014f68:	20000058 	.word	0x20000058
 8014f6c:	057619f1 	.word	0x057619f1

08014f70 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014f70:	b480      	push	{r7}
 8014f72:	b083      	sub	sp, #12
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014f86:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	681a      	ldr	r2, [r3, #0]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f96:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2207      	movs	r2, #7
 8014f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014fa0:	bf00      	nop
 8014fa2:	370c      	adds	r7, #12
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014faa:	4770      	bx	lr

08014fac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b084      	sub	sp, #16
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	60f8      	str	r0, [r7, #12]
 8014fb4:	60b9      	str	r1, [r7, #8]
 8014fb6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d101      	bne.n	8014fc2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8014fbe:	2301      	movs	r3, #1
 8014fc0:	e034      	b.n	801502c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014fc8:	b2db      	uxtb	r3, r3
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d106      	bne.n	8014fdc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	f7f0 ff6c 	bl	8005eb4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681a      	ldr	r2, [r3, #0]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	3308      	adds	r3, #8
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	4610      	mov	r0, r2
 8014fe8:	f003 f9a0 	bl	801832c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	6818      	ldr	r0, [r3, #0]
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	689b      	ldr	r3, [r3, #8]
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	68b9      	ldr	r1, [r7, #8]
 8014ff8:	f003 fa1e 	bl	8018438 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	6858      	ldr	r0, [r3, #4]
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	689a      	ldr	r2, [r3, #8]
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015008:	6879      	ldr	r1, [r7, #4]
 801500a:	f003 fa52 	bl	80184b2 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	68fa      	ldr	r2, [r7, #12]
 8015014:	6892      	ldr	r2, [r2, #8]
 8015016:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	68fa      	ldr	r2, [r7, #12]
 8015020:	6892      	ldr	r2, [r2, #8]
 8015022:	f041 0101 	orr.w	r1, r1, #1
 8015026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 801502a:	2300      	movs	r3, #0
}
 801502c:	4618      	mov	r0, r3
 801502e:	3710      	adds	r7, #16
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f7f0 ff67 	bl	8005f10 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6818      	ldr	r0, [r3, #0]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6859      	ldr	r1, [r3, #4]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	689b      	ldr	r3, [r3, #8]
 801504e:	461a      	mov	r2, r3
 8015050:	f003 f9be 	bl	80183d0 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	2200      	movs	r2, #0
 8015058:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2200      	movs	r2, #0
 8015060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8015064:	2300      	movs	r3, #0
}
 8015066:	4618      	mov	r0, r3
 8015068:	3708      	adds	r7, #8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}

0801506e <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 801506e:	b480      	push	{r7}
 8015070:	b083      	sub	sp, #12
 8015072:	af00      	add	r7, sp, #0
 8015074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 8015076:	bf00      	nop
 8015078:	370c      	adds	r7, #12
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr

08015082 <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 8015082:	b480      	push	{r7}
 8015084:	b083      	sub	sp, #12
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 801508a:	bf00      	nop
 801508c:	370c      	adds	r7, #12
 801508e:	46bd      	mov	sp, r7
 8015090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015094:	4770      	bx	lr

08015096 <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 8015096:	b480      	push	{r7}
 8015098:	b087      	sub	sp, #28
 801509a:	af00      	add	r7, sp, #0
 801509c:	60f8      	str	r0, [r7, #12]
 801509e:	60b9      	str	r1, [r7, #8]
 80150a0:	607a      	str	r2, [r7, #4]
 80150a2:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d101      	bne.n	80150b6 <HAL_SRAM_Read_8b+0x20>
 80150b2:	2302      	movs	r3, #2
 80150b4:	e022      	b.n	80150fc <HAL_SRAM_Read_8b+0x66>
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	2201      	movs	r2, #1
 80150ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	2202      	movs	r2, #2
 80150c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80150c6:	e00d      	b.n	80150e4 <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	b2da      	uxtb	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	3301      	adds	r3, #1
 80150d6:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	3301      	adds	r3, #1
 80150dc:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	3b01      	subs	r3, #1
 80150e2:	603b      	str	r3, [r7, #0]
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d1ee      	bne.n	80150c8 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	2201      	movs	r2, #1
 80150ee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2200      	movs	r2, #0
 80150f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80150fa:	2300      	movs	r3, #0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	371c      	adds	r7, #28
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr

08015108 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 8015108:	b480      	push	{r7}
 801510a:	b087      	sub	sp, #28
 801510c:	af00      	add	r7, sp, #0
 801510e:	60f8      	str	r0, [r7, #12]
 8015110:	60b9      	str	r1, [r7, #8]
 8015112:	607a      	str	r2, [r7, #4]
 8015114:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015120:	b2db      	uxtb	r3, r3
 8015122:	2b04      	cmp	r3, #4
 8015124:	d101      	bne.n	801512a <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 8015126:	2301      	movs	r3, #1
 8015128:	e028      	b.n	801517c <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015130:	2b01      	cmp	r3, #1
 8015132:	d101      	bne.n	8015138 <HAL_SRAM_Write_8b+0x30>
 8015134:	2302      	movs	r3, #2
 8015136:	e021      	b.n	801517c <HAL_SRAM_Write_8b+0x74>
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2201      	movs	r2, #1
 801513c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	2202      	movs	r2, #2
 8015144:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015148:	e00c      	b.n	8015164 <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	781a      	ldrb	r2, [r3, #0]
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	3301      	adds	r3, #1
 8015156:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	3301      	adds	r3, #1
 801515c:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	3b01      	subs	r3, #1
 8015162:	603b      	str	r3, [r7, #0]
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1ef      	bne.n	801514a <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2201      	movs	r2, #1
 801516e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2200      	movs	r2, #0
 8015176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 801517a:	2300      	movs	r3, #0
}
 801517c:	4618      	mov	r0, r3
 801517e:	371c      	adds	r7, #28
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr

08015188 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 8015188:	b480      	push	{r7}
 801518a:	b087      	sub	sp, #28
 801518c:	af00      	add	r7, sp, #0
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	607a      	str	r2, [r7, #4]
 8015194:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80151a0:	2b01      	cmp	r3, #1
 80151a2:	d101      	bne.n	80151a8 <HAL_SRAM_Read_16b+0x20>
 80151a4:	2302      	movs	r3, #2
 80151a6:	e022      	b.n	80151ee <HAL_SRAM_Read_16b+0x66>
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	2201      	movs	r2, #1
 80151ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2202      	movs	r2, #2
 80151b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80151b8:	e00d      	b.n	80151d6 <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	881b      	ldrh	r3, [r3, #0]
 80151be:	b29a      	uxth	r2, r3
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	3302      	adds	r3, #2
 80151c8:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	3302      	adds	r3, #2
 80151ce:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	3b01      	subs	r3, #1
 80151d4:	603b      	str	r3, [r7, #0]
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d1ee      	bne.n	80151ba <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	2201      	movs	r2, #1
 80151e0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	2200      	movs	r2, #0
 80151e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	371c      	adds	r7, #28
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr

080151fa <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 80151fa:	b480      	push	{r7}
 80151fc:	b087      	sub	sp, #28
 80151fe:	af00      	add	r7, sp, #0
 8015200:	60f8      	str	r0, [r7, #12]
 8015202:	60b9      	str	r1, [r7, #8]
 8015204:	607a      	str	r2, [r7, #4]
 8015206:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015212:	b2db      	uxtb	r3, r3
 8015214:	2b04      	cmp	r3, #4
 8015216:	d101      	bne.n	801521c <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8015218:	2301      	movs	r3, #1
 801521a:	e028      	b.n	801526e <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015222:	2b01      	cmp	r3, #1
 8015224:	d101      	bne.n	801522a <HAL_SRAM_Write_16b+0x30>
 8015226:	2302      	movs	r3, #2
 8015228:	e021      	b.n	801526e <HAL_SRAM_Write_16b+0x74>
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2201      	movs	r2, #1
 801522e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	2202      	movs	r2, #2
 8015236:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 801523a:	e00c      	b.n	8015256 <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	881a      	ldrh	r2, [r3, #0]
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	3302      	adds	r3, #2
 8015248:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	3302      	adds	r3, #2
 801524e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	3b01      	subs	r3, #1
 8015254:	603b      	str	r3, [r7, #0]
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d1ef      	bne.n	801523c <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2201      	movs	r2, #1
 8015260:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2200      	movs	r2, #0
 8015268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 801526c:	2300      	movs	r3, #0
}
 801526e:	4618      	mov	r0, r3
 8015270:	371c      	adds	r7, #28
 8015272:	46bd      	mov	sp, r7
 8015274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015278:	4770      	bx	lr

0801527a <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 801527a:	b480      	push	{r7}
 801527c:	b085      	sub	sp, #20
 801527e:	af00      	add	r7, sp, #0
 8015280:	60f8      	str	r0, [r7, #12]
 8015282:	60b9      	str	r1, [r7, #8]
 8015284:	607a      	str	r2, [r7, #4]
 8015286:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801528e:	2b01      	cmp	r3, #1
 8015290:	d101      	bne.n	8015296 <HAL_SRAM_Read_32b+0x1c>
 8015292:	2302      	movs	r3, #2
 8015294:	e021      	b.n	80152da <HAL_SRAM_Read_32b+0x60>
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2201      	movs	r2, #1
 801529a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2202      	movs	r2, #2
 80152a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80152a6:	e00c      	b.n	80152c2 <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	681a      	ldr	r2, [r3, #0]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	3304      	adds	r3, #4
 80152b4:	607b      	str	r3, [r7, #4]
    pAddress++;
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	3304      	adds	r3, #4
 80152ba:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	3b01      	subs	r3, #1
 80152c0:	603b      	str	r3, [r7, #0]
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d1ef      	bne.n	80152a8 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2201      	movs	r2, #1
 80152cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	2200      	movs	r2, #0
 80152d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80152d8:	2300      	movs	r3, #0
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3714      	adds	r7, #20
 80152de:	46bd      	mov	sp, r7
 80152e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e4:	4770      	bx	lr

080152e6 <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80152e6:	b480      	push	{r7}
 80152e8:	b085      	sub	sp, #20
 80152ea:	af00      	add	r7, sp, #0
 80152ec:	60f8      	str	r0, [r7, #12]
 80152ee:	60b9      	str	r1, [r7, #8]
 80152f0:	607a      	str	r2, [r7, #4]
 80152f2:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80152fa:	b2db      	uxtb	r3, r3
 80152fc:	2b04      	cmp	r3, #4
 80152fe:	d101      	bne.n	8015304 <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 8015300:	2301      	movs	r3, #1
 8015302:	e028      	b.n	8015356 <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801530a:	2b01      	cmp	r3, #1
 801530c:	d101      	bne.n	8015312 <HAL_SRAM_Write_32b+0x2c>
 801530e:	2302      	movs	r3, #2
 8015310:	e021      	b.n	8015356 <HAL_SRAM_Write_32b+0x70>
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2201      	movs	r2, #1
 8015316:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	2202      	movs	r2, #2
 801531e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015322:	e00c      	b.n	801533e <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	3304      	adds	r3, #4
 8015330:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	3304      	adds	r3, #4
 8015336:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	3b01      	subs	r3, #1
 801533c:	603b      	str	r3, [r7, #0]
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d1ef      	bne.n	8015324 <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2201      	movs	r2, #1
 8015348:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2200      	movs	r2, #0
 8015350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015354:	2300      	movs	r3, #0
}
 8015356:	4618      	mov	r0, r3
 8015358:	3714      	adds	r7, #20
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr

08015362 <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8015362:	b580      	push	{r7, lr}
 8015364:	b084      	sub	sp, #16
 8015366:	af00      	add	r7, sp, #0
 8015368:	60f8      	str	r0, [r7, #12]
 801536a:	60b9      	str	r1, [r7, #8]
 801536c:	607a      	str	r2, [r7, #4]
 801536e:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015376:	2b01      	cmp	r3, #1
 8015378:	d101      	bne.n	801537e <HAL_SRAM_Read_DMA+0x1c>
 801537a:	2302      	movs	r3, #2
 801537c:	e01f      	b.n	80153be <HAL_SRAM_Read_DMA+0x5c>
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2201      	movs	r2, #1
 8015382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2202      	movs	r2, #2
 801538a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015392:	4a0d      	ldr	r2, [pc, #52]	; (80153c8 <HAL_SRAM_Read_DMA+0x66>)
 8015394:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801539a:	4a0c      	ldr	r2, [pc, #48]	; (80153cc <HAL_SRAM_Read_DMA+0x6a>)
 801539c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80153a2:	68b9      	ldr	r1, [r7, #8]
 80153a4:	687a      	ldr	r2, [r7, #4]
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	f7f2 fca9 	bl	8007cfe <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2201      	movs	r2, #1
 80153b0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2200      	movs	r2, #0
 80153b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 80153bc:	2300      	movs	r3, #0
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3710      	adds	r7, #16
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	bf00      	nop
 80153c8:	0801506f 	.word	0x0801506f
 80153cc:	08015083 	.word	0x08015083

080153d0 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	60f8      	str	r0, [r7, #12]
 80153d8:	60b9      	str	r1, [r7, #8]
 80153da:	607a      	str	r2, [r7, #4]
 80153dc:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	2b04      	cmp	r3, #4
 80153e8:	d101      	bne.n	80153ee <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 80153ea:	2301      	movs	r3, #1
 80153ec:	e026      	b.n	801543c <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80153f4:	2b01      	cmp	r3, #1
 80153f6:	d101      	bne.n	80153fc <HAL_SRAM_Write_DMA+0x2c>
 80153f8:	2302      	movs	r3, #2
 80153fa:	e01f      	b.n	801543c <HAL_SRAM_Write_DMA+0x6c>
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2201      	movs	r2, #1
 8015400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2202      	movs	r2, #2
 8015408:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015410:	4a0c      	ldr	r2, [pc, #48]	; (8015444 <HAL_SRAM_Write_DMA+0x74>)
 8015412:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015418:	4a0b      	ldr	r2, [pc, #44]	; (8015448 <HAL_SRAM_Write_DMA+0x78>)
 801541a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015420:	6879      	ldr	r1, [r7, #4]
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	f7f2 fc6a 	bl	8007cfe <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	2201      	movs	r2, #1
 801542e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	2200      	movs	r2, #0
 8015436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 801543a:	2300      	movs	r3, #0
}
 801543c:	4618      	mov	r0, r3
 801543e:	3710      	adds	r7, #16
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}
 8015444:	0801506f 	.word	0x0801506f
 8015448:	08015083 	.word	0x08015083

0801544c <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801545a:	2b01      	cmp	r3, #1
 801545c:	d101      	bne.n	8015462 <HAL_SRAM_WriteOperation_Enable+0x16>
 801545e:	2302      	movs	r3, #2
 8015460:	e014      	b.n	801548c <HAL_SRAM_WriteOperation_Enable+0x40>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2201      	movs	r2, #1
 8015466:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	689b      	ldr	r3, [r3, #8]
 8015472:	4619      	mov	r1, r3
 8015474:	4610      	mov	r0, r2
 8015476:	f003 f85b 	bl	8018530 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2201      	movs	r2, #1
 801547e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2200      	movs	r2, #0
 8015486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 801548a:	2300      	movs	r3, #0
}
 801548c:	4618      	mov	r0, r3
 801548e:	3708      	adds	r7, #8
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	d101      	bne.n	80154aa <HAL_SRAM_WriteOperation_Disable+0x16>
 80154a6:	2302      	movs	r3, #2
 80154a8:	e018      	b.n	80154dc <HAL_SRAM_WriteOperation_Disable+0x48>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2201      	movs	r2, #1
 80154ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	2202      	movs	r2, #2
 80154b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	689b      	ldr	r3, [r3, #8]
 80154c2:	4619      	mov	r1, r3
 80154c4:	4610      	mov	r0, r2
 80154c6:	f003 f849 	bl	801855c <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2204      	movs	r2, #4
 80154ce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2200      	movs	r2, #0
 80154d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 80154da:	2300      	movs	r3, #0
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
  return hsram->State;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80154f2:	b2db      	uxtb	r3, r3
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	370c      	adds	r7, #12
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr

08015500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b082      	sub	sp, #8
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d101      	bne.n	8015512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801550e:	2301      	movs	r3, #1
 8015510:	e03f      	b.n	8015592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015518:	b2db      	uxtb	r3, r3
 801551a:	2b00      	cmp	r3, #0
 801551c:	d106      	bne.n	801552c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2200      	movs	r2, #0
 8015522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f7f0 fc06 	bl	8005d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2224      	movs	r2, #36	; 0x24
 8015530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	68da      	ldr	r2, [r3, #12]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f002 fc7e 	bl	8017e46 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	691a      	ldr	r2, [r3, #16]
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	695a      	ldr	r2, [r3, #20]
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	68da      	ldr	r2, [r3, #12]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2200      	movs	r2, #0
 801557e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2220      	movs	r2, #32
 8015584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	2220      	movs	r2, #32
 801558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015590:	2300      	movs	r3, #0
}
 8015592:	4618      	mov	r0, r3
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b082      	sub	sp, #8
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d101      	bne.n	80155ac <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80155a8:	2301      	movs	r3, #1
 80155aa:	e047      	b.n	801563c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d106      	bne.n	80155c6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	2200      	movs	r2, #0
 80155bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f7f0 fbb9 	bl	8005d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	2224      	movs	r2, #36	; 0x24
 80155ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	68da      	ldr	r2, [r3, #12]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80155dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f002 fc31 	bl	8017e46 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	691a      	ldr	r2, [r3, #16]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80155f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	695a      	ldr	r2, [r3, #20]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8015602:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	695a      	ldr	r2, [r3, #20]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	f042 0208 	orr.w	r2, r2, #8
 8015612:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	68da      	ldr	r2, [r3, #12]
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015622:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2200      	movs	r2, #0
 8015628:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	2220      	movs	r2, #32
 801562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2220      	movs	r2, #32
 8015636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801563a:	2300      	movs	r3, #0
}
 801563c:	4618      	mov	r0, r3
 801563e:	3708      	adds	r7, #8
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}

08015644 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d101      	bne.n	8015658 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8015654:	2301      	movs	r3, #1
 8015656:	e057      	b.n	8015708 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801565e:	b2db      	uxtb	r3, r3
 8015660:	2b00      	cmp	r3, #0
 8015662:	d106      	bne.n	8015672 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2200      	movs	r2, #0
 8015668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f7f0 fb63 	bl	8005d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2224      	movs	r2, #36	; 0x24
 8015676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	68da      	ldr	r2, [r3, #12]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015688:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f002 fbdb 	bl	8017e46 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	691a      	ldr	r2, [r3, #16]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801569e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	695a      	ldr	r2, [r3, #20]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80156ae:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	691a      	ldr	r2, [r3, #16]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80156be:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	691a      	ldr	r2, [r3, #16]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	f022 0220 	bic.w	r2, r2, #32
 80156ce:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	6919      	ldr	r1, [r3, #16]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	683a      	ldr	r2, [r7, #0]
 80156dc:	430a      	orrs	r2, r1
 80156de:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	68da      	ldr	r2, [r3, #12]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80156ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2200      	movs	r2, #0
 80156f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2220      	movs	r2, #32
 80156fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2220      	movs	r2, #32
 8015702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015706:	2300      	movs	r3, #0
}
 8015708:	4618      	mov	r0, r3
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}

08015710 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	460b      	mov	r3, r1
 801571a:	607a      	str	r2, [r7, #4]
 801571c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d101      	bne.n	8015728 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8015724:	2301      	movs	r3, #1
 8015726:	e05f      	b.n	80157e8 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801572e:	b2db      	uxtb	r3, r3
 8015730:	2b00      	cmp	r3, #0
 8015732:	d106      	bne.n	8015742 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2200      	movs	r2, #0
 8015738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f7f0 fafb 	bl	8005d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2224      	movs	r2, #36	; 0x24
 8015746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	68da      	ldr	r2, [r3, #12]
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015758:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	f002 fb73 	bl	8017e46 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	691a      	ldr	r2, [r3, #16]
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801576e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	695a      	ldr	r2, [r3, #20]
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801577e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	691a      	ldr	r2, [r3, #16]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	f022 020f 	bic.w	r2, r2, #15
 801578e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	6919      	ldr	r1, [r3, #16]
 8015796:	7afa      	ldrb	r2, [r7, #11]
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	430a      	orrs	r2, r1
 801579e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	68da      	ldr	r2, [r3, #12]
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80157ae:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	68d9      	ldr	r1, [r3, #12]
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	687a      	ldr	r2, [r7, #4]
 80157bc:	430a      	orrs	r2, r1
 80157be:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	68da      	ldr	r2, [r3, #12]
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80157ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	2200      	movs	r2, #0
 80157d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	2220      	movs	r2, #32
 80157da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	2220      	movs	r2, #32
 80157e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80157e6:	2300      	movs	r3, #0
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3710      	adds	r7, #16
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d101      	bne.n	8015802 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80157fe:	2301      	movs	r3, #1
 8015800:	e021      	b.n	8015846 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	2224      	movs	r2, #36	; 0x24
 8015806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	68da      	ldr	r2, [r3, #12]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015818:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7f0 fadc 	bl	8005dd8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2200      	movs	r2, #0
 8015824:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2200      	movs	r2, #0
 801582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2200      	movs	r2, #0
 8015832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2200      	movs	r2, #0
 801583a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2200      	movs	r2, #0
 8015840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015844:	2300      	movs	r3, #0
}
 8015846:	4618      	mov	r0, r3
 8015848:	3708      	adds	r7, #8
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}

0801584e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801584e:	b580      	push	{r7, lr}
 8015850:	b08a      	sub	sp, #40	; 0x28
 8015852:	af02      	add	r7, sp, #8
 8015854:	60f8      	str	r0, [r7, #12]
 8015856:	60b9      	str	r1, [r7, #8]
 8015858:	603b      	str	r3, [r7, #0]
 801585a:	4613      	mov	r3, r2
 801585c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801585e:	2300      	movs	r3, #0
 8015860:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015868:	b2db      	uxtb	r3, r3
 801586a:	2b20      	cmp	r3, #32
 801586c:	d17c      	bne.n	8015968 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d002      	beq.n	801587a <HAL_UART_Transmit+0x2c>
 8015874:	88fb      	ldrh	r3, [r7, #6]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d101      	bne.n	801587e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801587a:	2301      	movs	r3, #1
 801587c:	e075      	b.n	801596a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015884:	2b01      	cmp	r3, #1
 8015886:	d101      	bne.n	801588c <HAL_UART_Transmit+0x3e>
 8015888:	2302      	movs	r3, #2
 801588a:	e06e      	b.n	801596a <HAL_UART_Transmit+0x11c>
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2201      	movs	r2, #1
 8015890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2200      	movs	r2, #0
 8015898:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	2221      	movs	r2, #33	; 0x21
 801589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80158a2:	f7f0 ffc3 	bl	800682c <HAL_GetTick>
 80158a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	88fa      	ldrh	r2, [r7, #6]
 80158ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	88fa      	ldrh	r2, [r7, #6]
 80158b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	689b      	ldr	r3, [r3, #8]
 80158b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158bc:	d108      	bne.n	80158d0 <HAL_UART_Transmit+0x82>
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	691b      	ldr	r3, [r3, #16]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d104      	bne.n	80158d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80158c6:	2300      	movs	r3, #0
 80158c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	61bb      	str	r3, [r7, #24]
 80158ce:	e003      	b.n	80158d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80158d4:	2300      	movs	r3, #0
 80158d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2200      	movs	r2, #0
 80158dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80158e0:	e02a      	b.n	8015938 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	9300      	str	r3, [sp, #0]
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	2200      	movs	r2, #0
 80158ea:	2180      	movs	r1, #128	; 0x80
 80158ec:	68f8      	ldr	r0, [r7, #12]
 80158ee:	f001 ff19 	bl	8017724 <UART_WaitOnFlagUntilTimeout>
 80158f2:	4603      	mov	r3, r0
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d001      	beq.n	80158fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80158f8:	2303      	movs	r3, #3
 80158fa:	e036      	b.n	801596a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80158fc:	69fb      	ldr	r3, [r7, #28]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d10b      	bne.n	801591a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015902:	69bb      	ldr	r3, [r7, #24]
 8015904:	881b      	ldrh	r3, [r3, #0]
 8015906:	461a      	mov	r2, r3
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015910:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015912:	69bb      	ldr	r3, [r7, #24]
 8015914:	3302      	adds	r3, #2
 8015916:	61bb      	str	r3, [r7, #24]
 8015918:	e007      	b.n	801592a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801591a:	69fb      	ldr	r3, [r7, #28]
 801591c:	781a      	ldrb	r2, [r3, #0]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015924:	69fb      	ldr	r3, [r7, #28]
 8015926:	3301      	adds	r3, #1
 8015928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801592e:	b29b      	uxth	r3, r3
 8015930:	3b01      	subs	r3, #1
 8015932:	b29a      	uxth	r2, r3
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801593c:	b29b      	uxth	r3, r3
 801593e:	2b00      	cmp	r3, #0
 8015940:	d1cf      	bne.n	80158e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	2200      	movs	r2, #0
 801594a:	2140      	movs	r1, #64	; 0x40
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f001 fee9 	bl	8017724 <UART_WaitOnFlagUntilTimeout>
 8015952:	4603      	mov	r3, r0
 8015954:	2b00      	cmp	r3, #0
 8015956:	d001      	beq.n	801595c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015958:	2303      	movs	r3, #3
 801595a:	e006      	b.n	801596a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2220      	movs	r2, #32
 8015960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8015964:	2300      	movs	r3, #0
 8015966:	e000      	b.n	801596a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8015968:	2302      	movs	r3, #2
  }
}
 801596a:	4618      	mov	r0, r3
 801596c:	3720      	adds	r7, #32
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}

08015972 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015972:	b580      	push	{r7, lr}
 8015974:	b08a      	sub	sp, #40	; 0x28
 8015976:	af02      	add	r7, sp, #8
 8015978:	60f8      	str	r0, [r7, #12]
 801597a:	60b9      	str	r1, [r7, #8]
 801597c:	603b      	str	r3, [r7, #0]
 801597e:	4613      	mov	r3, r2
 8015980:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015982:	2300      	movs	r3, #0
 8015984:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801598c:	b2db      	uxtb	r3, r3
 801598e:	2b20      	cmp	r3, #32
 8015990:	f040 808c 	bne.w	8015aac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d002      	beq.n	80159a0 <HAL_UART_Receive+0x2e>
 801599a:	88fb      	ldrh	r3, [r7, #6]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d101      	bne.n	80159a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80159a0:	2301      	movs	r3, #1
 80159a2:	e084      	b.n	8015aae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d101      	bne.n	80159b2 <HAL_UART_Receive+0x40>
 80159ae:	2302      	movs	r3, #2
 80159b0:	e07d      	b.n	8015aae <HAL_UART_Receive+0x13c>
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	2201      	movs	r2, #1
 80159b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2200      	movs	r2, #0
 80159be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	2222      	movs	r2, #34	; 0x22
 80159c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	2200      	movs	r2, #0
 80159cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80159ce:	f7f0 ff2d 	bl	800682c <HAL_GetTick>
 80159d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	88fa      	ldrh	r2, [r7, #6]
 80159d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	88fa      	ldrh	r2, [r7, #6]
 80159de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	689b      	ldr	r3, [r3, #8]
 80159e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159e8:	d108      	bne.n	80159fc <HAL_UART_Receive+0x8a>
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	691b      	ldr	r3, [r3, #16]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d104      	bne.n	80159fc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80159f2:	2300      	movs	r3, #0
 80159f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	61bb      	str	r3, [r7, #24]
 80159fa:	e003      	b.n	8015a04 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015a00:	2300      	movs	r3, #0
 8015a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	2200      	movs	r2, #0
 8015a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8015a0c:	e043      	b.n	8015a96 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	9300      	str	r3, [sp, #0]
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	2200      	movs	r2, #0
 8015a16:	2120      	movs	r1, #32
 8015a18:	68f8      	ldr	r0, [r7, #12]
 8015a1a:	f001 fe83 	bl	8017724 <UART_WaitOnFlagUntilTimeout>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d001      	beq.n	8015a28 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8015a24:	2303      	movs	r3, #3
 8015a26:	e042      	b.n	8015aae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d10c      	bne.n	8015a48 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	b29b      	uxth	r3, r3
 8015a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a3a:	b29a      	uxth	r2, r3
 8015a3c:	69bb      	ldr	r3, [r7, #24]
 8015a3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015a40:	69bb      	ldr	r3, [r7, #24]
 8015a42:	3302      	adds	r3, #2
 8015a44:	61bb      	str	r3, [r7, #24]
 8015a46:	e01f      	b.n	8015a88 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	689b      	ldr	r3, [r3, #8]
 8015a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a50:	d007      	beq.n	8015a62 <HAL_UART_Receive+0xf0>
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	689b      	ldr	r3, [r3, #8]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d10a      	bne.n	8015a70 <HAL_UART_Receive+0xfe>
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	691b      	ldr	r3, [r3, #16]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d106      	bne.n	8015a70 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	b2da      	uxtb	r2, r3
 8015a6a:	69fb      	ldr	r3, [r7, #28]
 8015a6c:	701a      	strb	r2, [r3, #0]
 8015a6e:	e008      	b.n	8015a82 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	b2db      	uxtb	r3, r3
 8015a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a7c:	b2da      	uxtb	r2, r3
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	3301      	adds	r3, #1
 8015a86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	3b01      	subs	r3, #1
 8015a90:	b29a      	uxth	r2, r3
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d1b6      	bne.n	8015a0e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	2220      	movs	r2, #32
 8015aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	e000      	b.n	8015aae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8015aac:	2302      	movs	r3, #2
  }
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3720      	adds	r7, #32
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}

08015ab6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015ab6:	b480      	push	{r7}
 8015ab8:	b085      	sub	sp, #20
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	60f8      	str	r0, [r7, #12]
 8015abe:	60b9      	str	r1, [r7, #8]
 8015ac0:	4613      	mov	r3, r2
 8015ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	2b20      	cmp	r3, #32
 8015ace:	d130      	bne.n	8015b32 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ad0:	68bb      	ldr	r3, [r7, #8]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d002      	beq.n	8015adc <HAL_UART_Transmit_IT+0x26>
 8015ad6:	88fb      	ldrh	r3, [r7, #6]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d101      	bne.n	8015ae0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8015adc:	2301      	movs	r3, #1
 8015ade:	e029      	b.n	8015b34 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ae6:	2b01      	cmp	r3, #1
 8015ae8:	d101      	bne.n	8015aee <HAL_UART_Transmit_IT+0x38>
 8015aea:	2302      	movs	r3, #2
 8015aec:	e022      	b.n	8015b34 <HAL_UART_Transmit_IT+0x7e>
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	2201      	movs	r2, #1
 8015af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	68ba      	ldr	r2, [r7, #8]
 8015afa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	88fa      	ldrh	r2, [r7, #6]
 8015b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	88fa      	ldrh	r2, [r7, #6]
 8015b06:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	2221      	movs	r2, #33	; 0x21
 8015b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	68da      	ldr	r2, [r3, #12]
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015b2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	e000      	b.n	8015b34 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8015b32:	2302      	movs	r3, #2
  }
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3714      	adds	r7, #20
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3e:	4770      	bx	lr

08015b40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	4613      	mov	r3, r2
 8015b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	2b20      	cmp	r3, #32
 8015b58:	d11d      	bne.n	8015b96 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d002      	beq.n	8015b66 <HAL_UART_Receive_IT+0x26>
 8015b60:	88fb      	ldrh	r3, [r7, #6]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d101      	bne.n	8015b6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015b66:	2301      	movs	r3, #1
 8015b68:	e016      	b.n	8015b98 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015b70:	2b01      	cmp	r3, #1
 8015b72:	d101      	bne.n	8015b78 <HAL_UART_Receive_IT+0x38>
 8015b74:	2302      	movs	r3, #2
 8015b76:	e00f      	b.n	8015b98 <HAL_UART_Receive_IT+0x58>
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	2200      	movs	r2, #0
 8015b84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015b86:	88fb      	ldrh	r3, [r7, #6]
 8015b88:	461a      	mov	r2, r3
 8015b8a:	68b9      	ldr	r1, [r7, #8]
 8015b8c:	68f8      	ldr	r0, [r7, #12]
 8015b8e:	f001 fe37 	bl	8017800 <UART_Start_Receive_IT>
 8015b92:	4603      	mov	r3, r0
 8015b94:	e000      	b.n	8015b98 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015b96:	2302      	movs	r3, #2
  }
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3710      	adds	r7, #16
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b08c      	sub	sp, #48	; 0x30
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	4613      	mov	r3, r2
 8015bac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	2b20      	cmp	r3, #32
 8015bb8:	d165      	bne.n	8015c86 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d002      	beq.n	8015bc6 <HAL_UART_Transmit_DMA+0x26>
 8015bc0:	88fb      	ldrh	r3, [r7, #6]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d101      	bne.n	8015bca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	e05e      	b.n	8015c88 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015bd0:	2b01      	cmp	r3, #1
 8015bd2:	d101      	bne.n	8015bd8 <HAL_UART_Transmit_DMA+0x38>
 8015bd4:	2302      	movs	r3, #2
 8015bd6:	e057      	b.n	8015c88 <HAL_UART_Transmit_DMA+0xe8>
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015be0:	68ba      	ldr	r2, [r7, #8]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	88fa      	ldrh	r2, [r7, #6]
 8015bea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	88fa      	ldrh	r2, [r7, #6]
 8015bf0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	2221      	movs	r2, #33	; 0x21
 8015bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c04:	4a22      	ldr	r2, [pc, #136]	; (8015c90 <HAL_UART_Transmit_DMA+0xf0>)
 8015c06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c0c:	4a21      	ldr	r2, [pc, #132]	; (8015c94 <HAL_UART_Transmit_DMA+0xf4>)
 8015c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c14:	4a20      	ldr	r2, [pc, #128]	; (8015c98 <HAL_UART_Transmit_DMA+0xf8>)
 8015c16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8015c20:	f107 0308 	add.w	r3, r7, #8
 8015c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2c:	6819      	ldr	r1, [r3, #0]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	3304      	adds	r3, #4
 8015c34:	461a      	mov	r2, r3
 8015c36:	88fb      	ldrh	r3, [r7, #6]
 8015c38:	f7f2 f861 	bl	8007cfe <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015c44:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	3314      	adds	r3, #20
 8015c54:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c56:	69bb      	ldr	r3, [r7, #24]
 8015c58:	e853 3f00 	ldrex	r3, [r3]
 8015c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	3314      	adds	r3, #20
 8015c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c6e:	627a      	str	r2, [r7, #36]	; 0x24
 8015c70:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c72:	6a39      	ldr	r1, [r7, #32]
 8015c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c76:	e841 2300 	strex	r3, r2, [r1]
 8015c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d1e5      	bne.n	8015c4e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8015c82:	2300      	movs	r3, #0
 8015c84:	e000      	b.n	8015c88 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8015c86:	2302      	movs	r3, #2
  }
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3730      	adds	r7, #48	; 0x30
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	0801747f 	.word	0x0801747f
 8015c94:	08017519 	.word	0x08017519
 8015c98:	08017691 	.word	0x08017691

08015c9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	60f8      	str	r0, [r7, #12]
 8015ca4:	60b9      	str	r1, [r7, #8]
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cb0:	b2db      	uxtb	r3, r3
 8015cb2:	2b20      	cmp	r3, #32
 8015cb4:	d11d      	bne.n	8015cf2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d002      	beq.n	8015cc2 <HAL_UART_Receive_DMA+0x26>
 8015cbc:	88fb      	ldrh	r3, [r7, #6]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d101      	bne.n	8015cc6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	e016      	b.n	8015cf4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ccc:	2b01      	cmp	r3, #1
 8015cce:	d101      	bne.n	8015cd4 <HAL_UART_Receive_DMA+0x38>
 8015cd0:	2302      	movs	r3, #2
 8015cd2:	e00f      	b.n	8015cf4 <HAL_UART_Receive_DMA+0x58>
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	2201      	movs	r2, #1
 8015cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015ce2:	88fb      	ldrh	r3, [r7, #6]
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	68b9      	ldr	r1, [r7, #8]
 8015ce8:	68f8      	ldr	r0, [r7, #12]
 8015cea:	f001 fdc3 	bl	8017874 <UART_Start_Receive_DMA>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	e000      	b.n	8015cf4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015cf2:	2302      	movs	r3, #2
  }
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	3710      	adds	r7, #16
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}

08015cfc <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b09d      	sub	sp, #116	; 0x74
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015d04:	2300      	movs	r3, #0
 8015d06:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d0e:	2b01      	cmp	r3, #1
 8015d10:	d101      	bne.n	8015d16 <HAL_UART_DMAPause+0x1a>
 8015d12:	2302      	movs	r3, #2
 8015d14:	e098      	b.n	8015e48 <HAL_UART_DMAPause+0x14c>
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2201      	movs	r2, #1
 8015d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	695b      	ldr	r3, [r3, #20]
 8015d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d28:	2b80      	cmp	r3, #128	; 0x80
 8015d2a:	bf0c      	ite	eq
 8015d2c:	2301      	moveq	r3, #1
 8015d2e:	2300      	movne	r3, #0
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d3a:	b2db      	uxtb	r3, r3
 8015d3c:	2b21      	cmp	r3, #33	; 0x21
 8015d3e:	d11c      	bne.n	8015d7a <HAL_UART_DMAPause+0x7e>
 8015d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d019      	beq.n	8015d7a <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	3314      	adds	r3, #20
 8015d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d50:	e853 3f00 	ldrex	r3, [r3]
 8015d54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	3314      	adds	r3, #20
 8015d64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d66:	65ba      	str	r2, [r7, #88]	; 0x58
 8015d68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015d6e:	e841 2300 	strex	r3, r2, [r1]
 8015d72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d1e5      	bne.n	8015d46 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	695b      	ldr	r3, [r3, #20]
 8015d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d84:	2b40      	cmp	r3, #64	; 0x40
 8015d86:	bf0c      	ite	eq
 8015d88:	2301      	moveq	r3, #1
 8015d8a:	2300      	movne	r3, #0
 8015d8c:	b2db      	uxtb	r3, r3
 8015d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	2b22      	cmp	r3, #34	; 0x22
 8015d9a:	d150      	bne.n	8015e3e <HAL_UART_DMAPause+0x142>
 8015d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d04d      	beq.n	8015e3e <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	330c      	adds	r3, #12
 8015da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dac:	e853 3f00 	ldrex	r3, [r3]
 8015db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015db8:	667b      	str	r3, [r7, #100]	; 0x64
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	330c      	adds	r3, #12
 8015dc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015dc2:	647a      	str	r2, [r7, #68]	; 0x44
 8015dc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015dca:	e841 2300 	strex	r3, r2, [r1]
 8015dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1e5      	bne.n	8015da2 <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	3314      	adds	r3, #20
 8015ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de0:	e853 3f00 	ldrex	r3, [r3]
 8015de4:	623b      	str	r3, [r7, #32]
   return(result);
 8015de6:	6a3b      	ldr	r3, [r7, #32]
 8015de8:	f023 0301 	bic.w	r3, r3, #1
 8015dec:	663b      	str	r3, [r7, #96]	; 0x60
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	3314      	adds	r3, #20
 8015df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015df6:	633a      	str	r2, [r7, #48]	; 0x30
 8015df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dfe:	e841 2300 	strex	r3, r2, [r1]
 8015e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d1e5      	bne.n	8015dd6 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	3314      	adds	r3, #20
 8015e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	e853 3f00 	ldrex	r3, [r3]
 8015e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	3314      	adds	r3, #20
 8015e28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e2a:	61fa      	str	r2, [r7, #28]
 8015e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e2e:	69b9      	ldr	r1, [r7, #24]
 8015e30:	69fa      	ldr	r2, [r7, #28]
 8015e32:	e841 2300 	strex	r3, r2, [r1]
 8015e36:	617b      	str	r3, [r7, #20]
   return(result);
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d1e5      	bne.n	8015e0a <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2200      	movs	r2, #0
 8015e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015e46:	2300      	movs	r3, #0
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3774      	adds	r7, #116	; 0x74
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e52:	4770      	bx	lr

08015e54 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b09d      	sub	sp, #116	; 0x74
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015e62:	2b01      	cmp	r3, #1
 8015e64:	d101      	bne.n	8015e6a <HAL_UART_DMAResume+0x16>
 8015e66:	2302      	movs	r3, #2
 8015e68:	e087      	b.n	8015f7a <HAL_UART_DMAResume+0x126>
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2201      	movs	r2, #1
 8015e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	2b21      	cmp	r3, #33	; 0x21
 8015e7c:	d119      	bne.n	8015eb2 <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	3314      	adds	r3, #20
 8015e84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e88:	e853 3f00 	ldrex	r3, [r3]
 8015e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	3314      	adds	r3, #20
 8015e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015e9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015ea0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ea2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ea6:	e841 2300 	strex	r3, r2, [r1]
 8015eaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d1e5      	bne.n	8015e7e <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	2b22      	cmp	r3, #34	; 0x22
 8015ebc:	d158      	bne.n	8015f70 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	60fb      	str	r3, [r7, #12]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	60fb      	str	r3, [r7, #12]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	685b      	ldr	r3, [r3, #4]
 8015ed0:	60fb      	str	r3, [r7, #12]
 8015ed2:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	330c      	adds	r3, #12
 8015eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ede:	e853 3f00 	ldrex	r3, [r3]
 8015ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015eea:	66bb      	str	r3, [r7, #104]	; 0x68
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	330c      	adds	r3, #12
 8015ef2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015ef4:	64ba      	str	r2, [r7, #72]	; 0x48
 8015ef6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ef8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015efc:	e841 2300 	strex	r3, r2, [r1]
 8015f00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d1e5      	bne.n	8015ed4 <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	3314      	adds	r3, #20
 8015f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f12:	e853 3f00 	ldrex	r3, [r3]
 8015f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1a:	f043 0301 	orr.w	r3, r3, #1
 8015f1e:	667b      	str	r3, [r7, #100]	; 0x64
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	3314      	adds	r3, #20
 8015f26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f28:	637a      	str	r2, [r7, #52]	; 0x34
 8015f2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f30:	e841 2300 	strex	r3, r2, [r1]
 8015f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d1e5      	bne.n	8015f08 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	3314      	adds	r3, #20
 8015f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	e853 3f00 	ldrex	r3, [r3]
 8015f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f52:	663b      	str	r3, [r7, #96]	; 0x60
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	3314      	adds	r3, #20
 8015f5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f5c:	623a      	str	r2, [r7, #32]
 8015f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f60:	69f9      	ldr	r1, [r7, #28]
 8015f62:	6a3a      	ldr	r2, [r7, #32]
 8015f64:	e841 2300 	strex	r3, r2, [r1]
 8015f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8015f6a:	69bb      	ldr	r3, [r7, #24]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d1e5      	bne.n	8015f3c <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2200      	movs	r2, #0
 8015f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015f78:	2300      	movs	r3, #0
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3774      	adds	r7, #116	; 0x74
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f84:	4770      	bx	lr

08015f86 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b090      	sub	sp, #64	; 0x40
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	695b      	ldr	r3, [r3, #20]
 8015f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f9c:	2b80      	cmp	r3, #128	; 0x80
 8015f9e:	bf0c      	ite	eq
 8015fa0:	2301      	moveq	r3, #1
 8015fa2:	2300      	movne	r3, #0
 8015fa4:	b2db      	uxtb	r3, r3
 8015fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	2b21      	cmp	r3, #33	; 0x21
 8015fb2:	d128      	bne.n	8016006 <HAL_UART_DMAStop+0x80>
 8015fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d025      	beq.n	8016006 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	3314      	adds	r3, #20
 8015fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc4:	e853 3f00 	ldrex	r3, [r3]
 8015fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	3314      	adds	r3, #20
 8015fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fda:	633a      	str	r2, [r7, #48]	; 0x30
 8015fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fe2:	e841 2300 	strex	r3, r2, [r1]
 8015fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d1e5      	bne.n	8015fba <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d004      	beq.n	8016000 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7f1 fed7 	bl	8007dae <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f001 fcd1 	bl	80179a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	695b      	ldr	r3, [r3, #20]
 801600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016010:	2b40      	cmp	r3, #64	; 0x40
 8016012:	bf0c      	ite	eq
 8016014:	2301      	moveq	r3, #1
 8016016:	2300      	movne	r3, #0
 8016018:	b2db      	uxtb	r3, r3
 801601a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016022:	b2db      	uxtb	r3, r3
 8016024:	2b22      	cmp	r3, #34	; 0x22
 8016026:	d128      	bne.n	801607a <HAL_UART_DMAStop+0xf4>
 8016028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801602a:	2b00      	cmp	r3, #0
 801602c:	d025      	beq.n	801607a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	3314      	adds	r3, #20
 8016034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	e853 3f00 	ldrex	r3, [r3]
 801603c:	60fb      	str	r3, [r7, #12]
   return(result);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016044:	637b      	str	r3, [r7, #52]	; 0x34
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	3314      	adds	r3, #20
 801604c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801604e:	61fa      	str	r2, [r7, #28]
 8016050:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016052:	69b9      	ldr	r1, [r7, #24]
 8016054:	69fa      	ldr	r2, [r7, #28]
 8016056:	e841 2300 	strex	r3, r2, [r1]
 801605a:	617b      	str	r3, [r7, #20]
   return(result);
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d1e5      	bne.n	801602e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016066:	2b00      	cmp	r3, #0
 8016068:	d004      	beq.n	8016074 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801606e:	4618      	mov	r0, r3
 8016070:	f7f1 fe9d 	bl	8007dae <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f001 fcbf 	bl	80179f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 801607a:	2300      	movs	r3, #0
}
 801607c:	4618      	mov	r0, r3
 801607e:	3740      	adds	r7, #64	; 0x40
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b088      	sub	sp, #32
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	603b      	str	r3, [r7, #0]
 8016090:	4613      	mov	r3, r2
 8016092:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801609a:	b2db      	uxtb	r3, r3
 801609c:	2b20      	cmp	r3, #32
 801609e:	f040 80c9 	bne.w	8016234 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d002      	beq.n	80160ae <HAL_UARTEx_ReceiveToIdle+0x2a>
 80160a8:	88fb      	ldrh	r3, [r7, #6]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d101      	bne.n	80160b2 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80160ae:	2301      	movs	r3, #1
 80160b0:	e0c1      	b.n	8016236 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80160b8:	2b01      	cmp	r3, #1
 80160ba:	d101      	bne.n	80160c0 <HAL_UARTEx_ReceiveToIdle+0x3c>
 80160bc:	2302      	movs	r3, #2
 80160be:	e0ba      	b.n	8016236 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	2201      	movs	r2, #1
 80160c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2200      	movs	r2, #0
 80160cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	2222      	movs	r2, #34	; 0x22
 80160d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2201      	movs	r2, #1
 80160da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80160dc:	f7f0 fba6 	bl	800682c <HAL_GetTick>
 80160e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	88fa      	ldrh	r2, [r7, #6]
 80160e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	88fa      	ldrh	r2, [r7, #6]
 80160ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	689b      	ldr	r3, [r3, #8]
 80160f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160f6:	d108      	bne.n	801610a <HAL_UARTEx_ReceiveToIdle+0x86>
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	691b      	ldr	r3, [r3, #16]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d104      	bne.n	801610a <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8016100:	2300      	movs	r3, #0
 8016102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	61bb      	str	r3, [r7, #24]
 8016108:	e003      	b.n	8016112 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801610e:	2300      	movs	r3, #0
 8016110:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	2200      	movs	r2, #0
 8016116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	2200      	movs	r2, #0
 801611e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016120:	e074      	b.n	801620c <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	f003 0310 	and.w	r3, r3, #16
 801612c:	2b10      	cmp	r3, #16
 801612e:	d114      	bne.n	801615a <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016130:	2300      	movs	r3, #0
 8016132:	613b      	str	r3, [r7, #16]
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	613b      	str	r3, [r7, #16]
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	613b      	str	r3, [r7, #16]
 8016144:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	881b      	ldrh	r3, [r3, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d005      	beq.n	801615a <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2220      	movs	r2, #32
 8016152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8016156:	2300      	movs	r3, #0
 8016158:	e06d      	b.n	8016236 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	f003 0320 	and.w	r3, r3, #32
 8016164:	2b20      	cmp	r3, #32
 8016166:	d13c      	bne.n	80161e2 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8016168:	69fb      	ldr	r3, [r7, #28]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d10c      	bne.n	8016188 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	b29b      	uxth	r3, r3
 8016176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801617a:	b29a      	uxth	r2, r3
 801617c:	69bb      	ldr	r3, [r7, #24]
 801617e:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8016180:	69bb      	ldr	r3, [r7, #24]
 8016182:	3302      	adds	r3, #2
 8016184:	61bb      	str	r3, [r7, #24]
 8016186:	e01f      	b.n	80161c8 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	689b      	ldr	r3, [r3, #8]
 801618c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016190:	d007      	beq.n	80161a2 <HAL_UARTEx_ReceiveToIdle+0x11e>
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	689b      	ldr	r3, [r3, #8]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d10a      	bne.n	80161b0 <HAL_UARTEx_ReceiveToIdle+0x12c>
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	691b      	ldr	r3, [r3, #16]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d106      	bne.n	80161b0 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	b2da      	uxtb	r2, r3
 80161aa:	69fb      	ldr	r3, [r7, #28]
 80161ac:	701a      	strb	r2, [r3, #0]
 80161ae:	e008      	b.n	80161c2 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	685b      	ldr	r3, [r3, #4]
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161bc:	b2da      	uxtb	r2, r3
 80161be:	69fb      	ldr	r3, [r7, #28]
 80161c0:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80161c2:	69fb      	ldr	r3, [r7, #28]
 80161c4:	3301      	adds	r3, #1
 80161c6:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	881b      	ldrh	r3, [r3, #0]
 80161cc:	3301      	adds	r3, #1
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80161d8:	b29b      	uxth	r3, r3
 80161da:	3b01      	subs	r3, #1
 80161dc:	b29a      	uxth	r2, r3
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80161e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161e8:	d010      	beq.n	801620c <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80161ea:	f7f0 fb1f 	bl	800682c <HAL_GetTick>
 80161ee:	4602      	mov	r2, r0
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	1ad3      	subs	r3, r2, r3
 80161f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d302      	bcc.n	8016200 <HAL_UARTEx_ReceiveToIdle+0x17c>
 80161fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d105      	bne.n	801620c <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2220      	movs	r2, #32
 8016204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8016208:	2303      	movs	r3, #3
 801620a:	e014      	b.n	8016236 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016210:	b29b      	uxth	r3, r3
 8016212:	2b00      	cmp	r3, #0
 8016214:	d185      	bne.n	8016122 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801621e:	b29b      	uxth	r3, r3
 8016220:	1ad3      	subs	r3, r2, r3
 8016222:	b29a      	uxth	r2, r3
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	2220      	movs	r2, #32
 801622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016230:	2300      	movs	r3, #0
 8016232:	e000      	b.n	8016236 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8016234:	2302      	movs	r3, #2
  }
}
 8016236:	4618      	mov	r0, r3
 8016238:	3720      	adds	r7, #32
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}

0801623e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801623e:	b580      	push	{r7, lr}
 8016240:	b08c      	sub	sp, #48	; 0x30
 8016242:	af00      	add	r7, sp, #0
 8016244:	60f8      	str	r0, [r7, #12]
 8016246:	60b9      	str	r1, [r7, #8]
 8016248:	4613      	mov	r3, r2
 801624a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016252:	b2db      	uxtb	r3, r3
 8016254:	2b20      	cmp	r3, #32
 8016256:	d152      	bne.n	80162fe <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d002      	beq.n	8016264 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 801625e:	88fb      	ldrh	r3, [r7, #6]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d101      	bne.n	8016268 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8016264:	2301      	movs	r3, #1
 8016266:	e04b      	b.n	8016300 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801626e:	2b01      	cmp	r3, #1
 8016270:	d101      	bne.n	8016276 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8016272:	2302      	movs	r3, #2
 8016274:	e044      	b.n	8016300 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	2201      	movs	r2, #1
 801627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	2201      	movs	r2, #1
 8016282:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8016284:	88fb      	ldrh	r3, [r7, #6]
 8016286:	461a      	mov	r2, r3
 8016288:	68b9      	ldr	r1, [r7, #8]
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f001 fab8 	bl	8017800 <UART_Start_Receive_IT>
 8016290:	4603      	mov	r3, r0
 8016292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801629a:	2b00      	cmp	r3, #0
 801629c:	d12c      	bne.n	80162f8 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d125      	bne.n	80162f2 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80162a6:	2300      	movs	r3, #0
 80162a8:	613b      	str	r3, [r7, #16]
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	613b      	str	r3, [r7, #16]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	613b      	str	r3, [r7, #16]
 80162ba:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	330c      	adds	r3, #12
 80162c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162c4:	69bb      	ldr	r3, [r7, #24]
 80162c6:	e853 3f00 	ldrex	r3, [r3]
 80162ca:	617b      	str	r3, [r7, #20]
   return(result);
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	f043 0310 	orr.w	r3, r3, #16
 80162d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	330c      	adds	r3, #12
 80162da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162dc:	627a      	str	r2, [r7, #36]	; 0x24
 80162de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162e0:	6a39      	ldr	r1, [r7, #32]
 80162e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162e4:	e841 2300 	strex	r3, r2, [r1]
 80162e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80162ea:	69fb      	ldr	r3, [r7, #28]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d1e5      	bne.n	80162bc <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80162f0:	e002      	b.n	80162f8 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80162f2:	2301      	movs	r3, #1
 80162f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80162f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80162fc:	e000      	b.n	8016300 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80162fe:	2302      	movs	r3, #2
  }
}
 8016300:	4618      	mov	r0, r3
 8016302:	3730      	adds	r7, #48	; 0x30
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b08c      	sub	sp, #48	; 0x30
 801630c:	af00      	add	r7, sp, #0
 801630e:	60f8      	str	r0, [r7, #12]
 8016310:	60b9      	str	r1, [r7, #8]
 8016312:	4613      	mov	r3, r2
 8016314:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801631c:	b2db      	uxtb	r3, r3
 801631e:	2b20      	cmp	r3, #32
 8016320:	d152      	bne.n	80163c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d002      	beq.n	801632e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8016328:	88fb      	ldrh	r3, [r7, #6]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d101      	bne.n	8016332 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801632e:	2301      	movs	r3, #1
 8016330:	e04b      	b.n	80163ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016338:	2b01      	cmp	r3, #1
 801633a:	d101      	bne.n	8016340 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801633c:	2302      	movs	r3, #2
 801633e:	e044      	b.n	80163ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	2201      	movs	r2, #1
 8016344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2201      	movs	r2, #1
 801634c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801634e:	88fb      	ldrh	r3, [r7, #6]
 8016350:	461a      	mov	r2, r3
 8016352:	68b9      	ldr	r1, [r7, #8]
 8016354:	68f8      	ldr	r0, [r7, #12]
 8016356:	f001 fa8d 	bl	8017874 <UART_Start_Receive_DMA>
 801635a:	4603      	mov	r3, r0
 801635c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016364:	2b00      	cmp	r3, #0
 8016366:	d12c      	bne.n	80163c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801636c:	2b01      	cmp	r3, #1
 801636e:	d125      	bne.n	80163bc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016370:	2300      	movs	r3, #0
 8016372:	613b      	str	r3, [r7, #16]
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	613b      	str	r3, [r7, #16]
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	613b      	str	r3, [r7, #16]
 8016384:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	330c      	adds	r3, #12
 801638c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801638e:	69bb      	ldr	r3, [r7, #24]
 8016390:	e853 3f00 	ldrex	r3, [r3]
 8016394:	617b      	str	r3, [r7, #20]
   return(result);
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	f043 0310 	orr.w	r3, r3, #16
 801639c:	62bb      	str	r3, [r7, #40]	; 0x28
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	330c      	adds	r3, #12
 80163a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163a6:	627a      	str	r2, [r7, #36]	; 0x24
 80163a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163aa:	6a39      	ldr	r1, [r7, #32]
 80163ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163ae:	e841 2300 	strex	r3, r2, [r1]
 80163b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80163b4:	69fb      	ldr	r3, [r7, #28]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d1e5      	bne.n	8016386 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80163ba:	e002      	b.n	80163c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80163bc:	2301      	movs	r3, #1
 80163be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80163c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80163c6:	e000      	b.n	80163ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80163c8:	2302      	movs	r3, #2
  }
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3730      	adds	r7, #48	; 0x30
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}

080163d2 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80163d2:	b580      	push	{r7, lr}
 80163d4:	b0a0      	sub	sp, #128	; 0x80
 80163d6:	af00      	add	r7, sp, #0
 80163d8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	330c      	adds	r3, #12
 80163e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163e4:	e853 3f00 	ldrex	r3, [r3]
 80163e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80163ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163ec:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80163f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	330c      	adds	r3, #12
 80163f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80163fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80163fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016400:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016402:	e841 2300 	strex	r3, r2, [r1]
 8016406:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801640a:	2b00      	cmp	r3, #0
 801640c:	d1e5      	bne.n	80163da <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	3314      	adds	r3, #20
 8016414:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016418:	e853 3f00 	ldrex	r3, [r3]
 801641c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801641e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016420:	f023 0301 	bic.w	r3, r3, #1
 8016424:	67bb      	str	r3, [r7, #120]	; 0x78
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	3314      	adds	r3, #20
 801642c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801642e:	657a      	str	r2, [r7, #84]	; 0x54
 8016430:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016432:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016436:	e841 2300 	strex	r3, r2, [r1]
 801643a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801643e:	2b00      	cmp	r3, #0
 8016440:	d1e5      	bne.n	801640e <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016446:	2b01      	cmp	r3, #1
 8016448:	d119      	bne.n	801647e <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	330c      	adds	r3, #12
 8016450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016454:	e853 3f00 	ldrex	r3, [r3]
 8016458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645c:	f023 0310 	bic.w	r3, r3, #16
 8016460:	677b      	str	r3, [r7, #116]	; 0x74
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	330c      	adds	r3, #12
 8016468:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801646a:	643a      	str	r2, [r7, #64]	; 0x40
 801646c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801646e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016472:	e841 2300 	strex	r3, r2, [r1]
 8016476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647a:	2b00      	cmp	r3, #0
 801647c:	d1e5      	bne.n	801644a <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	695b      	ldr	r3, [r3, #20]
 8016484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016488:	2b80      	cmp	r3, #128	; 0x80
 801648a:	d136      	bne.n	80164fa <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	3314      	adds	r3, #20
 8016492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016494:	6a3b      	ldr	r3, [r7, #32]
 8016496:	e853 3f00 	ldrex	r3, [r3]
 801649a:	61fb      	str	r3, [r7, #28]
   return(result);
 801649c:	69fb      	ldr	r3, [r7, #28]
 801649e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80164a2:	673b      	str	r3, [r7, #112]	; 0x70
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	3314      	adds	r3, #20
 80164aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80164ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80164ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80164b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164b4:	e841 2300 	strex	r3, r2, [r1]
 80164b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80164ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d1e5      	bne.n	801648c <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d018      	beq.n	80164fa <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164cc:	2200      	movs	r2, #0
 80164ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f1 fc6a 	bl	8007dae <HAL_DMA_Abort>
 80164da:	4603      	mov	r3, r0
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d00c      	beq.n	80164fa <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7f2 f826 	bl	8008536 <HAL_DMA_GetError>
 80164ea:	4603      	mov	r3, r0
 80164ec:	2b20      	cmp	r3, #32
 80164ee:	d104      	bne.n	80164fa <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2210      	movs	r2, #16
 80164f4:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80164f6:	2303      	movs	r3, #3
 80164f8:	e052      	b.n	80165a0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	695b      	ldr	r3, [r3, #20]
 8016500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016504:	2b40      	cmp	r3, #64	; 0x40
 8016506:	d136      	bne.n	8016576 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	3314      	adds	r3, #20
 801650e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	e853 3f00 	ldrex	r3, [r3]
 8016516:	60bb      	str	r3, [r7, #8]
   return(result);
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801651e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	3314      	adds	r3, #20
 8016526:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016528:	61ba      	str	r2, [r7, #24]
 801652a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801652c:	6979      	ldr	r1, [r7, #20]
 801652e:	69ba      	ldr	r2, [r7, #24]
 8016530:	e841 2300 	strex	r3, r2, [r1]
 8016534:	613b      	str	r3, [r7, #16]
   return(result);
 8016536:	693b      	ldr	r3, [r7, #16]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d1e5      	bne.n	8016508 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016540:	2b00      	cmp	r3, #0
 8016542:	d018      	beq.n	8016576 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016548:	2200      	movs	r2, #0
 801654a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016550:	4618      	mov	r0, r3
 8016552:	f7f1 fc2c 	bl	8007dae <HAL_DMA_Abort>
 8016556:	4603      	mov	r3, r0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d00c      	beq.n	8016576 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016560:	4618      	mov	r0, r3
 8016562:	f7f1 ffe8 	bl	8008536 <HAL_DMA_GetError>
 8016566:	4603      	mov	r3, r0
 8016568:	2b20      	cmp	r3, #32
 801656a:	d104      	bne.n	8016576 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	2210      	movs	r2, #16
 8016570:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016572:	2303      	movs	r3, #3
 8016574:	e014      	b.n	80165a0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2200      	movs	r2, #0
 801657a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2200      	movs	r2, #0
 8016580:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2200      	movs	r2, #0
 8016586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2220      	movs	r2, #32
 801658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2220      	movs	r2, #32
 8016594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2200      	movs	r2, #0
 801659c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 801659e:	2300      	movs	r3, #0
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3780      	adds	r7, #128	; 0x80
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b08e      	sub	sp, #56	; 0x38
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	330c      	adds	r3, #12
 80165b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165b8:	6a3b      	ldr	r3, [r7, #32]
 80165ba:	e853 3f00 	ldrex	r3, [r3]
 80165be:	61fb      	str	r3, [r7, #28]
   return(result);
 80165c0:	69fb      	ldr	r3, [r7, #28]
 80165c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80165c6:	637b      	str	r3, [r7, #52]	; 0x34
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	330c      	adds	r3, #12
 80165ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80165d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80165d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165d8:	e841 2300 	strex	r3, r2, [r1]
 80165dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80165de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d1e5      	bne.n	80165b0 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	695b      	ldr	r3, [r3, #20]
 80165ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165ee:	2b80      	cmp	r3, #128	; 0x80
 80165f0:	d136      	bne.n	8016660 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	3314      	adds	r3, #20
 80165f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	e853 3f00 	ldrex	r3, [r3]
 8016600:	60bb      	str	r3, [r7, #8]
   return(result);
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016608:	633b      	str	r3, [r7, #48]	; 0x30
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	3314      	adds	r3, #20
 8016610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016612:	61ba      	str	r2, [r7, #24]
 8016614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016616:	6979      	ldr	r1, [r7, #20]
 8016618:	69ba      	ldr	r2, [r7, #24]
 801661a:	e841 2300 	strex	r3, r2, [r1]
 801661e:	613b      	str	r3, [r7, #16]
   return(result);
 8016620:	693b      	ldr	r3, [r7, #16]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d1e5      	bne.n	80165f2 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801662a:	2b00      	cmp	r3, #0
 801662c:	d018      	beq.n	8016660 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016632:	2200      	movs	r2, #0
 8016634:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801663a:	4618      	mov	r0, r3
 801663c:	f7f1 fbb7 	bl	8007dae <HAL_DMA_Abort>
 8016640:	4603      	mov	r3, r0
 8016642:	2b00      	cmp	r3, #0
 8016644:	d00c      	beq.n	8016660 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801664a:	4618      	mov	r0, r3
 801664c:	f7f1 ff73 	bl	8008536 <HAL_DMA_GetError>
 8016650:	4603      	mov	r3, r0
 8016652:	2b20      	cmp	r3, #32
 8016654:	d104      	bne.n	8016660 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2210      	movs	r2, #16
 801665a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 801665c:	2303      	movs	r3, #3
 801665e:	e007      	b.n	8016670 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2200      	movs	r2, #0
 8016664:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2220      	movs	r2, #32
 801666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801666e:	2300      	movs	r3, #0
}
 8016670:	4618      	mov	r0, r3
 8016672:	3738      	adds	r7, #56	; 0x38
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}

08016678 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b09a      	sub	sp, #104	; 0x68
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	330c      	adds	r3, #12
 8016686:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801668a:	e853 3f00 	ldrex	r3, [r3]
 801668e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016696:	667b      	str	r3, [r7, #100]	; 0x64
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	330c      	adds	r3, #12
 801669e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80166a0:	657a      	str	r2, [r7, #84]	; 0x54
 80166a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166a8:	e841 2300 	strex	r3, r2, [r1]
 80166ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80166ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d1e5      	bne.n	8016680 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	3314      	adds	r3, #20
 80166ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166be:	e853 3f00 	ldrex	r3, [r3]
 80166c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80166c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c6:	f023 0301 	bic.w	r3, r3, #1
 80166ca:	663b      	str	r3, [r7, #96]	; 0x60
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	3314      	adds	r3, #20
 80166d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80166d4:	643a      	str	r2, [r7, #64]	; 0x40
 80166d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80166da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80166dc:	e841 2300 	strex	r3, r2, [r1]
 80166e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80166e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d1e5      	bne.n	80166b4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166ec:	2b01      	cmp	r3, #1
 80166ee:	d119      	bne.n	8016724 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	330c      	adds	r3, #12
 80166f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166f8:	6a3b      	ldr	r3, [r7, #32]
 80166fa:	e853 3f00 	ldrex	r3, [r3]
 80166fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8016700:	69fb      	ldr	r3, [r7, #28]
 8016702:	f023 0310 	bic.w	r3, r3, #16
 8016706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	330c      	adds	r3, #12
 801670e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016718:	e841 2300 	strex	r3, r2, [r1]
 801671c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016720:	2b00      	cmp	r3, #0
 8016722:	d1e5      	bne.n	80166f0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	695b      	ldr	r3, [r3, #20]
 801672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801672e:	2b40      	cmp	r3, #64	; 0x40
 8016730:	d136      	bne.n	80167a0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	3314      	adds	r3, #20
 8016738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	e853 3f00 	ldrex	r3, [r3]
 8016740:	60bb      	str	r3, [r7, #8]
   return(result);
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016748:	65bb      	str	r3, [r7, #88]	; 0x58
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	3314      	adds	r3, #20
 8016750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016752:	61ba      	str	r2, [r7, #24]
 8016754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016756:	6979      	ldr	r1, [r7, #20]
 8016758:	69ba      	ldr	r2, [r7, #24]
 801675a:	e841 2300 	strex	r3, r2, [r1]
 801675e:	613b      	str	r3, [r7, #16]
   return(result);
 8016760:	693b      	ldr	r3, [r7, #16]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1e5      	bne.n	8016732 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801676a:	2b00      	cmp	r3, #0
 801676c:	d018      	beq.n	80167a0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016772:	2200      	movs	r2, #0
 8016774:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801677a:	4618      	mov	r0, r3
 801677c:	f7f1 fb17 	bl	8007dae <HAL_DMA_Abort>
 8016780:	4603      	mov	r3, r0
 8016782:	2b00      	cmp	r3, #0
 8016784:	d00c      	beq.n	80167a0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801678a:	4618      	mov	r0, r3
 801678c:	f7f1 fed3 	bl	8008536 <HAL_DMA_GetError>
 8016790:	4603      	mov	r3, r0
 8016792:	2b20      	cmp	r3, #32
 8016794:	d104      	bne.n	80167a0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2210      	movs	r2, #16
 801679a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 801679c:	2303      	movs	r3, #3
 801679e:	e00a      	b.n	80167b6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2200      	movs	r2, #0
 80167a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2220      	movs	r2, #32
 80167aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2200      	movs	r2, #0
 80167b2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80167b4:	2300      	movs	r3, #0
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3768      	adds	r7, #104	; 0x68
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}

080167be <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80167be:	b580      	push	{r7, lr}
 80167c0:	b0a2      	sub	sp, #136	; 0x88
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80167c6:	2301      	movs	r3, #1
 80167c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	330c      	adds	r3, #12
 80167d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80167d6:	e853 3f00 	ldrex	r3, [r3]
 80167da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80167dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167de:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80167e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	330c      	adds	r3, #12
 80167ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80167f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80167f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80167f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80167f8:	e841 2300 	strex	r3, r2, [r1]
 80167fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80167fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016800:	2b00      	cmp	r3, #0
 8016802:	d1e3      	bne.n	80167cc <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	3314      	adds	r3, #20
 801680a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801680c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801680e:	e853 3f00 	ldrex	r3, [r3]
 8016812:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016816:	f023 0301 	bic.w	r3, r3, #1
 801681a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	3314      	adds	r3, #20
 8016822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016824:	65ba      	str	r2, [r7, #88]	; 0x58
 8016826:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016828:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801682a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801682c:	e841 2300 	strex	r3, r2, [r1]
 8016830:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016834:	2b00      	cmp	r3, #0
 8016836:	d1e5      	bne.n	8016804 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801683c:	2b01      	cmp	r3, #1
 801683e:	d119      	bne.n	8016874 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	330c      	adds	r3, #12
 8016846:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684a:	e853 3f00 	ldrex	r3, [r3]
 801684e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016852:	f023 0310 	bic.w	r3, r3, #16
 8016856:	67bb      	str	r3, [r7, #120]	; 0x78
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	330c      	adds	r3, #12
 801685e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016860:	647a      	str	r2, [r7, #68]	; 0x44
 8016862:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016868:	e841 2300 	strex	r3, r2, [r1]
 801686c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801686e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016870:	2b00      	cmp	r3, #0
 8016872:	d1e5      	bne.n	8016840 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016878:	2b00      	cmp	r3, #0
 801687a:	d00f      	beq.n	801689c <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	695b      	ldr	r3, [r3, #20]
 8016882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016886:	2b80      	cmp	r3, #128	; 0x80
 8016888:	d104      	bne.n	8016894 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801688e:	4a54      	ldr	r2, [pc, #336]	; (80169e0 <HAL_UART_Abort_IT+0x222>)
 8016890:	651a      	str	r2, [r3, #80]	; 0x50
 8016892:	e003      	b.n	801689c <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016898:	2200      	movs	r2, #0
 801689a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d00f      	beq.n	80168c4 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	695b      	ldr	r3, [r3, #20]
 80168aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168ae:	2b40      	cmp	r3, #64	; 0x40
 80168b0:	d104      	bne.n	80168bc <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168b6:	4a4b      	ldr	r2, [pc, #300]	; (80169e4 <HAL_UART_Abort_IT+0x226>)
 80168b8:	651a      	str	r2, [r3, #80]	; 0x50
 80168ba:	e003      	b.n	80168c4 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168c0:	2200      	movs	r2, #0
 80168c2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	695b      	ldr	r3, [r3, #20]
 80168ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168ce:	2b80      	cmp	r3, #128	; 0x80
 80168d0:	d12d      	bne.n	801692e <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	3314      	adds	r3, #20
 80168d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168dc:	e853 3f00 	ldrex	r3, [r3]
 80168e0:	623b      	str	r3, [r7, #32]
   return(result);
 80168e2:	6a3b      	ldr	r3, [r7, #32]
 80168e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80168e8:	677b      	str	r3, [r7, #116]	; 0x74
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	3314      	adds	r3, #20
 80168f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80168f2:	633a      	str	r2, [r7, #48]	; 0x30
 80168f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80168f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168fa:	e841 2300 	strex	r3, r2, [r1]
 80168fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016902:	2b00      	cmp	r3, #0
 8016904:	d1e5      	bne.n	80168d2 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801690a:	2b00      	cmp	r3, #0
 801690c:	d00f      	beq.n	801692e <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016912:	4618      	mov	r0, r3
 8016914:	f7f1 fabb 	bl	8007e8e <HAL_DMA_Abort_IT>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d004      	beq.n	8016928 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016922:	2200      	movs	r2, #0
 8016924:	651a      	str	r2, [r3, #80]	; 0x50
 8016926:	e002      	b.n	801692e <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8016928:	2300      	movs	r3, #0
 801692a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	695b      	ldr	r3, [r3, #20]
 8016934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016938:	2b40      	cmp	r3, #64	; 0x40
 801693a:	d130      	bne.n	801699e <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	3314      	adds	r3, #20
 8016942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	e853 3f00 	ldrex	r3, [r3]
 801694a:	60fb      	str	r3, [r7, #12]
   return(result);
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016952:	673b      	str	r3, [r7, #112]	; 0x70
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	3314      	adds	r3, #20
 801695a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801695c:	61fa      	str	r2, [r7, #28]
 801695e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016960:	69b9      	ldr	r1, [r7, #24]
 8016962:	69fa      	ldr	r2, [r7, #28]
 8016964:	e841 2300 	strex	r3, r2, [r1]
 8016968:	617b      	str	r3, [r7, #20]
   return(result);
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d1e5      	bne.n	801693c <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016974:	2b00      	cmp	r3, #0
 8016976:	d012      	beq.n	801699e <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801697c:	4618      	mov	r0, r3
 801697e:	f7f1 fa86 	bl	8007e8e <HAL_DMA_Abort_IT>
 8016982:	4603      	mov	r3, r0
 8016984:	2b00      	cmp	r3, #0
 8016986:	d007      	beq.n	8016998 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801698c:	2200      	movs	r2, #0
 801698e:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8016990:	2301      	movs	r3, #1
 8016992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016996:	e002      	b.n	801699e <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8016998:	2300      	movs	r3, #0
 801699a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 801699e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80169a2:	2b01      	cmp	r3, #1
 80169a4:	d116      	bne.n	80169d4 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2200      	movs	r2, #0
 80169aa:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2200      	movs	r2, #0
 80169b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2200      	movs	r2, #0
 80169b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2220      	movs	r2, #32
 80169bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2220      	movs	r2, #32
 80169c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2200      	movs	r2, #0
 80169cc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 fbe5 	bl	801719e <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80169d4:	2300      	movs	r3, #0
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3788      	adds	r7, #136	; 0x88
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	08017ae7 	.word	0x08017ae7
 80169e4:	08017b47 	.word	0x08017b47

080169e8 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b08e      	sub	sp, #56	; 0x38
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	330c      	adds	r3, #12
 80169f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169f8:	6a3b      	ldr	r3, [r7, #32]
 80169fa:	e853 3f00 	ldrex	r3, [r3]
 80169fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8016a00:	69fb      	ldr	r3, [r7, #28]
 8016a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016a06:	637b      	str	r3, [r7, #52]	; 0x34
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	330c      	adds	r3, #12
 8016a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a18:	e841 2300 	strex	r3, r2, [r1]
 8016a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d1e5      	bne.n	80169f0 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	695b      	ldr	r3, [r3, #20]
 8016a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a2e:	2b80      	cmp	r3, #128	; 0x80
 8016a30:	d13c      	bne.n	8016aac <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	3314      	adds	r3, #20
 8016a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	e853 3f00 	ldrex	r3, [r3]
 8016a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a48:	633b      	str	r3, [r7, #48]	; 0x30
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	3314      	adds	r3, #20
 8016a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a52:	61ba      	str	r2, [r7, #24]
 8016a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a56:	6979      	ldr	r1, [r7, #20]
 8016a58:	69ba      	ldr	r2, [r7, #24]
 8016a5a:	e841 2300 	strex	r3, r2, [r1]
 8016a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d1e5      	bne.n	8016a32 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d013      	beq.n	8016a96 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a72:	4a16      	ldr	r2, [pc, #88]	; (8016acc <HAL_UART_AbortTransmit_IT+0xe4>)
 8016a74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f1 fa07 	bl	8007e8e <HAL_DMA_Abort_IT>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d01c      	beq.n	8016ac0 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a8c:	687a      	ldr	r2, [r7, #4]
 8016a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016a90:	4610      	mov	r0, r2
 8016a92:	4798      	blx	r3
 8016a94:	e014      	b.n	8016ac0 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	2200      	movs	r2, #0
 8016a9a:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2220      	movs	r2, #32
 8016aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	f000 fb84 	bl	80171b2 <HAL_UART_AbortTransmitCpltCallback>
 8016aaa:	e009      	b.n	8016ac0 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2200      	movs	r2, #0
 8016ab0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	2220      	movs	r2, #32
 8016ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f000 fb79 	bl	80171b2 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016ac0:	2300      	movs	r3, #0
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3738      	adds	r7, #56	; 0x38
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}
 8016aca:	bf00      	nop
 8016acc:	08017ba7 	.word	0x08017ba7

08016ad0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b09a      	sub	sp, #104	; 0x68
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	330c      	adds	r3, #12
 8016ade:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ae2:	e853 3f00 	ldrex	r3, [r3]
 8016ae6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016aee:	667b      	str	r3, [r7, #100]	; 0x64
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	330c      	adds	r3, #12
 8016af6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016af8:	657a      	str	r2, [r7, #84]	; 0x54
 8016afa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016afc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016afe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b00:	e841 2300 	strex	r3, r2, [r1]
 8016b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d1e5      	bne.n	8016ad8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	3314      	adds	r3, #20
 8016b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b16:	e853 3f00 	ldrex	r3, [r3]
 8016b1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b1e:	f023 0301 	bic.w	r3, r3, #1
 8016b22:	663b      	str	r3, [r7, #96]	; 0x60
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	3314      	adds	r3, #20
 8016b2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016b2c:	643a      	str	r2, [r7, #64]	; 0x40
 8016b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b34:	e841 2300 	strex	r3, r2, [r1]
 8016b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d1e5      	bne.n	8016b0c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	d119      	bne.n	8016b7c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	330c      	adds	r3, #12
 8016b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b50:	6a3b      	ldr	r3, [r7, #32]
 8016b52:	e853 3f00 	ldrex	r3, [r3]
 8016b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8016b58:	69fb      	ldr	r3, [r7, #28]
 8016b5a:	f023 0310 	bic.w	r3, r3, #16
 8016b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	330c      	adds	r3, #12
 8016b66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b70:	e841 2300 	strex	r3, r2, [r1]
 8016b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d1e5      	bne.n	8016b48 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	695b      	ldr	r3, [r3, #20]
 8016b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b86:	2b40      	cmp	r3, #64	; 0x40
 8016b88:	d13f      	bne.n	8016c0a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	3314      	adds	r3, #20
 8016b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	e853 3f00 	ldrex	r3, [r3]
 8016b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	3314      	adds	r3, #20
 8016ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016baa:	61ba      	str	r2, [r7, #24]
 8016bac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bae:	6979      	ldr	r1, [r7, #20]
 8016bb0:	69ba      	ldr	r2, [r7, #24]
 8016bb2:	e841 2300 	strex	r3, r2, [r1]
 8016bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d1e5      	bne.n	8016b8a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d013      	beq.n	8016bee <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bca:	4a19      	ldr	r2, [pc, #100]	; (8016c30 <HAL_UART_AbortReceive_IT+0x160>)
 8016bcc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7f1 f95b 	bl	8007e8e <HAL_DMA_Abort_IT>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d022      	beq.n	8016c24 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016be8:	4610      	mov	r0, r2
 8016bea:	4798      	blx	r3
 8016bec:	e01a      	b.n	8016c24 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2220      	movs	r2, #32
 8016bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	2200      	movs	r2, #0
 8016c00:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f000 fadf 	bl	80171c6 <HAL_UART_AbortReceiveCpltCallback>
 8016c08:	e00c      	b.n	8016c24 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2220      	movs	r2, #32
 8016c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f000 fad1 	bl	80171c6 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016c24:	2300      	movs	r3, #0
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	3768      	adds	r7, #104	; 0x68
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}
 8016c2e:	bf00      	nop
 8016c30:	08017bd1 	.word	0x08017bd1

08016c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b0ba      	sub	sp, #232	; 0xe8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	68db      	ldr	r3, [r3, #12]
 8016c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	695b      	ldr	r3, [r3, #20]
 8016c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8016c60:	2300      	movs	r3, #0
 8016c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c6a:	f003 030f 	and.w	r3, r3, #15
 8016c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8016c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d10f      	bne.n	8016c9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c7e:	f003 0320 	and.w	r3, r3, #32
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d009      	beq.n	8016c9a <HAL_UART_IRQHandler+0x66>
 8016c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016c8a:	f003 0320 	and.w	r3, r3, #32
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d003      	beq.n	8016c9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f001 f81c 	bl	8017cd0 <UART_Receive_IT>
      return;
 8016c98:	e256      	b.n	8017148 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8016c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	f000 80de 	beq.w	8016e60 <HAL_UART_IRQHandler+0x22c>
 8016ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016ca8:	f003 0301 	and.w	r3, r3, #1
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d106      	bne.n	8016cbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8016cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	f000 80d1 	beq.w	8016e60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cc2:	f003 0301 	and.w	r3, r3, #1
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d00b      	beq.n	8016ce2 <HAL_UART_IRQHandler+0xae>
 8016cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d005      	beq.n	8016ce2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cda:	f043 0201 	orr.w	r2, r3, #1
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ce6:	f003 0304 	and.w	r3, r3, #4
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d00b      	beq.n	8016d06 <HAL_UART_IRQHandler+0xd2>
 8016cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016cf2:	f003 0301 	and.w	r3, r3, #1
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d005      	beq.n	8016d06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cfe:	f043 0202 	orr.w	r2, r3, #2
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d0a:	f003 0302 	and.w	r3, r3, #2
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d00b      	beq.n	8016d2a <HAL_UART_IRQHandler+0xf6>
 8016d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d16:	f003 0301 	and.w	r3, r3, #1
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d005      	beq.n	8016d2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d22:	f043 0204 	orr.w	r2, r3, #4
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8016d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d2e:	f003 0308 	and.w	r3, r3, #8
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d011      	beq.n	8016d5a <HAL_UART_IRQHandler+0x126>
 8016d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d3a:	f003 0320 	and.w	r3, r3, #32
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d105      	bne.n	8016d4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8016d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d46:	f003 0301 	and.w	r3, r3, #1
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d005      	beq.n	8016d5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d52:	f043 0208 	orr.w	r2, r3, #8
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	f000 81ed 	beq.w	801713e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d68:	f003 0320 	and.w	r3, r3, #32
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d008      	beq.n	8016d82 <HAL_UART_IRQHandler+0x14e>
 8016d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d74:	f003 0320 	and.w	r3, r3, #32
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d002      	beq.n	8016d82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f000 ffa7 	bl	8017cd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	695b      	ldr	r3, [r3, #20]
 8016d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d8c:	2b40      	cmp	r3, #64	; 0x40
 8016d8e:	bf0c      	ite	eq
 8016d90:	2301      	moveq	r3, #1
 8016d92:	2300      	movne	r3, #0
 8016d94:	b2db      	uxtb	r3, r3
 8016d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d9e:	f003 0308 	and.w	r3, r3, #8
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d103      	bne.n	8016dae <HAL_UART_IRQHandler+0x17a>
 8016da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d04f      	beq.n	8016e4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f000 fe22 	bl	80179f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	695b      	ldr	r3, [r3, #20]
 8016dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016dbe:	2b40      	cmp	r3, #64	; 0x40
 8016dc0:	d141      	bne.n	8016e46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	3314      	adds	r3, #20
 8016dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016dd0:	e853 3f00 	ldrex	r3, [r3]
 8016dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8016dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	3314      	adds	r3, #20
 8016dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016dee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016dfe:	e841 2300 	strex	r3, r2, [r1]
 8016e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8016e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d1d9      	bne.n	8016dc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d013      	beq.n	8016e3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e1a:	4a7d      	ldr	r2, [pc, #500]	; (8017010 <HAL_UART_IRQHandler+0x3dc>)
 8016e1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7f1 f833 	bl	8007e8e <HAL_DMA_Abort_IT>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d016      	beq.n	8016e5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016e38:	4610      	mov	r0, r2
 8016e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e3c:	e00e      	b.n	8016e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016e3e:	6878      	ldr	r0, [r7, #4]
 8016e40:	f000 f9a3 	bl	801718a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e44:	e00a      	b.n	8016e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f000 f99f 	bl	801718a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e4c:	e006      	b.n	8016e5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016e4e:	6878      	ldr	r0, [r7, #4]
 8016e50:	f000 f99b 	bl	801718a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2200      	movs	r2, #0
 8016e58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8016e5a:	e170      	b.n	801713e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e5c:	bf00      	nop
    return;
 8016e5e:	e16e      	b.n	801713e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e64:	2b01      	cmp	r3, #1
 8016e66:	f040 814a 	bne.w	80170fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8016e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e6e:	f003 0310 	and.w	r3, r3, #16
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	f000 8143 	beq.w	80170fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8016e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016e7c:	f003 0310 	and.w	r3, r3, #16
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	f000 813c 	beq.w	80170fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016e86:	2300      	movs	r3, #0
 8016e88:	60bb      	str	r3, [r7, #8]
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	60bb      	str	r3, [r7, #8]
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	60bb      	str	r3, [r7, #8]
 8016e9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	695b      	ldr	r3, [r3, #20]
 8016ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ea6:	2b40      	cmp	r3, #64	; 0x40
 8016ea8:	f040 80b4 	bne.w	8017014 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	f000 8140 	beq.w	8017142 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	f080 8139 	bcs.w	8017142 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016ed6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016edc:	69db      	ldr	r3, [r3, #28]
 8016ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ee2:	f000 8088 	beq.w	8016ff6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	330c      	adds	r3, #12
 8016eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016ef4:	e853 3f00 	ldrex	r3, [r3]
 8016ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	330c      	adds	r3, #12
 8016f0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016f22:	e841 2300 	strex	r3, r2, [r1]
 8016f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d1d9      	bne.n	8016ee6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	3314      	adds	r3, #20
 8016f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016f3c:	e853 3f00 	ldrex	r3, [r3]
 8016f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f44:	f023 0301 	bic.w	r3, r3, #1
 8016f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	3314      	adds	r3, #20
 8016f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016f62:	e841 2300 	strex	r3, r2, [r1]
 8016f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d1e1      	bne.n	8016f32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	3314      	adds	r3, #20
 8016f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f78:	e853 3f00 	ldrex	r3, [r3]
 8016f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	3314      	adds	r3, #20
 8016f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016f9a:	e841 2300 	strex	r3, r2, [r1]
 8016f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d1e3      	bne.n	8016f6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2220      	movs	r2, #32
 8016faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	330c      	adds	r3, #12
 8016fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fbe:	e853 3f00 	ldrex	r3, [r3]
 8016fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fc6:	f023 0310 	bic.w	r3, r3, #16
 8016fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	330c      	adds	r3, #12
 8016fd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8016fda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016fe0:	e841 2300 	strex	r3, r2, [r1]
 8016fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d1e3      	bne.n	8016fb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7f0 fedc 	bl	8007dae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	1ad3      	subs	r3, r2, r3
 8017002:	b29b      	uxth	r3, r3
 8017004:	4619      	mov	r1, r3
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 f8e7 	bl	80171da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801700c:	e099      	b.n	8017142 <HAL_UART_IRQHandler+0x50e>
 801700e:	bf00      	nop
 8017010:	08017abf 	.word	0x08017abf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801701c:	b29b      	uxth	r3, r3
 801701e:	1ad3      	subs	r3, r2, r3
 8017020:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017028:	b29b      	uxth	r3, r3
 801702a:	2b00      	cmp	r3, #0
 801702c:	f000 808b 	beq.w	8017146 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8017030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017034:	2b00      	cmp	r3, #0
 8017036:	f000 8086 	beq.w	8017146 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	330c      	adds	r3, #12
 8017040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017044:	e853 3f00 	ldrex	r3, [r3]
 8017048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801704c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	330c      	adds	r3, #12
 801705a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801705e:	647a      	str	r2, [r7, #68]	; 0x44
 8017060:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017066:	e841 2300 	strex	r3, r2, [r1]
 801706a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801706c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801706e:	2b00      	cmp	r3, #0
 8017070:	d1e3      	bne.n	801703a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	3314      	adds	r3, #20
 8017078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707c:	e853 3f00 	ldrex	r3, [r3]
 8017080:	623b      	str	r3, [r7, #32]
   return(result);
 8017082:	6a3b      	ldr	r3, [r7, #32]
 8017084:	f023 0301 	bic.w	r3, r3, #1
 8017088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	3314      	adds	r3, #20
 8017092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017096:	633a      	str	r2, [r7, #48]	; 0x30
 8017098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801709a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801709c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801709e:	e841 2300 	strex	r3, r2, [r1]
 80170a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80170a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d1e3      	bne.n	8017072 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	2220      	movs	r2, #32
 80170ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2200      	movs	r2, #0
 80170b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	330c      	adds	r3, #12
 80170be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	e853 3f00 	ldrex	r3, [r3]
 80170c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f023 0310 	bic.w	r3, r3, #16
 80170ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	330c      	adds	r3, #12
 80170d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80170dc:	61fa      	str	r2, [r7, #28]
 80170de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170e0:	69b9      	ldr	r1, [r7, #24]
 80170e2:	69fa      	ldr	r2, [r7, #28]
 80170e4:	e841 2300 	strex	r3, r2, [r1]
 80170e8:	617b      	str	r3, [r7, #20]
   return(result);
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d1e3      	bne.n	80170b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80170f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80170f4:	4619      	mov	r1, r3
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	f000 f86f 	bl	80171da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80170fc:	e023      	b.n	8017146 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80170fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017106:	2b00      	cmp	r3, #0
 8017108:	d009      	beq.n	801711e <HAL_UART_IRQHandler+0x4ea>
 801710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017112:	2b00      	cmp	r3, #0
 8017114:	d003      	beq.n	801711e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f000 fd72 	bl	8017c00 <UART_Transmit_IT>
    return;
 801711c:	e014      	b.n	8017148 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017126:	2b00      	cmp	r3, #0
 8017128:	d00e      	beq.n	8017148 <HAL_UART_IRQHandler+0x514>
 801712a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017132:	2b00      	cmp	r3, #0
 8017134:	d008      	beq.n	8017148 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f000 fdb2 	bl	8017ca0 <UART_EndTransmit_IT>
    return;
 801713c:	e004      	b.n	8017148 <HAL_UART_IRQHandler+0x514>
    return;
 801713e:	bf00      	nop
 8017140:	e002      	b.n	8017148 <HAL_UART_IRQHandler+0x514>
      return;
 8017142:	bf00      	nop
 8017144:	e000      	b.n	8017148 <HAL_UART_IRQHandler+0x514>
      return;
 8017146:	bf00      	nop
  }
}
 8017148:	37e8      	adds	r7, #232	; 0xe8
 801714a:	46bd      	mov	sp, r7
 801714c:	bd80      	pop	{r7, pc}

0801714e <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801714e:	b480      	push	{r7}
 8017150:	b083      	sub	sp, #12
 8017152:	af00      	add	r7, sp, #0
 8017154:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017156:	bf00      	nop
 8017158:	370c      	adds	r7, #12
 801715a:	46bd      	mov	sp, r7
 801715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017160:	4770      	bx	lr

08017162 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017162:	b480      	push	{r7}
 8017164:	b083      	sub	sp, #12
 8017166:	af00      	add	r7, sp, #0
 8017168:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 801716a:	bf00      	nop
 801716c:	370c      	adds	r7, #12
 801716e:	46bd      	mov	sp, r7
 8017170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017174:	4770      	bx	lr

08017176 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017176:	b480      	push	{r7}
 8017178:	b083      	sub	sp, #12
 801717a:	af00      	add	r7, sp, #0
 801717c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801717e:	bf00      	nop
 8017180:	370c      	adds	r7, #12
 8017182:	46bd      	mov	sp, r7
 8017184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017188:	4770      	bx	lr

0801718a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801718a:	b480      	push	{r7}
 801718c:	b083      	sub	sp, #12
 801718e:	af00      	add	r7, sp, #0
 8017190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017192:	bf00      	nop
 8017194:	370c      	adds	r7, #12
 8017196:	46bd      	mov	sp, r7
 8017198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719c:	4770      	bx	lr

0801719e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801719e:	b480      	push	{r7}
 80171a0:	b083      	sub	sp, #12
 80171a2:	af00      	add	r7, sp, #0
 80171a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80171a6:	bf00      	nop
 80171a8:	370c      	adds	r7, #12
 80171aa:	46bd      	mov	sp, r7
 80171ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b0:	4770      	bx	lr

080171b2 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80171b2:	b480      	push	{r7}
 80171b4:	b083      	sub	sp, #12
 80171b6:	af00      	add	r7, sp, #0
 80171b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80171ba:	bf00      	nop
 80171bc:	370c      	adds	r7, #12
 80171be:	46bd      	mov	sp, r7
 80171c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c4:	4770      	bx	lr

080171c6 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80171c6:	b480      	push	{r7}
 80171c8:	b083      	sub	sp, #12
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80171ce:	bf00      	nop
 80171d0:	370c      	adds	r7, #12
 80171d2:	46bd      	mov	sp, r7
 80171d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d8:	4770      	bx	lr

080171da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80171da:	b480      	push	{r7}
 80171dc:	b083      	sub	sp, #12
 80171de:	af00      	add	r7, sp, #0
 80171e0:	6078      	str	r0, [r7, #4]
 80171e2:	460b      	mov	r3, r1
 80171e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80171e6:	bf00      	nop
 80171e8:	370c      	adds	r7, #12
 80171ea:	46bd      	mov	sp, r7
 80171ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f0:	4770      	bx	lr

080171f2 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 80171f2:	b480      	push	{r7}
 80171f4:	b089      	sub	sp, #36	; 0x24
 80171f6:	af00      	add	r7, sp, #0
 80171f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017200:	2b01      	cmp	r3, #1
 8017202:	d101      	bne.n	8017208 <HAL_LIN_SendBreak+0x16>
 8017204:	2302      	movs	r3, #2
 8017206:	e02a      	b.n	801725e <HAL_LIN_SendBreak+0x6c>
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2201      	movs	r2, #1
 801720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2224      	movs	r2, #36	; 0x24
 8017214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	330c      	adds	r3, #12
 801721e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	e853 3f00 	ldrex	r3, [r3]
 8017226:	60bb      	str	r3, [r7, #8]
   return(result);
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	f043 0301 	orr.w	r3, r3, #1
 801722e:	61fb      	str	r3, [r7, #28]
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	330c      	adds	r3, #12
 8017236:	69fa      	ldr	r2, [r7, #28]
 8017238:	61ba      	str	r2, [r7, #24]
 801723a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801723c:	6979      	ldr	r1, [r7, #20]
 801723e:	69ba      	ldr	r2, [r7, #24]
 8017240:	e841 2300 	strex	r3, r2, [r1]
 8017244:	613b      	str	r3, [r7, #16]
   return(result);
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d1e5      	bne.n	8017218 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2220      	movs	r2, #32
 8017250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2200      	movs	r2, #0
 8017258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801725c:	2300      	movs	r3, #0
}
 801725e:	4618      	mov	r0, r3
 8017260:	3724      	adds	r7, #36	; 0x24
 8017262:	46bd      	mov	sp, r7
 8017264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017268:	4770      	bx	lr

0801726a <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 801726a:	b480      	push	{r7}
 801726c:	b089      	sub	sp, #36	; 0x24
 801726e:	af00      	add	r7, sp, #0
 8017270:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017278:	2b01      	cmp	r3, #1
 801727a:	d101      	bne.n	8017280 <HAL_MultiProcessor_EnterMuteMode+0x16>
 801727c:	2302      	movs	r3, #2
 801727e:	e02a      	b.n	80172d6 <HAL_MultiProcessor_EnterMuteMode+0x6c>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2201      	movs	r2, #1
 8017284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2224      	movs	r2, #36	; 0x24
 801728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	330c      	adds	r3, #12
 8017296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	e853 3f00 	ldrex	r3, [r3]
 801729e:	60bb      	str	r3, [r7, #8]
   return(result);
 80172a0:	68bb      	ldr	r3, [r7, #8]
 80172a2:	f043 0302 	orr.w	r3, r3, #2
 80172a6:	61fb      	str	r3, [r7, #28]
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	330c      	adds	r3, #12
 80172ae:	69fa      	ldr	r2, [r7, #28]
 80172b0:	61ba      	str	r2, [r7, #24]
 80172b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172b4:	6979      	ldr	r1, [r7, #20]
 80172b6:	69ba      	ldr	r2, [r7, #24]
 80172b8:	e841 2300 	strex	r3, r2, [r1]
 80172bc:	613b      	str	r3, [r7, #16]
   return(result);
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d1e5      	bne.n	8017290 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2220      	movs	r2, #32
 80172c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2200      	movs	r2, #0
 80172d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80172d4:	2300      	movs	r3, #0
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3724      	adds	r7, #36	; 0x24
 80172da:	46bd      	mov	sp, r7
 80172dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e0:	4770      	bx	lr

080172e2 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 80172e2:	b480      	push	{r7}
 80172e4:	b089      	sub	sp, #36	; 0x24
 80172e6:	af00      	add	r7, sp, #0
 80172e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80172f0:	2b01      	cmp	r3, #1
 80172f2:	d101      	bne.n	80172f8 <HAL_MultiProcessor_ExitMuteMode+0x16>
 80172f4:	2302      	movs	r3, #2
 80172f6:	e02a      	b.n	801734e <HAL_MultiProcessor_ExitMuteMode+0x6c>
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2201      	movs	r2, #1
 80172fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2224      	movs	r2, #36	; 0x24
 8017304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	330c      	adds	r3, #12
 801730e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	e853 3f00 	ldrex	r3, [r3]
 8017316:	60bb      	str	r3, [r7, #8]
   return(result);
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	f023 0302 	bic.w	r3, r3, #2
 801731e:	61fb      	str	r3, [r7, #28]
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	330c      	adds	r3, #12
 8017326:	69fa      	ldr	r2, [r7, #28]
 8017328:	61ba      	str	r2, [r7, #24]
 801732a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801732c:	6979      	ldr	r1, [r7, #20]
 801732e:	69ba      	ldr	r2, [r7, #24]
 8017330:	e841 2300 	strex	r3, r2, [r1]
 8017334:	613b      	str	r3, [r7, #16]
   return(result);
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d1e5      	bne.n	8017308 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2220      	movs	r2, #32
 8017340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	2200      	movs	r2, #0
 8017348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801734c:	2300      	movs	r3, #0
}
 801734e:	4618      	mov	r0, r3
 8017350:	3724      	adds	r7, #36	; 0x24
 8017352:	46bd      	mov	sp, r7
 8017354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017358:	4770      	bx	lr

0801735a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 801735a:	b480      	push	{r7}
 801735c:	b085      	sub	sp, #20
 801735e:	af00      	add	r7, sp, #0
 8017360:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8017362:	2300      	movs	r3, #0
 8017364:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801736c:	2b01      	cmp	r3, #1
 801736e:	d101      	bne.n	8017374 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8017370:	2302      	movs	r3, #2
 8017372:	e020      	b.n	80173b6 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2201      	movs	r2, #1
 8017378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2224      	movs	r2, #36	; 0x24
 8017380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	68db      	ldr	r3, [r3, #12]
 801738a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	f023 030c 	bic.w	r3, r3, #12
 8017392:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	f043 0308 	orr.w	r3, r3, #8
 801739a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	68fa      	ldr	r2, [r7, #12]
 80173a2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2220      	movs	r2, #32
 80173a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2200      	movs	r2, #0
 80173b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80173b4:	2300      	movs	r3, #0
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3714      	adds	r7, #20
 80173ba:	46bd      	mov	sp, r7
 80173bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c0:	4770      	bx	lr

080173c2 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80173c2:	b480      	push	{r7}
 80173c4:	b085      	sub	sp, #20
 80173c6:	af00      	add	r7, sp, #0
 80173c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80173ca:	2300      	movs	r3, #0
 80173cc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d101      	bne.n	80173dc <HAL_HalfDuplex_EnableReceiver+0x1a>
 80173d8:	2302      	movs	r3, #2
 80173da:	e020      	b.n	801741e <HAL_HalfDuplex_EnableReceiver+0x5c>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2201      	movs	r2, #1
 80173e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2224      	movs	r2, #36	; 0x24
 80173e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	68db      	ldr	r3, [r3, #12]
 80173f2:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	f023 030c 	bic.w	r3, r3, #12
 80173fa:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	f043 0304 	orr.w	r3, r3, #4
 8017402:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	68fa      	ldr	r2, [r7, #12]
 801740a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	2220      	movs	r2, #32
 8017410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2200      	movs	r2, #0
 8017418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801741c:	2300      	movs	r3, #0
}
 801741e:	4618      	mov	r0, r3
 8017420:	3714      	adds	r7, #20
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr

0801742a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 801742a:	b480      	push	{r7}
 801742c:	b085      	sub	sp, #20
 801742e:	af00      	add	r7, sp, #0
 8017430:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8017432:	2300      	movs	r3, #0
 8017434:	60fb      	str	r3, [r7, #12]
 8017436:	2300      	movs	r3, #0
 8017438:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017440:	b2db      	uxtb	r3, r3
 8017442:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801744a:	b2db      	uxtb	r3, r3
 801744c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	b2da      	uxtb	r2, r3
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	b2db      	uxtb	r3, r3
 8017456:	4313      	orrs	r3, r2
 8017458:	b2db      	uxtb	r3, r3
}
 801745a:	4618      	mov	r0, r3
 801745c:	3714      	adds	r7, #20
 801745e:	46bd      	mov	sp, r7
 8017460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017464:	4770      	bx	lr

08017466 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8017466:	b480      	push	{r7}
 8017468:	b083      	sub	sp, #12
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8017472:	4618      	mov	r0, r3
 8017474:	370c      	adds	r7, #12
 8017476:	46bd      	mov	sp, r7
 8017478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747c:	4770      	bx	lr

0801747e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801747e:	b580      	push	{r7, lr}
 8017480:	b090      	sub	sp, #64	; 0x40
 8017482:	af00      	add	r7, sp, #0
 8017484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801748a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017496:	2b00      	cmp	r3, #0
 8017498:	d137      	bne.n	801750a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801749c:	2200      	movs	r2, #0
 801749e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80174a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	3314      	adds	r3, #20
 80174a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174aa:	e853 3f00 	ldrex	r3, [r3]
 80174ae:	623b      	str	r3, [r7, #32]
   return(result);
 80174b0:	6a3b      	ldr	r3, [r7, #32]
 80174b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80174b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80174b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	3314      	adds	r3, #20
 80174be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80174c0:	633a      	str	r2, [r7, #48]	; 0x30
 80174c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174c8:	e841 2300 	strex	r3, r2, [r1]
 80174cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80174ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d1e5      	bne.n	80174a0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80174d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	330c      	adds	r3, #12
 80174da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	e853 3f00 	ldrex	r3, [r3]
 80174e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174ea:	637b      	str	r3, [r7, #52]	; 0x34
 80174ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	330c      	adds	r3, #12
 80174f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174f4:	61fa      	str	r2, [r7, #28]
 80174f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174f8:	69b9      	ldr	r1, [r7, #24]
 80174fa:	69fa      	ldr	r2, [r7, #28]
 80174fc:	e841 2300 	strex	r3, r2, [r1]
 8017500:	617b      	str	r3, [r7, #20]
   return(result);
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d1e5      	bne.n	80174d4 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017508:	e002      	b.n	8017510 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801750a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801750c:	f7ff fe1f 	bl	801714e <HAL_UART_TxCpltCallback>
}
 8017510:	bf00      	nop
 8017512:	3740      	adds	r7, #64	; 0x40
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}

08017518 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b084      	sub	sp, #16
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017524:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8017526:	68f8      	ldr	r0, [r7, #12]
 8017528:	f7ff fe1b 	bl	8017162 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801752c:	bf00      	nop
 801752e:	3710      	adds	r7, #16
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b09c      	sub	sp, #112	; 0x70
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017540:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801754c:	2b00      	cmp	r3, #0
 801754e:	d172      	bne.n	8017636 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8017550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017552:	2200      	movs	r2, #0
 8017554:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	330c      	adds	r3, #12
 801755c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801755e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017560:	e853 3f00 	ldrex	r3, [r3]
 8017564:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801756c:	66bb      	str	r3, [r7, #104]	; 0x68
 801756e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	330c      	adds	r3, #12
 8017574:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017576:	65ba      	str	r2, [r7, #88]	; 0x58
 8017578:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801757a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801757c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801757e:	e841 2300 	strex	r3, r2, [r1]
 8017582:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017586:	2b00      	cmp	r3, #0
 8017588:	d1e5      	bne.n	8017556 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801758a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	3314      	adds	r3, #20
 8017590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017594:	e853 3f00 	ldrex	r3, [r3]
 8017598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801759c:	f023 0301 	bic.w	r3, r3, #1
 80175a0:	667b      	str	r3, [r7, #100]	; 0x64
 80175a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	3314      	adds	r3, #20
 80175a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80175aa:	647a      	str	r2, [r7, #68]	; 0x44
 80175ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80175b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80175b2:	e841 2300 	strex	r3, r2, [r1]
 80175b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80175b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d1e5      	bne.n	801758a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80175be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	3314      	adds	r3, #20
 80175c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c8:	e853 3f00 	ldrex	r3, [r3]
 80175cc:	623b      	str	r3, [r7, #32]
   return(result);
 80175ce:	6a3b      	ldr	r3, [r7, #32]
 80175d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80175d4:	663b      	str	r3, [r7, #96]	; 0x60
 80175d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	3314      	adds	r3, #20
 80175dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80175de:	633a      	str	r2, [r7, #48]	; 0x30
 80175e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175e6:	e841 2300 	strex	r3, r2, [r1]
 80175ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80175ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d1e5      	bne.n	80175be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80175f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175f4:	2220      	movs	r2, #32
 80175f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80175fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175fe:	2b01      	cmp	r3, #1
 8017600:	d119      	bne.n	8017636 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	330c      	adds	r3, #12
 8017608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801760a:	693b      	ldr	r3, [r7, #16]
 801760c:	e853 3f00 	ldrex	r3, [r3]
 8017610:	60fb      	str	r3, [r7, #12]
   return(result);
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	f023 0310 	bic.w	r3, r3, #16
 8017618:	65fb      	str	r3, [r7, #92]	; 0x5c
 801761a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	330c      	adds	r3, #12
 8017620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017622:	61fa      	str	r2, [r7, #28]
 8017624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017626:	69b9      	ldr	r1, [r7, #24]
 8017628:	69fa      	ldr	r2, [r7, #28]
 801762a:	e841 2300 	strex	r3, r2, [r1]
 801762e:	617b      	str	r3, [r7, #20]
   return(result);
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d1e5      	bne.n	8017602 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801763a:	2b01      	cmp	r3, #1
 801763c:	d106      	bne.n	801764c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801763e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017642:	4619      	mov	r1, r3
 8017644:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017646:	f7ff fdc8 	bl	80171da <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801764a:	e002      	b.n	8017652 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801764c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801764e:	f7ea f95b 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8017652:	bf00      	nop
 8017654:	3770      	adds	r7, #112	; 0x70
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}

0801765a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801765a:	b580      	push	{r7, lr}
 801765c:	b084      	sub	sp, #16
 801765e:	af00      	add	r7, sp, #0
 8017660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017666:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801766c:	2b01      	cmp	r3, #1
 801766e:	d108      	bne.n	8017682 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017674:	085b      	lsrs	r3, r3, #1
 8017676:	b29b      	uxth	r3, r3
 8017678:	4619      	mov	r1, r3
 801767a:	68f8      	ldr	r0, [r7, #12]
 801767c:	f7ff fdad 	bl	80171da <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017680:	e002      	b.n	8017688 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	f7ff fd77 	bl	8017176 <HAL_UART_RxHalfCpltCallback>
}
 8017688:	bf00      	nop
 801768a:	3710      	adds	r7, #16
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b084      	sub	sp, #16
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8017698:	2300      	movs	r3, #0
 801769a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	695b      	ldr	r3, [r3, #20]
 80176a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176ac:	2b80      	cmp	r3, #128	; 0x80
 80176ae:	bf0c      	ite	eq
 80176b0:	2301      	moveq	r3, #1
 80176b2:	2300      	movne	r3, #0
 80176b4:	b2db      	uxtb	r3, r3
 80176b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80176b8:	68bb      	ldr	r3, [r7, #8]
 80176ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80176be:	b2db      	uxtb	r3, r3
 80176c0:	2b21      	cmp	r3, #33	; 0x21
 80176c2:	d108      	bne.n	80176d6 <UART_DMAError+0x46>
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d005      	beq.n	80176d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	2200      	movs	r2, #0
 80176ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80176d0:	68b8      	ldr	r0, [r7, #8]
 80176d2:	f000 f969 	bl	80179a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	695b      	ldr	r3, [r3, #20]
 80176dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176e0:	2b40      	cmp	r3, #64	; 0x40
 80176e2:	bf0c      	ite	eq
 80176e4:	2301      	moveq	r3, #1
 80176e6:	2300      	movne	r3, #0
 80176e8:	b2db      	uxtb	r3, r3
 80176ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	2b22      	cmp	r3, #34	; 0x22
 80176f6:	d108      	bne.n	801770a <UART_DMAError+0x7a>
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d005      	beq.n	801770a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	2200      	movs	r2, #0
 8017702:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8017704:	68b8      	ldr	r0, [r7, #8]
 8017706:	f000 f977 	bl	80179f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801770e:	f043 0210 	orr.w	r2, r3, #16
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017716:	68b8      	ldr	r0, [r7, #8]
 8017718:	f7ff fd37 	bl	801718a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801771c:	bf00      	nop
 801771e:	3710      	adds	r7, #16
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}

08017724 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b090      	sub	sp, #64	; 0x40
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	60b9      	str	r1, [r7, #8]
 801772e:	603b      	str	r3, [r7, #0]
 8017730:	4613      	mov	r3, r2
 8017732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017734:	e050      	b.n	80177d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801773c:	d04c      	beq.n	80177d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801773e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017740:	2b00      	cmp	r3, #0
 8017742:	d007      	beq.n	8017754 <UART_WaitOnFlagUntilTimeout+0x30>
 8017744:	f7ef f872 	bl	800682c <HAL_GetTick>
 8017748:	4602      	mov	r2, r0
 801774a:	683b      	ldr	r3, [r7, #0]
 801774c:	1ad3      	subs	r3, r2, r3
 801774e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017750:	429a      	cmp	r2, r3
 8017752:	d241      	bcs.n	80177d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	330c      	adds	r3, #12
 801775a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801775e:	e853 3f00 	ldrex	r3, [r3]
 8017762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017766:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801776a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	330c      	adds	r3, #12
 8017772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017774:	637a      	str	r2, [r7, #52]	; 0x34
 8017776:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801777a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801777c:	e841 2300 	strex	r3, r2, [r1]
 8017780:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017784:	2b00      	cmp	r3, #0
 8017786:	d1e5      	bne.n	8017754 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	3314      	adds	r3, #20
 801778e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017790:	697b      	ldr	r3, [r7, #20]
 8017792:	e853 3f00 	ldrex	r3, [r3]
 8017796:	613b      	str	r3, [r7, #16]
   return(result);
 8017798:	693b      	ldr	r3, [r7, #16]
 801779a:	f023 0301 	bic.w	r3, r3, #1
 801779e:	63bb      	str	r3, [r7, #56]	; 0x38
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	3314      	adds	r3, #20
 80177a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80177a8:	623a      	str	r2, [r7, #32]
 80177aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177ac:	69f9      	ldr	r1, [r7, #28]
 80177ae:	6a3a      	ldr	r2, [r7, #32]
 80177b0:	e841 2300 	strex	r3, r2, [r1]
 80177b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d1e5      	bne.n	8017788 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	2220      	movs	r2, #32
 80177c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2220      	movs	r2, #32
 80177c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	2200      	movs	r2, #0
 80177d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80177d4:	2303      	movs	r3, #3
 80177d6:	e00f      	b.n	80177f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	681a      	ldr	r2, [r3, #0]
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	4013      	ands	r3, r2
 80177e2:	68ba      	ldr	r2, [r7, #8]
 80177e4:	429a      	cmp	r2, r3
 80177e6:	bf0c      	ite	eq
 80177e8:	2301      	moveq	r3, #1
 80177ea:	2300      	movne	r3, #0
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	461a      	mov	r2, r3
 80177f0:	79fb      	ldrb	r3, [r7, #7]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d09f      	beq.n	8017736 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80177f6:	2300      	movs	r3, #0
}
 80177f8:	4618      	mov	r0, r3
 80177fa:	3740      	adds	r7, #64	; 0x40
 80177fc:	46bd      	mov	sp, r7
 80177fe:	bd80      	pop	{r7, pc}

08017800 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017800:	b480      	push	{r7}
 8017802:	b085      	sub	sp, #20
 8017804:	af00      	add	r7, sp, #0
 8017806:	60f8      	str	r0, [r7, #12]
 8017808:	60b9      	str	r1, [r7, #8]
 801780a:	4613      	mov	r3, r2
 801780c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	68ba      	ldr	r2, [r7, #8]
 8017812:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	88fa      	ldrh	r2, [r7, #6]
 8017818:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	88fa      	ldrh	r2, [r7, #6]
 801781e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	2200      	movs	r2, #0
 8017824:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	2222      	movs	r2, #34	; 0x22
 801782a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	2200      	movs	r2, #0
 8017832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	68da      	ldr	r2, [r3, #12]
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017844:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	695a      	ldr	r2, [r3, #20]
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	f042 0201 	orr.w	r2, r2, #1
 8017854:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	68da      	ldr	r2, [r3, #12]
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	f042 0220 	orr.w	r2, r2, #32
 8017864:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017866:	2300      	movs	r3, #0
}
 8017868:	4618      	mov	r0, r3
 801786a:	3714      	adds	r7, #20
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr

08017874 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b098      	sub	sp, #96	; 0x60
 8017878:	af00      	add	r7, sp, #0
 801787a:	60f8      	str	r0, [r7, #12]
 801787c:	60b9      	str	r1, [r7, #8]
 801787e:	4613      	mov	r3, r2
 8017880:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8017882:	68ba      	ldr	r2, [r7, #8]
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	88fa      	ldrh	r2, [r7, #6]
 801788c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	2200      	movs	r2, #0
 8017892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	2222      	movs	r2, #34	; 0x22
 8017898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178a0:	4a3e      	ldr	r2, [pc, #248]	; (801799c <UART_Start_Receive_DMA+0x128>)
 80178a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178a8:	4a3d      	ldr	r2, [pc, #244]	; (80179a0 <UART_Start_Receive_DMA+0x12c>)
 80178aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178b0:	4a3c      	ldr	r2, [pc, #240]	; (80179a4 <UART_Start_Receive_DMA+0x130>)
 80178b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178b8:	2200      	movs	r2, #0
 80178ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80178bc:	f107 0308 	add.w	r3, r7, #8
 80178c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	3304      	adds	r3, #4
 80178cc:	4619      	mov	r1, r3
 80178ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80178d0:	681a      	ldr	r2, [r3, #0]
 80178d2:	88fb      	ldrh	r3, [r7, #6]
 80178d4:	f7f0 fa13 	bl	8007cfe <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80178d8:	2300      	movs	r3, #0
 80178da:	613b      	str	r3, [r7, #16]
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	613b      	str	r3, [r7, #16]
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	613b      	str	r3, [r7, #16]
 80178ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	2200      	movs	r2, #0
 80178f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	330c      	adds	r3, #12
 80178fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017900:	e853 3f00 	ldrex	r3, [r3]
 8017904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801790c:	65bb      	str	r3, [r7, #88]	; 0x58
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	330c      	adds	r3, #12
 8017914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017916:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017918:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801791a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801791c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801791e:	e841 2300 	strex	r3, r2, [r1]
 8017922:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1e5      	bne.n	80178f6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	3314      	adds	r3, #20
 8017930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017934:	e853 3f00 	ldrex	r3, [r3]
 8017938:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801793c:	f043 0301 	orr.w	r3, r3, #1
 8017940:	657b      	str	r3, [r7, #84]	; 0x54
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	3314      	adds	r3, #20
 8017948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801794a:	63ba      	str	r2, [r7, #56]	; 0x38
 801794c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801794e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017952:	e841 2300 	strex	r3, r2, [r1]
 8017956:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801795a:	2b00      	cmp	r3, #0
 801795c:	d1e5      	bne.n	801792a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	3314      	adds	r3, #20
 8017964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017966:	69bb      	ldr	r3, [r7, #24]
 8017968:	e853 3f00 	ldrex	r3, [r3]
 801796c:	617b      	str	r3, [r7, #20]
   return(result);
 801796e:	697b      	ldr	r3, [r7, #20]
 8017970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017974:	653b      	str	r3, [r7, #80]	; 0x50
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	3314      	adds	r3, #20
 801797c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801797e:	627a      	str	r2, [r7, #36]	; 0x24
 8017980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017982:	6a39      	ldr	r1, [r7, #32]
 8017984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017986:	e841 2300 	strex	r3, r2, [r1]
 801798a:	61fb      	str	r3, [r7, #28]
   return(result);
 801798c:	69fb      	ldr	r3, [r7, #28]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d1e5      	bne.n	801795e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8017992:	2300      	movs	r3, #0
}
 8017994:	4618      	mov	r0, r3
 8017996:	3760      	adds	r7, #96	; 0x60
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	08017535 	.word	0x08017535
 80179a0:	0801765b 	.word	0x0801765b
 80179a4:	08017691 	.word	0x08017691

080179a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80179a8:	b480      	push	{r7}
 80179aa:	b089      	sub	sp, #36	; 0x24
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	330c      	adds	r3, #12
 80179b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	e853 3f00 	ldrex	r3, [r3]
 80179be:	60bb      	str	r3, [r7, #8]
   return(result);
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80179c6:	61fb      	str	r3, [r7, #28]
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	330c      	adds	r3, #12
 80179ce:	69fa      	ldr	r2, [r7, #28]
 80179d0:	61ba      	str	r2, [r7, #24]
 80179d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179d4:	6979      	ldr	r1, [r7, #20]
 80179d6:	69ba      	ldr	r2, [r7, #24]
 80179d8:	e841 2300 	strex	r3, r2, [r1]
 80179dc:	613b      	str	r3, [r7, #16]
   return(result);
 80179de:	693b      	ldr	r3, [r7, #16]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d1e5      	bne.n	80179b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2220      	movs	r2, #32
 80179e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80179ec:	bf00      	nop
 80179ee:	3724      	adds	r7, #36	; 0x24
 80179f0:	46bd      	mov	sp, r7
 80179f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f6:	4770      	bx	lr

080179f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80179f8:	b480      	push	{r7}
 80179fa:	b095      	sub	sp, #84	; 0x54
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	330c      	adds	r3, #12
 8017a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a0a:	e853 3f00 	ldrex	r3, [r3]
 8017a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	330c      	adds	r3, #12
 8017a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a20:	643a      	str	r2, [r7, #64]	; 0x40
 8017a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017a28:	e841 2300 	strex	r3, r2, [r1]
 8017a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d1e5      	bne.n	8017a00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	3314      	adds	r3, #20
 8017a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	e853 3f00 	ldrex	r3, [r3]
 8017a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	f023 0301 	bic.w	r3, r3, #1
 8017a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	3314      	adds	r3, #20
 8017a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a5c:	e841 2300 	strex	r3, r2, [r1]
 8017a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d1e5      	bne.n	8017a34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	d119      	bne.n	8017aa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	330c      	adds	r3, #12
 8017a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	e853 3f00 	ldrex	r3, [r3]
 8017a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	f023 0310 	bic.w	r3, r3, #16
 8017a86:	647b      	str	r3, [r7, #68]	; 0x44
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	330c      	adds	r3, #12
 8017a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a90:	61ba      	str	r2, [r7, #24]
 8017a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a94:	6979      	ldr	r1, [r7, #20]
 8017a96:	69ba      	ldr	r2, [r7, #24]
 8017a98:	e841 2300 	strex	r3, r2, [r1]
 8017a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8017a9e:	693b      	ldr	r3, [r7, #16]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d1e5      	bne.n	8017a70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	2220      	movs	r2, #32
 8017aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2200      	movs	r2, #0
 8017ab0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017ab2:	bf00      	nop
 8017ab4:	3754      	adds	r7, #84	; 0x54
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abc:	4770      	bx	lr

08017abe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017abe:	b580      	push	{r7, lr}
 8017ac0:	b084      	sub	sp, #16
 8017ac2:	af00      	add	r7, sp, #0
 8017ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017aca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	2200      	movs	r2, #0
 8017ad0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017ad8:	68f8      	ldr	r0, [r7, #12]
 8017ada:	f7ff fb56 	bl	801718a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017ade:	bf00      	nop
 8017ae0:	3710      	adds	r7, #16
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}

08017ae6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017ae6:	b580      	push	{r7, lr}
 8017ae8:	b084      	sub	sp, #16
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017af2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017af8:	2200      	movs	r2, #0
 8017afa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d004      	beq.n	8017b0e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d117      	bne.n	8017b3e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	2200      	movs	r2, #0
 8017b12:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	2200      	movs	r2, #0
 8017b18:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	2220      	movs	r2, #32
 8017b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	2220      	movs	r2, #32
 8017b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	2200      	movs	r2, #0
 8017b34:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017b36:	68f8      	ldr	r0, [r7, #12]
 8017b38:	f7ff fb31 	bl	801719e <HAL_UART_AbortCpltCallback>
 8017b3c:	e000      	b.n	8017b40 <UART_DMATxAbortCallback+0x5a>
      return;
 8017b3e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b40:	3710      	adds	r7, #16
 8017b42:	46bd      	mov	sp, r7
 8017b44:	bd80      	pop	{r7, pc}

08017b46 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017b46:	b580      	push	{r7, lr}
 8017b48:	b084      	sub	sp, #16
 8017b4a:	af00      	add	r7, sp, #0
 8017b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b52:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b58:	2200      	movs	r2, #0
 8017b5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d004      	beq.n	8017b6e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d117      	bne.n	8017b9e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	2200      	movs	r2, #0
 8017b72:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	2200      	movs	r2, #0
 8017b78:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2220      	movs	r2, #32
 8017b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	2220      	movs	r2, #32
 8017b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2200      	movs	r2, #0
 8017b94:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017b96:	68f8      	ldr	r0, [r7, #12]
 8017b98:	f7ff fb01 	bl	801719e <HAL_UART_AbortCpltCallback>
 8017b9c:	e000      	b.n	8017ba0 <UART_DMARxAbortCallback+0x5a>
      return;
 8017b9e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017ba0:	3710      	adds	r7, #16
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	bd80      	pop	{r7, pc}

08017ba6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017ba6:	b580      	push	{r7, lr}
 8017ba8:	b084      	sub	sp, #16
 8017baa:	af00      	add	r7, sp, #0
 8017bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bb2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	2220      	movs	r2, #32
 8017bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8017bc2:	68f8      	ldr	r0, [r7, #12]
 8017bc4:	f7ff faf5 	bl	80171b2 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017bc8:	bf00      	nop
 8017bca:	3710      	adds	r7, #16
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}

08017bd0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b084      	sub	sp, #16
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bdc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	2200      	movs	r2, #0
 8017be2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	2220      	movs	r2, #32
 8017be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8017bf2:	68f8      	ldr	r0, [r7, #12]
 8017bf4:	f7ff fae7 	bl	80171c6 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017bf8:	bf00      	nop
 8017bfa:	3710      	adds	r7, #16
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017c00:	b480      	push	{r7}
 8017c02:	b085      	sub	sp, #20
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017c0e:	b2db      	uxtb	r3, r3
 8017c10:	2b21      	cmp	r3, #33	; 0x21
 8017c12:	d13e      	bne.n	8017c92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	689b      	ldr	r3, [r3, #8]
 8017c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c1c:	d114      	bne.n	8017c48 <UART_Transmit_IT+0x48>
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	691b      	ldr	r3, [r3, #16]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d110      	bne.n	8017c48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	6a1b      	ldr	r3, [r3, #32]
 8017c2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	881b      	ldrh	r3, [r3, #0]
 8017c30:	461a      	mov	r2, r3
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017c3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	6a1b      	ldr	r3, [r3, #32]
 8017c40:	1c9a      	adds	r2, r3, #2
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	621a      	str	r2, [r3, #32]
 8017c46:	e008      	b.n	8017c5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6a1b      	ldr	r3, [r3, #32]
 8017c4c:	1c59      	adds	r1, r3, #1
 8017c4e:	687a      	ldr	r2, [r7, #4]
 8017c50:	6211      	str	r1, [r2, #32]
 8017c52:	781a      	ldrb	r2, [r3, #0]
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017c5e:	b29b      	uxth	r3, r3
 8017c60:	3b01      	subs	r3, #1
 8017c62:	b29b      	uxth	r3, r3
 8017c64:	687a      	ldr	r2, [r7, #4]
 8017c66:	4619      	mov	r1, r3
 8017c68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d10f      	bne.n	8017c8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	68da      	ldr	r2, [r3, #12]
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017c7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	68da      	ldr	r2, [r3, #12]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017c8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	e000      	b.n	8017c94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017c92:	2302      	movs	r3, #2
  }
}
 8017c94:	4618      	mov	r0, r3
 8017c96:	3714      	adds	r7, #20
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9e:	4770      	bx	lr

08017ca0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b082      	sub	sp, #8
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	68da      	ldr	r2, [r3, #12]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017cb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	2220      	movs	r2, #32
 8017cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f7ff fa44 	bl	801714e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017cc6:	2300      	movs	r3, #0
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3708      	adds	r7, #8
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}

08017cd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b08c      	sub	sp, #48	; 0x30
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017cde:	b2db      	uxtb	r3, r3
 8017ce0:	2b22      	cmp	r3, #34	; 0x22
 8017ce2:	f040 80ab 	bne.w	8017e3c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	689b      	ldr	r3, [r3, #8]
 8017cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017cee:	d117      	bne.n	8017d20 <UART_Receive_IT+0x50>
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	691b      	ldr	r3, [r3, #16]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d113      	bne.n	8017d20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d00:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d0e:	b29a      	uxth	r2, r3
 8017d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d18:	1c9a      	adds	r2, r3, #2
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8017d1e:	e026      	b.n	8017d6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017d26:	2300      	movs	r3, #0
 8017d28:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	689b      	ldr	r3, [r3, #8]
 8017d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d32:	d007      	beq.n	8017d44 <UART_Receive_IT+0x74>
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	689b      	ldr	r3, [r3, #8]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d10a      	bne.n	8017d52 <UART_Receive_IT+0x82>
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	691b      	ldr	r3, [r3, #16]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d106      	bne.n	8017d52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	b2da      	uxtb	r2, r3
 8017d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d4e:	701a      	strb	r2, [r3, #0]
 8017d50:	e008      	b.n	8017d64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	b2db      	uxtb	r3, r3
 8017d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d5e:	b2da      	uxtb	r2, r3
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d68:	1c5a      	adds	r2, r3, #1
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	3b01      	subs	r3, #1
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	687a      	ldr	r2, [r7, #4]
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d15a      	bne.n	8017e38 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	68da      	ldr	r2, [r3, #12]
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	f022 0220 	bic.w	r2, r2, #32
 8017d90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	68da      	ldr	r2, [r3, #12]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	695a      	ldr	r2, [r3, #20]
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	f022 0201 	bic.w	r2, r2, #1
 8017db0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2220      	movs	r2, #32
 8017db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dbe:	2b01      	cmp	r3, #1
 8017dc0:	d135      	bne.n	8017e2e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	330c      	adds	r3, #12
 8017dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dd0:	697b      	ldr	r3, [r7, #20]
 8017dd2:	e853 3f00 	ldrex	r3, [r3]
 8017dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8017dd8:	693b      	ldr	r3, [r7, #16]
 8017dda:	f023 0310 	bic.w	r3, r3, #16
 8017dde:	627b      	str	r3, [r7, #36]	; 0x24
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	330c      	adds	r3, #12
 8017de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017de8:	623a      	str	r2, [r7, #32]
 8017dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dec:	69f9      	ldr	r1, [r7, #28]
 8017dee:	6a3a      	ldr	r2, [r7, #32]
 8017df0:	e841 2300 	strex	r3, r2, [r1]
 8017df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8017df6:	69bb      	ldr	r3, [r7, #24]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d1e5      	bne.n	8017dc8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	f003 0310 	and.w	r3, r3, #16
 8017e06:	2b10      	cmp	r3, #16
 8017e08:	d10a      	bne.n	8017e20 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	60fb      	str	r3, [r7, #12]
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	60fb      	str	r3, [r7, #12]
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	685b      	ldr	r3, [r3, #4]
 8017e1c:	60fb      	str	r3, [r7, #12]
 8017e1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017e24:	4619      	mov	r1, r3
 8017e26:	6878      	ldr	r0, [r7, #4]
 8017e28:	f7ff f9d7 	bl	80171da <HAL_UARTEx_RxEventCallback>
 8017e2c:	e002      	b.n	8017e34 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	f7e9 fd6a 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8017e34:	2300      	movs	r3, #0
 8017e36:	e002      	b.n	8017e3e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8017e38:	2300      	movs	r3, #0
 8017e3a:	e000      	b.n	8017e3e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8017e3c:	2302      	movs	r3, #2
  }
}
 8017e3e:	4618      	mov	r0, r3
 8017e40:	3730      	adds	r7, #48	; 0x30
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}

08017e46 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017e46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017e4a:	b0c0      	sub	sp, #256	; 0x100
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	691b      	ldr	r3, [r3, #16]
 8017e5a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e62:	68d9      	ldr	r1, [r3, #12]
 8017e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e68:	681a      	ldr	r2, [r3, #0]
 8017e6a:	ea40 0301 	orr.w	r3, r0, r1
 8017e6e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e74:	689a      	ldr	r2, [r3, #8]
 8017e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e7a:	691b      	ldr	r3, [r3, #16]
 8017e7c:	431a      	orrs	r2, r3
 8017e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e82:	695b      	ldr	r3, [r3, #20]
 8017e84:	431a      	orrs	r2, r3
 8017e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e8a:	69db      	ldr	r3, [r3, #28]
 8017e8c:	4313      	orrs	r3, r2
 8017e8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8017e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	68db      	ldr	r3, [r3, #12]
 8017e9a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8017e9e:	f021 010c 	bic.w	r1, r1, #12
 8017ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017eac:	430b      	orrs	r3, r1
 8017eae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8017eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	695b      	ldr	r3, [r3, #20]
 8017eb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8017ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ec0:	6999      	ldr	r1, [r3, #24]
 8017ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ec6:	681a      	ldr	r2, [r3, #0]
 8017ec8:	ea40 0301 	orr.w	r3, r0, r1
 8017ecc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ed2:	681a      	ldr	r2, [r3, #0]
 8017ed4:	4b8e      	ldr	r3, [pc, #568]	; (8018110 <UART_SetConfig+0x2ca>)
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d005      	beq.n	8017ee6 <UART_SetConfig+0xa0>
 8017eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	4b8c      	ldr	r3, [pc, #560]	; (8018114 <UART_SetConfig+0x2ce>)
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	d104      	bne.n	8017ef0 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8017ee6:	f7fa fa11 	bl	801230c <HAL_RCC_GetPCLK2Freq>
 8017eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8017eee:	e003      	b.n	8017ef8 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017ef0:	f7fa f9f8 	bl	80122e4 <HAL_RCC_GetPCLK1Freq>
 8017ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017efc:	69db      	ldr	r3, [r3, #28]
 8017efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017f02:	f040 810b 	bne.w	801811c <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8017f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017f10:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017f14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8017f18:	4622      	mov	r2, r4
 8017f1a:	462b      	mov	r3, r5
 8017f1c:	1891      	adds	r1, r2, r2
 8017f1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8017f20:	415b      	adcs	r3, r3
 8017f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017f24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017f28:	4621      	mov	r1, r4
 8017f2a:	eb12 0801 	adds.w	r8, r2, r1
 8017f2e:	4629      	mov	r1, r5
 8017f30:	eb43 0901 	adc.w	r9, r3, r1
 8017f34:	f04f 0200 	mov.w	r2, #0
 8017f38:	f04f 0300 	mov.w	r3, #0
 8017f3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017f40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017f44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017f48:	4690      	mov	r8, r2
 8017f4a:	4699      	mov	r9, r3
 8017f4c:	4623      	mov	r3, r4
 8017f4e:	eb18 0303 	adds.w	r3, r8, r3
 8017f52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017f56:	462b      	mov	r3, r5
 8017f58:	eb49 0303 	adc.w	r3, r9, r3
 8017f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f64:	685b      	ldr	r3, [r3, #4]
 8017f66:	2200      	movs	r2, #0
 8017f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017f6c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8017f70:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8017f74:	460b      	mov	r3, r1
 8017f76:	18db      	adds	r3, r3, r3
 8017f78:	653b      	str	r3, [r7, #80]	; 0x50
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	eb42 0303 	adc.w	r3, r2, r3
 8017f80:	657b      	str	r3, [r7, #84]	; 0x54
 8017f82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8017f86:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017f8a:	f001 fabb 	bl	8019504 <__aeabi_uldivmod>
 8017f8e:	4602      	mov	r2, r0
 8017f90:	460b      	mov	r3, r1
 8017f92:	4b61      	ldr	r3, [pc, #388]	; (8018118 <UART_SetConfig+0x2d2>)
 8017f94:	fba3 2302 	umull	r2, r3, r3, r2
 8017f98:	095b      	lsrs	r3, r3, #5
 8017f9a:	011c      	lsls	r4, r3, #4
 8017f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017fa6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8017faa:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8017fae:	4642      	mov	r2, r8
 8017fb0:	464b      	mov	r3, r9
 8017fb2:	1891      	adds	r1, r2, r2
 8017fb4:	64b9      	str	r1, [r7, #72]	; 0x48
 8017fb6:	415b      	adcs	r3, r3
 8017fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017fba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017fbe:	4641      	mov	r1, r8
 8017fc0:	eb12 0a01 	adds.w	sl, r2, r1
 8017fc4:	4649      	mov	r1, r9
 8017fc6:	eb43 0b01 	adc.w	fp, r3, r1
 8017fca:	f04f 0200 	mov.w	r2, #0
 8017fce:	f04f 0300 	mov.w	r3, #0
 8017fd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017fd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8017fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8017fde:	4692      	mov	sl, r2
 8017fe0:	469b      	mov	fp, r3
 8017fe2:	4643      	mov	r3, r8
 8017fe4:	eb1a 0303 	adds.w	r3, sl, r3
 8017fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017fec:	464b      	mov	r3, r9
 8017fee:	eb4b 0303 	adc.w	r3, fp, r3
 8017ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ffa:	685b      	ldr	r3, [r3, #4]
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018002:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018006:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801800a:	460b      	mov	r3, r1
 801800c:	18db      	adds	r3, r3, r3
 801800e:	643b      	str	r3, [r7, #64]	; 0x40
 8018010:	4613      	mov	r3, r2
 8018012:	eb42 0303 	adc.w	r3, r2, r3
 8018016:	647b      	str	r3, [r7, #68]	; 0x44
 8018018:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801801c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018020:	f001 fa70 	bl	8019504 <__aeabi_uldivmod>
 8018024:	4602      	mov	r2, r0
 8018026:	460b      	mov	r3, r1
 8018028:	4611      	mov	r1, r2
 801802a:	4b3b      	ldr	r3, [pc, #236]	; (8018118 <UART_SetConfig+0x2d2>)
 801802c:	fba3 2301 	umull	r2, r3, r3, r1
 8018030:	095b      	lsrs	r3, r3, #5
 8018032:	2264      	movs	r2, #100	; 0x64
 8018034:	fb02 f303 	mul.w	r3, r2, r3
 8018038:	1acb      	subs	r3, r1, r3
 801803a:	00db      	lsls	r3, r3, #3
 801803c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8018040:	4b35      	ldr	r3, [pc, #212]	; (8018118 <UART_SetConfig+0x2d2>)
 8018042:	fba3 2302 	umull	r2, r3, r3, r2
 8018046:	095b      	lsrs	r3, r3, #5
 8018048:	005b      	lsls	r3, r3, #1
 801804a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801804e:	441c      	add	r4, r3
 8018050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018054:	2200      	movs	r2, #0
 8018056:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801805a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801805e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8018062:	4642      	mov	r2, r8
 8018064:	464b      	mov	r3, r9
 8018066:	1891      	adds	r1, r2, r2
 8018068:	63b9      	str	r1, [r7, #56]	; 0x38
 801806a:	415b      	adcs	r3, r3
 801806c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801806e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018072:	4641      	mov	r1, r8
 8018074:	1851      	adds	r1, r2, r1
 8018076:	6339      	str	r1, [r7, #48]	; 0x30
 8018078:	4649      	mov	r1, r9
 801807a:	414b      	adcs	r3, r1
 801807c:	637b      	str	r3, [r7, #52]	; 0x34
 801807e:	f04f 0200 	mov.w	r2, #0
 8018082:	f04f 0300 	mov.w	r3, #0
 8018086:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801808a:	4659      	mov	r1, fp
 801808c:	00cb      	lsls	r3, r1, #3
 801808e:	4651      	mov	r1, sl
 8018090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018094:	4651      	mov	r1, sl
 8018096:	00ca      	lsls	r2, r1, #3
 8018098:	4610      	mov	r0, r2
 801809a:	4619      	mov	r1, r3
 801809c:	4603      	mov	r3, r0
 801809e:	4642      	mov	r2, r8
 80180a0:	189b      	adds	r3, r3, r2
 80180a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80180a6:	464b      	mov	r3, r9
 80180a8:	460a      	mov	r2, r1
 80180aa:	eb42 0303 	adc.w	r3, r2, r3
 80180ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80180b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180b6:	685b      	ldr	r3, [r3, #4]
 80180b8:	2200      	movs	r2, #0
 80180ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80180be:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80180c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80180c6:	460b      	mov	r3, r1
 80180c8:	18db      	adds	r3, r3, r3
 80180ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80180cc:	4613      	mov	r3, r2
 80180ce:	eb42 0303 	adc.w	r3, r2, r3
 80180d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80180d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80180dc:	f001 fa12 	bl	8019504 <__aeabi_uldivmod>
 80180e0:	4602      	mov	r2, r0
 80180e2:	460b      	mov	r3, r1
 80180e4:	4b0c      	ldr	r3, [pc, #48]	; (8018118 <UART_SetConfig+0x2d2>)
 80180e6:	fba3 1302 	umull	r1, r3, r3, r2
 80180ea:	095b      	lsrs	r3, r3, #5
 80180ec:	2164      	movs	r1, #100	; 0x64
 80180ee:	fb01 f303 	mul.w	r3, r1, r3
 80180f2:	1ad3      	subs	r3, r2, r3
 80180f4:	00db      	lsls	r3, r3, #3
 80180f6:	3332      	adds	r3, #50	; 0x32
 80180f8:	4a07      	ldr	r2, [pc, #28]	; (8018118 <UART_SetConfig+0x2d2>)
 80180fa:	fba2 2303 	umull	r2, r3, r2, r3
 80180fe:	095b      	lsrs	r3, r3, #5
 8018100:	f003 0207 	and.w	r2, r3, #7
 8018104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	4422      	add	r2, r4
 801810c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801810e:	e104      	b.n	801831a <UART_SetConfig+0x4d4>
 8018110:	40011000 	.word	0x40011000
 8018114:	40011400 	.word	0x40011400
 8018118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801811c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018120:	2200      	movs	r2, #0
 8018122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018126:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801812a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801812e:	4642      	mov	r2, r8
 8018130:	464b      	mov	r3, r9
 8018132:	1891      	adds	r1, r2, r2
 8018134:	6239      	str	r1, [r7, #32]
 8018136:	415b      	adcs	r3, r3
 8018138:	627b      	str	r3, [r7, #36]	; 0x24
 801813a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801813e:	4641      	mov	r1, r8
 8018140:	1854      	adds	r4, r2, r1
 8018142:	4649      	mov	r1, r9
 8018144:	eb43 0501 	adc.w	r5, r3, r1
 8018148:	f04f 0200 	mov.w	r2, #0
 801814c:	f04f 0300 	mov.w	r3, #0
 8018150:	00eb      	lsls	r3, r5, #3
 8018152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018156:	00e2      	lsls	r2, r4, #3
 8018158:	4614      	mov	r4, r2
 801815a:	461d      	mov	r5, r3
 801815c:	4643      	mov	r3, r8
 801815e:	18e3      	adds	r3, r4, r3
 8018160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018164:	464b      	mov	r3, r9
 8018166:	eb45 0303 	adc.w	r3, r5, r3
 801816a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	2200      	movs	r2, #0
 8018176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801817a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801817e:	f04f 0200 	mov.w	r2, #0
 8018182:	f04f 0300 	mov.w	r3, #0
 8018186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801818a:	4629      	mov	r1, r5
 801818c:	008b      	lsls	r3, r1, #2
 801818e:	4621      	mov	r1, r4
 8018190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018194:	4621      	mov	r1, r4
 8018196:	008a      	lsls	r2, r1, #2
 8018198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801819c:	f001 f9b2 	bl	8019504 <__aeabi_uldivmod>
 80181a0:	4602      	mov	r2, r0
 80181a2:	460b      	mov	r3, r1
 80181a4:	4b60      	ldr	r3, [pc, #384]	; (8018328 <UART_SetConfig+0x4e2>)
 80181a6:	fba3 2302 	umull	r2, r3, r3, r2
 80181aa:	095b      	lsrs	r3, r3, #5
 80181ac:	011c      	lsls	r4, r3, #4
 80181ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80181b2:	2200      	movs	r2, #0
 80181b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80181b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80181bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80181c0:	4642      	mov	r2, r8
 80181c2:	464b      	mov	r3, r9
 80181c4:	1891      	adds	r1, r2, r2
 80181c6:	61b9      	str	r1, [r7, #24]
 80181c8:	415b      	adcs	r3, r3
 80181ca:	61fb      	str	r3, [r7, #28]
 80181cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80181d0:	4641      	mov	r1, r8
 80181d2:	1851      	adds	r1, r2, r1
 80181d4:	6139      	str	r1, [r7, #16]
 80181d6:	4649      	mov	r1, r9
 80181d8:	414b      	adcs	r3, r1
 80181da:	617b      	str	r3, [r7, #20]
 80181dc:	f04f 0200 	mov.w	r2, #0
 80181e0:	f04f 0300 	mov.w	r3, #0
 80181e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80181e8:	4659      	mov	r1, fp
 80181ea:	00cb      	lsls	r3, r1, #3
 80181ec:	4651      	mov	r1, sl
 80181ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80181f2:	4651      	mov	r1, sl
 80181f4:	00ca      	lsls	r2, r1, #3
 80181f6:	4610      	mov	r0, r2
 80181f8:	4619      	mov	r1, r3
 80181fa:	4603      	mov	r3, r0
 80181fc:	4642      	mov	r2, r8
 80181fe:	189b      	adds	r3, r3, r2
 8018200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018204:	464b      	mov	r3, r9
 8018206:	460a      	mov	r2, r1
 8018208:	eb42 0303 	adc.w	r3, r2, r3
 801820c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	2200      	movs	r2, #0
 8018218:	67bb      	str	r3, [r7, #120]	; 0x78
 801821a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801821c:	f04f 0200 	mov.w	r2, #0
 8018220:	f04f 0300 	mov.w	r3, #0
 8018224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018228:	4649      	mov	r1, r9
 801822a:	008b      	lsls	r3, r1, #2
 801822c:	4641      	mov	r1, r8
 801822e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018232:	4641      	mov	r1, r8
 8018234:	008a      	lsls	r2, r1, #2
 8018236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801823a:	f001 f963 	bl	8019504 <__aeabi_uldivmod>
 801823e:	4602      	mov	r2, r0
 8018240:	460b      	mov	r3, r1
 8018242:	4b39      	ldr	r3, [pc, #228]	; (8018328 <UART_SetConfig+0x4e2>)
 8018244:	fba3 1302 	umull	r1, r3, r3, r2
 8018248:	095b      	lsrs	r3, r3, #5
 801824a:	2164      	movs	r1, #100	; 0x64
 801824c:	fb01 f303 	mul.w	r3, r1, r3
 8018250:	1ad3      	subs	r3, r2, r3
 8018252:	011b      	lsls	r3, r3, #4
 8018254:	3332      	adds	r3, #50	; 0x32
 8018256:	4a34      	ldr	r2, [pc, #208]	; (8018328 <UART_SetConfig+0x4e2>)
 8018258:	fba2 2303 	umull	r2, r3, r2, r3
 801825c:	095b      	lsrs	r3, r3, #5
 801825e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018262:	441c      	add	r4, r3
 8018264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018268:	2200      	movs	r2, #0
 801826a:	673b      	str	r3, [r7, #112]	; 0x70
 801826c:	677a      	str	r2, [r7, #116]	; 0x74
 801826e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8018272:	4642      	mov	r2, r8
 8018274:	464b      	mov	r3, r9
 8018276:	1891      	adds	r1, r2, r2
 8018278:	60b9      	str	r1, [r7, #8]
 801827a:	415b      	adcs	r3, r3
 801827c:	60fb      	str	r3, [r7, #12]
 801827e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018282:	4641      	mov	r1, r8
 8018284:	1851      	adds	r1, r2, r1
 8018286:	6039      	str	r1, [r7, #0]
 8018288:	4649      	mov	r1, r9
 801828a:	414b      	adcs	r3, r1
 801828c:	607b      	str	r3, [r7, #4]
 801828e:	f04f 0200 	mov.w	r2, #0
 8018292:	f04f 0300 	mov.w	r3, #0
 8018296:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801829a:	4659      	mov	r1, fp
 801829c:	00cb      	lsls	r3, r1, #3
 801829e:	4651      	mov	r1, sl
 80182a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80182a4:	4651      	mov	r1, sl
 80182a6:	00ca      	lsls	r2, r1, #3
 80182a8:	4610      	mov	r0, r2
 80182aa:	4619      	mov	r1, r3
 80182ac:	4603      	mov	r3, r0
 80182ae:	4642      	mov	r2, r8
 80182b0:	189b      	adds	r3, r3, r2
 80182b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80182b4:	464b      	mov	r3, r9
 80182b6:	460a      	mov	r2, r1
 80182b8:	eb42 0303 	adc.w	r3, r2, r3
 80182bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80182be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182c2:	685b      	ldr	r3, [r3, #4]
 80182c4:	2200      	movs	r2, #0
 80182c6:	663b      	str	r3, [r7, #96]	; 0x60
 80182c8:	667a      	str	r2, [r7, #100]	; 0x64
 80182ca:	f04f 0200 	mov.w	r2, #0
 80182ce:	f04f 0300 	mov.w	r3, #0
 80182d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80182d6:	4649      	mov	r1, r9
 80182d8:	008b      	lsls	r3, r1, #2
 80182da:	4641      	mov	r1, r8
 80182dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80182e0:	4641      	mov	r1, r8
 80182e2:	008a      	lsls	r2, r1, #2
 80182e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80182e8:	f001 f90c 	bl	8019504 <__aeabi_uldivmod>
 80182ec:	4602      	mov	r2, r0
 80182ee:	460b      	mov	r3, r1
 80182f0:	4b0d      	ldr	r3, [pc, #52]	; (8018328 <UART_SetConfig+0x4e2>)
 80182f2:	fba3 1302 	umull	r1, r3, r3, r2
 80182f6:	095b      	lsrs	r3, r3, #5
 80182f8:	2164      	movs	r1, #100	; 0x64
 80182fa:	fb01 f303 	mul.w	r3, r1, r3
 80182fe:	1ad3      	subs	r3, r2, r3
 8018300:	011b      	lsls	r3, r3, #4
 8018302:	3332      	adds	r3, #50	; 0x32
 8018304:	4a08      	ldr	r2, [pc, #32]	; (8018328 <UART_SetConfig+0x4e2>)
 8018306:	fba2 2303 	umull	r2, r3, r2, r3
 801830a:	095b      	lsrs	r3, r3, #5
 801830c:	f003 020f 	and.w	r2, r3, #15
 8018310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	4422      	add	r2, r4
 8018318:	609a      	str	r2, [r3, #8]
}
 801831a:	bf00      	nop
 801831c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018320:	46bd      	mov	sp, r7
 8018322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018326:	bf00      	nop
 8018328:	51eb851f 	.word	0x51eb851f

0801832c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 801832c:	b480      	push	{r7}
 801832e:	b085      	sub	sp, #20
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018336:	2300      	movs	r3, #0
 8018338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018344:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8018346:	68fa      	ldr	r2, [r7, #12]
 8018348:	4b20      	ldr	r3, [pc, #128]	; (80183cc <FSMC_NORSRAM_Init+0xa0>)
 801834a:	4013      	ands	r3, r2
 801834c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018356:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 801835c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8018362:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8018368:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 801836e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8018374:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8018376:	683b      	ldr	r3, [r7, #0]
 8018378:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 801837a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8018380:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8018386:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 801838c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 801838e:	683b      	ldr	r3, [r7, #0]
 8018390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8018392:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8018398:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801839a:	68fa      	ldr	r2, [r7, #12]
 801839c:	4313      	orrs	r3, r2
 801839e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80183a0:	683b      	ldr	r3, [r7, #0]
 80183a2:	689b      	ldr	r3, [r3, #8]
 80183a4:	2b08      	cmp	r3, #8
 80183a6:	d103      	bne.n	80183b0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183ae:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	681a      	ldr	r2, [r3, #0]
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	68f9      	ldr	r1, [r7, #12]
 80183b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80183bc:	2300      	movs	r3, #0
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3714      	adds	r7, #20
 80183c2:	46bd      	mov	sp, r7
 80183c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c8:	4770      	bx	lr
 80183ca:	bf00      	nop
 80183cc:	fff00080 	.word	0xfff00080

080183d0 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 80183d0:	b480      	push	{r7}
 80183d2:	b085      	sub	sp, #20
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	60f8      	str	r0, [r7, #12]
 80183d8:	60b9      	str	r1, [r7, #8]
 80183da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	687a      	ldr	r2, [r7, #4]
 80183e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80183e4:	f023 0101 	bic.w	r1, r3, #1
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	687a      	ldr	r2, [r7, #4]
 80183ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d106      	bne.n	8018404 <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	687a      	ldr	r2, [r7, #4]
 80183fa:	f243 01db 	movw	r1, #12507	; 0x30db
 80183fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018402:	e005      	b.n	8018410 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	687a      	ldr	r2, [r7, #4]
 8018408:	f243 01d2 	movw	r1, #12498	; 0x30d2
 801840c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	1c5a      	adds	r2, r3, #1
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801841a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	687a      	ldr	r2, [r7, #4]
 8018422:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 801842a:	2300      	movs	r3, #0
}
 801842c:	4618      	mov	r0, r3
 801842e:	3714      	adds	r7, #20
 8018430:	46bd      	mov	sp, r7
 8018432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018436:	4770      	bx	lr

08018438 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018438:	b480      	push	{r7}
 801843a:	b087      	sub	sp, #28
 801843c:	af00      	add	r7, sp, #0
 801843e:	60f8      	str	r0, [r7, #12]
 8018440:	60b9      	str	r1, [r7, #8]
 8018442:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8018444:	2300      	movs	r3, #0
 8018446:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	1c5a      	adds	r2, r3, #1
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018452:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8018454:	697b      	ldr	r3, [r7, #20]
 8018456:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801845a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018466:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	689b      	ldr	r3, [r3, #8]
 801846c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 801846e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	68db      	ldr	r3, [r3, #12]
 8018474:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8018476:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	691b      	ldr	r3, [r3, #16]
 801847c:	3b01      	subs	r3, #1
 801847e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018480:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8018482:	68bb      	ldr	r3, [r7, #8]
 8018484:	695b      	ldr	r3, [r3, #20]
 8018486:	3b02      	subs	r3, #2
 8018488:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 801848a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 801848c:	68bb      	ldr	r3, [r7, #8]
 801848e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018490:	4313      	orrs	r3, r2
 8018492:	697a      	ldr	r2, [r7, #20]
 8018494:	4313      	orrs	r3, r2
 8018496:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	1c5a      	adds	r2, r3, #1
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	6979      	ldr	r1, [r7, #20]
 80184a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80184a4:	2300      	movs	r3, #0
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	371c      	adds	r7, #28
 80184aa:	46bd      	mov	sp, r7
 80184ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b0:	4770      	bx	lr

080184b2 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80184b2:	b480      	push	{r7}
 80184b4:	b087      	sub	sp, #28
 80184b6:	af00      	add	r7, sp, #0
 80184b8:	60f8      	str	r0, [r7, #12]
 80184ba:	60b9      	str	r1, [r7, #8]
 80184bc:	607a      	str	r2, [r7, #4]
 80184be:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80184c0:	2300      	movs	r3, #0
 80184c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80184ca:	d122      	bne.n	8018512 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	687a      	ldr	r2, [r7, #4]
 80184d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184d4:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80184d6:	697a      	ldr	r2, [r7, #20]
 80184d8:	4b14      	ldr	r3, [pc, #80]	; (801852c <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 80184da:	4013      	ands	r3, r2
 80184dc:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80184e2:	68bb      	ldr	r3, [r7, #8]
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184e8:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	689b      	ldr	r3, [r3, #8]
 80184ee:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80184f0:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	68db      	ldr	r3, [r3, #12]
 80184f6:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80184f8:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184fe:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018500:	697a      	ldr	r2, [r7, #20]
 8018502:	4313      	orrs	r3, r2
 8018504:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	687a      	ldr	r2, [r7, #4]
 801850a:	6979      	ldr	r1, [r7, #20]
 801850c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018510:	e005      	b.n	801851e <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	687a      	ldr	r2, [r7, #4]
 8018516:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801851a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 801851e:	2300      	movs	r3, #0
}
 8018520:	4618      	mov	r0, r3
 8018522:	371c      	adds	r7, #28
 8018524:	46bd      	mov	sp, r7
 8018526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852a:	4770      	bx	lr
 801852c:	cff00000 	.word	0xcff00000

08018530 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018530:	b480      	push	{r7}
 8018532:	b083      	sub	sp, #12
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
 8018538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	683a      	ldr	r2, [r7, #0]
 801853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018542:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	683a      	ldr	r2, [r7, #0]
 801854a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 801854e:	2300      	movs	r3, #0
}
 8018550:	4618      	mov	r0, r3
 8018552:	370c      	adds	r7, #12
 8018554:	46bd      	mov	sp, r7
 8018556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855a:	4770      	bx	lr

0801855c <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 801855c:	b480      	push	{r7}
 801855e:	b083      	sub	sp, #12
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	683a      	ldr	r2, [r7, #0]
 801856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801856e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	683a      	ldr	r2, [r7, #0]
 8018576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 801857a:	2300      	movs	r3, #0
}
 801857c:	4618      	mov	r0, r3
 801857e:	370c      	adds	r7, #12
 8018580:	46bd      	mov	sp, r7
 8018582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018586:	4770      	bx	lr

08018588 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8018588:	b480      	push	{r7}
 801858a:	b085      	sub	sp, #20
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
 8018590:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8018592:	2300      	movs	r3, #0
 8018594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8018596:	683b      	ldr	r3, [r7, #0]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	2b10      	cmp	r3, #16
 801859c:	d103      	bne.n	80185a6 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	60fb      	str	r3, [r7, #12]
 80185a4:	e002      	b.n	80185ac <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	6a1b      	ldr	r3, [r3, #32]
 80185aa:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80185ac:	68fa      	ldr	r2, [r7, #12]
 80185ae:	4b16      	ldr	r3, [pc, #88]	; (8018608 <FSMC_NAND_Init+0x80>)
 80185b0:	4013      	ands	r3, r2
 80185b2:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80185bc:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80185c2:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80185c8:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	695b      	ldr	r3, [r3, #20]
 80185ce:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80185d0:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80185d2:	683b      	ldr	r3, [r7, #0]
 80185d4:	699b      	ldr	r3, [r3, #24]
 80185d6:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80185d8:	431a      	orrs	r2, r3
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	4313      	orrs	r3, r2
 80185de:	f043 0308 	orr.w	r3, r3, #8
 80185e2:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	2b10      	cmp	r3, #16
 80185ea:	d103      	bne.n	80185f4 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	68fa      	ldr	r2, [r7, #12]
 80185f0:	601a      	str	r2, [r3, #0]
 80185f2:	e002      	b.n	80185fa <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	68fa      	ldr	r2, [r7, #12]
 80185f8:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80185fa:	2300      	movs	r3, #0
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3714      	adds	r7, #20
 8018600:	46bd      	mov	sp, r7
 8018602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018606:	4770      	bx	lr
 8018608:	fff00181 	.word	0xfff00181

0801860c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801860c:	b480      	push	{r7}
 801860e:	b087      	sub	sp, #28
 8018610:	af00      	add	r7, sp, #0
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018618:	2300      	movs	r3, #0
 801861a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2b10      	cmp	r3, #16
 8018620:	d103      	bne.n	801862a <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	689b      	ldr	r3, [r3, #8]
 8018626:	617b      	str	r3, [r7, #20]
 8018628:	e002      	b.n	8018630 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801862e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018630:	2300      	movs	r3, #0
 8018632:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018634:	68bb      	ldr	r3, [r7, #8]
 8018636:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018638:	68bb      	ldr	r3, [r7, #8]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 801863e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	689b      	ldr	r3, [r3, #8]
 8018644:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018646:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	68db      	ldr	r3, [r3, #12]
 801864c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 801864e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018650:	697a      	ldr	r2, [r7, #20]
 8018652:	4313      	orrs	r3, r2
 8018654:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	2b10      	cmp	r3, #16
 801865a:	d103      	bne.n	8018664 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	697a      	ldr	r2, [r7, #20]
 8018660:	609a      	str	r2, [r3, #8]
 8018662:	e002      	b.n	801866a <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	697a      	ldr	r2, [r7, #20]
 8018668:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 801866a:	2300      	movs	r3, #0
}
 801866c:	4618      	mov	r0, r3
 801866e:	371c      	adds	r7, #28
 8018670:	46bd      	mov	sp, r7
 8018672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018676:	4770      	bx	lr

08018678 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018678:	b480      	push	{r7}
 801867a:	b087      	sub	sp, #28
 801867c:	af00      	add	r7, sp, #0
 801867e:	60f8      	str	r0, [r7, #12]
 8018680:	60b9      	str	r1, [r7, #8]
 8018682:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018684:	2300      	movs	r3, #0
 8018686:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	2b10      	cmp	r3, #16
 801868c:	d103      	bne.n	8018696 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	68db      	ldr	r3, [r3, #12]
 8018692:	617b      	str	r3, [r7, #20]
 8018694:	e002      	b.n	801869c <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801869a:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 801869c:	2300      	movs	r3, #0
 801869e:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186aa:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	689b      	ldr	r3, [r3, #8]
 80186b0:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80186b2:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	68db      	ldr	r3, [r3, #12]
 80186b8:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80186ba:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186bc:	697a      	ldr	r2, [r7, #20]
 80186be:	4313      	orrs	r3, r2
 80186c0:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	2b10      	cmp	r3, #16
 80186c6:	d103      	bne.n	80186d0 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	697a      	ldr	r2, [r7, #20]
 80186cc:	60da      	str	r2, [r3, #12]
 80186ce:	e002      	b.n	80186d6 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	697a      	ldr	r2, [r7, #20]
 80186d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80186d6:	2300      	movs	r3, #0
}
 80186d8:	4618      	mov	r0, r3
 80186da:	371c      	adds	r7, #28
 80186dc:	46bd      	mov	sp, r7
 80186de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e2:	4770      	bx	lr

080186e4 <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80186e4:	b480      	push	{r7}
 80186e6:	b083      	sub	sp, #12
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	2b10      	cmp	r3, #16
 80186f2:	d106      	bne.n	8018702 <FSMC_NAND_DeInit+0x1e>
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	f023 0204 	bic.w	r2, r3, #4
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	601a      	str	r2, [r3, #0]
 8018700:	e005      	b.n	801870e <FSMC_NAND_DeInit+0x2a>
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	6a1b      	ldr	r3, [r3, #32]
 8018706:	f023 0204 	bic.w	r2, r3, #4
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 801870e:	683b      	ldr	r3, [r7, #0]
 8018710:	2b10      	cmp	r3, #16
 8018712:	d10e      	bne.n	8018732 <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2218      	movs	r2, #24
 8018718:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2240      	movs	r2, #64	; 0x40
 801871e:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018726:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801872e:	60da      	str	r2, [r3, #12]
 8018730:	e00d      	b.n	801874e <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2218      	movs	r2, #24
 8018736:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	2240      	movs	r2, #64	; 0x40
 801873c:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018744:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801874c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 801874e:	2300      	movs	r3, #0
}
 8018750:	4618      	mov	r0, r3
 8018752:	370c      	adds	r7, #12
 8018754:	46bd      	mov	sp, r7
 8018756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875a:	4770      	bx	lr

0801875c <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 801875c:	b480      	push	{r7}
 801875e:	b083      	sub	sp, #12
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
 8018764:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018766:	683b      	ldr	r3, [r7, #0]
 8018768:	2b10      	cmp	r3, #16
 801876a:	d106      	bne.n	801877a <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	601a      	str	r2, [r3, #0]
 8018778:	e005      	b.n	8018786 <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	6a1b      	ldr	r3, [r3, #32]
 801877e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 8018786:	2300      	movs	r3, #0
}
 8018788:	4618      	mov	r0, r3
 801878a:	370c      	adds	r7, #12
 801878c:	46bd      	mov	sp, r7
 801878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018792:	4770      	bx	lr

08018794 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 8018794:	b480      	push	{r7}
 8018796:	b083      	sub	sp, #12
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	2b10      	cmp	r3, #16
 80187a2:	d106      	bne.n	80187b2 <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	601a      	str	r2, [r3, #0]
 80187b0:	e005      	b.n	80187be <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	6a1b      	ldr	r3, [r3, #32]
 80187b6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 80187be:	2300      	movs	r3, #0
}
 80187c0:	4618      	mov	r0, r3
 80187c2:	370c      	adds	r7, #12
 80187c4:	46bd      	mov	sp, r7
 80187c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ca:	4770      	bx	lr

080187cc <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b086      	sub	sp, #24
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	60f8      	str	r0, [r7, #12]
 80187d4:	60b9      	str	r1, [r7, #8]
 80187d6:	607a      	str	r2, [r7, #4]
 80187d8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 80187da:	2300      	movs	r3, #0
 80187dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80187de:	f7ee f825 	bl	800682c <HAL_GetTick>
 80187e2:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 80187e4:	e010      	b.n	8018808 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80187e6:	683b      	ldr	r3, [r7, #0]
 80187e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187ec:	d00c      	beq.n	8018808 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d007      	beq.n	8018804 <FSMC_NAND_GetECC+0x38>
 80187f4:	f7ee f81a 	bl	800682c <HAL_GetTick>
 80187f8:	4602      	mov	r2, r0
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	1ad3      	subs	r3, r2, r3
 80187fe:	683a      	ldr	r2, [r7, #0]
 8018800:	429a      	cmp	r2, r3
 8018802:	d201      	bcs.n	8018808 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 8018804:	2303      	movs	r3, #3
 8018806:	e024      	b.n	8018852 <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	2b10      	cmp	r3, #16
 801880c:	d109      	bne.n	8018822 <FSMC_NAND_GetECC+0x56>
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018816:	2b40      	cmp	r3, #64	; 0x40
 8018818:	bf14      	ite	ne
 801881a:	2301      	movne	r3, #1
 801881c:	2300      	moveq	r3, #0
 801881e:	b2db      	uxtb	r3, r3
 8018820:	e008      	b.n	8018834 <FSMC_NAND_GetECC+0x68>
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801882a:	2b40      	cmp	r3, #64	; 0x40
 801882c:	bf14      	ite	ne
 801882e:	2301      	movne	r3, #1
 8018830:	2300      	moveq	r3, #0
 8018832:	b2db      	uxtb	r3, r3
 8018834:	2b00      	cmp	r3, #0
 8018836:	d1d6      	bne.n	80187e6 <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2b10      	cmp	r3, #16
 801883c:	d104      	bne.n	8018848 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	695a      	ldr	r2, [r3, #20]
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	601a      	str	r2, [r3, #0]
 8018846:	e003      	b.n	8018850 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801884c:	68bb      	ldr	r3, [r7, #8]
 801884e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018850:	2300      	movs	r3, #0
}
 8018852:	4618      	mov	r0, r3
 8018854:	3718      	adds	r7, #24
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}

0801885a <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 801885a:	b480      	push	{r7}
 801885c:	b085      	sub	sp, #20
 801885e:	af00      	add	r7, sp, #0
 8018860:	6078      	str	r0, [r7, #4]
 8018862:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018864:	2300      	movs	r3, #0
 8018866:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8018874:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018878:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 8018884:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	689b      	ldr	r3, [r3, #8]
 801888a:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 801888c:	431a      	orrs	r2, r3
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	4313      	orrs	r3, r2
 8018892:	f043 0310 	orr.w	r3, r3, #16
 8018896:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	68fa      	ldr	r2, [r7, #12]
 801889c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 801889e:	2300      	movs	r3, #0
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3714      	adds	r7, #20
 80188a4:	46bd      	mov	sp, r7
 80188a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188aa:	4770      	bx	lr

080188ac <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80188ac:	b480      	push	{r7}
 80188ae:	b085      	sub	sp, #20
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
 80188b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80188b6:	2300      	movs	r3, #0
 80188b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	689b      	ldr	r3, [r3, #8]
 80188be:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 80188c0:	2300      	movs	r3, #0
 80188c2:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	685b      	ldr	r3, [r3, #4]
 80188cc:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80188ce:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 80188d0:	683b      	ldr	r3, [r7, #0]
 80188d2:	689b      	ldr	r3, [r3, #8]
 80188d4:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 80188d6:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 80188de:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80188e0:	68fa      	ldr	r2, [r7, #12]
 80188e2:	4313      	orrs	r3, r2
 80188e4:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	68fa      	ldr	r2, [r7, #12]
 80188ea:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 80188ec:	2300      	movs	r3, #0
}
 80188ee:	4618      	mov	r0, r3
 80188f0:	3714      	adds	r7, #20
 80188f2:	46bd      	mov	sp, r7
 80188f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f8:	4770      	bx	lr

080188fa <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80188fa:	b480      	push	{r7}
 80188fc:	b085      	sub	sp, #20
 80188fe:	af00      	add	r7, sp, #0
 8018900:	6078      	str	r0, [r7, #4]
 8018902:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018904:	2300      	movs	r3, #0
 8018906:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	68db      	ldr	r3, [r3, #12]
 801890c:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 801890e:	2300      	movs	r3, #0
 8018910:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	685b      	ldr	r3, [r3, #4]
 801891a:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801891c:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	689b      	ldr	r3, [r3, #8]
 8018922:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018924:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	68db      	ldr	r3, [r3, #12]
 801892a:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 801892c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801892e:	68fa      	ldr	r2, [r7, #12]
 8018930:	4313      	orrs	r3, r2
 8018932:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	68fa      	ldr	r2, [r7, #12]
 8018938:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 801893a:	2300      	movs	r3, #0
}
 801893c:	4618      	mov	r0, r3
 801893e:	3714      	adds	r7, #20
 8018940:	46bd      	mov	sp, r7
 8018942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018946:	4770      	bx	lr

08018948 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018948:	b480      	push	{r7}
 801894a:	b085      	sub	sp, #20
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
 8018950:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018952:	2300      	movs	r3, #0
 8018954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	691b      	ldr	r3, [r3, #16]
 801895a:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 801895c:	2300      	movs	r3, #0
 801895e:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018960:	683b      	ldr	r3, [r7, #0]
 8018962:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	685b      	ldr	r3, [r3, #4]
 8018968:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 801896a:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	689b      	ldr	r3, [r3, #8]
 8018970:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 8018972:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 8018974:	683b      	ldr	r3, [r7, #0]
 8018976:	68db      	ldr	r3, [r3, #12]
 8018978:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 801897a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 801897c:	68fa      	ldr	r2, [r7, #12]
 801897e:	4313      	orrs	r3, r2
 8018980:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	68fa      	ldr	r2, [r7, #12]
 8018986:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018988:	2300      	movs	r3, #0
}
 801898a:	4618      	mov	r0, r3
 801898c:	3714      	adds	r7, #20
 801898e:	46bd      	mov	sp, r7
 8018990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018994:	4770      	bx	lr

08018996 <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 8018996:	b480      	push	{r7}
 8018998:	b083      	sub	sp, #12
 801899a:	af00      	add	r7, sp, #0
 801899c:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	f023 0204 	bic.w	r2, r3, #4
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2218      	movs	r2, #24
 80189ae:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2200      	movs	r2, #0
 80189b4:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80189bc:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80189c4:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80189cc:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80189ce:	2300      	movs	r3, #0
}
 80189d0:	4618      	mov	r0, r3
 80189d2:	370c      	adds	r7, #12
 80189d4:	46bd      	mov	sp, r7
 80189d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189da:	4770      	bx	lr

080189dc <strlen>:
 80189dc:	4603      	mov	r3, r0
 80189de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189e2:	2a00      	cmp	r2, #0
 80189e4:	d1fb      	bne.n	80189de <strlen+0x2>
 80189e6:	1a18      	subs	r0, r3, r0
 80189e8:	3801      	subs	r0, #1
 80189ea:	4770      	bx	lr
 80189ec:	0000      	movs	r0, r0
	...

080189f0 <memchr>:
 80189f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80189f4:	2a10      	cmp	r2, #16
 80189f6:	db2b      	blt.n	8018a50 <memchr+0x60>
 80189f8:	f010 0f07 	tst.w	r0, #7
 80189fc:	d008      	beq.n	8018a10 <memchr+0x20>
 80189fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a02:	3a01      	subs	r2, #1
 8018a04:	428b      	cmp	r3, r1
 8018a06:	d02d      	beq.n	8018a64 <memchr+0x74>
 8018a08:	f010 0f07 	tst.w	r0, #7
 8018a0c:	b342      	cbz	r2, 8018a60 <memchr+0x70>
 8018a0e:	d1f6      	bne.n	80189fe <memchr+0xe>
 8018a10:	b4f0      	push	{r4, r5, r6, r7}
 8018a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8018a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8018a1a:	f022 0407 	bic.w	r4, r2, #7
 8018a1e:	f07f 0700 	mvns.w	r7, #0
 8018a22:	2300      	movs	r3, #0
 8018a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8018a28:	3c08      	subs	r4, #8
 8018a2a:	ea85 0501 	eor.w	r5, r5, r1
 8018a2e:	ea86 0601 	eor.w	r6, r6, r1
 8018a32:	fa85 f547 	uadd8	r5, r5, r7
 8018a36:	faa3 f587 	sel	r5, r3, r7
 8018a3a:	fa86 f647 	uadd8	r6, r6, r7
 8018a3e:	faa5 f687 	sel	r6, r5, r7
 8018a42:	b98e      	cbnz	r6, 8018a68 <memchr+0x78>
 8018a44:	d1ee      	bne.n	8018a24 <memchr+0x34>
 8018a46:	bcf0      	pop	{r4, r5, r6, r7}
 8018a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018a4c:	f002 0207 	and.w	r2, r2, #7
 8018a50:	b132      	cbz	r2, 8018a60 <memchr+0x70>
 8018a52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a56:	3a01      	subs	r2, #1
 8018a58:	ea83 0301 	eor.w	r3, r3, r1
 8018a5c:	b113      	cbz	r3, 8018a64 <memchr+0x74>
 8018a5e:	d1f8      	bne.n	8018a52 <memchr+0x62>
 8018a60:	2000      	movs	r0, #0
 8018a62:	4770      	bx	lr
 8018a64:	3801      	subs	r0, #1
 8018a66:	4770      	bx	lr
 8018a68:	2d00      	cmp	r5, #0
 8018a6a:	bf06      	itte	eq
 8018a6c:	4635      	moveq	r5, r6
 8018a6e:	3803      	subeq	r0, #3
 8018a70:	3807      	subne	r0, #7
 8018a72:	f015 0f01 	tst.w	r5, #1
 8018a76:	d107      	bne.n	8018a88 <memchr+0x98>
 8018a78:	3001      	adds	r0, #1
 8018a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8018a7e:	bf02      	ittt	eq
 8018a80:	3001      	addeq	r0, #1
 8018a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018a86:	3001      	addeq	r0, #1
 8018a88:	bcf0      	pop	{r4, r5, r6, r7}
 8018a8a:	3801      	subs	r0, #1
 8018a8c:	4770      	bx	lr
 8018a8e:	bf00      	nop

08018a90 <__aeabi_drsub>:
 8018a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018a94:	e002      	b.n	8018a9c <__adddf3>
 8018a96:	bf00      	nop

08018a98 <__aeabi_dsub>:
 8018a98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08018a9c <__adddf3>:
 8018a9c:	b530      	push	{r4, r5, lr}
 8018a9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8018aa2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8018aa6:	ea94 0f05 	teq	r4, r5
 8018aaa:	bf08      	it	eq
 8018aac:	ea90 0f02 	teqeq	r0, r2
 8018ab0:	bf1f      	itttt	ne
 8018ab2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8018ab6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8018aba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8018abe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018ac2:	f000 80e2 	beq.w	8018c8a <__adddf3+0x1ee>
 8018ac6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8018aca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8018ace:	bfb8      	it	lt
 8018ad0:	426d      	neglt	r5, r5
 8018ad2:	dd0c      	ble.n	8018aee <__adddf3+0x52>
 8018ad4:	442c      	add	r4, r5
 8018ad6:	ea80 0202 	eor.w	r2, r0, r2
 8018ada:	ea81 0303 	eor.w	r3, r1, r3
 8018ade:	ea82 0000 	eor.w	r0, r2, r0
 8018ae2:	ea83 0101 	eor.w	r1, r3, r1
 8018ae6:	ea80 0202 	eor.w	r2, r0, r2
 8018aea:	ea81 0303 	eor.w	r3, r1, r3
 8018aee:	2d36      	cmp	r5, #54	; 0x36
 8018af0:	bf88      	it	hi
 8018af2:	bd30      	pophi	{r4, r5, pc}
 8018af4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018af8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018afc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8018b00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8018b04:	d002      	beq.n	8018b0c <__adddf3+0x70>
 8018b06:	4240      	negs	r0, r0
 8018b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018b0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8018b10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018b14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8018b18:	d002      	beq.n	8018b20 <__adddf3+0x84>
 8018b1a:	4252      	negs	r2, r2
 8018b1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8018b20:	ea94 0f05 	teq	r4, r5
 8018b24:	f000 80a7 	beq.w	8018c76 <__adddf3+0x1da>
 8018b28:	f1a4 0401 	sub.w	r4, r4, #1
 8018b2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8018b30:	db0d      	blt.n	8018b4e <__adddf3+0xb2>
 8018b32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018b36:	fa22 f205 	lsr.w	r2, r2, r5
 8018b3a:	1880      	adds	r0, r0, r2
 8018b3c:	f141 0100 	adc.w	r1, r1, #0
 8018b40:	fa03 f20e 	lsl.w	r2, r3, lr
 8018b44:	1880      	adds	r0, r0, r2
 8018b46:	fa43 f305 	asr.w	r3, r3, r5
 8018b4a:	4159      	adcs	r1, r3
 8018b4c:	e00e      	b.n	8018b6c <__adddf3+0xd0>
 8018b4e:	f1a5 0520 	sub.w	r5, r5, #32
 8018b52:	f10e 0e20 	add.w	lr, lr, #32
 8018b56:	2a01      	cmp	r2, #1
 8018b58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8018b5c:	bf28      	it	cs
 8018b5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018b62:	fa43 f305 	asr.w	r3, r3, r5
 8018b66:	18c0      	adds	r0, r0, r3
 8018b68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8018b6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018b70:	d507      	bpl.n	8018b82 <__adddf3+0xe6>
 8018b72:	f04f 0e00 	mov.w	lr, #0
 8018b76:	f1dc 0c00 	rsbs	ip, ip, #0
 8018b7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8018b7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8018b82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018b86:	d31b      	bcc.n	8018bc0 <__adddf3+0x124>
 8018b88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8018b8c:	d30c      	bcc.n	8018ba8 <__adddf3+0x10c>
 8018b8e:	0849      	lsrs	r1, r1, #1
 8018b90:	ea5f 0030 	movs.w	r0, r0, rrx
 8018b94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018b98:	f104 0401 	add.w	r4, r4, #1
 8018b9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018ba0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018ba4:	f080 809a 	bcs.w	8018cdc <__adddf3+0x240>
 8018ba8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8018bac:	bf08      	it	eq
 8018bae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018bb2:	f150 0000 	adcs.w	r0, r0, #0
 8018bb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018bba:	ea41 0105 	orr.w	r1, r1, r5
 8018bbe:	bd30      	pop	{r4, r5, pc}
 8018bc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018bc4:	4140      	adcs	r0, r0
 8018bc6:	eb41 0101 	adc.w	r1, r1, r1
 8018bca:	3c01      	subs	r4, #1
 8018bcc:	bf28      	it	cs
 8018bce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8018bd2:	d2e9      	bcs.n	8018ba8 <__adddf3+0x10c>
 8018bd4:	f091 0f00 	teq	r1, #0
 8018bd8:	bf04      	itt	eq
 8018bda:	4601      	moveq	r1, r0
 8018bdc:	2000      	moveq	r0, #0
 8018bde:	fab1 f381 	clz	r3, r1
 8018be2:	bf08      	it	eq
 8018be4:	3320      	addeq	r3, #32
 8018be6:	f1a3 030b 	sub.w	r3, r3, #11
 8018bea:	f1b3 0220 	subs.w	r2, r3, #32
 8018bee:	da0c      	bge.n	8018c0a <__adddf3+0x16e>
 8018bf0:	320c      	adds	r2, #12
 8018bf2:	dd08      	ble.n	8018c06 <__adddf3+0x16a>
 8018bf4:	f102 0c14 	add.w	ip, r2, #20
 8018bf8:	f1c2 020c 	rsb	r2, r2, #12
 8018bfc:	fa01 f00c 	lsl.w	r0, r1, ip
 8018c00:	fa21 f102 	lsr.w	r1, r1, r2
 8018c04:	e00c      	b.n	8018c20 <__adddf3+0x184>
 8018c06:	f102 0214 	add.w	r2, r2, #20
 8018c0a:	bfd8      	it	le
 8018c0c:	f1c2 0c20 	rsble	ip, r2, #32
 8018c10:	fa01 f102 	lsl.w	r1, r1, r2
 8018c14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018c18:	bfdc      	itt	le
 8018c1a:	ea41 010c 	orrle.w	r1, r1, ip
 8018c1e:	4090      	lslle	r0, r2
 8018c20:	1ae4      	subs	r4, r4, r3
 8018c22:	bfa2      	ittt	ge
 8018c24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8018c28:	4329      	orrge	r1, r5
 8018c2a:	bd30      	popge	{r4, r5, pc}
 8018c2c:	ea6f 0404 	mvn.w	r4, r4
 8018c30:	3c1f      	subs	r4, #31
 8018c32:	da1c      	bge.n	8018c6e <__adddf3+0x1d2>
 8018c34:	340c      	adds	r4, #12
 8018c36:	dc0e      	bgt.n	8018c56 <__adddf3+0x1ba>
 8018c38:	f104 0414 	add.w	r4, r4, #20
 8018c3c:	f1c4 0220 	rsb	r2, r4, #32
 8018c40:	fa20 f004 	lsr.w	r0, r0, r4
 8018c44:	fa01 f302 	lsl.w	r3, r1, r2
 8018c48:	ea40 0003 	orr.w	r0, r0, r3
 8018c4c:	fa21 f304 	lsr.w	r3, r1, r4
 8018c50:	ea45 0103 	orr.w	r1, r5, r3
 8018c54:	bd30      	pop	{r4, r5, pc}
 8018c56:	f1c4 040c 	rsb	r4, r4, #12
 8018c5a:	f1c4 0220 	rsb	r2, r4, #32
 8018c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8018c62:	fa01 f304 	lsl.w	r3, r1, r4
 8018c66:	ea40 0003 	orr.w	r0, r0, r3
 8018c6a:	4629      	mov	r1, r5
 8018c6c:	bd30      	pop	{r4, r5, pc}
 8018c6e:	fa21 f004 	lsr.w	r0, r1, r4
 8018c72:	4629      	mov	r1, r5
 8018c74:	bd30      	pop	{r4, r5, pc}
 8018c76:	f094 0f00 	teq	r4, #0
 8018c7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8018c7e:	bf06      	itte	eq
 8018c80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018c84:	3401      	addeq	r4, #1
 8018c86:	3d01      	subne	r5, #1
 8018c88:	e74e      	b.n	8018b28 <__adddf3+0x8c>
 8018c8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018c8e:	bf18      	it	ne
 8018c90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018c94:	d029      	beq.n	8018cea <__adddf3+0x24e>
 8018c96:	ea94 0f05 	teq	r4, r5
 8018c9a:	bf08      	it	eq
 8018c9c:	ea90 0f02 	teqeq	r0, r2
 8018ca0:	d005      	beq.n	8018cae <__adddf3+0x212>
 8018ca2:	ea54 0c00 	orrs.w	ip, r4, r0
 8018ca6:	bf04      	itt	eq
 8018ca8:	4619      	moveq	r1, r3
 8018caa:	4610      	moveq	r0, r2
 8018cac:	bd30      	pop	{r4, r5, pc}
 8018cae:	ea91 0f03 	teq	r1, r3
 8018cb2:	bf1e      	ittt	ne
 8018cb4:	2100      	movne	r1, #0
 8018cb6:	2000      	movne	r0, #0
 8018cb8:	bd30      	popne	{r4, r5, pc}
 8018cba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8018cbe:	d105      	bne.n	8018ccc <__adddf3+0x230>
 8018cc0:	0040      	lsls	r0, r0, #1
 8018cc2:	4149      	adcs	r1, r1
 8018cc4:	bf28      	it	cs
 8018cc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8018cca:	bd30      	pop	{r4, r5, pc}
 8018ccc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8018cd0:	bf3c      	itt	cc
 8018cd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8018cd6:	bd30      	popcc	{r4, r5, pc}
 8018cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018cdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8018ce0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018ce4:	f04f 0000 	mov.w	r0, #0
 8018ce8:	bd30      	pop	{r4, r5, pc}
 8018cea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018cee:	bf1a      	itte	ne
 8018cf0:	4619      	movne	r1, r3
 8018cf2:	4610      	movne	r0, r2
 8018cf4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8018cf8:	bf1c      	itt	ne
 8018cfa:	460b      	movne	r3, r1
 8018cfc:	4602      	movne	r2, r0
 8018cfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018d02:	bf06      	itte	eq
 8018d04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8018d08:	ea91 0f03 	teqeq	r1, r3
 8018d0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8018d10:	bd30      	pop	{r4, r5, pc}
 8018d12:	bf00      	nop

08018d14 <__aeabi_ui2d>:
 8018d14:	f090 0f00 	teq	r0, #0
 8018d18:	bf04      	itt	eq
 8018d1a:	2100      	moveq	r1, #0
 8018d1c:	4770      	bxeq	lr
 8018d1e:	b530      	push	{r4, r5, lr}
 8018d20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d28:	f04f 0500 	mov.w	r5, #0
 8018d2c:	f04f 0100 	mov.w	r1, #0
 8018d30:	e750      	b.n	8018bd4 <__adddf3+0x138>
 8018d32:	bf00      	nop

08018d34 <__aeabi_i2d>:
 8018d34:	f090 0f00 	teq	r0, #0
 8018d38:	bf04      	itt	eq
 8018d3a:	2100      	moveq	r1, #0
 8018d3c:	4770      	bxeq	lr
 8018d3e:	b530      	push	{r4, r5, lr}
 8018d40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8018d4c:	bf48      	it	mi
 8018d4e:	4240      	negmi	r0, r0
 8018d50:	f04f 0100 	mov.w	r1, #0
 8018d54:	e73e      	b.n	8018bd4 <__adddf3+0x138>
 8018d56:	bf00      	nop

08018d58 <__aeabi_f2d>:
 8018d58:	0042      	lsls	r2, r0, #1
 8018d5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8018d5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8018d62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018d66:	bf1f      	itttt	ne
 8018d68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8018d6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018d70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018d74:	4770      	bxne	lr
 8018d76:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8018d7a:	bf08      	it	eq
 8018d7c:	4770      	bxeq	lr
 8018d7e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018d82:	bf04      	itt	eq
 8018d84:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018d88:	4770      	bxeq	lr
 8018d8a:	b530      	push	{r4, r5, lr}
 8018d8c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8018d90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018d94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018d98:	e71c      	b.n	8018bd4 <__adddf3+0x138>
 8018d9a:	bf00      	nop

08018d9c <__aeabi_ul2d>:
 8018d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8018da0:	bf08      	it	eq
 8018da2:	4770      	bxeq	lr
 8018da4:	b530      	push	{r4, r5, lr}
 8018da6:	f04f 0500 	mov.w	r5, #0
 8018daa:	e00a      	b.n	8018dc2 <__aeabi_l2d+0x16>

08018dac <__aeabi_l2d>:
 8018dac:	ea50 0201 	orrs.w	r2, r0, r1
 8018db0:	bf08      	it	eq
 8018db2:	4770      	bxeq	lr
 8018db4:	b530      	push	{r4, r5, lr}
 8018db6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8018dba:	d502      	bpl.n	8018dc2 <__aeabi_l2d+0x16>
 8018dbc:	4240      	negs	r0, r0
 8018dbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018dc2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018dc6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018dca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8018dce:	f43f aed8 	beq.w	8018b82 <__adddf3+0xe6>
 8018dd2:	f04f 0203 	mov.w	r2, #3
 8018dd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018dda:	bf18      	it	ne
 8018ddc:	3203      	addne	r2, #3
 8018dde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018de2:	bf18      	it	ne
 8018de4:	3203      	addne	r2, #3
 8018de6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8018dea:	f1c2 0320 	rsb	r3, r2, #32
 8018dee:	fa00 fc03 	lsl.w	ip, r0, r3
 8018df2:	fa20 f002 	lsr.w	r0, r0, r2
 8018df6:	fa01 fe03 	lsl.w	lr, r1, r3
 8018dfa:	ea40 000e 	orr.w	r0, r0, lr
 8018dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8018e02:	4414      	add	r4, r2
 8018e04:	e6bd      	b.n	8018b82 <__adddf3+0xe6>
 8018e06:	bf00      	nop

08018e08 <__aeabi_dmul>:
 8018e08:	b570      	push	{r4, r5, r6, lr}
 8018e0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018e0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018e12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018e16:	bf1d      	ittte	ne
 8018e18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018e1c:	ea94 0f0c 	teqne	r4, ip
 8018e20:	ea95 0f0c 	teqne	r5, ip
 8018e24:	f000 f8de 	bleq	8018fe4 <__aeabi_dmul+0x1dc>
 8018e28:	442c      	add	r4, r5
 8018e2a:	ea81 0603 	eor.w	r6, r1, r3
 8018e2e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8018e32:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8018e36:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8018e3a:	bf18      	it	ne
 8018e3c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e48:	d038      	beq.n	8018ebc <__aeabi_dmul+0xb4>
 8018e4a:	fba0 ce02 	umull	ip, lr, r0, r2
 8018e4e:	f04f 0500 	mov.w	r5, #0
 8018e52:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018e56:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8018e5a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8018e5e:	f04f 0600 	mov.w	r6, #0
 8018e62:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018e66:	f09c 0f00 	teq	ip, #0
 8018e6a:	bf18      	it	ne
 8018e6c:	f04e 0e01 	orrne.w	lr, lr, #1
 8018e70:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018e74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018e78:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8018e7c:	d204      	bcs.n	8018e88 <__aeabi_dmul+0x80>
 8018e7e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018e82:	416d      	adcs	r5, r5
 8018e84:	eb46 0606 	adc.w	r6, r6, r6
 8018e88:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8018e8c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8018e90:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018e94:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018e98:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8018e9c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018ea0:	bf88      	it	hi
 8018ea2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018ea6:	d81e      	bhi.n	8018ee6 <__aeabi_dmul+0xde>
 8018ea8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8018eac:	bf08      	it	eq
 8018eae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8018eb2:	f150 0000 	adcs.w	r0, r0, #0
 8018eb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018eba:	bd70      	pop	{r4, r5, r6, pc}
 8018ebc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8018ec0:	ea46 0101 	orr.w	r1, r6, r1
 8018ec4:	ea40 0002 	orr.w	r0, r0, r2
 8018ec8:	ea81 0103 	eor.w	r1, r1, r3
 8018ecc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8018ed0:	bfc2      	ittt	gt
 8018ed2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018ed6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018eda:	bd70      	popgt	{r4, r5, r6, pc}
 8018edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018ee0:	f04f 0e00 	mov.w	lr, #0
 8018ee4:	3c01      	subs	r4, #1
 8018ee6:	f300 80ab 	bgt.w	8019040 <__aeabi_dmul+0x238>
 8018eea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8018eee:	bfde      	ittt	le
 8018ef0:	2000      	movle	r0, #0
 8018ef2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8018ef6:	bd70      	pople	{r4, r5, r6, pc}
 8018ef8:	f1c4 0400 	rsb	r4, r4, #0
 8018efc:	3c20      	subs	r4, #32
 8018efe:	da35      	bge.n	8018f6c <__aeabi_dmul+0x164>
 8018f00:	340c      	adds	r4, #12
 8018f02:	dc1b      	bgt.n	8018f3c <__aeabi_dmul+0x134>
 8018f04:	f104 0414 	add.w	r4, r4, #20
 8018f08:	f1c4 0520 	rsb	r5, r4, #32
 8018f0c:	fa00 f305 	lsl.w	r3, r0, r5
 8018f10:	fa20 f004 	lsr.w	r0, r0, r4
 8018f14:	fa01 f205 	lsl.w	r2, r1, r5
 8018f18:	ea40 0002 	orr.w	r0, r0, r2
 8018f1c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8018f20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018f24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018f28:	fa21 f604 	lsr.w	r6, r1, r4
 8018f2c:	eb42 0106 	adc.w	r1, r2, r6
 8018f30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f34:	bf08      	it	eq
 8018f36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018f3a:	bd70      	pop	{r4, r5, r6, pc}
 8018f3c:	f1c4 040c 	rsb	r4, r4, #12
 8018f40:	f1c4 0520 	rsb	r5, r4, #32
 8018f44:	fa00 f304 	lsl.w	r3, r0, r4
 8018f48:	fa20 f005 	lsr.w	r0, r0, r5
 8018f4c:	fa01 f204 	lsl.w	r2, r1, r4
 8018f50:	ea40 0002 	orr.w	r0, r0, r2
 8018f54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018f58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018f5c:	f141 0100 	adc.w	r1, r1, #0
 8018f60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f64:	bf08      	it	eq
 8018f66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018f6a:	bd70      	pop	{r4, r5, r6, pc}
 8018f6c:	f1c4 0520 	rsb	r5, r4, #32
 8018f70:	fa00 f205 	lsl.w	r2, r0, r5
 8018f74:	ea4e 0e02 	orr.w	lr, lr, r2
 8018f78:	fa20 f304 	lsr.w	r3, r0, r4
 8018f7c:	fa01 f205 	lsl.w	r2, r1, r5
 8018f80:	ea43 0302 	orr.w	r3, r3, r2
 8018f84:	fa21 f004 	lsr.w	r0, r1, r4
 8018f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018f8c:	fa21 f204 	lsr.w	r2, r1, r4
 8018f90:	ea20 0002 	bic.w	r0, r0, r2
 8018f94:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018f98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f9c:	bf08      	it	eq
 8018f9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018fa2:	bd70      	pop	{r4, r5, r6, pc}
 8018fa4:	f094 0f00 	teq	r4, #0
 8018fa8:	d10f      	bne.n	8018fca <__aeabi_dmul+0x1c2>
 8018faa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8018fae:	0040      	lsls	r0, r0, #1
 8018fb0:	eb41 0101 	adc.w	r1, r1, r1
 8018fb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018fb8:	bf08      	it	eq
 8018fba:	3c01      	subeq	r4, #1
 8018fbc:	d0f7      	beq.n	8018fae <__aeabi_dmul+0x1a6>
 8018fbe:	ea41 0106 	orr.w	r1, r1, r6
 8018fc2:	f095 0f00 	teq	r5, #0
 8018fc6:	bf18      	it	ne
 8018fc8:	4770      	bxne	lr
 8018fca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8018fce:	0052      	lsls	r2, r2, #1
 8018fd0:	eb43 0303 	adc.w	r3, r3, r3
 8018fd4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8018fd8:	bf08      	it	eq
 8018fda:	3d01      	subeq	r5, #1
 8018fdc:	d0f7      	beq.n	8018fce <__aeabi_dmul+0x1c6>
 8018fde:	ea43 0306 	orr.w	r3, r3, r6
 8018fe2:	4770      	bx	lr
 8018fe4:	ea94 0f0c 	teq	r4, ip
 8018fe8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018fec:	bf18      	it	ne
 8018fee:	ea95 0f0c 	teqne	r5, ip
 8018ff2:	d00c      	beq.n	801900e <__aeabi_dmul+0x206>
 8018ff4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018ff8:	bf18      	it	ne
 8018ffa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018ffe:	d1d1      	bne.n	8018fa4 <__aeabi_dmul+0x19c>
 8019000:	ea81 0103 	eor.w	r1, r1, r3
 8019004:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019008:	f04f 0000 	mov.w	r0, #0
 801900c:	bd70      	pop	{r4, r5, r6, pc}
 801900e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019012:	bf06      	itte	eq
 8019014:	4610      	moveq	r0, r2
 8019016:	4619      	moveq	r1, r3
 8019018:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801901c:	d019      	beq.n	8019052 <__aeabi_dmul+0x24a>
 801901e:	ea94 0f0c 	teq	r4, ip
 8019022:	d102      	bne.n	801902a <__aeabi_dmul+0x222>
 8019024:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019028:	d113      	bne.n	8019052 <__aeabi_dmul+0x24a>
 801902a:	ea95 0f0c 	teq	r5, ip
 801902e:	d105      	bne.n	801903c <__aeabi_dmul+0x234>
 8019030:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019034:	bf1c      	itt	ne
 8019036:	4610      	movne	r0, r2
 8019038:	4619      	movne	r1, r3
 801903a:	d10a      	bne.n	8019052 <__aeabi_dmul+0x24a>
 801903c:	ea81 0103 	eor.w	r1, r1, r3
 8019040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019044:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019048:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801904c:	f04f 0000 	mov.w	r0, #0
 8019050:	bd70      	pop	{r4, r5, r6, pc}
 8019052:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019056:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801905a:	bd70      	pop	{r4, r5, r6, pc}

0801905c <__aeabi_ddiv>:
 801905c:	b570      	push	{r4, r5, r6, lr}
 801905e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8019062:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019066:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801906a:	bf1d      	ittte	ne
 801906c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019070:	ea94 0f0c 	teqne	r4, ip
 8019074:	ea95 0f0c 	teqne	r5, ip
 8019078:	f000 f8a7 	bleq	80191ca <__aeabi_ddiv+0x16e>
 801907c:	eba4 0405 	sub.w	r4, r4, r5
 8019080:	ea81 0e03 	eor.w	lr, r1, r3
 8019084:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019088:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801908c:	f000 8088 	beq.w	80191a0 <__aeabi_ddiv+0x144>
 8019090:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019094:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8019098:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801909c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80190a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80190a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80190a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80190ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80190b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80190b4:	429d      	cmp	r5, r3
 80190b6:	bf08      	it	eq
 80190b8:	4296      	cmpeq	r6, r2
 80190ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80190be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80190c2:	d202      	bcs.n	80190ca <__aeabi_ddiv+0x6e>
 80190c4:	085b      	lsrs	r3, r3, #1
 80190c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80190ca:	1ab6      	subs	r6, r6, r2
 80190cc:	eb65 0503 	sbc.w	r5, r5, r3
 80190d0:	085b      	lsrs	r3, r3, #1
 80190d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80190d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80190da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80190de:	ebb6 0e02 	subs.w	lr, r6, r2
 80190e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80190e6:	bf22      	ittt	cs
 80190e8:	1ab6      	subcs	r6, r6, r2
 80190ea:	4675      	movcs	r5, lr
 80190ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80190f0:	085b      	lsrs	r3, r3, #1
 80190f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80190f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80190fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80190fe:	bf22      	ittt	cs
 8019100:	1ab6      	subcs	r6, r6, r2
 8019102:	4675      	movcs	r5, lr
 8019104:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8019108:	085b      	lsrs	r3, r3, #1
 801910a:	ea4f 0232 	mov.w	r2, r2, rrx
 801910e:	ebb6 0e02 	subs.w	lr, r6, r2
 8019112:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019116:	bf22      	ittt	cs
 8019118:	1ab6      	subcs	r6, r6, r2
 801911a:	4675      	movcs	r5, lr
 801911c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019120:	085b      	lsrs	r3, r3, #1
 8019122:	ea4f 0232 	mov.w	r2, r2, rrx
 8019126:	ebb6 0e02 	subs.w	lr, r6, r2
 801912a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801912e:	bf22      	ittt	cs
 8019130:	1ab6      	subcs	r6, r6, r2
 8019132:	4675      	movcs	r5, lr
 8019134:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019138:	ea55 0e06 	orrs.w	lr, r5, r6
 801913c:	d018      	beq.n	8019170 <__aeabi_ddiv+0x114>
 801913e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019142:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019146:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801914a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801914e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019152:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019156:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801915a:	d1c0      	bne.n	80190de <__aeabi_ddiv+0x82>
 801915c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019160:	d10b      	bne.n	801917a <__aeabi_ddiv+0x11e>
 8019162:	ea41 0100 	orr.w	r1, r1, r0
 8019166:	f04f 0000 	mov.w	r0, #0
 801916a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801916e:	e7b6      	b.n	80190de <__aeabi_ddiv+0x82>
 8019170:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019174:	bf04      	itt	eq
 8019176:	4301      	orreq	r1, r0
 8019178:	2000      	moveq	r0, #0
 801917a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801917e:	bf88      	it	hi
 8019180:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019184:	f63f aeaf 	bhi.w	8018ee6 <__aeabi_dmul+0xde>
 8019188:	ebb5 0c03 	subs.w	ip, r5, r3
 801918c:	bf04      	itt	eq
 801918e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019192:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019196:	f150 0000 	adcs.w	r0, r0, #0
 801919a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801919e:	bd70      	pop	{r4, r5, r6, pc}
 80191a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80191a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80191a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80191ac:	bfc2      	ittt	gt
 80191ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80191b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80191b6:	bd70      	popgt	{r4, r5, r6, pc}
 80191b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80191bc:	f04f 0e00 	mov.w	lr, #0
 80191c0:	3c01      	subs	r4, #1
 80191c2:	e690      	b.n	8018ee6 <__aeabi_dmul+0xde>
 80191c4:	ea45 0e06 	orr.w	lr, r5, r6
 80191c8:	e68d      	b.n	8018ee6 <__aeabi_dmul+0xde>
 80191ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80191ce:	ea94 0f0c 	teq	r4, ip
 80191d2:	bf08      	it	eq
 80191d4:	ea95 0f0c 	teqeq	r5, ip
 80191d8:	f43f af3b 	beq.w	8019052 <__aeabi_dmul+0x24a>
 80191dc:	ea94 0f0c 	teq	r4, ip
 80191e0:	d10a      	bne.n	80191f8 <__aeabi_ddiv+0x19c>
 80191e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80191e6:	f47f af34 	bne.w	8019052 <__aeabi_dmul+0x24a>
 80191ea:	ea95 0f0c 	teq	r5, ip
 80191ee:	f47f af25 	bne.w	801903c <__aeabi_dmul+0x234>
 80191f2:	4610      	mov	r0, r2
 80191f4:	4619      	mov	r1, r3
 80191f6:	e72c      	b.n	8019052 <__aeabi_dmul+0x24a>
 80191f8:	ea95 0f0c 	teq	r5, ip
 80191fc:	d106      	bne.n	801920c <__aeabi_ddiv+0x1b0>
 80191fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019202:	f43f aefd 	beq.w	8019000 <__aeabi_dmul+0x1f8>
 8019206:	4610      	mov	r0, r2
 8019208:	4619      	mov	r1, r3
 801920a:	e722      	b.n	8019052 <__aeabi_dmul+0x24a>
 801920c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019210:	bf18      	it	ne
 8019212:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019216:	f47f aec5 	bne.w	8018fa4 <__aeabi_dmul+0x19c>
 801921a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801921e:	f47f af0d 	bne.w	801903c <__aeabi_dmul+0x234>
 8019222:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019226:	f47f aeeb 	bne.w	8019000 <__aeabi_dmul+0x1f8>
 801922a:	e712      	b.n	8019052 <__aeabi_dmul+0x24a>

0801922c <__gedf2>:
 801922c:	f04f 3cff 	mov.w	ip, #4294967295
 8019230:	e006      	b.n	8019240 <__cmpdf2+0x4>
 8019232:	bf00      	nop

08019234 <__ledf2>:
 8019234:	f04f 0c01 	mov.w	ip, #1
 8019238:	e002      	b.n	8019240 <__cmpdf2+0x4>
 801923a:	bf00      	nop

0801923c <__cmpdf2>:
 801923c:	f04f 0c01 	mov.w	ip, #1
 8019240:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019244:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801924c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019250:	bf18      	it	ne
 8019252:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019256:	d01b      	beq.n	8019290 <__cmpdf2+0x54>
 8019258:	b001      	add	sp, #4
 801925a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801925e:	bf0c      	ite	eq
 8019260:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8019264:	ea91 0f03 	teqne	r1, r3
 8019268:	bf02      	ittt	eq
 801926a:	ea90 0f02 	teqeq	r0, r2
 801926e:	2000      	moveq	r0, #0
 8019270:	4770      	bxeq	lr
 8019272:	f110 0f00 	cmn.w	r0, #0
 8019276:	ea91 0f03 	teq	r1, r3
 801927a:	bf58      	it	pl
 801927c:	4299      	cmppl	r1, r3
 801927e:	bf08      	it	eq
 8019280:	4290      	cmpeq	r0, r2
 8019282:	bf2c      	ite	cs
 8019284:	17d8      	asrcs	r0, r3, #31
 8019286:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801928a:	f040 0001 	orr.w	r0, r0, #1
 801928e:	4770      	bx	lr
 8019290:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019294:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019298:	d102      	bne.n	80192a0 <__cmpdf2+0x64>
 801929a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801929e:	d107      	bne.n	80192b0 <__cmpdf2+0x74>
 80192a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80192a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80192a8:	d1d6      	bne.n	8019258 <__cmpdf2+0x1c>
 80192aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80192ae:	d0d3      	beq.n	8019258 <__cmpdf2+0x1c>
 80192b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80192b4:	4770      	bx	lr
 80192b6:	bf00      	nop

080192b8 <__aeabi_cdrcmple>:
 80192b8:	4684      	mov	ip, r0
 80192ba:	4610      	mov	r0, r2
 80192bc:	4662      	mov	r2, ip
 80192be:	468c      	mov	ip, r1
 80192c0:	4619      	mov	r1, r3
 80192c2:	4663      	mov	r3, ip
 80192c4:	e000      	b.n	80192c8 <__aeabi_cdcmpeq>
 80192c6:	bf00      	nop

080192c8 <__aeabi_cdcmpeq>:
 80192c8:	b501      	push	{r0, lr}
 80192ca:	f7ff ffb7 	bl	801923c <__cmpdf2>
 80192ce:	2800      	cmp	r0, #0
 80192d0:	bf48      	it	mi
 80192d2:	f110 0f00 	cmnmi.w	r0, #0
 80192d6:	bd01      	pop	{r0, pc}

080192d8 <__aeabi_dcmpeq>:
 80192d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80192dc:	f7ff fff4 	bl	80192c8 <__aeabi_cdcmpeq>
 80192e0:	bf0c      	ite	eq
 80192e2:	2001      	moveq	r0, #1
 80192e4:	2000      	movne	r0, #0
 80192e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80192ea:	bf00      	nop

080192ec <__aeabi_dcmplt>:
 80192ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80192f0:	f7ff ffea 	bl	80192c8 <__aeabi_cdcmpeq>
 80192f4:	bf34      	ite	cc
 80192f6:	2001      	movcc	r0, #1
 80192f8:	2000      	movcs	r0, #0
 80192fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80192fe:	bf00      	nop

08019300 <__aeabi_dcmple>:
 8019300:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019304:	f7ff ffe0 	bl	80192c8 <__aeabi_cdcmpeq>
 8019308:	bf94      	ite	ls
 801930a:	2001      	movls	r0, #1
 801930c:	2000      	movhi	r0, #0
 801930e:	f85d fb08 	ldr.w	pc, [sp], #8
 8019312:	bf00      	nop

08019314 <__aeabi_dcmpge>:
 8019314:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019318:	f7ff ffce 	bl	80192b8 <__aeabi_cdrcmple>
 801931c:	bf94      	ite	ls
 801931e:	2001      	movls	r0, #1
 8019320:	2000      	movhi	r0, #0
 8019322:	f85d fb08 	ldr.w	pc, [sp], #8
 8019326:	bf00      	nop

08019328 <__aeabi_dcmpgt>:
 8019328:	f84d ed08 	str.w	lr, [sp, #-8]!
 801932c:	f7ff ffc4 	bl	80192b8 <__aeabi_cdrcmple>
 8019330:	bf34      	ite	cc
 8019332:	2001      	movcc	r0, #1
 8019334:	2000      	movcs	r0, #0
 8019336:	f85d fb08 	ldr.w	pc, [sp], #8
 801933a:	bf00      	nop

0801933c <__aeabi_dcmpun>:
 801933c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019344:	d102      	bne.n	801934c <__aeabi_dcmpun+0x10>
 8019346:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801934a:	d10a      	bne.n	8019362 <__aeabi_dcmpun+0x26>
 801934c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019350:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019354:	d102      	bne.n	801935c <__aeabi_dcmpun+0x20>
 8019356:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801935a:	d102      	bne.n	8019362 <__aeabi_dcmpun+0x26>
 801935c:	f04f 0000 	mov.w	r0, #0
 8019360:	4770      	bx	lr
 8019362:	f04f 0001 	mov.w	r0, #1
 8019366:	4770      	bx	lr

08019368 <__aeabi_d2iz>:
 8019368:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801936c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019370:	d215      	bcs.n	801939e <__aeabi_d2iz+0x36>
 8019372:	d511      	bpl.n	8019398 <__aeabi_d2iz+0x30>
 8019374:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019378:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801937c:	d912      	bls.n	80193a4 <__aeabi_d2iz+0x3c>
 801937e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019386:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801938a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801938e:	fa23 f002 	lsr.w	r0, r3, r2
 8019392:	bf18      	it	ne
 8019394:	4240      	negne	r0, r0
 8019396:	4770      	bx	lr
 8019398:	f04f 0000 	mov.w	r0, #0
 801939c:	4770      	bx	lr
 801939e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80193a2:	d105      	bne.n	80193b0 <__aeabi_d2iz+0x48>
 80193a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80193a8:	bf08      	it	eq
 80193aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80193ae:	4770      	bx	lr
 80193b0:	f04f 0000 	mov.w	r0, #0
 80193b4:	4770      	bx	lr
 80193b6:	bf00      	nop

080193b8 <__aeabi_d2uiz>:
 80193b8:	004a      	lsls	r2, r1, #1
 80193ba:	d211      	bcs.n	80193e0 <__aeabi_d2uiz+0x28>
 80193bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80193c0:	d211      	bcs.n	80193e6 <__aeabi_d2uiz+0x2e>
 80193c2:	d50d      	bpl.n	80193e0 <__aeabi_d2uiz+0x28>
 80193c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80193c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80193cc:	d40e      	bmi.n	80193ec <__aeabi_d2uiz+0x34>
 80193ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80193d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80193d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80193da:	fa23 f002 	lsr.w	r0, r3, r2
 80193de:	4770      	bx	lr
 80193e0:	f04f 0000 	mov.w	r0, #0
 80193e4:	4770      	bx	lr
 80193e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80193ea:	d102      	bne.n	80193f2 <__aeabi_d2uiz+0x3a>
 80193ec:	f04f 30ff 	mov.w	r0, #4294967295
 80193f0:	4770      	bx	lr
 80193f2:	f04f 0000 	mov.w	r0, #0
 80193f6:	4770      	bx	lr

080193f8 <__aeabi_d2f>:
 80193f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80193fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019400:	bf24      	itt	cs
 8019402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801940a:	d90d      	bls.n	8019428 <__aeabi_d2f+0x30>
 801940c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801941c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019420:	bf08      	it	eq
 8019422:	f020 0001 	biceq.w	r0, r0, #1
 8019426:	4770      	bx	lr
 8019428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801942c:	d121      	bne.n	8019472 <__aeabi_d2f+0x7a>
 801942e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019432:	bfbc      	itt	lt
 8019434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019438:	4770      	bxlt	lr
 801943a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801943e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019442:	f1c2 0218 	rsb	r2, r2, #24
 8019446:	f1c2 0c20 	rsb	ip, r2, #32
 801944a:	fa10 f30c 	lsls.w	r3, r0, ip
 801944e:	fa20 f002 	lsr.w	r0, r0, r2
 8019452:	bf18      	it	ne
 8019454:	f040 0001 	orrne.w	r0, r0, #1
 8019458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801945c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019460:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019464:	ea40 000c 	orr.w	r0, r0, ip
 8019468:	fa23 f302 	lsr.w	r3, r3, r2
 801946c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019470:	e7cc      	b.n	801940c <__aeabi_d2f+0x14>
 8019472:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019476:	d107      	bne.n	8019488 <__aeabi_d2f+0x90>
 8019478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801947c:	bf1e      	ittt	ne
 801947e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019486:	4770      	bxne	lr
 8019488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801948c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019494:	4770      	bx	lr
 8019496:	bf00      	nop

08019498 <__aeabi_d2lz>:
 8019498:	b538      	push	{r3, r4, r5, lr}
 801949a:	2200      	movs	r2, #0
 801949c:	2300      	movs	r3, #0
 801949e:	4604      	mov	r4, r0
 80194a0:	460d      	mov	r5, r1
 80194a2:	f7ff ff23 	bl	80192ec <__aeabi_dcmplt>
 80194a6:	b928      	cbnz	r0, 80194b4 <__aeabi_d2lz+0x1c>
 80194a8:	4620      	mov	r0, r4
 80194aa:	4629      	mov	r1, r5
 80194ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194b0:	f000 b80a 	b.w	80194c8 <__aeabi_d2ulz>
 80194b4:	4620      	mov	r0, r4
 80194b6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80194ba:	f000 f805 	bl	80194c8 <__aeabi_d2ulz>
 80194be:	4240      	negs	r0, r0
 80194c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80194c4:	bd38      	pop	{r3, r4, r5, pc}
 80194c6:	bf00      	nop

080194c8 <__aeabi_d2ulz>:
 80194c8:	b5d0      	push	{r4, r6, r7, lr}
 80194ca:	4b0c      	ldr	r3, [pc, #48]	; (80194fc <__aeabi_d2ulz+0x34>)
 80194cc:	2200      	movs	r2, #0
 80194ce:	4606      	mov	r6, r0
 80194d0:	460f      	mov	r7, r1
 80194d2:	f7ff fc99 	bl	8018e08 <__aeabi_dmul>
 80194d6:	f7ff ff6f 	bl	80193b8 <__aeabi_d2uiz>
 80194da:	4604      	mov	r4, r0
 80194dc:	f7ff fc1a 	bl	8018d14 <__aeabi_ui2d>
 80194e0:	4b07      	ldr	r3, [pc, #28]	; (8019500 <__aeabi_d2ulz+0x38>)
 80194e2:	2200      	movs	r2, #0
 80194e4:	f7ff fc90 	bl	8018e08 <__aeabi_dmul>
 80194e8:	4602      	mov	r2, r0
 80194ea:	460b      	mov	r3, r1
 80194ec:	4630      	mov	r0, r6
 80194ee:	4639      	mov	r1, r7
 80194f0:	f7ff fad2 	bl	8018a98 <__aeabi_dsub>
 80194f4:	f7ff ff60 	bl	80193b8 <__aeabi_d2uiz>
 80194f8:	4621      	mov	r1, r4
 80194fa:	bdd0      	pop	{r4, r6, r7, pc}
 80194fc:	3df00000 	.word	0x3df00000
 8019500:	41f00000 	.word	0x41f00000

08019504 <__aeabi_uldivmod>:
 8019504:	b953      	cbnz	r3, 801951c <__aeabi_uldivmod+0x18>
 8019506:	b94a      	cbnz	r2, 801951c <__aeabi_uldivmod+0x18>
 8019508:	2900      	cmp	r1, #0
 801950a:	bf08      	it	eq
 801950c:	2800      	cmpeq	r0, #0
 801950e:	bf1c      	itt	ne
 8019510:	f04f 31ff 	movne.w	r1, #4294967295
 8019514:	f04f 30ff 	movne.w	r0, #4294967295
 8019518:	f000 b974 	b.w	8019804 <__aeabi_idiv0>
 801951c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019520:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019524:	f000 f806 	bl	8019534 <__udivmoddi4>
 8019528:	f8dd e004 	ldr.w	lr, [sp, #4]
 801952c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019530:	b004      	add	sp, #16
 8019532:	4770      	bx	lr

08019534 <__udivmoddi4>:
 8019534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019538:	9d08      	ldr	r5, [sp, #32]
 801953a:	4604      	mov	r4, r0
 801953c:	468e      	mov	lr, r1
 801953e:	2b00      	cmp	r3, #0
 8019540:	d14d      	bne.n	80195de <__udivmoddi4+0xaa>
 8019542:	428a      	cmp	r2, r1
 8019544:	4694      	mov	ip, r2
 8019546:	d969      	bls.n	801961c <__udivmoddi4+0xe8>
 8019548:	fab2 f282 	clz	r2, r2
 801954c:	b152      	cbz	r2, 8019564 <__udivmoddi4+0x30>
 801954e:	fa01 f302 	lsl.w	r3, r1, r2
 8019552:	f1c2 0120 	rsb	r1, r2, #32
 8019556:	fa20 f101 	lsr.w	r1, r0, r1
 801955a:	fa0c fc02 	lsl.w	ip, ip, r2
 801955e:	ea41 0e03 	orr.w	lr, r1, r3
 8019562:	4094      	lsls	r4, r2
 8019564:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8019568:	0c21      	lsrs	r1, r4, #16
 801956a:	fbbe f6f8 	udiv	r6, lr, r8
 801956e:	fa1f f78c 	uxth.w	r7, ip
 8019572:	fb08 e316 	mls	r3, r8, r6, lr
 8019576:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801957a:	fb06 f107 	mul.w	r1, r6, r7
 801957e:	4299      	cmp	r1, r3
 8019580:	d90a      	bls.n	8019598 <__udivmoddi4+0x64>
 8019582:	eb1c 0303 	adds.w	r3, ip, r3
 8019586:	f106 30ff 	add.w	r0, r6, #4294967295
 801958a:	f080 811f 	bcs.w	80197cc <__udivmoddi4+0x298>
 801958e:	4299      	cmp	r1, r3
 8019590:	f240 811c 	bls.w	80197cc <__udivmoddi4+0x298>
 8019594:	3e02      	subs	r6, #2
 8019596:	4463      	add	r3, ip
 8019598:	1a5b      	subs	r3, r3, r1
 801959a:	b2a4      	uxth	r4, r4
 801959c:	fbb3 f0f8 	udiv	r0, r3, r8
 80195a0:	fb08 3310 	mls	r3, r8, r0, r3
 80195a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80195a8:	fb00 f707 	mul.w	r7, r0, r7
 80195ac:	42a7      	cmp	r7, r4
 80195ae:	d90a      	bls.n	80195c6 <__udivmoddi4+0x92>
 80195b0:	eb1c 0404 	adds.w	r4, ip, r4
 80195b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80195b8:	f080 810a 	bcs.w	80197d0 <__udivmoddi4+0x29c>
 80195bc:	42a7      	cmp	r7, r4
 80195be:	f240 8107 	bls.w	80197d0 <__udivmoddi4+0x29c>
 80195c2:	4464      	add	r4, ip
 80195c4:	3802      	subs	r0, #2
 80195c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80195ca:	1be4      	subs	r4, r4, r7
 80195cc:	2600      	movs	r6, #0
 80195ce:	b11d      	cbz	r5, 80195d8 <__udivmoddi4+0xa4>
 80195d0:	40d4      	lsrs	r4, r2
 80195d2:	2300      	movs	r3, #0
 80195d4:	e9c5 4300 	strd	r4, r3, [r5]
 80195d8:	4631      	mov	r1, r6
 80195da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195de:	428b      	cmp	r3, r1
 80195e0:	d909      	bls.n	80195f6 <__udivmoddi4+0xc2>
 80195e2:	2d00      	cmp	r5, #0
 80195e4:	f000 80ef 	beq.w	80197c6 <__udivmoddi4+0x292>
 80195e8:	2600      	movs	r6, #0
 80195ea:	e9c5 0100 	strd	r0, r1, [r5]
 80195ee:	4630      	mov	r0, r6
 80195f0:	4631      	mov	r1, r6
 80195f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195f6:	fab3 f683 	clz	r6, r3
 80195fa:	2e00      	cmp	r6, #0
 80195fc:	d14a      	bne.n	8019694 <__udivmoddi4+0x160>
 80195fe:	428b      	cmp	r3, r1
 8019600:	d302      	bcc.n	8019608 <__udivmoddi4+0xd4>
 8019602:	4282      	cmp	r2, r0
 8019604:	f200 80f9 	bhi.w	80197fa <__udivmoddi4+0x2c6>
 8019608:	1a84      	subs	r4, r0, r2
 801960a:	eb61 0303 	sbc.w	r3, r1, r3
 801960e:	2001      	movs	r0, #1
 8019610:	469e      	mov	lr, r3
 8019612:	2d00      	cmp	r5, #0
 8019614:	d0e0      	beq.n	80195d8 <__udivmoddi4+0xa4>
 8019616:	e9c5 4e00 	strd	r4, lr, [r5]
 801961a:	e7dd      	b.n	80195d8 <__udivmoddi4+0xa4>
 801961c:	b902      	cbnz	r2, 8019620 <__udivmoddi4+0xec>
 801961e:	deff      	udf	#255	; 0xff
 8019620:	fab2 f282 	clz	r2, r2
 8019624:	2a00      	cmp	r2, #0
 8019626:	f040 8092 	bne.w	801974e <__udivmoddi4+0x21a>
 801962a:	eba1 010c 	sub.w	r1, r1, ip
 801962e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019632:	fa1f fe8c 	uxth.w	lr, ip
 8019636:	2601      	movs	r6, #1
 8019638:	0c20      	lsrs	r0, r4, #16
 801963a:	fbb1 f3f7 	udiv	r3, r1, r7
 801963e:	fb07 1113 	mls	r1, r7, r3, r1
 8019642:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019646:	fb0e f003 	mul.w	r0, lr, r3
 801964a:	4288      	cmp	r0, r1
 801964c:	d908      	bls.n	8019660 <__udivmoddi4+0x12c>
 801964e:	eb1c 0101 	adds.w	r1, ip, r1
 8019652:	f103 38ff 	add.w	r8, r3, #4294967295
 8019656:	d202      	bcs.n	801965e <__udivmoddi4+0x12a>
 8019658:	4288      	cmp	r0, r1
 801965a:	f200 80cb 	bhi.w	80197f4 <__udivmoddi4+0x2c0>
 801965e:	4643      	mov	r3, r8
 8019660:	1a09      	subs	r1, r1, r0
 8019662:	b2a4      	uxth	r4, r4
 8019664:	fbb1 f0f7 	udiv	r0, r1, r7
 8019668:	fb07 1110 	mls	r1, r7, r0, r1
 801966c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8019670:	fb0e fe00 	mul.w	lr, lr, r0
 8019674:	45a6      	cmp	lr, r4
 8019676:	d908      	bls.n	801968a <__udivmoddi4+0x156>
 8019678:	eb1c 0404 	adds.w	r4, ip, r4
 801967c:	f100 31ff 	add.w	r1, r0, #4294967295
 8019680:	d202      	bcs.n	8019688 <__udivmoddi4+0x154>
 8019682:	45a6      	cmp	lr, r4
 8019684:	f200 80bb 	bhi.w	80197fe <__udivmoddi4+0x2ca>
 8019688:	4608      	mov	r0, r1
 801968a:	eba4 040e 	sub.w	r4, r4, lr
 801968e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8019692:	e79c      	b.n	80195ce <__udivmoddi4+0x9a>
 8019694:	f1c6 0720 	rsb	r7, r6, #32
 8019698:	40b3      	lsls	r3, r6
 801969a:	fa22 fc07 	lsr.w	ip, r2, r7
 801969e:	ea4c 0c03 	orr.w	ip, ip, r3
 80196a2:	fa20 f407 	lsr.w	r4, r0, r7
 80196a6:	fa01 f306 	lsl.w	r3, r1, r6
 80196aa:	431c      	orrs	r4, r3
 80196ac:	40f9      	lsrs	r1, r7
 80196ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80196b2:	fa00 f306 	lsl.w	r3, r0, r6
 80196b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80196ba:	0c20      	lsrs	r0, r4, #16
 80196bc:	fa1f fe8c 	uxth.w	lr, ip
 80196c0:	fb09 1118 	mls	r1, r9, r8, r1
 80196c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80196c8:	fb08 f00e 	mul.w	r0, r8, lr
 80196cc:	4288      	cmp	r0, r1
 80196ce:	fa02 f206 	lsl.w	r2, r2, r6
 80196d2:	d90b      	bls.n	80196ec <__udivmoddi4+0x1b8>
 80196d4:	eb1c 0101 	adds.w	r1, ip, r1
 80196d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80196dc:	f080 8088 	bcs.w	80197f0 <__udivmoddi4+0x2bc>
 80196e0:	4288      	cmp	r0, r1
 80196e2:	f240 8085 	bls.w	80197f0 <__udivmoddi4+0x2bc>
 80196e6:	f1a8 0802 	sub.w	r8, r8, #2
 80196ea:	4461      	add	r1, ip
 80196ec:	1a09      	subs	r1, r1, r0
 80196ee:	b2a4      	uxth	r4, r4
 80196f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80196f4:	fb09 1110 	mls	r1, r9, r0, r1
 80196f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80196fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8019700:	458e      	cmp	lr, r1
 8019702:	d908      	bls.n	8019716 <__udivmoddi4+0x1e2>
 8019704:	eb1c 0101 	adds.w	r1, ip, r1
 8019708:	f100 34ff 	add.w	r4, r0, #4294967295
 801970c:	d26c      	bcs.n	80197e8 <__udivmoddi4+0x2b4>
 801970e:	458e      	cmp	lr, r1
 8019710:	d96a      	bls.n	80197e8 <__udivmoddi4+0x2b4>
 8019712:	3802      	subs	r0, #2
 8019714:	4461      	add	r1, ip
 8019716:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801971a:	fba0 9402 	umull	r9, r4, r0, r2
 801971e:	eba1 010e 	sub.w	r1, r1, lr
 8019722:	42a1      	cmp	r1, r4
 8019724:	46c8      	mov	r8, r9
 8019726:	46a6      	mov	lr, r4
 8019728:	d356      	bcc.n	80197d8 <__udivmoddi4+0x2a4>
 801972a:	d053      	beq.n	80197d4 <__udivmoddi4+0x2a0>
 801972c:	b15d      	cbz	r5, 8019746 <__udivmoddi4+0x212>
 801972e:	ebb3 0208 	subs.w	r2, r3, r8
 8019732:	eb61 010e 	sbc.w	r1, r1, lr
 8019736:	fa01 f707 	lsl.w	r7, r1, r7
 801973a:	fa22 f306 	lsr.w	r3, r2, r6
 801973e:	40f1      	lsrs	r1, r6
 8019740:	431f      	orrs	r7, r3
 8019742:	e9c5 7100 	strd	r7, r1, [r5]
 8019746:	2600      	movs	r6, #0
 8019748:	4631      	mov	r1, r6
 801974a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801974e:	f1c2 0320 	rsb	r3, r2, #32
 8019752:	40d8      	lsrs	r0, r3
 8019754:	fa0c fc02 	lsl.w	ip, ip, r2
 8019758:	fa21 f303 	lsr.w	r3, r1, r3
 801975c:	4091      	lsls	r1, r2
 801975e:	4301      	orrs	r1, r0
 8019760:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019764:	fa1f fe8c 	uxth.w	lr, ip
 8019768:	fbb3 f0f7 	udiv	r0, r3, r7
 801976c:	fb07 3610 	mls	r6, r7, r0, r3
 8019770:	0c0b      	lsrs	r3, r1, #16
 8019772:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019776:	fb00 f60e 	mul.w	r6, r0, lr
 801977a:	429e      	cmp	r6, r3
 801977c:	fa04 f402 	lsl.w	r4, r4, r2
 8019780:	d908      	bls.n	8019794 <__udivmoddi4+0x260>
 8019782:	eb1c 0303 	adds.w	r3, ip, r3
 8019786:	f100 38ff 	add.w	r8, r0, #4294967295
 801978a:	d22f      	bcs.n	80197ec <__udivmoddi4+0x2b8>
 801978c:	429e      	cmp	r6, r3
 801978e:	d92d      	bls.n	80197ec <__udivmoddi4+0x2b8>
 8019790:	3802      	subs	r0, #2
 8019792:	4463      	add	r3, ip
 8019794:	1b9b      	subs	r3, r3, r6
 8019796:	b289      	uxth	r1, r1
 8019798:	fbb3 f6f7 	udiv	r6, r3, r7
 801979c:	fb07 3316 	mls	r3, r7, r6, r3
 80197a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80197a4:	fb06 f30e 	mul.w	r3, r6, lr
 80197a8:	428b      	cmp	r3, r1
 80197aa:	d908      	bls.n	80197be <__udivmoddi4+0x28a>
 80197ac:	eb1c 0101 	adds.w	r1, ip, r1
 80197b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80197b4:	d216      	bcs.n	80197e4 <__udivmoddi4+0x2b0>
 80197b6:	428b      	cmp	r3, r1
 80197b8:	d914      	bls.n	80197e4 <__udivmoddi4+0x2b0>
 80197ba:	3e02      	subs	r6, #2
 80197bc:	4461      	add	r1, ip
 80197be:	1ac9      	subs	r1, r1, r3
 80197c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80197c4:	e738      	b.n	8019638 <__udivmoddi4+0x104>
 80197c6:	462e      	mov	r6, r5
 80197c8:	4628      	mov	r0, r5
 80197ca:	e705      	b.n	80195d8 <__udivmoddi4+0xa4>
 80197cc:	4606      	mov	r6, r0
 80197ce:	e6e3      	b.n	8019598 <__udivmoddi4+0x64>
 80197d0:	4618      	mov	r0, r3
 80197d2:	e6f8      	b.n	80195c6 <__udivmoddi4+0x92>
 80197d4:	454b      	cmp	r3, r9
 80197d6:	d2a9      	bcs.n	801972c <__udivmoddi4+0x1f8>
 80197d8:	ebb9 0802 	subs.w	r8, r9, r2
 80197dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80197e0:	3801      	subs	r0, #1
 80197e2:	e7a3      	b.n	801972c <__udivmoddi4+0x1f8>
 80197e4:	4646      	mov	r6, r8
 80197e6:	e7ea      	b.n	80197be <__udivmoddi4+0x28a>
 80197e8:	4620      	mov	r0, r4
 80197ea:	e794      	b.n	8019716 <__udivmoddi4+0x1e2>
 80197ec:	4640      	mov	r0, r8
 80197ee:	e7d1      	b.n	8019794 <__udivmoddi4+0x260>
 80197f0:	46d0      	mov	r8, sl
 80197f2:	e77b      	b.n	80196ec <__udivmoddi4+0x1b8>
 80197f4:	3b02      	subs	r3, #2
 80197f6:	4461      	add	r1, ip
 80197f8:	e732      	b.n	8019660 <__udivmoddi4+0x12c>
 80197fa:	4630      	mov	r0, r6
 80197fc:	e709      	b.n	8019612 <__udivmoddi4+0xde>
 80197fe:	4464      	add	r4, ip
 8019800:	3802      	subs	r0, #2
 8019802:	e742      	b.n	801968a <__udivmoddi4+0x156>

08019804 <__aeabi_idiv0>:
 8019804:	4770      	bx	lr
 8019806:	bf00      	nop

08019808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801980c:	480d      	ldr	r0, [pc, #52]	; (8019844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801980e:	490e      	ldr	r1, [pc, #56]	; (8019848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019810:	4a0e      	ldr	r2, [pc, #56]	; (801984c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019814:	e002      	b.n	801981c <LoopCopyDataInit>

08019816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801981a:	3304      	adds	r3, #4

0801981c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801981c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801981e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019820:	d3f9      	bcc.n	8019816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019822:	4a0b      	ldr	r2, [pc, #44]	; (8019850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019824:	4c0b      	ldr	r4, [pc, #44]	; (8019854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019828:	e001      	b.n	801982e <LoopFillZerobss>

0801982a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801982a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801982c:	3204      	adds	r2, #4

0801982e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801982e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019830:	d3fb      	bcc.n	801982a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019832:	f7ec fd13 	bl	800625c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019836:	f000 f81b 	bl	8019870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801983a:	f7e8 f88d 	bl	8001958 <main>
  bx  lr    
 801983e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019848:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 801984c:	080526a8 	.word	0x080526a8
  ldr r2, =_sbss
 8019850:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019854:	20000dcc 	.word	0x20000dcc

08019858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019858:	e7fe      	b.n	8019858 <ADC_IRQHandler>

0801985a <atoi>:
 801985a:	220a      	movs	r2, #10
 801985c:	2100      	movs	r1, #0
 801985e:	f001 bd7f 	b.w	801b360 <strtol>
	...

08019864 <__errno>:
 8019864:	4b01      	ldr	r3, [pc, #4]	; (801986c <__errno+0x8>)
 8019866:	6818      	ldr	r0, [r3, #0]
 8019868:	4770      	bx	lr
 801986a:	bf00      	nop
 801986c:	20000064 	.word	0x20000064

08019870 <__libc_init_array>:
 8019870:	b570      	push	{r4, r5, r6, lr}
 8019872:	4d0d      	ldr	r5, [pc, #52]	; (80198a8 <__libc_init_array+0x38>)
 8019874:	4c0d      	ldr	r4, [pc, #52]	; (80198ac <__libc_init_array+0x3c>)
 8019876:	1b64      	subs	r4, r4, r5
 8019878:	10a4      	asrs	r4, r4, #2
 801987a:	2600      	movs	r6, #0
 801987c:	42a6      	cmp	r6, r4
 801987e:	d109      	bne.n	8019894 <__libc_init_array+0x24>
 8019880:	4d0b      	ldr	r5, [pc, #44]	; (80198b0 <__libc_init_array+0x40>)
 8019882:	4c0c      	ldr	r4, [pc, #48]	; (80198b4 <__libc_init_array+0x44>)
 8019884:	f005 fc46 	bl	801f114 <_init>
 8019888:	1b64      	subs	r4, r4, r5
 801988a:	10a4      	asrs	r4, r4, #2
 801988c:	2600      	movs	r6, #0
 801988e:	42a6      	cmp	r6, r4
 8019890:	d105      	bne.n	801989e <__libc_init_array+0x2e>
 8019892:	bd70      	pop	{r4, r5, r6, pc}
 8019894:	f855 3b04 	ldr.w	r3, [r5], #4
 8019898:	4798      	blx	r3
 801989a:	3601      	adds	r6, #1
 801989c:	e7ee      	b.n	801987c <__libc_init_array+0xc>
 801989e:	f855 3b04 	ldr.w	r3, [r5], #4
 80198a2:	4798      	blx	r3
 80198a4:	3601      	adds	r6, #1
 80198a6:	e7f2      	b.n	801988e <__libc_init_array+0x1e>
 80198a8:	080526a0 	.word	0x080526a0
 80198ac:	080526a0 	.word	0x080526a0
 80198b0:	080526a0 	.word	0x080526a0
 80198b4:	080526a4 	.word	0x080526a4

080198b8 <memset>:
 80198b8:	4402      	add	r2, r0
 80198ba:	4603      	mov	r3, r0
 80198bc:	4293      	cmp	r3, r2
 80198be:	d100      	bne.n	80198c2 <memset+0xa>
 80198c0:	4770      	bx	lr
 80198c2:	f803 1b01 	strb.w	r1, [r3], #1
 80198c6:	e7f9      	b.n	80198bc <memset+0x4>

080198c8 <__cvt>:
 80198c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80198cc:	ec55 4b10 	vmov	r4, r5, d0
 80198d0:	2d00      	cmp	r5, #0
 80198d2:	460e      	mov	r6, r1
 80198d4:	4619      	mov	r1, r3
 80198d6:	462b      	mov	r3, r5
 80198d8:	bfbb      	ittet	lt
 80198da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80198de:	461d      	movlt	r5, r3
 80198e0:	2300      	movge	r3, #0
 80198e2:	232d      	movlt	r3, #45	; 0x2d
 80198e4:	700b      	strb	r3, [r1, #0]
 80198e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80198ec:	4691      	mov	r9, r2
 80198ee:	f023 0820 	bic.w	r8, r3, #32
 80198f2:	bfbc      	itt	lt
 80198f4:	4622      	movlt	r2, r4
 80198f6:	4614      	movlt	r4, r2
 80198f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80198fc:	d005      	beq.n	801990a <__cvt+0x42>
 80198fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019902:	d100      	bne.n	8019906 <__cvt+0x3e>
 8019904:	3601      	adds	r6, #1
 8019906:	2102      	movs	r1, #2
 8019908:	e000      	b.n	801990c <__cvt+0x44>
 801990a:	2103      	movs	r1, #3
 801990c:	ab03      	add	r3, sp, #12
 801990e:	9301      	str	r3, [sp, #4]
 8019910:	ab02      	add	r3, sp, #8
 8019912:	9300      	str	r3, [sp, #0]
 8019914:	ec45 4b10 	vmov	d0, r4, r5
 8019918:	4653      	mov	r3, sl
 801991a:	4632      	mov	r2, r6
 801991c:	f001 fdb8 	bl	801b490 <_dtoa_r>
 8019920:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019924:	4607      	mov	r7, r0
 8019926:	d102      	bne.n	801992e <__cvt+0x66>
 8019928:	f019 0f01 	tst.w	r9, #1
 801992c:	d022      	beq.n	8019974 <__cvt+0xac>
 801992e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019932:	eb07 0906 	add.w	r9, r7, r6
 8019936:	d110      	bne.n	801995a <__cvt+0x92>
 8019938:	783b      	ldrb	r3, [r7, #0]
 801993a:	2b30      	cmp	r3, #48	; 0x30
 801993c:	d10a      	bne.n	8019954 <__cvt+0x8c>
 801993e:	2200      	movs	r2, #0
 8019940:	2300      	movs	r3, #0
 8019942:	4620      	mov	r0, r4
 8019944:	4629      	mov	r1, r5
 8019946:	f7ff fcc7 	bl	80192d8 <__aeabi_dcmpeq>
 801994a:	b918      	cbnz	r0, 8019954 <__cvt+0x8c>
 801994c:	f1c6 0601 	rsb	r6, r6, #1
 8019950:	f8ca 6000 	str.w	r6, [sl]
 8019954:	f8da 3000 	ldr.w	r3, [sl]
 8019958:	4499      	add	r9, r3
 801995a:	2200      	movs	r2, #0
 801995c:	2300      	movs	r3, #0
 801995e:	4620      	mov	r0, r4
 8019960:	4629      	mov	r1, r5
 8019962:	f7ff fcb9 	bl	80192d8 <__aeabi_dcmpeq>
 8019966:	b108      	cbz	r0, 801996c <__cvt+0xa4>
 8019968:	f8cd 900c 	str.w	r9, [sp, #12]
 801996c:	2230      	movs	r2, #48	; 0x30
 801996e:	9b03      	ldr	r3, [sp, #12]
 8019970:	454b      	cmp	r3, r9
 8019972:	d307      	bcc.n	8019984 <__cvt+0xbc>
 8019974:	9b03      	ldr	r3, [sp, #12]
 8019976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019978:	1bdb      	subs	r3, r3, r7
 801997a:	4638      	mov	r0, r7
 801997c:	6013      	str	r3, [r2, #0]
 801997e:	b004      	add	sp, #16
 8019980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019984:	1c59      	adds	r1, r3, #1
 8019986:	9103      	str	r1, [sp, #12]
 8019988:	701a      	strb	r2, [r3, #0]
 801998a:	e7f0      	b.n	801996e <__cvt+0xa6>

0801998c <__exponent>:
 801998c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801998e:	4603      	mov	r3, r0
 8019990:	2900      	cmp	r1, #0
 8019992:	bfb8      	it	lt
 8019994:	4249      	neglt	r1, r1
 8019996:	f803 2b02 	strb.w	r2, [r3], #2
 801999a:	bfb4      	ite	lt
 801999c:	222d      	movlt	r2, #45	; 0x2d
 801999e:	222b      	movge	r2, #43	; 0x2b
 80199a0:	2909      	cmp	r1, #9
 80199a2:	7042      	strb	r2, [r0, #1]
 80199a4:	dd2a      	ble.n	80199fc <__exponent+0x70>
 80199a6:	f10d 0407 	add.w	r4, sp, #7
 80199aa:	46a4      	mov	ip, r4
 80199ac:	270a      	movs	r7, #10
 80199ae:	46a6      	mov	lr, r4
 80199b0:	460a      	mov	r2, r1
 80199b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80199b6:	fb07 1516 	mls	r5, r7, r6, r1
 80199ba:	3530      	adds	r5, #48	; 0x30
 80199bc:	2a63      	cmp	r2, #99	; 0x63
 80199be:	f104 34ff 	add.w	r4, r4, #4294967295
 80199c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80199c6:	4631      	mov	r1, r6
 80199c8:	dcf1      	bgt.n	80199ae <__exponent+0x22>
 80199ca:	3130      	adds	r1, #48	; 0x30
 80199cc:	f1ae 0502 	sub.w	r5, lr, #2
 80199d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80199d4:	1c44      	adds	r4, r0, #1
 80199d6:	4629      	mov	r1, r5
 80199d8:	4561      	cmp	r1, ip
 80199da:	d30a      	bcc.n	80199f2 <__exponent+0x66>
 80199dc:	f10d 0209 	add.w	r2, sp, #9
 80199e0:	eba2 020e 	sub.w	r2, r2, lr
 80199e4:	4565      	cmp	r5, ip
 80199e6:	bf88      	it	hi
 80199e8:	2200      	movhi	r2, #0
 80199ea:	4413      	add	r3, r2
 80199ec:	1a18      	subs	r0, r3, r0
 80199ee:	b003      	add	sp, #12
 80199f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80199fa:	e7ed      	b.n	80199d8 <__exponent+0x4c>
 80199fc:	2330      	movs	r3, #48	; 0x30
 80199fe:	3130      	adds	r1, #48	; 0x30
 8019a00:	7083      	strb	r3, [r0, #2]
 8019a02:	70c1      	strb	r1, [r0, #3]
 8019a04:	1d03      	adds	r3, r0, #4
 8019a06:	e7f1      	b.n	80199ec <__exponent+0x60>

08019a08 <_printf_float>:
 8019a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a0c:	ed2d 8b02 	vpush	{d8}
 8019a10:	b08d      	sub	sp, #52	; 0x34
 8019a12:	460c      	mov	r4, r1
 8019a14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019a18:	4616      	mov	r6, r2
 8019a1a:	461f      	mov	r7, r3
 8019a1c:	4605      	mov	r5, r0
 8019a1e:	f002 fe95 	bl	801c74c <_localeconv_r>
 8019a22:	f8d0 a000 	ldr.w	sl, [r0]
 8019a26:	4650      	mov	r0, sl
 8019a28:	f7fe ffd8 	bl	80189dc <strlen>
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8019a30:	6823      	ldr	r3, [r4, #0]
 8019a32:	9305      	str	r3, [sp, #20]
 8019a34:	f8d8 3000 	ldr.w	r3, [r8]
 8019a38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019a3c:	3307      	adds	r3, #7
 8019a3e:	f023 0307 	bic.w	r3, r3, #7
 8019a42:	f103 0208 	add.w	r2, r3, #8
 8019a46:	f8c8 2000 	str.w	r2, [r8]
 8019a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019a52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019a56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019a5a:	9307      	str	r3, [sp, #28]
 8019a5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019a60:	ee08 0a10 	vmov	s16, r0
 8019a64:	4b9f      	ldr	r3, [pc, #636]	; (8019ce4 <_printf_float+0x2dc>)
 8019a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a6e:	f7ff fc65 	bl	801933c <__aeabi_dcmpun>
 8019a72:	bb88      	cbnz	r0, 8019ad8 <_printf_float+0xd0>
 8019a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019a78:	4b9a      	ldr	r3, [pc, #616]	; (8019ce4 <_printf_float+0x2dc>)
 8019a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a7e:	f7ff fc3f 	bl	8019300 <__aeabi_dcmple>
 8019a82:	bb48      	cbnz	r0, 8019ad8 <_printf_float+0xd0>
 8019a84:	2200      	movs	r2, #0
 8019a86:	2300      	movs	r3, #0
 8019a88:	4640      	mov	r0, r8
 8019a8a:	4649      	mov	r1, r9
 8019a8c:	f7ff fc2e 	bl	80192ec <__aeabi_dcmplt>
 8019a90:	b110      	cbz	r0, 8019a98 <_printf_float+0x90>
 8019a92:	232d      	movs	r3, #45	; 0x2d
 8019a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a98:	4b93      	ldr	r3, [pc, #588]	; (8019ce8 <_printf_float+0x2e0>)
 8019a9a:	4894      	ldr	r0, [pc, #592]	; (8019cec <_printf_float+0x2e4>)
 8019a9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019aa0:	bf94      	ite	ls
 8019aa2:	4698      	movls	r8, r3
 8019aa4:	4680      	movhi	r8, r0
 8019aa6:	2303      	movs	r3, #3
 8019aa8:	6123      	str	r3, [r4, #16]
 8019aaa:	9b05      	ldr	r3, [sp, #20]
 8019aac:	f023 0204 	bic.w	r2, r3, #4
 8019ab0:	6022      	str	r2, [r4, #0]
 8019ab2:	f04f 0900 	mov.w	r9, #0
 8019ab6:	9700      	str	r7, [sp, #0]
 8019ab8:	4633      	mov	r3, r6
 8019aba:	aa0b      	add	r2, sp, #44	; 0x2c
 8019abc:	4621      	mov	r1, r4
 8019abe:	4628      	mov	r0, r5
 8019ac0:	f000 f9d8 	bl	8019e74 <_printf_common>
 8019ac4:	3001      	adds	r0, #1
 8019ac6:	f040 8090 	bne.w	8019bea <_printf_float+0x1e2>
 8019aca:	f04f 30ff 	mov.w	r0, #4294967295
 8019ace:	b00d      	add	sp, #52	; 0x34
 8019ad0:	ecbd 8b02 	vpop	{d8}
 8019ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ad8:	4642      	mov	r2, r8
 8019ada:	464b      	mov	r3, r9
 8019adc:	4640      	mov	r0, r8
 8019ade:	4649      	mov	r1, r9
 8019ae0:	f7ff fc2c 	bl	801933c <__aeabi_dcmpun>
 8019ae4:	b140      	cbz	r0, 8019af8 <_printf_float+0xf0>
 8019ae6:	464b      	mov	r3, r9
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	bfbc      	itt	lt
 8019aec:	232d      	movlt	r3, #45	; 0x2d
 8019aee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019af2:	487f      	ldr	r0, [pc, #508]	; (8019cf0 <_printf_float+0x2e8>)
 8019af4:	4b7f      	ldr	r3, [pc, #508]	; (8019cf4 <_printf_float+0x2ec>)
 8019af6:	e7d1      	b.n	8019a9c <_printf_float+0x94>
 8019af8:	6863      	ldr	r3, [r4, #4]
 8019afa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019afe:	9206      	str	r2, [sp, #24]
 8019b00:	1c5a      	adds	r2, r3, #1
 8019b02:	d13f      	bne.n	8019b84 <_printf_float+0x17c>
 8019b04:	2306      	movs	r3, #6
 8019b06:	6063      	str	r3, [r4, #4]
 8019b08:	9b05      	ldr	r3, [sp, #20]
 8019b0a:	6861      	ldr	r1, [r4, #4]
 8019b0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019b10:	2300      	movs	r3, #0
 8019b12:	9303      	str	r3, [sp, #12]
 8019b14:	ab0a      	add	r3, sp, #40	; 0x28
 8019b16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019b1a:	ab09      	add	r3, sp, #36	; 0x24
 8019b1c:	ec49 8b10 	vmov	d0, r8, r9
 8019b20:	9300      	str	r3, [sp, #0]
 8019b22:	6022      	str	r2, [r4, #0]
 8019b24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019b28:	4628      	mov	r0, r5
 8019b2a:	f7ff fecd 	bl	80198c8 <__cvt>
 8019b2e:	9b06      	ldr	r3, [sp, #24]
 8019b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b32:	2b47      	cmp	r3, #71	; 0x47
 8019b34:	4680      	mov	r8, r0
 8019b36:	d108      	bne.n	8019b4a <_printf_float+0x142>
 8019b38:	1cc8      	adds	r0, r1, #3
 8019b3a:	db02      	blt.n	8019b42 <_printf_float+0x13a>
 8019b3c:	6863      	ldr	r3, [r4, #4]
 8019b3e:	4299      	cmp	r1, r3
 8019b40:	dd41      	ble.n	8019bc6 <_printf_float+0x1be>
 8019b42:	f1ab 0b02 	sub.w	fp, fp, #2
 8019b46:	fa5f fb8b 	uxtb.w	fp, fp
 8019b4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019b4e:	d820      	bhi.n	8019b92 <_printf_float+0x18a>
 8019b50:	3901      	subs	r1, #1
 8019b52:	465a      	mov	r2, fp
 8019b54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019b58:	9109      	str	r1, [sp, #36]	; 0x24
 8019b5a:	f7ff ff17 	bl	801998c <__exponent>
 8019b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b60:	1813      	adds	r3, r2, r0
 8019b62:	2a01      	cmp	r2, #1
 8019b64:	4681      	mov	r9, r0
 8019b66:	6123      	str	r3, [r4, #16]
 8019b68:	dc02      	bgt.n	8019b70 <_printf_float+0x168>
 8019b6a:	6822      	ldr	r2, [r4, #0]
 8019b6c:	07d2      	lsls	r2, r2, #31
 8019b6e:	d501      	bpl.n	8019b74 <_printf_float+0x16c>
 8019b70:	3301      	adds	r3, #1
 8019b72:	6123      	str	r3, [r4, #16]
 8019b74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d09c      	beq.n	8019ab6 <_printf_float+0xae>
 8019b7c:	232d      	movs	r3, #45	; 0x2d
 8019b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b82:	e798      	b.n	8019ab6 <_printf_float+0xae>
 8019b84:	9a06      	ldr	r2, [sp, #24]
 8019b86:	2a47      	cmp	r2, #71	; 0x47
 8019b88:	d1be      	bne.n	8019b08 <_printf_float+0x100>
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d1bc      	bne.n	8019b08 <_printf_float+0x100>
 8019b8e:	2301      	movs	r3, #1
 8019b90:	e7b9      	b.n	8019b06 <_printf_float+0xfe>
 8019b92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019b96:	d118      	bne.n	8019bca <_printf_float+0x1c2>
 8019b98:	2900      	cmp	r1, #0
 8019b9a:	6863      	ldr	r3, [r4, #4]
 8019b9c:	dd0b      	ble.n	8019bb6 <_printf_float+0x1ae>
 8019b9e:	6121      	str	r1, [r4, #16]
 8019ba0:	b913      	cbnz	r3, 8019ba8 <_printf_float+0x1a0>
 8019ba2:	6822      	ldr	r2, [r4, #0]
 8019ba4:	07d0      	lsls	r0, r2, #31
 8019ba6:	d502      	bpl.n	8019bae <_printf_float+0x1a6>
 8019ba8:	3301      	adds	r3, #1
 8019baa:	440b      	add	r3, r1
 8019bac:	6123      	str	r3, [r4, #16]
 8019bae:	65a1      	str	r1, [r4, #88]	; 0x58
 8019bb0:	f04f 0900 	mov.w	r9, #0
 8019bb4:	e7de      	b.n	8019b74 <_printf_float+0x16c>
 8019bb6:	b913      	cbnz	r3, 8019bbe <_printf_float+0x1b6>
 8019bb8:	6822      	ldr	r2, [r4, #0]
 8019bba:	07d2      	lsls	r2, r2, #31
 8019bbc:	d501      	bpl.n	8019bc2 <_printf_float+0x1ba>
 8019bbe:	3302      	adds	r3, #2
 8019bc0:	e7f4      	b.n	8019bac <_printf_float+0x1a4>
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	e7f2      	b.n	8019bac <_printf_float+0x1a4>
 8019bc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bcc:	4299      	cmp	r1, r3
 8019bce:	db05      	blt.n	8019bdc <_printf_float+0x1d4>
 8019bd0:	6823      	ldr	r3, [r4, #0]
 8019bd2:	6121      	str	r1, [r4, #16]
 8019bd4:	07d8      	lsls	r0, r3, #31
 8019bd6:	d5ea      	bpl.n	8019bae <_printf_float+0x1a6>
 8019bd8:	1c4b      	adds	r3, r1, #1
 8019bda:	e7e7      	b.n	8019bac <_printf_float+0x1a4>
 8019bdc:	2900      	cmp	r1, #0
 8019bde:	bfd4      	ite	le
 8019be0:	f1c1 0202 	rsble	r2, r1, #2
 8019be4:	2201      	movgt	r2, #1
 8019be6:	4413      	add	r3, r2
 8019be8:	e7e0      	b.n	8019bac <_printf_float+0x1a4>
 8019bea:	6823      	ldr	r3, [r4, #0]
 8019bec:	055a      	lsls	r2, r3, #21
 8019bee:	d407      	bmi.n	8019c00 <_printf_float+0x1f8>
 8019bf0:	6923      	ldr	r3, [r4, #16]
 8019bf2:	4642      	mov	r2, r8
 8019bf4:	4631      	mov	r1, r6
 8019bf6:	4628      	mov	r0, r5
 8019bf8:	47b8      	blx	r7
 8019bfa:	3001      	adds	r0, #1
 8019bfc:	d12c      	bne.n	8019c58 <_printf_float+0x250>
 8019bfe:	e764      	b.n	8019aca <_printf_float+0xc2>
 8019c00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019c04:	f240 80e0 	bls.w	8019dc8 <_printf_float+0x3c0>
 8019c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	2300      	movs	r3, #0
 8019c10:	f7ff fb62 	bl	80192d8 <__aeabi_dcmpeq>
 8019c14:	2800      	cmp	r0, #0
 8019c16:	d034      	beq.n	8019c82 <_printf_float+0x27a>
 8019c18:	4a37      	ldr	r2, [pc, #220]	; (8019cf8 <_printf_float+0x2f0>)
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	4631      	mov	r1, r6
 8019c1e:	4628      	mov	r0, r5
 8019c20:	47b8      	blx	r7
 8019c22:	3001      	adds	r0, #1
 8019c24:	f43f af51 	beq.w	8019aca <_printf_float+0xc2>
 8019c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c2c:	429a      	cmp	r2, r3
 8019c2e:	db02      	blt.n	8019c36 <_printf_float+0x22e>
 8019c30:	6823      	ldr	r3, [r4, #0]
 8019c32:	07d8      	lsls	r0, r3, #31
 8019c34:	d510      	bpl.n	8019c58 <_printf_float+0x250>
 8019c36:	ee18 3a10 	vmov	r3, s16
 8019c3a:	4652      	mov	r2, sl
 8019c3c:	4631      	mov	r1, r6
 8019c3e:	4628      	mov	r0, r5
 8019c40:	47b8      	blx	r7
 8019c42:	3001      	adds	r0, #1
 8019c44:	f43f af41 	beq.w	8019aca <_printf_float+0xc2>
 8019c48:	f04f 0800 	mov.w	r8, #0
 8019c4c:	f104 091a 	add.w	r9, r4, #26
 8019c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c52:	3b01      	subs	r3, #1
 8019c54:	4543      	cmp	r3, r8
 8019c56:	dc09      	bgt.n	8019c6c <_printf_float+0x264>
 8019c58:	6823      	ldr	r3, [r4, #0]
 8019c5a:	079b      	lsls	r3, r3, #30
 8019c5c:	f100 8105 	bmi.w	8019e6a <_printf_float+0x462>
 8019c60:	68e0      	ldr	r0, [r4, #12]
 8019c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c64:	4298      	cmp	r0, r3
 8019c66:	bfb8      	it	lt
 8019c68:	4618      	movlt	r0, r3
 8019c6a:	e730      	b.n	8019ace <_printf_float+0xc6>
 8019c6c:	2301      	movs	r3, #1
 8019c6e:	464a      	mov	r2, r9
 8019c70:	4631      	mov	r1, r6
 8019c72:	4628      	mov	r0, r5
 8019c74:	47b8      	blx	r7
 8019c76:	3001      	adds	r0, #1
 8019c78:	f43f af27 	beq.w	8019aca <_printf_float+0xc2>
 8019c7c:	f108 0801 	add.w	r8, r8, #1
 8019c80:	e7e6      	b.n	8019c50 <_printf_float+0x248>
 8019c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	dc39      	bgt.n	8019cfc <_printf_float+0x2f4>
 8019c88:	4a1b      	ldr	r2, [pc, #108]	; (8019cf8 <_printf_float+0x2f0>)
 8019c8a:	2301      	movs	r3, #1
 8019c8c:	4631      	mov	r1, r6
 8019c8e:	4628      	mov	r0, r5
 8019c90:	47b8      	blx	r7
 8019c92:	3001      	adds	r0, #1
 8019c94:	f43f af19 	beq.w	8019aca <_printf_float+0xc2>
 8019c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c9c:	4313      	orrs	r3, r2
 8019c9e:	d102      	bne.n	8019ca6 <_printf_float+0x29e>
 8019ca0:	6823      	ldr	r3, [r4, #0]
 8019ca2:	07d9      	lsls	r1, r3, #31
 8019ca4:	d5d8      	bpl.n	8019c58 <_printf_float+0x250>
 8019ca6:	ee18 3a10 	vmov	r3, s16
 8019caa:	4652      	mov	r2, sl
 8019cac:	4631      	mov	r1, r6
 8019cae:	4628      	mov	r0, r5
 8019cb0:	47b8      	blx	r7
 8019cb2:	3001      	adds	r0, #1
 8019cb4:	f43f af09 	beq.w	8019aca <_printf_float+0xc2>
 8019cb8:	f04f 0900 	mov.w	r9, #0
 8019cbc:	f104 0a1a 	add.w	sl, r4, #26
 8019cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc2:	425b      	negs	r3, r3
 8019cc4:	454b      	cmp	r3, r9
 8019cc6:	dc01      	bgt.n	8019ccc <_printf_float+0x2c4>
 8019cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cca:	e792      	b.n	8019bf2 <_printf_float+0x1ea>
 8019ccc:	2301      	movs	r3, #1
 8019cce:	4652      	mov	r2, sl
 8019cd0:	4631      	mov	r1, r6
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	47b8      	blx	r7
 8019cd6:	3001      	adds	r0, #1
 8019cd8:	f43f aef7 	beq.w	8019aca <_printf_float+0xc2>
 8019cdc:	f109 0901 	add.w	r9, r9, #1
 8019ce0:	e7ee      	b.n	8019cc0 <_printf_float+0x2b8>
 8019ce2:	bf00      	nop
 8019ce4:	7fefffff 	.word	0x7fefffff
 8019ce8:	080521c4 	.word	0x080521c4
 8019cec:	080521c8 	.word	0x080521c8
 8019cf0:	080521d0 	.word	0x080521d0
 8019cf4:	080521cc 	.word	0x080521cc
 8019cf8:	080521d4 	.word	0x080521d4
 8019cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d00:	429a      	cmp	r2, r3
 8019d02:	bfa8      	it	ge
 8019d04:	461a      	movge	r2, r3
 8019d06:	2a00      	cmp	r2, #0
 8019d08:	4691      	mov	r9, r2
 8019d0a:	dc37      	bgt.n	8019d7c <_printf_float+0x374>
 8019d0c:	f04f 0b00 	mov.w	fp, #0
 8019d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d14:	f104 021a 	add.w	r2, r4, #26
 8019d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d1a:	9305      	str	r3, [sp, #20]
 8019d1c:	eba3 0309 	sub.w	r3, r3, r9
 8019d20:	455b      	cmp	r3, fp
 8019d22:	dc33      	bgt.n	8019d8c <_printf_float+0x384>
 8019d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d28:	429a      	cmp	r2, r3
 8019d2a:	db3b      	blt.n	8019da4 <_printf_float+0x39c>
 8019d2c:	6823      	ldr	r3, [r4, #0]
 8019d2e:	07da      	lsls	r2, r3, #31
 8019d30:	d438      	bmi.n	8019da4 <_printf_float+0x39c>
 8019d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d34:	9a05      	ldr	r2, [sp, #20]
 8019d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d38:	1a9a      	subs	r2, r3, r2
 8019d3a:	eba3 0901 	sub.w	r9, r3, r1
 8019d3e:	4591      	cmp	r9, r2
 8019d40:	bfa8      	it	ge
 8019d42:	4691      	movge	r9, r2
 8019d44:	f1b9 0f00 	cmp.w	r9, #0
 8019d48:	dc35      	bgt.n	8019db6 <_printf_float+0x3ae>
 8019d4a:	f04f 0800 	mov.w	r8, #0
 8019d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d52:	f104 0a1a 	add.w	sl, r4, #26
 8019d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d5a:	1a9b      	subs	r3, r3, r2
 8019d5c:	eba3 0309 	sub.w	r3, r3, r9
 8019d60:	4543      	cmp	r3, r8
 8019d62:	f77f af79 	ble.w	8019c58 <_printf_float+0x250>
 8019d66:	2301      	movs	r3, #1
 8019d68:	4652      	mov	r2, sl
 8019d6a:	4631      	mov	r1, r6
 8019d6c:	4628      	mov	r0, r5
 8019d6e:	47b8      	blx	r7
 8019d70:	3001      	adds	r0, #1
 8019d72:	f43f aeaa 	beq.w	8019aca <_printf_float+0xc2>
 8019d76:	f108 0801 	add.w	r8, r8, #1
 8019d7a:	e7ec      	b.n	8019d56 <_printf_float+0x34e>
 8019d7c:	4613      	mov	r3, r2
 8019d7e:	4631      	mov	r1, r6
 8019d80:	4642      	mov	r2, r8
 8019d82:	4628      	mov	r0, r5
 8019d84:	47b8      	blx	r7
 8019d86:	3001      	adds	r0, #1
 8019d88:	d1c0      	bne.n	8019d0c <_printf_float+0x304>
 8019d8a:	e69e      	b.n	8019aca <_printf_float+0xc2>
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	4631      	mov	r1, r6
 8019d90:	4628      	mov	r0, r5
 8019d92:	9205      	str	r2, [sp, #20]
 8019d94:	47b8      	blx	r7
 8019d96:	3001      	adds	r0, #1
 8019d98:	f43f ae97 	beq.w	8019aca <_printf_float+0xc2>
 8019d9c:	9a05      	ldr	r2, [sp, #20]
 8019d9e:	f10b 0b01 	add.w	fp, fp, #1
 8019da2:	e7b9      	b.n	8019d18 <_printf_float+0x310>
 8019da4:	ee18 3a10 	vmov	r3, s16
 8019da8:	4652      	mov	r2, sl
 8019daa:	4631      	mov	r1, r6
 8019dac:	4628      	mov	r0, r5
 8019dae:	47b8      	blx	r7
 8019db0:	3001      	adds	r0, #1
 8019db2:	d1be      	bne.n	8019d32 <_printf_float+0x32a>
 8019db4:	e689      	b.n	8019aca <_printf_float+0xc2>
 8019db6:	9a05      	ldr	r2, [sp, #20]
 8019db8:	464b      	mov	r3, r9
 8019dba:	4442      	add	r2, r8
 8019dbc:	4631      	mov	r1, r6
 8019dbe:	4628      	mov	r0, r5
 8019dc0:	47b8      	blx	r7
 8019dc2:	3001      	adds	r0, #1
 8019dc4:	d1c1      	bne.n	8019d4a <_printf_float+0x342>
 8019dc6:	e680      	b.n	8019aca <_printf_float+0xc2>
 8019dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019dca:	2a01      	cmp	r2, #1
 8019dcc:	dc01      	bgt.n	8019dd2 <_printf_float+0x3ca>
 8019dce:	07db      	lsls	r3, r3, #31
 8019dd0:	d538      	bpl.n	8019e44 <_printf_float+0x43c>
 8019dd2:	2301      	movs	r3, #1
 8019dd4:	4642      	mov	r2, r8
 8019dd6:	4631      	mov	r1, r6
 8019dd8:	4628      	mov	r0, r5
 8019dda:	47b8      	blx	r7
 8019ddc:	3001      	adds	r0, #1
 8019dde:	f43f ae74 	beq.w	8019aca <_printf_float+0xc2>
 8019de2:	ee18 3a10 	vmov	r3, s16
 8019de6:	4652      	mov	r2, sl
 8019de8:	4631      	mov	r1, r6
 8019dea:	4628      	mov	r0, r5
 8019dec:	47b8      	blx	r7
 8019dee:	3001      	adds	r0, #1
 8019df0:	f43f ae6b 	beq.w	8019aca <_printf_float+0xc2>
 8019df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019df8:	2200      	movs	r2, #0
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	f7ff fa6c 	bl	80192d8 <__aeabi_dcmpeq>
 8019e00:	b9d8      	cbnz	r0, 8019e3a <_printf_float+0x432>
 8019e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e04:	f108 0201 	add.w	r2, r8, #1
 8019e08:	3b01      	subs	r3, #1
 8019e0a:	4631      	mov	r1, r6
 8019e0c:	4628      	mov	r0, r5
 8019e0e:	47b8      	blx	r7
 8019e10:	3001      	adds	r0, #1
 8019e12:	d10e      	bne.n	8019e32 <_printf_float+0x42a>
 8019e14:	e659      	b.n	8019aca <_printf_float+0xc2>
 8019e16:	2301      	movs	r3, #1
 8019e18:	4652      	mov	r2, sl
 8019e1a:	4631      	mov	r1, r6
 8019e1c:	4628      	mov	r0, r5
 8019e1e:	47b8      	blx	r7
 8019e20:	3001      	adds	r0, #1
 8019e22:	f43f ae52 	beq.w	8019aca <_printf_float+0xc2>
 8019e26:	f108 0801 	add.w	r8, r8, #1
 8019e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e2c:	3b01      	subs	r3, #1
 8019e2e:	4543      	cmp	r3, r8
 8019e30:	dcf1      	bgt.n	8019e16 <_printf_float+0x40e>
 8019e32:	464b      	mov	r3, r9
 8019e34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019e38:	e6dc      	b.n	8019bf4 <_printf_float+0x1ec>
 8019e3a:	f04f 0800 	mov.w	r8, #0
 8019e3e:	f104 0a1a 	add.w	sl, r4, #26
 8019e42:	e7f2      	b.n	8019e2a <_printf_float+0x422>
 8019e44:	2301      	movs	r3, #1
 8019e46:	4642      	mov	r2, r8
 8019e48:	e7df      	b.n	8019e0a <_printf_float+0x402>
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	464a      	mov	r2, r9
 8019e4e:	4631      	mov	r1, r6
 8019e50:	4628      	mov	r0, r5
 8019e52:	47b8      	blx	r7
 8019e54:	3001      	adds	r0, #1
 8019e56:	f43f ae38 	beq.w	8019aca <_printf_float+0xc2>
 8019e5a:	f108 0801 	add.w	r8, r8, #1
 8019e5e:	68e3      	ldr	r3, [r4, #12]
 8019e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019e62:	1a5b      	subs	r3, r3, r1
 8019e64:	4543      	cmp	r3, r8
 8019e66:	dcf0      	bgt.n	8019e4a <_printf_float+0x442>
 8019e68:	e6fa      	b.n	8019c60 <_printf_float+0x258>
 8019e6a:	f04f 0800 	mov.w	r8, #0
 8019e6e:	f104 0919 	add.w	r9, r4, #25
 8019e72:	e7f4      	b.n	8019e5e <_printf_float+0x456>

08019e74 <_printf_common>:
 8019e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e78:	4616      	mov	r6, r2
 8019e7a:	4699      	mov	r9, r3
 8019e7c:	688a      	ldr	r2, [r1, #8]
 8019e7e:	690b      	ldr	r3, [r1, #16]
 8019e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e84:	4293      	cmp	r3, r2
 8019e86:	bfb8      	it	lt
 8019e88:	4613      	movlt	r3, r2
 8019e8a:	6033      	str	r3, [r6, #0]
 8019e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e90:	4607      	mov	r7, r0
 8019e92:	460c      	mov	r4, r1
 8019e94:	b10a      	cbz	r2, 8019e9a <_printf_common+0x26>
 8019e96:	3301      	adds	r3, #1
 8019e98:	6033      	str	r3, [r6, #0]
 8019e9a:	6823      	ldr	r3, [r4, #0]
 8019e9c:	0699      	lsls	r1, r3, #26
 8019e9e:	bf42      	ittt	mi
 8019ea0:	6833      	ldrmi	r3, [r6, #0]
 8019ea2:	3302      	addmi	r3, #2
 8019ea4:	6033      	strmi	r3, [r6, #0]
 8019ea6:	6825      	ldr	r5, [r4, #0]
 8019ea8:	f015 0506 	ands.w	r5, r5, #6
 8019eac:	d106      	bne.n	8019ebc <_printf_common+0x48>
 8019eae:	f104 0a19 	add.w	sl, r4, #25
 8019eb2:	68e3      	ldr	r3, [r4, #12]
 8019eb4:	6832      	ldr	r2, [r6, #0]
 8019eb6:	1a9b      	subs	r3, r3, r2
 8019eb8:	42ab      	cmp	r3, r5
 8019eba:	dc26      	bgt.n	8019f0a <_printf_common+0x96>
 8019ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019ec0:	1e13      	subs	r3, r2, #0
 8019ec2:	6822      	ldr	r2, [r4, #0]
 8019ec4:	bf18      	it	ne
 8019ec6:	2301      	movne	r3, #1
 8019ec8:	0692      	lsls	r2, r2, #26
 8019eca:	d42b      	bmi.n	8019f24 <_printf_common+0xb0>
 8019ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ed0:	4649      	mov	r1, r9
 8019ed2:	4638      	mov	r0, r7
 8019ed4:	47c0      	blx	r8
 8019ed6:	3001      	adds	r0, #1
 8019ed8:	d01e      	beq.n	8019f18 <_printf_common+0xa4>
 8019eda:	6823      	ldr	r3, [r4, #0]
 8019edc:	68e5      	ldr	r5, [r4, #12]
 8019ede:	6832      	ldr	r2, [r6, #0]
 8019ee0:	f003 0306 	and.w	r3, r3, #6
 8019ee4:	2b04      	cmp	r3, #4
 8019ee6:	bf08      	it	eq
 8019ee8:	1aad      	subeq	r5, r5, r2
 8019eea:	68a3      	ldr	r3, [r4, #8]
 8019eec:	6922      	ldr	r2, [r4, #16]
 8019eee:	bf0c      	ite	eq
 8019ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ef4:	2500      	movne	r5, #0
 8019ef6:	4293      	cmp	r3, r2
 8019ef8:	bfc4      	itt	gt
 8019efa:	1a9b      	subgt	r3, r3, r2
 8019efc:	18ed      	addgt	r5, r5, r3
 8019efe:	2600      	movs	r6, #0
 8019f00:	341a      	adds	r4, #26
 8019f02:	42b5      	cmp	r5, r6
 8019f04:	d11a      	bne.n	8019f3c <_printf_common+0xc8>
 8019f06:	2000      	movs	r0, #0
 8019f08:	e008      	b.n	8019f1c <_printf_common+0xa8>
 8019f0a:	2301      	movs	r3, #1
 8019f0c:	4652      	mov	r2, sl
 8019f0e:	4649      	mov	r1, r9
 8019f10:	4638      	mov	r0, r7
 8019f12:	47c0      	blx	r8
 8019f14:	3001      	adds	r0, #1
 8019f16:	d103      	bne.n	8019f20 <_printf_common+0xac>
 8019f18:	f04f 30ff 	mov.w	r0, #4294967295
 8019f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f20:	3501      	adds	r5, #1
 8019f22:	e7c6      	b.n	8019eb2 <_printf_common+0x3e>
 8019f24:	18e1      	adds	r1, r4, r3
 8019f26:	1c5a      	adds	r2, r3, #1
 8019f28:	2030      	movs	r0, #48	; 0x30
 8019f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019f2e:	4422      	add	r2, r4
 8019f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019f38:	3302      	adds	r3, #2
 8019f3a:	e7c7      	b.n	8019ecc <_printf_common+0x58>
 8019f3c:	2301      	movs	r3, #1
 8019f3e:	4622      	mov	r2, r4
 8019f40:	4649      	mov	r1, r9
 8019f42:	4638      	mov	r0, r7
 8019f44:	47c0      	blx	r8
 8019f46:	3001      	adds	r0, #1
 8019f48:	d0e6      	beq.n	8019f18 <_printf_common+0xa4>
 8019f4a:	3601      	adds	r6, #1
 8019f4c:	e7d9      	b.n	8019f02 <_printf_common+0x8e>
	...

08019f50 <_printf_i>:
 8019f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f54:	7e0f      	ldrb	r7, [r1, #24]
 8019f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019f58:	2f78      	cmp	r7, #120	; 0x78
 8019f5a:	4691      	mov	r9, r2
 8019f5c:	4680      	mov	r8, r0
 8019f5e:	460c      	mov	r4, r1
 8019f60:	469a      	mov	sl, r3
 8019f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019f66:	d807      	bhi.n	8019f78 <_printf_i+0x28>
 8019f68:	2f62      	cmp	r7, #98	; 0x62
 8019f6a:	d80a      	bhi.n	8019f82 <_printf_i+0x32>
 8019f6c:	2f00      	cmp	r7, #0
 8019f6e:	f000 80d8 	beq.w	801a122 <_printf_i+0x1d2>
 8019f72:	2f58      	cmp	r7, #88	; 0x58
 8019f74:	f000 80a3 	beq.w	801a0be <_printf_i+0x16e>
 8019f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f80:	e03a      	b.n	8019ff8 <_printf_i+0xa8>
 8019f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f86:	2b15      	cmp	r3, #21
 8019f88:	d8f6      	bhi.n	8019f78 <_printf_i+0x28>
 8019f8a:	a101      	add	r1, pc, #4	; (adr r1, 8019f90 <_printf_i+0x40>)
 8019f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f90:	08019fe9 	.word	0x08019fe9
 8019f94:	08019ffd 	.word	0x08019ffd
 8019f98:	08019f79 	.word	0x08019f79
 8019f9c:	08019f79 	.word	0x08019f79
 8019fa0:	08019f79 	.word	0x08019f79
 8019fa4:	08019f79 	.word	0x08019f79
 8019fa8:	08019ffd 	.word	0x08019ffd
 8019fac:	08019f79 	.word	0x08019f79
 8019fb0:	08019f79 	.word	0x08019f79
 8019fb4:	08019f79 	.word	0x08019f79
 8019fb8:	08019f79 	.word	0x08019f79
 8019fbc:	0801a109 	.word	0x0801a109
 8019fc0:	0801a02d 	.word	0x0801a02d
 8019fc4:	0801a0eb 	.word	0x0801a0eb
 8019fc8:	08019f79 	.word	0x08019f79
 8019fcc:	08019f79 	.word	0x08019f79
 8019fd0:	0801a12b 	.word	0x0801a12b
 8019fd4:	08019f79 	.word	0x08019f79
 8019fd8:	0801a02d 	.word	0x0801a02d
 8019fdc:	08019f79 	.word	0x08019f79
 8019fe0:	08019f79 	.word	0x08019f79
 8019fe4:	0801a0f3 	.word	0x0801a0f3
 8019fe8:	682b      	ldr	r3, [r5, #0]
 8019fea:	1d1a      	adds	r2, r3, #4
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	602a      	str	r2, [r5, #0]
 8019ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	e0a3      	b.n	801a144 <_printf_i+0x1f4>
 8019ffc:	6820      	ldr	r0, [r4, #0]
 8019ffe:	6829      	ldr	r1, [r5, #0]
 801a000:	0606      	lsls	r6, r0, #24
 801a002:	f101 0304 	add.w	r3, r1, #4
 801a006:	d50a      	bpl.n	801a01e <_printf_i+0xce>
 801a008:	680e      	ldr	r6, [r1, #0]
 801a00a:	602b      	str	r3, [r5, #0]
 801a00c:	2e00      	cmp	r6, #0
 801a00e:	da03      	bge.n	801a018 <_printf_i+0xc8>
 801a010:	232d      	movs	r3, #45	; 0x2d
 801a012:	4276      	negs	r6, r6
 801a014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a018:	485e      	ldr	r0, [pc, #376]	; (801a194 <_printf_i+0x244>)
 801a01a:	230a      	movs	r3, #10
 801a01c:	e019      	b.n	801a052 <_printf_i+0x102>
 801a01e:	680e      	ldr	r6, [r1, #0]
 801a020:	602b      	str	r3, [r5, #0]
 801a022:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a026:	bf18      	it	ne
 801a028:	b236      	sxthne	r6, r6
 801a02a:	e7ef      	b.n	801a00c <_printf_i+0xbc>
 801a02c:	682b      	ldr	r3, [r5, #0]
 801a02e:	6820      	ldr	r0, [r4, #0]
 801a030:	1d19      	adds	r1, r3, #4
 801a032:	6029      	str	r1, [r5, #0]
 801a034:	0601      	lsls	r1, r0, #24
 801a036:	d501      	bpl.n	801a03c <_printf_i+0xec>
 801a038:	681e      	ldr	r6, [r3, #0]
 801a03a:	e002      	b.n	801a042 <_printf_i+0xf2>
 801a03c:	0646      	lsls	r6, r0, #25
 801a03e:	d5fb      	bpl.n	801a038 <_printf_i+0xe8>
 801a040:	881e      	ldrh	r6, [r3, #0]
 801a042:	4854      	ldr	r0, [pc, #336]	; (801a194 <_printf_i+0x244>)
 801a044:	2f6f      	cmp	r7, #111	; 0x6f
 801a046:	bf0c      	ite	eq
 801a048:	2308      	moveq	r3, #8
 801a04a:	230a      	movne	r3, #10
 801a04c:	2100      	movs	r1, #0
 801a04e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a052:	6865      	ldr	r5, [r4, #4]
 801a054:	60a5      	str	r5, [r4, #8]
 801a056:	2d00      	cmp	r5, #0
 801a058:	bfa2      	ittt	ge
 801a05a:	6821      	ldrge	r1, [r4, #0]
 801a05c:	f021 0104 	bicge.w	r1, r1, #4
 801a060:	6021      	strge	r1, [r4, #0]
 801a062:	b90e      	cbnz	r6, 801a068 <_printf_i+0x118>
 801a064:	2d00      	cmp	r5, #0
 801a066:	d04d      	beq.n	801a104 <_printf_i+0x1b4>
 801a068:	4615      	mov	r5, r2
 801a06a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a06e:	fb03 6711 	mls	r7, r3, r1, r6
 801a072:	5dc7      	ldrb	r7, [r0, r7]
 801a074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a078:	4637      	mov	r7, r6
 801a07a:	42bb      	cmp	r3, r7
 801a07c:	460e      	mov	r6, r1
 801a07e:	d9f4      	bls.n	801a06a <_printf_i+0x11a>
 801a080:	2b08      	cmp	r3, #8
 801a082:	d10b      	bne.n	801a09c <_printf_i+0x14c>
 801a084:	6823      	ldr	r3, [r4, #0]
 801a086:	07de      	lsls	r6, r3, #31
 801a088:	d508      	bpl.n	801a09c <_printf_i+0x14c>
 801a08a:	6923      	ldr	r3, [r4, #16]
 801a08c:	6861      	ldr	r1, [r4, #4]
 801a08e:	4299      	cmp	r1, r3
 801a090:	bfde      	ittt	le
 801a092:	2330      	movle	r3, #48	; 0x30
 801a094:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a098:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a09c:	1b52      	subs	r2, r2, r5
 801a09e:	6122      	str	r2, [r4, #16]
 801a0a0:	f8cd a000 	str.w	sl, [sp]
 801a0a4:	464b      	mov	r3, r9
 801a0a6:	aa03      	add	r2, sp, #12
 801a0a8:	4621      	mov	r1, r4
 801a0aa:	4640      	mov	r0, r8
 801a0ac:	f7ff fee2 	bl	8019e74 <_printf_common>
 801a0b0:	3001      	adds	r0, #1
 801a0b2:	d14c      	bne.n	801a14e <_printf_i+0x1fe>
 801a0b4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0b8:	b004      	add	sp, #16
 801a0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0be:	4835      	ldr	r0, [pc, #212]	; (801a194 <_printf_i+0x244>)
 801a0c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a0c4:	6829      	ldr	r1, [r5, #0]
 801a0c6:	6823      	ldr	r3, [r4, #0]
 801a0c8:	f851 6b04 	ldr.w	r6, [r1], #4
 801a0cc:	6029      	str	r1, [r5, #0]
 801a0ce:	061d      	lsls	r5, r3, #24
 801a0d0:	d514      	bpl.n	801a0fc <_printf_i+0x1ac>
 801a0d2:	07df      	lsls	r7, r3, #31
 801a0d4:	bf44      	itt	mi
 801a0d6:	f043 0320 	orrmi.w	r3, r3, #32
 801a0da:	6023      	strmi	r3, [r4, #0]
 801a0dc:	b91e      	cbnz	r6, 801a0e6 <_printf_i+0x196>
 801a0de:	6823      	ldr	r3, [r4, #0]
 801a0e0:	f023 0320 	bic.w	r3, r3, #32
 801a0e4:	6023      	str	r3, [r4, #0]
 801a0e6:	2310      	movs	r3, #16
 801a0e8:	e7b0      	b.n	801a04c <_printf_i+0xfc>
 801a0ea:	6823      	ldr	r3, [r4, #0]
 801a0ec:	f043 0320 	orr.w	r3, r3, #32
 801a0f0:	6023      	str	r3, [r4, #0]
 801a0f2:	2378      	movs	r3, #120	; 0x78
 801a0f4:	4828      	ldr	r0, [pc, #160]	; (801a198 <_printf_i+0x248>)
 801a0f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a0fa:	e7e3      	b.n	801a0c4 <_printf_i+0x174>
 801a0fc:	0659      	lsls	r1, r3, #25
 801a0fe:	bf48      	it	mi
 801a100:	b2b6      	uxthmi	r6, r6
 801a102:	e7e6      	b.n	801a0d2 <_printf_i+0x182>
 801a104:	4615      	mov	r5, r2
 801a106:	e7bb      	b.n	801a080 <_printf_i+0x130>
 801a108:	682b      	ldr	r3, [r5, #0]
 801a10a:	6826      	ldr	r6, [r4, #0]
 801a10c:	6961      	ldr	r1, [r4, #20]
 801a10e:	1d18      	adds	r0, r3, #4
 801a110:	6028      	str	r0, [r5, #0]
 801a112:	0635      	lsls	r5, r6, #24
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	d501      	bpl.n	801a11c <_printf_i+0x1cc>
 801a118:	6019      	str	r1, [r3, #0]
 801a11a:	e002      	b.n	801a122 <_printf_i+0x1d2>
 801a11c:	0670      	lsls	r0, r6, #25
 801a11e:	d5fb      	bpl.n	801a118 <_printf_i+0x1c8>
 801a120:	8019      	strh	r1, [r3, #0]
 801a122:	2300      	movs	r3, #0
 801a124:	6123      	str	r3, [r4, #16]
 801a126:	4615      	mov	r5, r2
 801a128:	e7ba      	b.n	801a0a0 <_printf_i+0x150>
 801a12a:	682b      	ldr	r3, [r5, #0]
 801a12c:	1d1a      	adds	r2, r3, #4
 801a12e:	602a      	str	r2, [r5, #0]
 801a130:	681d      	ldr	r5, [r3, #0]
 801a132:	6862      	ldr	r2, [r4, #4]
 801a134:	2100      	movs	r1, #0
 801a136:	4628      	mov	r0, r5
 801a138:	f7fe fc5a 	bl	80189f0 <memchr>
 801a13c:	b108      	cbz	r0, 801a142 <_printf_i+0x1f2>
 801a13e:	1b40      	subs	r0, r0, r5
 801a140:	6060      	str	r0, [r4, #4]
 801a142:	6863      	ldr	r3, [r4, #4]
 801a144:	6123      	str	r3, [r4, #16]
 801a146:	2300      	movs	r3, #0
 801a148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a14c:	e7a8      	b.n	801a0a0 <_printf_i+0x150>
 801a14e:	6923      	ldr	r3, [r4, #16]
 801a150:	462a      	mov	r2, r5
 801a152:	4649      	mov	r1, r9
 801a154:	4640      	mov	r0, r8
 801a156:	47d0      	blx	sl
 801a158:	3001      	adds	r0, #1
 801a15a:	d0ab      	beq.n	801a0b4 <_printf_i+0x164>
 801a15c:	6823      	ldr	r3, [r4, #0]
 801a15e:	079b      	lsls	r3, r3, #30
 801a160:	d413      	bmi.n	801a18a <_printf_i+0x23a>
 801a162:	68e0      	ldr	r0, [r4, #12]
 801a164:	9b03      	ldr	r3, [sp, #12]
 801a166:	4298      	cmp	r0, r3
 801a168:	bfb8      	it	lt
 801a16a:	4618      	movlt	r0, r3
 801a16c:	e7a4      	b.n	801a0b8 <_printf_i+0x168>
 801a16e:	2301      	movs	r3, #1
 801a170:	4632      	mov	r2, r6
 801a172:	4649      	mov	r1, r9
 801a174:	4640      	mov	r0, r8
 801a176:	47d0      	blx	sl
 801a178:	3001      	adds	r0, #1
 801a17a:	d09b      	beq.n	801a0b4 <_printf_i+0x164>
 801a17c:	3501      	adds	r5, #1
 801a17e:	68e3      	ldr	r3, [r4, #12]
 801a180:	9903      	ldr	r1, [sp, #12]
 801a182:	1a5b      	subs	r3, r3, r1
 801a184:	42ab      	cmp	r3, r5
 801a186:	dcf2      	bgt.n	801a16e <_printf_i+0x21e>
 801a188:	e7eb      	b.n	801a162 <_printf_i+0x212>
 801a18a:	2500      	movs	r5, #0
 801a18c:	f104 0619 	add.w	r6, r4, #25
 801a190:	e7f5      	b.n	801a17e <_printf_i+0x22e>
 801a192:	bf00      	nop
 801a194:	080521d6 	.word	0x080521d6
 801a198:	080521e7 	.word	0x080521e7

0801a19c <_scanf_float>:
 801a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1a0:	b087      	sub	sp, #28
 801a1a2:	4617      	mov	r7, r2
 801a1a4:	9303      	str	r3, [sp, #12]
 801a1a6:	688b      	ldr	r3, [r1, #8]
 801a1a8:	1e5a      	subs	r2, r3, #1
 801a1aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a1ae:	bf83      	ittte	hi
 801a1b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a1b4:	195b      	addhi	r3, r3, r5
 801a1b6:	9302      	strhi	r3, [sp, #8]
 801a1b8:	2300      	movls	r3, #0
 801a1ba:	bf86      	itte	hi
 801a1bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a1c0:	608b      	strhi	r3, [r1, #8]
 801a1c2:	9302      	strls	r3, [sp, #8]
 801a1c4:	680b      	ldr	r3, [r1, #0]
 801a1c6:	468b      	mov	fp, r1
 801a1c8:	2500      	movs	r5, #0
 801a1ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a1ce:	f84b 3b1c 	str.w	r3, [fp], #28
 801a1d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a1d6:	4680      	mov	r8, r0
 801a1d8:	460c      	mov	r4, r1
 801a1da:	465e      	mov	r6, fp
 801a1dc:	46aa      	mov	sl, r5
 801a1de:	46a9      	mov	r9, r5
 801a1e0:	9501      	str	r5, [sp, #4]
 801a1e2:	68a2      	ldr	r2, [r4, #8]
 801a1e4:	b152      	cbz	r2, 801a1fc <_scanf_float+0x60>
 801a1e6:	683b      	ldr	r3, [r7, #0]
 801a1e8:	781b      	ldrb	r3, [r3, #0]
 801a1ea:	2b4e      	cmp	r3, #78	; 0x4e
 801a1ec:	d864      	bhi.n	801a2b8 <_scanf_float+0x11c>
 801a1ee:	2b40      	cmp	r3, #64	; 0x40
 801a1f0:	d83c      	bhi.n	801a26c <_scanf_float+0xd0>
 801a1f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a1f6:	b2c8      	uxtb	r0, r1
 801a1f8:	280e      	cmp	r0, #14
 801a1fa:	d93a      	bls.n	801a272 <_scanf_float+0xd6>
 801a1fc:	f1b9 0f00 	cmp.w	r9, #0
 801a200:	d003      	beq.n	801a20a <_scanf_float+0x6e>
 801a202:	6823      	ldr	r3, [r4, #0]
 801a204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a208:	6023      	str	r3, [r4, #0]
 801a20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a20e:	f1ba 0f01 	cmp.w	sl, #1
 801a212:	f200 8113 	bhi.w	801a43c <_scanf_float+0x2a0>
 801a216:	455e      	cmp	r6, fp
 801a218:	f200 8105 	bhi.w	801a426 <_scanf_float+0x28a>
 801a21c:	2501      	movs	r5, #1
 801a21e:	4628      	mov	r0, r5
 801a220:	b007      	add	sp, #28
 801a222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a22a:	2a0d      	cmp	r2, #13
 801a22c:	d8e6      	bhi.n	801a1fc <_scanf_float+0x60>
 801a22e:	a101      	add	r1, pc, #4	; (adr r1, 801a234 <_scanf_float+0x98>)
 801a230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a234:	0801a373 	.word	0x0801a373
 801a238:	0801a1fd 	.word	0x0801a1fd
 801a23c:	0801a1fd 	.word	0x0801a1fd
 801a240:	0801a1fd 	.word	0x0801a1fd
 801a244:	0801a3d3 	.word	0x0801a3d3
 801a248:	0801a3ab 	.word	0x0801a3ab
 801a24c:	0801a1fd 	.word	0x0801a1fd
 801a250:	0801a1fd 	.word	0x0801a1fd
 801a254:	0801a381 	.word	0x0801a381
 801a258:	0801a1fd 	.word	0x0801a1fd
 801a25c:	0801a1fd 	.word	0x0801a1fd
 801a260:	0801a1fd 	.word	0x0801a1fd
 801a264:	0801a1fd 	.word	0x0801a1fd
 801a268:	0801a339 	.word	0x0801a339
 801a26c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a270:	e7db      	b.n	801a22a <_scanf_float+0x8e>
 801a272:	290e      	cmp	r1, #14
 801a274:	d8c2      	bhi.n	801a1fc <_scanf_float+0x60>
 801a276:	a001      	add	r0, pc, #4	; (adr r0, 801a27c <_scanf_float+0xe0>)
 801a278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a27c:	0801a32b 	.word	0x0801a32b
 801a280:	0801a1fd 	.word	0x0801a1fd
 801a284:	0801a32b 	.word	0x0801a32b
 801a288:	0801a3bf 	.word	0x0801a3bf
 801a28c:	0801a1fd 	.word	0x0801a1fd
 801a290:	0801a2d9 	.word	0x0801a2d9
 801a294:	0801a315 	.word	0x0801a315
 801a298:	0801a315 	.word	0x0801a315
 801a29c:	0801a315 	.word	0x0801a315
 801a2a0:	0801a315 	.word	0x0801a315
 801a2a4:	0801a315 	.word	0x0801a315
 801a2a8:	0801a315 	.word	0x0801a315
 801a2ac:	0801a315 	.word	0x0801a315
 801a2b0:	0801a315 	.word	0x0801a315
 801a2b4:	0801a315 	.word	0x0801a315
 801a2b8:	2b6e      	cmp	r3, #110	; 0x6e
 801a2ba:	d809      	bhi.n	801a2d0 <_scanf_float+0x134>
 801a2bc:	2b60      	cmp	r3, #96	; 0x60
 801a2be:	d8b2      	bhi.n	801a226 <_scanf_float+0x8a>
 801a2c0:	2b54      	cmp	r3, #84	; 0x54
 801a2c2:	d077      	beq.n	801a3b4 <_scanf_float+0x218>
 801a2c4:	2b59      	cmp	r3, #89	; 0x59
 801a2c6:	d199      	bne.n	801a1fc <_scanf_float+0x60>
 801a2c8:	2d07      	cmp	r5, #7
 801a2ca:	d197      	bne.n	801a1fc <_scanf_float+0x60>
 801a2cc:	2508      	movs	r5, #8
 801a2ce:	e029      	b.n	801a324 <_scanf_float+0x188>
 801a2d0:	2b74      	cmp	r3, #116	; 0x74
 801a2d2:	d06f      	beq.n	801a3b4 <_scanf_float+0x218>
 801a2d4:	2b79      	cmp	r3, #121	; 0x79
 801a2d6:	e7f6      	b.n	801a2c6 <_scanf_float+0x12a>
 801a2d8:	6821      	ldr	r1, [r4, #0]
 801a2da:	05c8      	lsls	r0, r1, #23
 801a2dc:	d51a      	bpl.n	801a314 <_scanf_float+0x178>
 801a2de:	9b02      	ldr	r3, [sp, #8]
 801a2e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a2e4:	6021      	str	r1, [r4, #0]
 801a2e6:	f109 0901 	add.w	r9, r9, #1
 801a2ea:	b11b      	cbz	r3, 801a2f4 <_scanf_float+0x158>
 801a2ec:	3b01      	subs	r3, #1
 801a2ee:	3201      	adds	r2, #1
 801a2f0:	9302      	str	r3, [sp, #8]
 801a2f2:	60a2      	str	r2, [r4, #8]
 801a2f4:	68a3      	ldr	r3, [r4, #8]
 801a2f6:	3b01      	subs	r3, #1
 801a2f8:	60a3      	str	r3, [r4, #8]
 801a2fa:	6923      	ldr	r3, [r4, #16]
 801a2fc:	3301      	adds	r3, #1
 801a2fe:	6123      	str	r3, [r4, #16]
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	3b01      	subs	r3, #1
 801a304:	2b00      	cmp	r3, #0
 801a306:	607b      	str	r3, [r7, #4]
 801a308:	f340 8084 	ble.w	801a414 <_scanf_float+0x278>
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	3301      	adds	r3, #1
 801a310:	603b      	str	r3, [r7, #0]
 801a312:	e766      	b.n	801a1e2 <_scanf_float+0x46>
 801a314:	eb1a 0f05 	cmn.w	sl, r5
 801a318:	f47f af70 	bne.w	801a1fc <_scanf_float+0x60>
 801a31c:	6822      	ldr	r2, [r4, #0]
 801a31e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a322:	6022      	str	r2, [r4, #0]
 801a324:	f806 3b01 	strb.w	r3, [r6], #1
 801a328:	e7e4      	b.n	801a2f4 <_scanf_float+0x158>
 801a32a:	6822      	ldr	r2, [r4, #0]
 801a32c:	0610      	lsls	r0, r2, #24
 801a32e:	f57f af65 	bpl.w	801a1fc <_scanf_float+0x60>
 801a332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a336:	e7f4      	b.n	801a322 <_scanf_float+0x186>
 801a338:	f1ba 0f00 	cmp.w	sl, #0
 801a33c:	d10e      	bne.n	801a35c <_scanf_float+0x1c0>
 801a33e:	f1b9 0f00 	cmp.w	r9, #0
 801a342:	d10e      	bne.n	801a362 <_scanf_float+0x1c6>
 801a344:	6822      	ldr	r2, [r4, #0]
 801a346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a34a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a34e:	d108      	bne.n	801a362 <_scanf_float+0x1c6>
 801a350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a354:	6022      	str	r2, [r4, #0]
 801a356:	f04f 0a01 	mov.w	sl, #1
 801a35a:	e7e3      	b.n	801a324 <_scanf_float+0x188>
 801a35c:	f1ba 0f02 	cmp.w	sl, #2
 801a360:	d055      	beq.n	801a40e <_scanf_float+0x272>
 801a362:	2d01      	cmp	r5, #1
 801a364:	d002      	beq.n	801a36c <_scanf_float+0x1d0>
 801a366:	2d04      	cmp	r5, #4
 801a368:	f47f af48 	bne.w	801a1fc <_scanf_float+0x60>
 801a36c:	3501      	adds	r5, #1
 801a36e:	b2ed      	uxtb	r5, r5
 801a370:	e7d8      	b.n	801a324 <_scanf_float+0x188>
 801a372:	f1ba 0f01 	cmp.w	sl, #1
 801a376:	f47f af41 	bne.w	801a1fc <_scanf_float+0x60>
 801a37a:	f04f 0a02 	mov.w	sl, #2
 801a37e:	e7d1      	b.n	801a324 <_scanf_float+0x188>
 801a380:	b97d      	cbnz	r5, 801a3a2 <_scanf_float+0x206>
 801a382:	f1b9 0f00 	cmp.w	r9, #0
 801a386:	f47f af3c 	bne.w	801a202 <_scanf_float+0x66>
 801a38a:	6822      	ldr	r2, [r4, #0]
 801a38c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a394:	f47f af39 	bne.w	801a20a <_scanf_float+0x6e>
 801a398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a39c:	6022      	str	r2, [r4, #0]
 801a39e:	2501      	movs	r5, #1
 801a3a0:	e7c0      	b.n	801a324 <_scanf_float+0x188>
 801a3a2:	2d03      	cmp	r5, #3
 801a3a4:	d0e2      	beq.n	801a36c <_scanf_float+0x1d0>
 801a3a6:	2d05      	cmp	r5, #5
 801a3a8:	e7de      	b.n	801a368 <_scanf_float+0x1cc>
 801a3aa:	2d02      	cmp	r5, #2
 801a3ac:	f47f af26 	bne.w	801a1fc <_scanf_float+0x60>
 801a3b0:	2503      	movs	r5, #3
 801a3b2:	e7b7      	b.n	801a324 <_scanf_float+0x188>
 801a3b4:	2d06      	cmp	r5, #6
 801a3b6:	f47f af21 	bne.w	801a1fc <_scanf_float+0x60>
 801a3ba:	2507      	movs	r5, #7
 801a3bc:	e7b2      	b.n	801a324 <_scanf_float+0x188>
 801a3be:	6822      	ldr	r2, [r4, #0]
 801a3c0:	0591      	lsls	r1, r2, #22
 801a3c2:	f57f af1b 	bpl.w	801a1fc <_scanf_float+0x60>
 801a3c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a3ca:	6022      	str	r2, [r4, #0]
 801a3cc:	f8cd 9004 	str.w	r9, [sp, #4]
 801a3d0:	e7a8      	b.n	801a324 <_scanf_float+0x188>
 801a3d2:	6822      	ldr	r2, [r4, #0]
 801a3d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a3d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a3dc:	d006      	beq.n	801a3ec <_scanf_float+0x250>
 801a3de:	0550      	lsls	r0, r2, #21
 801a3e0:	f57f af0c 	bpl.w	801a1fc <_scanf_float+0x60>
 801a3e4:	f1b9 0f00 	cmp.w	r9, #0
 801a3e8:	f43f af0f 	beq.w	801a20a <_scanf_float+0x6e>
 801a3ec:	0591      	lsls	r1, r2, #22
 801a3ee:	bf58      	it	pl
 801a3f0:	9901      	ldrpl	r1, [sp, #4]
 801a3f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a3f6:	bf58      	it	pl
 801a3f8:	eba9 0101 	subpl.w	r1, r9, r1
 801a3fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a400:	bf58      	it	pl
 801a402:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a406:	6022      	str	r2, [r4, #0]
 801a408:	f04f 0900 	mov.w	r9, #0
 801a40c:	e78a      	b.n	801a324 <_scanf_float+0x188>
 801a40e:	f04f 0a03 	mov.w	sl, #3
 801a412:	e787      	b.n	801a324 <_scanf_float+0x188>
 801a414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a418:	4639      	mov	r1, r7
 801a41a:	4640      	mov	r0, r8
 801a41c:	4798      	blx	r3
 801a41e:	2800      	cmp	r0, #0
 801a420:	f43f aedf 	beq.w	801a1e2 <_scanf_float+0x46>
 801a424:	e6ea      	b.n	801a1fc <_scanf_float+0x60>
 801a426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a42a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a42e:	463a      	mov	r2, r7
 801a430:	4640      	mov	r0, r8
 801a432:	4798      	blx	r3
 801a434:	6923      	ldr	r3, [r4, #16]
 801a436:	3b01      	subs	r3, #1
 801a438:	6123      	str	r3, [r4, #16]
 801a43a:	e6ec      	b.n	801a216 <_scanf_float+0x7a>
 801a43c:	1e6b      	subs	r3, r5, #1
 801a43e:	2b06      	cmp	r3, #6
 801a440:	d825      	bhi.n	801a48e <_scanf_float+0x2f2>
 801a442:	2d02      	cmp	r5, #2
 801a444:	d836      	bhi.n	801a4b4 <_scanf_float+0x318>
 801a446:	455e      	cmp	r6, fp
 801a448:	f67f aee8 	bls.w	801a21c <_scanf_float+0x80>
 801a44c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a450:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a454:	463a      	mov	r2, r7
 801a456:	4640      	mov	r0, r8
 801a458:	4798      	blx	r3
 801a45a:	6923      	ldr	r3, [r4, #16]
 801a45c:	3b01      	subs	r3, #1
 801a45e:	6123      	str	r3, [r4, #16]
 801a460:	e7f1      	b.n	801a446 <_scanf_float+0x2aa>
 801a462:	9802      	ldr	r0, [sp, #8]
 801a464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a46c:	9002      	str	r0, [sp, #8]
 801a46e:	463a      	mov	r2, r7
 801a470:	4640      	mov	r0, r8
 801a472:	4798      	blx	r3
 801a474:	6923      	ldr	r3, [r4, #16]
 801a476:	3b01      	subs	r3, #1
 801a478:	6123      	str	r3, [r4, #16]
 801a47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a47e:	fa5f fa8a 	uxtb.w	sl, sl
 801a482:	f1ba 0f02 	cmp.w	sl, #2
 801a486:	d1ec      	bne.n	801a462 <_scanf_float+0x2c6>
 801a488:	3d03      	subs	r5, #3
 801a48a:	b2ed      	uxtb	r5, r5
 801a48c:	1b76      	subs	r6, r6, r5
 801a48e:	6823      	ldr	r3, [r4, #0]
 801a490:	05da      	lsls	r2, r3, #23
 801a492:	d52f      	bpl.n	801a4f4 <_scanf_float+0x358>
 801a494:	055b      	lsls	r3, r3, #21
 801a496:	d510      	bpl.n	801a4ba <_scanf_float+0x31e>
 801a498:	455e      	cmp	r6, fp
 801a49a:	f67f aebf 	bls.w	801a21c <_scanf_float+0x80>
 801a49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4a6:	463a      	mov	r2, r7
 801a4a8:	4640      	mov	r0, r8
 801a4aa:	4798      	blx	r3
 801a4ac:	6923      	ldr	r3, [r4, #16]
 801a4ae:	3b01      	subs	r3, #1
 801a4b0:	6123      	str	r3, [r4, #16]
 801a4b2:	e7f1      	b.n	801a498 <_scanf_float+0x2fc>
 801a4b4:	46aa      	mov	sl, r5
 801a4b6:	9602      	str	r6, [sp, #8]
 801a4b8:	e7df      	b.n	801a47a <_scanf_float+0x2de>
 801a4ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a4be:	6923      	ldr	r3, [r4, #16]
 801a4c0:	2965      	cmp	r1, #101	; 0x65
 801a4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a4c6:	f106 35ff 	add.w	r5, r6, #4294967295
 801a4ca:	6123      	str	r3, [r4, #16]
 801a4cc:	d00c      	beq.n	801a4e8 <_scanf_float+0x34c>
 801a4ce:	2945      	cmp	r1, #69	; 0x45
 801a4d0:	d00a      	beq.n	801a4e8 <_scanf_float+0x34c>
 801a4d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4d6:	463a      	mov	r2, r7
 801a4d8:	4640      	mov	r0, r8
 801a4da:	4798      	blx	r3
 801a4dc:	6923      	ldr	r3, [r4, #16]
 801a4de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a4e2:	3b01      	subs	r3, #1
 801a4e4:	1eb5      	subs	r5, r6, #2
 801a4e6:	6123      	str	r3, [r4, #16]
 801a4e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4ec:	463a      	mov	r2, r7
 801a4ee:	4640      	mov	r0, r8
 801a4f0:	4798      	blx	r3
 801a4f2:	462e      	mov	r6, r5
 801a4f4:	6825      	ldr	r5, [r4, #0]
 801a4f6:	f015 0510 	ands.w	r5, r5, #16
 801a4fa:	d159      	bne.n	801a5b0 <_scanf_float+0x414>
 801a4fc:	7035      	strb	r5, [r6, #0]
 801a4fe:	6823      	ldr	r3, [r4, #0]
 801a500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a508:	d11b      	bne.n	801a542 <_scanf_float+0x3a6>
 801a50a:	9b01      	ldr	r3, [sp, #4]
 801a50c:	454b      	cmp	r3, r9
 801a50e:	eba3 0209 	sub.w	r2, r3, r9
 801a512:	d123      	bne.n	801a55c <_scanf_float+0x3c0>
 801a514:	2200      	movs	r2, #0
 801a516:	4659      	mov	r1, fp
 801a518:	4640      	mov	r0, r8
 801a51a:	f000 fe97 	bl	801b24c <_strtod_r>
 801a51e:	6822      	ldr	r2, [r4, #0]
 801a520:	9b03      	ldr	r3, [sp, #12]
 801a522:	f012 0f02 	tst.w	r2, #2
 801a526:	ec57 6b10 	vmov	r6, r7, d0
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	d021      	beq.n	801a572 <_scanf_float+0x3d6>
 801a52e:	9903      	ldr	r1, [sp, #12]
 801a530:	1d1a      	adds	r2, r3, #4
 801a532:	600a      	str	r2, [r1, #0]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	e9c3 6700 	strd	r6, r7, [r3]
 801a53a:	68e3      	ldr	r3, [r4, #12]
 801a53c:	3301      	adds	r3, #1
 801a53e:	60e3      	str	r3, [r4, #12]
 801a540:	e66d      	b.n	801a21e <_scanf_float+0x82>
 801a542:	9b04      	ldr	r3, [sp, #16]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d0e5      	beq.n	801a514 <_scanf_float+0x378>
 801a548:	9905      	ldr	r1, [sp, #20]
 801a54a:	230a      	movs	r3, #10
 801a54c:	462a      	mov	r2, r5
 801a54e:	3101      	adds	r1, #1
 801a550:	4640      	mov	r0, r8
 801a552:	f000 ff03 	bl	801b35c <_strtol_r>
 801a556:	9b04      	ldr	r3, [sp, #16]
 801a558:	9e05      	ldr	r6, [sp, #20]
 801a55a:	1ac2      	subs	r2, r0, r3
 801a55c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a560:	429e      	cmp	r6, r3
 801a562:	bf28      	it	cs
 801a564:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a568:	4912      	ldr	r1, [pc, #72]	; (801a5b4 <_scanf_float+0x418>)
 801a56a:	4630      	mov	r0, r6
 801a56c:	f000 f82c 	bl	801a5c8 <siprintf>
 801a570:	e7d0      	b.n	801a514 <_scanf_float+0x378>
 801a572:	9903      	ldr	r1, [sp, #12]
 801a574:	f012 0f04 	tst.w	r2, #4
 801a578:	f103 0204 	add.w	r2, r3, #4
 801a57c:	600a      	str	r2, [r1, #0]
 801a57e:	d1d9      	bne.n	801a534 <_scanf_float+0x398>
 801a580:	f8d3 8000 	ldr.w	r8, [r3]
 801a584:	ee10 2a10 	vmov	r2, s0
 801a588:	ee10 0a10 	vmov	r0, s0
 801a58c:	463b      	mov	r3, r7
 801a58e:	4639      	mov	r1, r7
 801a590:	f7fe fed4 	bl	801933c <__aeabi_dcmpun>
 801a594:	b128      	cbz	r0, 801a5a2 <_scanf_float+0x406>
 801a596:	4808      	ldr	r0, [pc, #32]	; (801a5b8 <_scanf_float+0x41c>)
 801a598:	f000 f810 	bl	801a5bc <nanf>
 801a59c:	ed88 0a00 	vstr	s0, [r8]
 801a5a0:	e7cb      	b.n	801a53a <_scanf_float+0x39e>
 801a5a2:	4630      	mov	r0, r6
 801a5a4:	4639      	mov	r1, r7
 801a5a6:	f7fe ff27 	bl	80193f8 <__aeabi_d2f>
 801a5aa:	f8c8 0000 	str.w	r0, [r8]
 801a5ae:	e7c4      	b.n	801a53a <_scanf_float+0x39e>
 801a5b0:	2500      	movs	r5, #0
 801a5b2:	e634      	b.n	801a21e <_scanf_float+0x82>
 801a5b4:	080521f8 	.word	0x080521f8
 801a5b8:	08052600 	.word	0x08052600

0801a5bc <nanf>:
 801a5bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a5c4 <nanf+0x8>
 801a5c0:	4770      	bx	lr
 801a5c2:	bf00      	nop
 801a5c4:	7fc00000 	.word	0x7fc00000

0801a5c8 <siprintf>:
 801a5c8:	b40e      	push	{r1, r2, r3}
 801a5ca:	b500      	push	{lr}
 801a5cc:	b09c      	sub	sp, #112	; 0x70
 801a5ce:	ab1d      	add	r3, sp, #116	; 0x74
 801a5d0:	9002      	str	r0, [sp, #8]
 801a5d2:	9006      	str	r0, [sp, #24]
 801a5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a5d8:	4809      	ldr	r0, [pc, #36]	; (801a600 <siprintf+0x38>)
 801a5da:	9107      	str	r1, [sp, #28]
 801a5dc:	9104      	str	r1, [sp, #16]
 801a5de:	4909      	ldr	r1, [pc, #36]	; (801a604 <siprintf+0x3c>)
 801a5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5e4:	9105      	str	r1, [sp, #20]
 801a5e6:	6800      	ldr	r0, [r0, #0]
 801a5e8:	9301      	str	r3, [sp, #4]
 801a5ea:	a902      	add	r1, sp, #8
 801a5ec:	f002 feee 	bl	801d3cc <_svfiprintf_r>
 801a5f0:	9b02      	ldr	r3, [sp, #8]
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	701a      	strb	r2, [r3, #0]
 801a5f6:	b01c      	add	sp, #112	; 0x70
 801a5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a5fc:	b003      	add	sp, #12
 801a5fe:	4770      	bx	lr
 801a600:	20000064 	.word	0x20000064
 801a604:	ffff0208 	.word	0xffff0208

0801a608 <sulp>:
 801a608:	b570      	push	{r4, r5, r6, lr}
 801a60a:	4604      	mov	r4, r0
 801a60c:	460d      	mov	r5, r1
 801a60e:	ec45 4b10 	vmov	d0, r4, r5
 801a612:	4616      	mov	r6, r2
 801a614:	f002 fc38 	bl	801ce88 <__ulp>
 801a618:	ec51 0b10 	vmov	r0, r1, d0
 801a61c:	b17e      	cbz	r6, 801a63e <sulp+0x36>
 801a61e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a622:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a626:	2b00      	cmp	r3, #0
 801a628:	dd09      	ble.n	801a63e <sulp+0x36>
 801a62a:	051b      	lsls	r3, r3, #20
 801a62c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a630:	2400      	movs	r4, #0
 801a632:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a636:	4622      	mov	r2, r4
 801a638:	462b      	mov	r3, r5
 801a63a:	f7fe fbe5 	bl	8018e08 <__aeabi_dmul>
 801a63e:	bd70      	pop	{r4, r5, r6, pc}

0801a640 <_strtod_l>:
 801a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a644:	ed2d 8b02 	vpush	{d8}
 801a648:	b09d      	sub	sp, #116	; 0x74
 801a64a:	461f      	mov	r7, r3
 801a64c:	2300      	movs	r3, #0
 801a64e:	9318      	str	r3, [sp, #96]	; 0x60
 801a650:	4ba2      	ldr	r3, [pc, #648]	; (801a8dc <_strtod_l+0x29c>)
 801a652:	9213      	str	r2, [sp, #76]	; 0x4c
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	9305      	str	r3, [sp, #20]
 801a658:	4604      	mov	r4, r0
 801a65a:	4618      	mov	r0, r3
 801a65c:	4688      	mov	r8, r1
 801a65e:	f7fe f9bd 	bl	80189dc <strlen>
 801a662:	f04f 0a00 	mov.w	sl, #0
 801a666:	4605      	mov	r5, r0
 801a668:	f04f 0b00 	mov.w	fp, #0
 801a66c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a672:	781a      	ldrb	r2, [r3, #0]
 801a674:	2a2b      	cmp	r2, #43	; 0x2b
 801a676:	d04e      	beq.n	801a716 <_strtod_l+0xd6>
 801a678:	d83b      	bhi.n	801a6f2 <_strtod_l+0xb2>
 801a67a:	2a0d      	cmp	r2, #13
 801a67c:	d834      	bhi.n	801a6e8 <_strtod_l+0xa8>
 801a67e:	2a08      	cmp	r2, #8
 801a680:	d834      	bhi.n	801a6ec <_strtod_l+0xac>
 801a682:	2a00      	cmp	r2, #0
 801a684:	d03e      	beq.n	801a704 <_strtod_l+0xc4>
 801a686:	2300      	movs	r3, #0
 801a688:	930a      	str	r3, [sp, #40]	; 0x28
 801a68a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a68c:	7833      	ldrb	r3, [r6, #0]
 801a68e:	2b30      	cmp	r3, #48	; 0x30
 801a690:	f040 80b0 	bne.w	801a7f4 <_strtod_l+0x1b4>
 801a694:	7873      	ldrb	r3, [r6, #1]
 801a696:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a69a:	2b58      	cmp	r3, #88	; 0x58
 801a69c:	d168      	bne.n	801a770 <_strtod_l+0x130>
 801a69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6a0:	9301      	str	r3, [sp, #4]
 801a6a2:	ab18      	add	r3, sp, #96	; 0x60
 801a6a4:	9702      	str	r7, [sp, #8]
 801a6a6:	9300      	str	r3, [sp, #0]
 801a6a8:	4a8d      	ldr	r2, [pc, #564]	; (801a8e0 <_strtod_l+0x2a0>)
 801a6aa:	ab19      	add	r3, sp, #100	; 0x64
 801a6ac:	a917      	add	r1, sp, #92	; 0x5c
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	f001 fd44 	bl	801c13c <__gethex>
 801a6b4:	f010 0707 	ands.w	r7, r0, #7
 801a6b8:	4605      	mov	r5, r0
 801a6ba:	d005      	beq.n	801a6c8 <_strtod_l+0x88>
 801a6bc:	2f06      	cmp	r7, #6
 801a6be:	d12c      	bne.n	801a71a <_strtod_l+0xda>
 801a6c0:	3601      	adds	r6, #1
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	9617      	str	r6, [sp, #92]	; 0x5c
 801a6c6:	930a      	str	r3, [sp, #40]	; 0x28
 801a6c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	f040 8590 	bne.w	801b1f0 <_strtod_l+0xbb0>
 801a6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6d2:	b1eb      	cbz	r3, 801a710 <_strtod_l+0xd0>
 801a6d4:	4652      	mov	r2, sl
 801a6d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a6da:	ec43 2b10 	vmov	d0, r2, r3
 801a6de:	b01d      	add	sp, #116	; 0x74
 801a6e0:	ecbd 8b02 	vpop	{d8}
 801a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6e8:	2a20      	cmp	r2, #32
 801a6ea:	d1cc      	bne.n	801a686 <_strtod_l+0x46>
 801a6ec:	3301      	adds	r3, #1
 801a6ee:	9317      	str	r3, [sp, #92]	; 0x5c
 801a6f0:	e7be      	b.n	801a670 <_strtod_l+0x30>
 801a6f2:	2a2d      	cmp	r2, #45	; 0x2d
 801a6f4:	d1c7      	bne.n	801a686 <_strtod_l+0x46>
 801a6f6:	2201      	movs	r2, #1
 801a6f8:	920a      	str	r2, [sp, #40]	; 0x28
 801a6fa:	1c5a      	adds	r2, r3, #1
 801a6fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801a6fe:	785b      	ldrb	r3, [r3, #1]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d1c2      	bne.n	801a68a <_strtod_l+0x4a>
 801a704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a706:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	f040 856e 	bne.w	801b1ec <_strtod_l+0xbac>
 801a710:	4652      	mov	r2, sl
 801a712:	465b      	mov	r3, fp
 801a714:	e7e1      	b.n	801a6da <_strtod_l+0x9a>
 801a716:	2200      	movs	r2, #0
 801a718:	e7ee      	b.n	801a6f8 <_strtod_l+0xb8>
 801a71a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a71c:	b13a      	cbz	r2, 801a72e <_strtod_l+0xee>
 801a71e:	2135      	movs	r1, #53	; 0x35
 801a720:	a81a      	add	r0, sp, #104	; 0x68
 801a722:	f002 fcbc 	bl	801d09e <__copybits>
 801a726:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a728:	4620      	mov	r0, r4
 801a72a:	f002 f87b 	bl	801c824 <_Bfree>
 801a72e:	3f01      	subs	r7, #1
 801a730:	2f04      	cmp	r7, #4
 801a732:	d806      	bhi.n	801a742 <_strtod_l+0x102>
 801a734:	e8df f007 	tbb	[pc, r7]
 801a738:	1714030a 	.word	0x1714030a
 801a73c:	0a          	.byte	0x0a
 801a73d:	00          	.byte	0x00
 801a73e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a742:	0728      	lsls	r0, r5, #28
 801a744:	d5c0      	bpl.n	801a6c8 <_strtod_l+0x88>
 801a746:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a74a:	e7bd      	b.n	801a6c8 <_strtod_l+0x88>
 801a74c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a750:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a756:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a75a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a75e:	e7f0      	b.n	801a742 <_strtod_l+0x102>
 801a760:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a8e4 <_strtod_l+0x2a4>
 801a764:	e7ed      	b.n	801a742 <_strtod_l+0x102>
 801a766:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a76a:	f04f 3aff 	mov.w	sl, #4294967295
 801a76e:	e7e8      	b.n	801a742 <_strtod_l+0x102>
 801a770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a772:	1c5a      	adds	r2, r3, #1
 801a774:	9217      	str	r2, [sp, #92]	; 0x5c
 801a776:	785b      	ldrb	r3, [r3, #1]
 801a778:	2b30      	cmp	r3, #48	; 0x30
 801a77a:	d0f9      	beq.n	801a770 <_strtod_l+0x130>
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d0a3      	beq.n	801a6c8 <_strtod_l+0x88>
 801a780:	2301      	movs	r3, #1
 801a782:	f04f 0900 	mov.w	r9, #0
 801a786:	9304      	str	r3, [sp, #16]
 801a788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a78a:	9308      	str	r3, [sp, #32]
 801a78c:	f8cd 901c 	str.w	r9, [sp, #28]
 801a790:	464f      	mov	r7, r9
 801a792:	220a      	movs	r2, #10
 801a794:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a796:	7806      	ldrb	r6, [r0, #0]
 801a798:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a79c:	b2d9      	uxtb	r1, r3
 801a79e:	2909      	cmp	r1, #9
 801a7a0:	d92a      	bls.n	801a7f8 <_strtod_l+0x1b8>
 801a7a2:	9905      	ldr	r1, [sp, #20]
 801a7a4:	462a      	mov	r2, r5
 801a7a6:	f002 ff2b 	bl	801d600 <strncmp>
 801a7aa:	b398      	cbz	r0, 801a814 <_strtod_l+0x1d4>
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	4632      	mov	r2, r6
 801a7b0:	463d      	mov	r5, r7
 801a7b2:	9005      	str	r0, [sp, #20]
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	2a65      	cmp	r2, #101	; 0x65
 801a7b8:	d001      	beq.n	801a7be <_strtod_l+0x17e>
 801a7ba:	2a45      	cmp	r2, #69	; 0x45
 801a7bc:	d118      	bne.n	801a7f0 <_strtod_l+0x1b0>
 801a7be:	b91d      	cbnz	r5, 801a7c8 <_strtod_l+0x188>
 801a7c0:	9a04      	ldr	r2, [sp, #16]
 801a7c2:	4302      	orrs	r2, r0
 801a7c4:	d09e      	beq.n	801a704 <_strtod_l+0xc4>
 801a7c6:	2500      	movs	r5, #0
 801a7c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a7cc:	f108 0201 	add.w	r2, r8, #1
 801a7d0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a7d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a7d6:	2a2b      	cmp	r2, #43	; 0x2b
 801a7d8:	d075      	beq.n	801a8c6 <_strtod_l+0x286>
 801a7da:	2a2d      	cmp	r2, #45	; 0x2d
 801a7dc:	d07b      	beq.n	801a8d6 <_strtod_l+0x296>
 801a7de:	f04f 0c00 	mov.w	ip, #0
 801a7e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a7e6:	2909      	cmp	r1, #9
 801a7e8:	f240 8082 	bls.w	801a8f0 <_strtod_l+0x2b0>
 801a7ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a7f0:	2600      	movs	r6, #0
 801a7f2:	e09d      	b.n	801a930 <_strtod_l+0x2f0>
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	e7c4      	b.n	801a782 <_strtod_l+0x142>
 801a7f8:	2f08      	cmp	r7, #8
 801a7fa:	bfd8      	it	le
 801a7fc:	9907      	ldrle	r1, [sp, #28]
 801a7fe:	f100 0001 	add.w	r0, r0, #1
 801a802:	bfda      	itte	le
 801a804:	fb02 3301 	mlale	r3, r2, r1, r3
 801a808:	9307      	strle	r3, [sp, #28]
 801a80a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a80e:	3701      	adds	r7, #1
 801a810:	9017      	str	r0, [sp, #92]	; 0x5c
 801a812:	e7bf      	b.n	801a794 <_strtod_l+0x154>
 801a814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a816:	195a      	adds	r2, r3, r5
 801a818:	9217      	str	r2, [sp, #92]	; 0x5c
 801a81a:	5d5a      	ldrb	r2, [r3, r5]
 801a81c:	2f00      	cmp	r7, #0
 801a81e:	d037      	beq.n	801a890 <_strtod_l+0x250>
 801a820:	9005      	str	r0, [sp, #20]
 801a822:	463d      	mov	r5, r7
 801a824:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a828:	2b09      	cmp	r3, #9
 801a82a:	d912      	bls.n	801a852 <_strtod_l+0x212>
 801a82c:	2301      	movs	r3, #1
 801a82e:	e7c2      	b.n	801a7b6 <_strtod_l+0x176>
 801a830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a832:	1c5a      	adds	r2, r3, #1
 801a834:	9217      	str	r2, [sp, #92]	; 0x5c
 801a836:	785a      	ldrb	r2, [r3, #1]
 801a838:	3001      	adds	r0, #1
 801a83a:	2a30      	cmp	r2, #48	; 0x30
 801a83c:	d0f8      	beq.n	801a830 <_strtod_l+0x1f0>
 801a83e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a842:	2b08      	cmp	r3, #8
 801a844:	f200 84d9 	bhi.w	801b1fa <_strtod_l+0xbba>
 801a848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a84a:	9005      	str	r0, [sp, #20]
 801a84c:	2000      	movs	r0, #0
 801a84e:	9308      	str	r3, [sp, #32]
 801a850:	4605      	mov	r5, r0
 801a852:	3a30      	subs	r2, #48	; 0x30
 801a854:	f100 0301 	add.w	r3, r0, #1
 801a858:	d014      	beq.n	801a884 <_strtod_l+0x244>
 801a85a:	9905      	ldr	r1, [sp, #20]
 801a85c:	4419      	add	r1, r3
 801a85e:	9105      	str	r1, [sp, #20]
 801a860:	462b      	mov	r3, r5
 801a862:	eb00 0e05 	add.w	lr, r0, r5
 801a866:	210a      	movs	r1, #10
 801a868:	4573      	cmp	r3, lr
 801a86a:	d113      	bne.n	801a894 <_strtod_l+0x254>
 801a86c:	182b      	adds	r3, r5, r0
 801a86e:	2b08      	cmp	r3, #8
 801a870:	f105 0501 	add.w	r5, r5, #1
 801a874:	4405      	add	r5, r0
 801a876:	dc1c      	bgt.n	801a8b2 <_strtod_l+0x272>
 801a878:	9907      	ldr	r1, [sp, #28]
 801a87a:	230a      	movs	r3, #10
 801a87c:	fb03 2301 	mla	r3, r3, r1, r2
 801a880:	9307      	str	r3, [sp, #28]
 801a882:	2300      	movs	r3, #0
 801a884:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a886:	1c51      	adds	r1, r2, #1
 801a888:	9117      	str	r1, [sp, #92]	; 0x5c
 801a88a:	7852      	ldrb	r2, [r2, #1]
 801a88c:	4618      	mov	r0, r3
 801a88e:	e7c9      	b.n	801a824 <_strtod_l+0x1e4>
 801a890:	4638      	mov	r0, r7
 801a892:	e7d2      	b.n	801a83a <_strtod_l+0x1fa>
 801a894:	2b08      	cmp	r3, #8
 801a896:	dc04      	bgt.n	801a8a2 <_strtod_l+0x262>
 801a898:	9e07      	ldr	r6, [sp, #28]
 801a89a:	434e      	muls	r6, r1
 801a89c:	9607      	str	r6, [sp, #28]
 801a89e:	3301      	adds	r3, #1
 801a8a0:	e7e2      	b.n	801a868 <_strtod_l+0x228>
 801a8a2:	f103 0c01 	add.w	ip, r3, #1
 801a8a6:	f1bc 0f10 	cmp.w	ip, #16
 801a8aa:	bfd8      	it	le
 801a8ac:	fb01 f909 	mulle.w	r9, r1, r9
 801a8b0:	e7f5      	b.n	801a89e <_strtod_l+0x25e>
 801a8b2:	2d10      	cmp	r5, #16
 801a8b4:	bfdc      	itt	le
 801a8b6:	230a      	movle	r3, #10
 801a8b8:	fb03 2909 	mlale	r9, r3, r9, r2
 801a8bc:	e7e1      	b.n	801a882 <_strtod_l+0x242>
 801a8be:	2300      	movs	r3, #0
 801a8c0:	9305      	str	r3, [sp, #20]
 801a8c2:	2301      	movs	r3, #1
 801a8c4:	e77c      	b.n	801a7c0 <_strtod_l+0x180>
 801a8c6:	f04f 0c00 	mov.w	ip, #0
 801a8ca:	f108 0202 	add.w	r2, r8, #2
 801a8ce:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a8d4:	e785      	b.n	801a7e2 <_strtod_l+0x1a2>
 801a8d6:	f04f 0c01 	mov.w	ip, #1
 801a8da:	e7f6      	b.n	801a8ca <_strtod_l+0x28a>
 801a8dc:	08052448 	.word	0x08052448
 801a8e0:	08052200 	.word	0x08052200
 801a8e4:	7ff00000 	.word	0x7ff00000
 801a8e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a8ea:	1c51      	adds	r1, r2, #1
 801a8ec:	9117      	str	r1, [sp, #92]	; 0x5c
 801a8ee:	7852      	ldrb	r2, [r2, #1]
 801a8f0:	2a30      	cmp	r2, #48	; 0x30
 801a8f2:	d0f9      	beq.n	801a8e8 <_strtod_l+0x2a8>
 801a8f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a8f8:	2908      	cmp	r1, #8
 801a8fa:	f63f af79 	bhi.w	801a7f0 <_strtod_l+0x1b0>
 801a8fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a904:	9206      	str	r2, [sp, #24]
 801a906:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a908:	1c51      	adds	r1, r2, #1
 801a90a:	9117      	str	r1, [sp, #92]	; 0x5c
 801a90c:	7852      	ldrb	r2, [r2, #1]
 801a90e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a912:	2e09      	cmp	r6, #9
 801a914:	d937      	bls.n	801a986 <_strtod_l+0x346>
 801a916:	9e06      	ldr	r6, [sp, #24]
 801a918:	1b89      	subs	r1, r1, r6
 801a91a:	2908      	cmp	r1, #8
 801a91c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a920:	dc02      	bgt.n	801a928 <_strtod_l+0x2e8>
 801a922:	4576      	cmp	r6, lr
 801a924:	bfa8      	it	ge
 801a926:	4676      	movge	r6, lr
 801a928:	f1bc 0f00 	cmp.w	ip, #0
 801a92c:	d000      	beq.n	801a930 <_strtod_l+0x2f0>
 801a92e:	4276      	negs	r6, r6
 801a930:	2d00      	cmp	r5, #0
 801a932:	d14d      	bne.n	801a9d0 <_strtod_l+0x390>
 801a934:	9904      	ldr	r1, [sp, #16]
 801a936:	4301      	orrs	r1, r0
 801a938:	f47f aec6 	bne.w	801a6c8 <_strtod_l+0x88>
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	f47f aee1 	bne.w	801a704 <_strtod_l+0xc4>
 801a942:	2a69      	cmp	r2, #105	; 0x69
 801a944:	d027      	beq.n	801a996 <_strtod_l+0x356>
 801a946:	dc24      	bgt.n	801a992 <_strtod_l+0x352>
 801a948:	2a49      	cmp	r2, #73	; 0x49
 801a94a:	d024      	beq.n	801a996 <_strtod_l+0x356>
 801a94c:	2a4e      	cmp	r2, #78	; 0x4e
 801a94e:	f47f aed9 	bne.w	801a704 <_strtod_l+0xc4>
 801a952:	499f      	ldr	r1, [pc, #636]	; (801abd0 <_strtod_l+0x590>)
 801a954:	a817      	add	r0, sp, #92	; 0x5c
 801a956:	f001 fe49 	bl	801c5ec <__match>
 801a95a:	2800      	cmp	r0, #0
 801a95c:	f43f aed2 	beq.w	801a704 <_strtod_l+0xc4>
 801a960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a962:	781b      	ldrb	r3, [r3, #0]
 801a964:	2b28      	cmp	r3, #40	; 0x28
 801a966:	d12d      	bne.n	801a9c4 <_strtod_l+0x384>
 801a968:	499a      	ldr	r1, [pc, #616]	; (801abd4 <_strtod_l+0x594>)
 801a96a:	aa1a      	add	r2, sp, #104	; 0x68
 801a96c:	a817      	add	r0, sp, #92	; 0x5c
 801a96e:	f001 fe51 	bl	801c614 <__hexnan>
 801a972:	2805      	cmp	r0, #5
 801a974:	d126      	bne.n	801a9c4 <_strtod_l+0x384>
 801a976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a978:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a97c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a980:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a984:	e6a0      	b.n	801a6c8 <_strtod_l+0x88>
 801a986:	210a      	movs	r1, #10
 801a988:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a98c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a990:	e7b9      	b.n	801a906 <_strtod_l+0x2c6>
 801a992:	2a6e      	cmp	r2, #110	; 0x6e
 801a994:	e7db      	b.n	801a94e <_strtod_l+0x30e>
 801a996:	4990      	ldr	r1, [pc, #576]	; (801abd8 <_strtod_l+0x598>)
 801a998:	a817      	add	r0, sp, #92	; 0x5c
 801a99a:	f001 fe27 	bl	801c5ec <__match>
 801a99e:	2800      	cmp	r0, #0
 801a9a0:	f43f aeb0 	beq.w	801a704 <_strtod_l+0xc4>
 801a9a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9a6:	498d      	ldr	r1, [pc, #564]	; (801abdc <_strtod_l+0x59c>)
 801a9a8:	3b01      	subs	r3, #1
 801a9aa:	a817      	add	r0, sp, #92	; 0x5c
 801a9ac:	9317      	str	r3, [sp, #92]	; 0x5c
 801a9ae:	f001 fe1d 	bl	801c5ec <__match>
 801a9b2:	b910      	cbnz	r0, 801a9ba <_strtod_l+0x37a>
 801a9b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9b6:	3301      	adds	r3, #1
 801a9b8:	9317      	str	r3, [sp, #92]	; 0x5c
 801a9ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 801abec <_strtod_l+0x5ac>
 801a9be:	f04f 0a00 	mov.w	sl, #0
 801a9c2:	e681      	b.n	801a6c8 <_strtod_l+0x88>
 801a9c4:	4886      	ldr	r0, [pc, #536]	; (801abe0 <_strtod_l+0x5a0>)
 801a9c6:	f002 fe03 	bl	801d5d0 <nan>
 801a9ca:	ec5b ab10 	vmov	sl, fp, d0
 801a9ce:	e67b      	b.n	801a6c8 <_strtod_l+0x88>
 801a9d0:	9b05      	ldr	r3, [sp, #20]
 801a9d2:	9807      	ldr	r0, [sp, #28]
 801a9d4:	1af3      	subs	r3, r6, r3
 801a9d6:	2f00      	cmp	r7, #0
 801a9d8:	bf08      	it	eq
 801a9da:	462f      	moveq	r7, r5
 801a9dc:	2d10      	cmp	r5, #16
 801a9de:	9306      	str	r3, [sp, #24]
 801a9e0:	46a8      	mov	r8, r5
 801a9e2:	bfa8      	it	ge
 801a9e4:	f04f 0810 	movge.w	r8, #16
 801a9e8:	f7fe f994 	bl	8018d14 <__aeabi_ui2d>
 801a9ec:	2d09      	cmp	r5, #9
 801a9ee:	4682      	mov	sl, r0
 801a9f0:	468b      	mov	fp, r1
 801a9f2:	dd13      	ble.n	801aa1c <_strtod_l+0x3dc>
 801a9f4:	4b7b      	ldr	r3, [pc, #492]	; (801abe4 <_strtod_l+0x5a4>)
 801a9f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a9fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a9fe:	f7fe fa03 	bl	8018e08 <__aeabi_dmul>
 801aa02:	4682      	mov	sl, r0
 801aa04:	4648      	mov	r0, r9
 801aa06:	468b      	mov	fp, r1
 801aa08:	f7fe f984 	bl	8018d14 <__aeabi_ui2d>
 801aa0c:	4602      	mov	r2, r0
 801aa0e:	460b      	mov	r3, r1
 801aa10:	4650      	mov	r0, sl
 801aa12:	4659      	mov	r1, fp
 801aa14:	f7fe f842 	bl	8018a9c <__adddf3>
 801aa18:	4682      	mov	sl, r0
 801aa1a:	468b      	mov	fp, r1
 801aa1c:	2d0f      	cmp	r5, #15
 801aa1e:	dc38      	bgt.n	801aa92 <_strtod_l+0x452>
 801aa20:	9b06      	ldr	r3, [sp, #24]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	f43f ae50 	beq.w	801a6c8 <_strtod_l+0x88>
 801aa28:	dd24      	ble.n	801aa74 <_strtod_l+0x434>
 801aa2a:	2b16      	cmp	r3, #22
 801aa2c:	dc0b      	bgt.n	801aa46 <_strtod_l+0x406>
 801aa2e:	496d      	ldr	r1, [pc, #436]	; (801abe4 <_strtod_l+0x5a4>)
 801aa30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aa34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa38:	4652      	mov	r2, sl
 801aa3a:	465b      	mov	r3, fp
 801aa3c:	f7fe f9e4 	bl	8018e08 <__aeabi_dmul>
 801aa40:	4682      	mov	sl, r0
 801aa42:	468b      	mov	fp, r1
 801aa44:	e640      	b.n	801a6c8 <_strtod_l+0x88>
 801aa46:	9a06      	ldr	r2, [sp, #24]
 801aa48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	db20      	blt.n	801aa92 <_strtod_l+0x452>
 801aa50:	4c64      	ldr	r4, [pc, #400]	; (801abe4 <_strtod_l+0x5a4>)
 801aa52:	f1c5 050f 	rsb	r5, r5, #15
 801aa56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801aa5a:	4652      	mov	r2, sl
 801aa5c:	465b      	mov	r3, fp
 801aa5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa62:	f7fe f9d1 	bl	8018e08 <__aeabi_dmul>
 801aa66:	9b06      	ldr	r3, [sp, #24]
 801aa68:	1b5d      	subs	r5, r3, r5
 801aa6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801aa6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aa72:	e7e3      	b.n	801aa3c <_strtod_l+0x3fc>
 801aa74:	9b06      	ldr	r3, [sp, #24]
 801aa76:	3316      	adds	r3, #22
 801aa78:	db0b      	blt.n	801aa92 <_strtod_l+0x452>
 801aa7a:	9b05      	ldr	r3, [sp, #20]
 801aa7c:	1b9e      	subs	r6, r3, r6
 801aa7e:	4b59      	ldr	r3, [pc, #356]	; (801abe4 <_strtod_l+0x5a4>)
 801aa80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801aa84:	e9d6 2300 	ldrd	r2, r3, [r6]
 801aa88:	4650      	mov	r0, sl
 801aa8a:	4659      	mov	r1, fp
 801aa8c:	f7fe fae6 	bl	801905c <__aeabi_ddiv>
 801aa90:	e7d6      	b.n	801aa40 <_strtod_l+0x400>
 801aa92:	9b06      	ldr	r3, [sp, #24]
 801aa94:	eba5 0808 	sub.w	r8, r5, r8
 801aa98:	4498      	add	r8, r3
 801aa9a:	f1b8 0f00 	cmp.w	r8, #0
 801aa9e:	dd74      	ble.n	801ab8a <_strtod_l+0x54a>
 801aaa0:	f018 030f 	ands.w	r3, r8, #15
 801aaa4:	d00a      	beq.n	801aabc <_strtod_l+0x47c>
 801aaa6:	494f      	ldr	r1, [pc, #316]	; (801abe4 <_strtod_l+0x5a4>)
 801aaa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aaac:	4652      	mov	r2, sl
 801aaae:	465b      	mov	r3, fp
 801aab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aab4:	f7fe f9a8 	bl	8018e08 <__aeabi_dmul>
 801aab8:	4682      	mov	sl, r0
 801aaba:	468b      	mov	fp, r1
 801aabc:	f038 080f 	bics.w	r8, r8, #15
 801aac0:	d04f      	beq.n	801ab62 <_strtod_l+0x522>
 801aac2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801aac6:	dd22      	ble.n	801ab0e <_strtod_l+0x4ce>
 801aac8:	2500      	movs	r5, #0
 801aaca:	462e      	mov	r6, r5
 801aacc:	9507      	str	r5, [sp, #28]
 801aace:	9505      	str	r5, [sp, #20]
 801aad0:	2322      	movs	r3, #34	; 0x22
 801aad2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801abec <_strtod_l+0x5ac>
 801aad6:	6023      	str	r3, [r4, #0]
 801aad8:	f04f 0a00 	mov.w	sl, #0
 801aadc:	9b07      	ldr	r3, [sp, #28]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	f43f adf2 	beq.w	801a6c8 <_strtod_l+0x88>
 801aae4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aae6:	4620      	mov	r0, r4
 801aae8:	f001 fe9c 	bl	801c824 <_Bfree>
 801aaec:	9905      	ldr	r1, [sp, #20]
 801aaee:	4620      	mov	r0, r4
 801aaf0:	f001 fe98 	bl	801c824 <_Bfree>
 801aaf4:	4631      	mov	r1, r6
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	f001 fe94 	bl	801c824 <_Bfree>
 801aafc:	9907      	ldr	r1, [sp, #28]
 801aafe:	4620      	mov	r0, r4
 801ab00:	f001 fe90 	bl	801c824 <_Bfree>
 801ab04:	4629      	mov	r1, r5
 801ab06:	4620      	mov	r0, r4
 801ab08:	f001 fe8c 	bl	801c824 <_Bfree>
 801ab0c:	e5dc      	b.n	801a6c8 <_strtod_l+0x88>
 801ab0e:	4b36      	ldr	r3, [pc, #216]	; (801abe8 <_strtod_l+0x5a8>)
 801ab10:	9304      	str	r3, [sp, #16]
 801ab12:	2300      	movs	r3, #0
 801ab14:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ab18:	4650      	mov	r0, sl
 801ab1a:	4659      	mov	r1, fp
 801ab1c:	4699      	mov	r9, r3
 801ab1e:	f1b8 0f01 	cmp.w	r8, #1
 801ab22:	dc21      	bgt.n	801ab68 <_strtod_l+0x528>
 801ab24:	b10b      	cbz	r3, 801ab2a <_strtod_l+0x4ea>
 801ab26:	4682      	mov	sl, r0
 801ab28:	468b      	mov	fp, r1
 801ab2a:	4b2f      	ldr	r3, [pc, #188]	; (801abe8 <_strtod_l+0x5a8>)
 801ab2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ab30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ab34:	4652      	mov	r2, sl
 801ab36:	465b      	mov	r3, fp
 801ab38:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ab3c:	f7fe f964 	bl	8018e08 <__aeabi_dmul>
 801ab40:	4b2a      	ldr	r3, [pc, #168]	; (801abec <_strtod_l+0x5ac>)
 801ab42:	460a      	mov	r2, r1
 801ab44:	400b      	ands	r3, r1
 801ab46:	492a      	ldr	r1, [pc, #168]	; (801abf0 <_strtod_l+0x5b0>)
 801ab48:	428b      	cmp	r3, r1
 801ab4a:	4682      	mov	sl, r0
 801ab4c:	d8bc      	bhi.n	801aac8 <_strtod_l+0x488>
 801ab4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ab52:	428b      	cmp	r3, r1
 801ab54:	bf86      	itte	hi
 801ab56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801abf4 <_strtod_l+0x5b4>
 801ab5a:	f04f 3aff 	movhi.w	sl, #4294967295
 801ab5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ab62:	2300      	movs	r3, #0
 801ab64:	9304      	str	r3, [sp, #16]
 801ab66:	e084      	b.n	801ac72 <_strtod_l+0x632>
 801ab68:	f018 0f01 	tst.w	r8, #1
 801ab6c:	d005      	beq.n	801ab7a <_strtod_l+0x53a>
 801ab6e:	9b04      	ldr	r3, [sp, #16]
 801ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab74:	f7fe f948 	bl	8018e08 <__aeabi_dmul>
 801ab78:	2301      	movs	r3, #1
 801ab7a:	9a04      	ldr	r2, [sp, #16]
 801ab7c:	3208      	adds	r2, #8
 801ab7e:	f109 0901 	add.w	r9, r9, #1
 801ab82:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ab86:	9204      	str	r2, [sp, #16]
 801ab88:	e7c9      	b.n	801ab1e <_strtod_l+0x4de>
 801ab8a:	d0ea      	beq.n	801ab62 <_strtod_l+0x522>
 801ab8c:	f1c8 0800 	rsb	r8, r8, #0
 801ab90:	f018 020f 	ands.w	r2, r8, #15
 801ab94:	d00a      	beq.n	801abac <_strtod_l+0x56c>
 801ab96:	4b13      	ldr	r3, [pc, #76]	; (801abe4 <_strtod_l+0x5a4>)
 801ab98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ab9c:	4650      	mov	r0, sl
 801ab9e:	4659      	mov	r1, fp
 801aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba4:	f7fe fa5a 	bl	801905c <__aeabi_ddiv>
 801aba8:	4682      	mov	sl, r0
 801abaa:	468b      	mov	fp, r1
 801abac:	ea5f 1828 	movs.w	r8, r8, asr #4
 801abb0:	d0d7      	beq.n	801ab62 <_strtod_l+0x522>
 801abb2:	f1b8 0f1f 	cmp.w	r8, #31
 801abb6:	dd1f      	ble.n	801abf8 <_strtod_l+0x5b8>
 801abb8:	2500      	movs	r5, #0
 801abba:	462e      	mov	r6, r5
 801abbc:	9507      	str	r5, [sp, #28]
 801abbe:	9505      	str	r5, [sp, #20]
 801abc0:	2322      	movs	r3, #34	; 0x22
 801abc2:	f04f 0a00 	mov.w	sl, #0
 801abc6:	f04f 0b00 	mov.w	fp, #0
 801abca:	6023      	str	r3, [r4, #0]
 801abcc:	e786      	b.n	801aadc <_strtod_l+0x49c>
 801abce:	bf00      	nop
 801abd0:	080521d1 	.word	0x080521d1
 801abd4:	08052214 	.word	0x08052214
 801abd8:	080521c9 	.word	0x080521c9
 801abdc:	08052354 	.word	0x08052354
 801abe0:	08052600 	.word	0x08052600
 801abe4:	080524e0 	.word	0x080524e0
 801abe8:	080524b8 	.word	0x080524b8
 801abec:	7ff00000 	.word	0x7ff00000
 801abf0:	7ca00000 	.word	0x7ca00000
 801abf4:	7fefffff 	.word	0x7fefffff
 801abf8:	f018 0310 	ands.w	r3, r8, #16
 801abfc:	bf18      	it	ne
 801abfe:	236a      	movne	r3, #106	; 0x6a
 801ac00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801afb0 <_strtod_l+0x970>
 801ac04:	9304      	str	r3, [sp, #16]
 801ac06:	4650      	mov	r0, sl
 801ac08:	4659      	mov	r1, fp
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	f018 0f01 	tst.w	r8, #1
 801ac10:	d004      	beq.n	801ac1c <_strtod_l+0x5dc>
 801ac12:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ac16:	f7fe f8f7 	bl	8018e08 <__aeabi_dmul>
 801ac1a:	2301      	movs	r3, #1
 801ac1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ac20:	f109 0908 	add.w	r9, r9, #8
 801ac24:	d1f2      	bne.n	801ac0c <_strtod_l+0x5cc>
 801ac26:	b10b      	cbz	r3, 801ac2c <_strtod_l+0x5ec>
 801ac28:	4682      	mov	sl, r0
 801ac2a:	468b      	mov	fp, r1
 801ac2c:	9b04      	ldr	r3, [sp, #16]
 801ac2e:	b1c3      	cbz	r3, 801ac62 <_strtod_l+0x622>
 801ac30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ac34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	4659      	mov	r1, fp
 801ac3c:	dd11      	ble.n	801ac62 <_strtod_l+0x622>
 801ac3e:	2b1f      	cmp	r3, #31
 801ac40:	f340 8124 	ble.w	801ae8c <_strtod_l+0x84c>
 801ac44:	2b34      	cmp	r3, #52	; 0x34
 801ac46:	bfde      	ittt	le
 801ac48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ac4c:	f04f 33ff 	movle.w	r3, #4294967295
 801ac50:	fa03 f202 	lslle.w	r2, r3, r2
 801ac54:	f04f 0a00 	mov.w	sl, #0
 801ac58:	bfcc      	ite	gt
 801ac5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ac5e:	ea02 0b01 	andle.w	fp, r2, r1
 801ac62:	2200      	movs	r2, #0
 801ac64:	2300      	movs	r3, #0
 801ac66:	4650      	mov	r0, sl
 801ac68:	4659      	mov	r1, fp
 801ac6a:	f7fe fb35 	bl	80192d8 <__aeabi_dcmpeq>
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	d1a2      	bne.n	801abb8 <_strtod_l+0x578>
 801ac72:	9b07      	ldr	r3, [sp, #28]
 801ac74:	9300      	str	r3, [sp, #0]
 801ac76:	9908      	ldr	r1, [sp, #32]
 801ac78:	462b      	mov	r3, r5
 801ac7a:	463a      	mov	r2, r7
 801ac7c:	4620      	mov	r0, r4
 801ac7e:	f001 fe39 	bl	801c8f4 <__s2b>
 801ac82:	9007      	str	r0, [sp, #28]
 801ac84:	2800      	cmp	r0, #0
 801ac86:	f43f af1f 	beq.w	801aac8 <_strtod_l+0x488>
 801ac8a:	9b05      	ldr	r3, [sp, #20]
 801ac8c:	1b9e      	subs	r6, r3, r6
 801ac8e:	9b06      	ldr	r3, [sp, #24]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	bfb4      	ite	lt
 801ac94:	4633      	movlt	r3, r6
 801ac96:	2300      	movge	r3, #0
 801ac98:	930c      	str	r3, [sp, #48]	; 0x30
 801ac9a:	9b06      	ldr	r3, [sp, #24]
 801ac9c:	2500      	movs	r5, #0
 801ac9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aca2:	9312      	str	r3, [sp, #72]	; 0x48
 801aca4:	462e      	mov	r6, r5
 801aca6:	9b07      	ldr	r3, [sp, #28]
 801aca8:	4620      	mov	r0, r4
 801acaa:	6859      	ldr	r1, [r3, #4]
 801acac:	f001 fd7a 	bl	801c7a4 <_Balloc>
 801acb0:	9005      	str	r0, [sp, #20]
 801acb2:	2800      	cmp	r0, #0
 801acb4:	f43f af0c 	beq.w	801aad0 <_strtod_l+0x490>
 801acb8:	9b07      	ldr	r3, [sp, #28]
 801acba:	691a      	ldr	r2, [r3, #16]
 801acbc:	3202      	adds	r2, #2
 801acbe:	f103 010c 	add.w	r1, r3, #12
 801acc2:	0092      	lsls	r2, r2, #2
 801acc4:	300c      	adds	r0, #12
 801acc6:	f001 fd5f 	bl	801c788 <memcpy>
 801acca:	ec4b ab10 	vmov	d0, sl, fp
 801acce:	aa1a      	add	r2, sp, #104	; 0x68
 801acd0:	a919      	add	r1, sp, #100	; 0x64
 801acd2:	4620      	mov	r0, r4
 801acd4:	f002 f954 	bl	801cf80 <__d2b>
 801acd8:	ec4b ab18 	vmov	d8, sl, fp
 801acdc:	9018      	str	r0, [sp, #96]	; 0x60
 801acde:	2800      	cmp	r0, #0
 801ace0:	f43f aef6 	beq.w	801aad0 <_strtod_l+0x490>
 801ace4:	2101      	movs	r1, #1
 801ace6:	4620      	mov	r0, r4
 801ace8:	f001 fe9e 	bl	801ca28 <__i2b>
 801acec:	4606      	mov	r6, r0
 801acee:	2800      	cmp	r0, #0
 801acf0:	f43f aeee 	beq.w	801aad0 <_strtod_l+0x490>
 801acf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801acf6:	9904      	ldr	r1, [sp, #16]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	bfab      	itete	ge
 801acfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801acfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ad00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ad02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801ad06:	bfac      	ite	ge
 801ad08:	eb03 0902 	addge.w	r9, r3, r2
 801ad0c:	1ad7      	sublt	r7, r2, r3
 801ad0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ad10:	eba3 0801 	sub.w	r8, r3, r1
 801ad14:	4490      	add	r8, r2
 801ad16:	4ba1      	ldr	r3, [pc, #644]	; (801af9c <_strtod_l+0x95c>)
 801ad18:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad1c:	4598      	cmp	r8, r3
 801ad1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ad22:	f280 80c7 	bge.w	801aeb4 <_strtod_l+0x874>
 801ad26:	eba3 0308 	sub.w	r3, r3, r8
 801ad2a:	2b1f      	cmp	r3, #31
 801ad2c:	eba2 0203 	sub.w	r2, r2, r3
 801ad30:	f04f 0101 	mov.w	r1, #1
 801ad34:	f300 80b1 	bgt.w	801ae9a <_strtod_l+0x85a>
 801ad38:	fa01 f303 	lsl.w	r3, r1, r3
 801ad3c:	930d      	str	r3, [sp, #52]	; 0x34
 801ad3e:	2300      	movs	r3, #0
 801ad40:	9308      	str	r3, [sp, #32]
 801ad42:	eb09 0802 	add.w	r8, r9, r2
 801ad46:	9b04      	ldr	r3, [sp, #16]
 801ad48:	45c1      	cmp	r9, r8
 801ad4a:	4417      	add	r7, r2
 801ad4c:	441f      	add	r7, r3
 801ad4e:	464b      	mov	r3, r9
 801ad50:	bfa8      	it	ge
 801ad52:	4643      	movge	r3, r8
 801ad54:	42bb      	cmp	r3, r7
 801ad56:	bfa8      	it	ge
 801ad58:	463b      	movge	r3, r7
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	bfc2      	ittt	gt
 801ad5e:	eba8 0803 	subgt.w	r8, r8, r3
 801ad62:	1aff      	subgt	r7, r7, r3
 801ad64:	eba9 0903 	subgt.w	r9, r9, r3
 801ad68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	dd17      	ble.n	801ad9e <_strtod_l+0x75e>
 801ad6e:	4631      	mov	r1, r6
 801ad70:	461a      	mov	r2, r3
 801ad72:	4620      	mov	r0, r4
 801ad74:	f001 ff18 	bl	801cba8 <__pow5mult>
 801ad78:	4606      	mov	r6, r0
 801ad7a:	2800      	cmp	r0, #0
 801ad7c:	f43f aea8 	beq.w	801aad0 <_strtod_l+0x490>
 801ad80:	4601      	mov	r1, r0
 801ad82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ad84:	4620      	mov	r0, r4
 801ad86:	f001 fe65 	bl	801ca54 <__multiply>
 801ad8a:	900b      	str	r0, [sp, #44]	; 0x2c
 801ad8c:	2800      	cmp	r0, #0
 801ad8e:	f43f ae9f 	beq.w	801aad0 <_strtod_l+0x490>
 801ad92:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ad94:	4620      	mov	r0, r4
 801ad96:	f001 fd45 	bl	801c824 <_Bfree>
 801ad9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad9c:	9318      	str	r3, [sp, #96]	; 0x60
 801ad9e:	f1b8 0f00 	cmp.w	r8, #0
 801ada2:	f300 808c 	bgt.w	801aebe <_strtod_l+0x87e>
 801ada6:	9b06      	ldr	r3, [sp, #24]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	dd08      	ble.n	801adbe <_strtod_l+0x77e>
 801adac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801adae:	9905      	ldr	r1, [sp, #20]
 801adb0:	4620      	mov	r0, r4
 801adb2:	f001 fef9 	bl	801cba8 <__pow5mult>
 801adb6:	9005      	str	r0, [sp, #20]
 801adb8:	2800      	cmp	r0, #0
 801adba:	f43f ae89 	beq.w	801aad0 <_strtod_l+0x490>
 801adbe:	2f00      	cmp	r7, #0
 801adc0:	dd08      	ble.n	801add4 <_strtod_l+0x794>
 801adc2:	9905      	ldr	r1, [sp, #20]
 801adc4:	463a      	mov	r2, r7
 801adc6:	4620      	mov	r0, r4
 801adc8:	f001 ff48 	bl	801cc5c <__lshift>
 801adcc:	9005      	str	r0, [sp, #20]
 801adce:	2800      	cmp	r0, #0
 801add0:	f43f ae7e 	beq.w	801aad0 <_strtod_l+0x490>
 801add4:	f1b9 0f00 	cmp.w	r9, #0
 801add8:	dd08      	ble.n	801adec <_strtod_l+0x7ac>
 801adda:	4631      	mov	r1, r6
 801addc:	464a      	mov	r2, r9
 801adde:	4620      	mov	r0, r4
 801ade0:	f001 ff3c 	bl	801cc5c <__lshift>
 801ade4:	4606      	mov	r6, r0
 801ade6:	2800      	cmp	r0, #0
 801ade8:	f43f ae72 	beq.w	801aad0 <_strtod_l+0x490>
 801adec:	9a05      	ldr	r2, [sp, #20]
 801adee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801adf0:	4620      	mov	r0, r4
 801adf2:	f001 ffbf 	bl	801cd74 <__mdiff>
 801adf6:	4605      	mov	r5, r0
 801adf8:	2800      	cmp	r0, #0
 801adfa:	f43f ae69 	beq.w	801aad0 <_strtod_l+0x490>
 801adfe:	68c3      	ldr	r3, [r0, #12]
 801ae00:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae02:	2300      	movs	r3, #0
 801ae04:	60c3      	str	r3, [r0, #12]
 801ae06:	4631      	mov	r1, r6
 801ae08:	f001 ff98 	bl	801cd3c <__mcmp>
 801ae0c:	2800      	cmp	r0, #0
 801ae0e:	da60      	bge.n	801aed2 <_strtod_l+0x892>
 801ae10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae12:	ea53 030a 	orrs.w	r3, r3, sl
 801ae16:	f040 8082 	bne.w	801af1e <_strtod_l+0x8de>
 801ae1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d17d      	bne.n	801af1e <_strtod_l+0x8de>
 801ae22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae26:	0d1b      	lsrs	r3, r3, #20
 801ae28:	051b      	lsls	r3, r3, #20
 801ae2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ae2e:	d976      	bls.n	801af1e <_strtod_l+0x8de>
 801ae30:	696b      	ldr	r3, [r5, #20]
 801ae32:	b913      	cbnz	r3, 801ae3a <_strtod_l+0x7fa>
 801ae34:	692b      	ldr	r3, [r5, #16]
 801ae36:	2b01      	cmp	r3, #1
 801ae38:	dd71      	ble.n	801af1e <_strtod_l+0x8de>
 801ae3a:	4629      	mov	r1, r5
 801ae3c:	2201      	movs	r2, #1
 801ae3e:	4620      	mov	r0, r4
 801ae40:	f001 ff0c 	bl	801cc5c <__lshift>
 801ae44:	4631      	mov	r1, r6
 801ae46:	4605      	mov	r5, r0
 801ae48:	f001 ff78 	bl	801cd3c <__mcmp>
 801ae4c:	2800      	cmp	r0, #0
 801ae4e:	dd66      	ble.n	801af1e <_strtod_l+0x8de>
 801ae50:	9904      	ldr	r1, [sp, #16]
 801ae52:	4a53      	ldr	r2, [pc, #332]	; (801afa0 <_strtod_l+0x960>)
 801ae54:	465b      	mov	r3, fp
 801ae56:	2900      	cmp	r1, #0
 801ae58:	f000 8081 	beq.w	801af5e <_strtod_l+0x91e>
 801ae5c:	ea02 010b 	and.w	r1, r2, fp
 801ae60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ae64:	dc7b      	bgt.n	801af5e <_strtod_l+0x91e>
 801ae66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ae6a:	f77f aea9 	ble.w	801abc0 <_strtod_l+0x580>
 801ae6e:	4b4d      	ldr	r3, [pc, #308]	; (801afa4 <_strtod_l+0x964>)
 801ae70:	4650      	mov	r0, sl
 801ae72:	4659      	mov	r1, fp
 801ae74:	2200      	movs	r2, #0
 801ae76:	f7fd ffc7 	bl	8018e08 <__aeabi_dmul>
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	4303      	orrs	r3, r0
 801ae7e:	bf08      	it	eq
 801ae80:	2322      	moveq	r3, #34	; 0x22
 801ae82:	4682      	mov	sl, r0
 801ae84:	468b      	mov	fp, r1
 801ae86:	bf08      	it	eq
 801ae88:	6023      	streq	r3, [r4, #0]
 801ae8a:	e62b      	b.n	801aae4 <_strtod_l+0x4a4>
 801ae8c:	f04f 32ff 	mov.w	r2, #4294967295
 801ae90:	fa02 f303 	lsl.w	r3, r2, r3
 801ae94:	ea03 0a0a 	and.w	sl, r3, sl
 801ae98:	e6e3      	b.n	801ac62 <_strtod_l+0x622>
 801ae9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ae9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801aea2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801aea6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801aeaa:	fa01 f308 	lsl.w	r3, r1, r8
 801aeae:	9308      	str	r3, [sp, #32]
 801aeb0:	910d      	str	r1, [sp, #52]	; 0x34
 801aeb2:	e746      	b.n	801ad42 <_strtod_l+0x702>
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	9308      	str	r3, [sp, #32]
 801aeb8:	2301      	movs	r3, #1
 801aeba:	930d      	str	r3, [sp, #52]	; 0x34
 801aebc:	e741      	b.n	801ad42 <_strtod_l+0x702>
 801aebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aec0:	4642      	mov	r2, r8
 801aec2:	4620      	mov	r0, r4
 801aec4:	f001 feca 	bl	801cc5c <__lshift>
 801aec8:	9018      	str	r0, [sp, #96]	; 0x60
 801aeca:	2800      	cmp	r0, #0
 801aecc:	f47f af6b 	bne.w	801ada6 <_strtod_l+0x766>
 801aed0:	e5fe      	b.n	801aad0 <_strtod_l+0x490>
 801aed2:	465f      	mov	r7, fp
 801aed4:	d16e      	bne.n	801afb4 <_strtod_l+0x974>
 801aed6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aedc:	b342      	cbz	r2, 801af30 <_strtod_l+0x8f0>
 801aede:	4a32      	ldr	r2, [pc, #200]	; (801afa8 <_strtod_l+0x968>)
 801aee0:	4293      	cmp	r3, r2
 801aee2:	d128      	bne.n	801af36 <_strtod_l+0x8f6>
 801aee4:	9b04      	ldr	r3, [sp, #16]
 801aee6:	4651      	mov	r1, sl
 801aee8:	b1eb      	cbz	r3, 801af26 <_strtod_l+0x8e6>
 801aeea:	4b2d      	ldr	r3, [pc, #180]	; (801afa0 <_strtod_l+0x960>)
 801aeec:	403b      	ands	r3, r7
 801aeee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801aef2:	f04f 32ff 	mov.w	r2, #4294967295
 801aef6:	d819      	bhi.n	801af2c <_strtod_l+0x8ec>
 801aef8:	0d1b      	lsrs	r3, r3, #20
 801aefa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801aefe:	fa02 f303 	lsl.w	r3, r2, r3
 801af02:	4299      	cmp	r1, r3
 801af04:	d117      	bne.n	801af36 <_strtod_l+0x8f6>
 801af06:	4b29      	ldr	r3, [pc, #164]	; (801afac <_strtod_l+0x96c>)
 801af08:	429f      	cmp	r7, r3
 801af0a:	d102      	bne.n	801af12 <_strtod_l+0x8d2>
 801af0c:	3101      	adds	r1, #1
 801af0e:	f43f addf 	beq.w	801aad0 <_strtod_l+0x490>
 801af12:	4b23      	ldr	r3, [pc, #140]	; (801afa0 <_strtod_l+0x960>)
 801af14:	403b      	ands	r3, r7
 801af16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801af1a:	f04f 0a00 	mov.w	sl, #0
 801af1e:	9b04      	ldr	r3, [sp, #16]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d1a4      	bne.n	801ae6e <_strtod_l+0x82e>
 801af24:	e5de      	b.n	801aae4 <_strtod_l+0x4a4>
 801af26:	f04f 33ff 	mov.w	r3, #4294967295
 801af2a:	e7ea      	b.n	801af02 <_strtod_l+0x8c2>
 801af2c:	4613      	mov	r3, r2
 801af2e:	e7e8      	b.n	801af02 <_strtod_l+0x8c2>
 801af30:	ea53 030a 	orrs.w	r3, r3, sl
 801af34:	d08c      	beq.n	801ae50 <_strtod_l+0x810>
 801af36:	9b08      	ldr	r3, [sp, #32]
 801af38:	b1db      	cbz	r3, 801af72 <_strtod_l+0x932>
 801af3a:	423b      	tst	r3, r7
 801af3c:	d0ef      	beq.n	801af1e <_strtod_l+0x8de>
 801af3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af40:	9a04      	ldr	r2, [sp, #16]
 801af42:	4650      	mov	r0, sl
 801af44:	4659      	mov	r1, fp
 801af46:	b1c3      	cbz	r3, 801af7a <_strtod_l+0x93a>
 801af48:	f7ff fb5e 	bl	801a608 <sulp>
 801af4c:	4602      	mov	r2, r0
 801af4e:	460b      	mov	r3, r1
 801af50:	ec51 0b18 	vmov	r0, r1, d8
 801af54:	f7fd fda2 	bl	8018a9c <__adddf3>
 801af58:	4682      	mov	sl, r0
 801af5a:	468b      	mov	fp, r1
 801af5c:	e7df      	b.n	801af1e <_strtod_l+0x8de>
 801af5e:	4013      	ands	r3, r2
 801af60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801af64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801af68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801af6c:	f04f 3aff 	mov.w	sl, #4294967295
 801af70:	e7d5      	b.n	801af1e <_strtod_l+0x8de>
 801af72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af74:	ea13 0f0a 	tst.w	r3, sl
 801af78:	e7e0      	b.n	801af3c <_strtod_l+0x8fc>
 801af7a:	f7ff fb45 	bl	801a608 <sulp>
 801af7e:	4602      	mov	r2, r0
 801af80:	460b      	mov	r3, r1
 801af82:	ec51 0b18 	vmov	r0, r1, d8
 801af86:	f7fd fd87 	bl	8018a98 <__aeabi_dsub>
 801af8a:	2200      	movs	r2, #0
 801af8c:	2300      	movs	r3, #0
 801af8e:	4682      	mov	sl, r0
 801af90:	468b      	mov	fp, r1
 801af92:	f7fe f9a1 	bl	80192d8 <__aeabi_dcmpeq>
 801af96:	2800      	cmp	r0, #0
 801af98:	d0c1      	beq.n	801af1e <_strtod_l+0x8de>
 801af9a:	e611      	b.n	801abc0 <_strtod_l+0x580>
 801af9c:	fffffc02 	.word	0xfffffc02
 801afa0:	7ff00000 	.word	0x7ff00000
 801afa4:	39500000 	.word	0x39500000
 801afa8:	000fffff 	.word	0x000fffff
 801afac:	7fefffff 	.word	0x7fefffff
 801afb0:	08052228 	.word	0x08052228
 801afb4:	4631      	mov	r1, r6
 801afb6:	4628      	mov	r0, r5
 801afb8:	f002 f83e 	bl	801d038 <__ratio>
 801afbc:	ec59 8b10 	vmov	r8, r9, d0
 801afc0:	ee10 0a10 	vmov	r0, s0
 801afc4:	2200      	movs	r2, #0
 801afc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801afca:	4649      	mov	r1, r9
 801afcc:	f7fe f998 	bl	8019300 <__aeabi_dcmple>
 801afd0:	2800      	cmp	r0, #0
 801afd2:	d07a      	beq.n	801b0ca <_strtod_l+0xa8a>
 801afd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d04a      	beq.n	801b070 <_strtod_l+0xa30>
 801afda:	4b95      	ldr	r3, [pc, #596]	; (801b230 <_strtod_l+0xbf0>)
 801afdc:	2200      	movs	r2, #0
 801afde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801afe2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b230 <_strtod_l+0xbf0>
 801afe6:	f04f 0800 	mov.w	r8, #0
 801afea:	4b92      	ldr	r3, [pc, #584]	; (801b234 <_strtod_l+0xbf4>)
 801afec:	403b      	ands	r3, r7
 801afee:	930d      	str	r3, [sp, #52]	; 0x34
 801aff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aff2:	4b91      	ldr	r3, [pc, #580]	; (801b238 <_strtod_l+0xbf8>)
 801aff4:	429a      	cmp	r2, r3
 801aff6:	f040 80b0 	bne.w	801b15a <_strtod_l+0xb1a>
 801affa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801affe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b002:	ec4b ab10 	vmov	d0, sl, fp
 801b006:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b00a:	f001 ff3d 	bl	801ce88 <__ulp>
 801b00e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b012:	ec53 2b10 	vmov	r2, r3, d0
 801b016:	f7fd fef7 	bl	8018e08 <__aeabi_dmul>
 801b01a:	4652      	mov	r2, sl
 801b01c:	465b      	mov	r3, fp
 801b01e:	f7fd fd3d 	bl	8018a9c <__adddf3>
 801b022:	460b      	mov	r3, r1
 801b024:	4983      	ldr	r1, [pc, #524]	; (801b234 <_strtod_l+0xbf4>)
 801b026:	4a85      	ldr	r2, [pc, #532]	; (801b23c <_strtod_l+0xbfc>)
 801b028:	4019      	ands	r1, r3
 801b02a:	4291      	cmp	r1, r2
 801b02c:	4682      	mov	sl, r0
 801b02e:	d960      	bls.n	801b0f2 <_strtod_l+0xab2>
 801b030:	ee18 3a90 	vmov	r3, s17
 801b034:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b038:	4293      	cmp	r3, r2
 801b03a:	d104      	bne.n	801b046 <_strtod_l+0xa06>
 801b03c:	ee18 3a10 	vmov	r3, s16
 801b040:	3301      	adds	r3, #1
 801b042:	f43f ad45 	beq.w	801aad0 <_strtod_l+0x490>
 801b046:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b248 <_strtod_l+0xc08>
 801b04a:	f04f 3aff 	mov.w	sl, #4294967295
 801b04e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b050:	4620      	mov	r0, r4
 801b052:	f001 fbe7 	bl	801c824 <_Bfree>
 801b056:	9905      	ldr	r1, [sp, #20]
 801b058:	4620      	mov	r0, r4
 801b05a:	f001 fbe3 	bl	801c824 <_Bfree>
 801b05e:	4631      	mov	r1, r6
 801b060:	4620      	mov	r0, r4
 801b062:	f001 fbdf 	bl	801c824 <_Bfree>
 801b066:	4629      	mov	r1, r5
 801b068:	4620      	mov	r0, r4
 801b06a:	f001 fbdb 	bl	801c824 <_Bfree>
 801b06e:	e61a      	b.n	801aca6 <_strtod_l+0x666>
 801b070:	f1ba 0f00 	cmp.w	sl, #0
 801b074:	d11b      	bne.n	801b0ae <_strtod_l+0xa6e>
 801b076:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b07a:	b9f3      	cbnz	r3, 801b0ba <_strtod_l+0xa7a>
 801b07c:	4b6c      	ldr	r3, [pc, #432]	; (801b230 <_strtod_l+0xbf0>)
 801b07e:	2200      	movs	r2, #0
 801b080:	4640      	mov	r0, r8
 801b082:	4649      	mov	r1, r9
 801b084:	f7fe f932 	bl	80192ec <__aeabi_dcmplt>
 801b088:	b9d0      	cbnz	r0, 801b0c0 <_strtod_l+0xa80>
 801b08a:	4640      	mov	r0, r8
 801b08c:	4649      	mov	r1, r9
 801b08e:	4b6c      	ldr	r3, [pc, #432]	; (801b240 <_strtod_l+0xc00>)
 801b090:	2200      	movs	r2, #0
 801b092:	f7fd feb9 	bl	8018e08 <__aeabi_dmul>
 801b096:	4680      	mov	r8, r0
 801b098:	4689      	mov	r9, r1
 801b09a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b09e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b0a2:	9315      	str	r3, [sp, #84]	; 0x54
 801b0a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b0a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0ac:	e79d      	b.n	801afea <_strtod_l+0x9aa>
 801b0ae:	f1ba 0f01 	cmp.w	sl, #1
 801b0b2:	d102      	bne.n	801b0ba <_strtod_l+0xa7a>
 801b0b4:	2f00      	cmp	r7, #0
 801b0b6:	f43f ad83 	beq.w	801abc0 <_strtod_l+0x580>
 801b0ba:	4b62      	ldr	r3, [pc, #392]	; (801b244 <_strtod_l+0xc04>)
 801b0bc:	2200      	movs	r2, #0
 801b0be:	e78e      	b.n	801afde <_strtod_l+0x99e>
 801b0c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b240 <_strtod_l+0xc00>
 801b0c4:	f04f 0800 	mov.w	r8, #0
 801b0c8:	e7e7      	b.n	801b09a <_strtod_l+0xa5a>
 801b0ca:	4b5d      	ldr	r3, [pc, #372]	; (801b240 <_strtod_l+0xc00>)
 801b0cc:	4640      	mov	r0, r8
 801b0ce:	4649      	mov	r1, r9
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	f7fd fe99 	bl	8018e08 <__aeabi_dmul>
 801b0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0d8:	4680      	mov	r8, r0
 801b0da:	4689      	mov	r9, r1
 801b0dc:	b933      	cbnz	r3, 801b0ec <_strtod_l+0xaac>
 801b0de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b0e2:	900e      	str	r0, [sp, #56]	; 0x38
 801b0e4:	930f      	str	r3, [sp, #60]	; 0x3c
 801b0e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b0ea:	e7dd      	b.n	801b0a8 <_strtod_l+0xa68>
 801b0ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b0f0:	e7f9      	b.n	801b0e6 <_strtod_l+0xaa6>
 801b0f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b0f6:	9b04      	ldr	r3, [sp, #16]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d1a8      	bne.n	801b04e <_strtod_l+0xa0e>
 801b0fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b102:	0d1b      	lsrs	r3, r3, #20
 801b104:	051b      	lsls	r3, r3, #20
 801b106:	429a      	cmp	r2, r3
 801b108:	d1a1      	bne.n	801b04e <_strtod_l+0xa0e>
 801b10a:	4640      	mov	r0, r8
 801b10c:	4649      	mov	r1, r9
 801b10e:	f7fe f9c3 	bl	8019498 <__aeabi_d2lz>
 801b112:	f7fd fe4b 	bl	8018dac <__aeabi_l2d>
 801b116:	4602      	mov	r2, r0
 801b118:	460b      	mov	r3, r1
 801b11a:	4640      	mov	r0, r8
 801b11c:	4649      	mov	r1, r9
 801b11e:	f7fd fcbb 	bl	8018a98 <__aeabi_dsub>
 801b122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b128:	ea43 030a 	orr.w	r3, r3, sl
 801b12c:	4313      	orrs	r3, r2
 801b12e:	4680      	mov	r8, r0
 801b130:	4689      	mov	r9, r1
 801b132:	d055      	beq.n	801b1e0 <_strtod_l+0xba0>
 801b134:	a336      	add	r3, pc, #216	; (adr r3, 801b210 <_strtod_l+0xbd0>)
 801b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13a:	f7fe f8d7 	bl	80192ec <__aeabi_dcmplt>
 801b13e:	2800      	cmp	r0, #0
 801b140:	f47f acd0 	bne.w	801aae4 <_strtod_l+0x4a4>
 801b144:	a334      	add	r3, pc, #208	; (adr r3, 801b218 <_strtod_l+0xbd8>)
 801b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14a:	4640      	mov	r0, r8
 801b14c:	4649      	mov	r1, r9
 801b14e:	f7fe f8eb 	bl	8019328 <__aeabi_dcmpgt>
 801b152:	2800      	cmp	r0, #0
 801b154:	f43f af7b 	beq.w	801b04e <_strtod_l+0xa0e>
 801b158:	e4c4      	b.n	801aae4 <_strtod_l+0x4a4>
 801b15a:	9b04      	ldr	r3, [sp, #16]
 801b15c:	b333      	cbz	r3, 801b1ac <_strtod_l+0xb6c>
 801b15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b160:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b164:	d822      	bhi.n	801b1ac <_strtod_l+0xb6c>
 801b166:	a32e      	add	r3, pc, #184	; (adr r3, 801b220 <_strtod_l+0xbe0>)
 801b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b16c:	4640      	mov	r0, r8
 801b16e:	4649      	mov	r1, r9
 801b170:	f7fe f8c6 	bl	8019300 <__aeabi_dcmple>
 801b174:	b1a0      	cbz	r0, 801b1a0 <_strtod_l+0xb60>
 801b176:	4649      	mov	r1, r9
 801b178:	4640      	mov	r0, r8
 801b17a:	f7fe f91d 	bl	80193b8 <__aeabi_d2uiz>
 801b17e:	2801      	cmp	r0, #1
 801b180:	bf38      	it	cc
 801b182:	2001      	movcc	r0, #1
 801b184:	f7fd fdc6 	bl	8018d14 <__aeabi_ui2d>
 801b188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b18a:	4680      	mov	r8, r0
 801b18c:	4689      	mov	r9, r1
 801b18e:	bb23      	cbnz	r3, 801b1da <_strtod_l+0xb9a>
 801b190:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b194:	9010      	str	r0, [sp, #64]	; 0x40
 801b196:	9311      	str	r3, [sp, #68]	; 0x44
 801b198:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b19c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b1a8:	1a9b      	subs	r3, r3, r2
 801b1aa:	9309      	str	r3, [sp, #36]	; 0x24
 801b1ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b1b0:	eeb0 0a48 	vmov.f32	s0, s16
 801b1b4:	eef0 0a68 	vmov.f32	s1, s17
 801b1b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b1bc:	f001 fe64 	bl	801ce88 <__ulp>
 801b1c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b1c4:	ec53 2b10 	vmov	r2, r3, d0
 801b1c8:	f7fd fe1e 	bl	8018e08 <__aeabi_dmul>
 801b1cc:	ec53 2b18 	vmov	r2, r3, d8
 801b1d0:	f7fd fc64 	bl	8018a9c <__adddf3>
 801b1d4:	4682      	mov	sl, r0
 801b1d6:	468b      	mov	fp, r1
 801b1d8:	e78d      	b.n	801b0f6 <_strtod_l+0xab6>
 801b1da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b1de:	e7db      	b.n	801b198 <_strtod_l+0xb58>
 801b1e0:	a311      	add	r3, pc, #68	; (adr r3, 801b228 <_strtod_l+0xbe8>)
 801b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e6:	f7fe f881 	bl	80192ec <__aeabi_dcmplt>
 801b1ea:	e7b2      	b.n	801b152 <_strtod_l+0xb12>
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	930a      	str	r3, [sp, #40]	; 0x28
 801b1f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b1f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b1f4:	6013      	str	r3, [r2, #0]
 801b1f6:	f7ff ba6b 	b.w	801a6d0 <_strtod_l+0x90>
 801b1fa:	2a65      	cmp	r2, #101	; 0x65
 801b1fc:	f43f ab5f 	beq.w	801a8be <_strtod_l+0x27e>
 801b200:	2a45      	cmp	r2, #69	; 0x45
 801b202:	f43f ab5c 	beq.w	801a8be <_strtod_l+0x27e>
 801b206:	2301      	movs	r3, #1
 801b208:	f7ff bb94 	b.w	801a934 <_strtod_l+0x2f4>
 801b20c:	f3af 8000 	nop.w
 801b210:	94a03595 	.word	0x94a03595
 801b214:	3fdfffff 	.word	0x3fdfffff
 801b218:	35afe535 	.word	0x35afe535
 801b21c:	3fe00000 	.word	0x3fe00000
 801b220:	ffc00000 	.word	0xffc00000
 801b224:	41dfffff 	.word	0x41dfffff
 801b228:	94a03595 	.word	0x94a03595
 801b22c:	3fcfffff 	.word	0x3fcfffff
 801b230:	3ff00000 	.word	0x3ff00000
 801b234:	7ff00000 	.word	0x7ff00000
 801b238:	7fe00000 	.word	0x7fe00000
 801b23c:	7c9fffff 	.word	0x7c9fffff
 801b240:	3fe00000 	.word	0x3fe00000
 801b244:	bff00000 	.word	0xbff00000
 801b248:	7fefffff 	.word	0x7fefffff

0801b24c <_strtod_r>:
 801b24c:	4b01      	ldr	r3, [pc, #4]	; (801b254 <_strtod_r+0x8>)
 801b24e:	f7ff b9f7 	b.w	801a640 <_strtod_l>
 801b252:	bf00      	nop
 801b254:	200000cc 	.word	0x200000cc

0801b258 <_strtol_l.constprop.0>:
 801b258:	2b01      	cmp	r3, #1
 801b25a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b25e:	d001      	beq.n	801b264 <_strtol_l.constprop.0+0xc>
 801b260:	2b24      	cmp	r3, #36	; 0x24
 801b262:	d906      	bls.n	801b272 <_strtol_l.constprop.0+0x1a>
 801b264:	f7fe fafe 	bl	8019864 <__errno>
 801b268:	2316      	movs	r3, #22
 801b26a:	6003      	str	r3, [r0, #0]
 801b26c:	2000      	movs	r0, #0
 801b26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b272:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b358 <_strtol_l.constprop.0+0x100>
 801b276:	460d      	mov	r5, r1
 801b278:	462e      	mov	r6, r5
 801b27a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b27e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b282:	f017 0708 	ands.w	r7, r7, #8
 801b286:	d1f7      	bne.n	801b278 <_strtol_l.constprop.0+0x20>
 801b288:	2c2d      	cmp	r4, #45	; 0x2d
 801b28a:	d132      	bne.n	801b2f2 <_strtol_l.constprop.0+0x9a>
 801b28c:	782c      	ldrb	r4, [r5, #0]
 801b28e:	2701      	movs	r7, #1
 801b290:	1cb5      	adds	r5, r6, #2
 801b292:	2b00      	cmp	r3, #0
 801b294:	d05b      	beq.n	801b34e <_strtol_l.constprop.0+0xf6>
 801b296:	2b10      	cmp	r3, #16
 801b298:	d109      	bne.n	801b2ae <_strtol_l.constprop.0+0x56>
 801b29a:	2c30      	cmp	r4, #48	; 0x30
 801b29c:	d107      	bne.n	801b2ae <_strtol_l.constprop.0+0x56>
 801b29e:	782c      	ldrb	r4, [r5, #0]
 801b2a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b2a4:	2c58      	cmp	r4, #88	; 0x58
 801b2a6:	d14d      	bne.n	801b344 <_strtol_l.constprop.0+0xec>
 801b2a8:	786c      	ldrb	r4, [r5, #1]
 801b2aa:	2310      	movs	r3, #16
 801b2ac:	3502      	adds	r5, #2
 801b2ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b2b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b2b6:	f04f 0c00 	mov.w	ip, #0
 801b2ba:	fbb8 f9f3 	udiv	r9, r8, r3
 801b2be:	4666      	mov	r6, ip
 801b2c0:	fb03 8a19 	mls	sl, r3, r9, r8
 801b2c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b2c8:	f1be 0f09 	cmp.w	lr, #9
 801b2cc:	d816      	bhi.n	801b2fc <_strtol_l.constprop.0+0xa4>
 801b2ce:	4674      	mov	r4, lr
 801b2d0:	42a3      	cmp	r3, r4
 801b2d2:	dd24      	ble.n	801b31e <_strtol_l.constprop.0+0xc6>
 801b2d4:	f1bc 0f00 	cmp.w	ip, #0
 801b2d8:	db1e      	blt.n	801b318 <_strtol_l.constprop.0+0xc0>
 801b2da:	45b1      	cmp	r9, r6
 801b2dc:	d31c      	bcc.n	801b318 <_strtol_l.constprop.0+0xc0>
 801b2de:	d101      	bne.n	801b2e4 <_strtol_l.constprop.0+0x8c>
 801b2e0:	45a2      	cmp	sl, r4
 801b2e2:	db19      	blt.n	801b318 <_strtol_l.constprop.0+0xc0>
 801b2e4:	fb06 4603 	mla	r6, r6, r3, r4
 801b2e8:	f04f 0c01 	mov.w	ip, #1
 801b2ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2f0:	e7e8      	b.n	801b2c4 <_strtol_l.constprop.0+0x6c>
 801b2f2:	2c2b      	cmp	r4, #43	; 0x2b
 801b2f4:	bf04      	itt	eq
 801b2f6:	782c      	ldrbeq	r4, [r5, #0]
 801b2f8:	1cb5      	addeq	r5, r6, #2
 801b2fa:	e7ca      	b.n	801b292 <_strtol_l.constprop.0+0x3a>
 801b2fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b300:	f1be 0f19 	cmp.w	lr, #25
 801b304:	d801      	bhi.n	801b30a <_strtol_l.constprop.0+0xb2>
 801b306:	3c37      	subs	r4, #55	; 0x37
 801b308:	e7e2      	b.n	801b2d0 <_strtol_l.constprop.0+0x78>
 801b30a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b30e:	f1be 0f19 	cmp.w	lr, #25
 801b312:	d804      	bhi.n	801b31e <_strtol_l.constprop.0+0xc6>
 801b314:	3c57      	subs	r4, #87	; 0x57
 801b316:	e7db      	b.n	801b2d0 <_strtol_l.constprop.0+0x78>
 801b318:	f04f 3cff 	mov.w	ip, #4294967295
 801b31c:	e7e6      	b.n	801b2ec <_strtol_l.constprop.0+0x94>
 801b31e:	f1bc 0f00 	cmp.w	ip, #0
 801b322:	da05      	bge.n	801b330 <_strtol_l.constprop.0+0xd8>
 801b324:	2322      	movs	r3, #34	; 0x22
 801b326:	6003      	str	r3, [r0, #0]
 801b328:	4646      	mov	r6, r8
 801b32a:	b942      	cbnz	r2, 801b33e <_strtol_l.constprop.0+0xe6>
 801b32c:	4630      	mov	r0, r6
 801b32e:	e79e      	b.n	801b26e <_strtol_l.constprop.0+0x16>
 801b330:	b107      	cbz	r7, 801b334 <_strtol_l.constprop.0+0xdc>
 801b332:	4276      	negs	r6, r6
 801b334:	2a00      	cmp	r2, #0
 801b336:	d0f9      	beq.n	801b32c <_strtol_l.constprop.0+0xd4>
 801b338:	f1bc 0f00 	cmp.w	ip, #0
 801b33c:	d000      	beq.n	801b340 <_strtol_l.constprop.0+0xe8>
 801b33e:	1e69      	subs	r1, r5, #1
 801b340:	6011      	str	r1, [r2, #0]
 801b342:	e7f3      	b.n	801b32c <_strtol_l.constprop.0+0xd4>
 801b344:	2430      	movs	r4, #48	; 0x30
 801b346:	2b00      	cmp	r3, #0
 801b348:	d1b1      	bne.n	801b2ae <_strtol_l.constprop.0+0x56>
 801b34a:	2308      	movs	r3, #8
 801b34c:	e7af      	b.n	801b2ae <_strtol_l.constprop.0+0x56>
 801b34e:	2c30      	cmp	r4, #48	; 0x30
 801b350:	d0a5      	beq.n	801b29e <_strtol_l.constprop.0+0x46>
 801b352:	230a      	movs	r3, #10
 801b354:	e7ab      	b.n	801b2ae <_strtol_l.constprop.0+0x56>
 801b356:	bf00      	nop
 801b358:	08052251 	.word	0x08052251

0801b35c <_strtol_r>:
 801b35c:	f7ff bf7c 	b.w	801b258 <_strtol_l.constprop.0>

0801b360 <strtol>:
 801b360:	4613      	mov	r3, r2
 801b362:	460a      	mov	r2, r1
 801b364:	4601      	mov	r1, r0
 801b366:	4802      	ldr	r0, [pc, #8]	; (801b370 <strtol+0x10>)
 801b368:	6800      	ldr	r0, [r0, #0]
 801b36a:	f7ff bf75 	b.w	801b258 <_strtol_l.constprop.0>
 801b36e:	bf00      	nop
 801b370:	20000064 	.word	0x20000064

0801b374 <quorem>:
 801b374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b378:	6903      	ldr	r3, [r0, #16]
 801b37a:	690c      	ldr	r4, [r1, #16]
 801b37c:	42a3      	cmp	r3, r4
 801b37e:	4607      	mov	r7, r0
 801b380:	f2c0 8081 	blt.w	801b486 <quorem+0x112>
 801b384:	3c01      	subs	r4, #1
 801b386:	f101 0814 	add.w	r8, r1, #20
 801b38a:	f100 0514 	add.w	r5, r0, #20
 801b38e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b392:	9301      	str	r3, [sp, #4]
 801b394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b39c:	3301      	adds	r3, #1
 801b39e:	429a      	cmp	r2, r3
 801b3a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b3a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b3a8:	fbb2 f6f3 	udiv	r6, r2, r3
 801b3ac:	d331      	bcc.n	801b412 <quorem+0x9e>
 801b3ae:	f04f 0e00 	mov.w	lr, #0
 801b3b2:	4640      	mov	r0, r8
 801b3b4:	46ac      	mov	ip, r5
 801b3b6:	46f2      	mov	sl, lr
 801b3b8:	f850 2b04 	ldr.w	r2, [r0], #4
 801b3bc:	b293      	uxth	r3, r2
 801b3be:	fb06 e303 	mla	r3, r6, r3, lr
 801b3c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b3c6:	b29b      	uxth	r3, r3
 801b3c8:	ebaa 0303 	sub.w	r3, sl, r3
 801b3cc:	f8dc a000 	ldr.w	sl, [ip]
 801b3d0:	0c12      	lsrs	r2, r2, #16
 801b3d2:	fa13 f38a 	uxtah	r3, r3, sl
 801b3d6:	fb06 e202 	mla	r2, r6, r2, lr
 801b3da:	9300      	str	r3, [sp, #0]
 801b3dc:	9b00      	ldr	r3, [sp, #0]
 801b3de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b3e2:	b292      	uxth	r2, r2
 801b3e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b3e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b3ec:	f8bd 3000 	ldrh.w	r3, [sp]
 801b3f0:	4581      	cmp	r9, r0
 801b3f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b3f6:	f84c 3b04 	str.w	r3, [ip], #4
 801b3fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b3fe:	d2db      	bcs.n	801b3b8 <quorem+0x44>
 801b400:	f855 300b 	ldr.w	r3, [r5, fp]
 801b404:	b92b      	cbnz	r3, 801b412 <quorem+0x9e>
 801b406:	9b01      	ldr	r3, [sp, #4]
 801b408:	3b04      	subs	r3, #4
 801b40a:	429d      	cmp	r5, r3
 801b40c:	461a      	mov	r2, r3
 801b40e:	d32e      	bcc.n	801b46e <quorem+0xfa>
 801b410:	613c      	str	r4, [r7, #16]
 801b412:	4638      	mov	r0, r7
 801b414:	f001 fc92 	bl	801cd3c <__mcmp>
 801b418:	2800      	cmp	r0, #0
 801b41a:	db24      	blt.n	801b466 <quorem+0xf2>
 801b41c:	3601      	adds	r6, #1
 801b41e:	4628      	mov	r0, r5
 801b420:	f04f 0c00 	mov.w	ip, #0
 801b424:	f858 2b04 	ldr.w	r2, [r8], #4
 801b428:	f8d0 e000 	ldr.w	lr, [r0]
 801b42c:	b293      	uxth	r3, r2
 801b42e:	ebac 0303 	sub.w	r3, ip, r3
 801b432:	0c12      	lsrs	r2, r2, #16
 801b434:	fa13 f38e 	uxtah	r3, r3, lr
 801b438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b440:	b29b      	uxth	r3, r3
 801b442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b446:	45c1      	cmp	r9, r8
 801b448:	f840 3b04 	str.w	r3, [r0], #4
 801b44c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b450:	d2e8      	bcs.n	801b424 <quorem+0xb0>
 801b452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b45a:	b922      	cbnz	r2, 801b466 <quorem+0xf2>
 801b45c:	3b04      	subs	r3, #4
 801b45e:	429d      	cmp	r5, r3
 801b460:	461a      	mov	r2, r3
 801b462:	d30a      	bcc.n	801b47a <quorem+0x106>
 801b464:	613c      	str	r4, [r7, #16]
 801b466:	4630      	mov	r0, r6
 801b468:	b003      	add	sp, #12
 801b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46e:	6812      	ldr	r2, [r2, #0]
 801b470:	3b04      	subs	r3, #4
 801b472:	2a00      	cmp	r2, #0
 801b474:	d1cc      	bne.n	801b410 <quorem+0x9c>
 801b476:	3c01      	subs	r4, #1
 801b478:	e7c7      	b.n	801b40a <quorem+0x96>
 801b47a:	6812      	ldr	r2, [r2, #0]
 801b47c:	3b04      	subs	r3, #4
 801b47e:	2a00      	cmp	r2, #0
 801b480:	d1f0      	bne.n	801b464 <quorem+0xf0>
 801b482:	3c01      	subs	r4, #1
 801b484:	e7eb      	b.n	801b45e <quorem+0xea>
 801b486:	2000      	movs	r0, #0
 801b488:	e7ee      	b.n	801b468 <quorem+0xf4>
 801b48a:	0000      	movs	r0, r0
 801b48c:	0000      	movs	r0, r0
	...

0801b490 <_dtoa_r>:
 801b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b494:	ed2d 8b04 	vpush	{d8-d9}
 801b498:	ec57 6b10 	vmov	r6, r7, d0
 801b49c:	b093      	sub	sp, #76	; 0x4c
 801b49e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b4a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b4a4:	9106      	str	r1, [sp, #24]
 801b4a6:	ee10 aa10 	vmov	sl, s0
 801b4aa:	4604      	mov	r4, r0
 801b4ac:	9209      	str	r2, [sp, #36]	; 0x24
 801b4ae:	930c      	str	r3, [sp, #48]	; 0x30
 801b4b0:	46bb      	mov	fp, r7
 801b4b2:	b975      	cbnz	r5, 801b4d2 <_dtoa_r+0x42>
 801b4b4:	2010      	movs	r0, #16
 801b4b6:	f001 f94d 	bl	801c754 <malloc>
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	6260      	str	r0, [r4, #36]	; 0x24
 801b4be:	b920      	cbnz	r0, 801b4ca <_dtoa_r+0x3a>
 801b4c0:	4ba7      	ldr	r3, [pc, #668]	; (801b760 <_dtoa_r+0x2d0>)
 801b4c2:	21ea      	movs	r1, #234	; 0xea
 801b4c4:	48a7      	ldr	r0, [pc, #668]	; (801b764 <_dtoa_r+0x2d4>)
 801b4c6:	f002 f8bd 	bl	801d644 <__assert_func>
 801b4ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b4ce:	6005      	str	r5, [r0, #0]
 801b4d0:	60c5      	str	r5, [r0, #12]
 801b4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4d4:	6819      	ldr	r1, [r3, #0]
 801b4d6:	b151      	cbz	r1, 801b4ee <_dtoa_r+0x5e>
 801b4d8:	685a      	ldr	r2, [r3, #4]
 801b4da:	604a      	str	r2, [r1, #4]
 801b4dc:	2301      	movs	r3, #1
 801b4de:	4093      	lsls	r3, r2
 801b4e0:	608b      	str	r3, [r1, #8]
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	f001 f99e 	bl	801c824 <_Bfree>
 801b4e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	601a      	str	r2, [r3, #0]
 801b4ee:	1e3b      	subs	r3, r7, #0
 801b4f0:	bfaa      	itet	ge
 801b4f2:	2300      	movge	r3, #0
 801b4f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b4f8:	f8c8 3000 	strge.w	r3, [r8]
 801b4fc:	4b9a      	ldr	r3, [pc, #616]	; (801b768 <_dtoa_r+0x2d8>)
 801b4fe:	bfbc      	itt	lt
 801b500:	2201      	movlt	r2, #1
 801b502:	f8c8 2000 	strlt.w	r2, [r8]
 801b506:	ea33 030b 	bics.w	r3, r3, fp
 801b50a:	d11b      	bne.n	801b544 <_dtoa_r+0xb4>
 801b50c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b50e:	f242 730f 	movw	r3, #9999	; 0x270f
 801b512:	6013      	str	r3, [r2, #0]
 801b514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b518:	4333      	orrs	r3, r6
 801b51a:	f000 8592 	beq.w	801c042 <_dtoa_r+0xbb2>
 801b51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b520:	b963      	cbnz	r3, 801b53c <_dtoa_r+0xac>
 801b522:	4b92      	ldr	r3, [pc, #584]	; (801b76c <_dtoa_r+0x2dc>)
 801b524:	e022      	b.n	801b56c <_dtoa_r+0xdc>
 801b526:	4b92      	ldr	r3, [pc, #584]	; (801b770 <_dtoa_r+0x2e0>)
 801b528:	9301      	str	r3, [sp, #4]
 801b52a:	3308      	adds	r3, #8
 801b52c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b52e:	6013      	str	r3, [r2, #0]
 801b530:	9801      	ldr	r0, [sp, #4]
 801b532:	b013      	add	sp, #76	; 0x4c
 801b534:	ecbd 8b04 	vpop	{d8-d9}
 801b538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b53c:	4b8b      	ldr	r3, [pc, #556]	; (801b76c <_dtoa_r+0x2dc>)
 801b53e:	9301      	str	r3, [sp, #4]
 801b540:	3303      	adds	r3, #3
 801b542:	e7f3      	b.n	801b52c <_dtoa_r+0x9c>
 801b544:	2200      	movs	r2, #0
 801b546:	2300      	movs	r3, #0
 801b548:	4650      	mov	r0, sl
 801b54a:	4659      	mov	r1, fp
 801b54c:	f7fd fec4 	bl	80192d8 <__aeabi_dcmpeq>
 801b550:	ec4b ab19 	vmov	d9, sl, fp
 801b554:	4680      	mov	r8, r0
 801b556:	b158      	cbz	r0, 801b570 <_dtoa_r+0xe0>
 801b558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b55a:	2301      	movs	r3, #1
 801b55c:	6013      	str	r3, [r2, #0]
 801b55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b560:	2b00      	cmp	r3, #0
 801b562:	f000 856b 	beq.w	801c03c <_dtoa_r+0xbac>
 801b566:	4883      	ldr	r0, [pc, #524]	; (801b774 <_dtoa_r+0x2e4>)
 801b568:	6018      	str	r0, [r3, #0]
 801b56a:	1e43      	subs	r3, r0, #1
 801b56c:	9301      	str	r3, [sp, #4]
 801b56e:	e7df      	b.n	801b530 <_dtoa_r+0xa0>
 801b570:	ec4b ab10 	vmov	d0, sl, fp
 801b574:	aa10      	add	r2, sp, #64	; 0x40
 801b576:	a911      	add	r1, sp, #68	; 0x44
 801b578:	4620      	mov	r0, r4
 801b57a:	f001 fd01 	bl	801cf80 <__d2b>
 801b57e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b582:	ee08 0a10 	vmov	s16, r0
 801b586:	2d00      	cmp	r5, #0
 801b588:	f000 8084 	beq.w	801b694 <_dtoa_r+0x204>
 801b58c:	ee19 3a90 	vmov	r3, s19
 801b590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b594:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b598:	4656      	mov	r6, sl
 801b59a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b59e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b5a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b5a6:	4b74      	ldr	r3, [pc, #464]	; (801b778 <_dtoa_r+0x2e8>)
 801b5a8:	2200      	movs	r2, #0
 801b5aa:	4630      	mov	r0, r6
 801b5ac:	4639      	mov	r1, r7
 801b5ae:	f7fd fa73 	bl	8018a98 <__aeabi_dsub>
 801b5b2:	a365      	add	r3, pc, #404	; (adr r3, 801b748 <_dtoa_r+0x2b8>)
 801b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b8:	f7fd fc26 	bl	8018e08 <__aeabi_dmul>
 801b5bc:	a364      	add	r3, pc, #400	; (adr r3, 801b750 <_dtoa_r+0x2c0>)
 801b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c2:	f7fd fa6b 	bl	8018a9c <__adddf3>
 801b5c6:	4606      	mov	r6, r0
 801b5c8:	4628      	mov	r0, r5
 801b5ca:	460f      	mov	r7, r1
 801b5cc:	f7fd fbb2 	bl	8018d34 <__aeabi_i2d>
 801b5d0:	a361      	add	r3, pc, #388	; (adr r3, 801b758 <_dtoa_r+0x2c8>)
 801b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5d6:	f7fd fc17 	bl	8018e08 <__aeabi_dmul>
 801b5da:	4602      	mov	r2, r0
 801b5dc:	460b      	mov	r3, r1
 801b5de:	4630      	mov	r0, r6
 801b5e0:	4639      	mov	r1, r7
 801b5e2:	f7fd fa5b 	bl	8018a9c <__adddf3>
 801b5e6:	4606      	mov	r6, r0
 801b5e8:	460f      	mov	r7, r1
 801b5ea:	f7fd febd 	bl	8019368 <__aeabi_d2iz>
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	9000      	str	r0, [sp, #0]
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	4630      	mov	r0, r6
 801b5f6:	4639      	mov	r1, r7
 801b5f8:	f7fd fe78 	bl	80192ec <__aeabi_dcmplt>
 801b5fc:	b150      	cbz	r0, 801b614 <_dtoa_r+0x184>
 801b5fe:	9800      	ldr	r0, [sp, #0]
 801b600:	f7fd fb98 	bl	8018d34 <__aeabi_i2d>
 801b604:	4632      	mov	r2, r6
 801b606:	463b      	mov	r3, r7
 801b608:	f7fd fe66 	bl	80192d8 <__aeabi_dcmpeq>
 801b60c:	b910      	cbnz	r0, 801b614 <_dtoa_r+0x184>
 801b60e:	9b00      	ldr	r3, [sp, #0]
 801b610:	3b01      	subs	r3, #1
 801b612:	9300      	str	r3, [sp, #0]
 801b614:	9b00      	ldr	r3, [sp, #0]
 801b616:	2b16      	cmp	r3, #22
 801b618:	d85a      	bhi.n	801b6d0 <_dtoa_r+0x240>
 801b61a:	9a00      	ldr	r2, [sp, #0]
 801b61c:	4b57      	ldr	r3, [pc, #348]	; (801b77c <_dtoa_r+0x2ec>)
 801b61e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b626:	ec51 0b19 	vmov	r0, r1, d9
 801b62a:	f7fd fe5f 	bl	80192ec <__aeabi_dcmplt>
 801b62e:	2800      	cmp	r0, #0
 801b630:	d050      	beq.n	801b6d4 <_dtoa_r+0x244>
 801b632:	9b00      	ldr	r3, [sp, #0]
 801b634:	3b01      	subs	r3, #1
 801b636:	9300      	str	r3, [sp, #0]
 801b638:	2300      	movs	r3, #0
 801b63a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b63c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b63e:	1b5d      	subs	r5, r3, r5
 801b640:	1e6b      	subs	r3, r5, #1
 801b642:	9305      	str	r3, [sp, #20]
 801b644:	bf45      	ittet	mi
 801b646:	f1c5 0301 	rsbmi	r3, r5, #1
 801b64a:	9304      	strmi	r3, [sp, #16]
 801b64c:	2300      	movpl	r3, #0
 801b64e:	2300      	movmi	r3, #0
 801b650:	bf4c      	ite	mi
 801b652:	9305      	strmi	r3, [sp, #20]
 801b654:	9304      	strpl	r3, [sp, #16]
 801b656:	9b00      	ldr	r3, [sp, #0]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	db3d      	blt.n	801b6d8 <_dtoa_r+0x248>
 801b65c:	9b05      	ldr	r3, [sp, #20]
 801b65e:	9a00      	ldr	r2, [sp, #0]
 801b660:	920a      	str	r2, [sp, #40]	; 0x28
 801b662:	4413      	add	r3, r2
 801b664:	9305      	str	r3, [sp, #20]
 801b666:	2300      	movs	r3, #0
 801b668:	9307      	str	r3, [sp, #28]
 801b66a:	9b06      	ldr	r3, [sp, #24]
 801b66c:	2b09      	cmp	r3, #9
 801b66e:	f200 8089 	bhi.w	801b784 <_dtoa_r+0x2f4>
 801b672:	2b05      	cmp	r3, #5
 801b674:	bfc4      	itt	gt
 801b676:	3b04      	subgt	r3, #4
 801b678:	9306      	strgt	r3, [sp, #24]
 801b67a:	9b06      	ldr	r3, [sp, #24]
 801b67c:	f1a3 0302 	sub.w	r3, r3, #2
 801b680:	bfcc      	ite	gt
 801b682:	2500      	movgt	r5, #0
 801b684:	2501      	movle	r5, #1
 801b686:	2b03      	cmp	r3, #3
 801b688:	f200 8087 	bhi.w	801b79a <_dtoa_r+0x30a>
 801b68c:	e8df f003 	tbb	[pc, r3]
 801b690:	59383a2d 	.word	0x59383a2d
 801b694:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b698:	441d      	add	r5, r3
 801b69a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b69e:	2b20      	cmp	r3, #32
 801b6a0:	bfc1      	itttt	gt
 801b6a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b6a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b6aa:	fa0b f303 	lslgt.w	r3, fp, r3
 801b6ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b6b2:	bfda      	itte	le
 801b6b4:	f1c3 0320 	rsble	r3, r3, #32
 801b6b8:	fa06 f003 	lslle.w	r0, r6, r3
 801b6bc:	4318      	orrgt	r0, r3
 801b6be:	f7fd fb29 	bl	8018d14 <__aeabi_ui2d>
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	4606      	mov	r6, r0
 801b6c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b6ca:	3d01      	subs	r5, #1
 801b6cc:	930e      	str	r3, [sp, #56]	; 0x38
 801b6ce:	e76a      	b.n	801b5a6 <_dtoa_r+0x116>
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	e7b2      	b.n	801b63a <_dtoa_r+0x1aa>
 801b6d4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b6d6:	e7b1      	b.n	801b63c <_dtoa_r+0x1ac>
 801b6d8:	9b04      	ldr	r3, [sp, #16]
 801b6da:	9a00      	ldr	r2, [sp, #0]
 801b6dc:	1a9b      	subs	r3, r3, r2
 801b6de:	9304      	str	r3, [sp, #16]
 801b6e0:	4253      	negs	r3, r2
 801b6e2:	9307      	str	r3, [sp, #28]
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	930a      	str	r3, [sp, #40]	; 0x28
 801b6e8:	e7bf      	b.n	801b66a <_dtoa_r+0x1da>
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	9308      	str	r3, [sp, #32]
 801b6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	dc55      	bgt.n	801b7a0 <_dtoa_r+0x310>
 801b6f4:	2301      	movs	r3, #1
 801b6f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b6fa:	461a      	mov	r2, r3
 801b6fc:	9209      	str	r2, [sp, #36]	; 0x24
 801b6fe:	e00c      	b.n	801b71a <_dtoa_r+0x28a>
 801b700:	2301      	movs	r3, #1
 801b702:	e7f3      	b.n	801b6ec <_dtoa_r+0x25c>
 801b704:	2300      	movs	r3, #0
 801b706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b708:	9308      	str	r3, [sp, #32]
 801b70a:	9b00      	ldr	r3, [sp, #0]
 801b70c:	4413      	add	r3, r2
 801b70e:	9302      	str	r3, [sp, #8]
 801b710:	3301      	adds	r3, #1
 801b712:	2b01      	cmp	r3, #1
 801b714:	9303      	str	r3, [sp, #12]
 801b716:	bfb8      	it	lt
 801b718:	2301      	movlt	r3, #1
 801b71a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b71c:	2200      	movs	r2, #0
 801b71e:	6042      	str	r2, [r0, #4]
 801b720:	2204      	movs	r2, #4
 801b722:	f102 0614 	add.w	r6, r2, #20
 801b726:	429e      	cmp	r6, r3
 801b728:	6841      	ldr	r1, [r0, #4]
 801b72a:	d93d      	bls.n	801b7a8 <_dtoa_r+0x318>
 801b72c:	4620      	mov	r0, r4
 801b72e:	f001 f839 	bl	801c7a4 <_Balloc>
 801b732:	9001      	str	r0, [sp, #4]
 801b734:	2800      	cmp	r0, #0
 801b736:	d13b      	bne.n	801b7b0 <_dtoa_r+0x320>
 801b738:	4b11      	ldr	r3, [pc, #68]	; (801b780 <_dtoa_r+0x2f0>)
 801b73a:	4602      	mov	r2, r0
 801b73c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b740:	e6c0      	b.n	801b4c4 <_dtoa_r+0x34>
 801b742:	2301      	movs	r3, #1
 801b744:	e7df      	b.n	801b706 <_dtoa_r+0x276>
 801b746:	bf00      	nop
 801b748:	636f4361 	.word	0x636f4361
 801b74c:	3fd287a7 	.word	0x3fd287a7
 801b750:	8b60c8b3 	.word	0x8b60c8b3
 801b754:	3fc68a28 	.word	0x3fc68a28
 801b758:	509f79fb 	.word	0x509f79fb
 801b75c:	3fd34413 	.word	0x3fd34413
 801b760:	0805235e 	.word	0x0805235e
 801b764:	08052375 	.word	0x08052375
 801b768:	7ff00000 	.word	0x7ff00000
 801b76c:	0805235a 	.word	0x0805235a
 801b770:	08052351 	.word	0x08052351
 801b774:	080521d5 	.word	0x080521d5
 801b778:	3ff80000 	.word	0x3ff80000
 801b77c:	080524e0 	.word	0x080524e0
 801b780:	080523d0 	.word	0x080523d0
 801b784:	2501      	movs	r5, #1
 801b786:	2300      	movs	r3, #0
 801b788:	9306      	str	r3, [sp, #24]
 801b78a:	9508      	str	r5, [sp, #32]
 801b78c:	f04f 33ff 	mov.w	r3, #4294967295
 801b790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b794:	2200      	movs	r2, #0
 801b796:	2312      	movs	r3, #18
 801b798:	e7b0      	b.n	801b6fc <_dtoa_r+0x26c>
 801b79a:	2301      	movs	r3, #1
 801b79c:	9308      	str	r3, [sp, #32]
 801b79e:	e7f5      	b.n	801b78c <_dtoa_r+0x2fc>
 801b7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b7a6:	e7b8      	b.n	801b71a <_dtoa_r+0x28a>
 801b7a8:	3101      	adds	r1, #1
 801b7aa:	6041      	str	r1, [r0, #4]
 801b7ac:	0052      	lsls	r2, r2, #1
 801b7ae:	e7b8      	b.n	801b722 <_dtoa_r+0x292>
 801b7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7b2:	9a01      	ldr	r2, [sp, #4]
 801b7b4:	601a      	str	r2, [r3, #0]
 801b7b6:	9b03      	ldr	r3, [sp, #12]
 801b7b8:	2b0e      	cmp	r3, #14
 801b7ba:	f200 809d 	bhi.w	801b8f8 <_dtoa_r+0x468>
 801b7be:	2d00      	cmp	r5, #0
 801b7c0:	f000 809a 	beq.w	801b8f8 <_dtoa_r+0x468>
 801b7c4:	9b00      	ldr	r3, [sp, #0]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	dd32      	ble.n	801b830 <_dtoa_r+0x3a0>
 801b7ca:	4ab7      	ldr	r2, [pc, #732]	; (801baa8 <_dtoa_r+0x618>)
 801b7cc:	f003 030f 	and.w	r3, r3, #15
 801b7d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b7d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b7d8:	9b00      	ldr	r3, [sp, #0]
 801b7da:	05d8      	lsls	r0, r3, #23
 801b7dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b7e0:	d516      	bpl.n	801b810 <_dtoa_r+0x380>
 801b7e2:	4bb2      	ldr	r3, [pc, #712]	; (801baac <_dtoa_r+0x61c>)
 801b7e4:	ec51 0b19 	vmov	r0, r1, d9
 801b7e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b7ec:	f7fd fc36 	bl	801905c <__aeabi_ddiv>
 801b7f0:	f007 070f 	and.w	r7, r7, #15
 801b7f4:	4682      	mov	sl, r0
 801b7f6:	468b      	mov	fp, r1
 801b7f8:	2503      	movs	r5, #3
 801b7fa:	4eac      	ldr	r6, [pc, #688]	; (801baac <_dtoa_r+0x61c>)
 801b7fc:	b957      	cbnz	r7, 801b814 <_dtoa_r+0x384>
 801b7fe:	4642      	mov	r2, r8
 801b800:	464b      	mov	r3, r9
 801b802:	4650      	mov	r0, sl
 801b804:	4659      	mov	r1, fp
 801b806:	f7fd fc29 	bl	801905c <__aeabi_ddiv>
 801b80a:	4682      	mov	sl, r0
 801b80c:	468b      	mov	fp, r1
 801b80e:	e028      	b.n	801b862 <_dtoa_r+0x3d2>
 801b810:	2502      	movs	r5, #2
 801b812:	e7f2      	b.n	801b7fa <_dtoa_r+0x36a>
 801b814:	07f9      	lsls	r1, r7, #31
 801b816:	d508      	bpl.n	801b82a <_dtoa_r+0x39a>
 801b818:	4640      	mov	r0, r8
 801b81a:	4649      	mov	r1, r9
 801b81c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b820:	f7fd faf2 	bl	8018e08 <__aeabi_dmul>
 801b824:	3501      	adds	r5, #1
 801b826:	4680      	mov	r8, r0
 801b828:	4689      	mov	r9, r1
 801b82a:	107f      	asrs	r7, r7, #1
 801b82c:	3608      	adds	r6, #8
 801b82e:	e7e5      	b.n	801b7fc <_dtoa_r+0x36c>
 801b830:	f000 809b 	beq.w	801b96a <_dtoa_r+0x4da>
 801b834:	9b00      	ldr	r3, [sp, #0]
 801b836:	4f9d      	ldr	r7, [pc, #628]	; (801baac <_dtoa_r+0x61c>)
 801b838:	425e      	negs	r6, r3
 801b83a:	4b9b      	ldr	r3, [pc, #620]	; (801baa8 <_dtoa_r+0x618>)
 801b83c:	f006 020f 	and.w	r2, r6, #15
 801b840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b848:	ec51 0b19 	vmov	r0, r1, d9
 801b84c:	f7fd fadc 	bl	8018e08 <__aeabi_dmul>
 801b850:	1136      	asrs	r6, r6, #4
 801b852:	4682      	mov	sl, r0
 801b854:	468b      	mov	fp, r1
 801b856:	2300      	movs	r3, #0
 801b858:	2502      	movs	r5, #2
 801b85a:	2e00      	cmp	r6, #0
 801b85c:	d17a      	bne.n	801b954 <_dtoa_r+0x4c4>
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d1d3      	bne.n	801b80a <_dtoa_r+0x37a>
 801b862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b864:	2b00      	cmp	r3, #0
 801b866:	f000 8082 	beq.w	801b96e <_dtoa_r+0x4de>
 801b86a:	4b91      	ldr	r3, [pc, #580]	; (801bab0 <_dtoa_r+0x620>)
 801b86c:	2200      	movs	r2, #0
 801b86e:	4650      	mov	r0, sl
 801b870:	4659      	mov	r1, fp
 801b872:	f7fd fd3b 	bl	80192ec <__aeabi_dcmplt>
 801b876:	2800      	cmp	r0, #0
 801b878:	d079      	beq.n	801b96e <_dtoa_r+0x4de>
 801b87a:	9b03      	ldr	r3, [sp, #12]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d076      	beq.n	801b96e <_dtoa_r+0x4de>
 801b880:	9b02      	ldr	r3, [sp, #8]
 801b882:	2b00      	cmp	r3, #0
 801b884:	dd36      	ble.n	801b8f4 <_dtoa_r+0x464>
 801b886:	9b00      	ldr	r3, [sp, #0]
 801b888:	4650      	mov	r0, sl
 801b88a:	4659      	mov	r1, fp
 801b88c:	1e5f      	subs	r7, r3, #1
 801b88e:	2200      	movs	r2, #0
 801b890:	4b88      	ldr	r3, [pc, #544]	; (801bab4 <_dtoa_r+0x624>)
 801b892:	f7fd fab9 	bl	8018e08 <__aeabi_dmul>
 801b896:	9e02      	ldr	r6, [sp, #8]
 801b898:	4682      	mov	sl, r0
 801b89a:	468b      	mov	fp, r1
 801b89c:	3501      	adds	r5, #1
 801b89e:	4628      	mov	r0, r5
 801b8a0:	f7fd fa48 	bl	8018d34 <__aeabi_i2d>
 801b8a4:	4652      	mov	r2, sl
 801b8a6:	465b      	mov	r3, fp
 801b8a8:	f7fd faae 	bl	8018e08 <__aeabi_dmul>
 801b8ac:	4b82      	ldr	r3, [pc, #520]	; (801bab8 <_dtoa_r+0x628>)
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	f7fd f8f4 	bl	8018a9c <__adddf3>
 801b8b4:	46d0      	mov	r8, sl
 801b8b6:	46d9      	mov	r9, fp
 801b8b8:	4682      	mov	sl, r0
 801b8ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b8be:	2e00      	cmp	r6, #0
 801b8c0:	d158      	bne.n	801b974 <_dtoa_r+0x4e4>
 801b8c2:	4b7e      	ldr	r3, [pc, #504]	; (801babc <_dtoa_r+0x62c>)
 801b8c4:	2200      	movs	r2, #0
 801b8c6:	4640      	mov	r0, r8
 801b8c8:	4649      	mov	r1, r9
 801b8ca:	f7fd f8e5 	bl	8018a98 <__aeabi_dsub>
 801b8ce:	4652      	mov	r2, sl
 801b8d0:	465b      	mov	r3, fp
 801b8d2:	4680      	mov	r8, r0
 801b8d4:	4689      	mov	r9, r1
 801b8d6:	f7fd fd27 	bl	8019328 <__aeabi_dcmpgt>
 801b8da:	2800      	cmp	r0, #0
 801b8dc:	f040 8295 	bne.w	801be0a <_dtoa_r+0x97a>
 801b8e0:	4652      	mov	r2, sl
 801b8e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b8e6:	4640      	mov	r0, r8
 801b8e8:	4649      	mov	r1, r9
 801b8ea:	f7fd fcff 	bl	80192ec <__aeabi_dcmplt>
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	f040 8289 	bne.w	801be06 <_dtoa_r+0x976>
 801b8f4:	ec5b ab19 	vmov	sl, fp, d9
 801b8f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	f2c0 8148 	blt.w	801bb90 <_dtoa_r+0x700>
 801b900:	9a00      	ldr	r2, [sp, #0]
 801b902:	2a0e      	cmp	r2, #14
 801b904:	f300 8144 	bgt.w	801bb90 <_dtoa_r+0x700>
 801b908:	4b67      	ldr	r3, [pc, #412]	; (801baa8 <_dtoa_r+0x618>)
 801b90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b90e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b914:	2b00      	cmp	r3, #0
 801b916:	f280 80d5 	bge.w	801bac4 <_dtoa_r+0x634>
 801b91a:	9b03      	ldr	r3, [sp, #12]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	f300 80d1 	bgt.w	801bac4 <_dtoa_r+0x634>
 801b922:	f040 826f 	bne.w	801be04 <_dtoa_r+0x974>
 801b926:	4b65      	ldr	r3, [pc, #404]	; (801babc <_dtoa_r+0x62c>)
 801b928:	2200      	movs	r2, #0
 801b92a:	4640      	mov	r0, r8
 801b92c:	4649      	mov	r1, r9
 801b92e:	f7fd fa6b 	bl	8018e08 <__aeabi_dmul>
 801b932:	4652      	mov	r2, sl
 801b934:	465b      	mov	r3, fp
 801b936:	f7fd fced 	bl	8019314 <__aeabi_dcmpge>
 801b93a:	9e03      	ldr	r6, [sp, #12]
 801b93c:	4637      	mov	r7, r6
 801b93e:	2800      	cmp	r0, #0
 801b940:	f040 8245 	bne.w	801bdce <_dtoa_r+0x93e>
 801b944:	9d01      	ldr	r5, [sp, #4]
 801b946:	2331      	movs	r3, #49	; 0x31
 801b948:	f805 3b01 	strb.w	r3, [r5], #1
 801b94c:	9b00      	ldr	r3, [sp, #0]
 801b94e:	3301      	adds	r3, #1
 801b950:	9300      	str	r3, [sp, #0]
 801b952:	e240      	b.n	801bdd6 <_dtoa_r+0x946>
 801b954:	07f2      	lsls	r2, r6, #31
 801b956:	d505      	bpl.n	801b964 <_dtoa_r+0x4d4>
 801b958:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b95c:	f7fd fa54 	bl	8018e08 <__aeabi_dmul>
 801b960:	3501      	adds	r5, #1
 801b962:	2301      	movs	r3, #1
 801b964:	1076      	asrs	r6, r6, #1
 801b966:	3708      	adds	r7, #8
 801b968:	e777      	b.n	801b85a <_dtoa_r+0x3ca>
 801b96a:	2502      	movs	r5, #2
 801b96c:	e779      	b.n	801b862 <_dtoa_r+0x3d2>
 801b96e:	9f00      	ldr	r7, [sp, #0]
 801b970:	9e03      	ldr	r6, [sp, #12]
 801b972:	e794      	b.n	801b89e <_dtoa_r+0x40e>
 801b974:	9901      	ldr	r1, [sp, #4]
 801b976:	4b4c      	ldr	r3, [pc, #304]	; (801baa8 <_dtoa_r+0x618>)
 801b978:	4431      	add	r1, r6
 801b97a:	910d      	str	r1, [sp, #52]	; 0x34
 801b97c:	9908      	ldr	r1, [sp, #32]
 801b97e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b986:	2900      	cmp	r1, #0
 801b988:	d043      	beq.n	801ba12 <_dtoa_r+0x582>
 801b98a:	494d      	ldr	r1, [pc, #308]	; (801bac0 <_dtoa_r+0x630>)
 801b98c:	2000      	movs	r0, #0
 801b98e:	f7fd fb65 	bl	801905c <__aeabi_ddiv>
 801b992:	4652      	mov	r2, sl
 801b994:	465b      	mov	r3, fp
 801b996:	f7fd f87f 	bl	8018a98 <__aeabi_dsub>
 801b99a:	9d01      	ldr	r5, [sp, #4]
 801b99c:	4682      	mov	sl, r0
 801b99e:	468b      	mov	fp, r1
 801b9a0:	4649      	mov	r1, r9
 801b9a2:	4640      	mov	r0, r8
 801b9a4:	f7fd fce0 	bl	8019368 <__aeabi_d2iz>
 801b9a8:	4606      	mov	r6, r0
 801b9aa:	f7fd f9c3 	bl	8018d34 <__aeabi_i2d>
 801b9ae:	4602      	mov	r2, r0
 801b9b0:	460b      	mov	r3, r1
 801b9b2:	4640      	mov	r0, r8
 801b9b4:	4649      	mov	r1, r9
 801b9b6:	f7fd f86f 	bl	8018a98 <__aeabi_dsub>
 801b9ba:	3630      	adds	r6, #48	; 0x30
 801b9bc:	f805 6b01 	strb.w	r6, [r5], #1
 801b9c0:	4652      	mov	r2, sl
 801b9c2:	465b      	mov	r3, fp
 801b9c4:	4680      	mov	r8, r0
 801b9c6:	4689      	mov	r9, r1
 801b9c8:	f7fd fc90 	bl	80192ec <__aeabi_dcmplt>
 801b9cc:	2800      	cmp	r0, #0
 801b9ce:	d163      	bne.n	801ba98 <_dtoa_r+0x608>
 801b9d0:	4642      	mov	r2, r8
 801b9d2:	464b      	mov	r3, r9
 801b9d4:	4936      	ldr	r1, [pc, #216]	; (801bab0 <_dtoa_r+0x620>)
 801b9d6:	2000      	movs	r0, #0
 801b9d8:	f7fd f85e 	bl	8018a98 <__aeabi_dsub>
 801b9dc:	4652      	mov	r2, sl
 801b9de:	465b      	mov	r3, fp
 801b9e0:	f7fd fc84 	bl	80192ec <__aeabi_dcmplt>
 801b9e4:	2800      	cmp	r0, #0
 801b9e6:	f040 80b5 	bne.w	801bb54 <_dtoa_r+0x6c4>
 801b9ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9ec:	429d      	cmp	r5, r3
 801b9ee:	d081      	beq.n	801b8f4 <_dtoa_r+0x464>
 801b9f0:	4b30      	ldr	r3, [pc, #192]	; (801bab4 <_dtoa_r+0x624>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	4650      	mov	r0, sl
 801b9f6:	4659      	mov	r1, fp
 801b9f8:	f7fd fa06 	bl	8018e08 <__aeabi_dmul>
 801b9fc:	4b2d      	ldr	r3, [pc, #180]	; (801bab4 <_dtoa_r+0x624>)
 801b9fe:	4682      	mov	sl, r0
 801ba00:	468b      	mov	fp, r1
 801ba02:	4640      	mov	r0, r8
 801ba04:	4649      	mov	r1, r9
 801ba06:	2200      	movs	r2, #0
 801ba08:	f7fd f9fe 	bl	8018e08 <__aeabi_dmul>
 801ba0c:	4680      	mov	r8, r0
 801ba0e:	4689      	mov	r9, r1
 801ba10:	e7c6      	b.n	801b9a0 <_dtoa_r+0x510>
 801ba12:	4650      	mov	r0, sl
 801ba14:	4659      	mov	r1, fp
 801ba16:	f7fd f9f7 	bl	8018e08 <__aeabi_dmul>
 801ba1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba1c:	9d01      	ldr	r5, [sp, #4]
 801ba1e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba20:	4682      	mov	sl, r0
 801ba22:	468b      	mov	fp, r1
 801ba24:	4649      	mov	r1, r9
 801ba26:	4640      	mov	r0, r8
 801ba28:	f7fd fc9e 	bl	8019368 <__aeabi_d2iz>
 801ba2c:	4606      	mov	r6, r0
 801ba2e:	f7fd f981 	bl	8018d34 <__aeabi_i2d>
 801ba32:	3630      	adds	r6, #48	; 0x30
 801ba34:	4602      	mov	r2, r0
 801ba36:	460b      	mov	r3, r1
 801ba38:	4640      	mov	r0, r8
 801ba3a:	4649      	mov	r1, r9
 801ba3c:	f7fd f82c 	bl	8018a98 <__aeabi_dsub>
 801ba40:	f805 6b01 	strb.w	r6, [r5], #1
 801ba44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba46:	429d      	cmp	r5, r3
 801ba48:	4680      	mov	r8, r0
 801ba4a:	4689      	mov	r9, r1
 801ba4c:	f04f 0200 	mov.w	r2, #0
 801ba50:	d124      	bne.n	801ba9c <_dtoa_r+0x60c>
 801ba52:	4b1b      	ldr	r3, [pc, #108]	; (801bac0 <_dtoa_r+0x630>)
 801ba54:	4650      	mov	r0, sl
 801ba56:	4659      	mov	r1, fp
 801ba58:	f7fd f820 	bl	8018a9c <__adddf3>
 801ba5c:	4602      	mov	r2, r0
 801ba5e:	460b      	mov	r3, r1
 801ba60:	4640      	mov	r0, r8
 801ba62:	4649      	mov	r1, r9
 801ba64:	f7fd fc60 	bl	8019328 <__aeabi_dcmpgt>
 801ba68:	2800      	cmp	r0, #0
 801ba6a:	d173      	bne.n	801bb54 <_dtoa_r+0x6c4>
 801ba6c:	4652      	mov	r2, sl
 801ba6e:	465b      	mov	r3, fp
 801ba70:	4913      	ldr	r1, [pc, #76]	; (801bac0 <_dtoa_r+0x630>)
 801ba72:	2000      	movs	r0, #0
 801ba74:	f7fd f810 	bl	8018a98 <__aeabi_dsub>
 801ba78:	4602      	mov	r2, r0
 801ba7a:	460b      	mov	r3, r1
 801ba7c:	4640      	mov	r0, r8
 801ba7e:	4649      	mov	r1, r9
 801ba80:	f7fd fc34 	bl	80192ec <__aeabi_dcmplt>
 801ba84:	2800      	cmp	r0, #0
 801ba86:	f43f af35 	beq.w	801b8f4 <_dtoa_r+0x464>
 801ba8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ba8c:	1e6b      	subs	r3, r5, #1
 801ba8e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ba94:	2b30      	cmp	r3, #48	; 0x30
 801ba96:	d0f8      	beq.n	801ba8a <_dtoa_r+0x5fa>
 801ba98:	9700      	str	r7, [sp, #0]
 801ba9a:	e049      	b.n	801bb30 <_dtoa_r+0x6a0>
 801ba9c:	4b05      	ldr	r3, [pc, #20]	; (801bab4 <_dtoa_r+0x624>)
 801ba9e:	f7fd f9b3 	bl	8018e08 <__aeabi_dmul>
 801baa2:	4680      	mov	r8, r0
 801baa4:	4689      	mov	r9, r1
 801baa6:	e7bd      	b.n	801ba24 <_dtoa_r+0x594>
 801baa8:	080524e0 	.word	0x080524e0
 801baac:	080524b8 	.word	0x080524b8
 801bab0:	3ff00000 	.word	0x3ff00000
 801bab4:	40240000 	.word	0x40240000
 801bab8:	401c0000 	.word	0x401c0000
 801babc:	40140000 	.word	0x40140000
 801bac0:	3fe00000 	.word	0x3fe00000
 801bac4:	9d01      	ldr	r5, [sp, #4]
 801bac6:	4656      	mov	r6, sl
 801bac8:	465f      	mov	r7, fp
 801baca:	4642      	mov	r2, r8
 801bacc:	464b      	mov	r3, r9
 801bace:	4630      	mov	r0, r6
 801bad0:	4639      	mov	r1, r7
 801bad2:	f7fd fac3 	bl	801905c <__aeabi_ddiv>
 801bad6:	f7fd fc47 	bl	8019368 <__aeabi_d2iz>
 801bada:	4682      	mov	sl, r0
 801badc:	f7fd f92a 	bl	8018d34 <__aeabi_i2d>
 801bae0:	4642      	mov	r2, r8
 801bae2:	464b      	mov	r3, r9
 801bae4:	f7fd f990 	bl	8018e08 <__aeabi_dmul>
 801bae8:	4602      	mov	r2, r0
 801baea:	460b      	mov	r3, r1
 801baec:	4630      	mov	r0, r6
 801baee:	4639      	mov	r1, r7
 801baf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801baf4:	f7fc ffd0 	bl	8018a98 <__aeabi_dsub>
 801baf8:	f805 6b01 	strb.w	r6, [r5], #1
 801bafc:	9e01      	ldr	r6, [sp, #4]
 801bafe:	9f03      	ldr	r7, [sp, #12]
 801bb00:	1bae      	subs	r6, r5, r6
 801bb02:	42b7      	cmp	r7, r6
 801bb04:	4602      	mov	r2, r0
 801bb06:	460b      	mov	r3, r1
 801bb08:	d135      	bne.n	801bb76 <_dtoa_r+0x6e6>
 801bb0a:	f7fc ffc7 	bl	8018a9c <__adddf3>
 801bb0e:	4642      	mov	r2, r8
 801bb10:	464b      	mov	r3, r9
 801bb12:	4606      	mov	r6, r0
 801bb14:	460f      	mov	r7, r1
 801bb16:	f7fd fc07 	bl	8019328 <__aeabi_dcmpgt>
 801bb1a:	b9d0      	cbnz	r0, 801bb52 <_dtoa_r+0x6c2>
 801bb1c:	4642      	mov	r2, r8
 801bb1e:	464b      	mov	r3, r9
 801bb20:	4630      	mov	r0, r6
 801bb22:	4639      	mov	r1, r7
 801bb24:	f7fd fbd8 	bl	80192d8 <__aeabi_dcmpeq>
 801bb28:	b110      	cbz	r0, 801bb30 <_dtoa_r+0x6a0>
 801bb2a:	f01a 0f01 	tst.w	sl, #1
 801bb2e:	d110      	bne.n	801bb52 <_dtoa_r+0x6c2>
 801bb30:	4620      	mov	r0, r4
 801bb32:	ee18 1a10 	vmov	r1, s16
 801bb36:	f000 fe75 	bl	801c824 <_Bfree>
 801bb3a:	2300      	movs	r3, #0
 801bb3c:	9800      	ldr	r0, [sp, #0]
 801bb3e:	702b      	strb	r3, [r5, #0]
 801bb40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb42:	3001      	adds	r0, #1
 801bb44:	6018      	str	r0, [r3, #0]
 801bb46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	f43f acf1 	beq.w	801b530 <_dtoa_r+0xa0>
 801bb4e:	601d      	str	r5, [r3, #0]
 801bb50:	e4ee      	b.n	801b530 <_dtoa_r+0xa0>
 801bb52:	9f00      	ldr	r7, [sp, #0]
 801bb54:	462b      	mov	r3, r5
 801bb56:	461d      	mov	r5, r3
 801bb58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bb5c:	2a39      	cmp	r2, #57	; 0x39
 801bb5e:	d106      	bne.n	801bb6e <_dtoa_r+0x6de>
 801bb60:	9a01      	ldr	r2, [sp, #4]
 801bb62:	429a      	cmp	r2, r3
 801bb64:	d1f7      	bne.n	801bb56 <_dtoa_r+0x6c6>
 801bb66:	9901      	ldr	r1, [sp, #4]
 801bb68:	2230      	movs	r2, #48	; 0x30
 801bb6a:	3701      	adds	r7, #1
 801bb6c:	700a      	strb	r2, [r1, #0]
 801bb6e:	781a      	ldrb	r2, [r3, #0]
 801bb70:	3201      	adds	r2, #1
 801bb72:	701a      	strb	r2, [r3, #0]
 801bb74:	e790      	b.n	801ba98 <_dtoa_r+0x608>
 801bb76:	4ba6      	ldr	r3, [pc, #664]	; (801be10 <_dtoa_r+0x980>)
 801bb78:	2200      	movs	r2, #0
 801bb7a:	f7fd f945 	bl	8018e08 <__aeabi_dmul>
 801bb7e:	2200      	movs	r2, #0
 801bb80:	2300      	movs	r3, #0
 801bb82:	4606      	mov	r6, r0
 801bb84:	460f      	mov	r7, r1
 801bb86:	f7fd fba7 	bl	80192d8 <__aeabi_dcmpeq>
 801bb8a:	2800      	cmp	r0, #0
 801bb8c:	d09d      	beq.n	801baca <_dtoa_r+0x63a>
 801bb8e:	e7cf      	b.n	801bb30 <_dtoa_r+0x6a0>
 801bb90:	9a08      	ldr	r2, [sp, #32]
 801bb92:	2a00      	cmp	r2, #0
 801bb94:	f000 80d7 	beq.w	801bd46 <_dtoa_r+0x8b6>
 801bb98:	9a06      	ldr	r2, [sp, #24]
 801bb9a:	2a01      	cmp	r2, #1
 801bb9c:	f300 80ba 	bgt.w	801bd14 <_dtoa_r+0x884>
 801bba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bba2:	2a00      	cmp	r2, #0
 801bba4:	f000 80b2 	beq.w	801bd0c <_dtoa_r+0x87c>
 801bba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bbac:	9e07      	ldr	r6, [sp, #28]
 801bbae:	9d04      	ldr	r5, [sp, #16]
 801bbb0:	9a04      	ldr	r2, [sp, #16]
 801bbb2:	441a      	add	r2, r3
 801bbb4:	9204      	str	r2, [sp, #16]
 801bbb6:	9a05      	ldr	r2, [sp, #20]
 801bbb8:	2101      	movs	r1, #1
 801bbba:	441a      	add	r2, r3
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	9205      	str	r2, [sp, #20]
 801bbc0:	f000 ff32 	bl	801ca28 <__i2b>
 801bbc4:	4607      	mov	r7, r0
 801bbc6:	2d00      	cmp	r5, #0
 801bbc8:	dd0c      	ble.n	801bbe4 <_dtoa_r+0x754>
 801bbca:	9b05      	ldr	r3, [sp, #20]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	dd09      	ble.n	801bbe4 <_dtoa_r+0x754>
 801bbd0:	42ab      	cmp	r3, r5
 801bbd2:	9a04      	ldr	r2, [sp, #16]
 801bbd4:	bfa8      	it	ge
 801bbd6:	462b      	movge	r3, r5
 801bbd8:	1ad2      	subs	r2, r2, r3
 801bbda:	9204      	str	r2, [sp, #16]
 801bbdc:	9a05      	ldr	r2, [sp, #20]
 801bbde:	1aed      	subs	r5, r5, r3
 801bbe0:	1ad3      	subs	r3, r2, r3
 801bbe2:	9305      	str	r3, [sp, #20]
 801bbe4:	9b07      	ldr	r3, [sp, #28]
 801bbe6:	b31b      	cbz	r3, 801bc30 <_dtoa_r+0x7a0>
 801bbe8:	9b08      	ldr	r3, [sp, #32]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	f000 80af 	beq.w	801bd4e <_dtoa_r+0x8be>
 801bbf0:	2e00      	cmp	r6, #0
 801bbf2:	dd13      	ble.n	801bc1c <_dtoa_r+0x78c>
 801bbf4:	4639      	mov	r1, r7
 801bbf6:	4632      	mov	r2, r6
 801bbf8:	4620      	mov	r0, r4
 801bbfa:	f000 ffd5 	bl	801cba8 <__pow5mult>
 801bbfe:	ee18 2a10 	vmov	r2, s16
 801bc02:	4601      	mov	r1, r0
 801bc04:	4607      	mov	r7, r0
 801bc06:	4620      	mov	r0, r4
 801bc08:	f000 ff24 	bl	801ca54 <__multiply>
 801bc0c:	ee18 1a10 	vmov	r1, s16
 801bc10:	4680      	mov	r8, r0
 801bc12:	4620      	mov	r0, r4
 801bc14:	f000 fe06 	bl	801c824 <_Bfree>
 801bc18:	ee08 8a10 	vmov	s16, r8
 801bc1c:	9b07      	ldr	r3, [sp, #28]
 801bc1e:	1b9a      	subs	r2, r3, r6
 801bc20:	d006      	beq.n	801bc30 <_dtoa_r+0x7a0>
 801bc22:	ee18 1a10 	vmov	r1, s16
 801bc26:	4620      	mov	r0, r4
 801bc28:	f000 ffbe 	bl	801cba8 <__pow5mult>
 801bc2c:	ee08 0a10 	vmov	s16, r0
 801bc30:	2101      	movs	r1, #1
 801bc32:	4620      	mov	r0, r4
 801bc34:	f000 fef8 	bl	801ca28 <__i2b>
 801bc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	4606      	mov	r6, r0
 801bc3e:	f340 8088 	ble.w	801bd52 <_dtoa_r+0x8c2>
 801bc42:	461a      	mov	r2, r3
 801bc44:	4601      	mov	r1, r0
 801bc46:	4620      	mov	r0, r4
 801bc48:	f000 ffae 	bl	801cba8 <__pow5mult>
 801bc4c:	9b06      	ldr	r3, [sp, #24]
 801bc4e:	2b01      	cmp	r3, #1
 801bc50:	4606      	mov	r6, r0
 801bc52:	f340 8081 	ble.w	801bd58 <_dtoa_r+0x8c8>
 801bc56:	f04f 0800 	mov.w	r8, #0
 801bc5a:	6933      	ldr	r3, [r6, #16]
 801bc5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bc60:	6918      	ldr	r0, [r3, #16]
 801bc62:	f000 fe91 	bl	801c988 <__hi0bits>
 801bc66:	f1c0 0020 	rsb	r0, r0, #32
 801bc6a:	9b05      	ldr	r3, [sp, #20]
 801bc6c:	4418      	add	r0, r3
 801bc6e:	f010 001f 	ands.w	r0, r0, #31
 801bc72:	f000 8092 	beq.w	801bd9a <_dtoa_r+0x90a>
 801bc76:	f1c0 0320 	rsb	r3, r0, #32
 801bc7a:	2b04      	cmp	r3, #4
 801bc7c:	f340 808a 	ble.w	801bd94 <_dtoa_r+0x904>
 801bc80:	f1c0 001c 	rsb	r0, r0, #28
 801bc84:	9b04      	ldr	r3, [sp, #16]
 801bc86:	4403      	add	r3, r0
 801bc88:	9304      	str	r3, [sp, #16]
 801bc8a:	9b05      	ldr	r3, [sp, #20]
 801bc8c:	4403      	add	r3, r0
 801bc8e:	4405      	add	r5, r0
 801bc90:	9305      	str	r3, [sp, #20]
 801bc92:	9b04      	ldr	r3, [sp, #16]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	dd07      	ble.n	801bca8 <_dtoa_r+0x818>
 801bc98:	ee18 1a10 	vmov	r1, s16
 801bc9c:	461a      	mov	r2, r3
 801bc9e:	4620      	mov	r0, r4
 801bca0:	f000 ffdc 	bl	801cc5c <__lshift>
 801bca4:	ee08 0a10 	vmov	s16, r0
 801bca8:	9b05      	ldr	r3, [sp, #20]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	dd05      	ble.n	801bcba <_dtoa_r+0x82a>
 801bcae:	4631      	mov	r1, r6
 801bcb0:	461a      	mov	r2, r3
 801bcb2:	4620      	mov	r0, r4
 801bcb4:	f000 ffd2 	bl	801cc5c <__lshift>
 801bcb8:	4606      	mov	r6, r0
 801bcba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d06e      	beq.n	801bd9e <_dtoa_r+0x90e>
 801bcc0:	ee18 0a10 	vmov	r0, s16
 801bcc4:	4631      	mov	r1, r6
 801bcc6:	f001 f839 	bl	801cd3c <__mcmp>
 801bcca:	2800      	cmp	r0, #0
 801bccc:	da67      	bge.n	801bd9e <_dtoa_r+0x90e>
 801bcce:	9b00      	ldr	r3, [sp, #0]
 801bcd0:	3b01      	subs	r3, #1
 801bcd2:	ee18 1a10 	vmov	r1, s16
 801bcd6:	9300      	str	r3, [sp, #0]
 801bcd8:	220a      	movs	r2, #10
 801bcda:	2300      	movs	r3, #0
 801bcdc:	4620      	mov	r0, r4
 801bcde:	f000 fdc3 	bl	801c868 <__multadd>
 801bce2:	9b08      	ldr	r3, [sp, #32]
 801bce4:	ee08 0a10 	vmov	s16, r0
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	f000 81b1 	beq.w	801c050 <_dtoa_r+0xbc0>
 801bcee:	2300      	movs	r3, #0
 801bcf0:	4639      	mov	r1, r7
 801bcf2:	220a      	movs	r2, #10
 801bcf4:	4620      	mov	r0, r4
 801bcf6:	f000 fdb7 	bl	801c868 <__multadd>
 801bcfa:	9b02      	ldr	r3, [sp, #8]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	4607      	mov	r7, r0
 801bd00:	f300 808e 	bgt.w	801be20 <_dtoa_r+0x990>
 801bd04:	9b06      	ldr	r3, [sp, #24]
 801bd06:	2b02      	cmp	r3, #2
 801bd08:	dc51      	bgt.n	801bdae <_dtoa_r+0x91e>
 801bd0a:	e089      	b.n	801be20 <_dtoa_r+0x990>
 801bd0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bd12:	e74b      	b.n	801bbac <_dtoa_r+0x71c>
 801bd14:	9b03      	ldr	r3, [sp, #12]
 801bd16:	1e5e      	subs	r6, r3, #1
 801bd18:	9b07      	ldr	r3, [sp, #28]
 801bd1a:	42b3      	cmp	r3, r6
 801bd1c:	bfbf      	itttt	lt
 801bd1e:	9b07      	ldrlt	r3, [sp, #28]
 801bd20:	9607      	strlt	r6, [sp, #28]
 801bd22:	1af2      	sublt	r2, r6, r3
 801bd24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bd26:	bfb6      	itet	lt
 801bd28:	189b      	addlt	r3, r3, r2
 801bd2a:	1b9e      	subge	r6, r3, r6
 801bd2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bd2e:	9b03      	ldr	r3, [sp, #12]
 801bd30:	bfb8      	it	lt
 801bd32:	2600      	movlt	r6, #0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	bfb7      	itett	lt
 801bd38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bd3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bd40:	1a9d      	sublt	r5, r3, r2
 801bd42:	2300      	movlt	r3, #0
 801bd44:	e734      	b.n	801bbb0 <_dtoa_r+0x720>
 801bd46:	9e07      	ldr	r6, [sp, #28]
 801bd48:	9d04      	ldr	r5, [sp, #16]
 801bd4a:	9f08      	ldr	r7, [sp, #32]
 801bd4c:	e73b      	b.n	801bbc6 <_dtoa_r+0x736>
 801bd4e:	9a07      	ldr	r2, [sp, #28]
 801bd50:	e767      	b.n	801bc22 <_dtoa_r+0x792>
 801bd52:	9b06      	ldr	r3, [sp, #24]
 801bd54:	2b01      	cmp	r3, #1
 801bd56:	dc18      	bgt.n	801bd8a <_dtoa_r+0x8fa>
 801bd58:	f1ba 0f00 	cmp.w	sl, #0
 801bd5c:	d115      	bne.n	801bd8a <_dtoa_r+0x8fa>
 801bd5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bd62:	b993      	cbnz	r3, 801bd8a <_dtoa_r+0x8fa>
 801bd64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bd68:	0d1b      	lsrs	r3, r3, #20
 801bd6a:	051b      	lsls	r3, r3, #20
 801bd6c:	b183      	cbz	r3, 801bd90 <_dtoa_r+0x900>
 801bd6e:	9b04      	ldr	r3, [sp, #16]
 801bd70:	3301      	adds	r3, #1
 801bd72:	9304      	str	r3, [sp, #16]
 801bd74:	9b05      	ldr	r3, [sp, #20]
 801bd76:	3301      	adds	r3, #1
 801bd78:	9305      	str	r3, [sp, #20]
 801bd7a:	f04f 0801 	mov.w	r8, #1
 801bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	f47f af6a 	bne.w	801bc5a <_dtoa_r+0x7ca>
 801bd86:	2001      	movs	r0, #1
 801bd88:	e76f      	b.n	801bc6a <_dtoa_r+0x7da>
 801bd8a:	f04f 0800 	mov.w	r8, #0
 801bd8e:	e7f6      	b.n	801bd7e <_dtoa_r+0x8ee>
 801bd90:	4698      	mov	r8, r3
 801bd92:	e7f4      	b.n	801bd7e <_dtoa_r+0x8ee>
 801bd94:	f43f af7d 	beq.w	801bc92 <_dtoa_r+0x802>
 801bd98:	4618      	mov	r0, r3
 801bd9a:	301c      	adds	r0, #28
 801bd9c:	e772      	b.n	801bc84 <_dtoa_r+0x7f4>
 801bd9e:	9b03      	ldr	r3, [sp, #12]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	dc37      	bgt.n	801be14 <_dtoa_r+0x984>
 801bda4:	9b06      	ldr	r3, [sp, #24]
 801bda6:	2b02      	cmp	r3, #2
 801bda8:	dd34      	ble.n	801be14 <_dtoa_r+0x984>
 801bdaa:	9b03      	ldr	r3, [sp, #12]
 801bdac:	9302      	str	r3, [sp, #8]
 801bdae:	9b02      	ldr	r3, [sp, #8]
 801bdb0:	b96b      	cbnz	r3, 801bdce <_dtoa_r+0x93e>
 801bdb2:	4631      	mov	r1, r6
 801bdb4:	2205      	movs	r2, #5
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	f000 fd56 	bl	801c868 <__multadd>
 801bdbc:	4601      	mov	r1, r0
 801bdbe:	4606      	mov	r6, r0
 801bdc0:	ee18 0a10 	vmov	r0, s16
 801bdc4:	f000 ffba 	bl	801cd3c <__mcmp>
 801bdc8:	2800      	cmp	r0, #0
 801bdca:	f73f adbb 	bgt.w	801b944 <_dtoa_r+0x4b4>
 801bdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdd0:	9d01      	ldr	r5, [sp, #4]
 801bdd2:	43db      	mvns	r3, r3
 801bdd4:	9300      	str	r3, [sp, #0]
 801bdd6:	f04f 0800 	mov.w	r8, #0
 801bdda:	4631      	mov	r1, r6
 801bddc:	4620      	mov	r0, r4
 801bdde:	f000 fd21 	bl	801c824 <_Bfree>
 801bde2:	2f00      	cmp	r7, #0
 801bde4:	f43f aea4 	beq.w	801bb30 <_dtoa_r+0x6a0>
 801bde8:	f1b8 0f00 	cmp.w	r8, #0
 801bdec:	d005      	beq.n	801bdfa <_dtoa_r+0x96a>
 801bdee:	45b8      	cmp	r8, r7
 801bdf0:	d003      	beq.n	801bdfa <_dtoa_r+0x96a>
 801bdf2:	4641      	mov	r1, r8
 801bdf4:	4620      	mov	r0, r4
 801bdf6:	f000 fd15 	bl	801c824 <_Bfree>
 801bdfa:	4639      	mov	r1, r7
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f000 fd11 	bl	801c824 <_Bfree>
 801be02:	e695      	b.n	801bb30 <_dtoa_r+0x6a0>
 801be04:	2600      	movs	r6, #0
 801be06:	4637      	mov	r7, r6
 801be08:	e7e1      	b.n	801bdce <_dtoa_r+0x93e>
 801be0a:	9700      	str	r7, [sp, #0]
 801be0c:	4637      	mov	r7, r6
 801be0e:	e599      	b.n	801b944 <_dtoa_r+0x4b4>
 801be10:	40240000 	.word	0x40240000
 801be14:	9b08      	ldr	r3, [sp, #32]
 801be16:	2b00      	cmp	r3, #0
 801be18:	f000 80ca 	beq.w	801bfb0 <_dtoa_r+0xb20>
 801be1c:	9b03      	ldr	r3, [sp, #12]
 801be1e:	9302      	str	r3, [sp, #8]
 801be20:	2d00      	cmp	r5, #0
 801be22:	dd05      	ble.n	801be30 <_dtoa_r+0x9a0>
 801be24:	4639      	mov	r1, r7
 801be26:	462a      	mov	r2, r5
 801be28:	4620      	mov	r0, r4
 801be2a:	f000 ff17 	bl	801cc5c <__lshift>
 801be2e:	4607      	mov	r7, r0
 801be30:	f1b8 0f00 	cmp.w	r8, #0
 801be34:	d05b      	beq.n	801beee <_dtoa_r+0xa5e>
 801be36:	6879      	ldr	r1, [r7, #4]
 801be38:	4620      	mov	r0, r4
 801be3a:	f000 fcb3 	bl	801c7a4 <_Balloc>
 801be3e:	4605      	mov	r5, r0
 801be40:	b928      	cbnz	r0, 801be4e <_dtoa_r+0x9be>
 801be42:	4b87      	ldr	r3, [pc, #540]	; (801c060 <_dtoa_r+0xbd0>)
 801be44:	4602      	mov	r2, r0
 801be46:	f240 21ea 	movw	r1, #746	; 0x2ea
 801be4a:	f7ff bb3b 	b.w	801b4c4 <_dtoa_r+0x34>
 801be4e:	693a      	ldr	r2, [r7, #16]
 801be50:	3202      	adds	r2, #2
 801be52:	0092      	lsls	r2, r2, #2
 801be54:	f107 010c 	add.w	r1, r7, #12
 801be58:	300c      	adds	r0, #12
 801be5a:	f000 fc95 	bl	801c788 <memcpy>
 801be5e:	2201      	movs	r2, #1
 801be60:	4629      	mov	r1, r5
 801be62:	4620      	mov	r0, r4
 801be64:	f000 fefa 	bl	801cc5c <__lshift>
 801be68:	9b01      	ldr	r3, [sp, #4]
 801be6a:	f103 0901 	add.w	r9, r3, #1
 801be6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801be72:	4413      	add	r3, r2
 801be74:	9305      	str	r3, [sp, #20]
 801be76:	f00a 0301 	and.w	r3, sl, #1
 801be7a:	46b8      	mov	r8, r7
 801be7c:	9304      	str	r3, [sp, #16]
 801be7e:	4607      	mov	r7, r0
 801be80:	4631      	mov	r1, r6
 801be82:	ee18 0a10 	vmov	r0, s16
 801be86:	f7ff fa75 	bl	801b374 <quorem>
 801be8a:	4641      	mov	r1, r8
 801be8c:	9002      	str	r0, [sp, #8]
 801be8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801be92:	ee18 0a10 	vmov	r0, s16
 801be96:	f000 ff51 	bl	801cd3c <__mcmp>
 801be9a:	463a      	mov	r2, r7
 801be9c:	9003      	str	r0, [sp, #12]
 801be9e:	4631      	mov	r1, r6
 801bea0:	4620      	mov	r0, r4
 801bea2:	f000 ff67 	bl	801cd74 <__mdiff>
 801bea6:	68c2      	ldr	r2, [r0, #12]
 801bea8:	f109 3bff 	add.w	fp, r9, #4294967295
 801beac:	4605      	mov	r5, r0
 801beae:	bb02      	cbnz	r2, 801bef2 <_dtoa_r+0xa62>
 801beb0:	4601      	mov	r1, r0
 801beb2:	ee18 0a10 	vmov	r0, s16
 801beb6:	f000 ff41 	bl	801cd3c <__mcmp>
 801beba:	4602      	mov	r2, r0
 801bebc:	4629      	mov	r1, r5
 801bebe:	4620      	mov	r0, r4
 801bec0:	9207      	str	r2, [sp, #28]
 801bec2:	f000 fcaf 	bl	801c824 <_Bfree>
 801bec6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801beca:	ea43 0102 	orr.w	r1, r3, r2
 801bece:	9b04      	ldr	r3, [sp, #16]
 801bed0:	430b      	orrs	r3, r1
 801bed2:	464d      	mov	r5, r9
 801bed4:	d10f      	bne.n	801bef6 <_dtoa_r+0xa66>
 801bed6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801beda:	d02a      	beq.n	801bf32 <_dtoa_r+0xaa2>
 801bedc:	9b03      	ldr	r3, [sp, #12]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	dd02      	ble.n	801bee8 <_dtoa_r+0xa58>
 801bee2:	9b02      	ldr	r3, [sp, #8]
 801bee4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bee8:	f88b a000 	strb.w	sl, [fp]
 801beec:	e775      	b.n	801bdda <_dtoa_r+0x94a>
 801beee:	4638      	mov	r0, r7
 801bef0:	e7ba      	b.n	801be68 <_dtoa_r+0x9d8>
 801bef2:	2201      	movs	r2, #1
 801bef4:	e7e2      	b.n	801bebc <_dtoa_r+0xa2c>
 801bef6:	9b03      	ldr	r3, [sp, #12]
 801bef8:	2b00      	cmp	r3, #0
 801befa:	db04      	blt.n	801bf06 <_dtoa_r+0xa76>
 801befc:	9906      	ldr	r1, [sp, #24]
 801befe:	430b      	orrs	r3, r1
 801bf00:	9904      	ldr	r1, [sp, #16]
 801bf02:	430b      	orrs	r3, r1
 801bf04:	d122      	bne.n	801bf4c <_dtoa_r+0xabc>
 801bf06:	2a00      	cmp	r2, #0
 801bf08:	ddee      	ble.n	801bee8 <_dtoa_r+0xa58>
 801bf0a:	ee18 1a10 	vmov	r1, s16
 801bf0e:	2201      	movs	r2, #1
 801bf10:	4620      	mov	r0, r4
 801bf12:	f000 fea3 	bl	801cc5c <__lshift>
 801bf16:	4631      	mov	r1, r6
 801bf18:	ee08 0a10 	vmov	s16, r0
 801bf1c:	f000 ff0e 	bl	801cd3c <__mcmp>
 801bf20:	2800      	cmp	r0, #0
 801bf22:	dc03      	bgt.n	801bf2c <_dtoa_r+0xa9c>
 801bf24:	d1e0      	bne.n	801bee8 <_dtoa_r+0xa58>
 801bf26:	f01a 0f01 	tst.w	sl, #1
 801bf2a:	d0dd      	beq.n	801bee8 <_dtoa_r+0xa58>
 801bf2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf30:	d1d7      	bne.n	801bee2 <_dtoa_r+0xa52>
 801bf32:	2339      	movs	r3, #57	; 0x39
 801bf34:	f88b 3000 	strb.w	r3, [fp]
 801bf38:	462b      	mov	r3, r5
 801bf3a:	461d      	mov	r5, r3
 801bf3c:	3b01      	subs	r3, #1
 801bf3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bf42:	2a39      	cmp	r2, #57	; 0x39
 801bf44:	d071      	beq.n	801c02a <_dtoa_r+0xb9a>
 801bf46:	3201      	adds	r2, #1
 801bf48:	701a      	strb	r2, [r3, #0]
 801bf4a:	e746      	b.n	801bdda <_dtoa_r+0x94a>
 801bf4c:	2a00      	cmp	r2, #0
 801bf4e:	dd07      	ble.n	801bf60 <_dtoa_r+0xad0>
 801bf50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf54:	d0ed      	beq.n	801bf32 <_dtoa_r+0xaa2>
 801bf56:	f10a 0301 	add.w	r3, sl, #1
 801bf5a:	f88b 3000 	strb.w	r3, [fp]
 801bf5e:	e73c      	b.n	801bdda <_dtoa_r+0x94a>
 801bf60:	9b05      	ldr	r3, [sp, #20]
 801bf62:	f809 ac01 	strb.w	sl, [r9, #-1]
 801bf66:	4599      	cmp	r9, r3
 801bf68:	d047      	beq.n	801bffa <_dtoa_r+0xb6a>
 801bf6a:	ee18 1a10 	vmov	r1, s16
 801bf6e:	2300      	movs	r3, #0
 801bf70:	220a      	movs	r2, #10
 801bf72:	4620      	mov	r0, r4
 801bf74:	f000 fc78 	bl	801c868 <__multadd>
 801bf78:	45b8      	cmp	r8, r7
 801bf7a:	ee08 0a10 	vmov	s16, r0
 801bf7e:	f04f 0300 	mov.w	r3, #0
 801bf82:	f04f 020a 	mov.w	r2, #10
 801bf86:	4641      	mov	r1, r8
 801bf88:	4620      	mov	r0, r4
 801bf8a:	d106      	bne.n	801bf9a <_dtoa_r+0xb0a>
 801bf8c:	f000 fc6c 	bl	801c868 <__multadd>
 801bf90:	4680      	mov	r8, r0
 801bf92:	4607      	mov	r7, r0
 801bf94:	f109 0901 	add.w	r9, r9, #1
 801bf98:	e772      	b.n	801be80 <_dtoa_r+0x9f0>
 801bf9a:	f000 fc65 	bl	801c868 <__multadd>
 801bf9e:	4639      	mov	r1, r7
 801bfa0:	4680      	mov	r8, r0
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	220a      	movs	r2, #10
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	f000 fc5e 	bl	801c868 <__multadd>
 801bfac:	4607      	mov	r7, r0
 801bfae:	e7f1      	b.n	801bf94 <_dtoa_r+0xb04>
 801bfb0:	9b03      	ldr	r3, [sp, #12]
 801bfb2:	9302      	str	r3, [sp, #8]
 801bfb4:	9d01      	ldr	r5, [sp, #4]
 801bfb6:	ee18 0a10 	vmov	r0, s16
 801bfba:	4631      	mov	r1, r6
 801bfbc:	f7ff f9da 	bl	801b374 <quorem>
 801bfc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bfc4:	9b01      	ldr	r3, [sp, #4]
 801bfc6:	f805 ab01 	strb.w	sl, [r5], #1
 801bfca:	1aea      	subs	r2, r5, r3
 801bfcc:	9b02      	ldr	r3, [sp, #8]
 801bfce:	4293      	cmp	r3, r2
 801bfd0:	dd09      	ble.n	801bfe6 <_dtoa_r+0xb56>
 801bfd2:	ee18 1a10 	vmov	r1, s16
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	220a      	movs	r2, #10
 801bfda:	4620      	mov	r0, r4
 801bfdc:	f000 fc44 	bl	801c868 <__multadd>
 801bfe0:	ee08 0a10 	vmov	s16, r0
 801bfe4:	e7e7      	b.n	801bfb6 <_dtoa_r+0xb26>
 801bfe6:	9b02      	ldr	r3, [sp, #8]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	bfc8      	it	gt
 801bfec:	461d      	movgt	r5, r3
 801bfee:	9b01      	ldr	r3, [sp, #4]
 801bff0:	bfd8      	it	le
 801bff2:	2501      	movle	r5, #1
 801bff4:	441d      	add	r5, r3
 801bff6:	f04f 0800 	mov.w	r8, #0
 801bffa:	ee18 1a10 	vmov	r1, s16
 801bffe:	2201      	movs	r2, #1
 801c000:	4620      	mov	r0, r4
 801c002:	f000 fe2b 	bl	801cc5c <__lshift>
 801c006:	4631      	mov	r1, r6
 801c008:	ee08 0a10 	vmov	s16, r0
 801c00c:	f000 fe96 	bl	801cd3c <__mcmp>
 801c010:	2800      	cmp	r0, #0
 801c012:	dc91      	bgt.n	801bf38 <_dtoa_r+0xaa8>
 801c014:	d102      	bne.n	801c01c <_dtoa_r+0xb8c>
 801c016:	f01a 0f01 	tst.w	sl, #1
 801c01a:	d18d      	bne.n	801bf38 <_dtoa_r+0xaa8>
 801c01c:	462b      	mov	r3, r5
 801c01e:	461d      	mov	r5, r3
 801c020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c024:	2a30      	cmp	r2, #48	; 0x30
 801c026:	d0fa      	beq.n	801c01e <_dtoa_r+0xb8e>
 801c028:	e6d7      	b.n	801bdda <_dtoa_r+0x94a>
 801c02a:	9a01      	ldr	r2, [sp, #4]
 801c02c:	429a      	cmp	r2, r3
 801c02e:	d184      	bne.n	801bf3a <_dtoa_r+0xaaa>
 801c030:	9b00      	ldr	r3, [sp, #0]
 801c032:	3301      	adds	r3, #1
 801c034:	9300      	str	r3, [sp, #0]
 801c036:	2331      	movs	r3, #49	; 0x31
 801c038:	7013      	strb	r3, [r2, #0]
 801c03a:	e6ce      	b.n	801bdda <_dtoa_r+0x94a>
 801c03c:	4b09      	ldr	r3, [pc, #36]	; (801c064 <_dtoa_r+0xbd4>)
 801c03e:	f7ff ba95 	b.w	801b56c <_dtoa_r+0xdc>
 801c042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c044:	2b00      	cmp	r3, #0
 801c046:	f47f aa6e 	bne.w	801b526 <_dtoa_r+0x96>
 801c04a:	4b07      	ldr	r3, [pc, #28]	; (801c068 <_dtoa_r+0xbd8>)
 801c04c:	f7ff ba8e 	b.w	801b56c <_dtoa_r+0xdc>
 801c050:	9b02      	ldr	r3, [sp, #8]
 801c052:	2b00      	cmp	r3, #0
 801c054:	dcae      	bgt.n	801bfb4 <_dtoa_r+0xb24>
 801c056:	9b06      	ldr	r3, [sp, #24]
 801c058:	2b02      	cmp	r3, #2
 801c05a:	f73f aea8 	bgt.w	801bdae <_dtoa_r+0x91e>
 801c05e:	e7a9      	b.n	801bfb4 <_dtoa_r+0xb24>
 801c060:	080523d0 	.word	0x080523d0
 801c064:	080521d4 	.word	0x080521d4
 801c068:	08052351 	.word	0x08052351

0801c06c <rshift>:
 801c06c:	6903      	ldr	r3, [r0, #16]
 801c06e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c076:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c07a:	f100 0414 	add.w	r4, r0, #20
 801c07e:	dd45      	ble.n	801c10c <rshift+0xa0>
 801c080:	f011 011f 	ands.w	r1, r1, #31
 801c084:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c088:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c08c:	d10c      	bne.n	801c0a8 <rshift+0x3c>
 801c08e:	f100 0710 	add.w	r7, r0, #16
 801c092:	4629      	mov	r1, r5
 801c094:	42b1      	cmp	r1, r6
 801c096:	d334      	bcc.n	801c102 <rshift+0x96>
 801c098:	1a9b      	subs	r3, r3, r2
 801c09a:	009b      	lsls	r3, r3, #2
 801c09c:	1eea      	subs	r2, r5, #3
 801c09e:	4296      	cmp	r6, r2
 801c0a0:	bf38      	it	cc
 801c0a2:	2300      	movcc	r3, #0
 801c0a4:	4423      	add	r3, r4
 801c0a6:	e015      	b.n	801c0d4 <rshift+0x68>
 801c0a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c0ac:	f1c1 0820 	rsb	r8, r1, #32
 801c0b0:	40cf      	lsrs	r7, r1
 801c0b2:	f105 0e04 	add.w	lr, r5, #4
 801c0b6:	46a1      	mov	r9, r4
 801c0b8:	4576      	cmp	r6, lr
 801c0ba:	46f4      	mov	ip, lr
 801c0bc:	d815      	bhi.n	801c0ea <rshift+0x7e>
 801c0be:	1a9a      	subs	r2, r3, r2
 801c0c0:	0092      	lsls	r2, r2, #2
 801c0c2:	3a04      	subs	r2, #4
 801c0c4:	3501      	adds	r5, #1
 801c0c6:	42ae      	cmp	r6, r5
 801c0c8:	bf38      	it	cc
 801c0ca:	2200      	movcc	r2, #0
 801c0cc:	18a3      	adds	r3, r4, r2
 801c0ce:	50a7      	str	r7, [r4, r2]
 801c0d0:	b107      	cbz	r7, 801c0d4 <rshift+0x68>
 801c0d2:	3304      	adds	r3, #4
 801c0d4:	1b1a      	subs	r2, r3, r4
 801c0d6:	42a3      	cmp	r3, r4
 801c0d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c0dc:	bf08      	it	eq
 801c0de:	2300      	moveq	r3, #0
 801c0e0:	6102      	str	r2, [r0, #16]
 801c0e2:	bf08      	it	eq
 801c0e4:	6143      	streq	r3, [r0, #20]
 801c0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0ea:	f8dc c000 	ldr.w	ip, [ip]
 801c0ee:	fa0c fc08 	lsl.w	ip, ip, r8
 801c0f2:	ea4c 0707 	orr.w	r7, ip, r7
 801c0f6:	f849 7b04 	str.w	r7, [r9], #4
 801c0fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c0fe:	40cf      	lsrs	r7, r1
 801c100:	e7da      	b.n	801c0b8 <rshift+0x4c>
 801c102:	f851 cb04 	ldr.w	ip, [r1], #4
 801c106:	f847 cf04 	str.w	ip, [r7, #4]!
 801c10a:	e7c3      	b.n	801c094 <rshift+0x28>
 801c10c:	4623      	mov	r3, r4
 801c10e:	e7e1      	b.n	801c0d4 <rshift+0x68>

0801c110 <__hexdig_fun>:
 801c110:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c114:	2b09      	cmp	r3, #9
 801c116:	d802      	bhi.n	801c11e <__hexdig_fun+0xe>
 801c118:	3820      	subs	r0, #32
 801c11a:	b2c0      	uxtb	r0, r0
 801c11c:	4770      	bx	lr
 801c11e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c122:	2b05      	cmp	r3, #5
 801c124:	d801      	bhi.n	801c12a <__hexdig_fun+0x1a>
 801c126:	3847      	subs	r0, #71	; 0x47
 801c128:	e7f7      	b.n	801c11a <__hexdig_fun+0xa>
 801c12a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c12e:	2b05      	cmp	r3, #5
 801c130:	d801      	bhi.n	801c136 <__hexdig_fun+0x26>
 801c132:	3827      	subs	r0, #39	; 0x27
 801c134:	e7f1      	b.n	801c11a <__hexdig_fun+0xa>
 801c136:	2000      	movs	r0, #0
 801c138:	4770      	bx	lr
	...

0801c13c <__gethex>:
 801c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c140:	ed2d 8b02 	vpush	{d8}
 801c144:	b089      	sub	sp, #36	; 0x24
 801c146:	ee08 0a10 	vmov	s16, r0
 801c14a:	9304      	str	r3, [sp, #16]
 801c14c:	4bb4      	ldr	r3, [pc, #720]	; (801c420 <__gethex+0x2e4>)
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	9301      	str	r3, [sp, #4]
 801c152:	4618      	mov	r0, r3
 801c154:	468b      	mov	fp, r1
 801c156:	4690      	mov	r8, r2
 801c158:	f7fc fc40 	bl	80189dc <strlen>
 801c15c:	9b01      	ldr	r3, [sp, #4]
 801c15e:	f8db 2000 	ldr.w	r2, [fp]
 801c162:	4403      	add	r3, r0
 801c164:	4682      	mov	sl, r0
 801c166:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c16a:	9305      	str	r3, [sp, #20]
 801c16c:	1c93      	adds	r3, r2, #2
 801c16e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c172:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c176:	32fe      	adds	r2, #254	; 0xfe
 801c178:	18d1      	adds	r1, r2, r3
 801c17a:	461f      	mov	r7, r3
 801c17c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c180:	9100      	str	r1, [sp, #0]
 801c182:	2830      	cmp	r0, #48	; 0x30
 801c184:	d0f8      	beq.n	801c178 <__gethex+0x3c>
 801c186:	f7ff ffc3 	bl	801c110 <__hexdig_fun>
 801c18a:	4604      	mov	r4, r0
 801c18c:	2800      	cmp	r0, #0
 801c18e:	d13a      	bne.n	801c206 <__gethex+0xca>
 801c190:	9901      	ldr	r1, [sp, #4]
 801c192:	4652      	mov	r2, sl
 801c194:	4638      	mov	r0, r7
 801c196:	f001 fa33 	bl	801d600 <strncmp>
 801c19a:	4605      	mov	r5, r0
 801c19c:	2800      	cmp	r0, #0
 801c19e:	d168      	bne.n	801c272 <__gethex+0x136>
 801c1a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c1a4:	eb07 060a 	add.w	r6, r7, sl
 801c1a8:	f7ff ffb2 	bl	801c110 <__hexdig_fun>
 801c1ac:	2800      	cmp	r0, #0
 801c1ae:	d062      	beq.n	801c276 <__gethex+0x13a>
 801c1b0:	4633      	mov	r3, r6
 801c1b2:	7818      	ldrb	r0, [r3, #0]
 801c1b4:	2830      	cmp	r0, #48	; 0x30
 801c1b6:	461f      	mov	r7, r3
 801c1b8:	f103 0301 	add.w	r3, r3, #1
 801c1bc:	d0f9      	beq.n	801c1b2 <__gethex+0x76>
 801c1be:	f7ff ffa7 	bl	801c110 <__hexdig_fun>
 801c1c2:	2301      	movs	r3, #1
 801c1c4:	fab0 f480 	clz	r4, r0
 801c1c8:	0964      	lsrs	r4, r4, #5
 801c1ca:	4635      	mov	r5, r6
 801c1cc:	9300      	str	r3, [sp, #0]
 801c1ce:	463a      	mov	r2, r7
 801c1d0:	4616      	mov	r6, r2
 801c1d2:	3201      	adds	r2, #1
 801c1d4:	7830      	ldrb	r0, [r6, #0]
 801c1d6:	f7ff ff9b 	bl	801c110 <__hexdig_fun>
 801c1da:	2800      	cmp	r0, #0
 801c1dc:	d1f8      	bne.n	801c1d0 <__gethex+0x94>
 801c1de:	9901      	ldr	r1, [sp, #4]
 801c1e0:	4652      	mov	r2, sl
 801c1e2:	4630      	mov	r0, r6
 801c1e4:	f001 fa0c 	bl	801d600 <strncmp>
 801c1e8:	b980      	cbnz	r0, 801c20c <__gethex+0xd0>
 801c1ea:	b94d      	cbnz	r5, 801c200 <__gethex+0xc4>
 801c1ec:	eb06 050a 	add.w	r5, r6, sl
 801c1f0:	462a      	mov	r2, r5
 801c1f2:	4616      	mov	r6, r2
 801c1f4:	3201      	adds	r2, #1
 801c1f6:	7830      	ldrb	r0, [r6, #0]
 801c1f8:	f7ff ff8a 	bl	801c110 <__hexdig_fun>
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	d1f8      	bne.n	801c1f2 <__gethex+0xb6>
 801c200:	1bad      	subs	r5, r5, r6
 801c202:	00ad      	lsls	r5, r5, #2
 801c204:	e004      	b.n	801c210 <__gethex+0xd4>
 801c206:	2400      	movs	r4, #0
 801c208:	4625      	mov	r5, r4
 801c20a:	e7e0      	b.n	801c1ce <__gethex+0x92>
 801c20c:	2d00      	cmp	r5, #0
 801c20e:	d1f7      	bne.n	801c200 <__gethex+0xc4>
 801c210:	7833      	ldrb	r3, [r6, #0]
 801c212:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c216:	2b50      	cmp	r3, #80	; 0x50
 801c218:	d13b      	bne.n	801c292 <__gethex+0x156>
 801c21a:	7873      	ldrb	r3, [r6, #1]
 801c21c:	2b2b      	cmp	r3, #43	; 0x2b
 801c21e:	d02c      	beq.n	801c27a <__gethex+0x13e>
 801c220:	2b2d      	cmp	r3, #45	; 0x2d
 801c222:	d02e      	beq.n	801c282 <__gethex+0x146>
 801c224:	1c71      	adds	r1, r6, #1
 801c226:	f04f 0900 	mov.w	r9, #0
 801c22a:	7808      	ldrb	r0, [r1, #0]
 801c22c:	f7ff ff70 	bl	801c110 <__hexdig_fun>
 801c230:	1e43      	subs	r3, r0, #1
 801c232:	b2db      	uxtb	r3, r3
 801c234:	2b18      	cmp	r3, #24
 801c236:	d82c      	bhi.n	801c292 <__gethex+0x156>
 801c238:	f1a0 0210 	sub.w	r2, r0, #16
 801c23c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c240:	f7ff ff66 	bl	801c110 <__hexdig_fun>
 801c244:	1e43      	subs	r3, r0, #1
 801c246:	b2db      	uxtb	r3, r3
 801c248:	2b18      	cmp	r3, #24
 801c24a:	d91d      	bls.n	801c288 <__gethex+0x14c>
 801c24c:	f1b9 0f00 	cmp.w	r9, #0
 801c250:	d000      	beq.n	801c254 <__gethex+0x118>
 801c252:	4252      	negs	r2, r2
 801c254:	4415      	add	r5, r2
 801c256:	f8cb 1000 	str.w	r1, [fp]
 801c25a:	b1e4      	cbz	r4, 801c296 <__gethex+0x15a>
 801c25c:	9b00      	ldr	r3, [sp, #0]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	bf14      	ite	ne
 801c262:	2700      	movne	r7, #0
 801c264:	2706      	moveq	r7, #6
 801c266:	4638      	mov	r0, r7
 801c268:	b009      	add	sp, #36	; 0x24
 801c26a:	ecbd 8b02 	vpop	{d8}
 801c26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c272:	463e      	mov	r6, r7
 801c274:	4625      	mov	r5, r4
 801c276:	2401      	movs	r4, #1
 801c278:	e7ca      	b.n	801c210 <__gethex+0xd4>
 801c27a:	f04f 0900 	mov.w	r9, #0
 801c27e:	1cb1      	adds	r1, r6, #2
 801c280:	e7d3      	b.n	801c22a <__gethex+0xee>
 801c282:	f04f 0901 	mov.w	r9, #1
 801c286:	e7fa      	b.n	801c27e <__gethex+0x142>
 801c288:	230a      	movs	r3, #10
 801c28a:	fb03 0202 	mla	r2, r3, r2, r0
 801c28e:	3a10      	subs	r2, #16
 801c290:	e7d4      	b.n	801c23c <__gethex+0x100>
 801c292:	4631      	mov	r1, r6
 801c294:	e7df      	b.n	801c256 <__gethex+0x11a>
 801c296:	1bf3      	subs	r3, r6, r7
 801c298:	3b01      	subs	r3, #1
 801c29a:	4621      	mov	r1, r4
 801c29c:	2b07      	cmp	r3, #7
 801c29e:	dc0b      	bgt.n	801c2b8 <__gethex+0x17c>
 801c2a0:	ee18 0a10 	vmov	r0, s16
 801c2a4:	f000 fa7e 	bl	801c7a4 <_Balloc>
 801c2a8:	4604      	mov	r4, r0
 801c2aa:	b940      	cbnz	r0, 801c2be <__gethex+0x182>
 801c2ac:	4b5d      	ldr	r3, [pc, #372]	; (801c424 <__gethex+0x2e8>)
 801c2ae:	4602      	mov	r2, r0
 801c2b0:	21de      	movs	r1, #222	; 0xde
 801c2b2:	485d      	ldr	r0, [pc, #372]	; (801c428 <__gethex+0x2ec>)
 801c2b4:	f001 f9c6 	bl	801d644 <__assert_func>
 801c2b8:	3101      	adds	r1, #1
 801c2ba:	105b      	asrs	r3, r3, #1
 801c2bc:	e7ee      	b.n	801c29c <__gethex+0x160>
 801c2be:	f100 0914 	add.w	r9, r0, #20
 801c2c2:	f04f 0b00 	mov.w	fp, #0
 801c2c6:	f1ca 0301 	rsb	r3, sl, #1
 801c2ca:	f8cd 9008 	str.w	r9, [sp, #8]
 801c2ce:	f8cd b000 	str.w	fp, [sp]
 801c2d2:	9306      	str	r3, [sp, #24]
 801c2d4:	42b7      	cmp	r7, r6
 801c2d6:	d340      	bcc.n	801c35a <__gethex+0x21e>
 801c2d8:	9802      	ldr	r0, [sp, #8]
 801c2da:	9b00      	ldr	r3, [sp, #0]
 801c2dc:	f840 3b04 	str.w	r3, [r0], #4
 801c2e0:	eba0 0009 	sub.w	r0, r0, r9
 801c2e4:	1080      	asrs	r0, r0, #2
 801c2e6:	0146      	lsls	r6, r0, #5
 801c2e8:	6120      	str	r0, [r4, #16]
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	f000 fb4c 	bl	801c988 <__hi0bits>
 801c2f0:	1a30      	subs	r0, r6, r0
 801c2f2:	f8d8 6000 	ldr.w	r6, [r8]
 801c2f6:	42b0      	cmp	r0, r6
 801c2f8:	dd63      	ble.n	801c3c2 <__gethex+0x286>
 801c2fa:	1b87      	subs	r7, r0, r6
 801c2fc:	4639      	mov	r1, r7
 801c2fe:	4620      	mov	r0, r4
 801c300:	f000 fef0 	bl	801d0e4 <__any_on>
 801c304:	4682      	mov	sl, r0
 801c306:	b1a8      	cbz	r0, 801c334 <__gethex+0x1f8>
 801c308:	1e7b      	subs	r3, r7, #1
 801c30a:	1159      	asrs	r1, r3, #5
 801c30c:	f003 021f 	and.w	r2, r3, #31
 801c310:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c314:	f04f 0a01 	mov.w	sl, #1
 801c318:	fa0a f202 	lsl.w	r2, sl, r2
 801c31c:	420a      	tst	r2, r1
 801c31e:	d009      	beq.n	801c334 <__gethex+0x1f8>
 801c320:	4553      	cmp	r3, sl
 801c322:	dd05      	ble.n	801c330 <__gethex+0x1f4>
 801c324:	1eb9      	subs	r1, r7, #2
 801c326:	4620      	mov	r0, r4
 801c328:	f000 fedc 	bl	801d0e4 <__any_on>
 801c32c:	2800      	cmp	r0, #0
 801c32e:	d145      	bne.n	801c3bc <__gethex+0x280>
 801c330:	f04f 0a02 	mov.w	sl, #2
 801c334:	4639      	mov	r1, r7
 801c336:	4620      	mov	r0, r4
 801c338:	f7ff fe98 	bl	801c06c <rshift>
 801c33c:	443d      	add	r5, r7
 801c33e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c342:	42ab      	cmp	r3, r5
 801c344:	da4c      	bge.n	801c3e0 <__gethex+0x2a4>
 801c346:	ee18 0a10 	vmov	r0, s16
 801c34a:	4621      	mov	r1, r4
 801c34c:	f000 fa6a 	bl	801c824 <_Bfree>
 801c350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c352:	2300      	movs	r3, #0
 801c354:	6013      	str	r3, [r2, #0]
 801c356:	27a3      	movs	r7, #163	; 0xa3
 801c358:	e785      	b.n	801c266 <__gethex+0x12a>
 801c35a:	1e73      	subs	r3, r6, #1
 801c35c:	9a05      	ldr	r2, [sp, #20]
 801c35e:	9303      	str	r3, [sp, #12]
 801c360:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c364:	4293      	cmp	r3, r2
 801c366:	d019      	beq.n	801c39c <__gethex+0x260>
 801c368:	f1bb 0f20 	cmp.w	fp, #32
 801c36c:	d107      	bne.n	801c37e <__gethex+0x242>
 801c36e:	9b02      	ldr	r3, [sp, #8]
 801c370:	9a00      	ldr	r2, [sp, #0]
 801c372:	f843 2b04 	str.w	r2, [r3], #4
 801c376:	9302      	str	r3, [sp, #8]
 801c378:	2300      	movs	r3, #0
 801c37a:	9300      	str	r3, [sp, #0]
 801c37c:	469b      	mov	fp, r3
 801c37e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c382:	f7ff fec5 	bl	801c110 <__hexdig_fun>
 801c386:	9b00      	ldr	r3, [sp, #0]
 801c388:	f000 000f 	and.w	r0, r0, #15
 801c38c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c390:	4303      	orrs	r3, r0
 801c392:	9300      	str	r3, [sp, #0]
 801c394:	f10b 0b04 	add.w	fp, fp, #4
 801c398:	9b03      	ldr	r3, [sp, #12]
 801c39a:	e00d      	b.n	801c3b8 <__gethex+0x27c>
 801c39c:	9b03      	ldr	r3, [sp, #12]
 801c39e:	9a06      	ldr	r2, [sp, #24]
 801c3a0:	4413      	add	r3, r2
 801c3a2:	42bb      	cmp	r3, r7
 801c3a4:	d3e0      	bcc.n	801c368 <__gethex+0x22c>
 801c3a6:	4618      	mov	r0, r3
 801c3a8:	9901      	ldr	r1, [sp, #4]
 801c3aa:	9307      	str	r3, [sp, #28]
 801c3ac:	4652      	mov	r2, sl
 801c3ae:	f001 f927 	bl	801d600 <strncmp>
 801c3b2:	9b07      	ldr	r3, [sp, #28]
 801c3b4:	2800      	cmp	r0, #0
 801c3b6:	d1d7      	bne.n	801c368 <__gethex+0x22c>
 801c3b8:	461e      	mov	r6, r3
 801c3ba:	e78b      	b.n	801c2d4 <__gethex+0x198>
 801c3bc:	f04f 0a03 	mov.w	sl, #3
 801c3c0:	e7b8      	b.n	801c334 <__gethex+0x1f8>
 801c3c2:	da0a      	bge.n	801c3da <__gethex+0x29e>
 801c3c4:	1a37      	subs	r7, r6, r0
 801c3c6:	4621      	mov	r1, r4
 801c3c8:	ee18 0a10 	vmov	r0, s16
 801c3cc:	463a      	mov	r2, r7
 801c3ce:	f000 fc45 	bl	801cc5c <__lshift>
 801c3d2:	1bed      	subs	r5, r5, r7
 801c3d4:	4604      	mov	r4, r0
 801c3d6:	f100 0914 	add.w	r9, r0, #20
 801c3da:	f04f 0a00 	mov.w	sl, #0
 801c3de:	e7ae      	b.n	801c33e <__gethex+0x202>
 801c3e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c3e4:	42a8      	cmp	r0, r5
 801c3e6:	dd72      	ble.n	801c4ce <__gethex+0x392>
 801c3e8:	1b45      	subs	r5, r0, r5
 801c3ea:	42ae      	cmp	r6, r5
 801c3ec:	dc36      	bgt.n	801c45c <__gethex+0x320>
 801c3ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c3f2:	2b02      	cmp	r3, #2
 801c3f4:	d02a      	beq.n	801c44c <__gethex+0x310>
 801c3f6:	2b03      	cmp	r3, #3
 801c3f8:	d02c      	beq.n	801c454 <__gethex+0x318>
 801c3fa:	2b01      	cmp	r3, #1
 801c3fc:	d11c      	bne.n	801c438 <__gethex+0x2fc>
 801c3fe:	42ae      	cmp	r6, r5
 801c400:	d11a      	bne.n	801c438 <__gethex+0x2fc>
 801c402:	2e01      	cmp	r6, #1
 801c404:	d112      	bne.n	801c42c <__gethex+0x2f0>
 801c406:	9a04      	ldr	r2, [sp, #16]
 801c408:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c40c:	6013      	str	r3, [r2, #0]
 801c40e:	2301      	movs	r3, #1
 801c410:	6123      	str	r3, [r4, #16]
 801c412:	f8c9 3000 	str.w	r3, [r9]
 801c416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c418:	2762      	movs	r7, #98	; 0x62
 801c41a:	601c      	str	r4, [r3, #0]
 801c41c:	e723      	b.n	801c266 <__gethex+0x12a>
 801c41e:	bf00      	nop
 801c420:	08052448 	.word	0x08052448
 801c424:	080523d0 	.word	0x080523d0
 801c428:	080523e1 	.word	0x080523e1
 801c42c:	1e71      	subs	r1, r6, #1
 801c42e:	4620      	mov	r0, r4
 801c430:	f000 fe58 	bl	801d0e4 <__any_on>
 801c434:	2800      	cmp	r0, #0
 801c436:	d1e6      	bne.n	801c406 <__gethex+0x2ca>
 801c438:	ee18 0a10 	vmov	r0, s16
 801c43c:	4621      	mov	r1, r4
 801c43e:	f000 f9f1 	bl	801c824 <_Bfree>
 801c442:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c444:	2300      	movs	r3, #0
 801c446:	6013      	str	r3, [r2, #0]
 801c448:	2750      	movs	r7, #80	; 0x50
 801c44a:	e70c      	b.n	801c266 <__gethex+0x12a>
 801c44c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d1f2      	bne.n	801c438 <__gethex+0x2fc>
 801c452:	e7d8      	b.n	801c406 <__gethex+0x2ca>
 801c454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c456:	2b00      	cmp	r3, #0
 801c458:	d1d5      	bne.n	801c406 <__gethex+0x2ca>
 801c45a:	e7ed      	b.n	801c438 <__gethex+0x2fc>
 801c45c:	1e6f      	subs	r7, r5, #1
 801c45e:	f1ba 0f00 	cmp.w	sl, #0
 801c462:	d131      	bne.n	801c4c8 <__gethex+0x38c>
 801c464:	b127      	cbz	r7, 801c470 <__gethex+0x334>
 801c466:	4639      	mov	r1, r7
 801c468:	4620      	mov	r0, r4
 801c46a:	f000 fe3b 	bl	801d0e4 <__any_on>
 801c46e:	4682      	mov	sl, r0
 801c470:	117b      	asrs	r3, r7, #5
 801c472:	2101      	movs	r1, #1
 801c474:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c478:	f007 071f 	and.w	r7, r7, #31
 801c47c:	fa01 f707 	lsl.w	r7, r1, r7
 801c480:	421f      	tst	r7, r3
 801c482:	4629      	mov	r1, r5
 801c484:	4620      	mov	r0, r4
 801c486:	bf18      	it	ne
 801c488:	f04a 0a02 	orrne.w	sl, sl, #2
 801c48c:	1b76      	subs	r6, r6, r5
 801c48e:	f7ff fded 	bl	801c06c <rshift>
 801c492:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c496:	2702      	movs	r7, #2
 801c498:	f1ba 0f00 	cmp.w	sl, #0
 801c49c:	d048      	beq.n	801c530 <__gethex+0x3f4>
 801c49e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c4a2:	2b02      	cmp	r3, #2
 801c4a4:	d015      	beq.n	801c4d2 <__gethex+0x396>
 801c4a6:	2b03      	cmp	r3, #3
 801c4a8:	d017      	beq.n	801c4da <__gethex+0x39e>
 801c4aa:	2b01      	cmp	r3, #1
 801c4ac:	d109      	bne.n	801c4c2 <__gethex+0x386>
 801c4ae:	f01a 0f02 	tst.w	sl, #2
 801c4b2:	d006      	beq.n	801c4c2 <__gethex+0x386>
 801c4b4:	f8d9 0000 	ldr.w	r0, [r9]
 801c4b8:	ea4a 0a00 	orr.w	sl, sl, r0
 801c4bc:	f01a 0f01 	tst.w	sl, #1
 801c4c0:	d10e      	bne.n	801c4e0 <__gethex+0x3a4>
 801c4c2:	f047 0710 	orr.w	r7, r7, #16
 801c4c6:	e033      	b.n	801c530 <__gethex+0x3f4>
 801c4c8:	f04f 0a01 	mov.w	sl, #1
 801c4cc:	e7d0      	b.n	801c470 <__gethex+0x334>
 801c4ce:	2701      	movs	r7, #1
 801c4d0:	e7e2      	b.n	801c498 <__gethex+0x35c>
 801c4d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4d4:	f1c3 0301 	rsb	r3, r3, #1
 801c4d8:	9315      	str	r3, [sp, #84]	; 0x54
 801c4da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d0f0      	beq.n	801c4c2 <__gethex+0x386>
 801c4e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c4e4:	f104 0314 	add.w	r3, r4, #20
 801c4e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c4ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c4f0:	f04f 0c00 	mov.w	ip, #0
 801c4f4:	4618      	mov	r0, r3
 801c4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c4fe:	d01c      	beq.n	801c53a <__gethex+0x3fe>
 801c500:	3201      	adds	r2, #1
 801c502:	6002      	str	r2, [r0, #0]
 801c504:	2f02      	cmp	r7, #2
 801c506:	f104 0314 	add.w	r3, r4, #20
 801c50a:	d13f      	bne.n	801c58c <__gethex+0x450>
 801c50c:	f8d8 2000 	ldr.w	r2, [r8]
 801c510:	3a01      	subs	r2, #1
 801c512:	42b2      	cmp	r2, r6
 801c514:	d10a      	bne.n	801c52c <__gethex+0x3f0>
 801c516:	1171      	asrs	r1, r6, #5
 801c518:	2201      	movs	r2, #1
 801c51a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c51e:	f006 061f 	and.w	r6, r6, #31
 801c522:	fa02 f606 	lsl.w	r6, r2, r6
 801c526:	421e      	tst	r6, r3
 801c528:	bf18      	it	ne
 801c52a:	4617      	movne	r7, r2
 801c52c:	f047 0720 	orr.w	r7, r7, #32
 801c530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c532:	601c      	str	r4, [r3, #0]
 801c534:	9b04      	ldr	r3, [sp, #16]
 801c536:	601d      	str	r5, [r3, #0]
 801c538:	e695      	b.n	801c266 <__gethex+0x12a>
 801c53a:	4299      	cmp	r1, r3
 801c53c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c540:	d8d8      	bhi.n	801c4f4 <__gethex+0x3b8>
 801c542:	68a3      	ldr	r3, [r4, #8]
 801c544:	459b      	cmp	fp, r3
 801c546:	db19      	blt.n	801c57c <__gethex+0x440>
 801c548:	6861      	ldr	r1, [r4, #4]
 801c54a:	ee18 0a10 	vmov	r0, s16
 801c54e:	3101      	adds	r1, #1
 801c550:	f000 f928 	bl	801c7a4 <_Balloc>
 801c554:	4681      	mov	r9, r0
 801c556:	b918      	cbnz	r0, 801c560 <__gethex+0x424>
 801c558:	4b1a      	ldr	r3, [pc, #104]	; (801c5c4 <__gethex+0x488>)
 801c55a:	4602      	mov	r2, r0
 801c55c:	2184      	movs	r1, #132	; 0x84
 801c55e:	e6a8      	b.n	801c2b2 <__gethex+0x176>
 801c560:	6922      	ldr	r2, [r4, #16]
 801c562:	3202      	adds	r2, #2
 801c564:	f104 010c 	add.w	r1, r4, #12
 801c568:	0092      	lsls	r2, r2, #2
 801c56a:	300c      	adds	r0, #12
 801c56c:	f000 f90c 	bl	801c788 <memcpy>
 801c570:	4621      	mov	r1, r4
 801c572:	ee18 0a10 	vmov	r0, s16
 801c576:	f000 f955 	bl	801c824 <_Bfree>
 801c57a:	464c      	mov	r4, r9
 801c57c:	6923      	ldr	r3, [r4, #16]
 801c57e:	1c5a      	adds	r2, r3, #1
 801c580:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c584:	6122      	str	r2, [r4, #16]
 801c586:	2201      	movs	r2, #1
 801c588:	615a      	str	r2, [r3, #20]
 801c58a:	e7bb      	b.n	801c504 <__gethex+0x3c8>
 801c58c:	6922      	ldr	r2, [r4, #16]
 801c58e:	455a      	cmp	r2, fp
 801c590:	dd0b      	ble.n	801c5aa <__gethex+0x46e>
 801c592:	2101      	movs	r1, #1
 801c594:	4620      	mov	r0, r4
 801c596:	f7ff fd69 	bl	801c06c <rshift>
 801c59a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c59e:	3501      	adds	r5, #1
 801c5a0:	42ab      	cmp	r3, r5
 801c5a2:	f6ff aed0 	blt.w	801c346 <__gethex+0x20a>
 801c5a6:	2701      	movs	r7, #1
 801c5a8:	e7c0      	b.n	801c52c <__gethex+0x3f0>
 801c5aa:	f016 061f 	ands.w	r6, r6, #31
 801c5ae:	d0fa      	beq.n	801c5a6 <__gethex+0x46a>
 801c5b0:	4453      	add	r3, sl
 801c5b2:	f1c6 0620 	rsb	r6, r6, #32
 801c5b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c5ba:	f000 f9e5 	bl	801c988 <__hi0bits>
 801c5be:	42b0      	cmp	r0, r6
 801c5c0:	dbe7      	blt.n	801c592 <__gethex+0x456>
 801c5c2:	e7f0      	b.n	801c5a6 <__gethex+0x46a>
 801c5c4:	080523d0 	.word	0x080523d0

0801c5c8 <L_shift>:
 801c5c8:	f1c2 0208 	rsb	r2, r2, #8
 801c5cc:	0092      	lsls	r2, r2, #2
 801c5ce:	b570      	push	{r4, r5, r6, lr}
 801c5d0:	f1c2 0620 	rsb	r6, r2, #32
 801c5d4:	6843      	ldr	r3, [r0, #4]
 801c5d6:	6804      	ldr	r4, [r0, #0]
 801c5d8:	fa03 f506 	lsl.w	r5, r3, r6
 801c5dc:	432c      	orrs	r4, r5
 801c5de:	40d3      	lsrs	r3, r2
 801c5e0:	6004      	str	r4, [r0, #0]
 801c5e2:	f840 3f04 	str.w	r3, [r0, #4]!
 801c5e6:	4288      	cmp	r0, r1
 801c5e8:	d3f4      	bcc.n	801c5d4 <L_shift+0xc>
 801c5ea:	bd70      	pop	{r4, r5, r6, pc}

0801c5ec <__match>:
 801c5ec:	b530      	push	{r4, r5, lr}
 801c5ee:	6803      	ldr	r3, [r0, #0]
 801c5f0:	3301      	adds	r3, #1
 801c5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c5f6:	b914      	cbnz	r4, 801c5fe <__match+0x12>
 801c5f8:	6003      	str	r3, [r0, #0]
 801c5fa:	2001      	movs	r0, #1
 801c5fc:	bd30      	pop	{r4, r5, pc}
 801c5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c602:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c606:	2d19      	cmp	r5, #25
 801c608:	bf98      	it	ls
 801c60a:	3220      	addls	r2, #32
 801c60c:	42a2      	cmp	r2, r4
 801c60e:	d0f0      	beq.n	801c5f2 <__match+0x6>
 801c610:	2000      	movs	r0, #0
 801c612:	e7f3      	b.n	801c5fc <__match+0x10>

0801c614 <__hexnan>:
 801c614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c618:	680b      	ldr	r3, [r1, #0]
 801c61a:	115e      	asrs	r6, r3, #5
 801c61c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c620:	f013 031f 	ands.w	r3, r3, #31
 801c624:	b087      	sub	sp, #28
 801c626:	bf18      	it	ne
 801c628:	3604      	addne	r6, #4
 801c62a:	2500      	movs	r5, #0
 801c62c:	1f37      	subs	r7, r6, #4
 801c62e:	4690      	mov	r8, r2
 801c630:	6802      	ldr	r2, [r0, #0]
 801c632:	9301      	str	r3, [sp, #4]
 801c634:	4682      	mov	sl, r0
 801c636:	f846 5c04 	str.w	r5, [r6, #-4]
 801c63a:	46b9      	mov	r9, r7
 801c63c:	463c      	mov	r4, r7
 801c63e:	9502      	str	r5, [sp, #8]
 801c640:	46ab      	mov	fp, r5
 801c642:	7851      	ldrb	r1, [r2, #1]
 801c644:	1c53      	adds	r3, r2, #1
 801c646:	9303      	str	r3, [sp, #12]
 801c648:	b341      	cbz	r1, 801c69c <__hexnan+0x88>
 801c64a:	4608      	mov	r0, r1
 801c64c:	9205      	str	r2, [sp, #20]
 801c64e:	9104      	str	r1, [sp, #16]
 801c650:	f7ff fd5e 	bl	801c110 <__hexdig_fun>
 801c654:	2800      	cmp	r0, #0
 801c656:	d14f      	bne.n	801c6f8 <__hexnan+0xe4>
 801c658:	9904      	ldr	r1, [sp, #16]
 801c65a:	9a05      	ldr	r2, [sp, #20]
 801c65c:	2920      	cmp	r1, #32
 801c65e:	d818      	bhi.n	801c692 <__hexnan+0x7e>
 801c660:	9b02      	ldr	r3, [sp, #8]
 801c662:	459b      	cmp	fp, r3
 801c664:	dd13      	ble.n	801c68e <__hexnan+0x7a>
 801c666:	454c      	cmp	r4, r9
 801c668:	d206      	bcs.n	801c678 <__hexnan+0x64>
 801c66a:	2d07      	cmp	r5, #7
 801c66c:	dc04      	bgt.n	801c678 <__hexnan+0x64>
 801c66e:	462a      	mov	r2, r5
 801c670:	4649      	mov	r1, r9
 801c672:	4620      	mov	r0, r4
 801c674:	f7ff ffa8 	bl	801c5c8 <L_shift>
 801c678:	4544      	cmp	r4, r8
 801c67a:	d950      	bls.n	801c71e <__hexnan+0x10a>
 801c67c:	2300      	movs	r3, #0
 801c67e:	f1a4 0904 	sub.w	r9, r4, #4
 801c682:	f844 3c04 	str.w	r3, [r4, #-4]
 801c686:	f8cd b008 	str.w	fp, [sp, #8]
 801c68a:	464c      	mov	r4, r9
 801c68c:	461d      	mov	r5, r3
 801c68e:	9a03      	ldr	r2, [sp, #12]
 801c690:	e7d7      	b.n	801c642 <__hexnan+0x2e>
 801c692:	2929      	cmp	r1, #41	; 0x29
 801c694:	d156      	bne.n	801c744 <__hexnan+0x130>
 801c696:	3202      	adds	r2, #2
 801c698:	f8ca 2000 	str.w	r2, [sl]
 801c69c:	f1bb 0f00 	cmp.w	fp, #0
 801c6a0:	d050      	beq.n	801c744 <__hexnan+0x130>
 801c6a2:	454c      	cmp	r4, r9
 801c6a4:	d206      	bcs.n	801c6b4 <__hexnan+0xa0>
 801c6a6:	2d07      	cmp	r5, #7
 801c6a8:	dc04      	bgt.n	801c6b4 <__hexnan+0xa0>
 801c6aa:	462a      	mov	r2, r5
 801c6ac:	4649      	mov	r1, r9
 801c6ae:	4620      	mov	r0, r4
 801c6b0:	f7ff ff8a 	bl	801c5c8 <L_shift>
 801c6b4:	4544      	cmp	r4, r8
 801c6b6:	d934      	bls.n	801c722 <__hexnan+0x10e>
 801c6b8:	f1a8 0204 	sub.w	r2, r8, #4
 801c6bc:	4623      	mov	r3, r4
 801c6be:	f853 1b04 	ldr.w	r1, [r3], #4
 801c6c2:	f842 1f04 	str.w	r1, [r2, #4]!
 801c6c6:	429f      	cmp	r7, r3
 801c6c8:	d2f9      	bcs.n	801c6be <__hexnan+0xaa>
 801c6ca:	1b3b      	subs	r3, r7, r4
 801c6cc:	f023 0303 	bic.w	r3, r3, #3
 801c6d0:	3304      	adds	r3, #4
 801c6d2:	3401      	adds	r4, #1
 801c6d4:	3e03      	subs	r6, #3
 801c6d6:	42b4      	cmp	r4, r6
 801c6d8:	bf88      	it	hi
 801c6da:	2304      	movhi	r3, #4
 801c6dc:	4443      	add	r3, r8
 801c6de:	2200      	movs	r2, #0
 801c6e0:	f843 2b04 	str.w	r2, [r3], #4
 801c6e4:	429f      	cmp	r7, r3
 801c6e6:	d2fb      	bcs.n	801c6e0 <__hexnan+0xcc>
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	b91b      	cbnz	r3, 801c6f4 <__hexnan+0xe0>
 801c6ec:	4547      	cmp	r7, r8
 801c6ee:	d127      	bne.n	801c740 <__hexnan+0x12c>
 801c6f0:	2301      	movs	r3, #1
 801c6f2:	603b      	str	r3, [r7, #0]
 801c6f4:	2005      	movs	r0, #5
 801c6f6:	e026      	b.n	801c746 <__hexnan+0x132>
 801c6f8:	3501      	adds	r5, #1
 801c6fa:	2d08      	cmp	r5, #8
 801c6fc:	f10b 0b01 	add.w	fp, fp, #1
 801c700:	dd06      	ble.n	801c710 <__hexnan+0xfc>
 801c702:	4544      	cmp	r4, r8
 801c704:	d9c3      	bls.n	801c68e <__hexnan+0x7a>
 801c706:	2300      	movs	r3, #0
 801c708:	f844 3c04 	str.w	r3, [r4, #-4]
 801c70c:	2501      	movs	r5, #1
 801c70e:	3c04      	subs	r4, #4
 801c710:	6822      	ldr	r2, [r4, #0]
 801c712:	f000 000f 	and.w	r0, r0, #15
 801c716:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c71a:	6022      	str	r2, [r4, #0]
 801c71c:	e7b7      	b.n	801c68e <__hexnan+0x7a>
 801c71e:	2508      	movs	r5, #8
 801c720:	e7b5      	b.n	801c68e <__hexnan+0x7a>
 801c722:	9b01      	ldr	r3, [sp, #4]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d0df      	beq.n	801c6e8 <__hexnan+0xd4>
 801c728:	f04f 32ff 	mov.w	r2, #4294967295
 801c72c:	f1c3 0320 	rsb	r3, r3, #32
 801c730:	fa22 f303 	lsr.w	r3, r2, r3
 801c734:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c738:	401a      	ands	r2, r3
 801c73a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c73e:	e7d3      	b.n	801c6e8 <__hexnan+0xd4>
 801c740:	3f04      	subs	r7, #4
 801c742:	e7d1      	b.n	801c6e8 <__hexnan+0xd4>
 801c744:	2004      	movs	r0, #4
 801c746:	b007      	add	sp, #28
 801c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c74c <_localeconv_r>:
 801c74c:	4800      	ldr	r0, [pc, #0]	; (801c750 <_localeconv_r+0x4>)
 801c74e:	4770      	bx	lr
 801c750:	200001bc 	.word	0x200001bc

0801c754 <malloc>:
 801c754:	4b02      	ldr	r3, [pc, #8]	; (801c760 <malloc+0xc>)
 801c756:	4601      	mov	r1, r0
 801c758:	6818      	ldr	r0, [r3, #0]
 801c75a:	f000 bd67 	b.w	801d22c <_malloc_r>
 801c75e:	bf00      	nop
 801c760:	20000064 	.word	0x20000064

0801c764 <__ascii_mbtowc>:
 801c764:	b082      	sub	sp, #8
 801c766:	b901      	cbnz	r1, 801c76a <__ascii_mbtowc+0x6>
 801c768:	a901      	add	r1, sp, #4
 801c76a:	b142      	cbz	r2, 801c77e <__ascii_mbtowc+0x1a>
 801c76c:	b14b      	cbz	r3, 801c782 <__ascii_mbtowc+0x1e>
 801c76e:	7813      	ldrb	r3, [r2, #0]
 801c770:	600b      	str	r3, [r1, #0]
 801c772:	7812      	ldrb	r2, [r2, #0]
 801c774:	1e10      	subs	r0, r2, #0
 801c776:	bf18      	it	ne
 801c778:	2001      	movne	r0, #1
 801c77a:	b002      	add	sp, #8
 801c77c:	4770      	bx	lr
 801c77e:	4610      	mov	r0, r2
 801c780:	e7fb      	b.n	801c77a <__ascii_mbtowc+0x16>
 801c782:	f06f 0001 	mvn.w	r0, #1
 801c786:	e7f8      	b.n	801c77a <__ascii_mbtowc+0x16>

0801c788 <memcpy>:
 801c788:	440a      	add	r2, r1
 801c78a:	4291      	cmp	r1, r2
 801c78c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c790:	d100      	bne.n	801c794 <memcpy+0xc>
 801c792:	4770      	bx	lr
 801c794:	b510      	push	{r4, lr}
 801c796:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c79a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c79e:	4291      	cmp	r1, r2
 801c7a0:	d1f9      	bne.n	801c796 <memcpy+0xe>
 801c7a2:	bd10      	pop	{r4, pc}

0801c7a4 <_Balloc>:
 801c7a4:	b570      	push	{r4, r5, r6, lr}
 801c7a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c7a8:	4604      	mov	r4, r0
 801c7aa:	460d      	mov	r5, r1
 801c7ac:	b976      	cbnz	r6, 801c7cc <_Balloc+0x28>
 801c7ae:	2010      	movs	r0, #16
 801c7b0:	f7ff ffd0 	bl	801c754 <malloc>
 801c7b4:	4602      	mov	r2, r0
 801c7b6:	6260      	str	r0, [r4, #36]	; 0x24
 801c7b8:	b920      	cbnz	r0, 801c7c4 <_Balloc+0x20>
 801c7ba:	4b18      	ldr	r3, [pc, #96]	; (801c81c <_Balloc+0x78>)
 801c7bc:	4818      	ldr	r0, [pc, #96]	; (801c820 <_Balloc+0x7c>)
 801c7be:	2166      	movs	r1, #102	; 0x66
 801c7c0:	f000 ff40 	bl	801d644 <__assert_func>
 801c7c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c7c8:	6006      	str	r6, [r0, #0]
 801c7ca:	60c6      	str	r6, [r0, #12]
 801c7cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c7ce:	68f3      	ldr	r3, [r6, #12]
 801c7d0:	b183      	cbz	r3, 801c7f4 <_Balloc+0x50>
 801c7d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7d4:	68db      	ldr	r3, [r3, #12]
 801c7d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c7da:	b9b8      	cbnz	r0, 801c80c <_Balloc+0x68>
 801c7dc:	2101      	movs	r1, #1
 801c7de:	fa01 f605 	lsl.w	r6, r1, r5
 801c7e2:	1d72      	adds	r2, r6, #5
 801c7e4:	0092      	lsls	r2, r2, #2
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	f000 fc9d 	bl	801d126 <_calloc_r>
 801c7ec:	b160      	cbz	r0, 801c808 <_Balloc+0x64>
 801c7ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c7f2:	e00e      	b.n	801c812 <_Balloc+0x6e>
 801c7f4:	2221      	movs	r2, #33	; 0x21
 801c7f6:	2104      	movs	r1, #4
 801c7f8:	4620      	mov	r0, r4
 801c7fa:	f000 fc94 	bl	801d126 <_calloc_r>
 801c7fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c800:	60f0      	str	r0, [r6, #12]
 801c802:	68db      	ldr	r3, [r3, #12]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d1e4      	bne.n	801c7d2 <_Balloc+0x2e>
 801c808:	2000      	movs	r0, #0
 801c80a:	bd70      	pop	{r4, r5, r6, pc}
 801c80c:	6802      	ldr	r2, [r0, #0]
 801c80e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c812:	2300      	movs	r3, #0
 801c814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c818:	e7f7      	b.n	801c80a <_Balloc+0x66>
 801c81a:	bf00      	nop
 801c81c:	0805235e 	.word	0x0805235e
 801c820:	0805245c 	.word	0x0805245c

0801c824 <_Bfree>:
 801c824:	b570      	push	{r4, r5, r6, lr}
 801c826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c828:	4605      	mov	r5, r0
 801c82a:	460c      	mov	r4, r1
 801c82c:	b976      	cbnz	r6, 801c84c <_Bfree+0x28>
 801c82e:	2010      	movs	r0, #16
 801c830:	f7ff ff90 	bl	801c754 <malloc>
 801c834:	4602      	mov	r2, r0
 801c836:	6268      	str	r0, [r5, #36]	; 0x24
 801c838:	b920      	cbnz	r0, 801c844 <_Bfree+0x20>
 801c83a:	4b09      	ldr	r3, [pc, #36]	; (801c860 <_Bfree+0x3c>)
 801c83c:	4809      	ldr	r0, [pc, #36]	; (801c864 <_Bfree+0x40>)
 801c83e:	218a      	movs	r1, #138	; 0x8a
 801c840:	f000 ff00 	bl	801d644 <__assert_func>
 801c844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c848:	6006      	str	r6, [r0, #0]
 801c84a:	60c6      	str	r6, [r0, #12]
 801c84c:	b13c      	cbz	r4, 801c85e <_Bfree+0x3a>
 801c84e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c850:	6862      	ldr	r2, [r4, #4]
 801c852:	68db      	ldr	r3, [r3, #12]
 801c854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c858:	6021      	str	r1, [r4, #0]
 801c85a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c85e:	bd70      	pop	{r4, r5, r6, pc}
 801c860:	0805235e 	.word	0x0805235e
 801c864:	0805245c 	.word	0x0805245c

0801c868 <__multadd>:
 801c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c86c:	690d      	ldr	r5, [r1, #16]
 801c86e:	4607      	mov	r7, r0
 801c870:	460c      	mov	r4, r1
 801c872:	461e      	mov	r6, r3
 801c874:	f101 0c14 	add.w	ip, r1, #20
 801c878:	2000      	movs	r0, #0
 801c87a:	f8dc 3000 	ldr.w	r3, [ip]
 801c87e:	b299      	uxth	r1, r3
 801c880:	fb02 6101 	mla	r1, r2, r1, r6
 801c884:	0c1e      	lsrs	r6, r3, #16
 801c886:	0c0b      	lsrs	r3, r1, #16
 801c888:	fb02 3306 	mla	r3, r2, r6, r3
 801c88c:	b289      	uxth	r1, r1
 801c88e:	3001      	adds	r0, #1
 801c890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c894:	4285      	cmp	r5, r0
 801c896:	f84c 1b04 	str.w	r1, [ip], #4
 801c89a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c89e:	dcec      	bgt.n	801c87a <__multadd+0x12>
 801c8a0:	b30e      	cbz	r6, 801c8e6 <__multadd+0x7e>
 801c8a2:	68a3      	ldr	r3, [r4, #8]
 801c8a4:	42ab      	cmp	r3, r5
 801c8a6:	dc19      	bgt.n	801c8dc <__multadd+0x74>
 801c8a8:	6861      	ldr	r1, [r4, #4]
 801c8aa:	4638      	mov	r0, r7
 801c8ac:	3101      	adds	r1, #1
 801c8ae:	f7ff ff79 	bl	801c7a4 <_Balloc>
 801c8b2:	4680      	mov	r8, r0
 801c8b4:	b928      	cbnz	r0, 801c8c2 <__multadd+0x5a>
 801c8b6:	4602      	mov	r2, r0
 801c8b8:	4b0c      	ldr	r3, [pc, #48]	; (801c8ec <__multadd+0x84>)
 801c8ba:	480d      	ldr	r0, [pc, #52]	; (801c8f0 <__multadd+0x88>)
 801c8bc:	21b5      	movs	r1, #181	; 0xb5
 801c8be:	f000 fec1 	bl	801d644 <__assert_func>
 801c8c2:	6922      	ldr	r2, [r4, #16]
 801c8c4:	3202      	adds	r2, #2
 801c8c6:	f104 010c 	add.w	r1, r4, #12
 801c8ca:	0092      	lsls	r2, r2, #2
 801c8cc:	300c      	adds	r0, #12
 801c8ce:	f7ff ff5b 	bl	801c788 <memcpy>
 801c8d2:	4621      	mov	r1, r4
 801c8d4:	4638      	mov	r0, r7
 801c8d6:	f7ff ffa5 	bl	801c824 <_Bfree>
 801c8da:	4644      	mov	r4, r8
 801c8dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c8e0:	3501      	adds	r5, #1
 801c8e2:	615e      	str	r6, [r3, #20]
 801c8e4:	6125      	str	r5, [r4, #16]
 801c8e6:	4620      	mov	r0, r4
 801c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8ec:	080523d0 	.word	0x080523d0
 801c8f0:	0805245c 	.word	0x0805245c

0801c8f4 <__s2b>:
 801c8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c8f8:	460c      	mov	r4, r1
 801c8fa:	4615      	mov	r5, r2
 801c8fc:	461f      	mov	r7, r3
 801c8fe:	2209      	movs	r2, #9
 801c900:	3308      	adds	r3, #8
 801c902:	4606      	mov	r6, r0
 801c904:	fb93 f3f2 	sdiv	r3, r3, r2
 801c908:	2100      	movs	r1, #0
 801c90a:	2201      	movs	r2, #1
 801c90c:	429a      	cmp	r2, r3
 801c90e:	db09      	blt.n	801c924 <__s2b+0x30>
 801c910:	4630      	mov	r0, r6
 801c912:	f7ff ff47 	bl	801c7a4 <_Balloc>
 801c916:	b940      	cbnz	r0, 801c92a <__s2b+0x36>
 801c918:	4602      	mov	r2, r0
 801c91a:	4b19      	ldr	r3, [pc, #100]	; (801c980 <__s2b+0x8c>)
 801c91c:	4819      	ldr	r0, [pc, #100]	; (801c984 <__s2b+0x90>)
 801c91e:	21ce      	movs	r1, #206	; 0xce
 801c920:	f000 fe90 	bl	801d644 <__assert_func>
 801c924:	0052      	lsls	r2, r2, #1
 801c926:	3101      	adds	r1, #1
 801c928:	e7f0      	b.n	801c90c <__s2b+0x18>
 801c92a:	9b08      	ldr	r3, [sp, #32]
 801c92c:	6143      	str	r3, [r0, #20]
 801c92e:	2d09      	cmp	r5, #9
 801c930:	f04f 0301 	mov.w	r3, #1
 801c934:	6103      	str	r3, [r0, #16]
 801c936:	dd16      	ble.n	801c966 <__s2b+0x72>
 801c938:	f104 0909 	add.w	r9, r4, #9
 801c93c:	46c8      	mov	r8, r9
 801c93e:	442c      	add	r4, r5
 801c940:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c944:	4601      	mov	r1, r0
 801c946:	3b30      	subs	r3, #48	; 0x30
 801c948:	220a      	movs	r2, #10
 801c94a:	4630      	mov	r0, r6
 801c94c:	f7ff ff8c 	bl	801c868 <__multadd>
 801c950:	45a0      	cmp	r8, r4
 801c952:	d1f5      	bne.n	801c940 <__s2b+0x4c>
 801c954:	f1a5 0408 	sub.w	r4, r5, #8
 801c958:	444c      	add	r4, r9
 801c95a:	1b2d      	subs	r5, r5, r4
 801c95c:	1963      	adds	r3, r4, r5
 801c95e:	42bb      	cmp	r3, r7
 801c960:	db04      	blt.n	801c96c <__s2b+0x78>
 801c962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c966:	340a      	adds	r4, #10
 801c968:	2509      	movs	r5, #9
 801c96a:	e7f6      	b.n	801c95a <__s2b+0x66>
 801c96c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c970:	4601      	mov	r1, r0
 801c972:	3b30      	subs	r3, #48	; 0x30
 801c974:	220a      	movs	r2, #10
 801c976:	4630      	mov	r0, r6
 801c978:	f7ff ff76 	bl	801c868 <__multadd>
 801c97c:	e7ee      	b.n	801c95c <__s2b+0x68>
 801c97e:	bf00      	nop
 801c980:	080523d0 	.word	0x080523d0
 801c984:	0805245c 	.word	0x0805245c

0801c988 <__hi0bits>:
 801c988:	0c03      	lsrs	r3, r0, #16
 801c98a:	041b      	lsls	r3, r3, #16
 801c98c:	b9d3      	cbnz	r3, 801c9c4 <__hi0bits+0x3c>
 801c98e:	0400      	lsls	r0, r0, #16
 801c990:	2310      	movs	r3, #16
 801c992:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c996:	bf04      	itt	eq
 801c998:	0200      	lsleq	r0, r0, #8
 801c99a:	3308      	addeq	r3, #8
 801c99c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c9a0:	bf04      	itt	eq
 801c9a2:	0100      	lsleq	r0, r0, #4
 801c9a4:	3304      	addeq	r3, #4
 801c9a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c9aa:	bf04      	itt	eq
 801c9ac:	0080      	lsleq	r0, r0, #2
 801c9ae:	3302      	addeq	r3, #2
 801c9b0:	2800      	cmp	r0, #0
 801c9b2:	db05      	blt.n	801c9c0 <__hi0bits+0x38>
 801c9b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c9b8:	f103 0301 	add.w	r3, r3, #1
 801c9bc:	bf08      	it	eq
 801c9be:	2320      	moveq	r3, #32
 801c9c0:	4618      	mov	r0, r3
 801c9c2:	4770      	bx	lr
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	e7e4      	b.n	801c992 <__hi0bits+0xa>

0801c9c8 <__lo0bits>:
 801c9c8:	6803      	ldr	r3, [r0, #0]
 801c9ca:	f013 0207 	ands.w	r2, r3, #7
 801c9ce:	4601      	mov	r1, r0
 801c9d0:	d00b      	beq.n	801c9ea <__lo0bits+0x22>
 801c9d2:	07da      	lsls	r2, r3, #31
 801c9d4:	d423      	bmi.n	801ca1e <__lo0bits+0x56>
 801c9d6:	0798      	lsls	r0, r3, #30
 801c9d8:	bf49      	itett	mi
 801c9da:	085b      	lsrmi	r3, r3, #1
 801c9dc:	089b      	lsrpl	r3, r3, #2
 801c9de:	2001      	movmi	r0, #1
 801c9e0:	600b      	strmi	r3, [r1, #0]
 801c9e2:	bf5c      	itt	pl
 801c9e4:	600b      	strpl	r3, [r1, #0]
 801c9e6:	2002      	movpl	r0, #2
 801c9e8:	4770      	bx	lr
 801c9ea:	b298      	uxth	r0, r3
 801c9ec:	b9a8      	cbnz	r0, 801ca1a <__lo0bits+0x52>
 801c9ee:	0c1b      	lsrs	r3, r3, #16
 801c9f0:	2010      	movs	r0, #16
 801c9f2:	b2da      	uxtb	r2, r3
 801c9f4:	b90a      	cbnz	r2, 801c9fa <__lo0bits+0x32>
 801c9f6:	3008      	adds	r0, #8
 801c9f8:	0a1b      	lsrs	r3, r3, #8
 801c9fa:	071a      	lsls	r2, r3, #28
 801c9fc:	bf04      	itt	eq
 801c9fe:	091b      	lsreq	r3, r3, #4
 801ca00:	3004      	addeq	r0, #4
 801ca02:	079a      	lsls	r2, r3, #30
 801ca04:	bf04      	itt	eq
 801ca06:	089b      	lsreq	r3, r3, #2
 801ca08:	3002      	addeq	r0, #2
 801ca0a:	07da      	lsls	r2, r3, #31
 801ca0c:	d403      	bmi.n	801ca16 <__lo0bits+0x4e>
 801ca0e:	085b      	lsrs	r3, r3, #1
 801ca10:	f100 0001 	add.w	r0, r0, #1
 801ca14:	d005      	beq.n	801ca22 <__lo0bits+0x5a>
 801ca16:	600b      	str	r3, [r1, #0]
 801ca18:	4770      	bx	lr
 801ca1a:	4610      	mov	r0, r2
 801ca1c:	e7e9      	b.n	801c9f2 <__lo0bits+0x2a>
 801ca1e:	2000      	movs	r0, #0
 801ca20:	4770      	bx	lr
 801ca22:	2020      	movs	r0, #32
 801ca24:	4770      	bx	lr
	...

0801ca28 <__i2b>:
 801ca28:	b510      	push	{r4, lr}
 801ca2a:	460c      	mov	r4, r1
 801ca2c:	2101      	movs	r1, #1
 801ca2e:	f7ff feb9 	bl	801c7a4 <_Balloc>
 801ca32:	4602      	mov	r2, r0
 801ca34:	b928      	cbnz	r0, 801ca42 <__i2b+0x1a>
 801ca36:	4b05      	ldr	r3, [pc, #20]	; (801ca4c <__i2b+0x24>)
 801ca38:	4805      	ldr	r0, [pc, #20]	; (801ca50 <__i2b+0x28>)
 801ca3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ca3e:	f000 fe01 	bl	801d644 <__assert_func>
 801ca42:	2301      	movs	r3, #1
 801ca44:	6144      	str	r4, [r0, #20]
 801ca46:	6103      	str	r3, [r0, #16]
 801ca48:	bd10      	pop	{r4, pc}
 801ca4a:	bf00      	nop
 801ca4c:	080523d0 	.word	0x080523d0
 801ca50:	0805245c 	.word	0x0805245c

0801ca54 <__multiply>:
 801ca54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca58:	4691      	mov	r9, r2
 801ca5a:	690a      	ldr	r2, [r1, #16]
 801ca5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ca60:	429a      	cmp	r2, r3
 801ca62:	bfb8      	it	lt
 801ca64:	460b      	movlt	r3, r1
 801ca66:	460c      	mov	r4, r1
 801ca68:	bfbc      	itt	lt
 801ca6a:	464c      	movlt	r4, r9
 801ca6c:	4699      	movlt	r9, r3
 801ca6e:	6927      	ldr	r7, [r4, #16]
 801ca70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ca74:	68a3      	ldr	r3, [r4, #8]
 801ca76:	6861      	ldr	r1, [r4, #4]
 801ca78:	eb07 060a 	add.w	r6, r7, sl
 801ca7c:	42b3      	cmp	r3, r6
 801ca7e:	b085      	sub	sp, #20
 801ca80:	bfb8      	it	lt
 801ca82:	3101      	addlt	r1, #1
 801ca84:	f7ff fe8e 	bl	801c7a4 <_Balloc>
 801ca88:	b930      	cbnz	r0, 801ca98 <__multiply+0x44>
 801ca8a:	4602      	mov	r2, r0
 801ca8c:	4b44      	ldr	r3, [pc, #272]	; (801cba0 <__multiply+0x14c>)
 801ca8e:	4845      	ldr	r0, [pc, #276]	; (801cba4 <__multiply+0x150>)
 801ca90:	f240 115d 	movw	r1, #349	; 0x15d
 801ca94:	f000 fdd6 	bl	801d644 <__assert_func>
 801ca98:	f100 0514 	add.w	r5, r0, #20
 801ca9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801caa0:	462b      	mov	r3, r5
 801caa2:	2200      	movs	r2, #0
 801caa4:	4543      	cmp	r3, r8
 801caa6:	d321      	bcc.n	801caec <__multiply+0x98>
 801caa8:	f104 0314 	add.w	r3, r4, #20
 801caac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cab0:	f109 0314 	add.w	r3, r9, #20
 801cab4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cab8:	9202      	str	r2, [sp, #8]
 801caba:	1b3a      	subs	r2, r7, r4
 801cabc:	3a15      	subs	r2, #21
 801cabe:	f022 0203 	bic.w	r2, r2, #3
 801cac2:	3204      	adds	r2, #4
 801cac4:	f104 0115 	add.w	r1, r4, #21
 801cac8:	428f      	cmp	r7, r1
 801caca:	bf38      	it	cc
 801cacc:	2204      	movcc	r2, #4
 801cace:	9201      	str	r2, [sp, #4]
 801cad0:	9a02      	ldr	r2, [sp, #8]
 801cad2:	9303      	str	r3, [sp, #12]
 801cad4:	429a      	cmp	r2, r3
 801cad6:	d80c      	bhi.n	801caf2 <__multiply+0x9e>
 801cad8:	2e00      	cmp	r6, #0
 801cada:	dd03      	ble.n	801cae4 <__multiply+0x90>
 801cadc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d05a      	beq.n	801cb9a <__multiply+0x146>
 801cae4:	6106      	str	r6, [r0, #16]
 801cae6:	b005      	add	sp, #20
 801cae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caec:	f843 2b04 	str.w	r2, [r3], #4
 801caf0:	e7d8      	b.n	801caa4 <__multiply+0x50>
 801caf2:	f8b3 a000 	ldrh.w	sl, [r3]
 801caf6:	f1ba 0f00 	cmp.w	sl, #0
 801cafa:	d024      	beq.n	801cb46 <__multiply+0xf2>
 801cafc:	f104 0e14 	add.w	lr, r4, #20
 801cb00:	46a9      	mov	r9, r5
 801cb02:	f04f 0c00 	mov.w	ip, #0
 801cb06:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cb0a:	f8d9 1000 	ldr.w	r1, [r9]
 801cb0e:	fa1f fb82 	uxth.w	fp, r2
 801cb12:	b289      	uxth	r1, r1
 801cb14:	fb0a 110b 	mla	r1, sl, fp, r1
 801cb18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cb1c:	f8d9 2000 	ldr.w	r2, [r9]
 801cb20:	4461      	add	r1, ip
 801cb22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb26:	fb0a c20b 	mla	r2, sl, fp, ip
 801cb2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cb2e:	b289      	uxth	r1, r1
 801cb30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cb34:	4577      	cmp	r7, lr
 801cb36:	f849 1b04 	str.w	r1, [r9], #4
 801cb3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb3e:	d8e2      	bhi.n	801cb06 <__multiply+0xb2>
 801cb40:	9a01      	ldr	r2, [sp, #4]
 801cb42:	f845 c002 	str.w	ip, [r5, r2]
 801cb46:	9a03      	ldr	r2, [sp, #12]
 801cb48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cb4c:	3304      	adds	r3, #4
 801cb4e:	f1b9 0f00 	cmp.w	r9, #0
 801cb52:	d020      	beq.n	801cb96 <__multiply+0x142>
 801cb54:	6829      	ldr	r1, [r5, #0]
 801cb56:	f104 0c14 	add.w	ip, r4, #20
 801cb5a:	46ae      	mov	lr, r5
 801cb5c:	f04f 0a00 	mov.w	sl, #0
 801cb60:	f8bc b000 	ldrh.w	fp, [ip]
 801cb64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cb68:	fb09 220b 	mla	r2, r9, fp, r2
 801cb6c:	4492      	add	sl, r2
 801cb6e:	b289      	uxth	r1, r1
 801cb70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cb74:	f84e 1b04 	str.w	r1, [lr], #4
 801cb78:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cb7c:	f8be 1000 	ldrh.w	r1, [lr]
 801cb80:	0c12      	lsrs	r2, r2, #16
 801cb82:	fb09 1102 	mla	r1, r9, r2, r1
 801cb86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cb8a:	4567      	cmp	r7, ip
 801cb8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cb90:	d8e6      	bhi.n	801cb60 <__multiply+0x10c>
 801cb92:	9a01      	ldr	r2, [sp, #4]
 801cb94:	50a9      	str	r1, [r5, r2]
 801cb96:	3504      	adds	r5, #4
 801cb98:	e79a      	b.n	801cad0 <__multiply+0x7c>
 801cb9a:	3e01      	subs	r6, #1
 801cb9c:	e79c      	b.n	801cad8 <__multiply+0x84>
 801cb9e:	bf00      	nop
 801cba0:	080523d0 	.word	0x080523d0
 801cba4:	0805245c 	.word	0x0805245c

0801cba8 <__pow5mult>:
 801cba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbac:	4615      	mov	r5, r2
 801cbae:	f012 0203 	ands.w	r2, r2, #3
 801cbb2:	4606      	mov	r6, r0
 801cbb4:	460f      	mov	r7, r1
 801cbb6:	d007      	beq.n	801cbc8 <__pow5mult+0x20>
 801cbb8:	4c25      	ldr	r4, [pc, #148]	; (801cc50 <__pow5mult+0xa8>)
 801cbba:	3a01      	subs	r2, #1
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cbc2:	f7ff fe51 	bl	801c868 <__multadd>
 801cbc6:	4607      	mov	r7, r0
 801cbc8:	10ad      	asrs	r5, r5, #2
 801cbca:	d03d      	beq.n	801cc48 <__pow5mult+0xa0>
 801cbcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cbce:	b97c      	cbnz	r4, 801cbf0 <__pow5mult+0x48>
 801cbd0:	2010      	movs	r0, #16
 801cbd2:	f7ff fdbf 	bl	801c754 <malloc>
 801cbd6:	4602      	mov	r2, r0
 801cbd8:	6270      	str	r0, [r6, #36]	; 0x24
 801cbda:	b928      	cbnz	r0, 801cbe8 <__pow5mult+0x40>
 801cbdc:	4b1d      	ldr	r3, [pc, #116]	; (801cc54 <__pow5mult+0xac>)
 801cbde:	481e      	ldr	r0, [pc, #120]	; (801cc58 <__pow5mult+0xb0>)
 801cbe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cbe4:	f000 fd2e 	bl	801d644 <__assert_func>
 801cbe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cbec:	6004      	str	r4, [r0, #0]
 801cbee:	60c4      	str	r4, [r0, #12]
 801cbf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cbf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cbf8:	b94c      	cbnz	r4, 801cc0e <__pow5mult+0x66>
 801cbfa:	f240 2171 	movw	r1, #625	; 0x271
 801cbfe:	4630      	mov	r0, r6
 801cc00:	f7ff ff12 	bl	801ca28 <__i2b>
 801cc04:	2300      	movs	r3, #0
 801cc06:	f8c8 0008 	str.w	r0, [r8, #8]
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	6003      	str	r3, [r0, #0]
 801cc0e:	f04f 0900 	mov.w	r9, #0
 801cc12:	07eb      	lsls	r3, r5, #31
 801cc14:	d50a      	bpl.n	801cc2c <__pow5mult+0x84>
 801cc16:	4639      	mov	r1, r7
 801cc18:	4622      	mov	r2, r4
 801cc1a:	4630      	mov	r0, r6
 801cc1c:	f7ff ff1a 	bl	801ca54 <__multiply>
 801cc20:	4639      	mov	r1, r7
 801cc22:	4680      	mov	r8, r0
 801cc24:	4630      	mov	r0, r6
 801cc26:	f7ff fdfd 	bl	801c824 <_Bfree>
 801cc2a:	4647      	mov	r7, r8
 801cc2c:	106d      	asrs	r5, r5, #1
 801cc2e:	d00b      	beq.n	801cc48 <__pow5mult+0xa0>
 801cc30:	6820      	ldr	r0, [r4, #0]
 801cc32:	b938      	cbnz	r0, 801cc44 <__pow5mult+0x9c>
 801cc34:	4622      	mov	r2, r4
 801cc36:	4621      	mov	r1, r4
 801cc38:	4630      	mov	r0, r6
 801cc3a:	f7ff ff0b 	bl	801ca54 <__multiply>
 801cc3e:	6020      	str	r0, [r4, #0]
 801cc40:	f8c0 9000 	str.w	r9, [r0]
 801cc44:	4604      	mov	r4, r0
 801cc46:	e7e4      	b.n	801cc12 <__pow5mult+0x6a>
 801cc48:	4638      	mov	r0, r7
 801cc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc4e:	bf00      	nop
 801cc50:	080525a8 	.word	0x080525a8
 801cc54:	0805235e 	.word	0x0805235e
 801cc58:	0805245c 	.word	0x0805245c

0801cc5c <__lshift>:
 801cc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc60:	460c      	mov	r4, r1
 801cc62:	6849      	ldr	r1, [r1, #4]
 801cc64:	6923      	ldr	r3, [r4, #16]
 801cc66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cc6a:	68a3      	ldr	r3, [r4, #8]
 801cc6c:	4607      	mov	r7, r0
 801cc6e:	4691      	mov	r9, r2
 801cc70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cc74:	f108 0601 	add.w	r6, r8, #1
 801cc78:	42b3      	cmp	r3, r6
 801cc7a:	db0b      	blt.n	801cc94 <__lshift+0x38>
 801cc7c:	4638      	mov	r0, r7
 801cc7e:	f7ff fd91 	bl	801c7a4 <_Balloc>
 801cc82:	4605      	mov	r5, r0
 801cc84:	b948      	cbnz	r0, 801cc9a <__lshift+0x3e>
 801cc86:	4602      	mov	r2, r0
 801cc88:	4b2a      	ldr	r3, [pc, #168]	; (801cd34 <__lshift+0xd8>)
 801cc8a:	482b      	ldr	r0, [pc, #172]	; (801cd38 <__lshift+0xdc>)
 801cc8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cc90:	f000 fcd8 	bl	801d644 <__assert_func>
 801cc94:	3101      	adds	r1, #1
 801cc96:	005b      	lsls	r3, r3, #1
 801cc98:	e7ee      	b.n	801cc78 <__lshift+0x1c>
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	f100 0114 	add.w	r1, r0, #20
 801cca0:	f100 0210 	add.w	r2, r0, #16
 801cca4:	4618      	mov	r0, r3
 801cca6:	4553      	cmp	r3, sl
 801cca8:	db37      	blt.n	801cd1a <__lshift+0xbe>
 801ccaa:	6920      	ldr	r0, [r4, #16]
 801ccac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ccb0:	f104 0314 	add.w	r3, r4, #20
 801ccb4:	f019 091f 	ands.w	r9, r9, #31
 801ccb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ccbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ccc0:	d02f      	beq.n	801cd22 <__lshift+0xc6>
 801ccc2:	f1c9 0e20 	rsb	lr, r9, #32
 801ccc6:	468a      	mov	sl, r1
 801ccc8:	f04f 0c00 	mov.w	ip, #0
 801cccc:	681a      	ldr	r2, [r3, #0]
 801ccce:	fa02 f209 	lsl.w	r2, r2, r9
 801ccd2:	ea42 020c 	orr.w	r2, r2, ip
 801ccd6:	f84a 2b04 	str.w	r2, [sl], #4
 801ccda:	f853 2b04 	ldr.w	r2, [r3], #4
 801ccde:	4298      	cmp	r0, r3
 801cce0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cce4:	d8f2      	bhi.n	801cccc <__lshift+0x70>
 801cce6:	1b03      	subs	r3, r0, r4
 801cce8:	3b15      	subs	r3, #21
 801ccea:	f023 0303 	bic.w	r3, r3, #3
 801ccee:	3304      	adds	r3, #4
 801ccf0:	f104 0215 	add.w	r2, r4, #21
 801ccf4:	4290      	cmp	r0, r2
 801ccf6:	bf38      	it	cc
 801ccf8:	2304      	movcc	r3, #4
 801ccfa:	f841 c003 	str.w	ip, [r1, r3]
 801ccfe:	f1bc 0f00 	cmp.w	ip, #0
 801cd02:	d001      	beq.n	801cd08 <__lshift+0xac>
 801cd04:	f108 0602 	add.w	r6, r8, #2
 801cd08:	3e01      	subs	r6, #1
 801cd0a:	4638      	mov	r0, r7
 801cd0c:	612e      	str	r6, [r5, #16]
 801cd0e:	4621      	mov	r1, r4
 801cd10:	f7ff fd88 	bl	801c824 <_Bfree>
 801cd14:	4628      	mov	r0, r5
 801cd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd1a:	f842 0f04 	str.w	r0, [r2, #4]!
 801cd1e:	3301      	adds	r3, #1
 801cd20:	e7c1      	b.n	801cca6 <__lshift+0x4a>
 801cd22:	3904      	subs	r1, #4
 801cd24:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd28:	f841 2f04 	str.w	r2, [r1, #4]!
 801cd2c:	4298      	cmp	r0, r3
 801cd2e:	d8f9      	bhi.n	801cd24 <__lshift+0xc8>
 801cd30:	e7ea      	b.n	801cd08 <__lshift+0xac>
 801cd32:	bf00      	nop
 801cd34:	080523d0 	.word	0x080523d0
 801cd38:	0805245c 	.word	0x0805245c

0801cd3c <__mcmp>:
 801cd3c:	b530      	push	{r4, r5, lr}
 801cd3e:	6902      	ldr	r2, [r0, #16]
 801cd40:	690c      	ldr	r4, [r1, #16]
 801cd42:	1b12      	subs	r2, r2, r4
 801cd44:	d10e      	bne.n	801cd64 <__mcmp+0x28>
 801cd46:	f100 0314 	add.w	r3, r0, #20
 801cd4a:	3114      	adds	r1, #20
 801cd4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cd50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cd54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cd58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cd5c:	42a5      	cmp	r5, r4
 801cd5e:	d003      	beq.n	801cd68 <__mcmp+0x2c>
 801cd60:	d305      	bcc.n	801cd6e <__mcmp+0x32>
 801cd62:	2201      	movs	r2, #1
 801cd64:	4610      	mov	r0, r2
 801cd66:	bd30      	pop	{r4, r5, pc}
 801cd68:	4283      	cmp	r3, r0
 801cd6a:	d3f3      	bcc.n	801cd54 <__mcmp+0x18>
 801cd6c:	e7fa      	b.n	801cd64 <__mcmp+0x28>
 801cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd72:	e7f7      	b.n	801cd64 <__mcmp+0x28>

0801cd74 <__mdiff>:
 801cd74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd78:	460c      	mov	r4, r1
 801cd7a:	4606      	mov	r6, r0
 801cd7c:	4611      	mov	r1, r2
 801cd7e:	4620      	mov	r0, r4
 801cd80:	4690      	mov	r8, r2
 801cd82:	f7ff ffdb 	bl	801cd3c <__mcmp>
 801cd86:	1e05      	subs	r5, r0, #0
 801cd88:	d110      	bne.n	801cdac <__mdiff+0x38>
 801cd8a:	4629      	mov	r1, r5
 801cd8c:	4630      	mov	r0, r6
 801cd8e:	f7ff fd09 	bl	801c7a4 <_Balloc>
 801cd92:	b930      	cbnz	r0, 801cda2 <__mdiff+0x2e>
 801cd94:	4b3a      	ldr	r3, [pc, #232]	; (801ce80 <__mdiff+0x10c>)
 801cd96:	4602      	mov	r2, r0
 801cd98:	f240 2132 	movw	r1, #562	; 0x232
 801cd9c:	4839      	ldr	r0, [pc, #228]	; (801ce84 <__mdiff+0x110>)
 801cd9e:	f000 fc51 	bl	801d644 <__assert_func>
 801cda2:	2301      	movs	r3, #1
 801cda4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cda8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdac:	bfa4      	itt	ge
 801cdae:	4643      	movge	r3, r8
 801cdb0:	46a0      	movge	r8, r4
 801cdb2:	4630      	mov	r0, r6
 801cdb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cdb8:	bfa6      	itte	ge
 801cdba:	461c      	movge	r4, r3
 801cdbc:	2500      	movge	r5, #0
 801cdbe:	2501      	movlt	r5, #1
 801cdc0:	f7ff fcf0 	bl	801c7a4 <_Balloc>
 801cdc4:	b920      	cbnz	r0, 801cdd0 <__mdiff+0x5c>
 801cdc6:	4b2e      	ldr	r3, [pc, #184]	; (801ce80 <__mdiff+0x10c>)
 801cdc8:	4602      	mov	r2, r0
 801cdca:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cdce:	e7e5      	b.n	801cd9c <__mdiff+0x28>
 801cdd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cdd4:	6926      	ldr	r6, [r4, #16]
 801cdd6:	60c5      	str	r5, [r0, #12]
 801cdd8:	f104 0914 	add.w	r9, r4, #20
 801cddc:	f108 0514 	add.w	r5, r8, #20
 801cde0:	f100 0e14 	add.w	lr, r0, #20
 801cde4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cde8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cdec:	f108 0210 	add.w	r2, r8, #16
 801cdf0:	46f2      	mov	sl, lr
 801cdf2:	2100      	movs	r1, #0
 801cdf4:	f859 3b04 	ldr.w	r3, [r9], #4
 801cdf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cdfc:	fa1f f883 	uxth.w	r8, r3
 801ce00:	fa11 f18b 	uxtah	r1, r1, fp
 801ce04:	0c1b      	lsrs	r3, r3, #16
 801ce06:	eba1 0808 	sub.w	r8, r1, r8
 801ce0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ce0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ce12:	fa1f f888 	uxth.w	r8, r8
 801ce16:	1419      	asrs	r1, r3, #16
 801ce18:	454e      	cmp	r6, r9
 801ce1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ce1e:	f84a 3b04 	str.w	r3, [sl], #4
 801ce22:	d8e7      	bhi.n	801cdf4 <__mdiff+0x80>
 801ce24:	1b33      	subs	r3, r6, r4
 801ce26:	3b15      	subs	r3, #21
 801ce28:	f023 0303 	bic.w	r3, r3, #3
 801ce2c:	3304      	adds	r3, #4
 801ce2e:	3415      	adds	r4, #21
 801ce30:	42a6      	cmp	r6, r4
 801ce32:	bf38      	it	cc
 801ce34:	2304      	movcc	r3, #4
 801ce36:	441d      	add	r5, r3
 801ce38:	4473      	add	r3, lr
 801ce3a:	469e      	mov	lr, r3
 801ce3c:	462e      	mov	r6, r5
 801ce3e:	4566      	cmp	r6, ip
 801ce40:	d30e      	bcc.n	801ce60 <__mdiff+0xec>
 801ce42:	f10c 0203 	add.w	r2, ip, #3
 801ce46:	1b52      	subs	r2, r2, r5
 801ce48:	f022 0203 	bic.w	r2, r2, #3
 801ce4c:	3d03      	subs	r5, #3
 801ce4e:	45ac      	cmp	ip, r5
 801ce50:	bf38      	it	cc
 801ce52:	2200      	movcc	r2, #0
 801ce54:	441a      	add	r2, r3
 801ce56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ce5a:	b17b      	cbz	r3, 801ce7c <__mdiff+0x108>
 801ce5c:	6107      	str	r7, [r0, #16]
 801ce5e:	e7a3      	b.n	801cda8 <__mdiff+0x34>
 801ce60:	f856 8b04 	ldr.w	r8, [r6], #4
 801ce64:	fa11 f288 	uxtah	r2, r1, r8
 801ce68:	1414      	asrs	r4, r2, #16
 801ce6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ce6e:	b292      	uxth	r2, r2
 801ce70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ce74:	f84e 2b04 	str.w	r2, [lr], #4
 801ce78:	1421      	asrs	r1, r4, #16
 801ce7a:	e7e0      	b.n	801ce3e <__mdiff+0xca>
 801ce7c:	3f01      	subs	r7, #1
 801ce7e:	e7ea      	b.n	801ce56 <__mdiff+0xe2>
 801ce80:	080523d0 	.word	0x080523d0
 801ce84:	0805245c 	.word	0x0805245c

0801ce88 <__ulp>:
 801ce88:	b082      	sub	sp, #8
 801ce8a:	ed8d 0b00 	vstr	d0, [sp]
 801ce8e:	9b01      	ldr	r3, [sp, #4]
 801ce90:	4912      	ldr	r1, [pc, #72]	; (801cedc <__ulp+0x54>)
 801ce92:	4019      	ands	r1, r3
 801ce94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ce98:	2900      	cmp	r1, #0
 801ce9a:	dd05      	ble.n	801cea8 <__ulp+0x20>
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	460b      	mov	r3, r1
 801cea0:	ec43 2b10 	vmov	d0, r2, r3
 801cea4:	b002      	add	sp, #8
 801cea6:	4770      	bx	lr
 801cea8:	4249      	negs	r1, r1
 801ceaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ceae:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ceb2:	f04f 0200 	mov.w	r2, #0
 801ceb6:	f04f 0300 	mov.w	r3, #0
 801ceba:	da04      	bge.n	801cec6 <__ulp+0x3e>
 801cebc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cec0:	fa41 f300 	asr.w	r3, r1, r0
 801cec4:	e7ec      	b.n	801cea0 <__ulp+0x18>
 801cec6:	f1a0 0114 	sub.w	r1, r0, #20
 801ceca:	291e      	cmp	r1, #30
 801cecc:	bfda      	itte	le
 801cece:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ced2:	fa20 f101 	lsrle.w	r1, r0, r1
 801ced6:	2101      	movgt	r1, #1
 801ced8:	460a      	mov	r2, r1
 801ceda:	e7e1      	b.n	801cea0 <__ulp+0x18>
 801cedc:	7ff00000 	.word	0x7ff00000

0801cee0 <__b2d>:
 801cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cee2:	6905      	ldr	r5, [r0, #16]
 801cee4:	f100 0714 	add.w	r7, r0, #20
 801cee8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ceec:	1f2e      	subs	r6, r5, #4
 801ceee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cef2:	4620      	mov	r0, r4
 801cef4:	f7ff fd48 	bl	801c988 <__hi0bits>
 801cef8:	f1c0 0320 	rsb	r3, r0, #32
 801cefc:	280a      	cmp	r0, #10
 801cefe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cf7c <__b2d+0x9c>
 801cf02:	600b      	str	r3, [r1, #0]
 801cf04:	dc14      	bgt.n	801cf30 <__b2d+0x50>
 801cf06:	f1c0 0e0b 	rsb	lr, r0, #11
 801cf0a:	fa24 f10e 	lsr.w	r1, r4, lr
 801cf0e:	42b7      	cmp	r7, r6
 801cf10:	ea41 030c 	orr.w	r3, r1, ip
 801cf14:	bf34      	ite	cc
 801cf16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf1a:	2100      	movcs	r1, #0
 801cf1c:	3015      	adds	r0, #21
 801cf1e:	fa04 f000 	lsl.w	r0, r4, r0
 801cf22:	fa21 f10e 	lsr.w	r1, r1, lr
 801cf26:	ea40 0201 	orr.w	r2, r0, r1
 801cf2a:	ec43 2b10 	vmov	d0, r2, r3
 801cf2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf30:	42b7      	cmp	r7, r6
 801cf32:	bf3a      	itte	cc
 801cf34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf38:	f1a5 0608 	subcc.w	r6, r5, #8
 801cf3c:	2100      	movcs	r1, #0
 801cf3e:	380b      	subs	r0, #11
 801cf40:	d017      	beq.n	801cf72 <__b2d+0x92>
 801cf42:	f1c0 0c20 	rsb	ip, r0, #32
 801cf46:	fa04 f500 	lsl.w	r5, r4, r0
 801cf4a:	42be      	cmp	r6, r7
 801cf4c:	fa21 f40c 	lsr.w	r4, r1, ip
 801cf50:	ea45 0504 	orr.w	r5, r5, r4
 801cf54:	bf8c      	ite	hi
 801cf56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cf5a:	2400      	movls	r4, #0
 801cf5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cf60:	fa01 f000 	lsl.w	r0, r1, r0
 801cf64:	fa24 f40c 	lsr.w	r4, r4, ip
 801cf68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cf6c:	ea40 0204 	orr.w	r2, r0, r4
 801cf70:	e7db      	b.n	801cf2a <__b2d+0x4a>
 801cf72:	ea44 030c 	orr.w	r3, r4, ip
 801cf76:	460a      	mov	r2, r1
 801cf78:	e7d7      	b.n	801cf2a <__b2d+0x4a>
 801cf7a:	bf00      	nop
 801cf7c:	3ff00000 	.word	0x3ff00000

0801cf80 <__d2b>:
 801cf80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cf84:	4689      	mov	r9, r1
 801cf86:	2101      	movs	r1, #1
 801cf88:	ec57 6b10 	vmov	r6, r7, d0
 801cf8c:	4690      	mov	r8, r2
 801cf8e:	f7ff fc09 	bl	801c7a4 <_Balloc>
 801cf92:	4604      	mov	r4, r0
 801cf94:	b930      	cbnz	r0, 801cfa4 <__d2b+0x24>
 801cf96:	4602      	mov	r2, r0
 801cf98:	4b25      	ldr	r3, [pc, #148]	; (801d030 <__d2b+0xb0>)
 801cf9a:	4826      	ldr	r0, [pc, #152]	; (801d034 <__d2b+0xb4>)
 801cf9c:	f240 310a 	movw	r1, #778	; 0x30a
 801cfa0:	f000 fb50 	bl	801d644 <__assert_func>
 801cfa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cfa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cfac:	bb35      	cbnz	r5, 801cffc <__d2b+0x7c>
 801cfae:	2e00      	cmp	r6, #0
 801cfb0:	9301      	str	r3, [sp, #4]
 801cfb2:	d028      	beq.n	801d006 <__d2b+0x86>
 801cfb4:	4668      	mov	r0, sp
 801cfb6:	9600      	str	r6, [sp, #0]
 801cfb8:	f7ff fd06 	bl	801c9c8 <__lo0bits>
 801cfbc:	9900      	ldr	r1, [sp, #0]
 801cfbe:	b300      	cbz	r0, 801d002 <__d2b+0x82>
 801cfc0:	9a01      	ldr	r2, [sp, #4]
 801cfc2:	f1c0 0320 	rsb	r3, r0, #32
 801cfc6:	fa02 f303 	lsl.w	r3, r2, r3
 801cfca:	430b      	orrs	r3, r1
 801cfcc:	40c2      	lsrs	r2, r0
 801cfce:	6163      	str	r3, [r4, #20]
 801cfd0:	9201      	str	r2, [sp, #4]
 801cfd2:	9b01      	ldr	r3, [sp, #4]
 801cfd4:	61a3      	str	r3, [r4, #24]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	bf14      	ite	ne
 801cfda:	2202      	movne	r2, #2
 801cfdc:	2201      	moveq	r2, #1
 801cfde:	6122      	str	r2, [r4, #16]
 801cfe0:	b1d5      	cbz	r5, 801d018 <__d2b+0x98>
 801cfe2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cfe6:	4405      	add	r5, r0
 801cfe8:	f8c9 5000 	str.w	r5, [r9]
 801cfec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cff0:	f8c8 0000 	str.w	r0, [r8]
 801cff4:	4620      	mov	r0, r4
 801cff6:	b003      	add	sp, #12
 801cff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d000:	e7d5      	b.n	801cfae <__d2b+0x2e>
 801d002:	6161      	str	r1, [r4, #20]
 801d004:	e7e5      	b.n	801cfd2 <__d2b+0x52>
 801d006:	a801      	add	r0, sp, #4
 801d008:	f7ff fcde 	bl	801c9c8 <__lo0bits>
 801d00c:	9b01      	ldr	r3, [sp, #4]
 801d00e:	6163      	str	r3, [r4, #20]
 801d010:	2201      	movs	r2, #1
 801d012:	6122      	str	r2, [r4, #16]
 801d014:	3020      	adds	r0, #32
 801d016:	e7e3      	b.n	801cfe0 <__d2b+0x60>
 801d018:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d01c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d020:	f8c9 0000 	str.w	r0, [r9]
 801d024:	6918      	ldr	r0, [r3, #16]
 801d026:	f7ff fcaf 	bl	801c988 <__hi0bits>
 801d02a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d02e:	e7df      	b.n	801cff0 <__d2b+0x70>
 801d030:	080523d0 	.word	0x080523d0
 801d034:	0805245c 	.word	0x0805245c

0801d038 <__ratio>:
 801d038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d03c:	4688      	mov	r8, r1
 801d03e:	4669      	mov	r1, sp
 801d040:	4681      	mov	r9, r0
 801d042:	f7ff ff4d 	bl	801cee0 <__b2d>
 801d046:	a901      	add	r1, sp, #4
 801d048:	4640      	mov	r0, r8
 801d04a:	ec55 4b10 	vmov	r4, r5, d0
 801d04e:	f7ff ff47 	bl	801cee0 <__b2d>
 801d052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d056:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d05a:	eba3 0c02 	sub.w	ip, r3, r2
 801d05e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d062:	1a9b      	subs	r3, r3, r2
 801d064:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d068:	ec51 0b10 	vmov	r0, r1, d0
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	bfd6      	itet	le
 801d070:	460a      	movle	r2, r1
 801d072:	462a      	movgt	r2, r5
 801d074:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d078:	468b      	mov	fp, r1
 801d07a:	462f      	mov	r7, r5
 801d07c:	bfd4      	ite	le
 801d07e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d082:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d086:	4620      	mov	r0, r4
 801d088:	ee10 2a10 	vmov	r2, s0
 801d08c:	465b      	mov	r3, fp
 801d08e:	4639      	mov	r1, r7
 801d090:	f7fb ffe4 	bl	801905c <__aeabi_ddiv>
 801d094:	ec41 0b10 	vmov	d0, r0, r1
 801d098:	b003      	add	sp, #12
 801d09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d09e <__copybits>:
 801d09e:	3901      	subs	r1, #1
 801d0a0:	b570      	push	{r4, r5, r6, lr}
 801d0a2:	1149      	asrs	r1, r1, #5
 801d0a4:	6914      	ldr	r4, [r2, #16]
 801d0a6:	3101      	adds	r1, #1
 801d0a8:	f102 0314 	add.w	r3, r2, #20
 801d0ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d0b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d0b4:	1f05      	subs	r5, r0, #4
 801d0b6:	42a3      	cmp	r3, r4
 801d0b8:	d30c      	bcc.n	801d0d4 <__copybits+0x36>
 801d0ba:	1aa3      	subs	r3, r4, r2
 801d0bc:	3b11      	subs	r3, #17
 801d0be:	f023 0303 	bic.w	r3, r3, #3
 801d0c2:	3211      	adds	r2, #17
 801d0c4:	42a2      	cmp	r2, r4
 801d0c6:	bf88      	it	hi
 801d0c8:	2300      	movhi	r3, #0
 801d0ca:	4418      	add	r0, r3
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	4288      	cmp	r0, r1
 801d0d0:	d305      	bcc.n	801d0de <__copybits+0x40>
 801d0d2:	bd70      	pop	{r4, r5, r6, pc}
 801d0d4:	f853 6b04 	ldr.w	r6, [r3], #4
 801d0d8:	f845 6f04 	str.w	r6, [r5, #4]!
 801d0dc:	e7eb      	b.n	801d0b6 <__copybits+0x18>
 801d0de:	f840 3b04 	str.w	r3, [r0], #4
 801d0e2:	e7f4      	b.n	801d0ce <__copybits+0x30>

0801d0e4 <__any_on>:
 801d0e4:	f100 0214 	add.w	r2, r0, #20
 801d0e8:	6900      	ldr	r0, [r0, #16]
 801d0ea:	114b      	asrs	r3, r1, #5
 801d0ec:	4298      	cmp	r0, r3
 801d0ee:	b510      	push	{r4, lr}
 801d0f0:	db11      	blt.n	801d116 <__any_on+0x32>
 801d0f2:	dd0a      	ble.n	801d10a <__any_on+0x26>
 801d0f4:	f011 011f 	ands.w	r1, r1, #31
 801d0f8:	d007      	beq.n	801d10a <__any_on+0x26>
 801d0fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d0fe:	fa24 f001 	lsr.w	r0, r4, r1
 801d102:	fa00 f101 	lsl.w	r1, r0, r1
 801d106:	428c      	cmp	r4, r1
 801d108:	d10b      	bne.n	801d122 <__any_on+0x3e>
 801d10a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d10e:	4293      	cmp	r3, r2
 801d110:	d803      	bhi.n	801d11a <__any_on+0x36>
 801d112:	2000      	movs	r0, #0
 801d114:	bd10      	pop	{r4, pc}
 801d116:	4603      	mov	r3, r0
 801d118:	e7f7      	b.n	801d10a <__any_on+0x26>
 801d11a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d11e:	2900      	cmp	r1, #0
 801d120:	d0f5      	beq.n	801d10e <__any_on+0x2a>
 801d122:	2001      	movs	r0, #1
 801d124:	e7f6      	b.n	801d114 <__any_on+0x30>

0801d126 <_calloc_r>:
 801d126:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d128:	fba1 2402 	umull	r2, r4, r1, r2
 801d12c:	b94c      	cbnz	r4, 801d142 <_calloc_r+0x1c>
 801d12e:	4611      	mov	r1, r2
 801d130:	9201      	str	r2, [sp, #4]
 801d132:	f000 f87b 	bl	801d22c <_malloc_r>
 801d136:	9a01      	ldr	r2, [sp, #4]
 801d138:	4605      	mov	r5, r0
 801d13a:	b930      	cbnz	r0, 801d14a <_calloc_r+0x24>
 801d13c:	4628      	mov	r0, r5
 801d13e:	b003      	add	sp, #12
 801d140:	bd30      	pop	{r4, r5, pc}
 801d142:	220c      	movs	r2, #12
 801d144:	6002      	str	r2, [r0, #0]
 801d146:	2500      	movs	r5, #0
 801d148:	e7f8      	b.n	801d13c <_calloc_r+0x16>
 801d14a:	4621      	mov	r1, r4
 801d14c:	f7fc fbb4 	bl	80198b8 <memset>
 801d150:	e7f4      	b.n	801d13c <_calloc_r+0x16>
	...

0801d154 <_free_r>:
 801d154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d156:	2900      	cmp	r1, #0
 801d158:	d044      	beq.n	801d1e4 <_free_r+0x90>
 801d15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d15e:	9001      	str	r0, [sp, #4]
 801d160:	2b00      	cmp	r3, #0
 801d162:	f1a1 0404 	sub.w	r4, r1, #4
 801d166:	bfb8      	it	lt
 801d168:	18e4      	addlt	r4, r4, r3
 801d16a:	f000 fab5 	bl	801d6d8 <__malloc_lock>
 801d16e:	4a1e      	ldr	r2, [pc, #120]	; (801d1e8 <_free_r+0x94>)
 801d170:	9801      	ldr	r0, [sp, #4]
 801d172:	6813      	ldr	r3, [r2, #0]
 801d174:	b933      	cbnz	r3, 801d184 <_free_r+0x30>
 801d176:	6063      	str	r3, [r4, #4]
 801d178:	6014      	str	r4, [r2, #0]
 801d17a:	b003      	add	sp, #12
 801d17c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d180:	f000 bab0 	b.w	801d6e4 <__malloc_unlock>
 801d184:	42a3      	cmp	r3, r4
 801d186:	d908      	bls.n	801d19a <_free_r+0x46>
 801d188:	6825      	ldr	r5, [r4, #0]
 801d18a:	1961      	adds	r1, r4, r5
 801d18c:	428b      	cmp	r3, r1
 801d18e:	bf01      	itttt	eq
 801d190:	6819      	ldreq	r1, [r3, #0]
 801d192:	685b      	ldreq	r3, [r3, #4]
 801d194:	1949      	addeq	r1, r1, r5
 801d196:	6021      	streq	r1, [r4, #0]
 801d198:	e7ed      	b.n	801d176 <_free_r+0x22>
 801d19a:	461a      	mov	r2, r3
 801d19c:	685b      	ldr	r3, [r3, #4]
 801d19e:	b10b      	cbz	r3, 801d1a4 <_free_r+0x50>
 801d1a0:	42a3      	cmp	r3, r4
 801d1a2:	d9fa      	bls.n	801d19a <_free_r+0x46>
 801d1a4:	6811      	ldr	r1, [r2, #0]
 801d1a6:	1855      	adds	r5, r2, r1
 801d1a8:	42a5      	cmp	r5, r4
 801d1aa:	d10b      	bne.n	801d1c4 <_free_r+0x70>
 801d1ac:	6824      	ldr	r4, [r4, #0]
 801d1ae:	4421      	add	r1, r4
 801d1b0:	1854      	adds	r4, r2, r1
 801d1b2:	42a3      	cmp	r3, r4
 801d1b4:	6011      	str	r1, [r2, #0]
 801d1b6:	d1e0      	bne.n	801d17a <_free_r+0x26>
 801d1b8:	681c      	ldr	r4, [r3, #0]
 801d1ba:	685b      	ldr	r3, [r3, #4]
 801d1bc:	6053      	str	r3, [r2, #4]
 801d1be:	4421      	add	r1, r4
 801d1c0:	6011      	str	r1, [r2, #0]
 801d1c2:	e7da      	b.n	801d17a <_free_r+0x26>
 801d1c4:	d902      	bls.n	801d1cc <_free_r+0x78>
 801d1c6:	230c      	movs	r3, #12
 801d1c8:	6003      	str	r3, [r0, #0]
 801d1ca:	e7d6      	b.n	801d17a <_free_r+0x26>
 801d1cc:	6825      	ldr	r5, [r4, #0]
 801d1ce:	1961      	adds	r1, r4, r5
 801d1d0:	428b      	cmp	r3, r1
 801d1d2:	bf04      	itt	eq
 801d1d4:	6819      	ldreq	r1, [r3, #0]
 801d1d6:	685b      	ldreq	r3, [r3, #4]
 801d1d8:	6063      	str	r3, [r4, #4]
 801d1da:	bf04      	itt	eq
 801d1dc:	1949      	addeq	r1, r1, r5
 801d1de:	6021      	streq	r1, [r4, #0]
 801d1e0:	6054      	str	r4, [r2, #4]
 801d1e2:	e7ca      	b.n	801d17a <_free_r+0x26>
 801d1e4:	b003      	add	sp, #12
 801d1e6:	bd30      	pop	{r4, r5, pc}
 801d1e8:	20000dbc 	.word	0x20000dbc

0801d1ec <sbrk_aligned>:
 801d1ec:	b570      	push	{r4, r5, r6, lr}
 801d1ee:	4e0e      	ldr	r6, [pc, #56]	; (801d228 <sbrk_aligned+0x3c>)
 801d1f0:	460c      	mov	r4, r1
 801d1f2:	6831      	ldr	r1, [r6, #0]
 801d1f4:	4605      	mov	r5, r0
 801d1f6:	b911      	cbnz	r1, 801d1fe <sbrk_aligned+0x12>
 801d1f8:	f000 f9f2 	bl	801d5e0 <_sbrk_r>
 801d1fc:	6030      	str	r0, [r6, #0]
 801d1fe:	4621      	mov	r1, r4
 801d200:	4628      	mov	r0, r5
 801d202:	f000 f9ed 	bl	801d5e0 <_sbrk_r>
 801d206:	1c43      	adds	r3, r0, #1
 801d208:	d00a      	beq.n	801d220 <sbrk_aligned+0x34>
 801d20a:	1cc4      	adds	r4, r0, #3
 801d20c:	f024 0403 	bic.w	r4, r4, #3
 801d210:	42a0      	cmp	r0, r4
 801d212:	d007      	beq.n	801d224 <sbrk_aligned+0x38>
 801d214:	1a21      	subs	r1, r4, r0
 801d216:	4628      	mov	r0, r5
 801d218:	f000 f9e2 	bl	801d5e0 <_sbrk_r>
 801d21c:	3001      	adds	r0, #1
 801d21e:	d101      	bne.n	801d224 <sbrk_aligned+0x38>
 801d220:	f04f 34ff 	mov.w	r4, #4294967295
 801d224:	4620      	mov	r0, r4
 801d226:	bd70      	pop	{r4, r5, r6, pc}
 801d228:	20000dc0 	.word	0x20000dc0

0801d22c <_malloc_r>:
 801d22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d230:	1ccd      	adds	r5, r1, #3
 801d232:	f025 0503 	bic.w	r5, r5, #3
 801d236:	3508      	adds	r5, #8
 801d238:	2d0c      	cmp	r5, #12
 801d23a:	bf38      	it	cc
 801d23c:	250c      	movcc	r5, #12
 801d23e:	2d00      	cmp	r5, #0
 801d240:	4607      	mov	r7, r0
 801d242:	db01      	blt.n	801d248 <_malloc_r+0x1c>
 801d244:	42a9      	cmp	r1, r5
 801d246:	d905      	bls.n	801d254 <_malloc_r+0x28>
 801d248:	230c      	movs	r3, #12
 801d24a:	603b      	str	r3, [r7, #0]
 801d24c:	2600      	movs	r6, #0
 801d24e:	4630      	mov	r0, r6
 801d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d254:	4e2e      	ldr	r6, [pc, #184]	; (801d310 <_malloc_r+0xe4>)
 801d256:	f000 fa3f 	bl	801d6d8 <__malloc_lock>
 801d25a:	6833      	ldr	r3, [r6, #0]
 801d25c:	461c      	mov	r4, r3
 801d25e:	bb34      	cbnz	r4, 801d2ae <_malloc_r+0x82>
 801d260:	4629      	mov	r1, r5
 801d262:	4638      	mov	r0, r7
 801d264:	f7ff ffc2 	bl	801d1ec <sbrk_aligned>
 801d268:	1c43      	adds	r3, r0, #1
 801d26a:	4604      	mov	r4, r0
 801d26c:	d14d      	bne.n	801d30a <_malloc_r+0xde>
 801d26e:	6834      	ldr	r4, [r6, #0]
 801d270:	4626      	mov	r6, r4
 801d272:	2e00      	cmp	r6, #0
 801d274:	d140      	bne.n	801d2f8 <_malloc_r+0xcc>
 801d276:	6823      	ldr	r3, [r4, #0]
 801d278:	4631      	mov	r1, r6
 801d27a:	4638      	mov	r0, r7
 801d27c:	eb04 0803 	add.w	r8, r4, r3
 801d280:	f000 f9ae 	bl	801d5e0 <_sbrk_r>
 801d284:	4580      	cmp	r8, r0
 801d286:	d13a      	bne.n	801d2fe <_malloc_r+0xd2>
 801d288:	6821      	ldr	r1, [r4, #0]
 801d28a:	3503      	adds	r5, #3
 801d28c:	1a6d      	subs	r5, r5, r1
 801d28e:	f025 0503 	bic.w	r5, r5, #3
 801d292:	3508      	adds	r5, #8
 801d294:	2d0c      	cmp	r5, #12
 801d296:	bf38      	it	cc
 801d298:	250c      	movcc	r5, #12
 801d29a:	4629      	mov	r1, r5
 801d29c:	4638      	mov	r0, r7
 801d29e:	f7ff ffa5 	bl	801d1ec <sbrk_aligned>
 801d2a2:	3001      	adds	r0, #1
 801d2a4:	d02b      	beq.n	801d2fe <_malloc_r+0xd2>
 801d2a6:	6823      	ldr	r3, [r4, #0]
 801d2a8:	442b      	add	r3, r5
 801d2aa:	6023      	str	r3, [r4, #0]
 801d2ac:	e00e      	b.n	801d2cc <_malloc_r+0xa0>
 801d2ae:	6822      	ldr	r2, [r4, #0]
 801d2b0:	1b52      	subs	r2, r2, r5
 801d2b2:	d41e      	bmi.n	801d2f2 <_malloc_r+0xc6>
 801d2b4:	2a0b      	cmp	r2, #11
 801d2b6:	d916      	bls.n	801d2e6 <_malloc_r+0xba>
 801d2b8:	1961      	adds	r1, r4, r5
 801d2ba:	42a3      	cmp	r3, r4
 801d2bc:	6025      	str	r5, [r4, #0]
 801d2be:	bf18      	it	ne
 801d2c0:	6059      	strne	r1, [r3, #4]
 801d2c2:	6863      	ldr	r3, [r4, #4]
 801d2c4:	bf08      	it	eq
 801d2c6:	6031      	streq	r1, [r6, #0]
 801d2c8:	5162      	str	r2, [r4, r5]
 801d2ca:	604b      	str	r3, [r1, #4]
 801d2cc:	4638      	mov	r0, r7
 801d2ce:	f104 060b 	add.w	r6, r4, #11
 801d2d2:	f000 fa07 	bl	801d6e4 <__malloc_unlock>
 801d2d6:	f026 0607 	bic.w	r6, r6, #7
 801d2da:	1d23      	adds	r3, r4, #4
 801d2dc:	1af2      	subs	r2, r6, r3
 801d2de:	d0b6      	beq.n	801d24e <_malloc_r+0x22>
 801d2e0:	1b9b      	subs	r3, r3, r6
 801d2e2:	50a3      	str	r3, [r4, r2]
 801d2e4:	e7b3      	b.n	801d24e <_malloc_r+0x22>
 801d2e6:	6862      	ldr	r2, [r4, #4]
 801d2e8:	42a3      	cmp	r3, r4
 801d2ea:	bf0c      	ite	eq
 801d2ec:	6032      	streq	r2, [r6, #0]
 801d2ee:	605a      	strne	r2, [r3, #4]
 801d2f0:	e7ec      	b.n	801d2cc <_malloc_r+0xa0>
 801d2f2:	4623      	mov	r3, r4
 801d2f4:	6864      	ldr	r4, [r4, #4]
 801d2f6:	e7b2      	b.n	801d25e <_malloc_r+0x32>
 801d2f8:	4634      	mov	r4, r6
 801d2fa:	6876      	ldr	r6, [r6, #4]
 801d2fc:	e7b9      	b.n	801d272 <_malloc_r+0x46>
 801d2fe:	230c      	movs	r3, #12
 801d300:	603b      	str	r3, [r7, #0]
 801d302:	4638      	mov	r0, r7
 801d304:	f000 f9ee 	bl	801d6e4 <__malloc_unlock>
 801d308:	e7a1      	b.n	801d24e <_malloc_r+0x22>
 801d30a:	6025      	str	r5, [r4, #0]
 801d30c:	e7de      	b.n	801d2cc <_malloc_r+0xa0>
 801d30e:	bf00      	nop
 801d310:	20000dbc 	.word	0x20000dbc

0801d314 <__ssputs_r>:
 801d314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d318:	688e      	ldr	r6, [r1, #8]
 801d31a:	429e      	cmp	r6, r3
 801d31c:	4682      	mov	sl, r0
 801d31e:	460c      	mov	r4, r1
 801d320:	4690      	mov	r8, r2
 801d322:	461f      	mov	r7, r3
 801d324:	d838      	bhi.n	801d398 <__ssputs_r+0x84>
 801d326:	898a      	ldrh	r2, [r1, #12]
 801d328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d32c:	d032      	beq.n	801d394 <__ssputs_r+0x80>
 801d32e:	6825      	ldr	r5, [r4, #0]
 801d330:	6909      	ldr	r1, [r1, #16]
 801d332:	eba5 0901 	sub.w	r9, r5, r1
 801d336:	6965      	ldr	r5, [r4, #20]
 801d338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d33c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d340:	3301      	adds	r3, #1
 801d342:	444b      	add	r3, r9
 801d344:	106d      	asrs	r5, r5, #1
 801d346:	429d      	cmp	r5, r3
 801d348:	bf38      	it	cc
 801d34a:	461d      	movcc	r5, r3
 801d34c:	0553      	lsls	r3, r2, #21
 801d34e:	d531      	bpl.n	801d3b4 <__ssputs_r+0xa0>
 801d350:	4629      	mov	r1, r5
 801d352:	f7ff ff6b 	bl	801d22c <_malloc_r>
 801d356:	4606      	mov	r6, r0
 801d358:	b950      	cbnz	r0, 801d370 <__ssputs_r+0x5c>
 801d35a:	230c      	movs	r3, #12
 801d35c:	f8ca 3000 	str.w	r3, [sl]
 801d360:	89a3      	ldrh	r3, [r4, #12]
 801d362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d366:	81a3      	strh	r3, [r4, #12]
 801d368:	f04f 30ff 	mov.w	r0, #4294967295
 801d36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d370:	6921      	ldr	r1, [r4, #16]
 801d372:	464a      	mov	r2, r9
 801d374:	f7ff fa08 	bl	801c788 <memcpy>
 801d378:	89a3      	ldrh	r3, [r4, #12]
 801d37a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d37e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d382:	81a3      	strh	r3, [r4, #12]
 801d384:	6126      	str	r6, [r4, #16]
 801d386:	6165      	str	r5, [r4, #20]
 801d388:	444e      	add	r6, r9
 801d38a:	eba5 0509 	sub.w	r5, r5, r9
 801d38e:	6026      	str	r6, [r4, #0]
 801d390:	60a5      	str	r5, [r4, #8]
 801d392:	463e      	mov	r6, r7
 801d394:	42be      	cmp	r6, r7
 801d396:	d900      	bls.n	801d39a <__ssputs_r+0x86>
 801d398:	463e      	mov	r6, r7
 801d39a:	6820      	ldr	r0, [r4, #0]
 801d39c:	4632      	mov	r2, r6
 801d39e:	4641      	mov	r1, r8
 801d3a0:	f000 f980 	bl	801d6a4 <memmove>
 801d3a4:	68a3      	ldr	r3, [r4, #8]
 801d3a6:	1b9b      	subs	r3, r3, r6
 801d3a8:	60a3      	str	r3, [r4, #8]
 801d3aa:	6823      	ldr	r3, [r4, #0]
 801d3ac:	4433      	add	r3, r6
 801d3ae:	6023      	str	r3, [r4, #0]
 801d3b0:	2000      	movs	r0, #0
 801d3b2:	e7db      	b.n	801d36c <__ssputs_r+0x58>
 801d3b4:	462a      	mov	r2, r5
 801d3b6:	f000 f99b 	bl	801d6f0 <_realloc_r>
 801d3ba:	4606      	mov	r6, r0
 801d3bc:	2800      	cmp	r0, #0
 801d3be:	d1e1      	bne.n	801d384 <__ssputs_r+0x70>
 801d3c0:	6921      	ldr	r1, [r4, #16]
 801d3c2:	4650      	mov	r0, sl
 801d3c4:	f7ff fec6 	bl	801d154 <_free_r>
 801d3c8:	e7c7      	b.n	801d35a <__ssputs_r+0x46>
	...

0801d3cc <_svfiprintf_r>:
 801d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3d0:	4698      	mov	r8, r3
 801d3d2:	898b      	ldrh	r3, [r1, #12]
 801d3d4:	061b      	lsls	r3, r3, #24
 801d3d6:	b09d      	sub	sp, #116	; 0x74
 801d3d8:	4607      	mov	r7, r0
 801d3da:	460d      	mov	r5, r1
 801d3dc:	4614      	mov	r4, r2
 801d3de:	d50e      	bpl.n	801d3fe <_svfiprintf_r+0x32>
 801d3e0:	690b      	ldr	r3, [r1, #16]
 801d3e2:	b963      	cbnz	r3, 801d3fe <_svfiprintf_r+0x32>
 801d3e4:	2140      	movs	r1, #64	; 0x40
 801d3e6:	f7ff ff21 	bl	801d22c <_malloc_r>
 801d3ea:	6028      	str	r0, [r5, #0]
 801d3ec:	6128      	str	r0, [r5, #16]
 801d3ee:	b920      	cbnz	r0, 801d3fa <_svfiprintf_r+0x2e>
 801d3f0:	230c      	movs	r3, #12
 801d3f2:	603b      	str	r3, [r7, #0]
 801d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d3f8:	e0d1      	b.n	801d59e <_svfiprintf_r+0x1d2>
 801d3fa:	2340      	movs	r3, #64	; 0x40
 801d3fc:	616b      	str	r3, [r5, #20]
 801d3fe:	2300      	movs	r3, #0
 801d400:	9309      	str	r3, [sp, #36]	; 0x24
 801d402:	2320      	movs	r3, #32
 801d404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d408:	f8cd 800c 	str.w	r8, [sp, #12]
 801d40c:	2330      	movs	r3, #48	; 0x30
 801d40e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d5b8 <_svfiprintf_r+0x1ec>
 801d412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d416:	f04f 0901 	mov.w	r9, #1
 801d41a:	4623      	mov	r3, r4
 801d41c:	469a      	mov	sl, r3
 801d41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d422:	b10a      	cbz	r2, 801d428 <_svfiprintf_r+0x5c>
 801d424:	2a25      	cmp	r2, #37	; 0x25
 801d426:	d1f9      	bne.n	801d41c <_svfiprintf_r+0x50>
 801d428:	ebba 0b04 	subs.w	fp, sl, r4
 801d42c:	d00b      	beq.n	801d446 <_svfiprintf_r+0x7a>
 801d42e:	465b      	mov	r3, fp
 801d430:	4622      	mov	r2, r4
 801d432:	4629      	mov	r1, r5
 801d434:	4638      	mov	r0, r7
 801d436:	f7ff ff6d 	bl	801d314 <__ssputs_r>
 801d43a:	3001      	adds	r0, #1
 801d43c:	f000 80aa 	beq.w	801d594 <_svfiprintf_r+0x1c8>
 801d440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d442:	445a      	add	r2, fp
 801d444:	9209      	str	r2, [sp, #36]	; 0x24
 801d446:	f89a 3000 	ldrb.w	r3, [sl]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	f000 80a2 	beq.w	801d594 <_svfiprintf_r+0x1c8>
 801d450:	2300      	movs	r3, #0
 801d452:	f04f 32ff 	mov.w	r2, #4294967295
 801d456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d45a:	f10a 0a01 	add.w	sl, sl, #1
 801d45e:	9304      	str	r3, [sp, #16]
 801d460:	9307      	str	r3, [sp, #28]
 801d462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d466:	931a      	str	r3, [sp, #104]	; 0x68
 801d468:	4654      	mov	r4, sl
 801d46a:	2205      	movs	r2, #5
 801d46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d470:	4851      	ldr	r0, [pc, #324]	; (801d5b8 <_svfiprintf_r+0x1ec>)
 801d472:	f7fb fabd 	bl	80189f0 <memchr>
 801d476:	9a04      	ldr	r2, [sp, #16]
 801d478:	b9d8      	cbnz	r0, 801d4b2 <_svfiprintf_r+0xe6>
 801d47a:	06d0      	lsls	r0, r2, #27
 801d47c:	bf44      	itt	mi
 801d47e:	2320      	movmi	r3, #32
 801d480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d484:	0711      	lsls	r1, r2, #28
 801d486:	bf44      	itt	mi
 801d488:	232b      	movmi	r3, #43	; 0x2b
 801d48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d48e:	f89a 3000 	ldrb.w	r3, [sl]
 801d492:	2b2a      	cmp	r3, #42	; 0x2a
 801d494:	d015      	beq.n	801d4c2 <_svfiprintf_r+0xf6>
 801d496:	9a07      	ldr	r2, [sp, #28]
 801d498:	4654      	mov	r4, sl
 801d49a:	2000      	movs	r0, #0
 801d49c:	f04f 0c0a 	mov.w	ip, #10
 801d4a0:	4621      	mov	r1, r4
 801d4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4a6:	3b30      	subs	r3, #48	; 0x30
 801d4a8:	2b09      	cmp	r3, #9
 801d4aa:	d94e      	bls.n	801d54a <_svfiprintf_r+0x17e>
 801d4ac:	b1b0      	cbz	r0, 801d4dc <_svfiprintf_r+0x110>
 801d4ae:	9207      	str	r2, [sp, #28]
 801d4b0:	e014      	b.n	801d4dc <_svfiprintf_r+0x110>
 801d4b2:	eba0 0308 	sub.w	r3, r0, r8
 801d4b6:	fa09 f303 	lsl.w	r3, r9, r3
 801d4ba:	4313      	orrs	r3, r2
 801d4bc:	9304      	str	r3, [sp, #16]
 801d4be:	46a2      	mov	sl, r4
 801d4c0:	e7d2      	b.n	801d468 <_svfiprintf_r+0x9c>
 801d4c2:	9b03      	ldr	r3, [sp, #12]
 801d4c4:	1d19      	adds	r1, r3, #4
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	9103      	str	r1, [sp, #12]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	bfbb      	ittet	lt
 801d4ce:	425b      	neglt	r3, r3
 801d4d0:	f042 0202 	orrlt.w	r2, r2, #2
 801d4d4:	9307      	strge	r3, [sp, #28]
 801d4d6:	9307      	strlt	r3, [sp, #28]
 801d4d8:	bfb8      	it	lt
 801d4da:	9204      	strlt	r2, [sp, #16]
 801d4dc:	7823      	ldrb	r3, [r4, #0]
 801d4de:	2b2e      	cmp	r3, #46	; 0x2e
 801d4e0:	d10c      	bne.n	801d4fc <_svfiprintf_r+0x130>
 801d4e2:	7863      	ldrb	r3, [r4, #1]
 801d4e4:	2b2a      	cmp	r3, #42	; 0x2a
 801d4e6:	d135      	bne.n	801d554 <_svfiprintf_r+0x188>
 801d4e8:	9b03      	ldr	r3, [sp, #12]
 801d4ea:	1d1a      	adds	r2, r3, #4
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	9203      	str	r2, [sp, #12]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	bfb8      	it	lt
 801d4f4:	f04f 33ff 	movlt.w	r3, #4294967295
 801d4f8:	3402      	adds	r4, #2
 801d4fa:	9305      	str	r3, [sp, #20]
 801d4fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d5c8 <_svfiprintf_r+0x1fc>
 801d500:	7821      	ldrb	r1, [r4, #0]
 801d502:	2203      	movs	r2, #3
 801d504:	4650      	mov	r0, sl
 801d506:	f7fb fa73 	bl	80189f0 <memchr>
 801d50a:	b140      	cbz	r0, 801d51e <_svfiprintf_r+0x152>
 801d50c:	2340      	movs	r3, #64	; 0x40
 801d50e:	eba0 000a 	sub.w	r0, r0, sl
 801d512:	fa03 f000 	lsl.w	r0, r3, r0
 801d516:	9b04      	ldr	r3, [sp, #16]
 801d518:	4303      	orrs	r3, r0
 801d51a:	3401      	adds	r4, #1
 801d51c:	9304      	str	r3, [sp, #16]
 801d51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d522:	4826      	ldr	r0, [pc, #152]	; (801d5bc <_svfiprintf_r+0x1f0>)
 801d524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d528:	2206      	movs	r2, #6
 801d52a:	f7fb fa61 	bl	80189f0 <memchr>
 801d52e:	2800      	cmp	r0, #0
 801d530:	d038      	beq.n	801d5a4 <_svfiprintf_r+0x1d8>
 801d532:	4b23      	ldr	r3, [pc, #140]	; (801d5c0 <_svfiprintf_r+0x1f4>)
 801d534:	bb1b      	cbnz	r3, 801d57e <_svfiprintf_r+0x1b2>
 801d536:	9b03      	ldr	r3, [sp, #12]
 801d538:	3307      	adds	r3, #7
 801d53a:	f023 0307 	bic.w	r3, r3, #7
 801d53e:	3308      	adds	r3, #8
 801d540:	9303      	str	r3, [sp, #12]
 801d542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d544:	4433      	add	r3, r6
 801d546:	9309      	str	r3, [sp, #36]	; 0x24
 801d548:	e767      	b.n	801d41a <_svfiprintf_r+0x4e>
 801d54a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d54e:	460c      	mov	r4, r1
 801d550:	2001      	movs	r0, #1
 801d552:	e7a5      	b.n	801d4a0 <_svfiprintf_r+0xd4>
 801d554:	2300      	movs	r3, #0
 801d556:	3401      	adds	r4, #1
 801d558:	9305      	str	r3, [sp, #20]
 801d55a:	4619      	mov	r1, r3
 801d55c:	f04f 0c0a 	mov.w	ip, #10
 801d560:	4620      	mov	r0, r4
 801d562:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d566:	3a30      	subs	r2, #48	; 0x30
 801d568:	2a09      	cmp	r2, #9
 801d56a:	d903      	bls.n	801d574 <_svfiprintf_r+0x1a8>
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d0c5      	beq.n	801d4fc <_svfiprintf_r+0x130>
 801d570:	9105      	str	r1, [sp, #20]
 801d572:	e7c3      	b.n	801d4fc <_svfiprintf_r+0x130>
 801d574:	fb0c 2101 	mla	r1, ip, r1, r2
 801d578:	4604      	mov	r4, r0
 801d57a:	2301      	movs	r3, #1
 801d57c:	e7f0      	b.n	801d560 <_svfiprintf_r+0x194>
 801d57e:	ab03      	add	r3, sp, #12
 801d580:	9300      	str	r3, [sp, #0]
 801d582:	462a      	mov	r2, r5
 801d584:	4b0f      	ldr	r3, [pc, #60]	; (801d5c4 <_svfiprintf_r+0x1f8>)
 801d586:	a904      	add	r1, sp, #16
 801d588:	4638      	mov	r0, r7
 801d58a:	f7fc fa3d 	bl	8019a08 <_printf_float>
 801d58e:	1c42      	adds	r2, r0, #1
 801d590:	4606      	mov	r6, r0
 801d592:	d1d6      	bne.n	801d542 <_svfiprintf_r+0x176>
 801d594:	89ab      	ldrh	r3, [r5, #12]
 801d596:	065b      	lsls	r3, r3, #25
 801d598:	f53f af2c 	bmi.w	801d3f4 <_svfiprintf_r+0x28>
 801d59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d59e:	b01d      	add	sp, #116	; 0x74
 801d5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5a4:	ab03      	add	r3, sp, #12
 801d5a6:	9300      	str	r3, [sp, #0]
 801d5a8:	462a      	mov	r2, r5
 801d5aa:	4b06      	ldr	r3, [pc, #24]	; (801d5c4 <_svfiprintf_r+0x1f8>)
 801d5ac:	a904      	add	r1, sp, #16
 801d5ae:	4638      	mov	r0, r7
 801d5b0:	f7fc fcce 	bl	8019f50 <_printf_i>
 801d5b4:	e7eb      	b.n	801d58e <_svfiprintf_r+0x1c2>
 801d5b6:	bf00      	nop
 801d5b8:	080525b4 	.word	0x080525b4
 801d5bc:	080525be 	.word	0x080525be
 801d5c0:	08019a09 	.word	0x08019a09
 801d5c4:	0801d315 	.word	0x0801d315
 801d5c8:	080525ba 	.word	0x080525ba
 801d5cc:	00000000 	.word	0x00000000

0801d5d0 <nan>:
 801d5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d5d8 <nan+0x8>
 801d5d4:	4770      	bx	lr
 801d5d6:	bf00      	nop
 801d5d8:	00000000 	.word	0x00000000
 801d5dc:	7ff80000 	.word	0x7ff80000

0801d5e0 <_sbrk_r>:
 801d5e0:	b538      	push	{r3, r4, r5, lr}
 801d5e2:	4d06      	ldr	r5, [pc, #24]	; (801d5fc <_sbrk_r+0x1c>)
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	4604      	mov	r4, r0
 801d5e8:	4608      	mov	r0, r1
 801d5ea:	602b      	str	r3, [r5, #0]
 801d5ec:	f7e8 fe00 	bl	80061f0 <_sbrk>
 801d5f0:	1c43      	adds	r3, r0, #1
 801d5f2:	d102      	bne.n	801d5fa <_sbrk_r+0x1a>
 801d5f4:	682b      	ldr	r3, [r5, #0]
 801d5f6:	b103      	cbz	r3, 801d5fa <_sbrk_r+0x1a>
 801d5f8:	6023      	str	r3, [r4, #0]
 801d5fa:	bd38      	pop	{r3, r4, r5, pc}
 801d5fc:	20000dc4 	.word	0x20000dc4

0801d600 <strncmp>:
 801d600:	b510      	push	{r4, lr}
 801d602:	b17a      	cbz	r2, 801d624 <strncmp+0x24>
 801d604:	4603      	mov	r3, r0
 801d606:	3901      	subs	r1, #1
 801d608:	1884      	adds	r4, r0, r2
 801d60a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d60e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d612:	4290      	cmp	r0, r2
 801d614:	d101      	bne.n	801d61a <strncmp+0x1a>
 801d616:	42a3      	cmp	r3, r4
 801d618:	d101      	bne.n	801d61e <strncmp+0x1e>
 801d61a:	1a80      	subs	r0, r0, r2
 801d61c:	bd10      	pop	{r4, pc}
 801d61e:	2800      	cmp	r0, #0
 801d620:	d1f3      	bne.n	801d60a <strncmp+0xa>
 801d622:	e7fa      	b.n	801d61a <strncmp+0x1a>
 801d624:	4610      	mov	r0, r2
 801d626:	e7f9      	b.n	801d61c <strncmp+0x1c>

0801d628 <__ascii_wctomb>:
 801d628:	b149      	cbz	r1, 801d63e <__ascii_wctomb+0x16>
 801d62a:	2aff      	cmp	r2, #255	; 0xff
 801d62c:	bf85      	ittet	hi
 801d62e:	238a      	movhi	r3, #138	; 0x8a
 801d630:	6003      	strhi	r3, [r0, #0]
 801d632:	700a      	strbls	r2, [r1, #0]
 801d634:	f04f 30ff 	movhi.w	r0, #4294967295
 801d638:	bf98      	it	ls
 801d63a:	2001      	movls	r0, #1
 801d63c:	4770      	bx	lr
 801d63e:	4608      	mov	r0, r1
 801d640:	4770      	bx	lr
	...

0801d644 <__assert_func>:
 801d644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d646:	4614      	mov	r4, r2
 801d648:	461a      	mov	r2, r3
 801d64a:	4b09      	ldr	r3, [pc, #36]	; (801d670 <__assert_func+0x2c>)
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	4605      	mov	r5, r0
 801d650:	68d8      	ldr	r0, [r3, #12]
 801d652:	b14c      	cbz	r4, 801d668 <__assert_func+0x24>
 801d654:	4b07      	ldr	r3, [pc, #28]	; (801d674 <__assert_func+0x30>)
 801d656:	9100      	str	r1, [sp, #0]
 801d658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d65c:	4906      	ldr	r1, [pc, #24]	; (801d678 <__assert_func+0x34>)
 801d65e:	462b      	mov	r3, r5
 801d660:	f000 f80e 	bl	801d680 <fiprintf>
 801d664:	f000 fa8c 	bl	801db80 <abort>
 801d668:	4b04      	ldr	r3, [pc, #16]	; (801d67c <__assert_func+0x38>)
 801d66a:	461c      	mov	r4, r3
 801d66c:	e7f3      	b.n	801d656 <__assert_func+0x12>
 801d66e:	bf00      	nop
 801d670:	20000064 	.word	0x20000064
 801d674:	080525c5 	.word	0x080525c5
 801d678:	080525d2 	.word	0x080525d2
 801d67c:	08052600 	.word	0x08052600

0801d680 <fiprintf>:
 801d680:	b40e      	push	{r1, r2, r3}
 801d682:	b503      	push	{r0, r1, lr}
 801d684:	4601      	mov	r1, r0
 801d686:	ab03      	add	r3, sp, #12
 801d688:	4805      	ldr	r0, [pc, #20]	; (801d6a0 <fiprintf+0x20>)
 801d68a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d68e:	6800      	ldr	r0, [r0, #0]
 801d690:	9301      	str	r3, [sp, #4]
 801d692:	f000 f885 	bl	801d7a0 <_vfiprintf_r>
 801d696:	b002      	add	sp, #8
 801d698:	f85d eb04 	ldr.w	lr, [sp], #4
 801d69c:	b003      	add	sp, #12
 801d69e:	4770      	bx	lr
 801d6a0:	20000064 	.word	0x20000064

0801d6a4 <memmove>:
 801d6a4:	4288      	cmp	r0, r1
 801d6a6:	b510      	push	{r4, lr}
 801d6a8:	eb01 0402 	add.w	r4, r1, r2
 801d6ac:	d902      	bls.n	801d6b4 <memmove+0x10>
 801d6ae:	4284      	cmp	r4, r0
 801d6b0:	4623      	mov	r3, r4
 801d6b2:	d807      	bhi.n	801d6c4 <memmove+0x20>
 801d6b4:	1e43      	subs	r3, r0, #1
 801d6b6:	42a1      	cmp	r1, r4
 801d6b8:	d008      	beq.n	801d6cc <memmove+0x28>
 801d6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d6be:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d6c2:	e7f8      	b.n	801d6b6 <memmove+0x12>
 801d6c4:	4402      	add	r2, r0
 801d6c6:	4601      	mov	r1, r0
 801d6c8:	428a      	cmp	r2, r1
 801d6ca:	d100      	bne.n	801d6ce <memmove+0x2a>
 801d6cc:	bd10      	pop	{r4, pc}
 801d6ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d6d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d6d6:	e7f7      	b.n	801d6c8 <memmove+0x24>

0801d6d8 <__malloc_lock>:
 801d6d8:	4801      	ldr	r0, [pc, #4]	; (801d6e0 <__malloc_lock+0x8>)
 801d6da:	f000 bc11 	b.w	801df00 <__retarget_lock_acquire_recursive>
 801d6de:	bf00      	nop
 801d6e0:	20000dc8 	.word	0x20000dc8

0801d6e4 <__malloc_unlock>:
 801d6e4:	4801      	ldr	r0, [pc, #4]	; (801d6ec <__malloc_unlock+0x8>)
 801d6e6:	f000 bc0c 	b.w	801df02 <__retarget_lock_release_recursive>
 801d6ea:	bf00      	nop
 801d6ec:	20000dc8 	.word	0x20000dc8

0801d6f0 <_realloc_r>:
 801d6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6f4:	4680      	mov	r8, r0
 801d6f6:	4614      	mov	r4, r2
 801d6f8:	460e      	mov	r6, r1
 801d6fa:	b921      	cbnz	r1, 801d706 <_realloc_r+0x16>
 801d6fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d700:	4611      	mov	r1, r2
 801d702:	f7ff bd93 	b.w	801d22c <_malloc_r>
 801d706:	b92a      	cbnz	r2, 801d714 <_realloc_r+0x24>
 801d708:	f7ff fd24 	bl	801d154 <_free_r>
 801d70c:	4625      	mov	r5, r4
 801d70e:	4628      	mov	r0, r5
 801d710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d714:	f000 fc5c 	bl	801dfd0 <_malloc_usable_size_r>
 801d718:	4284      	cmp	r4, r0
 801d71a:	4607      	mov	r7, r0
 801d71c:	d802      	bhi.n	801d724 <_realloc_r+0x34>
 801d71e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d722:	d812      	bhi.n	801d74a <_realloc_r+0x5a>
 801d724:	4621      	mov	r1, r4
 801d726:	4640      	mov	r0, r8
 801d728:	f7ff fd80 	bl	801d22c <_malloc_r>
 801d72c:	4605      	mov	r5, r0
 801d72e:	2800      	cmp	r0, #0
 801d730:	d0ed      	beq.n	801d70e <_realloc_r+0x1e>
 801d732:	42bc      	cmp	r4, r7
 801d734:	4622      	mov	r2, r4
 801d736:	4631      	mov	r1, r6
 801d738:	bf28      	it	cs
 801d73a:	463a      	movcs	r2, r7
 801d73c:	f7ff f824 	bl	801c788 <memcpy>
 801d740:	4631      	mov	r1, r6
 801d742:	4640      	mov	r0, r8
 801d744:	f7ff fd06 	bl	801d154 <_free_r>
 801d748:	e7e1      	b.n	801d70e <_realloc_r+0x1e>
 801d74a:	4635      	mov	r5, r6
 801d74c:	e7df      	b.n	801d70e <_realloc_r+0x1e>

0801d74e <__sfputc_r>:
 801d74e:	6893      	ldr	r3, [r2, #8]
 801d750:	3b01      	subs	r3, #1
 801d752:	2b00      	cmp	r3, #0
 801d754:	b410      	push	{r4}
 801d756:	6093      	str	r3, [r2, #8]
 801d758:	da08      	bge.n	801d76c <__sfputc_r+0x1e>
 801d75a:	6994      	ldr	r4, [r2, #24]
 801d75c:	42a3      	cmp	r3, r4
 801d75e:	db01      	blt.n	801d764 <__sfputc_r+0x16>
 801d760:	290a      	cmp	r1, #10
 801d762:	d103      	bne.n	801d76c <__sfputc_r+0x1e>
 801d764:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d768:	f000 b94a 	b.w	801da00 <__swbuf_r>
 801d76c:	6813      	ldr	r3, [r2, #0]
 801d76e:	1c58      	adds	r0, r3, #1
 801d770:	6010      	str	r0, [r2, #0]
 801d772:	7019      	strb	r1, [r3, #0]
 801d774:	4608      	mov	r0, r1
 801d776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d77a:	4770      	bx	lr

0801d77c <__sfputs_r>:
 801d77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d77e:	4606      	mov	r6, r0
 801d780:	460f      	mov	r7, r1
 801d782:	4614      	mov	r4, r2
 801d784:	18d5      	adds	r5, r2, r3
 801d786:	42ac      	cmp	r4, r5
 801d788:	d101      	bne.n	801d78e <__sfputs_r+0x12>
 801d78a:	2000      	movs	r0, #0
 801d78c:	e007      	b.n	801d79e <__sfputs_r+0x22>
 801d78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d792:	463a      	mov	r2, r7
 801d794:	4630      	mov	r0, r6
 801d796:	f7ff ffda 	bl	801d74e <__sfputc_r>
 801d79a:	1c43      	adds	r3, r0, #1
 801d79c:	d1f3      	bne.n	801d786 <__sfputs_r+0xa>
 801d79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d7a0 <_vfiprintf_r>:
 801d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a4:	460d      	mov	r5, r1
 801d7a6:	b09d      	sub	sp, #116	; 0x74
 801d7a8:	4614      	mov	r4, r2
 801d7aa:	4698      	mov	r8, r3
 801d7ac:	4606      	mov	r6, r0
 801d7ae:	b118      	cbz	r0, 801d7b8 <_vfiprintf_r+0x18>
 801d7b0:	6983      	ldr	r3, [r0, #24]
 801d7b2:	b90b      	cbnz	r3, 801d7b8 <_vfiprintf_r+0x18>
 801d7b4:	f000 fb06 	bl	801ddc4 <__sinit>
 801d7b8:	4b89      	ldr	r3, [pc, #548]	; (801d9e0 <_vfiprintf_r+0x240>)
 801d7ba:	429d      	cmp	r5, r3
 801d7bc:	d11b      	bne.n	801d7f6 <_vfiprintf_r+0x56>
 801d7be:	6875      	ldr	r5, [r6, #4]
 801d7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7c2:	07d9      	lsls	r1, r3, #31
 801d7c4:	d405      	bmi.n	801d7d2 <_vfiprintf_r+0x32>
 801d7c6:	89ab      	ldrh	r3, [r5, #12]
 801d7c8:	059a      	lsls	r2, r3, #22
 801d7ca:	d402      	bmi.n	801d7d2 <_vfiprintf_r+0x32>
 801d7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d7ce:	f000 fb97 	bl	801df00 <__retarget_lock_acquire_recursive>
 801d7d2:	89ab      	ldrh	r3, [r5, #12]
 801d7d4:	071b      	lsls	r3, r3, #28
 801d7d6:	d501      	bpl.n	801d7dc <_vfiprintf_r+0x3c>
 801d7d8:	692b      	ldr	r3, [r5, #16]
 801d7da:	b9eb      	cbnz	r3, 801d818 <_vfiprintf_r+0x78>
 801d7dc:	4629      	mov	r1, r5
 801d7de:	4630      	mov	r0, r6
 801d7e0:	f000 f960 	bl	801daa4 <__swsetup_r>
 801d7e4:	b1c0      	cbz	r0, 801d818 <_vfiprintf_r+0x78>
 801d7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7e8:	07dc      	lsls	r4, r3, #31
 801d7ea:	d50e      	bpl.n	801d80a <_vfiprintf_r+0x6a>
 801d7ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d7f0:	b01d      	add	sp, #116	; 0x74
 801d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7f6:	4b7b      	ldr	r3, [pc, #492]	; (801d9e4 <_vfiprintf_r+0x244>)
 801d7f8:	429d      	cmp	r5, r3
 801d7fa:	d101      	bne.n	801d800 <_vfiprintf_r+0x60>
 801d7fc:	68b5      	ldr	r5, [r6, #8]
 801d7fe:	e7df      	b.n	801d7c0 <_vfiprintf_r+0x20>
 801d800:	4b79      	ldr	r3, [pc, #484]	; (801d9e8 <_vfiprintf_r+0x248>)
 801d802:	429d      	cmp	r5, r3
 801d804:	bf08      	it	eq
 801d806:	68f5      	ldreq	r5, [r6, #12]
 801d808:	e7da      	b.n	801d7c0 <_vfiprintf_r+0x20>
 801d80a:	89ab      	ldrh	r3, [r5, #12]
 801d80c:	0598      	lsls	r0, r3, #22
 801d80e:	d4ed      	bmi.n	801d7ec <_vfiprintf_r+0x4c>
 801d810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d812:	f000 fb76 	bl	801df02 <__retarget_lock_release_recursive>
 801d816:	e7e9      	b.n	801d7ec <_vfiprintf_r+0x4c>
 801d818:	2300      	movs	r3, #0
 801d81a:	9309      	str	r3, [sp, #36]	; 0x24
 801d81c:	2320      	movs	r3, #32
 801d81e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d822:	f8cd 800c 	str.w	r8, [sp, #12]
 801d826:	2330      	movs	r3, #48	; 0x30
 801d828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d9ec <_vfiprintf_r+0x24c>
 801d82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d830:	f04f 0901 	mov.w	r9, #1
 801d834:	4623      	mov	r3, r4
 801d836:	469a      	mov	sl, r3
 801d838:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d83c:	b10a      	cbz	r2, 801d842 <_vfiprintf_r+0xa2>
 801d83e:	2a25      	cmp	r2, #37	; 0x25
 801d840:	d1f9      	bne.n	801d836 <_vfiprintf_r+0x96>
 801d842:	ebba 0b04 	subs.w	fp, sl, r4
 801d846:	d00b      	beq.n	801d860 <_vfiprintf_r+0xc0>
 801d848:	465b      	mov	r3, fp
 801d84a:	4622      	mov	r2, r4
 801d84c:	4629      	mov	r1, r5
 801d84e:	4630      	mov	r0, r6
 801d850:	f7ff ff94 	bl	801d77c <__sfputs_r>
 801d854:	3001      	adds	r0, #1
 801d856:	f000 80aa 	beq.w	801d9ae <_vfiprintf_r+0x20e>
 801d85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d85c:	445a      	add	r2, fp
 801d85e:	9209      	str	r2, [sp, #36]	; 0x24
 801d860:	f89a 3000 	ldrb.w	r3, [sl]
 801d864:	2b00      	cmp	r3, #0
 801d866:	f000 80a2 	beq.w	801d9ae <_vfiprintf_r+0x20e>
 801d86a:	2300      	movs	r3, #0
 801d86c:	f04f 32ff 	mov.w	r2, #4294967295
 801d870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d874:	f10a 0a01 	add.w	sl, sl, #1
 801d878:	9304      	str	r3, [sp, #16]
 801d87a:	9307      	str	r3, [sp, #28]
 801d87c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d880:	931a      	str	r3, [sp, #104]	; 0x68
 801d882:	4654      	mov	r4, sl
 801d884:	2205      	movs	r2, #5
 801d886:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d88a:	4858      	ldr	r0, [pc, #352]	; (801d9ec <_vfiprintf_r+0x24c>)
 801d88c:	f7fb f8b0 	bl	80189f0 <memchr>
 801d890:	9a04      	ldr	r2, [sp, #16]
 801d892:	b9d8      	cbnz	r0, 801d8cc <_vfiprintf_r+0x12c>
 801d894:	06d1      	lsls	r1, r2, #27
 801d896:	bf44      	itt	mi
 801d898:	2320      	movmi	r3, #32
 801d89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d89e:	0713      	lsls	r3, r2, #28
 801d8a0:	bf44      	itt	mi
 801d8a2:	232b      	movmi	r3, #43	; 0x2b
 801d8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d8a8:	f89a 3000 	ldrb.w	r3, [sl]
 801d8ac:	2b2a      	cmp	r3, #42	; 0x2a
 801d8ae:	d015      	beq.n	801d8dc <_vfiprintf_r+0x13c>
 801d8b0:	9a07      	ldr	r2, [sp, #28]
 801d8b2:	4654      	mov	r4, sl
 801d8b4:	2000      	movs	r0, #0
 801d8b6:	f04f 0c0a 	mov.w	ip, #10
 801d8ba:	4621      	mov	r1, r4
 801d8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8c0:	3b30      	subs	r3, #48	; 0x30
 801d8c2:	2b09      	cmp	r3, #9
 801d8c4:	d94e      	bls.n	801d964 <_vfiprintf_r+0x1c4>
 801d8c6:	b1b0      	cbz	r0, 801d8f6 <_vfiprintf_r+0x156>
 801d8c8:	9207      	str	r2, [sp, #28]
 801d8ca:	e014      	b.n	801d8f6 <_vfiprintf_r+0x156>
 801d8cc:	eba0 0308 	sub.w	r3, r0, r8
 801d8d0:	fa09 f303 	lsl.w	r3, r9, r3
 801d8d4:	4313      	orrs	r3, r2
 801d8d6:	9304      	str	r3, [sp, #16]
 801d8d8:	46a2      	mov	sl, r4
 801d8da:	e7d2      	b.n	801d882 <_vfiprintf_r+0xe2>
 801d8dc:	9b03      	ldr	r3, [sp, #12]
 801d8de:	1d19      	adds	r1, r3, #4
 801d8e0:	681b      	ldr	r3, [r3, #0]
 801d8e2:	9103      	str	r1, [sp, #12]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	bfbb      	ittet	lt
 801d8e8:	425b      	neglt	r3, r3
 801d8ea:	f042 0202 	orrlt.w	r2, r2, #2
 801d8ee:	9307      	strge	r3, [sp, #28]
 801d8f0:	9307      	strlt	r3, [sp, #28]
 801d8f2:	bfb8      	it	lt
 801d8f4:	9204      	strlt	r2, [sp, #16]
 801d8f6:	7823      	ldrb	r3, [r4, #0]
 801d8f8:	2b2e      	cmp	r3, #46	; 0x2e
 801d8fa:	d10c      	bne.n	801d916 <_vfiprintf_r+0x176>
 801d8fc:	7863      	ldrb	r3, [r4, #1]
 801d8fe:	2b2a      	cmp	r3, #42	; 0x2a
 801d900:	d135      	bne.n	801d96e <_vfiprintf_r+0x1ce>
 801d902:	9b03      	ldr	r3, [sp, #12]
 801d904:	1d1a      	adds	r2, r3, #4
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	9203      	str	r2, [sp, #12]
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	bfb8      	it	lt
 801d90e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d912:	3402      	adds	r4, #2
 801d914:	9305      	str	r3, [sp, #20]
 801d916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d9fc <_vfiprintf_r+0x25c>
 801d91a:	7821      	ldrb	r1, [r4, #0]
 801d91c:	2203      	movs	r2, #3
 801d91e:	4650      	mov	r0, sl
 801d920:	f7fb f866 	bl	80189f0 <memchr>
 801d924:	b140      	cbz	r0, 801d938 <_vfiprintf_r+0x198>
 801d926:	2340      	movs	r3, #64	; 0x40
 801d928:	eba0 000a 	sub.w	r0, r0, sl
 801d92c:	fa03 f000 	lsl.w	r0, r3, r0
 801d930:	9b04      	ldr	r3, [sp, #16]
 801d932:	4303      	orrs	r3, r0
 801d934:	3401      	adds	r4, #1
 801d936:	9304      	str	r3, [sp, #16]
 801d938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d93c:	482c      	ldr	r0, [pc, #176]	; (801d9f0 <_vfiprintf_r+0x250>)
 801d93e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d942:	2206      	movs	r2, #6
 801d944:	f7fb f854 	bl	80189f0 <memchr>
 801d948:	2800      	cmp	r0, #0
 801d94a:	d03f      	beq.n	801d9cc <_vfiprintf_r+0x22c>
 801d94c:	4b29      	ldr	r3, [pc, #164]	; (801d9f4 <_vfiprintf_r+0x254>)
 801d94e:	bb1b      	cbnz	r3, 801d998 <_vfiprintf_r+0x1f8>
 801d950:	9b03      	ldr	r3, [sp, #12]
 801d952:	3307      	adds	r3, #7
 801d954:	f023 0307 	bic.w	r3, r3, #7
 801d958:	3308      	adds	r3, #8
 801d95a:	9303      	str	r3, [sp, #12]
 801d95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d95e:	443b      	add	r3, r7
 801d960:	9309      	str	r3, [sp, #36]	; 0x24
 801d962:	e767      	b.n	801d834 <_vfiprintf_r+0x94>
 801d964:	fb0c 3202 	mla	r2, ip, r2, r3
 801d968:	460c      	mov	r4, r1
 801d96a:	2001      	movs	r0, #1
 801d96c:	e7a5      	b.n	801d8ba <_vfiprintf_r+0x11a>
 801d96e:	2300      	movs	r3, #0
 801d970:	3401      	adds	r4, #1
 801d972:	9305      	str	r3, [sp, #20]
 801d974:	4619      	mov	r1, r3
 801d976:	f04f 0c0a 	mov.w	ip, #10
 801d97a:	4620      	mov	r0, r4
 801d97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d980:	3a30      	subs	r2, #48	; 0x30
 801d982:	2a09      	cmp	r2, #9
 801d984:	d903      	bls.n	801d98e <_vfiprintf_r+0x1ee>
 801d986:	2b00      	cmp	r3, #0
 801d988:	d0c5      	beq.n	801d916 <_vfiprintf_r+0x176>
 801d98a:	9105      	str	r1, [sp, #20]
 801d98c:	e7c3      	b.n	801d916 <_vfiprintf_r+0x176>
 801d98e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d992:	4604      	mov	r4, r0
 801d994:	2301      	movs	r3, #1
 801d996:	e7f0      	b.n	801d97a <_vfiprintf_r+0x1da>
 801d998:	ab03      	add	r3, sp, #12
 801d99a:	9300      	str	r3, [sp, #0]
 801d99c:	462a      	mov	r2, r5
 801d99e:	4b16      	ldr	r3, [pc, #88]	; (801d9f8 <_vfiprintf_r+0x258>)
 801d9a0:	a904      	add	r1, sp, #16
 801d9a2:	4630      	mov	r0, r6
 801d9a4:	f7fc f830 	bl	8019a08 <_printf_float>
 801d9a8:	4607      	mov	r7, r0
 801d9aa:	1c78      	adds	r0, r7, #1
 801d9ac:	d1d6      	bne.n	801d95c <_vfiprintf_r+0x1bc>
 801d9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d9b0:	07d9      	lsls	r1, r3, #31
 801d9b2:	d405      	bmi.n	801d9c0 <_vfiprintf_r+0x220>
 801d9b4:	89ab      	ldrh	r3, [r5, #12]
 801d9b6:	059a      	lsls	r2, r3, #22
 801d9b8:	d402      	bmi.n	801d9c0 <_vfiprintf_r+0x220>
 801d9ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d9bc:	f000 faa1 	bl	801df02 <__retarget_lock_release_recursive>
 801d9c0:	89ab      	ldrh	r3, [r5, #12]
 801d9c2:	065b      	lsls	r3, r3, #25
 801d9c4:	f53f af12 	bmi.w	801d7ec <_vfiprintf_r+0x4c>
 801d9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9ca:	e711      	b.n	801d7f0 <_vfiprintf_r+0x50>
 801d9cc:	ab03      	add	r3, sp, #12
 801d9ce:	9300      	str	r3, [sp, #0]
 801d9d0:	462a      	mov	r2, r5
 801d9d2:	4b09      	ldr	r3, [pc, #36]	; (801d9f8 <_vfiprintf_r+0x258>)
 801d9d4:	a904      	add	r1, sp, #16
 801d9d6:	4630      	mov	r0, r6
 801d9d8:	f7fc faba 	bl	8019f50 <_printf_i>
 801d9dc:	e7e4      	b.n	801d9a8 <_vfiprintf_r+0x208>
 801d9de:	bf00      	nop
 801d9e0:	08052624 	.word	0x08052624
 801d9e4:	08052644 	.word	0x08052644
 801d9e8:	08052604 	.word	0x08052604
 801d9ec:	080525b4 	.word	0x080525b4
 801d9f0:	080525be 	.word	0x080525be
 801d9f4:	08019a09 	.word	0x08019a09
 801d9f8:	0801d77d 	.word	0x0801d77d
 801d9fc:	080525ba 	.word	0x080525ba

0801da00 <__swbuf_r>:
 801da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da02:	460e      	mov	r6, r1
 801da04:	4614      	mov	r4, r2
 801da06:	4605      	mov	r5, r0
 801da08:	b118      	cbz	r0, 801da12 <__swbuf_r+0x12>
 801da0a:	6983      	ldr	r3, [r0, #24]
 801da0c:	b90b      	cbnz	r3, 801da12 <__swbuf_r+0x12>
 801da0e:	f000 f9d9 	bl	801ddc4 <__sinit>
 801da12:	4b21      	ldr	r3, [pc, #132]	; (801da98 <__swbuf_r+0x98>)
 801da14:	429c      	cmp	r4, r3
 801da16:	d12b      	bne.n	801da70 <__swbuf_r+0x70>
 801da18:	686c      	ldr	r4, [r5, #4]
 801da1a:	69a3      	ldr	r3, [r4, #24]
 801da1c:	60a3      	str	r3, [r4, #8]
 801da1e:	89a3      	ldrh	r3, [r4, #12]
 801da20:	071a      	lsls	r2, r3, #28
 801da22:	d52f      	bpl.n	801da84 <__swbuf_r+0x84>
 801da24:	6923      	ldr	r3, [r4, #16]
 801da26:	b36b      	cbz	r3, 801da84 <__swbuf_r+0x84>
 801da28:	6923      	ldr	r3, [r4, #16]
 801da2a:	6820      	ldr	r0, [r4, #0]
 801da2c:	1ac0      	subs	r0, r0, r3
 801da2e:	6963      	ldr	r3, [r4, #20]
 801da30:	b2f6      	uxtb	r6, r6
 801da32:	4283      	cmp	r3, r0
 801da34:	4637      	mov	r7, r6
 801da36:	dc04      	bgt.n	801da42 <__swbuf_r+0x42>
 801da38:	4621      	mov	r1, r4
 801da3a:	4628      	mov	r0, r5
 801da3c:	f000 f92e 	bl	801dc9c <_fflush_r>
 801da40:	bb30      	cbnz	r0, 801da90 <__swbuf_r+0x90>
 801da42:	68a3      	ldr	r3, [r4, #8]
 801da44:	3b01      	subs	r3, #1
 801da46:	60a3      	str	r3, [r4, #8]
 801da48:	6823      	ldr	r3, [r4, #0]
 801da4a:	1c5a      	adds	r2, r3, #1
 801da4c:	6022      	str	r2, [r4, #0]
 801da4e:	701e      	strb	r6, [r3, #0]
 801da50:	6963      	ldr	r3, [r4, #20]
 801da52:	3001      	adds	r0, #1
 801da54:	4283      	cmp	r3, r0
 801da56:	d004      	beq.n	801da62 <__swbuf_r+0x62>
 801da58:	89a3      	ldrh	r3, [r4, #12]
 801da5a:	07db      	lsls	r3, r3, #31
 801da5c:	d506      	bpl.n	801da6c <__swbuf_r+0x6c>
 801da5e:	2e0a      	cmp	r6, #10
 801da60:	d104      	bne.n	801da6c <__swbuf_r+0x6c>
 801da62:	4621      	mov	r1, r4
 801da64:	4628      	mov	r0, r5
 801da66:	f000 f919 	bl	801dc9c <_fflush_r>
 801da6a:	b988      	cbnz	r0, 801da90 <__swbuf_r+0x90>
 801da6c:	4638      	mov	r0, r7
 801da6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da70:	4b0a      	ldr	r3, [pc, #40]	; (801da9c <__swbuf_r+0x9c>)
 801da72:	429c      	cmp	r4, r3
 801da74:	d101      	bne.n	801da7a <__swbuf_r+0x7a>
 801da76:	68ac      	ldr	r4, [r5, #8]
 801da78:	e7cf      	b.n	801da1a <__swbuf_r+0x1a>
 801da7a:	4b09      	ldr	r3, [pc, #36]	; (801daa0 <__swbuf_r+0xa0>)
 801da7c:	429c      	cmp	r4, r3
 801da7e:	bf08      	it	eq
 801da80:	68ec      	ldreq	r4, [r5, #12]
 801da82:	e7ca      	b.n	801da1a <__swbuf_r+0x1a>
 801da84:	4621      	mov	r1, r4
 801da86:	4628      	mov	r0, r5
 801da88:	f000 f80c 	bl	801daa4 <__swsetup_r>
 801da8c:	2800      	cmp	r0, #0
 801da8e:	d0cb      	beq.n	801da28 <__swbuf_r+0x28>
 801da90:	f04f 37ff 	mov.w	r7, #4294967295
 801da94:	e7ea      	b.n	801da6c <__swbuf_r+0x6c>
 801da96:	bf00      	nop
 801da98:	08052624 	.word	0x08052624
 801da9c:	08052644 	.word	0x08052644
 801daa0:	08052604 	.word	0x08052604

0801daa4 <__swsetup_r>:
 801daa4:	4b32      	ldr	r3, [pc, #200]	; (801db70 <__swsetup_r+0xcc>)
 801daa6:	b570      	push	{r4, r5, r6, lr}
 801daa8:	681d      	ldr	r5, [r3, #0]
 801daaa:	4606      	mov	r6, r0
 801daac:	460c      	mov	r4, r1
 801daae:	b125      	cbz	r5, 801daba <__swsetup_r+0x16>
 801dab0:	69ab      	ldr	r3, [r5, #24]
 801dab2:	b913      	cbnz	r3, 801daba <__swsetup_r+0x16>
 801dab4:	4628      	mov	r0, r5
 801dab6:	f000 f985 	bl	801ddc4 <__sinit>
 801daba:	4b2e      	ldr	r3, [pc, #184]	; (801db74 <__swsetup_r+0xd0>)
 801dabc:	429c      	cmp	r4, r3
 801dabe:	d10f      	bne.n	801dae0 <__swsetup_r+0x3c>
 801dac0:	686c      	ldr	r4, [r5, #4]
 801dac2:	89a3      	ldrh	r3, [r4, #12]
 801dac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dac8:	0719      	lsls	r1, r3, #28
 801daca:	d42c      	bmi.n	801db26 <__swsetup_r+0x82>
 801dacc:	06dd      	lsls	r5, r3, #27
 801dace:	d411      	bmi.n	801daf4 <__swsetup_r+0x50>
 801dad0:	2309      	movs	r3, #9
 801dad2:	6033      	str	r3, [r6, #0]
 801dad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dad8:	81a3      	strh	r3, [r4, #12]
 801dada:	f04f 30ff 	mov.w	r0, #4294967295
 801dade:	e03e      	b.n	801db5e <__swsetup_r+0xba>
 801dae0:	4b25      	ldr	r3, [pc, #148]	; (801db78 <__swsetup_r+0xd4>)
 801dae2:	429c      	cmp	r4, r3
 801dae4:	d101      	bne.n	801daea <__swsetup_r+0x46>
 801dae6:	68ac      	ldr	r4, [r5, #8]
 801dae8:	e7eb      	b.n	801dac2 <__swsetup_r+0x1e>
 801daea:	4b24      	ldr	r3, [pc, #144]	; (801db7c <__swsetup_r+0xd8>)
 801daec:	429c      	cmp	r4, r3
 801daee:	bf08      	it	eq
 801daf0:	68ec      	ldreq	r4, [r5, #12]
 801daf2:	e7e6      	b.n	801dac2 <__swsetup_r+0x1e>
 801daf4:	0758      	lsls	r0, r3, #29
 801daf6:	d512      	bpl.n	801db1e <__swsetup_r+0x7a>
 801daf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dafa:	b141      	cbz	r1, 801db0e <__swsetup_r+0x6a>
 801dafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db00:	4299      	cmp	r1, r3
 801db02:	d002      	beq.n	801db0a <__swsetup_r+0x66>
 801db04:	4630      	mov	r0, r6
 801db06:	f7ff fb25 	bl	801d154 <_free_r>
 801db0a:	2300      	movs	r3, #0
 801db0c:	6363      	str	r3, [r4, #52]	; 0x34
 801db0e:	89a3      	ldrh	r3, [r4, #12]
 801db10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801db14:	81a3      	strh	r3, [r4, #12]
 801db16:	2300      	movs	r3, #0
 801db18:	6063      	str	r3, [r4, #4]
 801db1a:	6923      	ldr	r3, [r4, #16]
 801db1c:	6023      	str	r3, [r4, #0]
 801db1e:	89a3      	ldrh	r3, [r4, #12]
 801db20:	f043 0308 	orr.w	r3, r3, #8
 801db24:	81a3      	strh	r3, [r4, #12]
 801db26:	6923      	ldr	r3, [r4, #16]
 801db28:	b94b      	cbnz	r3, 801db3e <__swsetup_r+0x9a>
 801db2a:	89a3      	ldrh	r3, [r4, #12]
 801db2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801db30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801db34:	d003      	beq.n	801db3e <__swsetup_r+0x9a>
 801db36:	4621      	mov	r1, r4
 801db38:	4630      	mov	r0, r6
 801db3a:	f000 fa09 	bl	801df50 <__smakebuf_r>
 801db3e:	89a0      	ldrh	r0, [r4, #12]
 801db40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db44:	f010 0301 	ands.w	r3, r0, #1
 801db48:	d00a      	beq.n	801db60 <__swsetup_r+0xbc>
 801db4a:	2300      	movs	r3, #0
 801db4c:	60a3      	str	r3, [r4, #8]
 801db4e:	6963      	ldr	r3, [r4, #20]
 801db50:	425b      	negs	r3, r3
 801db52:	61a3      	str	r3, [r4, #24]
 801db54:	6923      	ldr	r3, [r4, #16]
 801db56:	b943      	cbnz	r3, 801db6a <__swsetup_r+0xc6>
 801db58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801db5c:	d1ba      	bne.n	801dad4 <__swsetup_r+0x30>
 801db5e:	bd70      	pop	{r4, r5, r6, pc}
 801db60:	0781      	lsls	r1, r0, #30
 801db62:	bf58      	it	pl
 801db64:	6963      	ldrpl	r3, [r4, #20]
 801db66:	60a3      	str	r3, [r4, #8]
 801db68:	e7f4      	b.n	801db54 <__swsetup_r+0xb0>
 801db6a:	2000      	movs	r0, #0
 801db6c:	e7f7      	b.n	801db5e <__swsetup_r+0xba>
 801db6e:	bf00      	nop
 801db70:	20000064 	.word	0x20000064
 801db74:	08052624 	.word	0x08052624
 801db78:	08052644 	.word	0x08052644
 801db7c:	08052604 	.word	0x08052604

0801db80 <abort>:
 801db80:	b508      	push	{r3, lr}
 801db82:	2006      	movs	r0, #6
 801db84:	f000 fa54 	bl	801e030 <raise>
 801db88:	2001      	movs	r0, #1
 801db8a:	f7e8 fa46 	bl	800601a <_exit>
	...

0801db90 <__sflush_r>:
 801db90:	898a      	ldrh	r2, [r1, #12]
 801db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db96:	4605      	mov	r5, r0
 801db98:	0710      	lsls	r0, r2, #28
 801db9a:	460c      	mov	r4, r1
 801db9c:	d458      	bmi.n	801dc50 <__sflush_r+0xc0>
 801db9e:	684b      	ldr	r3, [r1, #4]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	dc05      	bgt.n	801dbb0 <__sflush_r+0x20>
 801dba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	dc02      	bgt.n	801dbb0 <__sflush_r+0x20>
 801dbaa:	2000      	movs	r0, #0
 801dbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbb2:	2e00      	cmp	r6, #0
 801dbb4:	d0f9      	beq.n	801dbaa <__sflush_r+0x1a>
 801dbb6:	2300      	movs	r3, #0
 801dbb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbbc:	682f      	ldr	r7, [r5, #0]
 801dbbe:	602b      	str	r3, [r5, #0]
 801dbc0:	d032      	beq.n	801dc28 <__sflush_r+0x98>
 801dbc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dbc4:	89a3      	ldrh	r3, [r4, #12]
 801dbc6:	075a      	lsls	r2, r3, #29
 801dbc8:	d505      	bpl.n	801dbd6 <__sflush_r+0x46>
 801dbca:	6863      	ldr	r3, [r4, #4]
 801dbcc:	1ac0      	subs	r0, r0, r3
 801dbce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dbd0:	b10b      	cbz	r3, 801dbd6 <__sflush_r+0x46>
 801dbd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dbd4:	1ac0      	subs	r0, r0, r3
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	4602      	mov	r2, r0
 801dbda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbdc:	6a21      	ldr	r1, [r4, #32]
 801dbde:	4628      	mov	r0, r5
 801dbe0:	47b0      	blx	r6
 801dbe2:	1c43      	adds	r3, r0, #1
 801dbe4:	89a3      	ldrh	r3, [r4, #12]
 801dbe6:	d106      	bne.n	801dbf6 <__sflush_r+0x66>
 801dbe8:	6829      	ldr	r1, [r5, #0]
 801dbea:	291d      	cmp	r1, #29
 801dbec:	d82c      	bhi.n	801dc48 <__sflush_r+0xb8>
 801dbee:	4a2a      	ldr	r2, [pc, #168]	; (801dc98 <__sflush_r+0x108>)
 801dbf0:	40ca      	lsrs	r2, r1
 801dbf2:	07d6      	lsls	r6, r2, #31
 801dbf4:	d528      	bpl.n	801dc48 <__sflush_r+0xb8>
 801dbf6:	2200      	movs	r2, #0
 801dbf8:	6062      	str	r2, [r4, #4]
 801dbfa:	04d9      	lsls	r1, r3, #19
 801dbfc:	6922      	ldr	r2, [r4, #16]
 801dbfe:	6022      	str	r2, [r4, #0]
 801dc00:	d504      	bpl.n	801dc0c <__sflush_r+0x7c>
 801dc02:	1c42      	adds	r2, r0, #1
 801dc04:	d101      	bne.n	801dc0a <__sflush_r+0x7a>
 801dc06:	682b      	ldr	r3, [r5, #0]
 801dc08:	b903      	cbnz	r3, 801dc0c <__sflush_r+0x7c>
 801dc0a:	6560      	str	r0, [r4, #84]	; 0x54
 801dc0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc0e:	602f      	str	r7, [r5, #0]
 801dc10:	2900      	cmp	r1, #0
 801dc12:	d0ca      	beq.n	801dbaa <__sflush_r+0x1a>
 801dc14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc18:	4299      	cmp	r1, r3
 801dc1a:	d002      	beq.n	801dc22 <__sflush_r+0x92>
 801dc1c:	4628      	mov	r0, r5
 801dc1e:	f7ff fa99 	bl	801d154 <_free_r>
 801dc22:	2000      	movs	r0, #0
 801dc24:	6360      	str	r0, [r4, #52]	; 0x34
 801dc26:	e7c1      	b.n	801dbac <__sflush_r+0x1c>
 801dc28:	6a21      	ldr	r1, [r4, #32]
 801dc2a:	2301      	movs	r3, #1
 801dc2c:	4628      	mov	r0, r5
 801dc2e:	47b0      	blx	r6
 801dc30:	1c41      	adds	r1, r0, #1
 801dc32:	d1c7      	bne.n	801dbc4 <__sflush_r+0x34>
 801dc34:	682b      	ldr	r3, [r5, #0]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d0c4      	beq.n	801dbc4 <__sflush_r+0x34>
 801dc3a:	2b1d      	cmp	r3, #29
 801dc3c:	d001      	beq.n	801dc42 <__sflush_r+0xb2>
 801dc3e:	2b16      	cmp	r3, #22
 801dc40:	d101      	bne.n	801dc46 <__sflush_r+0xb6>
 801dc42:	602f      	str	r7, [r5, #0]
 801dc44:	e7b1      	b.n	801dbaa <__sflush_r+0x1a>
 801dc46:	89a3      	ldrh	r3, [r4, #12]
 801dc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc4c:	81a3      	strh	r3, [r4, #12]
 801dc4e:	e7ad      	b.n	801dbac <__sflush_r+0x1c>
 801dc50:	690f      	ldr	r7, [r1, #16]
 801dc52:	2f00      	cmp	r7, #0
 801dc54:	d0a9      	beq.n	801dbaa <__sflush_r+0x1a>
 801dc56:	0793      	lsls	r3, r2, #30
 801dc58:	680e      	ldr	r6, [r1, #0]
 801dc5a:	bf08      	it	eq
 801dc5c:	694b      	ldreq	r3, [r1, #20]
 801dc5e:	600f      	str	r7, [r1, #0]
 801dc60:	bf18      	it	ne
 801dc62:	2300      	movne	r3, #0
 801dc64:	eba6 0807 	sub.w	r8, r6, r7
 801dc68:	608b      	str	r3, [r1, #8]
 801dc6a:	f1b8 0f00 	cmp.w	r8, #0
 801dc6e:	dd9c      	ble.n	801dbaa <__sflush_r+0x1a>
 801dc70:	6a21      	ldr	r1, [r4, #32]
 801dc72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dc74:	4643      	mov	r3, r8
 801dc76:	463a      	mov	r2, r7
 801dc78:	4628      	mov	r0, r5
 801dc7a:	47b0      	blx	r6
 801dc7c:	2800      	cmp	r0, #0
 801dc7e:	dc06      	bgt.n	801dc8e <__sflush_r+0xfe>
 801dc80:	89a3      	ldrh	r3, [r4, #12]
 801dc82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc86:	81a3      	strh	r3, [r4, #12]
 801dc88:	f04f 30ff 	mov.w	r0, #4294967295
 801dc8c:	e78e      	b.n	801dbac <__sflush_r+0x1c>
 801dc8e:	4407      	add	r7, r0
 801dc90:	eba8 0800 	sub.w	r8, r8, r0
 801dc94:	e7e9      	b.n	801dc6a <__sflush_r+0xda>
 801dc96:	bf00      	nop
 801dc98:	20400001 	.word	0x20400001

0801dc9c <_fflush_r>:
 801dc9c:	b538      	push	{r3, r4, r5, lr}
 801dc9e:	690b      	ldr	r3, [r1, #16]
 801dca0:	4605      	mov	r5, r0
 801dca2:	460c      	mov	r4, r1
 801dca4:	b913      	cbnz	r3, 801dcac <_fflush_r+0x10>
 801dca6:	2500      	movs	r5, #0
 801dca8:	4628      	mov	r0, r5
 801dcaa:	bd38      	pop	{r3, r4, r5, pc}
 801dcac:	b118      	cbz	r0, 801dcb6 <_fflush_r+0x1a>
 801dcae:	6983      	ldr	r3, [r0, #24]
 801dcb0:	b90b      	cbnz	r3, 801dcb6 <_fflush_r+0x1a>
 801dcb2:	f000 f887 	bl	801ddc4 <__sinit>
 801dcb6:	4b14      	ldr	r3, [pc, #80]	; (801dd08 <_fflush_r+0x6c>)
 801dcb8:	429c      	cmp	r4, r3
 801dcba:	d11b      	bne.n	801dcf4 <_fflush_r+0x58>
 801dcbc:	686c      	ldr	r4, [r5, #4]
 801dcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d0ef      	beq.n	801dca6 <_fflush_r+0xa>
 801dcc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dcc8:	07d0      	lsls	r0, r2, #31
 801dcca:	d404      	bmi.n	801dcd6 <_fflush_r+0x3a>
 801dccc:	0599      	lsls	r1, r3, #22
 801dcce:	d402      	bmi.n	801dcd6 <_fflush_r+0x3a>
 801dcd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcd2:	f000 f915 	bl	801df00 <__retarget_lock_acquire_recursive>
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	4621      	mov	r1, r4
 801dcda:	f7ff ff59 	bl	801db90 <__sflush_r>
 801dcde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dce0:	07da      	lsls	r2, r3, #31
 801dce2:	4605      	mov	r5, r0
 801dce4:	d4e0      	bmi.n	801dca8 <_fflush_r+0xc>
 801dce6:	89a3      	ldrh	r3, [r4, #12]
 801dce8:	059b      	lsls	r3, r3, #22
 801dcea:	d4dd      	bmi.n	801dca8 <_fflush_r+0xc>
 801dcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcee:	f000 f908 	bl	801df02 <__retarget_lock_release_recursive>
 801dcf2:	e7d9      	b.n	801dca8 <_fflush_r+0xc>
 801dcf4:	4b05      	ldr	r3, [pc, #20]	; (801dd0c <_fflush_r+0x70>)
 801dcf6:	429c      	cmp	r4, r3
 801dcf8:	d101      	bne.n	801dcfe <_fflush_r+0x62>
 801dcfa:	68ac      	ldr	r4, [r5, #8]
 801dcfc:	e7df      	b.n	801dcbe <_fflush_r+0x22>
 801dcfe:	4b04      	ldr	r3, [pc, #16]	; (801dd10 <_fflush_r+0x74>)
 801dd00:	429c      	cmp	r4, r3
 801dd02:	bf08      	it	eq
 801dd04:	68ec      	ldreq	r4, [r5, #12]
 801dd06:	e7da      	b.n	801dcbe <_fflush_r+0x22>
 801dd08:	08052624 	.word	0x08052624
 801dd0c:	08052644 	.word	0x08052644
 801dd10:	08052604 	.word	0x08052604

0801dd14 <std>:
 801dd14:	2300      	movs	r3, #0
 801dd16:	b510      	push	{r4, lr}
 801dd18:	4604      	mov	r4, r0
 801dd1a:	e9c0 3300 	strd	r3, r3, [r0]
 801dd1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd22:	6083      	str	r3, [r0, #8]
 801dd24:	8181      	strh	r1, [r0, #12]
 801dd26:	6643      	str	r3, [r0, #100]	; 0x64
 801dd28:	81c2      	strh	r2, [r0, #14]
 801dd2a:	6183      	str	r3, [r0, #24]
 801dd2c:	4619      	mov	r1, r3
 801dd2e:	2208      	movs	r2, #8
 801dd30:	305c      	adds	r0, #92	; 0x5c
 801dd32:	f7fb fdc1 	bl	80198b8 <memset>
 801dd36:	4b05      	ldr	r3, [pc, #20]	; (801dd4c <std+0x38>)
 801dd38:	6263      	str	r3, [r4, #36]	; 0x24
 801dd3a:	4b05      	ldr	r3, [pc, #20]	; (801dd50 <std+0x3c>)
 801dd3c:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd3e:	4b05      	ldr	r3, [pc, #20]	; (801dd54 <std+0x40>)
 801dd40:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd42:	4b05      	ldr	r3, [pc, #20]	; (801dd58 <std+0x44>)
 801dd44:	6224      	str	r4, [r4, #32]
 801dd46:	6323      	str	r3, [r4, #48]	; 0x30
 801dd48:	bd10      	pop	{r4, pc}
 801dd4a:	bf00      	nop
 801dd4c:	0801e069 	.word	0x0801e069
 801dd50:	0801e08b 	.word	0x0801e08b
 801dd54:	0801e0c3 	.word	0x0801e0c3
 801dd58:	0801e0e7 	.word	0x0801e0e7

0801dd5c <_cleanup_r>:
 801dd5c:	4901      	ldr	r1, [pc, #4]	; (801dd64 <_cleanup_r+0x8>)
 801dd5e:	f000 b8af 	b.w	801dec0 <_fwalk_reent>
 801dd62:	bf00      	nop
 801dd64:	0801dc9d 	.word	0x0801dc9d

0801dd68 <__sfmoreglue>:
 801dd68:	b570      	push	{r4, r5, r6, lr}
 801dd6a:	2268      	movs	r2, #104	; 0x68
 801dd6c:	1e4d      	subs	r5, r1, #1
 801dd6e:	4355      	muls	r5, r2
 801dd70:	460e      	mov	r6, r1
 801dd72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dd76:	f7ff fa59 	bl	801d22c <_malloc_r>
 801dd7a:	4604      	mov	r4, r0
 801dd7c:	b140      	cbz	r0, 801dd90 <__sfmoreglue+0x28>
 801dd7e:	2100      	movs	r1, #0
 801dd80:	e9c0 1600 	strd	r1, r6, [r0]
 801dd84:	300c      	adds	r0, #12
 801dd86:	60a0      	str	r0, [r4, #8]
 801dd88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dd8c:	f7fb fd94 	bl	80198b8 <memset>
 801dd90:	4620      	mov	r0, r4
 801dd92:	bd70      	pop	{r4, r5, r6, pc}

0801dd94 <__sfp_lock_acquire>:
 801dd94:	4801      	ldr	r0, [pc, #4]	; (801dd9c <__sfp_lock_acquire+0x8>)
 801dd96:	f000 b8b3 	b.w	801df00 <__retarget_lock_acquire_recursive>
 801dd9a:	bf00      	nop
 801dd9c:	20000dc9 	.word	0x20000dc9

0801dda0 <__sfp_lock_release>:
 801dda0:	4801      	ldr	r0, [pc, #4]	; (801dda8 <__sfp_lock_release+0x8>)
 801dda2:	f000 b8ae 	b.w	801df02 <__retarget_lock_release_recursive>
 801dda6:	bf00      	nop
 801dda8:	20000dc9 	.word	0x20000dc9

0801ddac <__sinit_lock_acquire>:
 801ddac:	4801      	ldr	r0, [pc, #4]	; (801ddb4 <__sinit_lock_acquire+0x8>)
 801ddae:	f000 b8a7 	b.w	801df00 <__retarget_lock_acquire_recursive>
 801ddb2:	bf00      	nop
 801ddb4:	20000dca 	.word	0x20000dca

0801ddb8 <__sinit_lock_release>:
 801ddb8:	4801      	ldr	r0, [pc, #4]	; (801ddc0 <__sinit_lock_release+0x8>)
 801ddba:	f000 b8a2 	b.w	801df02 <__retarget_lock_release_recursive>
 801ddbe:	bf00      	nop
 801ddc0:	20000dca 	.word	0x20000dca

0801ddc4 <__sinit>:
 801ddc4:	b510      	push	{r4, lr}
 801ddc6:	4604      	mov	r4, r0
 801ddc8:	f7ff fff0 	bl	801ddac <__sinit_lock_acquire>
 801ddcc:	69a3      	ldr	r3, [r4, #24]
 801ddce:	b11b      	cbz	r3, 801ddd8 <__sinit+0x14>
 801ddd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ddd4:	f7ff bff0 	b.w	801ddb8 <__sinit_lock_release>
 801ddd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dddc:	6523      	str	r3, [r4, #80]	; 0x50
 801ddde:	4b13      	ldr	r3, [pc, #76]	; (801de2c <__sinit+0x68>)
 801dde0:	4a13      	ldr	r2, [pc, #76]	; (801de30 <__sinit+0x6c>)
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	62a2      	str	r2, [r4, #40]	; 0x28
 801dde6:	42a3      	cmp	r3, r4
 801dde8:	bf04      	itt	eq
 801ddea:	2301      	moveq	r3, #1
 801ddec:	61a3      	streq	r3, [r4, #24]
 801ddee:	4620      	mov	r0, r4
 801ddf0:	f000 f820 	bl	801de34 <__sfp>
 801ddf4:	6060      	str	r0, [r4, #4]
 801ddf6:	4620      	mov	r0, r4
 801ddf8:	f000 f81c 	bl	801de34 <__sfp>
 801ddfc:	60a0      	str	r0, [r4, #8]
 801ddfe:	4620      	mov	r0, r4
 801de00:	f000 f818 	bl	801de34 <__sfp>
 801de04:	2200      	movs	r2, #0
 801de06:	60e0      	str	r0, [r4, #12]
 801de08:	2104      	movs	r1, #4
 801de0a:	6860      	ldr	r0, [r4, #4]
 801de0c:	f7ff ff82 	bl	801dd14 <std>
 801de10:	68a0      	ldr	r0, [r4, #8]
 801de12:	2201      	movs	r2, #1
 801de14:	2109      	movs	r1, #9
 801de16:	f7ff ff7d 	bl	801dd14 <std>
 801de1a:	68e0      	ldr	r0, [r4, #12]
 801de1c:	2202      	movs	r2, #2
 801de1e:	2112      	movs	r1, #18
 801de20:	f7ff ff78 	bl	801dd14 <std>
 801de24:	2301      	movs	r3, #1
 801de26:	61a3      	str	r3, [r4, #24]
 801de28:	e7d2      	b.n	801ddd0 <__sinit+0xc>
 801de2a:	bf00      	nop
 801de2c:	080521c0 	.word	0x080521c0
 801de30:	0801dd5d 	.word	0x0801dd5d

0801de34 <__sfp>:
 801de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de36:	4607      	mov	r7, r0
 801de38:	f7ff ffac 	bl	801dd94 <__sfp_lock_acquire>
 801de3c:	4b1e      	ldr	r3, [pc, #120]	; (801deb8 <__sfp+0x84>)
 801de3e:	681e      	ldr	r6, [r3, #0]
 801de40:	69b3      	ldr	r3, [r6, #24]
 801de42:	b913      	cbnz	r3, 801de4a <__sfp+0x16>
 801de44:	4630      	mov	r0, r6
 801de46:	f7ff ffbd 	bl	801ddc4 <__sinit>
 801de4a:	3648      	adds	r6, #72	; 0x48
 801de4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801de50:	3b01      	subs	r3, #1
 801de52:	d503      	bpl.n	801de5c <__sfp+0x28>
 801de54:	6833      	ldr	r3, [r6, #0]
 801de56:	b30b      	cbz	r3, 801de9c <__sfp+0x68>
 801de58:	6836      	ldr	r6, [r6, #0]
 801de5a:	e7f7      	b.n	801de4c <__sfp+0x18>
 801de5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801de60:	b9d5      	cbnz	r5, 801de98 <__sfp+0x64>
 801de62:	4b16      	ldr	r3, [pc, #88]	; (801debc <__sfp+0x88>)
 801de64:	60e3      	str	r3, [r4, #12]
 801de66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801de6a:	6665      	str	r5, [r4, #100]	; 0x64
 801de6c:	f000 f847 	bl	801defe <__retarget_lock_init_recursive>
 801de70:	f7ff ff96 	bl	801dda0 <__sfp_lock_release>
 801de74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801de78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801de7c:	6025      	str	r5, [r4, #0]
 801de7e:	61a5      	str	r5, [r4, #24]
 801de80:	2208      	movs	r2, #8
 801de82:	4629      	mov	r1, r5
 801de84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801de88:	f7fb fd16 	bl	80198b8 <memset>
 801de8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801de90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801de94:	4620      	mov	r0, r4
 801de96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de98:	3468      	adds	r4, #104	; 0x68
 801de9a:	e7d9      	b.n	801de50 <__sfp+0x1c>
 801de9c:	2104      	movs	r1, #4
 801de9e:	4638      	mov	r0, r7
 801dea0:	f7ff ff62 	bl	801dd68 <__sfmoreglue>
 801dea4:	4604      	mov	r4, r0
 801dea6:	6030      	str	r0, [r6, #0]
 801dea8:	2800      	cmp	r0, #0
 801deaa:	d1d5      	bne.n	801de58 <__sfp+0x24>
 801deac:	f7ff ff78 	bl	801dda0 <__sfp_lock_release>
 801deb0:	230c      	movs	r3, #12
 801deb2:	603b      	str	r3, [r7, #0]
 801deb4:	e7ee      	b.n	801de94 <__sfp+0x60>
 801deb6:	bf00      	nop
 801deb8:	080521c0 	.word	0x080521c0
 801debc:	ffff0001 	.word	0xffff0001

0801dec0 <_fwalk_reent>:
 801dec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dec4:	4606      	mov	r6, r0
 801dec6:	4688      	mov	r8, r1
 801dec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801decc:	2700      	movs	r7, #0
 801dece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ded2:	f1b9 0901 	subs.w	r9, r9, #1
 801ded6:	d505      	bpl.n	801dee4 <_fwalk_reent+0x24>
 801ded8:	6824      	ldr	r4, [r4, #0]
 801deda:	2c00      	cmp	r4, #0
 801dedc:	d1f7      	bne.n	801dece <_fwalk_reent+0xe>
 801dede:	4638      	mov	r0, r7
 801dee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dee4:	89ab      	ldrh	r3, [r5, #12]
 801dee6:	2b01      	cmp	r3, #1
 801dee8:	d907      	bls.n	801defa <_fwalk_reent+0x3a>
 801deea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801deee:	3301      	adds	r3, #1
 801def0:	d003      	beq.n	801defa <_fwalk_reent+0x3a>
 801def2:	4629      	mov	r1, r5
 801def4:	4630      	mov	r0, r6
 801def6:	47c0      	blx	r8
 801def8:	4307      	orrs	r7, r0
 801defa:	3568      	adds	r5, #104	; 0x68
 801defc:	e7e9      	b.n	801ded2 <_fwalk_reent+0x12>

0801defe <__retarget_lock_init_recursive>:
 801defe:	4770      	bx	lr

0801df00 <__retarget_lock_acquire_recursive>:
 801df00:	4770      	bx	lr

0801df02 <__retarget_lock_release_recursive>:
 801df02:	4770      	bx	lr

0801df04 <__swhatbuf_r>:
 801df04:	b570      	push	{r4, r5, r6, lr}
 801df06:	460e      	mov	r6, r1
 801df08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df0c:	2900      	cmp	r1, #0
 801df0e:	b096      	sub	sp, #88	; 0x58
 801df10:	4614      	mov	r4, r2
 801df12:	461d      	mov	r5, r3
 801df14:	da08      	bge.n	801df28 <__swhatbuf_r+0x24>
 801df16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801df1a:	2200      	movs	r2, #0
 801df1c:	602a      	str	r2, [r5, #0]
 801df1e:	061a      	lsls	r2, r3, #24
 801df20:	d410      	bmi.n	801df44 <__swhatbuf_r+0x40>
 801df22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801df26:	e00e      	b.n	801df46 <__swhatbuf_r+0x42>
 801df28:	466a      	mov	r2, sp
 801df2a:	f000 f903 	bl	801e134 <_fstat_r>
 801df2e:	2800      	cmp	r0, #0
 801df30:	dbf1      	blt.n	801df16 <__swhatbuf_r+0x12>
 801df32:	9a01      	ldr	r2, [sp, #4]
 801df34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801df38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801df3c:	425a      	negs	r2, r3
 801df3e:	415a      	adcs	r2, r3
 801df40:	602a      	str	r2, [r5, #0]
 801df42:	e7ee      	b.n	801df22 <__swhatbuf_r+0x1e>
 801df44:	2340      	movs	r3, #64	; 0x40
 801df46:	2000      	movs	r0, #0
 801df48:	6023      	str	r3, [r4, #0]
 801df4a:	b016      	add	sp, #88	; 0x58
 801df4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801df50 <__smakebuf_r>:
 801df50:	898b      	ldrh	r3, [r1, #12]
 801df52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801df54:	079d      	lsls	r5, r3, #30
 801df56:	4606      	mov	r6, r0
 801df58:	460c      	mov	r4, r1
 801df5a:	d507      	bpl.n	801df6c <__smakebuf_r+0x1c>
 801df5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801df60:	6023      	str	r3, [r4, #0]
 801df62:	6123      	str	r3, [r4, #16]
 801df64:	2301      	movs	r3, #1
 801df66:	6163      	str	r3, [r4, #20]
 801df68:	b002      	add	sp, #8
 801df6a:	bd70      	pop	{r4, r5, r6, pc}
 801df6c:	ab01      	add	r3, sp, #4
 801df6e:	466a      	mov	r2, sp
 801df70:	f7ff ffc8 	bl	801df04 <__swhatbuf_r>
 801df74:	9900      	ldr	r1, [sp, #0]
 801df76:	4605      	mov	r5, r0
 801df78:	4630      	mov	r0, r6
 801df7a:	f7ff f957 	bl	801d22c <_malloc_r>
 801df7e:	b948      	cbnz	r0, 801df94 <__smakebuf_r+0x44>
 801df80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df84:	059a      	lsls	r2, r3, #22
 801df86:	d4ef      	bmi.n	801df68 <__smakebuf_r+0x18>
 801df88:	f023 0303 	bic.w	r3, r3, #3
 801df8c:	f043 0302 	orr.w	r3, r3, #2
 801df90:	81a3      	strh	r3, [r4, #12]
 801df92:	e7e3      	b.n	801df5c <__smakebuf_r+0xc>
 801df94:	4b0d      	ldr	r3, [pc, #52]	; (801dfcc <__smakebuf_r+0x7c>)
 801df96:	62b3      	str	r3, [r6, #40]	; 0x28
 801df98:	89a3      	ldrh	r3, [r4, #12]
 801df9a:	6020      	str	r0, [r4, #0]
 801df9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfa0:	81a3      	strh	r3, [r4, #12]
 801dfa2:	9b00      	ldr	r3, [sp, #0]
 801dfa4:	6163      	str	r3, [r4, #20]
 801dfa6:	9b01      	ldr	r3, [sp, #4]
 801dfa8:	6120      	str	r0, [r4, #16]
 801dfaa:	b15b      	cbz	r3, 801dfc4 <__smakebuf_r+0x74>
 801dfac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dfb0:	4630      	mov	r0, r6
 801dfb2:	f000 f8d1 	bl	801e158 <_isatty_r>
 801dfb6:	b128      	cbz	r0, 801dfc4 <__smakebuf_r+0x74>
 801dfb8:	89a3      	ldrh	r3, [r4, #12]
 801dfba:	f023 0303 	bic.w	r3, r3, #3
 801dfbe:	f043 0301 	orr.w	r3, r3, #1
 801dfc2:	81a3      	strh	r3, [r4, #12]
 801dfc4:	89a0      	ldrh	r0, [r4, #12]
 801dfc6:	4305      	orrs	r5, r0
 801dfc8:	81a5      	strh	r5, [r4, #12]
 801dfca:	e7cd      	b.n	801df68 <__smakebuf_r+0x18>
 801dfcc:	0801dd5d 	.word	0x0801dd5d

0801dfd0 <_malloc_usable_size_r>:
 801dfd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfd4:	1f18      	subs	r0, r3, #4
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	bfbc      	itt	lt
 801dfda:	580b      	ldrlt	r3, [r1, r0]
 801dfdc:	18c0      	addlt	r0, r0, r3
 801dfde:	4770      	bx	lr

0801dfe0 <_raise_r>:
 801dfe0:	291f      	cmp	r1, #31
 801dfe2:	b538      	push	{r3, r4, r5, lr}
 801dfe4:	4604      	mov	r4, r0
 801dfe6:	460d      	mov	r5, r1
 801dfe8:	d904      	bls.n	801dff4 <_raise_r+0x14>
 801dfea:	2316      	movs	r3, #22
 801dfec:	6003      	str	r3, [r0, #0]
 801dfee:	f04f 30ff 	mov.w	r0, #4294967295
 801dff2:	bd38      	pop	{r3, r4, r5, pc}
 801dff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801dff6:	b112      	cbz	r2, 801dffe <_raise_r+0x1e>
 801dff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dffc:	b94b      	cbnz	r3, 801e012 <_raise_r+0x32>
 801dffe:	4620      	mov	r0, r4
 801e000:	f000 f830 	bl	801e064 <_getpid_r>
 801e004:	462a      	mov	r2, r5
 801e006:	4601      	mov	r1, r0
 801e008:	4620      	mov	r0, r4
 801e00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e00e:	f000 b817 	b.w	801e040 <_kill_r>
 801e012:	2b01      	cmp	r3, #1
 801e014:	d00a      	beq.n	801e02c <_raise_r+0x4c>
 801e016:	1c59      	adds	r1, r3, #1
 801e018:	d103      	bne.n	801e022 <_raise_r+0x42>
 801e01a:	2316      	movs	r3, #22
 801e01c:	6003      	str	r3, [r0, #0]
 801e01e:	2001      	movs	r0, #1
 801e020:	e7e7      	b.n	801dff2 <_raise_r+0x12>
 801e022:	2400      	movs	r4, #0
 801e024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e028:	4628      	mov	r0, r5
 801e02a:	4798      	blx	r3
 801e02c:	2000      	movs	r0, #0
 801e02e:	e7e0      	b.n	801dff2 <_raise_r+0x12>

0801e030 <raise>:
 801e030:	4b02      	ldr	r3, [pc, #8]	; (801e03c <raise+0xc>)
 801e032:	4601      	mov	r1, r0
 801e034:	6818      	ldr	r0, [r3, #0]
 801e036:	f7ff bfd3 	b.w	801dfe0 <_raise_r>
 801e03a:	bf00      	nop
 801e03c:	20000064 	.word	0x20000064

0801e040 <_kill_r>:
 801e040:	b538      	push	{r3, r4, r5, lr}
 801e042:	4d07      	ldr	r5, [pc, #28]	; (801e060 <_kill_r+0x20>)
 801e044:	2300      	movs	r3, #0
 801e046:	4604      	mov	r4, r0
 801e048:	4608      	mov	r0, r1
 801e04a:	4611      	mov	r1, r2
 801e04c:	602b      	str	r3, [r5, #0]
 801e04e:	f7e7 ffd4 	bl	8005ffa <_kill>
 801e052:	1c43      	adds	r3, r0, #1
 801e054:	d102      	bne.n	801e05c <_kill_r+0x1c>
 801e056:	682b      	ldr	r3, [r5, #0]
 801e058:	b103      	cbz	r3, 801e05c <_kill_r+0x1c>
 801e05a:	6023      	str	r3, [r4, #0]
 801e05c:	bd38      	pop	{r3, r4, r5, pc}
 801e05e:	bf00      	nop
 801e060:	20000dc4 	.word	0x20000dc4

0801e064 <_getpid_r>:
 801e064:	f7e7 bfc1 	b.w	8005fea <_getpid>

0801e068 <__sread>:
 801e068:	b510      	push	{r4, lr}
 801e06a:	460c      	mov	r4, r1
 801e06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e070:	f000 f894 	bl	801e19c <_read_r>
 801e074:	2800      	cmp	r0, #0
 801e076:	bfab      	itete	ge
 801e078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e07a:	89a3      	ldrhlt	r3, [r4, #12]
 801e07c:	181b      	addge	r3, r3, r0
 801e07e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e082:	bfac      	ite	ge
 801e084:	6563      	strge	r3, [r4, #84]	; 0x54
 801e086:	81a3      	strhlt	r3, [r4, #12]
 801e088:	bd10      	pop	{r4, pc}

0801e08a <__swrite>:
 801e08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e08e:	461f      	mov	r7, r3
 801e090:	898b      	ldrh	r3, [r1, #12]
 801e092:	05db      	lsls	r3, r3, #23
 801e094:	4605      	mov	r5, r0
 801e096:	460c      	mov	r4, r1
 801e098:	4616      	mov	r6, r2
 801e09a:	d505      	bpl.n	801e0a8 <__swrite+0x1e>
 801e09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0a0:	2302      	movs	r3, #2
 801e0a2:	2200      	movs	r2, #0
 801e0a4:	f000 f868 	bl	801e178 <_lseek_r>
 801e0a8:	89a3      	ldrh	r3, [r4, #12]
 801e0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e0b2:	81a3      	strh	r3, [r4, #12]
 801e0b4:	4632      	mov	r2, r6
 801e0b6:	463b      	mov	r3, r7
 801e0b8:	4628      	mov	r0, r5
 801e0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0be:	f000 b817 	b.w	801e0f0 <_write_r>

0801e0c2 <__sseek>:
 801e0c2:	b510      	push	{r4, lr}
 801e0c4:	460c      	mov	r4, r1
 801e0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0ca:	f000 f855 	bl	801e178 <_lseek_r>
 801e0ce:	1c43      	adds	r3, r0, #1
 801e0d0:	89a3      	ldrh	r3, [r4, #12]
 801e0d2:	bf15      	itete	ne
 801e0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e0de:	81a3      	strheq	r3, [r4, #12]
 801e0e0:	bf18      	it	ne
 801e0e2:	81a3      	strhne	r3, [r4, #12]
 801e0e4:	bd10      	pop	{r4, pc}

0801e0e6 <__sclose>:
 801e0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0ea:	f000 b813 	b.w	801e114 <_close_r>
	...

0801e0f0 <_write_r>:
 801e0f0:	b538      	push	{r3, r4, r5, lr}
 801e0f2:	4d07      	ldr	r5, [pc, #28]	; (801e110 <_write_r+0x20>)
 801e0f4:	4604      	mov	r4, r0
 801e0f6:	4608      	mov	r0, r1
 801e0f8:	4611      	mov	r1, r2
 801e0fa:	2200      	movs	r2, #0
 801e0fc:	602a      	str	r2, [r5, #0]
 801e0fe:	461a      	mov	r2, r3
 801e100:	f7e7 ffb2 	bl	8006068 <_write>
 801e104:	1c43      	adds	r3, r0, #1
 801e106:	d102      	bne.n	801e10e <_write_r+0x1e>
 801e108:	682b      	ldr	r3, [r5, #0]
 801e10a:	b103      	cbz	r3, 801e10e <_write_r+0x1e>
 801e10c:	6023      	str	r3, [r4, #0]
 801e10e:	bd38      	pop	{r3, r4, r5, pc}
 801e110:	20000dc4 	.word	0x20000dc4

0801e114 <_close_r>:
 801e114:	b538      	push	{r3, r4, r5, lr}
 801e116:	4d06      	ldr	r5, [pc, #24]	; (801e130 <_close_r+0x1c>)
 801e118:	2300      	movs	r3, #0
 801e11a:	4604      	mov	r4, r0
 801e11c:	4608      	mov	r0, r1
 801e11e:	602b      	str	r3, [r5, #0]
 801e120:	f7e7 ffbe 	bl	80060a0 <_close>
 801e124:	1c43      	adds	r3, r0, #1
 801e126:	d102      	bne.n	801e12e <_close_r+0x1a>
 801e128:	682b      	ldr	r3, [r5, #0]
 801e12a:	b103      	cbz	r3, 801e12e <_close_r+0x1a>
 801e12c:	6023      	str	r3, [r4, #0]
 801e12e:	bd38      	pop	{r3, r4, r5, pc}
 801e130:	20000dc4 	.word	0x20000dc4

0801e134 <_fstat_r>:
 801e134:	b538      	push	{r3, r4, r5, lr}
 801e136:	4d07      	ldr	r5, [pc, #28]	; (801e154 <_fstat_r+0x20>)
 801e138:	2300      	movs	r3, #0
 801e13a:	4604      	mov	r4, r0
 801e13c:	4608      	mov	r0, r1
 801e13e:	4611      	mov	r1, r2
 801e140:	602b      	str	r3, [r5, #0]
 801e142:	f7e7 ffb9 	bl	80060b8 <_fstat>
 801e146:	1c43      	adds	r3, r0, #1
 801e148:	d102      	bne.n	801e150 <_fstat_r+0x1c>
 801e14a:	682b      	ldr	r3, [r5, #0]
 801e14c:	b103      	cbz	r3, 801e150 <_fstat_r+0x1c>
 801e14e:	6023      	str	r3, [r4, #0]
 801e150:	bd38      	pop	{r3, r4, r5, pc}
 801e152:	bf00      	nop
 801e154:	20000dc4 	.word	0x20000dc4

0801e158 <_isatty_r>:
 801e158:	b538      	push	{r3, r4, r5, lr}
 801e15a:	4d06      	ldr	r5, [pc, #24]	; (801e174 <_isatty_r+0x1c>)
 801e15c:	2300      	movs	r3, #0
 801e15e:	4604      	mov	r4, r0
 801e160:	4608      	mov	r0, r1
 801e162:	602b      	str	r3, [r5, #0]
 801e164:	f7e7 ffb8 	bl	80060d8 <_isatty>
 801e168:	1c43      	adds	r3, r0, #1
 801e16a:	d102      	bne.n	801e172 <_isatty_r+0x1a>
 801e16c:	682b      	ldr	r3, [r5, #0]
 801e16e:	b103      	cbz	r3, 801e172 <_isatty_r+0x1a>
 801e170:	6023      	str	r3, [r4, #0]
 801e172:	bd38      	pop	{r3, r4, r5, pc}
 801e174:	20000dc4 	.word	0x20000dc4

0801e178 <_lseek_r>:
 801e178:	b538      	push	{r3, r4, r5, lr}
 801e17a:	4d07      	ldr	r5, [pc, #28]	; (801e198 <_lseek_r+0x20>)
 801e17c:	4604      	mov	r4, r0
 801e17e:	4608      	mov	r0, r1
 801e180:	4611      	mov	r1, r2
 801e182:	2200      	movs	r2, #0
 801e184:	602a      	str	r2, [r5, #0]
 801e186:	461a      	mov	r2, r3
 801e188:	f7e7 ffb1 	bl	80060ee <_lseek>
 801e18c:	1c43      	adds	r3, r0, #1
 801e18e:	d102      	bne.n	801e196 <_lseek_r+0x1e>
 801e190:	682b      	ldr	r3, [r5, #0]
 801e192:	b103      	cbz	r3, 801e196 <_lseek_r+0x1e>
 801e194:	6023      	str	r3, [r4, #0]
 801e196:	bd38      	pop	{r3, r4, r5, pc}
 801e198:	20000dc4 	.word	0x20000dc4

0801e19c <_read_r>:
 801e19c:	b538      	push	{r3, r4, r5, lr}
 801e19e:	4d07      	ldr	r5, [pc, #28]	; (801e1bc <_read_r+0x20>)
 801e1a0:	4604      	mov	r4, r0
 801e1a2:	4608      	mov	r0, r1
 801e1a4:	4611      	mov	r1, r2
 801e1a6:	2200      	movs	r2, #0
 801e1a8:	602a      	str	r2, [r5, #0]
 801e1aa:	461a      	mov	r2, r3
 801e1ac:	f7e7 ff3f 	bl	800602e <_read>
 801e1b0:	1c43      	adds	r3, r0, #1
 801e1b2:	d102      	bne.n	801e1ba <_read_r+0x1e>
 801e1b4:	682b      	ldr	r3, [r5, #0]
 801e1b6:	b103      	cbz	r3, 801e1ba <_read_r+0x1e>
 801e1b8:	6023      	str	r3, [r4, #0]
 801e1ba:	bd38      	pop	{r3, r4, r5, pc}
 801e1bc:	20000dc4 	.word	0x20000dc4

0801e1c0 <memcmp>:
 801e1c0:	b510      	push	{r4, lr}
 801e1c2:	3901      	subs	r1, #1
 801e1c4:	4402      	add	r2, r0
 801e1c6:	4290      	cmp	r0, r2
 801e1c8:	d101      	bne.n	801e1ce <memcmp+0xe>
 801e1ca:	2000      	movs	r0, #0
 801e1cc:	e005      	b.n	801e1da <memcmp+0x1a>
 801e1ce:	7803      	ldrb	r3, [r0, #0]
 801e1d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e1d4:	42a3      	cmp	r3, r4
 801e1d6:	d001      	beq.n	801e1dc <memcmp+0x1c>
 801e1d8:	1b18      	subs	r0, r3, r4
 801e1da:	bd10      	pop	{r4, pc}
 801e1dc:	3001      	adds	r0, #1
 801e1de:	e7f2      	b.n	801e1c6 <memcmp+0x6>

0801e1e0 <floor>:
 801e1e0:	ec51 0b10 	vmov	r0, r1, d0
 801e1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e1ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e1f0:	2e13      	cmp	r6, #19
 801e1f2:	ee10 5a10 	vmov	r5, s0
 801e1f6:	ee10 8a10 	vmov	r8, s0
 801e1fa:	460c      	mov	r4, r1
 801e1fc:	dc32      	bgt.n	801e264 <floor+0x84>
 801e1fe:	2e00      	cmp	r6, #0
 801e200:	da14      	bge.n	801e22c <floor+0x4c>
 801e202:	a333      	add	r3, pc, #204	; (adr r3, 801e2d0 <floor+0xf0>)
 801e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e208:	f7fa fc48 	bl	8018a9c <__adddf3>
 801e20c:	2200      	movs	r2, #0
 801e20e:	2300      	movs	r3, #0
 801e210:	f7fb f88a 	bl	8019328 <__aeabi_dcmpgt>
 801e214:	b138      	cbz	r0, 801e226 <floor+0x46>
 801e216:	2c00      	cmp	r4, #0
 801e218:	da57      	bge.n	801e2ca <floor+0xea>
 801e21a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e21e:	431d      	orrs	r5, r3
 801e220:	d001      	beq.n	801e226 <floor+0x46>
 801e222:	4c2d      	ldr	r4, [pc, #180]	; (801e2d8 <floor+0xf8>)
 801e224:	2500      	movs	r5, #0
 801e226:	4621      	mov	r1, r4
 801e228:	4628      	mov	r0, r5
 801e22a:	e025      	b.n	801e278 <floor+0x98>
 801e22c:	4f2b      	ldr	r7, [pc, #172]	; (801e2dc <floor+0xfc>)
 801e22e:	4137      	asrs	r7, r6
 801e230:	ea01 0307 	and.w	r3, r1, r7
 801e234:	4303      	orrs	r3, r0
 801e236:	d01f      	beq.n	801e278 <floor+0x98>
 801e238:	a325      	add	r3, pc, #148	; (adr r3, 801e2d0 <floor+0xf0>)
 801e23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e23e:	f7fa fc2d 	bl	8018a9c <__adddf3>
 801e242:	2200      	movs	r2, #0
 801e244:	2300      	movs	r3, #0
 801e246:	f7fb f86f 	bl	8019328 <__aeabi_dcmpgt>
 801e24a:	2800      	cmp	r0, #0
 801e24c:	d0eb      	beq.n	801e226 <floor+0x46>
 801e24e:	2c00      	cmp	r4, #0
 801e250:	bfbe      	ittt	lt
 801e252:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e256:	fa43 f606 	asrlt.w	r6, r3, r6
 801e25a:	19a4      	addlt	r4, r4, r6
 801e25c:	ea24 0407 	bic.w	r4, r4, r7
 801e260:	2500      	movs	r5, #0
 801e262:	e7e0      	b.n	801e226 <floor+0x46>
 801e264:	2e33      	cmp	r6, #51	; 0x33
 801e266:	dd0b      	ble.n	801e280 <floor+0xa0>
 801e268:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e26c:	d104      	bne.n	801e278 <floor+0x98>
 801e26e:	ee10 2a10 	vmov	r2, s0
 801e272:	460b      	mov	r3, r1
 801e274:	f7fa fc12 	bl	8018a9c <__adddf3>
 801e278:	ec41 0b10 	vmov	d0, r0, r1
 801e27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e280:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e284:	f04f 33ff 	mov.w	r3, #4294967295
 801e288:	fa23 f707 	lsr.w	r7, r3, r7
 801e28c:	4207      	tst	r7, r0
 801e28e:	d0f3      	beq.n	801e278 <floor+0x98>
 801e290:	a30f      	add	r3, pc, #60	; (adr r3, 801e2d0 <floor+0xf0>)
 801e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e296:	f7fa fc01 	bl	8018a9c <__adddf3>
 801e29a:	2200      	movs	r2, #0
 801e29c:	2300      	movs	r3, #0
 801e29e:	f7fb f843 	bl	8019328 <__aeabi_dcmpgt>
 801e2a2:	2800      	cmp	r0, #0
 801e2a4:	d0bf      	beq.n	801e226 <floor+0x46>
 801e2a6:	2c00      	cmp	r4, #0
 801e2a8:	da02      	bge.n	801e2b0 <floor+0xd0>
 801e2aa:	2e14      	cmp	r6, #20
 801e2ac:	d103      	bne.n	801e2b6 <floor+0xd6>
 801e2ae:	3401      	adds	r4, #1
 801e2b0:	ea25 0507 	bic.w	r5, r5, r7
 801e2b4:	e7b7      	b.n	801e226 <floor+0x46>
 801e2b6:	2301      	movs	r3, #1
 801e2b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e2bc:	fa03 f606 	lsl.w	r6, r3, r6
 801e2c0:	4435      	add	r5, r6
 801e2c2:	4545      	cmp	r5, r8
 801e2c4:	bf38      	it	cc
 801e2c6:	18e4      	addcc	r4, r4, r3
 801e2c8:	e7f2      	b.n	801e2b0 <floor+0xd0>
 801e2ca:	2500      	movs	r5, #0
 801e2cc:	462c      	mov	r4, r5
 801e2ce:	e7aa      	b.n	801e226 <floor+0x46>
 801e2d0:	8800759c 	.word	0x8800759c
 801e2d4:	7e37e43c 	.word	0x7e37e43c
 801e2d8:	bff00000 	.word	0xbff00000
 801e2dc:	000fffff 	.word	0x000fffff

0801e2e0 <pow>:
 801e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2e2:	ed2d 8b02 	vpush	{d8}
 801e2e6:	eeb0 8a40 	vmov.f32	s16, s0
 801e2ea:	eef0 8a60 	vmov.f32	s17, s1
 801e2ee:	ec55 4b11 	vmov	r4, r5, d1
 801e2f2:	f000 f865 	bl	801e3c0 <__ieee754_pow>
 801e2f6:	4622      	mov	r2, r4
 801e2f8:	462b      	mov	r3, r5
 801e2fa:	4620      	mov	r0, r4
 801e2fc:	4629      	mov	r1, r5
 801e2fe:	ec57 6b10 	vmov	r6, r7, d0
 801e302:	f7fb f81b 	bl	801933c <__aeabi_dcmpun>
 801e306:	2800      	cmp	r0, #0
 801e308:	d13b      	bne.n	801e382 <pow+0xa2>
 801e30a:	ec51 0b18 	vmov	r0, r1, d8
 801e30e:	2200      	movs	r2, #0
 801e310:	2300      	movs	r3, #0
 801e312:	f7fa ffe1 	bl	80192d8 <__aeabi_dcmpeq>
 801e316:	b1b8      	cbz	r0, 801e348 <pow+0x68>
 801e318:	2200      	movs	r2, #0
 801e31a:	2300      	movs	r3, #0
 801e31c:	4620      	mov	r0, r4
 801e31e:	4629      	mov	r1, r5
 801e320:	f7fa ffda 	bl	80192d8 <__aeabi_dcmpeq>
 801e324:	2800      	cmp	r0, #0
 801e326:	d146      	bne.n	801e3b6 <pow+0xd6>
 801e328:	ec45 4b10 	vmov	d0, r4, r5
 801e32c:	f000 fe61 	bl	801eff2 <finite>
 801e330:	b338      	cbz	r0, 801e382 <pow+0xa2>
 801e332:	2200      	movs	r2, #0
 801e334:	2300      	movs	r3, #0
 801e336:	4620      	mov	r0, r4
 801e338:	4629      	mov	r1, r5
 801e33a:	f7fa ffd7 	bl	80192ec <__aeabi_dcmplt>
 801e33e:	b300      	cbz	r0, 801e382 <pow+0xa2>
 801e340:	f7fb fa90 	bl	8019864 <__errno>
 801e344:	2322      	movs	r3, #34	; 0x22
 801e346:	e01b      	b.n	801e380 <pow+0xa0>
 801e348:	ec47 6b10 	vmov	d0, r6, r7
 801e34c:	f000 fe51 	bl	801eff2 <finite>
 801e350:	b9e0      	cbnz	r0, 801e38c <pow+0xac>
 801e352:	eeb0 0a48 	vmov.f32	s0, s16
 801e356:	eef0 0a68 	vmov.f32	s1, s17
 801e35a:	f000 fe4a 	bl	801eff2 <finite>
 801e35e:	b1a8      	cbz	r0, 801e38c <pow+0xac>
 801e360:	ec45 4b10 	vmov	d0, r4, r5
 801e364:	f000 fe45 	bl	801eff2 <finite>
 801e368:	b180      	cbz	r0, 801e38c <pow+0xac>
 801e36a:	4632      	mov	r2, r6
 801e36c:	463b      	mov	r3, r7
 801e36e:	4630      	mov	r0, r6
 801e370:	4639      	mov	r1, r7
 801e372:	f7fa ffe3 	bl	801933c <__aeabi_dcmpun>
 801e376:	2800      	cmp	r0, #0
 801e378:	d0e2      	beq.n	801e340 <pow+0x60>
 801e37a:	f7fb fa73 	bl	8019864 <__errno>
 801e37e:	2321      	movs	r3, #33	; 0x21
 801e380:	6003      	str	r3, [r0, #0]
 801e382:	ecbd 8b02 	vpop	{d8}
 801e386:	ec47 6b10 	vmov	d0, r6, r7
 801e38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e38c:	2200      	movs	r2, #0
 801e38e:	2300      	movs	r3, #0
 801e390:	4630      	mov	r0, r6
 801e392:	4639      	mov	r1, r7
 801e394:	f7fa ffa0 	bl	80192d8 <__aeabi_dcmpeq>
 801e398:	2800      	cmp	r0, #0
 801e39a:	d0f2      	beq.n	801e382 <pow+0xa2>
 801e39c:	eeb0 0a48 	vmov.f32	s0, s16
 801e3a0:	eef0 0a68 	vmov.f32	s1, s17
 801e3a4:	f000 fe25 	bl	801eff2 <finite>
 801e3a8:	2800      	cmp	r0, #0
 801e3aa:	d0ea      	beq.n	801e382 <pow+0xa2>
 801e3ac:	ec45 4b10 	vmov	d0, r4, r5
 801e3b0:	f000 fe1f 	bl	801eff2 <finite>
 801e3b4:	e7c3      	b.n	801e33e <pow+0x5e>
 801e3b6:	4f01      	ldr	r7, [pc, #4]	; (801e3bc <pow+0xdc>)
 801e3b8:	2600      	movs	r6, #0
 801e3ba:	e7e2      	b.n	801e382 <pow+0xa2>
 801e3bc:	3ff00000 	.word	0x3ff00000

0801e3c0 <__ieee754_pow>:
 801e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c4:	ed2d 8b06 	vpush	{d8-d10}
 801e3c8:	b089      	sub	sp, #36	; 0x24
 801e3ca:	ed8d 1b00 	vstr	d1, [sp]
 801e3ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 801e3d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801e3d6:	ea58 0102 	orrs.w	r1, r8, r2
 801e3da:	ec57 6b10 	vmov	r6, r7, d0
 801e3de:	d115      	bne.n	801e40c <__ieee754_pow+0x4c>
 801e3e0:	19b3      	adds	r3, r6, r6
 801e3e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801e3e6:	4152      	adcs	r2, r2
 801e3e8:	4299      	cmp	r1, r3
 801e3ea:	4b89      	ldr	r3, [pc, #548]	; (801e610 <__ieee754_pow+0x250>)
 801e3ec:	4193      	sbcs	r3, r2
 801e3ee:	f080 84d2 	bcs.w	801ed96 <__ieee754_pow+0x9d6>
 801e3f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3f6:	4630      	mov	r0, r6
 801e3f8:	4639      	mov	r1, r7
 801e3fa:	f7fa fb4f 	bl	8018a9c <__adddf3>
 801e3fe:	ec41 0b10 	vmov	d0, r0, r1
 801e402:	b009      	add	sp, #36	; 0x24
 801e404:	ecbd 8b06 	vpop	{d8-d10}
 801e408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e40c:	4b81      	ldr	r3, [pc, #516]	; (801e614 <__ieee754_pow+0x254>)
 801e40e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801e412:	429c      	cmp	r4, r3
 801e414:	ee10 aa10 	vmov	sl, s0
 801e418:	463d      	mov	r5, r7
 801e41a:	dc06      	bgt.n	801e42a <__ieee754_pow+0x6a>
 801e41c:	d101      	bne.n	801e422 <__ieee754_pow+0x62>
 801e41e:	2e00      	cmp	r6, #0
 801e420:	d1e7      	bne.n	801e3f2 <__ieee754_pow+0x32>
 801e422:	4598      	cmp	r8, r3
 801e424:	dc01      	bgt.n	801e42a <__ieee754_pow+0x6a>
 801e426:	d10f      	bne.n	801e448 <__ieee754_pow+0x88>
 801e428:	b172      	cbz	r2, 801e448 <__ieee754_pow+0x88>
 801e42a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e42e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e432:	ea55 050a 	orrs.w	r5, r5, sl
 801e436:	d1dc      	bne.n	801e3f2 <__ieee754_pow+0x32>
 801e438:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e43c:	18db      	adds	r3, r3, r3
 801e43e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e442:	4152      	adcs	r2, r2
 801e444:	429d      	cmp	r5, r3
 801e446:	e7d0      	b.n	801e3ea <__ieee754_pow+0x2a>
 801e448:	2d00      	cmp	r5, #0
 801e44a:	da3b      	bge.n	801e4c4 <__ieee754_pow+0x104>
 801e44c:	4b72      	ldr	r3, [pc, #456]	; (801e618 <__ieee754_pow+0x258>)
 801e44e:	4598      	cmp	r8, r3
 801e450:	dc51      	bgt.n	801e4f6 <__ieee754_pow+0x136>
 801e452:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e456:	4598      	cmp	r8, r3
 801e458:	f340 84ac 	ble.w	801edb4 <__ieee754_pow+0x9f4>
 801e45c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e460:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e464:	2b14      	cmp	r3, #20
 801e466:	dd0f      	ble.n	801e488 <__ieee754_pow+0xc8>
 801e468:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e46c:	fa22 f103 	lsr.w	r1, r2, r3
 801e470:	fa01 f303 	lsl.w	r3, r1, r3
 801e474:	4293      	cmp	r3, r2
 801e476:	f040 849d 	bne.w	801edb4 <__ieee754_pow+0x9f4>
 801e47a:	f001 0101 	and.w	r1, r1, #1
 801e47e:	f1c1 0302 	rsb	r3, r1, #2
 801e482:	9304      	str	r3, [sp, #16]
 801e484:	b182      	cbz	r2, 801e4a8 <__ieee754_pow+0xe8>
 801e486:	e05f      	b.n	801e548 <__ieee754_pow+0x188>
 801e488:	2a00      	cmp	r2, #0
 801e48a:	d15b      	bne.n	801e544 <__ieee754_pow+0x184>
 801e48c:	f1c3 0314 	rsb	r3, r3, #20
 801e490:	fa48 f103 	asr.w	r1, r8, r3
 801e494:	fa01 f303 	lsl.w	r3, r1, r3
 801e498:	4543      	cmp	r3, r8
 801e49a:	f040 8488 	bne.w	801edae <__ieee754_pow+0x9ee>
 801e49e:	f001 0101 	and.w	r1, r1, #1
 801e4a2:	f1c1 0302 	rsb	r3, r1, #2
 801e4a6:	9304      	str	r3, [sp, #16]
 801e4a8:	4b5c      	ldr	r3, [pc, #368]	; (801e61c <__ieee754_pow+0x25c>)
 801e4aa:	4598      	cmp	r8, r3
 801e4ac:	d132      	bne.n	801e514 <__ieee754_pow+0x154>
 801e4ae:	f1b9 0f00 	cmp.w	r9, #0
 801e4b2:	f280 8478 	bge.w	801eda6 <__ieee754_pow+0x9e6>
 801e4b6:	4959      	ldr	r1, [pc, #356]	; (801e61c <__ieee754_pow+0x25c>)
 801e4b8:	4632      	mov	r2, r6
 801e4ba:	463b      	mov	r3, r7
 801e4bc:	2000      	movs	r0, #0
 801e4be:	f7fa fdcd 	bl	801905c <__aeabi_ddiv>
 801e4c2:	e79c      	b.n	801e3fe <__ieee754_pow+0x3e>
 801e4c4:	2300      	movs	r3, #0
 801e4c6:	9304      	str	r3, [sp, #16]
 801e4c8:	2a00      	cmp	r2, #0
 801e4ca:	d13d      	bne.n	801e548 <__ieee754_pow+0x188>
 801e4cc:	4b51      	ldr	r3, [pc, #324]	; (801e614 <__ieee754_pow+0x254>)
 801e4ce:	4598      	cmp	r8, r3
 801e4d0:	d1ea      	bne.n	801e4a8 <__ieee754_pow+0xe8>
 801e4d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e4d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e4da:	ea53 030a 	orrs.w	r3, r3, sl
 801e4de:	f000 845a 	beq.w	801ed96 <__ieee754_pow+0x9d6>
 801e4e2:	4b4f      	ldr	r3, [pc, #316]	; (801e620 <__ieee754_pow+0x260>)
 801e4e4:	429c      	cmp	r4, r3
 801e4e6:	dd08      	ble.n	801e4fa <__ieee754_pow+0x13a>
 801e4e8:	f1b9 0f00 	cmp.w	r9, #0
 801e4ec:	f2c0 8457 	blt.w	801ed9e <__ieee754_pow+0x9de>
 801e4f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e4f4:	e783      	b.n	801e3fe <__ieee754_pow+0x3e>
 801e4f6:	2302      	movs	r3, #2
 801e4f8:	e7e5      	b.n	801e4c6 <__ieee754_pow+0x106>
 801e4fa:	f1b9 0f00 	cmp.w	r9, #0
 801e4fe:	f04f 0000 	mov.w	r0, #0
 801e502:	f04f 0100 	mov.w	r1, #0
 801e506:	f6bf af7a 	bge.w	801e3fe <__ieee754_pow+0x3e>
 801e50a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e50e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e512:	e774      	b.n	801e3fe <__ieee754_pow+0x3e>
 801e514:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e518:	d106      	bne.n	801e528 <__ieee754_pow+0x168>
 801e51a:	4632      	mov	r2, r6
 801e51c:	463b      	mov	r3, r7
 801e51e:	4630      	mov	r0, r6
 801e520:	4639      	mov	r1, r7
 801e522:	f7fa fc71 	bl	8018e08 <__aeabi_dmul>
 801e526:	e76a      	b.n	801e3fe <__ieee754_pow+0x3e>
 801e528:	4b3e      	ldr	r3, [pc, #248]	; (801e624 <__ieee754_pow+0x264>)
 801e52a:	4599      	cmp	r9, r3
 801e52c:	d10c      	bne.n	801e548 <__ieee754_pow+0x188>
 801e52e:	2d00      	cmp	r5, #0
 801e530:	db0a      	blt.n	801e548 <__ieee754_pow+0x188>
 801e532:	ec47 6b10 	vmov	d0, r6, r7
 801e536:	b009      	add	sp, #36	; 0x24
 801e538:	ecbd 8b06 	vpop	{d8-d10}
 801e53c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e540:	f000 bc6c 	b.w	801ee1c <__ieee754_sqrt>
 801e544:	2300      	movs	r3, #0
 801e546:	9304      	str	r3, [sp, #16]
 801e548:	ec47 6b10 	vmov	d0, r6, r7
 801e54c:	f000 fd48 	bl	801efe0 <fabs>
 801e550:	ec51 0b10 	vmov	r0, r1, d0
 801e554:	f1ba 0f00 	cmp.w	sl, #0
 801e558:	d129      	bne.n	801e5ae <__ieee754_pow+0x1ee>
 801e55a:	b124      	cbz	r4, 801e566 <__ieee754_pow+0x1a6>
 801e55c:	4b2f      	ldr	r3, [pc, #188]	; (801e61c <__ieee754_pow+0x25c>)
 801e55e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e562:	429a      	cmp	r2, r3
 801e564:	d123      	bne.n	801e5ae <__ieee754_pow+0x1ee>
 801e566:	f1b9 0f00 	cmp.w	r9, #0
 801e56a:	da05      	bge.n	801e578 <__ieee754_pow+0x1b8>
 801e56c:	4602      	mov	r2, r0
 801e56e:	460b      	mov	r3, r1
 801e570:	2000      	movs	r0, #0
 801e572:	492a      	ldr	r1, [pc, #168]	; (801e61c <__ieee754_pow+0x25c>)
 801e574:	f7fa fd72 	bl	801905c <__aeabi_ddiv>
 801e578:	2d00      	cmp	r5, #0
 801e57a:	f6bf af40 	bge.w	801e3fe <__ieee754_pow+0x3e>
 801e57e:	9b04      	ldr	r3, [sp, #16]
 801e580:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e584:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e588:	4323      	orrs	r3, r4
 801e58a:	d108      	bne.n	801e59e <__ieee754_pow+0x1de>
 801e58c:	4602      	mov	r2, r0
 801e58e:	460b      	mov	r3, r1
 801e590:	4610      	mov	r0, r2
 801e592:	4619      	mov	r1, r3
 801e594:	f7fa fa80 	bl	8018a98 <__aeabi_dsub>
 801e598:	4602      	mov	r2, r0
 801e59a:	460b      	mov	r3, r1
 801e59c:	e78f      	b.n	801e4be <__ieee754_pow+0xfe>
 801e59e:	9b04      	ldr	r3, [sp, #16]
 801e5a0:	2b01      	cmp	r3, #1
 801e5a2:	f47f af2c 	bne.w	801e3fe <__ieee754_pow+0x3e>
 801e5a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e5aa:	4619      	mov	r1, r3
 801e5ac:	e727      	b.n	801e3fe <__ieee754_pow+0x3e>
 801e5ae:	0feb      	lsrs	r3, r5, #31
 801e5b0:	3b01      	subs	r3, #1
 801e5b2:	9306      	str	r3, [sp, #24]
 801e5b4:	9a06      	ldr	r2, [sp, #24]
 801e5b6:	9b04      	ldr	r3, [sp, #16]
 801e5b8:	4313      	orrs	r3, r2
 801e5ba:	d102      	bne.n	801e5c2 <__ieee754_pow+0x202>
 801e5bc:	4632      	mov	r2, r6
 801e5be:	463b      	mov	r3, r7
 801e5c0:	e7e6      	b.n	801e590 <__ieee754_pow+0x1d0>
 801e5c2:	4b19      	ldr	r3, [pc, #100]	; (801e628 <__ieee754_pow+0x268>)
 801e5c4:	4598      	cmp	r8, r3
 801e5c6:	f340 80fb 	ble.w	801e7c0 <__ieee754_pow+0x400>
 801e5ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e5ce:	4598      	cmp	r8, r3
 801e5d0:	4b13      	ldr	r3, [pc, #76]	; (801e620 <__ieee754_pow+0x260>)
 801e5d2:	dd0c      	ble.n	801e5ee <__ieee754_pow+0x22e>
 801e5d4:	429c      	cmp	r4, r3
 801e5d6:	dc0f      	bgt.n	801e5f8 <__ieee754_pow+0x238>
 801e5d8:	f1b9 0f00 	cmp.w	r9, #0
 801e5dc:	da0f      	bge.n	801e5fe <__ieee754_pow+0x23e>
 801e5de:	2000      	movs	r0, #0
 801e5e0:	b009      	add	sp, #36	; 0x24
 801e5e2:	ecbd 8b06 	vpop	{d8-d10}
 801e5e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ea:	f000 bcf0 	b.w	801efce <__math_oflow>
 801e5ee:	429c      	cmp	r4, r3
 801e5f0:	dbf2      	blt.n	801e5d8 <__ieee754_pow+0x218>
 801e5f2:	4b0a      	ldr	r3, [pc, #40]	; (801e61c <__ieee754_pow+0x25c>)
 801e5f4:	429c      	cmp	r4, r3
 801e5f6:	dd19      	ble.n	801e62c <__ieee754_pow+0x26c>
 801e5f8:	f1b9 0f00 	cmp.w	r9, #0
 801e5fc:	dcef      	bgt.n	801e5de <__ieee754_pow+0x21e>
 801e5fe:	2000      	movs	r0, #0
 801e600:	b009      	add	sp, #36	; 0x24
 801e602:	ecbd 8b06 	vpop	{d8-d10}
 801e606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e60a:	f000 bcd7 	b.w	801efbc <__math_uflow>
 801e60e:	bf00      	nop
 801e610:	fff00000 	.word	0xfff00000
 801e614:	7ff00000 	.word	0x7ff00000
 801e618:	433fffff 	.word	0x433fffff
 801e61c:	3ff00000 	.word	0x3ff00000
 801e620:	3fefffff 	.word	0x3fefffff
 801e624:	3fe00000 	.word	0x3fe00000
 801e628:	41e00000 	.word	0x41e00000
 801e62c:	4b60      	ldr	r3, [pc, #384]	; (801e7b0 <__ieee754_pow+0x3f0>)
 801e62e:	2200      	movs	r2, #0
 801e630:	f7fa fa32 	bl	8018a98 <__aeabi_dsub>
 801e634:	a354      	add	r3, pc, #336	; (adr r3, 801e788 <__ieee754_pow+0x3c8>)
 801e636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63a:	4604      	mov	r4, r0
 801e63c:	460d      	mov	r5, r1
 801e63e:	f7fa fbe3 	bl	8018e08 <__aeabi_dmul>
 801e642:	a353      	add	r3, pc, #332	; (adr r3, 801e790 <__ieee754_pow+0x3d0>)
 801e644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e648:	4606      	mov	r6, r0
 801e64a:	460f      	mov	r7, r1
 801e64c:	4620      	mov	r0, r4
 801e64e:	4629      	mov	r1, r5
 801e650:	f7fa fbda 	bl	8018e08 <__aeabi_dmul>
 801e654:	4b57      	ldr	r3, [pc, #348]	; (801e7b4 <__ieee754_pow+0x3f4>)
 801e656:	4682      	mov	sl, r0
 801e658:	468b      	mov	fp, r1
 801e65a:	2200      	movs	r2, #0
 801e65c:	4620      	mov	r0, r4
 801e65e:	4629      	mov	r1, r5
 801e660:	f7fa fbd2 	bl	8018e08 <__aeabi_dmul>
 801e664:	4602      	mov	r2, r0
 801e666:	460b      	mov	r3, r1
 801e668:	a14b      	add	r1, pc, #300	; (adr r1, 801e798 <__ieee754_pow+0x3d8>)
 801e66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e66e:	f7fa fa13 	bl	8018a98 <__aeabi_dsub>
 801e672:	4622      	mov	r2, r4
 801e674:	462b      	mov	r3, r5
 801e676:	f7fa fbc7 	bl	8018e08 <__aeabi_dmul>
 801e67a:	4602      	mov	r2, r0
 801e67c:	460b      	mov	r3, r1
 801e67e:	2000      	movs	r0, #0
 801e680:	494d      	ldr	r1, [pc, #308]	; (801e7b8 <__ieee754_pow+0x3f8>)
 801e682:	f7fa fa09 	bl	8018a98 <__aeabi_dsub>
 801e686:	4622      	mov	r2, r4
 801e688:	4680      	mov	r8, r0
 801e68a:	4689      	mov	r9, r1
 801e68c:	462b      	mov	r3, r5
 801e68e:	4620      	mov	r0, r4
 801e690:	4629      	mov	r1, r5
 801e692:	f7fa fbb9 	bl	8018e08 <__aeabi_dmul>
 801e696:	4602      	mov	r2, r0
 801e698:	460b      	mov	r3, r1
 801e69a:	4640      	mov	r0, r8
 801e69c:	4649      	mov	r1, r9
 801e69e:	f7fa fbb3 	bl	8018e08 <__aeabi_dmul>
 801e6a2:	a33f      	add	r3, pc, #252	; (adr r3, 801e7a0 <__ieee754_pow+0x3e0>)
 801e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a8:	f7fa fbae 	bl	8018e08 <__aeabi_dmul>
 801e6ac:	4602      	mov	r2, r0
 801e6ae:	460b      	mov	r3, r1
 801e6b0:	4650      	mov	r0, sl
 801e6b2:	4659      	mov	r1, fp
 801e6b4:	f7fa f9f0 	bl	8018a98 <__aeabi_dsub>
 801e6b8:	4602      	mov	r2, r0
 801e6ba:	460b      	mov	r3, r1
 801e6bc:	4680      	mov	r8, r0
 801e6be:	4689      	mov	r9, r1
 801e6c0:	4630      	mov	r0, r6
 801e6c2:	4639      	mov	r1, r7
 801e6c4:	f7fa f9ea 	bl	8018a9c <__adddf3>
 801e6c8:	2000      	movs	r0, #0
 801e6ca:	4632      	mov	r2, r6
 801e6cc:	463b      	mov	r3, r7
 801e6ce:	4604      	mov	r4, r0
 801e6d0:	460d      	mov	r5, r1
 801e6d2:	f7fa f9e1 	bl	8018a98 <__aeabi_dsub>
 801e6d6:	4602      	mov	r2, r0
 801e6d8:	460b      	mov	r3, r1
 801e6da:	4640      	mov	r0, r8
 801e6dc:	4649      	mov	r1, r9
 801e6de:	f7fa f9db 	bl	8018a98 <__aeabi_dsub>
 801e6e2:	9b04      	ldr	r3, [sp, #16]
 801e6e4:	9a06      	ldr	r2, [sp, #24]
 801e6e6:	3b01      	subs	r3, #1
 801e6e8:	4313      	orrs	r3, r2
 801e6ea:	4682      	mov	sl, r0
 801e6ec:	468b      	mov	fp, r1
 801e6ee:	f040 81e7 	bne.w	801eac0 <__ieee754_pow+0x700>
 801e6f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801e7a8 <__ieee754_pow+0x3e8>
 801e6f6:	eeb0 8a47 	vmov.f32	s16, s14
 801e6fa:	eef0 8a67 	vmov.f32	s17, s15
 801e6fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 801e702:	2600      	movs	r6, #0
 801e704:	4632      	mov	r2, r6
 801e706:	463b      	mov	r3, r7
 801e708:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e70c:	f7fa f9c4 	bl	8018a98 <__aeabi_dsub>
 801e710:	4622      	mov	r2, r4
 801e712:	462b      	mov	r3, r5
 801e714:	f7fa fb78 	bl	8018e08 <__aeabi_dmul>
 801e718:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e71c:	4680      	mov	r8, r0
 801e71e:	4689      	mov	r9, r1
 801e720:	4650      	mov	r0, sl
 801e722:	4659      	mov	r1, fp
 801e724:	f7fa fb70 	bl	8018e08 <__aeabi_dmul>
 801e728:	4602      	mov	r2, r0
 801e72a:	460b      	mov	r3, r1
 801e72c:	4640      	mov	r0, r8
 801e72e:	4649      	mov	r1, r9
 801e730:	f7fa f9b4 	bl	8018a9c <__adddf3>
 801e734:	4632      	mov	r2, r6
 801e736:	463b      	mov	r3, r7
 801e738:	4680      	mov	r8, r0
 801e73a:	4689      	mov	r9, r1
 801e73c:	4620      	mov	r0, r4
 801e73e:	4629      	mov	r1, r5
 801e740:	f7fa fb62 	bl	8018e08 <__aeabi_dmul>
 801e744:	460b      	mov	r3, r1
 801e746:	4604      	mov	r4, r0
 801e748:	460d      	mov	r5, r1
 801e74a:	4602      	mov	r2, r0
 801e74c:	4649      	mov	r1, r9
 801e74e:	4640      	mov	r0, r8
 801e750:	f7fa f9a4 	bl	8018a9c <__adddf3>
 801e754:	4b19      	ldr	r3, [pc, #100]	; (801e7bc <__ieee754_pow+0x3fc>)
 801e756:	4299      	cmp	r1, r3
 801e758:	ec45 4b19 	vmov	d9, r4, r5
 801e75c:	4606      	mov	r6, r0
 801e75e:	460f      	mov	r7, r1
 801e760:	468b      	mov	fp, r1
 801e762:	f340 82f1 	ble.w	801ed48 <__ieee754_pow+0x988>
 801e766:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e76a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e76e:	4303      	orrs	r3, r0
 801e770:	f000 81e4 	beq.w	801eb3c <__ieee754_pow+0x77c>
 801e774:	ec51 0b18 	vmov	r0, r1, d8
 801e778:	2200      	movs	r2, #0
 801e77a:	2300      	movs	r3, #0
 801e77c:	f7fa fdb6 	bl	80192ec <__aeabi_dcmplt>
 801e780:	3800      	subs	r0, #0
 801e782:	bf18      	it	ne
 801e784:	2001      	movne	r0, #1
 801e786:	e72b      	b.n	801e5e0 <__ieee754_pow+0x220>
 801e788:	60000000 	.word	0x60000000
 801e78c:	3ff71547 	.word	0x3ff71547
 801e790:	f85ddf44 	.word	0xf85ddf44
 801e794:	3e54ae0b 	.word	0x3e54ae0b
 801e798:	55555555 	.word	0x55555555
 801e79c:	3fd55555 	.word	0x3fd55555
 801e7a0:	652b82fe 	.word	0x652b82fe
 801e7a4:	3ff71547 	.word	0x3ff71547
 801e7a8:	00000000 	.word	0x00000000
 801e7ac:	bff00000 	.word	0xbff00000
 801e7b0:	3ff00000 	.word	0x3ff00000
 801e7b4:	3fd00000 	.word	0x3fd00000
 801e7b8:	3fe00000 	.word	0x3fe00000
 801e7bc:	408fffff 	.word	0x408fffff
 801e7c0:	4bd5      	ldr	r3, [pc, #852]	; (801eb18 <__ieee754_pow+0x758>)
 801e7c2:	402b      	ands	r3, r5
 801e7c4:	2200      	movs	r2, #0
 801e7c6:	b92b      	cbnz	r3, 801e7d4 <__ieee754_pow+0x414>
 801e7c8:	4bd4      	ldr	r3, [pc, #848]	; (801eb1c <__ieee754_pow+0x75c>)
 801e7ca:	f7fa fb1d 	bl	8018e08 <__aeabi_dmul>
 801e7ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e7d2:	460c      	mov	r4, r1
 801e7d4:	1523      	asrs	r3, r4, #20
 801e7d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e7da:	4413      	add	r3, r2
 801e7dc:	9305      	str	r3, [sp, #20]
 801e7de:	4bd0      	ldr	r3, [pc, #832]	; (801eb20 <__ieee754_pow+0x760>)
 801e7e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e7e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e7e8:	429c      	cmp	r4, r3
 801e7ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e7ee:	dd08      	ble.n	801e802 <__ieee754_pow+0x442>
 801e7f0:	4bcc      	ldr	r3, [pc, #816]	; (801eb24 <__ieee754_pow+0x764>)
 801e7f2:	429c      	cmp	r4, r3
 801e7f4:	f340 8162 	ble.w	801eabc <__ieee754_pow+0x6fc>
 801e7f8:	9b05      	ldr	r3, [sp, #20]
 801e7fa:	3301      	adds	r3, #1
 801e7fc:	9305      	str	r3, [sp, #20]
 801e7fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e802:	2400      	movs	r4, #0
 801e804:	00e3      	lsls	r3, r4, #3
 801e806:	9307      	str	r3, [sp, #28]
 801e808:	4bc7      	ldr	r3, [pc, #796]	; (801eb28 <__ieee754_pow+0x768>)
 801e80a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e80e:	ed93 7b00 	vldr	d7, [r3]
 801e812:	4629      	mov	r1, r5
 801e814:	ec53 2b17 	vmov	r2, r3, d7
 801e818:	eeb0 9a47 	vmov.f32	s18, s14
 801e81c:	eef0 9a67 	vmov.f32	s19, s15
 801e820:	4682      	mov	sl, r0
 801e822:	f7fa f939 	bl	8018a98 <__aeabi_dsub>
 801e826:	4652      	mov	r2, sl
 801e828:	4606      	mov	r6, r0
 801e82a:	460f      	mov	r7, r1
 801e82c:	462b      	mov	r3, r5
 801e82e:	ec51 0b19 	vmov	r0, r1, d9
 801e832:	f7fa f933 	bl	8018a9c <__adddf3>
 801e836:	4602      	mov	r2, r0
 801e838:	460b      	mov	r3, r1
 801e83a:	2000      	movs	r0, #0
 801e83c:	49bb      	ldr	r1, [pc, #748]	; (801eb2c <__ieee754_pow+0x76c>)
 801e83e:	f7fa fc0d 	bl	801905c <__aeabi_ddiv>
 801e842:	ec41 0b1a 	vmov	d10, r0, r1
 801e846:	4602      	mov	r2, r0
 801e848:	460b      	mov	r3, r1
 801e84a:	4630      	mov	r0, r6
 801e84c:	4639      	mov	r1, r7
 801e84e:	f7fa fadb 	bl	8018e08 <__aeabi_dmul>
 801e852:	2300      	movs	r3, #0
 801e854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e858:	9302      	str	r3, [sp, #8]
 801e85a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e85e:	46ab      	mov	fp, r5
 801e860:	106d      	asrs	r5, r5, #1
 801e862:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e866:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e86a:	ec41 0b18 	vmov	d8, r0, r1
 801e86e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e872:	2200      	movs	r2, #0
 801e874:	4640      	mov	r0, r8
 801e876:	4649      	mov	r1, r9
 801e878:	4614      	mov	r4, r2
 801e87a:	461d      	mov	r5, r3
 801e87c:	f7fa fac4 	bl	8018e08 <__aeabi_dmul>
 801e880:	4602      	mov	r2, r0
 801e882:	460b      	mov	r3, r1
 801e884:	4630      	mov	r0, r6
 801e886:	4639      	mov	r1, r7
 801e888:	f7fa f906 	bl	8018a98 <__aeabi_dsub>
 801e88c:	ec53 2b19 	vmov	r2, r3, d9
 801e890:	4606      	mov	r6, r0
 801e892:	460f      	mov	r7, r1
 801e894:	4620      	mov	r0, r4
 801e896:	4629      	mov	r1, r5
 801e898:	f7fa f8fe 	bl	8018a98 <__aeabi_dsub>
 801e89c:	4602      	mov	r2, r0
 801e89e:	460b      	mov	r3, r1
 801e8a0:	4650      	mov	r0, sl
 801e8a2:	4659      	mov	r1, fp
 801e8a4:	f7fa f8f8 	bl	8018a98 <__aeabi_dsub>
 801e8a8:	4642      	mov	r2, r8
 801e8aa:	464b      	mov	r3, r9
 801e8ac:	f7fa faac 	bl	8018e08 <__aeabi_dmul>
 801e8b0:	4602      	mov	r2, r0
 801e8b2:	460b      	mov	r3, r1
 801e8b4:	4630      	mov	r0, r6
 801e8b6:	4639      	mov	r1, r7
 801e8b8:	f7fa f8ee 	bl	8018a98 <__aeabi_dsub>
 801e8bc:	ec53 2b1a 	vmov	r2, r3, d10
 801e8c0:	f7fa faa2 	bl	8018e08 <__aeabi_dmul>
 801e8c4:	ec53 2b18 	vmov	r2, r3, d8
 801e8c8:	ec41 0b19 	vmov	d9, r0, r1
 801e8cc:	ec51 0b18 	vmov	r0, r1, d8
 801e8d0:	f7fa fa9a 	bl	8018e08 <__aeabi_dmul>
 801e8d4:	a37c      	add	r3, pc, #496	; (adr r3, 801eac8 <__ieee754_pow+0x708>)
 801e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8da:	4604      	mov	r4, r0
 801e8dc:	460d      	mov	r5, r1
 801e8de:	f7fa fa93 	bl	8018e08 <__aeabi_dmul>
 801e8e2:	a37b      	add	r3, pc, #492	; (adr r3, 801ead0 <__ieee754_pow+0x710>)
 801e8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8e8:	f7fa f8d8 	bl	8018a9c <__adddf3>
 801e8ec:	4622      	mov	r2, r4
 801e8ee:	462b      	mov	r3, r5
 801e8f0:	f7fa fa8a 	bl	8018e08 <__aeabi_dmul>
 801e8f4:	a378      	add	r3, pc, #480	; (adr r3, 801ead8 <__ieee754_pow+0x718>)
 801e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fa:	f7fa f8cf 	bl	8018a9c <__adddf3>
 801e8fe:	4622      	mov	r2, r4
 801e900:	462b      	mov	r3, r5
 801e902:	f7fa fa81 	bl	8018e08 <__aeabi_dmul>
 801e906:	a376      	add	r3, pc, #472	; (adr r3, 801eae0 <__ieee754_pow+0x720>)
 801e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e90c:	f7fa f8c6 	bl	8018a9c <__adddf3>
 801e910:	4622      	mov	r2, r4
 801e912:	462b      	mov	r3, r5
 801e914:	f7fa fa78 	bl	8018e08 <__aeabi_dmul>
 801e918:	a373      	add	r3, pc, #460	; (adr r3, 801eae8 <__ieee754_pow+0x728>)
 801e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91e:	f7fa f8bd 	bl	8018a9c <__adddf3>
 801e922:	4622      	mov	r2, r4
 801e924:	462b      	mov	r3, r5
 801e926:	f7fa fa6f 	bl	8018e08 <__aeabi_dmul>
 801e92a:	a371      	add	r3, pc, #452	; (adr r3, 801eaf0 <__ieee754_pow+0x730>)
 801e92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e930:	f7fa f8b4 	bl	8018a9c <__adddf3>
 801e934:	4622      	mov	r2, r4
 801e936:	4606      	mov	r6, r0
 801e938:	460f      	mov	r7, r1
 801e93a:	462b      	mov	r3, r5
 801e93c:	4620      	mov	r0, r4
 801e93e:	4629      	mov	r1, r5
 801e940:	f7fa fa62 	bl	8018e08 <__aeabi_dmul>
 801e944:	4602      	mov	r2, r0
 801e946:	460b      	mov	r3, r1
 801e948:	4630      	mov	r0, r6
 801e94a:	4639      	mov	r1, r7
 801e94c:	f7fa fa5c 	bl	8018e08 <__aeabi_dmul>
 801e950:	4642      	mov	r2, r8
 801e952:	4604      	mov	r4, r0
 801e954:	460d      	mov	r5, r1
 801e956:	464b      	mov	r3, r9
 801e958:	ec51 0b18 	vmov	r0, r1, d8
 801e95c:	f7fa f89e 	bl	8018a9c <__adddf3>
 801e960:	ec53 2b19 	vmov	r2, r3, d9
 801e964:	f7fa fa50 	bl	8018e08 <__aeabi_dmul>
 801e968:	4622      	mov	r2, r4
 801e96a:	462b      	mov	r3, r5
 801e96c:	f7fa f896 	bl	8018a9c <__adddf3>
 801e970:	4642      	mov	r2, r8
 801e972:	4682      	mov	sl, r0
 801e974:	468b      	mov	fp, r1
 801e976:	464b      	mov	r3, r9
 801e978:	4640      	mov	r0, r8
 801e97a:	4649      	mov	r1, r9
 801e97c:	f7fa fa44 	bl	8018e08 <__aeabi_dmul>
 801e980:	4b6b      	ldr	r3, [pc, #428]	; (801eb30 <__ieee754_pow+0x770>)
 801e982:	2200      	movs	r2, #0
 801e984:	4606      	mov	r6, r0
 801e986:	460f      	mov	r7, r1
 801e988:	f7fa f888 	bl	8018a9c <__adddf3>
 801e98c:	4652      	mov	r2, sl
 801e98e:	465b      	mov	r3, fp
 801e990:	f7fa f884 	bl	8018a9c <__adddf3>
 801e994:	2000      	movs	r0, #0
 801e996:	4604      	mov	r4, r0
 801e998:	460d      	mov	r5, r1
 801e99a:	4602      	mov	r2, r0
 801e99c:	460b      	mov	r3, r1
 801e99e:	4640      	mov	r0, r8
 801e9a0:	4649      	mov	r1, r9
 801e9a2:	f7fa fa31 	bl	8018e08 <__aeabi_dmul>
 801e9a6:	4b62      	ldr	r3, [pc, #392]	; (801eb30 <__ieee754_pow+0x770>)
 801e9a8:	4680      	mov	r8, r0
 801e9aa:	4689      	mov	r9, r1
 801e9ac:	2200      	movs	r2, #0
 801e9ae:	4620      	mov	r0, r4
 801e9b0:	4629      	mov	r1, r5
 801e9b2:	f7fa f871 	bl	8018a98 <__aeabi_dsub>
 801e9b6:	4632      	mov	r2, r6
 801e9b8:	463b      	mov	r3, r7
 801e9ba:	f7fa f86d 	bl	8018a98 <__aeabi_dsub>
 801e9be:	4602      	mov	r2, r0
 801e9c0:	460b      	mov	r3, r1
 801e9c2:	4650      	mov	r0, sl
 801e9c4:	4659      	mov	r1, fp
 801e9c6:	f7fa f867 	bl	8018a98 <__aeabi_dsub>
 801e9ca:	ec53 2b18 	vmov	r2, r3, d8
 801e9ce:	f7fa fa1b 	bl	8018e08 <__aeabi_dmul>
 801e9d2:	4622      	mov	r2, r4
 801e9d4:	4606      	mov	r6, r0
 801e9d6:	460f      	mov	r7, r1
 801e9d8:	462b      	mov	r3, r5
 801e9da:	ec51 0b19 	vmov	r0, r1, d9
 801e9de:	f7fa fa13 	bl	8018e08 <__aeabi_dmul>
 801e9e2:	4602      	mov	r2, r0
 801e9e4:	460b      	mov	r3, r1
 801e9e6:	4630      	mov	r0, r6
 801e9e8:	4639      	mov	r1, r7
 801e9ea:	f7fa f857 	bl	8018a9c <__adddf3>
 801e9ee:	4606      	mov	r6, r0
 801e9f0:	460f      	mov	r7, r1
 801e9f2:	4602      	mov	r2, r0
 801e9f4:	460b      	mov	r3, r1
 801e9f6:	4640      	mov	r0, r8
 801e9f8:	4649      	mov	r1, r9
 801e9fa:	f7fa f84f 	bl	8018a9c <__adddf3>
 801e9fe:	a33e      	add	r3, pc, #248	; (adr r3, 801eaf8 <__ieee754_pow+0x738>)
 801ea00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea04:	2000      	movs	r0, #0
 801ea06:	4604      	mov	r4, r0
 801ea08:	460d      	mov	r5, r1
 801ea0a:	f7fa f9fd 	bl	8018e08 <__aeabi_dmul>
 801ea0e:	4642      	mov	r2, r8
 801ea10:	ec41 0b18 	vmov	d8, r0, r1
 801ea14:	464b      	mov	r3, r9
 801ea16:	4620      	mov	r0, r4
 801ea18:	4629      	mov	r1, r5
 801ea1a:	f7fa f83d 	bl	8018a98 <__aeabi_dsub>
 801ea1e:	4602      	mov	r2, r0
 801ea20:	460b      	mov	r3, r1
 801ea22:	4630      	mov	r0, r6
 801ea24:	4639      	mov	r1, r7
 801ea26:	f7fa f837 	bl	8018a98 <__aeabi_dsub>
 801ea2a:	a335      	add	r3, pc, #212	; (adr r3, 801eb00 <__ieee754_pow+0x740>)
 801ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea30:	f7fa f9ea 	bl	8018e08 <__aeabi_dmul>
 801ea34:	a334      	add	r3, pc, #208	; (adr r3, 801eb08 <__ieee754_pow+0x748>)
 801ea36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea3a:	4606      	mov	r6, r0
 801ea3c:	460f      	mov	r7, r1
 801ea3e:	4620      	mov	r0, r4
 801ea40:	4629      	mov	r1, r5
 801ea42:	f7fa f9e1 	bl	8018e08 <__aeabi_dmul>
 801ea46:	4602      	mov	r2, r0
 801ea48:	460b      	mov	r3, r1
 801ea4a:	4630      	mov	r0, r6
 801ea4c:	4639      	mov	r1, r7
 801ea4e:	f7fa f825 	bl	8018a9c <__adddf3>
 801ea52:	9a07      	ldr	r2, [sp, #28]
 801ea54:	4b37      	ldr	r3, [pc, #220]	; (801eb34 <__ieee754_pow+0x774>)
 801ea56:	4413      	add	r3, r2
 801ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea5c:	f7fa f81e 	bl	8018a9c <__adddf3>
 801ea60:	4682      	mov	sl, r0
 801ea62:	9805      	ldr	r0, [sp, #20]
 801ea64:	468b      	mov	fp, r1
 801ea66:	f7fa f965 	bl	8018d34 <__aeabi_i2d>
 801ea6a:	9a07      	ldr	r2, [sp, #28]
 801ea6c:	4b32      	ldr	r3, [pc, #200]	; (801eb38 <__ieee754_pow+0x778>)
 801ea6e:	4413      	add	r3, r2
 801ea70:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ea74:	4606      	mov	r6, r0
 801ea76:	460f      	mov	r7, r1
 801ea78:	4652      	mov	r2, sl
 801ea7a:	465b      	mov	r3, fp
 801ea7c:	ec51 0b18 	vmov	r0, r1, d8
 801ea80:	f7fa f80c 	bl	8018a9c <__adddf3>
 801ea84:	4642      	mov	r2, r8
 801ea86:	464b      	mov	r3, r9
 801ea88:	f7fa f808 	bl	8018a9c <__adddf3>
 801ea8c:	4632      	mov	r2, r6
 801ea8e:	463b      	mov	r3, r7
 801ea90:	f7fa f804 	bl	8018a9c <__adddf3>
 801ea94:	2000      	movs	r0, #0
 801ea96:	4632      	mov	r2, r6
 801ea98:	463b      	mov	r3, r7
 801ea9a:	4604      	mov	r4, r0
 801ea9c:	460d      	mov	r5, r1
 801ea9e:	f7f9 fffb 	bl	8018a98 <__aeabi_dsub>
 801eaa2:	4642      	mov	r2, r8
 801eaa4:	464b      	mov	r3, r9
 801eaa6:	f7f9 fff7 	bl	8018a98 <__aeabi_dsub>
 801eaaa:	ec53 2b18 	vmov	r2, r3, d8
 801eaae:	f7f9 fff3 	bl	8018a98 <__aeabi_dsub>
 801eab2:	4602      	mov	r2, r0
 801eab4:	460b      	mov	r3, r1
 801eab6:	4650      	mov	r0, sl
 801eab8:	4659      	mov	r1, fp
 801eaba:	e610      	b.n	801e6de <__ieee754_pow+0x31e>
 801eabc:	2401      	movs	r4, #1
 801eabe:	e6a1      	b.n	801e804 <__ieee754_pow+0x444>
 801eac0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801eb10 <__ieee754_pow+0x750>
 801eac4:	e617      	b.n	801e6f6 <__ieee754_pow+0x336>
 801eac6:	bf00      	nop
 801eac8:	4a454eef 	.word	0x4a454eef
 801eacc:	3fca7e28 	.word	0x3fca7e28
 801ead0:	93c9db65 	.word	0x93c9db65
 801ead4:	3fcd864a 	.word	0x3fcd864a
 801ead8:	a91d4101 	.word	0xa91d4101
 801eadc:	3fd17460 	.word	0x3fd17460
 801eae0:	518f264d 	.word	0x518f264d
 801eae4:	3fd55555 	.word	0x3fd55555
 801eae8:	db6fabff 	.word	0xdb6fabff
 801eaec:	3fdb6db6 	.word	0x3fdb6db6
 801eaf0:	33333303 	.word	0x33333303
 801eaf4:	3fe33333 	.word	0x3fe33333
 801eaf8:	e0000000 	.word	0xe0000000
 801eafc:	3feec709 	.word	0x3feec709
 801eb00:	dc3a03fd 	.word	0xdc3a03fd
 801eb04:	3feec709 	.word	0x3feec709
 801eb08:	145b01f5 	.word	0x145b01f5
 801eb0c:	be3e2fe0 	.word	0xbe3e2fe0
 801eb10:	00000000 	.word	0x00000000
 801eb14:	3ff00000 	.word	0x3ff00000
 801eb18:	7ff00000 	.word	0x7ff00000
 801eb1c:	43400000 	.word	0x43400000
 801eb20:	0003988e 	.word	0x0003988e
 801eb24:	000bb679 	.word	0x000bb679
 801eb28:	08052668 	.word	0x08052668
 801eb2c:	3ff00000 	.word	0x3ff00000
 801eb30:	40080000 	.word	0x40080000
 801eb34:	08052688 	.word	0x08052688
 801eb38:	08052678 	.word	0x08052678
 801eb3c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ee14 <__ieee754_pow+0xa54>)
 801eb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb42:	4640      	mov	r0, r8
 801eb44:	4649      	mov	r1, r9
 801eb46:	f7f9 ffa9 	bl	8018a9c <__adddf3>
 801eb4a:	4622      	mov	r2, r4
 801eb4c:	ec41 0b1a 	vmov	d10, r0, r1
 801eb50:	462b      	mov	r3, r5
 801eb52:	4630      	mov	r0, r6
 801eb54:	4639      	mov	r1, r7
 801eb56:	f7f9 ff9f 	bl	8018a98 <__aeabi_dsub>
 801eb5a:	4602      	mov	r2, r0
 801eb5c:	460b      	mov	r3, r1
 801eb5e:	ec51 0b1a 	vmov	r0, r1, d10
 801eb62:	f7fa fbe1 	bl	8019328 <__aeabi_dcmpgt>
 801eb66:	2800      	cmp	r0, #0
 801eb68:	f47f ae04 	bne.w	801e774 <__ieee754_pow+0x3b4>
 801eb6c:	4aa4      	ldr	r2, [pc, #656]	; (801ee00 <__ieee754_pow+0xa40>)
 801eb6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801eb72:	4293      	cmp	r3, r2
 801eb74:	f340 8108 	ble.w	801ed88 <__ieee754_pow+0x9c8>
 801eb78:	151b      	asrs	r3, r3, #20
 801eb7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801eb7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801eb82:	fa4a f303 	asr.w	r3, sl, r3
 801eb86:	445b      	add	r3, fp
 801eb88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801eb8c:	4e9d      	ldr	r6, [pc, #628]	; (801ee04 <__ieee754_pow+0xa44>)
 801eb8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801eb92:	4116      	asrs	r6, r2
 801eb94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801eb98:	2000      	movs	r0, #0
 801eb9a:	ea23 0106 	bic.w	r1, r3, r6
 801eb9e:	f1c2 0214 	rsb	r2, r2, #20
 801eba2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801eba6:	fa4a fa02 	asr.w	sl, sl, r2
 801ebaa:	f1bb 0f00 	cmp.w	fp, #0
 801ebae:	4602      	mov	r2, r0
 801ebb0:	460b      	mov	r3, r1
 801ebb2:	4620      	mov	r0, r4
 801ebb4:	4629      	mov	r1, r5
 801ebb6:	bfb8      	it	lt
 801ebb8:	f1ca 0a00 	rsblt	sl, sl, #0
 801ebbc:	f7f9 ff6c 	bl	8018a98 <__aeabi_dsub>
 801ebc0:	ec41 0b19 	vmov	d9, r0, r1
 801ebc4:	4642      	mov	r2, r8
 801ebc6:	464b      	mov	r3, r9
 801ebc8:	ec51 0b19 	vmov	r0, r1, d9
 801ebcc:	f7f9 ff66 	bl	8018a9c <__adddf3>
 801ebd0:	a37b      	add	r3, pc, #492	; (adr r3, 801edc0 <__ieee754_pow+0xa00>)
 801ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd6:	2000      	movs	r0, #0
 801ebd8:	4604      	mov	r4, r0
 801ebda:	460d      	mov	r5, r1
 801ebdc:	f7fa f914 	bl	8018e08 <__aeabi_dmul>
 801ebe0:	ec53 2b19 	vmov	r2, r3, d9
 801ebe4:	4606      	mov	r6, r0
 801ebe6:	460f      	mov	r7, r1
 801ebe8:	4620      	mov	r0, r4
 801ebea:	4629      	mov	r1, r5
 801ebec:	f7f9 ff54 	bl	8018a98 <__aeabi_dsub>
 801ebf0:	4602      	mov	r2, r0
 801ebf2:	460b      	mov	r3, r1
 801ebf4:	4640      	mov	r0, r8
 801ebf6:	4649      	mov	r1, r9
 801ebf8:	f7f9 ff4e 	bl	8018a98 <__aeabi_dsub>
 801ebfc:	a372      	add	r3, pc, #456	; (adr r3, 801edc8 <__ieee754_pow+0xa08>)
 801ebfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec02:	f7fa f901 	bl	8018e08 <__aeabi_dmul>
 801ec06:	a372      	add	r3, pc, #456	; (adr r3, 801edd0 <__ieee754_pow+0xa10>)
 801ec08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec0c:	4680      	mov	r8, r0
 801ec0e:	4689      	mov	r9, r1
 801ec10:	4620      	mov	r0, r4
 801ec12:	4629      	mov	r1, r5
 801ec14:	f7fa f8f8 	bl	8018e08 <__aeabi_dmul>
 801ec18:	4602      	mov	r2, r0
 801ec1a:	460b      	mov	r3, r1
 801ec1c:	4640      	mov	r0, r8
 801ec1e:	4649      	mov	r1, r9
 801ec20:	f7f9 ff3c 	bl	8018a9c <__adddf3>
 801ec24:	4604      	mov	r4, r0
 801ec26:	460d      	mov	r5, r1
 801ec28:	4602      	mov	r2, r0
 801ec2a:	460b      	mov	r3, r1
 801ec2c:	4630      	mov	r0, r6
 801ec2e:	4639      	mov	r1, r7
 801ec30:	f7f9 ff34 	bl	8018a9c <__adddf3>
 801ec34:	4632      	mov	r2, r6
 801ec36:	463b      	mov	r3, r7
 801ec38:	4680      	mov	r8, r0
 801ec3a:	4689      	mov	r9, r1
 801ec3c:	f7f9 ff2c 	bl	8018a98 <__aeabi_dsub>
 801ec40:	4602      	mov	r2, r0
 801ec42:	460b      	mov	r3, r1
 801ec44:	4620      	mov	r0, r4
 801ec46:	4629      	mov	r1, r5
 801ec48:	f7f9 ff26 	bl	8018a98 <__aeabi_dsub>
 801ec4c:	4642      	mov	r2, r8
 801ec4e:	4606      	mov	r6, r0
 801ec50:	460f      	mov	r7, r1
 801ec52:	464b      	mov	r3, r9
 801ec54:	4640      	mov	r0, r8
 801ec56:	4649      	mov	r1, r9
 801ec58:	f7fa f8d6 	bl	8018e08 <__aeabi_dmul>
 801ec5c:	a35e      	add	r3, pc, #376	; (adr r3, 801edd8 <__ieee754_pow+0xa18>)
 801ec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec62:	4604      	mov	r4, r0
 801ec64:	460d      	mov	r5, r1
 801ec66:	f7fa f8cf 	bl	8018e08 <__aeabi_dmul>
 801ec6a:	a35d      	add	r3, pc, #372	; (adr r3, 801ede0 <__ieee754_pow+0xa20>)
 801ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec70:	f7f9 ff12 	bl	8018a98 <__aeabi_dsub>
 801ec74:	4622      	mov	r2, r4
 801ec76:	462b      	mov	r3, r5
 801ec78:	f7fa f8c6 	bl	8018e08 <__aeabi_dmul>
 801ec7c:	a35a      	add	r3, pc, #360	; (adr r3, 801ede8 <__ieee754_pow+0xa28>)
 801ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec82:	f7f9 ff0b 	bl	8018a9c <__adddf3>
 801ec86:	4622      	mov	r2, r4
 801ec88:	462b      	mov	r3, r5
 801ec8a:	f7fa f8bd 	bl	8018e08 <__aeabi_dmul>
 801ec8e:	a358      	add	r3, pc, #352	; (adr r3, 801edf0 <__ieee754_pow+0xa30>)
 801ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec94:	f7f9 ff00 	bl	8018a98 <__aeabi_dsub>
 801ec98:	4622      	mov	r2, r4
 801ec9a:	462b      	mov	r3, r5
 801ec9c:	f7fa f8b4 	bl	8018e08 <__aeabi_dmul>
 801eca0:	a355      	add	r3, pc, #340	; (adr r3, 801edf8 <__ieee754_pow+0xa38>)
 801eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eca6:	f7f9 fef9 	bl	8018a9c <__adddf3>
 801ecaa:	4622      	mov	r2, r4
 801ecac:	462b      	mov	r3, r5
 801ecae:	f7fa f8ab 	bl	8018e08 <__aeabi_dmul>
 801ecb2:	4602      	mov	r2, r0
 801ecb4:	460b      	mov	r3, r1
 801ecb6:	4640      	mov	r0, r8
 801ecb8:	4649      	mov	r1, r9
 801ecba:	f7f9 feed 	bl	8018a98 <__aeabi_dsub>
 801ecbe:	4604      	mov	r4, r0
 801ecc0:	460d      	mov	r5, r1
 801ecc2:	4602      	mov	r2, r0
 801ecc4:	460b      	mov	r3, r1
 801ecc6:	4640      	mov	r0, r8
 801ecc8:	4649      	mov	r1, r9
 801ecca:	f7fa f89d 	bl	8018e08 <__aeabi_dmul>
 801ecce:	2200      	movs	r2, #0
 801ecd0:	ec41 0b19 	vmov	d9, r0, r1
 801ecd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ecd8:	4620      	mov	r0, r4
 801ecda:	4629      	mov	r1, r5
 801ecdc:	f7f9 fedc 	bl	8018a98 <__aeabi_dsub>
 801ece0:	4602      	mov	r2, r0
 801ece2:	460b      	mov	r3, r1
 801ece4:	ec51 0b19 	vmov	r0, r1, d9
 801ece8:	f7fa f9b8 	bl	801905c <__aeabi_ddiv>
 801ecec:	4632      	mov	r2, r6
 801ecee:	4604      	mov	r4, r0
 801ecf0:	460d      	mov	r5, r1
 801ecf2:	463b      	mov	r3, r7
 801ecf4:	4640      	mov	r0, r8
 801ecf6:	4649      	mov	r1, r9
 801ecf8:	f7fa f886 	bl	8018e08 <__aeabi_dmul>
 801ecfc:	4632      	mov	r2, r6
 801ecfe:	463b      	mov	r3, r7
 801ed00:	f7f9 fecc 	bl	8018a9c <__adddf3>
 801ed04:	4602      	mov	r2, r0
 801ed06:	460b      	mov	r3, r1
 801ed08:	4620      	mov	r0, r4
 801ed0a:	4629      	mov	r1, r5
 801ed0c:	f7f9 fec4 	bl	8018a98 <__aeabi_dsub>
 801ed10:	4642      	mov	r2, r8
 801ed12:	464b      	mov	r3, r9
 801ed14:	f7f9 fec0 	bl	8018a98 <__aeabi_dsub>
 801ed18:	460b      	mov	r3, r1
 801ed1a:	4602      	mov	r2, r0
 801ed1c:	493a      	ldr	r1, [pc, #232]	; (801ee08 <__ieee754_pow+0xa48>)
 801ed1e:	2000      	movs	r0, #0
 801ed20:	f7f9 feba 	bl	8018a98 <__aeabi_dsub>
 801ed24:	ec41 0b10 	vmov	d0, r0, r1
 801ed28:	ee10 3a90 	vmov	r3, s1
 801ed2c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ed30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ed34:	da2b      	bge.n	801ed8e <__ieee754_pow+0x9ce>
 801ed36:	4650      	mov	r0, sl
 801ed38:	f000 f966 	bl	801f008 <scalbn>
 801ed3c:	ec51 0b10 	vmov	r0, r1, d0
 801ed40:	ec53 2b18 	vmov	r2, r3, d8
 801ed44:	f7ff bbed 	b.w	801e522 <__ieee754_pow+0x162>
 801ed48:	4b30      	ldr	r3, [pc, #192]	; (801ee0c <__ieee754_pow+0xa4c>)
 801ed4a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ed4e:	429e      	cmp	r6, r3
 801ed50:	f77f af0c 	ble.w	801eb6c <__ieee754_pow+0x7ac>
 801ed54:	4b2e      	ldr	r3, [pc, #184]	; (801ee10 <__ieee754_pow+0xa50>)
 801ed56:	440b      	add	r3, r1
 801ed58:	4303      	orrs	r3, r0
 801ed5a:	d009      	beq.n	801ed70 <__ieee754_pow+0x9b0>
 801ed5c:	ec51 0b18 	vmov	r0, r1, d8
 801ed60:	2200      	movs	r2, #0
 801ed62:	2300      	movs	r3, #0
 801ed64:	f7fa fac2 	bl	80192ec <__aeabi_dcmplt>
 801ed68:	3800      	subs	r0, #0
 801ed6a:	bf18      	it	ne
 801ed6c:	2001      	movne	r0, #1
 801ed6e:	e447      	b.n	801e600 <__ieee754_pow+0x240>
 801ed70:	4622      	mov	r2, r4
 801ed72:	462b      	mov	r3, r5
 801ed74:	f7f9 fe90 	bl	8018a98 <__aeabi_dsub>
 801ed78:	4642      	mov	r2, r8
 801ed7a:	464b      	mov	r3, r9
 801ed7c:	f7fa faca 	bl	8019314 <__aeabi_dcmpge>
 801ed80:	2800      	cmp	r0, #0
 801ed82:	f43f aef3 	beq.w	801eb6c <__ieee754_pow+0x7ac>
 801ed86:	e7e9      	b.n	801ed5c <__ieee754_pow+0x99c>
 801ed88:	f04f 0a00 	mov.w	sl, #0
 801ed8c:	e71a      	b.n	801ebc4 <__ieee754_pow+0x804>
 801ed8e:	ec51 0b10 	vmov	r0, r1, d0
 801ed92:	4619      	mov	r1, r3
 801ed94:	e7d4      	b.n	801ed40 <__ieee754_pow+0x980>
 801ed96:	491c      	ldr	r1, [pc, #112]	; (801ee08 <__ieee754_pow+0xa48>)
 801ed98:	2000      	movs	r0, #0
 801ed9a:	f7ff bb30 	b.w	801e3fe <__ieee754_pow+0x3e>
 801ed9e:	2000      	movs	r0, #0
 801eda0:	2100      	movs	r1, #0
 801eda2:	f7ff bb2c 	b.w	801e3fe <__ieee754_pow+0x3e>
 801eda6:	4630      	mov	r0, r6
 801eda8:	4639      	mov	r1, r7
 801edaa:	f7ff bb28 	b.w	801e3fe <__ieee754_pow+0x3e>
 801edae:	9204      	str	r2, [sp, #16]
 801edb0:	f7ff bb7a 	b.w	801e4a8 <__ieee754_pow+0xe8>
 801edb4:	2300      	movs	r3, #0
 801edb6:	f7ff bb64 	b.w	801e482 <__ieee754_pow+0xc2>
 801edba:	bf00      	nop
 801edbc:	f3af 8000 	nop.w
 801edc0:	00000000 	.word	0x00000000
 801edc4:	3fe62e43 	.word	0x3fe62e43
 801edc8:	fefa39ef 	.word	0xfefa39ef
 801edcc:	3fe62e42 	.word	0x3fe62e42
 801edd0:	0ca86c39 	.word	0x0ca86c39
 801edd4:	be205c61 	.word	0xbe205c61
 801edd8:	72bea4d0 	.word	0x72bea4d0
 801eddc:	3e663769 	.word	0x3e663769
 801ede0:	c5d26bf1 	.word	0xc5d26bf1
 801ede4:	3ebbbd41 	.word	0x3ebbbd41
 801ede8:	af25de2c 	.word	0xaf25de2c
 801edec:	3f11566a 	.word	0x3f11566a
 801edf0:	16bebd93 	.word	0x16bebd93
 801edf4:	3f66c16c 	.word	0x3f66c16c
 801edf8:	5555553e 	.word	0x5555553e
 801edfc:	3fc55555 	.word	0x3fc55555
 801ee00:	3fe00000 	.word	0x3fe00000
 801ee04:	000fffff 	.word	0x000fffff
 801ee08:	3ff00000 	.word	0x3ff00000
 801ee0c:	4090cbff 	.word	0x4090cbff
 801ee10:	3f6f3400 	.word	0x3f6f3400
 801ee14:	652b82fe 	.word	0x652b82fe
 801ee18:	3c971547 	.word	0x3c971547

0801ee1c <__ieee754_sqrt>:
 801ee1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee20:	ec55 4b10 	vmov	r4, r5, d0
 801ee24:	4e55      	ldr	r6, [pc, #340]	; (801ef7c <__ieee754_sqrt+0x160>)
 801ee26:	43ae      	bics	r6, r5
 801ee28:	ee10 0a10 	vmov	r0, s0
 801ee2c:	ee10 3a10 	vmov	r3, s0
 801ee30:	462a      	mov	r2, r5
 801ee32:	4629      	mov	r1, r5
 801ee34:	d110      	bne.n	801ee58 <__ieee754_sqrt+0x3c>
 801ee36:	ee10 2a10 	vmov	r2, s0
 801ee3a:	462b      	mov	r3, r5
 801ee3c:	f7f9 ffe4 	bl	8018e08 <__aeabi_dmul>
 801ee40:	4602      	mov	r2, r0
 801ee42:	460b      	mov	r3, r1
 801ee44:	4620      	mov	r0, r4
 801ee46:	4629      	mov	r1, r5
 801ee48:	f7f9 fe28 	bl	8018a9c <__adddf3>
 801ee4c:	4604      	mov	r4, r0
 801ee4e:	460d      	mov	r5, r1
 801ee50:	ec45 4b10 	vmov	d0, r4, r5
 801ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee58:	2d00      	cmp	r5, #0
 801ee5a:	dc10      	bgt.n	801ee7e <__ieee754_sqrt+0x62>
 801ee5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ee60:	4330      	orrs	r0, r6
 801ee62:	d0f5      	beq.n	801ee50 <__ieee754_sqrt+0x34>
 801ee64:	b15d      	cbz	r5, 801ee7e <__ieee754_sqrt+0x62>
 801ee66:	ee10 2a10 	vmov	r2, s0
 801ee6a:	462b      	mov	r3, r5
 801ee6c:	ee10 0a10 	vmov	r0, s0
 801ee70:	f7f9 fe12 	bl	8018a98 <__aeabi_dsub>
 801ee74:	4602      	mov	r2, r0
 801ee76:	460b      	mov	r3, r1
 801ee78:	f7fa f8f0 	bl	801905c <__aeabi_ddiv>
 801ee7c:	e7e6      	b.n	801ee4c <__ieee754_sqrt+0x30>
 801ee7e:	1512      	asrs	r2, r2, #20
 801ee80:	d074      	beq.n	801ef6c <__ieee754_sqrt+0x150>
 801ee82:	07d4      	lsls	r4, r2, #31
 801ee84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ee88:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801ee8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801ee90:	bf5e      	ittt	pl
 801ee92:	0fda      	lsrpl	r2, r3, #31
 801ee94:	005b      	lslpl	r3, r3, #1
 801ee96:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801ee9a:	2400      	movs	r4, #0
 801ee9c:	0fda      	lsrs	r2, r3, #31
 801ee9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801eea2:	107f      	asrs	r7, r7, #1
 801eea4:	005b      	lsls	r3, r3, #1
 801eea6:	2516      	movs	r5, #22
 801eea8:	4620      	mov	r0, r4
 801eeaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801eeae:	1886      	adds	r6, r0, r2
 801eeb0:	428e      	cmp	r6, r1
 801eeb2:	bfde      	ittt	le
 801eeb4:	1b89      	suble	r1, r1, r6
 801eeb6:	18b0      	addle	r0, r6, r2
 801eeb8:	18a4      	addle	r4, r4, r2
 801eeba:	0049      	lsls	r1, r1, #1
 801eebc:	3d01      	subs	r5, #1
 801eebe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801eec2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801eec6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801eeca:	d1f0      	bne.n	801eeae <__ieee754_sqrt+0x92>
 801eecc:	462a      	mov	r2, r5
 801eece:	f04f 0e20 	mov.w	lr, #32
 801eed2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801eed6:	4281      	cmp	r1, r0
 801eed8:	eb06 0c05 	add.w	ip, r6, r5
 801eedc:	dc02      	bgt.n	801eee4 <__ieee754_sqrt+0xc8>
 801eede:	d113      	bne.n	801ef08 <__ieee754_sqrt+0xec>
 801eee0:	459c      	cmp	ip, r3
 801eee2:	d811      	bhi.n	801ef08 <__ieee754_sqrt+0xec>
 801eee4:	f1bc 0f00 	cmp.w	ip, #0
 801eee8:	eb0c 0506 	add.w	r5, ip, r6
 801eeec:	da43      	bge.n	801ef76 <__ieee754_sqrt+0x15a>
 801eeee:	2d00      	cmp	r5, #0
 801eef0:	db41      	blt.n	801ef76 <__ieee754_sqrt+0x15a>
 801eef2:	f100 0801 	add.w	r8, r0, #1
 801eef6:	1a09      	subs	r1, r1, r0
 801eef8:	459c      	cmp	ip, r3
 801eefa:	bf88      	it	hi
 801eefc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ef00:	eba3 030c 	sub.w	r3, r3, ip
 801ef04:	4432      	add	r2, r6
 801ef06:	4640      	mov	r0, r8
 801ef08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ef0c:	f1be 0e01 	subs.w	lr, lr, #1
 801ef10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ef14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ef18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ef1c:	d1db      	bne.n	801eed6 <__ieee754_sqrt+0xba>
 801ef1e:	430b      	orrs	r3, r1
 801ef20:	d006      	beq.n	801ef30 <__ieee754_sqrt+0x114>
 801ef22:	1c50      	adds	r0, r2, #1
 801ef24:	bf13      	iteet	ne
 801ef26:	3201      	addne	r2, #1
 801ef28:	3401      	addeq	r4, #1
 801ef2a:	4672      	moveq	r2, lr
 801ef2c:	f022 0201 	bicne.w	r2, r2, #1
 801ef30:	1063      	asrs	r3, r4, #1
 801ef32:	0852      	lsrs	r2, r2, #1
 801ef34:	07e1      	lsls	r1, r4, #31
 801ef36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ef3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ef3e:	bf48      	it	mi
 801ef40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ef44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ef48:	4614      	mov	r4, r2
 801ef4a:	e781      	b.n	801ee50 <__ieee754_sqrt+0x34>
 801ef4c:	0ad9      	lsrs	r1, r3, #11
 801ef4e:	3815      	subs	r0, #21
 801ef50:	055b      	lsls	r3, r3, #21
 801ef52:	2900      	cmp	r1, #0
 801ef54:	d0fa      	beq.n	801ef4c <__ieee754_sqrt+0x130>
 801ef56:	02cd      	lsls	r5, r1, #11
 801ef58:	d50a      	bpl.n	801ef70 <__ieee754_sqrt+0x154>
 801ef5a:	f1c2 0420 	rsb	r4, r2, #32
 801ef5e:	fa23 f404 	lsr.w	r4, r3, r4
 801ef62:	1e55      	subs	r5, r2, #1
 801ef64:	4093      	lsls	r3, r2
 801ef66:	4321      	orrs	r1, r4
 801ef68:	1b42      	subs	r2, r0, r5
 801ef6a:	e78a      	b.n	801ee82 <__ieee754_sqrt+0x66>
 801ef6c:	4610      	mov	r0, r2
 801ef6e:	e7f0      	b.n	801ef52 <__ieee754_sqrt+0x136>
 801ef70:	0049      	lsls	r1, r1, #1
 801ef72:	3201      	adds	r2, #1
 801ef74:	e7ef      	b.n	801ef56 <__ieee754_sqrt+0x13a>
 801ef76:	4680      	mov	r8, r0
 801ef78:	e7bd      	b.n	801eef6 <__ieee754_sqrt+0xda>
 801ef7a:	bf00      	nop
 801ef7c:	7ff00000 	.word	0x7ff00000

0801ef80 <with_errno>:
 801ef80:	b570      	push	{r4, r5, r6, lr}
 801ef82:	4604      	mov	r4, r0
 801ef84:	460d      	mov	r5, r1
 801ef86:	4616      	mov	r6, r2
 801ef88:	f7fa fc6c 	bl	8019864 <__errno>
 801ef8c:	4629      	mov	r1, r5
 801ef8e:	6006      	str	r6, [r0, #0]
 801ef90:	4620      	mov	r0, r4
 801ef92:	bd70      	pop	{r4, r5, r6, pc}

0801ef94 <xflow>:
 801ef94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ef96:	4614      	mov	r4, r2
 801ef98:	461d      	mov	r5, r3
 801ef9a:	b108      	cbz	r0, 801efa0 <xflow+0xc>
 801ef9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801efa0:	e9cd 2300 	strd	r2, r3, [sp]
 801efa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801efa8:	4620      	mov	r0, r4
 801efaa:	4629      	mov	r1, r5
 801efac:	f7f9 ff2c 	bl	8018e08 <__aeabi_dmul>
 801efb0:	2222      	movs	r2, #34	; 0x22
 801efb2:	b003      	add	sp, #12
 801efb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801efb8:	f7ff bfe2 	b.w	801ef80 <with_errno>

0801efbc <__math_uflow>:
 801efbc:	b508      	push	{r3, lr}
 801efbe:	2200      	movs	r2, #0
 801efc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801efc4:	f7ff ffe6 	bl	801ef94 <xflow>
 801efc8:	ec41 0b10 	vmov	d0, r0, r1
 801efcc:	bd08      	pop	{r3, pc}

0801efce <__math_oflow>:
 801efce:	b508      	push	{r3, lr}
 801efd0:	2200      	movs	r2, #0
 801efd2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801efd6:	f7ff ffdd 	bl	801ef94 <xflow>
 801efda:	ec41 0b10 	vmov	d0, r0, r1
 801efde:	bd08      	pop	{r3, pc}

0801efe0 <fabs>:
 801efe0:	ec51 0b10 	vmov	r0, r1, d0
 801efe4:	ee10 2a10 	vmov	r2, s0
 801efe8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801efec:	ec43 2b10 	vmov	d0, r2, r3
 801eff0:	4770      	bx	lr

0801eff2 <finite>:
 801eff2:	b082      	sub	sp, #8
 801eff4:	ed8d 0b00 	vstr	d0, [sp]
 801eff8:	9801      	ldr	r0, [sp, #4]
 801effa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801effe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f002:	0fc0      	lsrs	r0, r0, #31
 801f004:	b002      	add	sp, #8
 801f006:	4770      	bx	lr

0801f008 <scalbn>:
 801f008:	b570      	push	{r4, r5, r6, lr}
 801f00a:	ec55 4b10 	vmov	r4, r5, d0
 801f00e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f012:	4606      	mov	r6, r0
 801f014:	462b      	mov	r3, r5
 801f016:	b99a      	cbnz	r2, 801f040 <scalbn+0x38>
 801f018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f01c:	4323      	orrs	r3, r4
 801f01e:	d036      	beq.n	801f08e <scalbn+0x86>
 801f020:	4b39      	ldr	r3, [pc, #228]	; (801f108 <scalbn+0x100>)
 801f022:	4629      	mov	r1, r5
 801f024:	ee10 0a10 	vmov	r0, s0
 801f028:	2200      	movs	r2, #0
 801f02a:	f7f9 feed 	bl	8018e08 <__aeabi_dmul>
 801f02e:	4b37      	ldr	r3, [pc, #220]	; (801f10c <scalbn+0x104>)
 801f030:	429e      	cmp	r6, r3
 801f032:	4604      	mov	r4, r0
 801f034:	460d      	mov	r5, r1
 801f036:	da10      	bge.n	801f05a <scalbn+0x52>
 801f038:	a32b      	add	r3, pc, #172	; (adr r3, 801f0e8 <scalbn+0xe0>)
 801f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f03e:	e03a      	b.n	801f0b6 <scalbn+0xae>
 801f040:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f044:	428a      	cmp	r2, r1
 801f046:	d10c      	bne.n	801f062 <scalbn+0x5a>
 801f048:	ee10 2a10 	vmov	r2, s0
 801f04c:	4620      	mov	r0, r4
 801f04e:	4629      	mov	r1, r5
 801f050:	f7f9 fd24 	bl	8018a9c <__adddf3>
 801f054:	4604      	mov	r4, r0
 801f056:	460d      	mov	r5, r1
 801f058:	e019      	b.n	801f08e <scalbn+0x86>
 801f05a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f05e:	460b      	mov	r3, r1
 801f060:	3a36      	subs	r2, #54	; 0x36
 801f062:	4432      	add	r2, r6
 801f064:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f068:	428a      	cmp	r2, r1
 801f06a:	dd08      	ble.n	801f07e <scalbn+0x76>
 801f06c:	2d00      	cmp	r5, #0
 801f06e:	a120      	add	r1, pc, #128	; (adr r1, 801f0f0 <scalbn+0xe8>)
 801f070:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f074:	da1c      	bge.n	801f0b0 <scalbn+0xa8>
 801f076:	a120      	add	r1, pc, #128	; (adr r1, 801f0f8 <scalbn+0xf0>)
 801f078:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f07c:	e018      	b.n	801f0b0 <scalbn+0xa8>
 801f07e:	2a00      	cmp	r2, #0
 801f080:	dd08      	ble.n	801f094 <scalbn+0x8c>
 801f082:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f08a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f08e:	ec45 4b10 	vmov	d0, r4, r5
 801f092:	bd70      	pop	{r4, r5, r6, pc}
 801f094:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f098:	da19      	bge.n	801f0ce <scalbn+0xc6>
 801f09a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f09e:	429e      	cmp	r6, r3
 801f0a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f0a4:	dd0a      	ble.n	801f0bc <scalbn+0xb4>
 801f0a6:	a112      	add	r1, pc, #72	; (adr r1, 801f0f0 <scalbn+0xe8>)
 801f0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d1e2      	bne.n	801f076 <scalbn+0x6e>
 801f0b0:	a30f      	add	r3, pc, #60	; (adr r3, 801f0f0 <scalbn+0xe8>)
 801f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0b6:	f7f9 fea7 	bl	8018e08 <__aeabi_dmul>
 801f0ba:	e7cb      	b.n	801f054 <scalbn+0x4c>
 801f0bc:	a10a      	add	r1, pc, #40	; (adr r1, 801f0e8 <scalbn+0xe0>)
 801f0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d0b8      	beq.n	801f038 <scalbn+0x30>
 801f0c6:	a10e      	add	r1, pc, #56	; (adr r1, 801f100 <scalbn+0xf8>)
 801f0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0cc:	e7b4      	b.n	801f038 <scalbn+0x30>
 801f0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f0d2:	3236      	adds	r2, #54	; 0x36
 801f0d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f0d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f0dc:	4620      	mov	r0, r4
 801f0de:	4b0c      	ldr	r3, [pc, #48]	; (801f110 <scalbn+0x108>)
 801f0e0:	2200      	movs	r2, #0
 801f0e2:	e7e8      	b.n	801f0b6 <scalbn+0xae>
 801f0e4:	f3af 8000 	nop.w
 801f0e8:	c2f8f359 	.word	0xc2f8f359
 801f0ec:	01a56e1f 	.word	0x01a56e1f
 801f0f0:	8800759c 	.word	0x8800759c
 801f0f4:	7e37e43c 	.word	0x7e37e43c
 801f0f8:	8800759c 	.word	0x8800759c
 801f0fc:	fe37e43c 	.word	0xfe37e43c
 801f100:	c2f8f359 	.word	0xc2f8f359
 801f104:	81a56e1f 	.word	0x81a56e1f
 801f108:	43500000 	.word	0x43500000
 801f10c:	ffff3cb0 	.word	0xffff3cb0
 801f110:	3c900000 	.word	0x3c900000

0801f114 <_init>:
 801f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f116:	bf00      	nop
 801f118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f11a:	bc08      	pop	{r3}
 801f11c:	469e      	mov	lr, r3
 801f11e:	4770      	bx	lr

0801f120 <_fini>:
 801f120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f122:	bf00      	nop
 801f124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f126:	bc08      	pop	{r3}
 801f128:	469e      	mov	lr, r3
 801f12a:	4770      	bx	lr
