
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e9c8  08011030  08011030  00021030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f9f8  0801f9f8  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  0801f9f8  0801f9f8  0002f9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fa00  0801fa00  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fa00  0801fa00  0002fa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fa04  0801fa04  0002fa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0801fa08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030250  2**0
                  CONTENTS
 10 .bss          00000f50  20000250  20000250  00030250  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  200011a0  200011a0  00030250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018871  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003793  00000000  00000000  00048af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0004c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0004d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002572f  00000000  00000000  0004e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a404  00000000  00000000  00073ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4fc4  00000000  00000000  0008e3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001633bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006adc  00000000  00000000  00163410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011014 	.word	0x08011014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	08011014 	.word	0x08011014

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <AT24XX_Save>:
		return 1;
	else
		return 0;
}

uint8_t AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b20      	cmp	r3, #32
 800100a:	d901      	bls.n	8001010 <AT24XX_Save+0x18>
		return 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e016      	b.n	800103e <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	b29b      	uxth	r3, r3
 8001014:	89fa      	ldrh	r2, [r7, #14]
 8001016:	f04f 31ff 	mov.w	r1, #4294967295
 800101a:	9102      	str	r1, [sp, #8]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2310      	movs	r3, #16
 8001024:	21ae      	movs	r1, #174	; 0xae
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <AT24XX_Save+0x50>)
 8001028:	f006 fa3c 	bl	80074a4 <HAL_I2C_Mem_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8001032:	2005      	movs	r0, #5
 8001034:	f005 f89c 	bl	8006170 <HAL_Delay>
			return 1;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <AT24XX_Save+0x46>
} else
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002d0 	.word	0x200002d0

0800104c <AT24XX_Load>:

uint8_t AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	9102      	str	r1, [sp, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2310      	movs	r3, #16
 800106e:	21ae      	movs	r1, #174	; 0xae
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <AT24XX_Load+0x40>)
 8001072:	f006 fb11 	bl	8007698 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <AT24XX_Load+0x36>
} else
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002d0 	.word	0x200002d0

08001090 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800109a:	2300      	movs	r3, #0
 800109c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffd0 	bl	800104c <AT24XX_Load>
	return dt[0];
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	4613      	mov	r3, r2
 80010c6:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	2201      	movs	r2, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff8f 	bl	8000ff8 <AT24XX_Save>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	460a      	mov	r2, r1
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffcb 	bl	8001090 <AT24XX_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	4293      	cmp	r3, r2
 8001102:	d005      	beq.n	8001110 <AT24XX_Update+0x2e>
 8001104:	797a      	ldrb	r2, [r7, #5]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffd4 	bl	80010b8 <AT24XX_Write>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001122:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112e:	f7ff fb8d 	bl	800084c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <round_eps+0x68>)
 8001140:	f7ff f8a4 	bl	800028c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b17 	vmov	d7, r2, r3
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	f00e ffc4 	bl	80100e0 <floor>
 8001158:	ec51 0b10 	vmov	r0, r1, d0
 800115c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd3c 	bl	8000be8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	3fe00000 	.word	0x3fe00000
 8001184:	00000000 	.word	0x00000000

08001188 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f9d6 	bl	8000548 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9bd 	bl	8000524 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b11 	vmov	d1, r2, r3
 80011b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80011e0 <round_nth+0x58>
 80011b6:	f00f f813 	bl	80101e0 <pow>
 80011ba:	eeb0 7a40 	vmov.f32	s14, s0
 80011be:	eef0 7a60 	vmov.f32	s15, s1
 80011c2:	eeb0 1a47 	vmov.f32	s2, s14
 80011c6:	eef0 1a67 	vmov.f32	s3, s15
 80011ca:	ec45 4b10 	vmov	d0, r4, r5
 80011ce:	f7ff ffa3 	bl	8001118 <round_eps>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40240000 	.word	0x40240000

080011e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80011f2:	23fa      	movs	r3, #250	; 0xfa
 80011f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	482e      	ldr	r0, [pc, #184]	; (80012c0 <BME280_getTemperature+0xd8>)
 8001206:	f005 fe29 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2303      	movs	r3, #3
 8001218:	21ec      	movs	r1, #236	; 0xec
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <BME280_getTemperature+0xd8>)
 800121c:	f005 ff1c 	bl	8007058 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001220:	7a7b      	ldrb	r3, [r7, #9]
 8001222:	031a      	lsls	r2, r3, #12
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4313      	orrs	r3, r2
 800122a:	7afa      	ldrb	r2, [r7, #11]
 800122c:	0912      	lsrs	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <BME280_getTemperature+0xdc>)
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <BME280_getTemperature+0xe0>)
 8001242:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	491c      	ldr	r1, [pc, #112]	; (80012c4 <BME280_getTemperature+0xdc>)
 8001252:	8809      	ldrh	r1, [r1, #0]
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	6979      	ldr	r1, [r7, #20]
 8001258:	0909      	lsrs	r1, r1, #4
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <BME280_getTemperature+0xdc>)
 800125c:	8800      	ldrh	r0, [r0, #0]
 800125e:	1a09      	subs	r1, r1, r0
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	0b1b      	lsrs	r3, r3, #12
 8001266:	4919      	ldr	r1, [pc, #100]	; (80012cc <BME280_getTemperature+0xe4>)
 8001268:	f9b1 1000 	ldrsh.w	r1, [r1]
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001272:	4413      	add	r3, r2
    temp =
 8001274:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <BME280_getTemperature+0xe8>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3380      	adds	r3, #128	; 0x80
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001294:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8001298:	edd7 7a03 	vldr	s15, [r7, #12]
 800129c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80012d4 <BME280_getTemperature+0xec>
 80012a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	f7ff ff6b 	bl	8001188 <round_nth>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002d0 	.word	0x200002d0
 80012c4:	2000026c 	.word	0x2000026c
 80012c8:	2000026e 	.word	0x2000026e
 80012cc:	20000270 	.word	0x20000270
 80012d0:	20000290 	.word	0x20000290
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80012e2:	23fd      	movs	r3, #253	; 0xfd
 80012e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	21ec      	movs	r1, #236	; 0xec
 80012f4:	4840      	ldr	r0, [pc, #256]	; (80013f8 <BME280_getHumidity+0x120>)
 80012f6:	f005 fdb1 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, HAL_MAX_DELAY);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2302      	movs	r3, #2
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	483b      	ldr	r0, [pc, #236]	; (80013f8 <BME280_getHumidity+0x120>)
 800130c:	f005 fea4 	bl	8007058 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 8001310:	7a7b      	ldrb	r3, [r7, #9]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	7aba      	ldrb	r2, [r7, #10]
 8001316:	4313      	orrs	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <BME280_getHumidity+0x124>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001322:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <BME280_getHumidity+0x128>)
 800132a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800132e:	0512      	lsls	r2, r2, #20
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <BME280_getHumidity+0x12c>)
 8001334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001338:	4611      	mov	r1, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	fb01 f202 	mul.w	r2, r1, r2
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001346:	0bdb      	lsrs	r3, r3, #15
 8001348:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <BME280_getHumidity+0x130>)
 800134a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800134e:	4611      	mov	r1, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	fb01 f202 	mul.w	r2, r1, r2
 8001356:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001358:	492c      	ldr	r1, [pc, #176]	; (800140c <BME280_getHumidity+0x134>)
 800135a:	8809      	ldrh	r1, [r1, #0]
 800135c:	4608      	mov	r0, r1
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	fb00 f101 	mul.w	r1, r0, r1
 8001364:	12c9      	asrs	r1, r1, #11
 8001366:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800136a:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800136e:	1292      	asrs	r2, r2, #10
 8001370:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8001374:	4926      	ldr	r1, [pc, #152]	; (8001410 <BME280_getHumidity+0x138>)
 8001376:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800137a:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800137e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001382:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001384:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001388:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	13db      	asrs	r3, r3, #15
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	13d2      	asrs	r2, r2, #15
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	11db      	asrs	r3, r3, #7
 8001398:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <BME280_getHumidity+0x13c>)
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	111b      	asrs	r3, r3, #4
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80013ae:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80013b6:	bfa8      	it	ge
 80013b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80013bc:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ca:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001418 <BME280_getHumidity+0x140>
 80013d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	eeb0 0a47 	vmov.f32	s0, s14
 80013e4:	f7ff fed0 	bl	8001188 <round_nth>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002d0 	.word	0x200002d0
 80013fc:	20000290 	.word	0x20000290
 8001400:	2000028a 	.word	0x2000028a
 8001404:	2000028c 	.word	0x2000028c
 8001408:	2000028e 	.word	0x2000028e
 800140c:	20000286 	.word	0x20000286
 8001410:	20000288 	.word	0x20000288
 8001414:	20000284 	.word	0x20000284
 8001418:	44800000 	.word	0x44800000

0800141c <BME280_getPressure>:

float BME280_getPressure(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 8001422:	23f7      	movs	r3, #247	; 0xf7
 8001424:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001426:	463a      	mov	r2, r7
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	485d      	ldr	r0, [pc, #372]	; (80015a8 <BME280_getPressure+0x18c>)
 8001434:	f005 fd12 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 8001438:	463b      	mov	r3, r7
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2303      	movs	r3, #3
 8001444:	21ec      	movs	r1, #236	; 0xec
 8001446:	4858      	ldr	r0, [pc, #352]	; (80015a8 <BME280_getPressure+0x18c>)
 8001448:	f005 fe06 	bl	8007058 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	031a      	lsls	r2, r3, #12
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4313      	orrs	r3, r2
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	0912      	lsrs	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <BME280_getPressure+0x190>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	105b      	asrs	r3, r3, #1
 8001466:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800146a:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	12db      	asrs	r3, r3, #11
 800147a:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <BME280_getPressure+0x194>)
 800147c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <BME280_getPressure+0x198>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	109a      	asrs	r2, r3, #2
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <BME280_getPressure+0x19c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	4413      	add	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <BME280_getPressure+0x1a0>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	109b      	asrs	r3, r3, #2
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	1092      	asrs	r2, r2, #2
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	135b      	asrs	r3, r3, #13
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	10da      	asrs	r2, r3, #3
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <BME280_getPressure+0x1a4>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	4619      	mov	r1, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	105b      	asrs	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	149b      	asrs	r3, r3, #18
 80014dc:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014e4:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <BME280_getPressure+0x1a8>)
 80014e6:	8812      	ldrh	r2, [r2, #0]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	13db      	asrs	r3, r3, #15
 80014ee:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <BME280_getPressure+0xe0>
        return 0;
 80014f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80015c8 <BME280_getPressure+0x1ac>
 80014fa:	e04e      	b.n	800159a <BME280_getPressure+0x17e>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	131b      	asrs	r3, r3, #12
 8001500:	461a      	mov	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4413      	add	r3, r2
 8001506:	4a31      	ldr	r2, [pc, #196]	; (80015cc <BME280_getPressure+0x1b0>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001510:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001514:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db06      	blt.n	800152a <BME280_getPressure+0x10e>
        press = (press << 1) / var1;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005a      	lsls	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e005      	b.n	8001536 <BME280_getPressure+0x11a>
    } else {
        press = (press / var1) * 2;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <BME280_getPressure+0x1b4>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	4619      	mov	r1, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	08d2      	lsrs	r2, r2, #3
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	131b      	asrs	r3, r3, #12
 8001552:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	461a      	mov	r2, r3
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <BME280_getPressure+0x1b8>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	135b      	asrs	r3, r3, #13
 8001566:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <BME280_getPressure+0x1bc>)
 8001570:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001574:	4413      	add	r3, r2
 8001576:	111b      	asrs	r3, r3, #4
 8001578:	461a      	mov	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	4413      	add	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eddf 6a12 	vldr	s13, [pc, #72]	; 80015dc <BME280_getPressure+0x1c0>
 8001596:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800159a:	eef0 7a47 	vmov.f32	s15, s14
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002d0 	.word	0x200002d0
 80015ac:	20000290 	.word	0x20000290
 80015b0:	2000027c 	.word	0x2000027c
 80015b4:	2000027a 	.word	0x2000027a
 80015b8:	20000278 	.word	0x20000278
 80015bc:	20000276 	.word	0x20000276
 80015c0:	20000274 	.word	0x20000274
 80015c4:	20000272 	.word	0x20000272
 80015c8:	00000000 	.word	0x00000000
 80015cc:	fffff3cb 	.word	0xfffff3cb
 80015d0:	20000282 	.word	0x20000282
 80015d4:	20000280 	.word	0x20000280
 80015d8:	2000027e 	.word	0x2000027e
 80015dc:	42c80000 	.word	0x42c80000

080015e0 <BME280_Init>:

void BME280_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80015e6:	23f2      	movs	r3, #242	; 0xf2
 80015e8:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80015ea:	2305      	movs	r3, #5
 80015ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 80015ee:	1d3a      	adds	r2, r7, #4
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2302      	movs	r3, #2
 80015f8:	21ec      	movs	r1, #236	; 0xec
 80015fa:	4888      	ldr	r0, [pc, #544]	; (800181c <BME280_Init+0x23c>)
 80015fc:	f005 fc2e 	bl	8006e5c <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 8001600:	23f4      	movs	r3, #244	; 0xf4
 8001602:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8001604:	23b7      	movs	r3, #183	; 0xb7
 8001606:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	21ec      	movs	r1, #236	; 0xec
 8001614:	4881      	ldr	r0, [pc, #516]	; (800181c <BME280_Init+0x23c>)
 8001616:	f005 fc21 	bl	8006e5c <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 800161a:	23f5      	movs	r3, #245	; 0xf5
 800161c:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby HAL_MAX_DELAYms, Filter off
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001622:	1d3a      	adds	r2, r7, #4
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2302      	movs	r3, #2
 800162c:	21ec      	movs	r1, #236	; 0xec
 800162e:	487b      	ldr	r0, [pc, #492]	; (800181c <BME280_Init+0x23c>)
 8001630:	f005 fc14 	bl	8006e5c <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 8001634:	2388      	movs	r3, #136	; 0x88
 8001636:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001638:	1d3a      	adds	r2, r7, #4
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	21ec      	movs	r1, #236	; 0xec
 8001644:	4875      	ldr	r0, [pc, #468]	; (800181c <BME280_Init+0x23c>)
 8001646:	f005 fc09 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, HAL_MAX_DELAY);
 800164a:	1d3a      	adds	r2, r7, #4
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2306      	movs	r3, #6
 8001654:	21ec      	movs	r1, #236	; 0xec
 8001656:	4871      	ldr	r0, [pc, #452]	; (800181c <BME280_Init+0x23c>)
 8001658:	f005 fcfe 	bl	8007058 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	793b      	ldrb	r3, [r7, #4]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <BME280_Init+0x240>)
 800166e:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b69      	ldr	r3, [pc, #420]	; (8001824 <BME280_Init+0x244>)
 8001680:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001682:	7a7b      	ldrb	r3, [r7, #9]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7a3b      	ldrb	r3, [r7, #8]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <BME280_Init+0x248>)
 8001692:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8001694:	238e      	movs	r3, #142	; 0x8e
 8001696:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001698:	1d3a      	adds	r2, r7, #4
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	21ec      	movs	r1, #236	; 0xec
 80016a4:	485d      	ldr	r0, [pc, #372]	; (800181c <BME280_Init+0x23c>)
 80016a6:	f005 fbd9 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, HAL_MAX_DELAY);
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2312      	movs	r3, #18
 80016b4:	21ec      	movs	r1, #236	; 0xec
 80016b6:	4859      	ldr	r0, [pc, #356]	; (800181c <BME280_Init+0x23c>)
 80016b8:	f005 fcce 	bl	8007058 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	793b      	ldrb	r3, [r7, #4]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <BME280_Init+0x24c>)
 80016ce:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <BME280_Init+0x250>)
 80016e0:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <BME280_Init+0x254>)
 80016f2:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7abb      	ldrb	r3, [r7, #10]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <BME280_Init+0x258>)
 8001704:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001706:	7b7b      	ldrb	r3, [r7, #13]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7b3b      	ldrb	r3, [r7, #12]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <BME280_Init+0x25c>)
 8001716:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <BME280_Init+0x260>)
 8001728:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800172a:	7c7b      	ldrb	r3, [r7, #17]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	7c3b      	ldrb	r3, [r7, #16]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21a      	sxth	r2, r3
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <BME280_Init+0x264>)
 800173a:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	7cbb      	ldrb	r3, [r7, #18]
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <BME280_Init+0x268>)
 800174c:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800174e:	7d7b      	ldrb	r3, [r7, #21]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	7d3b      	ldrb	r3, [r7, #20]
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <BME280_Init+0x26c>)
 800175e:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 8001760:	23a1      	movs	r3, #161	; 0xa1
 8001762:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	21ec      	movs	r1, #236	; 0xec
 8001770:	482a      	ldr	r0, [pc, #168]	; (800181c <BME280_Init+0x23c>)
 8001772:	f005 fb73 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001776:	1d3a      	adds	r2, r7, #4
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	21ec      	movs	r1, #236	; 0xec
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <BME280_Init+0x23c>)
 8001784:	f005 fc68 	bl	8007058 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8001788:	23e1      	movs	r3, #225	; 0xe1
 800178a:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, HAL_MAX_DELAY);
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	21ec      	movs	r1, #236	; 0xec
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <BME280_Init+0x23c>)
 800179c:	f005 fb5e 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, HAL_MAX_DELAY);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2307      	movs	r3, #7
 80017ac:	21ec      	movs	r1, #236	; 0xec
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <BME280_Init+0x23c>)
 80017b0:	f005 fc52 	bl	8007058 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <BME280_Init+0x270>)
 80017ba:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	797b      	ldrb	r3, [r7, #5]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <BME280_Init+0x274>)
 80017cc:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <BME280_Init+0x278>)
 80017d4:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <BME280_Init+0x27c>)
 80017ec:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80017ee:	7abb      	ldrb	r3, [r7, #10]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7a7b      	ldrb	r3, [r7, #9]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <BME280_Init+0x280>)
 8001808:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <BME280_Init+0x284>)
 8001810:	801a      	strh	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200002d0 	.word	0x200002d0
 8001820:	2000026c 	.word	0x2000026c
 8001824:	2000026e 	.word	0x2000026e
 8001828:	20000270 	.word	0x20000270
 800182c:	20000272 	.word	0x20000272
 8001830:	20000274 	.word	0x20000274
 8001834:	20000276 	.word	0x20000276
 8001838:	20000278 	.word	0x20000278
 800183c:	2000027a 	.word	0x2000027a
 8001840:	2000027c 	.word	0x2000027c
 8001844:	2000027e 	.word	0x2000027e
 8001848:	20000280 	.word	0x20000280
 800184c:	20000282 	.word	0x20000282
 8001850:	20000284 	.word	0x20000284
 8001854:	20000288 	.word	0x20000288
 8001858:	20000286 	.word	0x20000286
 800185c:	2000028a 	.word	0x2000028a
 8001860:	2000028c 	.word	0x2000028c
 8001864:	2000028e 	.word	0x2000028e

08001868 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <decToBcd+0x40>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	b2d8      	uxtb	r0, r3
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <decToBcd+0x40>)
 8001886:	fba3 1302 	umull	r1, r3, r3, r2
 800188a:	08d9      	lsrs	r1, r3, #3
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4403      	add	r3, r0
 800189a:	b2db      	uxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	cccccccd 	.word	0xcccccccd

080018ac <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b2db      	uxtb	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <DS3231_Update>:

void DS3231_Update(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 80018ea:	1dba      	adds	r2, r7, #6
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2301      	movs	r3, #1
 80018f4:	21d0      	movs	r1, #208	; 0xd0
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <DS3231_Update+0x58>)
 80018f8:	f005 fab0 	bl	8006e5c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, HAL_MAX_DELAY);
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2313      	movs	r3, #19
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <DS3231_Update+0x5c>)
 8001906:	21d0      	movs	r1, #208	; 0xd0
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <DS3231_Update+0x58>)
 800190a:	f005 fba5 	bl	8007058 <HAL_I2C_Master_Receive>
    for (uint8_t i = 0; i < 16; i++) rtcBufferSet[i+1] = rtcBuffer[i];
 800190e:	2300      	movs	r3, #0
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	e009      	b.n	8001928 <DS3231_Update+0x48>
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3301      	adds	r3, #1
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <DS3231_Update+0x5c>)
 800191c:	5c89      	ldrb	r1, [r1, r2]
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <DS3231_Update+0x60>)
 8001920:	54d1      	strb	r1, [r2, r3]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3301      	adds	r3, #1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	d9f2      	bls.n	8001914 <DS3231_Update+0x34>
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200002d0 	.word	0x200002d0
 800193c:	20000294 	.word	0x20000294
 8001940:	200002a8 	.word	0x200002a8

08001944 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[0]);
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <DS3231_getSec+0x14>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ffad 	bl	80018ac <bcdToDec>
 8001952:	4603      	mov	r3, r0
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000294 	.word	0x20000294

0800195c <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[1]);
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <DS3231_getMin+0x14>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffa1 	bl	80018ac <bcdToDec>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000294 	.word	0x20000294

08001974 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[2]);
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <DS3231_getHrs+0x14>)
 800197a:	789b      	ldrb	r3, [r3, #2]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff95 	bl	80018ac <bcdToDec>
 8001982:	4603      	mov	r3, r0
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000294 	.word	0x20000294

0800198c <DS3231_getWeekDay>:

uint8_t DS3231_getWeekDay(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[3]);
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <DS3231_getWeekDay+0x14>)
 8001992:	78db      	ldrb	r3, [r3, #3]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff89 	bl	80018ac <bcdToDec>
 800199a:	4603      	mov	r3, r0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000294 	.word	0x20000294

080019a4 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[4]);
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <DS3231_getDate+0x14>)
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff7d 	bl	80018ac <bcdToDec>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000294 	.word	0x20000294

080019bc <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[5]);
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <DS3231_getMonth+0x14>)
 80019c2:	795b      	ldrb	r3, [r3, #5]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff71 	bl	80018ac <bcdToDec>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000294 	.word	0x20000294

080019d4 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[6]);
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <DS3231_getYear+0x14>)
 80019da:	799b      	ldrb	r3, [r3, #6]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff65 	bl	80018ac <bcdToDec>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000294 	.word	0x20000294

080019ec <DS3231_setSec>:
    t *= 0.25;
    t += tempMSB;
    return t;
}

void DS3231_setSec(uint8_t value) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[1] = decToBcd(value);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <decToBcd>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <DS3231_setSec+0x34>)
 8001a04:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2311      	movs	r3, #17
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <DS3231_setSec+0x34>)
 8001a10:	21d0      	movs	r1, #208	; 0xd0
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <DS3231_setSec+0x38>)
 8001a14:	f005 fa22 	bl	8006e5c <HAL_I2C_Master_Transmit>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200002a8 	.word	0x200002a8
 8001a24:	200002d0 	.word	0x200002d0

08001a28 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[2] = decToBcd(value);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff17 	bl	8001868 <decToBcd>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <DS3231_setMin+0x34>)
 8001a40:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2311      	movs	r3, #17
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <DS3231_setMin+0x34>)
 8001a4c:	21d0      	movs	r1, #208	; 0xd0
 8001a4e:	4804      	ldr	r0, [pc, #16]	; (8001a60 <DS3231_setMin+0x38>)
 8001a50:	f005 fa04 	bl	8006e5c <HAL_I2C_Master_Transmit>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200002a8 	.word	0x200002a8
 8001a60:	200002d0 	.word	0x200002d0

08001a64 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[3] = decToBcd(value);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fef9 	bl	8001868 <decToBcd>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <DS3231_setHrs+0x34>)
 8001a7c:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2311      	movs	r3, #17
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <DS3231_setHrs+0x34>)
 8001a88:	21d0      	movs	r1, #208	; 0xd0
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <DS3231_setHrs+0x38>)
 8001a8c:	f005 f9e6 	bl	8006e5c <HAL_I2C_Master_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200002a8 	.word	0x200002a8
 8001a9c:	200002d0 	.word	0x200002d0

08001aa0 <DS3231_setWeekDay>:

void DS3231_setWeekDay(uint8_t value) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[4] = decToBcd(value);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fedb 	bl	8001868 <decToBcd>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <DS3231_setWeekDay+0x34>)
 8001ab8:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2311      	movs	r3, #17
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <DS3231_setWeekDay+0x34>)
 8001ac4:	21d0      	movs	r1, #208	; 0xd0
 8001ac6:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <DS3231_setWeekDay+0x38>)
 8001ac8:	f005 f9c8 	bl	8006e5c <HAL_I2C_Master_Transmit>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200002a8 	.word	0x200002a8
 8001ad8:	200002d0 	.word	0x200002d0

08001adc <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[5] = decToBcd(value);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff febd 	bl	8001868 <decToBcd>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <DS3231_setDate+0x34>)
 8001af4:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2311      	movs	r3, #17
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <DS3231_setDate+0x34>)
 8001b00:	21d0      	movs	r1, #208	; 0xd0
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <DS3231_setDate+0x38>)
 8001b04:	f005 f9aa 	bl	8006e5c <HAL_I2C_Master_Transmit>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200002a8 	.word	0x200002a8
 8001b14:	200002d0 	.word	0x200002d0

08001b18 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[6] = decToBcd(value);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fe9f 	bl	8001868 <decToBcd>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <DS3231_setMonth+0x34>)
 8001b30:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2311      	movs	r3, #17
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <DS3231_setMonth+0x34>)
 8001b3c:	21d0      	movs	r1, #208	; 0xd0
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <DS3231_setMonth+0x38>)
 8001b40:	f005 f98c 	bl	8006e5c <HAL_I2C_Master_Transmit>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200002a8 	.word	0x200002a8
 8001b50:	200002d0 	.word	0x200002d0

08001b54 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[7] = decToBcd(value);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe81 	bl	8001868 <decToBcd>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <DS3231_setYear+0x34>)
 8001b6c:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2311      	movs	r3, #17
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <DS3231_setYear+0x34>)
 8001b78:	21d0      	movs	r1, #208	; 0xd0
 8001b7a:	4804      	ldr	r0, [pc, #16]	; (8001b8c <DS3231_setYear+0x38>)
 8001b7c:	f005 f96e 	bl	8006e5c <HAL_I2C_Master_Transmit>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200002a8 	.word	0x200002a8
 8001b8c:	200002d0 	.word	0x200002d0

08001b90 <I2C_Scan_Bus>:

#if (INIT_DEBUG == 1)
extern UART_HandleTypeDef &DEBUG_UART_I2C;
#endif

void I2C_Scan_Bus(I2C_HandleTypeDef *hi2c) {
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b09a      	sub	sp, #104	; 0x68
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    char info[] = "SCANNING I2C BUS... \r\n";
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <I2C_Scan_Bus+0xbc>)
 8001b9a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ba8:	6020      	str	r0, [r4, #0]
 8001baa:	3404      	adds	r4, #4
 8001bac:	8021      	strh	r1, [r4, #0]
 8001bae:	3402      	adds	r4, #2
 8001bb0:	0c0b      	lsrs	r3, r1, #16
 8001bb2:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&DEBUG_UART_I2C, (uint8_t*)info, strlen(info), 1000);
 8001bb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fb09 	bl	80001d0 <strlen>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	4821      	ldr	r0, [pc, #132]	; (8001c50 <I2C_Scan_Bus+0xc0>)
 8001bcc:	f008 fc9b 	bl	800a506 <HAL_UART_Transmit>

    for(uint16_t i = 0; i < 128; i++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001bd6:	e02f      	b.n	8001c38 <I2C_Scan_Bus+0xa8>
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
 8001bd8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b299      	uxth	r1, r3
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	2201      	movs	r2, #1
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f005 ff7d 	bl	8007ae4 <HAL_I2C_IsDeviceReady>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11e      	bne.n	8001c2e <I2C_Scan_Bus+0x9e>
        {
        	char msg[64] = {0,};
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	223c      	movs	r2, #60	; 0x3c
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f009 fdc5 	bl	800b78c <memset>
            snprintf(msg, 64, "I2C DEVICE: 0x%02X \r\n", i);
 8001c02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c06:	f107 000c 	add.w	r0, r7, #12
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <I2C_Scan_Bus+0xc4>)
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	f00a fc45 	bl	800c49c <sniprintf>
            HAL_UART_Transmit(&DEBUG_UART_I2C, (uint8_t*)msg, strlen(msg), 1000);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fada 	bl	80001d0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f107 010c 	add.w	r1, r7, #12
 8001c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <I2C_Scan_Bus+0xc0>)
 8001c2a:	f008 fc6c 	bl	800a506 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8001c2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c32:	3301      	adds	r3, #1
 8001c34:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001c38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c3e:	d9cb      	bls.n	8001bd8 <I2C_Scan_Bus+0x48>
        }
    }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3768      	adds	r7, #104	; 0x68
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08011048 	.word	0x08011048
 8001c50:	20000458 	.word	0x20000458
 8001c54:	08011030 	.word	0x08011030

08001c58 <wait_for_gpio_state_timeout>:
	}

	while(1){};
}

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	817b      	strh	r3, [r7, #10]
 8001c66:	4613      	mov	r3, r2
 8001c68:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8001c6a:	f004 fa75 	bl	8006158 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) {
 8001c74:	e011      	b.n	8001c9a <wait_for_gpio_state_timeout+0x42>
        if(timeout != HAL_MAX_DELAY) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d00c      	beq.n	8001c98 <wait_for_gpio_state_timeout+0x40>
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <wait_for_gpio_state_timeout+0x3c>
 8001c84:	f004 fa68 	bl	8006158 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d201      	bcs.n	8001c98 <wait_for_gpio_state_timeout+0x40>
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
        }
        asm("nop");
 8001c98:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) {
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f004 ff36 	bl	8006b10 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	7a7b      	ldrb	r3, [r7, #9]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d002      	beq.n	8001cb4 <wait_for_gpio_state_timeout+0x5c>
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d0e0      	beq.n	8001c76 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <I2C_Init>:

void I2C_Init(I2C_HandleTypeDef *hi2c) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]

    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    HAL_I2C_DeInit(hi2c);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f005 f887 	bl	8006dfc <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8001cee:	2311      	movs	r3, #17
 8001cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN;
 8001cf6:	2340      	movs	r3, #64	; 0x40
 8001cf8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4843      	ldr	r0, [pc, #268]	; (8001e10 <I2C_Init+0x150>)
 8001d02:	f004 fc6d 	bl	80065e0 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	483f      	ldr	r0, [pc, #252]	; (8001e10 <I2C_Init+0x150>)
 8001d12:	f004 fc65 	bl	80065e0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	483d      	ldr	r0, [pc, #244]	; (8001e10 <I2C_Init+0x150>)
 8001d1c:	f004 ff10 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	483a      	ldr	r0, [pc, #232]	; (8001e10 <I2C_Init+0x150>)
 8001d26:	f004 ff0b 	bl	8006b40 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, 1000);
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2140      	movs	r1, #64	; 0x40
 8001d32:	4837      	ldr	r0, [pc, #220]	; (8001e10 <I2C_Init+0x150>)
 8001d34:	f7ff ff90 	bl	8001c58 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, 1000);
 8001d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	4833      	ldr	r0, [pc, #204]	; (8001e10 <I2C_Init+0x150>)
 8001d42:	f7ff ff89 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	4831      	ldr	r0, [pc, #196]	; (8001e10 <I2C_Init+0x150>)
 8001d4c:	f004 fef8 	bl	8006b40 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, 1000);
 8001d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d54:	2200      	movs	r2, #0
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	482d      	ldr	r0, [pc, #180]	; (8001e10 <I2C_Init+0x150>)
 8001d5a:	f7ff ff7d 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	482b      	ldr	r0, [pc, #172]	; (8001e10 <I2C_Init+0x150>)
 8001d64:	f004 feec 	bl	8006b40 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, 1000);
 8001d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2140      	movs	r1, #64	; 0x40
 8001d70:	4827      	ldr	r0, [pc, #156]	; (8001e10 <I2C_Init+0x150>)
 8001d72:	f7ff ff71 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	4825      	ldr	r0, [pc, #148]	; (8001e10 <I2C_Init+0x150>)
 8001d7c:	f004 fee0 	bl	8006b40 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, 1000);
 8001d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d84:	2201      	movs	r2, #1
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	4821      	ldr	r0, [pc, #132]	; (8001e10 <I2C_Init+0x150>)
 8001d8a:	f7ff ff65 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	481f      	ldr	r0, [pc, #124]	; (8001e10 <I2C_Init+0x150>)
 8001d94:	f004 fed4 	bl	8006b40 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, 1000);
 8001d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	481b      	ldr	r0, [pc, #108]	; (8001e10 <I2C_Init+0x150>)
 8001da2:	f7ff ff59 	bl	8001c58 <wait_for_gpio_state_timeout>

    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001da6:	2312      	movs	r3, #18
 8001da8:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = SCL_PIN;
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	4816      	ldr	r0, [pc, #88]	; (8001e10 <I2C_Init+0x150>)
 8001db6:	f004 fc13 	bl	80065e0 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <I2C_Init+0x150>)
 8001dc6:	f004 fc0b 	bl	80065e0 <HAL_GPIO_Init>

    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd8:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001dda:	bf00      	nop

    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dea:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001dec:	bf00      	nop

    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001dfe:	bf00      	nop

    HAL_I2C_Init(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f004 feb7 	bl	8006b74 <HAL_I2C_Init>
}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40020400 	.word	0x40020400

08001e14 <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	4603      	mov	r3, r0
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	88bb      	ldrh	r3, [r7, #4]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	8b39      	ldrh	r1, [r7, #24]
 8001e3a:	883a      	ldrh	r2, [r7, #0]
 8001e3c:	1a8a      	subs	r2, r1, r2
 8001e3e:	fb03 f202 	mul.w	r2, r3, r2
 8001e42:	8879      	ldrh	r1, [r7, #2]
 8001e44:	88bb      	ldrh	r3, [r7, #4]
 8001e46:	1acb      	subs	r3, r1, r3
 8001e48:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e4c:	883b      	ldrh	r3, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb67 	bl	8000524 <__aeabi_i2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e62:	eef0 0a67 	vmov.f32	s1, s15
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}

08001e6c <byteL>:

uint8_t byteL(uint16_t val) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	b2db      	uxtb	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <byteH>:

uint8_t byteH(uint16_t val) {
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	b29b      	uxth	r3, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_UART_RxCpltCallback+0x3c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10f      	bne.n	8001f02 <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_UART_RxCpltCallback+0x40>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	b2d1      	uxtb	r1, r2
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_UART_RxCpltCallback+0x40>)
 8001eec:	7011      	strb	r1, [r2, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_UART_RxCpltCallback+0x44>)
 8001ef2:	7819      	ldrb	r1, [r3, #0]
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_UART_RxCpltCallback+0x48>)
 8001ef6:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4906      	ldr	r1, [pc, #24]	; (8001f14 <HAL_UART_RxCpltCallback+0x44>)
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <HAL_UART_RxCpltCallback+0x4c>)
 8001efe:	f008 fb94 	bl	800a62a <HAL_UART_Receive_IT>
		//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	2000111c 	.word	0x2000111c
 8001f14:	2000111d 	.word	0x2000111d
 8001f18:	2000110c 	.word	0x2000110c
 8001f1c:	20000458 	.word	0x20000458

08001f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	b0bb      	sub	sp, #236	; 0xec
 8001f24:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f26:	f004 f8b1 	bl	800608c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2a:	f002 f993 	bl	8004254 <SystemClock_Config>
	//	__HAL_RCC_I2C1_RELEASE_RESET();
	//	HAL_Delay(100);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f2e:	f002 fb6d 	bl	800460c <MX_GPIO_Init>
  MX_FSMC_Init();
 8001f32:	f002 fc45 	bl	80047c0 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001f36:	f002 fb3f 	bl	80045b8 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001f3a:	f002 fb07 	bl	800454c <MX_SPI3_Init>
  MX_SPI2_Init();
 8001f3e:	f002 facf 	bl	80044e0 <MX_SPI2_Init>
  MX_DAC_Init();
 8001f42:	f002 f9f5 	bl	8004330 <MX_DAC_Init>
  MX_SPI1_Init();
 8001f46:	f002 fa95 	bl	8004474 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001f4a:	f002 fa25 	bl	8004398 <MX_I2C1_Init>
  MX_IWDG_Init();
 8001f4e:	f002 fa51 	bl	80043f4 <MX_IWDG_Init>
  MX_RTC_Init();
 8001f52:	f002 fa69 	bl	8004428 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_RTC_Init(&hrtc);
 8001f56:	48be      	ldr	r0, [pc, #760]	; (8002250 <main+0x330>)
 8001f58:	f007 f96a 	bl	8009230 <HAL_RTC_Init>
	uint8_t uart_tx_new[] = "\r\n";
 8001f5c:	4abd      	ldr	r2, [pc, #756]	; (8002254 <main+0x334>)
 8001f5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4611      	mov	r1, r2
 8001f66:	8019      	strh	r1, [r3, #0]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	0c12      	lsrs	r2, r2, #16
 8001f6c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 8001f6e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001f72:	2364      	movs	r3, #100	; 0x64
 8001f74:	2203      	movs	r2, #3
 8001f76:	48b8      	ldr	r0, [pc, #736]	; (8002258 <main+0x338>)
 8001f78:	f008 fac5 	bl	800a506 <HAL_UART_Transmit>
	I2C_Init(&hi2c1);
 8001f7c:	48b7      	ldr	r0, [pc, #732]	; (800225c <main+0x33c>)
 8001f7e:	f7ff fe9f 	bl	8001cc0 <I2C_Init>
	I2C_Scan_Bus(&hi2c1);
 8001f82:	48b6      	ldr	r0, [pc, #728]	; (800225c <main+0x33c>)
 8001f84:	f7ff fe04 	bl	8001b90 <I2C_Scan_Bus>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 8001f88:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001f8c:	2364      	movs	r3, #100	; 0x64
 8001f8e:	2203      	movs	r2, #3
 8001f90:	48b1      	ldr	r0, [pc, #708]	; (8002258 <main+0x338>)
 8001f92:	f008 fab8 	bl	800a506 <HAL_UART_Transmit>
	W25Q_Init();
 8001f96:	f003 fd11 	bl	80059bc <W25Q_Init>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 8001f9a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001f9e:	2364      	movs	r3, #100	; 0x64
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	48ad      	ldr	r0, [pc, #692]	; (8002258 <main+0x338>)
 8001fa4:	f008 faaf 	bl	800a506 <HAL_UART_Transmit>
	BME280_Init();
 8001fa8:	f7ff fb1a 	bl	80015e0 <BME280_Init>
	LCD_Init();
 8001fac:	f003 f88b 	bl	80050c6 <LCD_Init>
	XPT2046_Init();
 8001fb0:	f003 ff4c 	bl	8005e4c <XPT2046_Init>

	DS3231_Update(); rtcSec = DS3231_getSec(); rtcMin = DS3231_getMin(); rtcHrs = DS3231_getHrs();
 8001fb4:	f7ff fc94 	bl	80018e0 <DS3231_Update>
 8001fb8:	f7ff fcc4 	bl	8001944 <DS3231_getSec>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4ba7      	ldr	r3, [pc, #668]	; (8002260 <main+0x340>)
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	f7ff fcca 	bl	800195c <DS3231_getMin>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4ba5      	ldr	r3, [pc, #660]	; (8002264 <main+0x344>)
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	f7ff fcd0 	bl	8001974 <DS3231_getHrs>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4ba3      	ldr	r3, [pc, #652]	; (8002268 <main+0x348>)
 8001fda:	701a      	strb	r2, [r3, #0]
	rtcDate = DS3231_getDate(); rtcMonth = DS3231_getMonth(); rtcYear = DS3231_getYear(); rtcWeekD = DS3231_getWeekDay();
 8001fdc:	f7ff fce2 	bl	80019a4 <DS3231_getDate>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4ba1      	ldr	r3, [pc, #644]	; (800226c <main+0x34c>)
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	f7ff fce8 	bl	80019bc <DS3231_getMonth>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b9f      	ldr	r3, [pc, #636]	; (8002270 <main+0x350>)
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	f7ff fcee 	bl	80019d4 <DS3231_getYear>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b9d      	ldr	r3, [pc, #628]	; (8002274 <main+0x354>)
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	f7ff fcc4 	bl	800198c <DS3231_getWeekDay>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	4b9b      	ldr	r3, [pc, #620]	; (8002278 <main+0x358>)
 800200a:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &clockTime, RTC_FORMAT_BIN);
 800200c:	2200      	movs	r2, #0
 800200e:	499b      	ldr	r1, [pc, #620]	; (800227c <main+0x35c>)
 8002010:	488f      	ldr	r0, [pc, #572]	; (8002250 <main+0x330>)
 8002012:	f007 fa5b 	bl	80094cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &clockDate, RTC_FORMAT_BIN);
 8002016:	2200      	movs	r2, #0
 8002018:	4999      	ldr	r1, [pc, #612]	; (8002280 <main+0x360>)
 800201a:	488d      	ldr	r0, [pc, #564]	; (8002250 <main+0x330>)
 800201c:	f007 fb5b 	bl	80096d6 <HAL_RTC_GetDate>

	if (!clockDate.Year) {
 8002020:	4b97      	ldr	r3, [pc, #604]	; (8002280 <main+0x360>)
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d127      	bne.n	8002078 <main+0x158>
	clockTime.Hours = rtcHrs;
 8002028:	4b8f      	ldr	r3, [pc, #572]	; (8002268 <main+0x348>)
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	4b93      	ldr	r3, [pc, #588]	; (800227c <main+0x35c>)
 800202e:	701a      	strb	r2, [r3, #0]
	clockTime.Minutes = rtcMin;
 8002030:	4b8c      	ldr	r3, [pc, #560]	; (8002264 <main+0x344>)
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b91      	ldr	r3, [pc, #580]	; (800227c <main+0x35c>)
 8002036:	705a      	strb	r2, [r3, #1]
	clockTime.Seconds = rtcSec +1;
 8002038:	4b89      	ldr	r3, [pc, #548]	; (8002260 <main+0x340>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b8e      	ldr	r3, [pc, #568]	; (800227c <main+0x35c>)
 8002042:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &clockTime, RTC_FORMAT_BIN);
 8002044:	2200      	movs	r2, #0
 8002046:	498d      	ldr	r1, [pc, #564]	; (800227c <main+0x35c>)
 8002048:	4881      	ldr	r0, [pc, #516]	; (8002250 <main+0x330>)
 800204a:	f007 f982 	bl	8009352 <HAL_RTC_SetTime>
	clockDate.Date = rtcDate;
 800204e:	4b87      	ldr	r3, [pc, #540]	; (800226c <main+0x34c>)
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <main+0x360>)
 8002054:	709a      	strb	r2, [r3, #2]
	clockDate.Month = rtcMonth;
 8002056:	4b86      	ldr	r3, [pc, #536]	; (8002270 <main+0x350>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b89      	ldr	r3, [pc, #548]	; (8002280 <main+0x360>)
 800205c:	705a      	strb	r2, [r3, #1]
	clockDate.Year = rtcYear;
 800205e:	4b85      	ldr	r3, [pc, #532]	; (8002274 <main+0x354>)
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	4b87      	ldr	r3, [pc, #540]	; (8002280 <main+0x360>)
 8002064:	70da      	strb	r2, [r3, #3]
	clockDate.WeekDay = rtcWeekD;
 8002066:	4b84      	ldr	r3, [pc, #528]	; (8002278 <main+0x358>)
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <main+0x360>)
 800206c:	701a      	strb	r2, [r3, #0]
	HAL_RTC_SetDate(&hrtc, &clockDate, RTC_FORMAT_BIN);
 800206e:	2200      	movs	r2, #0
 8002070:	4983      	ldr	r1, [pc, #524]	; (8002280 <main+0x360>)
 8002072:	4877      	ldr	r0, [pc, #476]	; (8002250 <main+0x330>)
 8002074:	f007 fa88 	bl	8009588 <HAL_RTC_SetDate>
	}

	char uart_tx[45];
	static const char* weekdays[7] = { "MO", "TU", "WE", "TH", "FR", "SA", "SU" };
	HAL_RTC_GetTime(&hrtc, &clockTime, RTC_FORMAT_BIN);
 8002078:	2200      	movs	r2, #0
 800207a:	4980      	ldr	r1, [pc, #512]	; (800227c <main+0x35c>)
 800207c:	4874      	ldr	r0, [pc, #464]	; (8002250 <main+0x330>)
 800207e:	f007 fa25 	bl	80094cc <HAL_RTC_GetTime>
	snprintf(uart_tx, 45, "INTRTC Time: %02d:%02d:%02d ", clockTime.Hours, clockTime.Minutes, clockTime.Seconds);
 8002082:	4b7e      	ldr	r3, [pc, #504]	; (800227c <main+0x35c>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4619      	mov	r1, r3
 8002088:	4b7c      	ldr	r3, [pc, #496]	; (800227c <main+0x35c>)
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	461a      	mov	r2, r3
 800208e:	4b7b      	ldr	r3, [pc, #492]	; (800227c <main+0x35c>)
 8002090:	789b      	ldrb	r3, [r3, #2]
 8002092:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9200      	str	r2, [sp, #0]
 800209a:	460b      	mov	r3, r1
 800209c:	4a79      	ldr	r2, [pc, #484]	; (8002284 <main+0x364>)
 800209e:	212d      	movs	r1, #45	; 0x2d
 80020a0:	f00a f9fc 	bl	800c49c <sniprintf>
	HAL_RTC_GetDate(&hrtc, &clockDate, RTC_FORMAT_BIN);
 80020a4:	2200      	movs	r2, #0
 80020a6:	4976      	ldr	r1, [pc, #472]	; (8002280 <main+0x360>)
 80020a8:	4869      	ldr	r0, [pc, #420]	; (8002250 <main+0x330>)
 80020aa:	f007 fb14 	bl	80096d6 <HAL_RTC_GetDate>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80020ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f88c 	bl	80001d0 <strlen>
 80020b8:	4603      	mov	r3, r0
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80020c0:	2364      	movs	r3, #100	; 0x64
 80020c2:	4865      	ldr	r0, [pc, #404]	; (8002258 <main+0x338>)
 80020c4:	f008 fa1f 	bl	800a506 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "Date: %02d.%02d.20%02d ", clockDate.Date, clockDate.Month, clockDate.Year);
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <main+0x360>)
 80020ca:	789b      	ldrb	r3, [r3, #2]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <main+0x360>)
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <main+0x360>)
 80020d6:	78db      	ldrb	r3, [r3, #3]
 80020d8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9200      	str	r2, [sp, #0]
 80020e0:	460b      	mov	r3, r1
 80020e2:	4a69      	ldr	r2, [pc, #420]	; (8002288 <main+0x368>)
 80020e4:	212d      	movs	r1, #45	; 0x2d
 80020e6:	f00a f9d9 	bl	800c49c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80020ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f86e 	bl	80001d0 <strlen>
 80020f4:	4603      	mov	r3, r0
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80020fc:	2364      	movs	r3, #100	; 0x64
 80020fe:	4856      	ldr	r0, [pc, #344]	; (8002258 <main+0x338>)
 8002100:	f008 fa01 	bl	800a506 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "%s \r\n", weekdays[(7 + clockDate.WeekDay - 1) % 7]);
 8002104:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <main+0x360>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	1d9a      	adds	r2, r3, #6
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <main+0x36c>)
 800210c:	fb83 1302 	smull	r1, r3, r3, r2
 8002110:	4413      	add	r3, r2
 8002112:	1099      	asrs	r1, r3, #2
 8002114:	17d3      	asrs	r3, r2, #31
 8002116:	1ac9      	subs	r1, r1, r3
 8002118:	460b      	mov	r3, r1
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	1a5b      	subs	r3, r3, r1
 800211e:	1ad1      	subs	r1, r2, r3
 8002120:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <main+0x370>)
 8002122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002126:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800212a:	4a5a      	ldr	r2, [pc, #360]	; (8002294 <main+0x374>)
 800212c:	212d      	movs	r1, #45	; 0x2d
 800212e:	f00a f9b5 	bl	800c49c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 8002132:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f84a 	bl	80001d0 <strlen>
 800213c:	4603      	mov	r3, r0
 800213e:	b29a      	uxth	r2, r3
 8002140:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002144:	2364      	movs	r3, #100	; 0x64
 8002146:	4844      	ldr	r0, [pc, #272]	; (8002258 <main+0x338>)
 8002148:	f008 f9dd 	bl	800a506 <HAL_UART_Transmit>

	if (!rtcYear) {
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <main+0x354>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d124      	bne.n	800219e <main+0x27e>
	DS3231_Update();
 8002154:	f7ff fbc4 	bl	80018e0 <DS3231_Update>
	DS3231_setHrs(clockTime.Hours);
 8002158:	4b48      	ldr	r3, [pc, #288]	; (800227c <main+0x35c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc81 	bl	8001a64 <DS3231_setHrs>
	DS3231_setMin(clockTime.Minutes);
 8002162:	4b46      	ldr	r3, [pc, #280]	; (800227c <main+0x35c>)
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fc5e 	bl	8001a28 <DS3231_setMin>
	DS3231_setSec(clockTime.Seconds);
 800216c:	4b43      	ldr	r3, [pc, #268]	; (800227c <main+0x35c>)
 800216e:	789b      	ldrb	r3, [r3, #2]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fc3b 	bl	80019ec <DS3231_setSec>
	DS3231_setDate(clockDate.Date);
 8002176:	4b42      	ldr	r3, [pc, #264]	; (8002280 <main+0x360>)
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fcae 	bl	8001adc <DS3231_setDate>
	DS3231_setMonth(clockDate.Month);
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <main+0x360>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fcc7 	bl	8001b18 <DS3231_setMonth>
	DS3231_setYear(clockDate.Year);
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <main+0x360>)
 800218c:	78db      	ldrb	r3, [r3, #3]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fce0 	bl	8001b54 <DS3231_setYear>
	DS3231_setWeekDay(clockDate.WeekDay);
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <main+0x360>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fc81 	bl	8001aa0 <DS3231_setWeekDay>
	}

	DS3231_Update(); rtcSec = DS3231_getSec(); rtcMin = DS3231_getMin(); rtcHrs = DS3231_getHrs();
 800219e:	f7ff fb9f 	bl	80018e0 <DS3231_Update>
 80021a2:	f7ff fbcf 	bl	8001944 <DS3231_getSec>
 80021a6:	4603      	mov	r3, r0
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <main+0x340>)
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	f7ff fbd5 	bl	800195c <DS3231_getMin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <main+0x344>)
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	f7ff fbdb 	bl	8001974 <DS3231_getHrs>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <main+0x348>)
 80021c4:	701a      	strb	r2, [r3, #0]
	rtcDate = DS3231_getDate(); rtcMonth = DS3231_getMonth(); rtcYear = DS3231_getYear(); rtcWeekD = DS3231_getWeekDay();
 80021c6:	f7ff fbed 	bl	80019a4 <DS3231_getDate>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b27      	ldr	r3, [pc, #156]	; (800226c <main+0x34c>)
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	f7ff fbf3 	bl	80019bc <DS3231_getMonth>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <main+0x350>)
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	f7ff fbf9 	bl	80019d4 <DS3231_getYear>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <main+0x354>)
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	f7ff fbcf 	bl	800198c <DS3231_getWeekDay>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <main+0x358>)
 80021f4:	701a      	strb	r2, [r3, #0]

	snprintf(uart_tx, 45, "DS3231 Time: %02d:%02d:%02d ", rtcHrs, rtcMin, rtcSec);
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <main+0x348>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <main+0x344>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <main+0x340>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	9200      	str	r2, [sp, #0]
 800220e:	460b      	mov	r3, r1
 8002210:	4a21      	ldr	r2, [pc, #132]	; (8002298 <main+0x378>)
 8002212:	212d      	movs	r1, #45	; 0x2d
 8002214:	f00a f942 	bl	800c49c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 8002218:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800221c:	4618      	mov	r0, r3
 800221e:	f7fd ffd7 	bl	80001d0 <strlen>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800222a:	2364      	movs	r3, #100	; 0x64
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <main+0x338>)
 800222e:	f008 f96a 	bl	800a506 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "Date: %02d.%02d.20%02d ", rtcDate, rtcMonth, rtcYear);
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <main+0x34c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <main+0x350>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <main+0x354>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	9200      	str	r2, [sp, #0]
 800224a:	460b      	mov	r3, r1
 800224c:	e026      	b.n	800229c <main+0x37c>
 800224e:	bf00      	nop
 8002250:	20000330 	.word	0x20000330
 8002254:	0801123c 	.word	0x0801123c
 8002258:	20000458 	.word	0x20000458
 800225c:	200002d0 	.word	0x200002d0
 8002260:	20000505 	.word	0x20000505
 8002264:	20000506 	.word	0x20000506
 8002268:	20000507 	.word	0x20000507
 800226c:	20000508 	.word	0x20000508
 8002270:	20000509 	.word	0x20000509
 8002274:	2000050b 	.word	0x2000050b
 8002278:	2000050a 	.word	0x2000050a
 800227c:	200004ec 	.word	0x200004ec
 8002280:	20000500 	.word	0x20000500
 8002284:	08011144 	.word	0x08011144
 8002288:	08011164 	.word	0x08011164
 800228c:	92492493 	.word	0x92492493
 8002290:	20000008 	.word	0x20000008
 8002294:	0801117c 	.word	0x0801117c
 8002298:	08011184 	.word	0x08011184
 800229c:	4a9b      	ldr	r2, [pc, #620]	; (800250c <main+0x5ec>)
 800229e:	212d      	movs	r1, #45	; 0x2d
 80022a0:	f00a f8fc 	bl	800c49c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80022a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fd ff91 	bl	80001d0 <strlen>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80022b6:	2364      	movs	r3, #100	; 0x64
 80022b8:	4895      	ldr	r0, [pc, #596]	; (8002510 <main+0x5f0>)
 80022ba:	f008 f924 	bl	800a506 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "%s \r\n", weekdays[(7 + rtcWeekD - 1) % 7]);
 80022be:	4b95      	ldr	r3, [pc, #596]	; (8002514 <main+0x5f4>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	1d9a      	adds	r2, r3, #6
 80022c4:	4b94      	ldr	r3, [pc, #592]	; (8002518 <main+0x5f8>)
 80022c6:	fb83 1302 	smull	r1, r3, r3, r2
 80022ca:	4413      	add	r3, r2
 80022cc:	1099      	asrs	r1, r3, #2
 80022ce:	17d3      	asrs	r3, r2, #31
 80022d0:	1ac9      	subs	r1, r1, r3
 80022d2:	460b      	mov	r3, r1
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	1ad1      	subs	r1, r2, r3
 80022da:	4b90      	ldr	r3, [pc, #576]	; (800251c <main+0x5fc>)
 80022dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022e0:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80022e4:	4a8e      	ldr	r2, [pc, #568]	; (8002520 <main+0x600>)
 80022e6:	212d      	movs	r1, #45	; 0x2d
 80022e8:	f00a f8d8 	bl	800c49c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80022ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ff6d 	bl	80001d0 <strlen>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80022fe:	2364      	movs	r3, #100	; 0x64
 8002300:	4883      	ldr	r0, [pc, #524]	; (8002510 <main+0x5f0>)
 8002302:	f008 f900 	bl	800a506 <HAL_UART_Transmit>

	temperature = BME280_getTemperature(-1);
 8002306:	f04f 30ff 	mov.w	r0, #4294967295
 800230a:	f7fe ff6d 	bl	80011e8 <BME280_getTemperature>
 800230e:	ee10 3a10 	vmov	r3, s0
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f918 	bl	8000548 <__aeabi_f2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4981      	ldr	r1, [pc, #516]	; (8002524 <main+0x604>)
 800231e:	e9c1 2300 	strd	r2, r3, [r1]
	humidity = BME280_getHumidity(-1);
 8002322:	f04f 30ff 	mov.w	r0, #4294967295
 8002326:	f7fe ffd7 	bl	80012d8 <BME280_getHumidity>
 800232a:	ee10 3a10 	vmov	r3, s0
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f90a 	bl	8000548 <__aeabi_f2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	497b      	ldr	r1, [pc, #492]	; (8002528 <main+0x608>)
 800233a:	e9c1 2300 	strd	r2, r3, [r1]
	pressure = (uint16_t)BME280_getPressure();
 800233e:	f7ff f86d 	bl	800141c <BME280_getPressure>
 8002342:	eef0 7a40 	vmov.f32	s15, s0
 8002346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234a:	ee17 3a90 	vmov	r3, s15
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <main+0x60c>)
 8002352:	801a      	strh	r2, [r3, #0]
	snprintf(uart_tx, 45, "BME280 T: %.1f 'C | H: %.1f %% | P: %04d HPa \r\n", temperature, humidity, pressure);
 8002354:	4b73      	ldr	r3, [pc, #460]	; (8002524 <main+0x604>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	4973      	ldr	r1, [pc, #460]	; (8002528 <main+0x608>)
 800235c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002360:	4c72      	ldr	r4, [pc, #456]	; (800252c <main+0x60c>)
 8002362:	8824      	ldrh	r4, [r4, #0]
 8002364:	4625      	mov	r5, r4
 8002366:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800236a:	9504      	str	r5, [sp, #16]
 800236c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002370:	e9cd 2300 	strd	r2, r3, [sp]
 8002374:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <main+0x610>)
 8002376:	212d      	movs	r1, #45	; 0x2d
 8002378:	4620      	mov	r0, r4
 800237a:	f00a f88f 	bl	800c49c <sniprintf>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 800237e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002382:	2364      	movs	r3, #100	; 0x64
 8002384:	2203      	movs	r2, #3
 8002386:	4862      	ldr	r0, [pc, #392]	; (8002510 <main+0x5f0>)
 8002388:	f008 f8bd 	bl	800a506 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 800238c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002390:	4618      	mov	r0, r3
 8002392:	f7fd ff1d 	bl	80001d0 <strlen>
 8002396:	4603      	mov	r3, r0
 8002398:	b29a      	uxth	r2, r3
 800239a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800239e:	2364      	movs	r3, #100	; 0x64
 80023a0:	485b      	ldr	r0, [pc, #364]	; (8002510 <main+0x5f0>)
 80023a2:	f008 f8b0 	bl	800a506 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 80023a6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80023aa:	2364      	movs	r3, #100	; 0x64
 80023ac:	2203      	movs	r2, #3
 80023ae:	4858      	ldr	r0, [pc, #352]	; (8002510 <main+0x5f0>)
 80023b0:	f008 f8a9 	bl	800a506 <HAL_UART_Transmit>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 80023b4:	23ff      	movs	r3, #255	; 0xff
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023c0:	2100      	movs	r1, #0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f002 fb2a 	bl	8004a1c <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80023d0:	f240 321e 	movw	r2, #798	; 0x31e
 80023d4:	2101      	movs	r1, #1
 80023d6:	2001      	movs	r0, #1
 80023d8:	f002 fb20 	bl	8004a1c <LCD_Rect_Fill>

	//	uint8_t flashOUT[10] = {0};
	//	W25Q_Load_Page(15, flashOUT, 10);
	//	HAL_UART_Transmit(&huart1, flashOUT, sizeof(flashOUT), 100);

	for (uint16_t i = 0; i < 499; i++) hT[i] =  byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80023dc:	2300      	movs	r3, #0
 80023de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80023e2:	e027      	b.n	8002434 <main+0x514>
 80023e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fe4c 	bl	8001090 <AT24XX_Read>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461c      	mov	r4, r3
 80023fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002408:	b29b      	uxth	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fe40 	bl	8001090 <AT24XX_Read>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff fd45 	bl	8001ea4 <byteS>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002422:	b211      	sxth	r1, r2
 8002424:	4a43      	ldr	r2, [pc, #268]	; (8002534 <main+0x614>)
 8002426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800242a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800242e:	3301      	adds	r3, #1
 8002430:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8002434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002438:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800243c:	d9d2      	bls.n	80023e4 <main+0x4c4>
	for (uint16_t i = 0; i < 499; i++) hH[i] =  byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800243e:	2300      	movs	r3, #0
 8002440:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8002444:	e027      	b.n	8002496 <main+0x576>
 8002446:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800244a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800244e:	b29b      	uxth	r3, r3
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	b29b      	uxth	r3, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fe1b 	bl	8001090 <AT24XX_Read>
 800245a:	4603      	mov	r3, r0
 800245c:	461c      	mov	r4, r3
 800245e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	b29b      	uxth	r3, r3
 8002466:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 800246a:	b29b      	uxth	r3, r3
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fe0f 	bl	8001090 <AT24XX_Read>
 8002472:	4603      	mov	r3, r0
 8002474:	4619      	mov	r1, r3
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff fd14 	bl	8001ea4 <byteS>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002484:	b211      	sxth	r1, r2
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <main+0x618>)
 8002488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800248c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002490:	3301      	adds	r3, #1
 8002492:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8002496:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800249a:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800249e:	d9d2      	bls.n	8002446 <main+0x526>
	for (uint16_t i = 0; i < 499; i++) hP[i] =  byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 80024a6:	e027      	b.n	80024f8 <main+0x5d8>
 80024a8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80024ac:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fdea 	bl	8001090 <AT24XX_Read>
 80024bc:	4603      	mov	r3, r0
 80024be:	461c      	mov	r4, r3
 80024c0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fdde 	bl	8001090 <AT24XX_Read>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4619      	mov	r1, r3
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff fce3 	bl	8001ea4 <byteS>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80024e6:	b211      	sxth	r1, r2
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <main+0x61c>)
 80024ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024ee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80024f2:	3301      	adds	r3, #1
 80024f4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 80024f8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80024fc:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002500:	d9d2      	bls.n	80024a8 <main+0x588>
	//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));
	//
	//	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
	//	HAL_UART_Receive_DMA (&huart1, rx_buffer, UART_RX_BUFFER_SIZE);

	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002508:	e023      	b.n	8002552 <main+0x632>
 800250a:	bf00      	nop
 800250c:	08011164 	.word	0x08011164
 8002510:	20000458 	.word	0x20000458
 8002514:	2000050a 	.word	0x2000050a
 8002518:	92492493 	.word	0x92492493
 800251c:	20000008 	.word	0x20000008
 8002520:	0801117c 	.word	0x0801117c
 8002524:	20000510 	.word	0x20000510
 8002528:	20000520 	.word	0x20000520
 800252c:	20000550 	.word	0x20000550
 8002530:	080111a4 	.word	0x080111a4
 8002534:	20000554 	.word	0x20000554
 8002538:	2000093c 	.word	0x2000093c
 800253c:	20000d24 	.word	0x20000d24
 8002540:	4a7d      	ldr	r2, [pc, #500]	; (8002738 <main+0x818>)
 8002542:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002546:	6353      	str	r3, [r2, #52]	; 0x34
 8002548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800254c:	3301      	adds	r3, #1
 800254e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d9f1      	bls.n	8002540 <main+0x620>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_IWDG_Refresh(&hiwdg); //IWDG->KR = 0x0000AAAAU;
 800255c:	4877      	ldr	r0, [pc, #476]	; (800273c <main+0x81c>)
 800255e:	f006 f8dc 	bl	800871a <HAL_IWDG_Refresh>
		if (HAL_I2C_Init(&hi2c1) != HAL_OK) I2C_Init(&hi2c1);
 8002562:	4877      	ldr	r0, [pc, #476]	; (8002740 <main+0x820>)
 8002564:	f004 fb06 	bl	8006b74 <HAL_I2C_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <main+0x654>
 800256e:	4874      	ldr	r0, [pc, #464]	; (8002740 <main+0x820>)
 8002570:	f7ff fba6 	bl	8001cc0 <I2C_Init>
//		rtcDate = clockDate.Date;
//		rtcMonth = clockDate.Month;
//		rtcYear = clockDate.Year;
//		rtcWeekD = clockDate.WeekDay;

		DS3231_Update(); rtcSec = DS3231_getSec(); rtcMin = DS3231_getMin(); rtcHrs = DS3231_getHrs();
 8002574:	f7ff f9b4 	bl	80018e0 <DS3231_Update>
 8002578:	f7ff f9e4 	bl	8001944 <DS3231_getSec>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	4b70      	ldr	r3, [pc, #448]	; (8002744 <main+0x824>)
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	f7ff f9ea 	bl	800195c <DS3231_getMin>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <main+0x828>)
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	f7ff f9f0 	bl	8001974 <DS3231_getHrs>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	4b6c      	ldr	r3, [pc, #432]	; (800274c <main+0x82c>)
 800259a:	701a      	strb	r2, [r3, #0]
		rtcDate = DS3231_getDate(); rtcMonth = DS3231_getMonth(); rtcYear = DS3231_getYear(); rtcWeekD = DS3231_getWeekDay();
 800259c:	f7ff fa02 	bl	80019a4 <DS3231_getDate>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <main+0x830>)
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	f7ff fa08 	bl	80019bc <DS3231_getMonth>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <main+0x834>)
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	f7ff fa0e 	bl	80019d4 <DS3231_getYear>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b66      	ldr	r3, [pc, #408]	; (8002758 <main+0x838>)
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	f7ff f9e4 	bl	800198c <DS3231_getWeekDay>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b64      	ldr	r3, [pc, #400]	; (800275c <main+0x83c>)
 80025ca:	701a      	strb	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 80025cc:	2120      	movs	r1, #32
 80025ce:	4864      	ldr	r0, [pc, #400]	; (8002760 <main+0x840>)
 80025d0:	f004 fa9e 	bl	8006b10 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d12c      	bne.n	8002634 <main+0x714>

			uint16_t touchX = getX();
 80025da:	f003 fcf9 	bl	8005fd0 <getX>
 80025de:	4603      	mov	r3, r0
 80025e0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			uint16_t touchY = getY();
 80025e4:	f003 fd0e 	bl	8006004 <getY>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			if (touchX && touchY && touchX != 0x0DB) {
 80025ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <main+0x6fc>
 80025f6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00e      	beq.n	800261c <main+0x6fc>
 80025fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002602:	2bdb      	cmp	r3, #219	; 0xdb
 8002604:	d00a      	beq.n	800261c <main+0x6fc>
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8002606:	f8b7 109a 	ldrh.w	r1, [r7, #154]	; 0x9a
 800260a:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 800260e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2301      	movs	r3, #1
 8002616:	2201      	movs	r2, #1
 8002618:	f002 fa00 	bl	8004a1c <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800261c:	2201      	movs	r2, #1
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	4850      	ldr	r0, [pc, #320]	; (8002764 <main+0x844>)
 8002622:	f004 fa8d 	bl	8006b40 <HAL_GPIO_WritePin>
			touchX = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			touchY = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002632:	e004      	b.n	800263e <main+0x71e>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	484a      	ldr	r0, [pc, #296]	; (8002764 <main+0x844>)
 800263a:	f004 fa81 	bl	8006b40 <HAL_GPIO_WritePin>

		if (rtcSec % 2 == 0)
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <main+0x824>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <main+0x738>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800264c:	2201      	movs	r2, #1
 800264e:	2140      	movs	r1, #64	; 0x40
 8002650:	4844      	ldr	r0, [pc, #272]	; (8002764 <main+0x844>)
 8002652:	f004 fa75 	bl	8006b40 <HAL_GPIO_WritePin>
 8002656:	e004      	b.n	8002662 <main+0x742>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	4841      	ldr	r0, [pc, #260]	; (8002764 <main+0x844>)
 800265e:	f004 fa6f 	bl	8006b40 <HAL_GPIO_WritePin>

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <main+0x848>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <main+0x824>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	f43f af76 	beq.w	800255c <main+0x63c>

			sprintf(clockPrint, "%02d", rtcSecLast);
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <main+0x848>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800267a:	493c      	ldr	r1, [pc, #240]	; (800276c <main+0x84c>)
 800267c:	4618      	mov	r0, r3
 800267e:	f009 ff41 	bl	800c504 <siprintf>
			LCD_Font(630, 85, clockPrint, &DejaVu_Sans_112, 1, BLACK);
 8002682:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002686:	2300      	movs	r3, #0
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2301      	movs	r3, #1
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <main+0x850>)
 8002690:	2155      	movs	r1, #85	; 0x55
 8002692:	f240 2076 	movw	r0, #630	; 0x276
 8002696:	f002 fc9c 	bl	8004fd2 <LCD_Font>
			sprintf(clockPrint, "%02d", rtcSec);
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <main+0x824>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a4:	4931      	ldr	r1, [pc, #196]	; (800276c <main+0x84c>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	f009 ff2c 	bl	800c504 <siprintf>
			LCD_Font(630, 85, clockPrint, &DejaVu_Sans_112, 1, ORANGE);
 80026ac:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <main+0x854>)
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <main+0x850>)
 80026ba:	2155      	movs	r1, #85	; 0x55
 80026bc:	f240 2076 	movw	r0, #630	; 0x276
 80026c0:	f002 fc87 	bl	8004fd2 <LCD_Font>

			LCD_Circle(300, 60, 10, 0, 1, ORANGE);
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <main+0x854>)
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	2301      	movs	r3, #1
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2300      	movs	r3, #0
 80026ce:	220a      	movs	r2, #10
 80026d0:	213c      	movs	r1, #60	; 0x3c
 80026d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026d6:	f002 faa6 	bl	8004c26 <LCD_Circle>
			LCD_Circle(300, 120, 10, 0, 1, ORANGE);
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <main+0x854>)
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	2301      	movs	r3, #1
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2300      	movs	r3, #0
 80026e4:	220a      	movs	r2, #10
 80026e6:	2178      	movs	r1, #120	; 0x78
 80026e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026ec:	f002 fa9b 	bl	8004c26 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <main+0x824>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03c      	beq.n	8002778 <main+0x858>
				LCD_Circle(300, 60, 9, 1, 1, ORANGE);
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <main+0x854>)
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2301      	movs	r3, #1
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2301      	movs	r3, #1
 8002708:	2209      	movs	r2, #9
 800270a:	213c      	movs	r1, #60	; 0x3c
 800270c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002710:	f002 fa89 	bl	8004c26 <LCD_Circle>
				LCD_Circle(300, 120, 9, 1, 1, ORANGE);
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <main+0x854>)
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2301      	movs	r3, #1
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2301      	movs	r3, #1
 800271e:	2209      	movs	r2, #9
 8002720:	2178      	movs	r1, #120	; 0x78
 8002722:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002726:	f002 fa7e 	bl	8004c26 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002730:	480b      	ldr	r0, [pc, #44]	; (8002760 <main+0x840>)
 8002732:	f004 fa05 	bl	8006b40 <HAL_GPIO_WritePin>
 8002736:	e03b      	b.n	80027b0 <main+0x890>
 8002738:	40010000 	.word	0x40010000
 800273c:	20000324 	.word	0x20000324
 8002740:	200002d0 	.word	0x200002d0
 8002744:	20000505 	.word	0x20000505
 8002748:	20000506 	.word	0x20000506
 800274c:	20000507 	.word	0x20000507
 8002750:	20000508 	.word	0x20000508
 8002754:	20000509 	.word	0x20000509
 8002758:	2000050b 	.word	0x2000050b
 800275c:	2000050a 	.word	0x2000050a
 8002760:	40020800 	.word	0x40020800
 8002764:	40020000 	.word	0x40020000
 8002768:	20000000 	.word	0x20000000
 800276c:	080111d4 	.word	0x080111d4
 8002770:	0801f4fc 	.word	0x0801f4fc
 8002774:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(300, 60, 9, 1, 1, BLACK);
 8002778:	2300      	movs	r3, #0
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2301      	movs	r3, #1
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2301      	movs	r3, #1
 8002782:	2209      	movs	r2, #9
 8002784:	213c      	movs	r1, #60	; 0x3c
 8002786:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800278a:	f002 fa4c 	bl	8004c26 <LCD_Circle>
				LCD_Circle(300, 120, 9, 1, 1, BLACK);
 800278e:	2300      	movs	r3, #0
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	2301      	movs	r3, #1
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	2209      	movs	r2, #9
 800279a:	2178      	movs	r1, #120	; 0x78
 800279c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027a0:	f002 fa41 	bl	8004c26 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027aa:	48ba      	ldr	r0, [pc, #744]	; (8002a94 <main+0xb74>)
 80027ac:	f004 f9c8 	bl	8006b40 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 80027b0:	4bb9      	ldr	r3, [pc, #740]	; (8002a98 <main+0xb78>)
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	4bb9      	ldr	r3, [pc, #740]	; (8002a9c <main+0xb7c>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f001 8089 	beq.w	80038d0 <main+0x19b0>


				sprintf(clockPrint, "%02d", rtcMinLast);
 80027be:	4bb6      	ldr	r3, [pc, #728]	; (8002a98 <main+0xb78>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027c8:	49b5      	ldr	r1, [pc, #724]	; (8002aa0 <main+0xb80>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f009 fe9a 	bl	800c504 <siprintf>
				LCD_Font(310, 170, clockPrint, &DejaVu_Sans_112, 2, BLACK);
 80027d0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4bb1      	ldr	r3, [pc, #708]	; (8002aa4 <main+0xb84>)
 80027de:	21aa      	movs	r1, #170	; 0xaa
 80027e0:	f44f 709b 	mov.w	r0, #310	; 0x136
 80027e4:	f002 fbf5 	bl	8004fd2 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 80027e8:	4bac      	ldr	r3, [pc, #688]	; (8002a9c <main+0xb7c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027f2:	49ab      	ldr	r1, [pc, #684]	; (8002aa0 <main+0xb80>)
 80027f4:	4618      	mov	r0, r3
 80027f6:	f009 fe85 	bl	800c504 <siprintf>
				LCD_Font(310, 170, clockPrint, &DejaVu_Sans_112, 2, ORANGE);
 80027fa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80027fe:	4baa      	ldr	r3, [pc, #680]	; (8002aa8 <main+0xb88>)
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2302      	movs	r3, #2
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4ba7      	ldr	r3, [pc, #668]	; (8002aa4 <main+0xb84>)
 8002808:	21aa      	movs	r1, #170	; 0xaa
 800280a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800280e:	f002 fbe0 	bl	8004fd2 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8002812:	4ba6      	ldr	r3, [pc, #664]	; (8002aac <main+0xb8c>)
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	4ba6      	ldr	r3, [pc, #664]	; (8002ab0 <main+0xb90>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	f000 80ea 	beq.w	80029f4 <main+0xad4>

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8002820:	4ba2      	ldr	r3, [pc, #648]	; (8002aac <main+0xb8c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800282a:	499d      	ldr	r1, [pc, #628]	; (8002aa0 <main+0xb80>)
 800282c:	4618      	mov	r0, r3
 800282e:	f009 fe69 	bl	800c504 <siprintf>
					LCD_Font(0, 170, clockPrint, &DejaVu_Sans_112, 2, BLACK);
 8002832:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002836:	2300      	movs	r3, #0
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2302      	movs	r3, #2
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	4b99      	ldr	r3, [pc, #612]	; (8002aa4 <main+0xb84>)
 8002840:	21aa      	movs	r1, #170	; 0xaa
 8002842:	2000      	movs	r0, #0
 8002844:	f002 fbc5 	bl	8004fd2 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8002848:	4b99      	ldr	r3, [pc, #612]	; (8002ab0 <main+0xb90>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002852:	4993      	ldr	r1, [pc, #588]	; (8002aa0 <main+0xb80>)
 8002854:	4618      	mov	r0, r3
 8002856:	f009 fe55 	bl	800c504 <siprintf>
					LCD_Font(0, 170, clockPrint, &DejaVu_Sans_112, 2, ORANGE);
 800285a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800285e:	4b92      	ldr	r3, [pc, #584]	; (8002aa8 <main+0xb88>)
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	2302      	movs	r3, #2
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <main+0xb84>)
 8002868:	21aa      	movs	r1, #170	; 0xaa
 800286a:	2000      	movs	r0, #0
 800286c:	f002 fbb1 	bl	8004fd2 <LCD_Font>

					if (rtcWeekDLast != rtcWeekD) {
 8002870:	4b90      	ldr	r3, [pc, #576]	; (8002ab4 <main+0xb94>)
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	4b90      	ldr	r3, [pc, #576]	; (8002ab8 <main+0xb98>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	f000 80af 	beq.w	80029dc <main+0xabc>

						static const char* days[7] = { "MO", "TU", "WE", "TH", "FR", "SA", "SU" };
						LCD_Font(710, 125, days[(7 + rtcWeekD - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800287e:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <main+0xb98>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	1d5a      	adds	r2, r3, #5
 8002884:	4b8d      	ldr	r3, [pc, #564]	; (8002abc <main+0xb9c>)
 8002886:	fb83 1302 	smull	r1, r3, r3, r2
 800288a:	4413      	add	r3, r2
 800288c:	1099      	asrs	r1, r3, #2
 800288e:	17d3      	asrs	r3, r2, #31
 8002890:	1ac9      	subs	r1, r1, r3
 8002892:	460b      	mov	r3, r1
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a5b      	subs	r3, r3, r1
 8002898:	1ad1      	subs	r1, r2, r3
 800289a:	4b89      	ldr	r3, [pc, #548]	; (8002ac0 <main+0xba0>)
 800289c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80028a0:	2300      	movs	r3, #0
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	2301      	movs	r3, #1
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4b86      	ldr	r3, [pc, #536]	; (8002ac4 <main+0xba4>)
 80028aa:	217d      	movs	r1, #125	; 0x7d
 80028ac:	f240 20c6 	movw	r0, #710	; 0x2c6
 80028b0:	f002 fb8f 	bl	8004fd2 <LCD_Font>
						LCD_Font(710, 125, days[(7 + rtcWeekD - 1) % 7], &DejaVu_Sans_48, 1, CYAN);
 80028b4:	4b80      	ldr	r3, [pc, #512]	; (8002ab8 <main+0xb98>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	1d9a      	adds	r2, r3, #6
 80028ba:	4b80      	ldr	r3, [pc, #512]	; (8002abc <main+0xb9c>)
 80028bc:	fb83 1302 	smull	r1, r3, r3, r2
 80028c0:	4413      	add	r3, r2
 80028c2:	1099      	asrs	r1, r3, #2
 80028c4:	17d3      	asrs	r3, r2, #31
 80028c6:	1ac9      	subs	r1, r1, r3
 80028c8:	460b      	mov	r3, r1
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a5b      	subs	r3, r3, r1
 80028ce:	1ad1      	subs	r1, r2, r3
 80028d0:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <main+0xba0>)
 80028d2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80028d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	2301      	movs	r3, #1
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <main+0xba4>)
 80028e2:	217d      	movs	r1, #125	; 0x7d
 80028e4:	f240 20c6 	movw	r0, #710	; 0x2c6
 80028e8:	f002 fb73 	bl	8004fd2 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(600, 125, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 80028ec:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <main+0xba8>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f103 010a 	add.w	r1, r3, #10
 80028f4:	4b75      	ldr	r3, [pc, #468]	; (8002acc <main+0xbac>)
 80028f6:	fb83 2301 	smull	r2, r3, r3, r1
 80028fa:	105a      	asrs	r2, r3, #1
 80028fc:	17cb      	asrs	r3, r1, #31
 80028fe:	1ad2      	subs	r2, r2, r3
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	1aca      	subs	r2, r1, r3
 800290a:	4b71      	ldr	r3, [pc, #452]	; (8002ad0 <main+0xbb0>)
 800290c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002910:	2300      	movs	r3, #0
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2301      	movs	r3, #1
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <main+0xba4>)
 800291a:	217d      	movs	r1, #125	; 0x7d
 800291c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002920:	f002 fb57 	bl	8004fd2 <LCD_Font>
						LCD_Font(600, 125, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <main+0xba8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f103 010b 	add.w	r1, r3, #11
 800292c:	4b67      	ldr	r3, [pc, #412]	; (8002acc <main+0xbac>)
 800292e:	fb83 2301 	smull	r2, r3, r3, r1
 8002932:	105a      	asrs	r2, r3, #1
 8002934:	17cb      	asrs	r3, r1, #31
 8002936:	1ad2      	subs	r2, r2, r3
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	1aca      	subs	r2, r1, r3
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <main+0xbb0>)
 8002944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2301      	movs	r3, #1
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <main+0xba4>)
 8002954:	217d      	movs	r1, #125	; 0x7d
 8002956:	f44f 7016 	mov.w	r0, #600	; 0x258
 800295a:	f002 fb3a 	bl	8004fd2 <LCD_Font>

						sprintf(clockPrint, "%02d.%02d.%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 800295e:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <main+0xbb4>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b5c      	ldr	r3, [pc, #368]	; (8002ad8 <main+0xbb8>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <main+0xbbc>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	460b      	mov	r3, r1
 8002976:	495a      	ldr	r1, [pc, #360]	; (8002ae0 <main+0xbc0>)
 8002978:	f009 fdc4 	bl	800c504 <siprintf>
						LCD_Font(578, 175, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800297c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002980:	2300      	movs	r3, #0
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2301      	movs	r3, #1
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <main+0xba4>)
 800298a:	21af      	movs	r1, #175	; 0xaf
 800298c:	f240 2042 	movw	r0, #578	; 0x242
 8002990:	f002 fb1f 	bl	8004fd2 <LCD_Font>
						sprintf(clockPrint, "%02d.%02d.%02d", rtcDate, rtcMonth, rtcYear);
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <main+0xbc4>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <main+0xba8>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <main+0xbc8>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	460b      	mov	r3, r1
 80029ac:	494c      	ldr	r1, [pc, #304]	; (8002ae0 <main+0xbc0>)
 80029ae:	f009 fda9 	bl	800c504 <siprintf>
						LCD_Font(578, 175, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 80029b2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80029b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2301      	movs	r3, #1
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <main+0xba4>)
 80029c2:	21af      	movs	r1, #175	; 0xaf
 80029c4:	f240 2042 	movw	r0, #578	; 0x242
 80029c8:	f002 fb03 	bl	8004fd2 <LCD_Font>

						rtcWeekDLast = rtcWeekD;
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <main+0xb98>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <main+0xb94>)
 80029d2:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <main+0xbc4>)
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <main+0xbb4>)
 80029da:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 80029dc:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <main+0xba8>)
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <main+0xbb8>)
 80029e2:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 80029e4:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <main+0xbc8>)
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <main+0xbbc>)
 80029ea:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 80029ec:	4b30      	ldr	r3, [pc, #192]	; (8002ab0 <main+0xb90>)
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <main+0xb8c>)
 80029f2:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <main+0xb7c>)
 80029f6:	781a      	ldrb	r2, [r3, #0]
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <main+0xb78>)
 80029fa:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f7fe fbf2 	bl	80011e8 <BME280_getTemperature>
 8002a04:	ee10 3a10 	vmov	r3, s0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd9d 	bl	8000548 <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4936      	ldr	r1, [pc, #216]	; (8002aec <main+0xbcc>)
 8002a14:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f7fe fc5c 	bl	80012d8 <BME280_getHumidity>
 8002a20:	ee10 3a10 	vmov	r3, s0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fd8f 	bl	8000548 <__aeabi_f2d>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4930      	ldr	r1, [pc, #192]	; (8002af0 <main+0xbd0>)
 8002a30:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8002a34:	f7fe fcf2 	bl	800141c <BME280_getPressure>
 8002a38:	eef0 7a40 	vmov.f32	s15, s0
 8002a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a40:	ee17 3a90 	vmov	r3, s15
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <main+0xbd4>)
 8002a48:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <main+0xbd4>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002a52:	f240 873d 	bls.w	80038d0 <main+0x19b0>
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <main+0xbd4>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	f240 424b 	movw	r2, #1099	; 0x44b
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f200 8736 	bhi.w	80038d0 <main+0x19b0>
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <main+0xbcc>)
 8002a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <main+0xbd8>)
 8002a70:	f7fe f834 	bl	8000adc <__aeabi_dcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 872a 	beq.w	80038d0 <main+0x19b0>
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <main+0xbcc>)
 8002a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <main+0xbdc>)
 8002a88:	f7fe f846 	bl	8000b18 <__aeabi_dcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	e036      	b.n	8002b00 <main+0xbe0>
 8002a92:	bf00      	nop
 8002a94:	40020800 	.word	0x40020800
 8002a98:	20000001 	.word	0x20000001
 8002a9c:	20000506 	.word	0x20000506
 8002aa0:	080111d4 	.word	0x080111d4
 8002aa4:	0801f4fc 	.word	0x0801f4fc
 8002aa8:	00ffa500 	.word	0x00ffa500
 8002aac:	20000002 	.word	0x20000002
 8002ab0:	20000507 	.word	0x20000507
 8002ab4:	2000050c 	.word	0x2000050c
 8002ab8:	2000050a 	.word	0x2000050a
 8002abc:	92492493 	.word	0x92492493
 8002ac0:	20000024 	.word	0x20000024
 8002ac4:	08013a10 	.word	0x08013a10
 8002ac8:	20000509 	.word	0x20000509
 8002acc:	2aaaaaab 	.word	0x2aaaaaab
 8002ad0:	20000040 	.word	0x20000040
 8002ad4:	2000050d 	.word	0x2000050d
 8002ad8:	2000050e 	.word	0x2000050e
 8002adc:	2000050f 	.word	0x2000050f
 8002ae0:	080111dc 	.word	0x080111dc
 8002ae4:	20000508 	.word	0x20000508
 8002ae8:	2000050b 	.word	0x2000050b
 8002aec:	20000510 	.word	0x20000510
 8002af0:	20000520 	.word	0x20000520
 8002af4:	20000550 	.word	0x20000550
 8002af8:	40554000 	.word	0x40554000
 8002afc:	c0440000 	.word	0xc0440000
 8002b00:	f000 86e6 	beq.w	80038d0 <main+0x19b0>
 8002b04:	4b8b      	ldr	r3, [pc, #556]	; (8002d34 <main+0xe14>)
 8002b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	f7fe f801 	bl	8000b18 <__aeabi_dcmpgt>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 86d9 	beq.w	80038d0 <main+0x19b0>
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <main+0xe14>)
 8002b20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	4b83      	ldr	r3, [pc, #524]	; (8002d38 <main+0xe18>)
 8002b2a:	f7fd ffd7 	bl	8000adc <__aeabi_dcmplt>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 86cd 	beq.w	80038d0 <main+0x19b0>

					if (temperature != temperatureLast) {
 8002b36:	4b81      	ldr	r3, [pc, #516]	; (8002d3c <main+0xe1c>)
 8002b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b3c:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <main+0xe20>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 8133 	bne.w	8002db4 <main+0xe94>

						LCD_Rect(1, 182, 265, 40, 1, BLUE);
 8002b4e:	23ff      	movs	r3, #255	; 0xff
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	2301      	movs	r3, #1
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2328      	movs	r3, #40	; 0x28
 8002b58:	f240 1209 	movw	r2, #265	; 0x109
 8002b5c:	21b6      	movs	r1, #182	; 0xb6
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f002 f808 	bl	8004b74 <LCD_Rect>

						char weatherPrintT[7];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <main+0xe20>)
 8002b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <main+0xe24>)
 8002b70:	f7fd ffc8 	bl	8000b04 <__aeabi_dcmpge>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <main+0xc88>
 8002b7a:	4b71      	ldr	r3, [pc, #452]	; (8002d40 <main+0xe20>)
 8002b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	f7fd ffa8 	bl	8000adc <__aeabi_dcmplt>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01e      	beq.n	8002bd0 <main+0xcb0>
 8002b92:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <main+0xe20>)
 8002b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <main+0xe28>)
 8002b9e:	f7fd ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <main+0xcb0>
							sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002ba8:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <main+0xe20>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002bb2:	4966      	ldr	r1, [pc, #408]	; (8002d4c <main+0xe2c>)
 8002bb4:	f009 fca6 	bl	800c504 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002bb8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4b62      	ldr	r3, [pc, #392]	; (8002d50 <main+0xe30>)
 8002bc6:	21dc      	movs	r1, #220	; 0xdc
 8002bc8:	203d      	movs	r0, #61	; 0x3d
 8002bca:	f002 fa02 	bl	8004fd2 <LCD_Font>
 8002bce:	e050      	b.n	8002c72 <main+0xd52>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <main+0xe20>)
 8002bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <main+0xe24>)
 8002bdc:	f7fd ff7e 	bl	8000adc <__aeabi_dcmplt>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01f      	beq.n	8002c26 <main+0xd06>
 8002be6:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <main+0xe20>)
 8002be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	f7fd ff90 	bl	8000b18 <__aeabi_dcmpgt>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <main+0xd06>
							sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002bfe:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <main+0xe20>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002c08:	4950      	ldr	r1, [pc, #320]	; (8002d4c <main+0xe2c>)
 8002c0a:	f009 fc7b 	bl	800c504 <siprintf>
							LCD_Font(87, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002c0e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002c12:	2300      	movs	r3, #0
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	2301      	movs	r3, #1
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <main+0xe30>)
 8002c1c:	21dc      	movs	r1, #220	; 0xdc
 8002c1e:	2057      	movs	r0, #87	; 0x57
 8002c20:	f002 f9d7 	bl	8004fd2 <LCD_Font>
 8002c24:	e025      	b.n	8002c72 <main+0xd52>
						}
						else if (temperatureLast <= -10) {
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <main+0xe20>)
 8002c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <main+0xe28>)
 8002c32:	f7fd ff5d 	bl	8000af0 <__aeabi_dcmple>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01a      	beq.n	8002c72 <main+0xd52>
							sprintf(weatherPrintT, "%2d 'C", (int8_t)temperatureLast);
 8002c3c:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <main+0xe20>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fd ff87 	bl	8000b58 <__aeabi_d2iz>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c54:	493f      	ldr	r1, [pc, #252]	; (8002d54 <main+0xe34>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f009 fc54 	bl	800c504 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002c5c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002c60:	2300      	movs	r3, #0
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	2301      	movs	r3, #1
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <main+0xe30>)
 8002c6a:	21dc      	movs	r1, #220	; 0xdc
 8002c6c:	203d      	movs	r0, #61	; 0x3d
 8002c6e:	f002 f9b0 	bl	8004fd2 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002c72:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <main+0xe1c>)
 8002c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <main+0xe24>)
 8002c7e:	f7fd ff41 	bl	8000b04 <__aeabi_dcmpge>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <main+0xd96>
 8002c88:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <main+0xe1c>)
 8002c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	f7fd ff21 	bl	8000adc <__aeabi_dcmplt>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01e      	beq.n	8002cde <main+0xdbe>
 8002ca0:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <main+0xe1c>)
 8002ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <main+0xe28>)
 8002cac:	f7fd ff34 	bl	8000b18 <__aeabi_dcmpgt>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d013      	beq.n	8002cde <main+0xdbe>
							sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <main+0xe1c>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002cc0:	4922      	ldr	r1, [pc, #136]	; (8002d4c <main+0xe2c>)
 8002cc2:	f009 fc1f 	bl	800c504 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002cc6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <main+0xe38>)
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <main+0xe30>)
 8002cd4:	21dc      	movs	r1, #220	; 0xdc
 8002cd6:	203d      	movs	r0, #61	; 0x3d
 8002cd8:	f002 f97b 	bl	8004fd2 <LCD_Font>
 8002cdc:	e064      	b.n	8002da8 <main+0xe88>
						}
						else if (temperature < 10 && temperature > 0) {
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <main+0xe1c>)
 8002ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <main+0xe24>)
 8002cea:	f7fd fef7 	bl	8000adc <__aeabi_dcmplt>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d033      	beq.n	8002d5c <main+0xe3c>
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <main+0xe1c>)
 8002cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	f7fd ff09 	bl	8000b18 <__aeabi_dcmpgt>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d027      	beq.n	8002d5c <main+0xe3c>
							sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <main+0xe1c>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002d16:	490d      	ldr	r1, [pc, #52]	; (8002d4c <main+0xe2c>)
 8002d18:	f009 fbf4 	bl	800c504 <siprintf>
							LCD_Font(87, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002d1c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <main+0xe38>)
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	2301      	movs	r3, #1
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <main+0xe30>)
 8002d2a:	21dc      	movs	r1, #220	; 0xdc
 8002d2c:	2057      	movs	r0, #87	; 0x57
 8002d2e:	f002 f950 	bl	8004fd2 <LCD_Font>
 8002d32:	e039      	b.n	8002da8 <main+0xe88>
 8002d34:	20000520 	.word	0x20000520
 8002d38:	40590000 	.word	0x40590000
 8002d3c:	20000510 	.word	0x20000510
 8002d40:	20000518 	.word	0x20000518
 8002d44:	40240000 	.word	0x40240000
 8002d48:	c0240000 	.word	0xc0240000
 8002d4c:	080111ec 	.word	0x080111ec
 8002d50:	08013a10 	.word	0x08013a10
 8002d54:	080111f4 	.word	0x080111f4
 8002d58:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 8002d5c:	4bb0      	ldr	r3, [pc, #704]	; (8003020 <main+0x1100>)
 8002d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4baf      	ldr	r3, [pc, #700]	; (8003024 <main+0x1104>)
 8002d68:	f7fd fec2 	bl	8000af0 <__aeabi_dcmple>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01a      	beq.n	8002da8 <main+0xe88>
							sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8002d72:	4bab      	ldr	r3, [pc, #684]	; (8003020 <main+0x1100>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd feec 	bl	8000b58 <__aeabi_d2iz>
 8002d80:	4603      	mov	r3, r0
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d8a:	49a7      	ldr	r1, [pc, #668]	; (8003028 <main+0x1108>)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f009 fbb9 	bl	800c504 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002d92:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d96:	4ba5      	ldr	r3, [pc, #660]	; (800302c <main+0x110c>)
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	4ba4      	ldr	r3, [pc, #656]	; (8003030 <main+0x1110>)
 8002da0:	21dc      	movs	r1, #220	; 0xdc
 8002da2:	203d      	movs	r0, #61	; 0x3d
 8002da4:	f002 f915 	bl	8004fd2 <LCD_Font>
						}

						temperatureLast = temperature;
 8002da8:	4b9d      	ldr	r3, [pc, #628]	; (8003020 <main+0x1100>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	49a1      	ldr	r1, [pc, #644]	; (8003034 <main+0x1114>)
 8002db0:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 8002db4:	4ba0      	ldr	r3, [pc, #640]	; (8003038 <main+0x1118>)
 8002db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dba:	4ba0      	ldr	r3, [pc, #640]	; (800303c <main+0x111c>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d16b      	bne.n	8002ea2 <main+0xf82>

						LCD_Rect(267, 182, 265, 40, 1, BLUE);
 8002dca:	23ff      	movs	r3, #255	; 0xff
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2328      	movs	r3, #40	; 0x28
 8002dd4:	f240 1209 	movw	r2, #265	; 0x109
 8002dd8:	21b6      	movs	r1, #182	; 0xb6
 8002dda:	f240 100b 	movw	r0, #267	; 0x10b
 8002dde:	f001 fec9 	bl	8004b74 <LCD_Rect>

						char weatherPrintH[8];

						sprintf(weatherPrintH, "%.1f H2O", humidityLast);
 8002de2:	4b96      	ldr	r3, [pc, #600]	; (800303c <main+0x111c>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002dec:	4994      	ldr	r1, [pc, #592]	; (8003040 <main+0x1120>)
 8002dee:	f009 fb89 	bl	800c504 <siprintf>
						if (humidityLast >= 10)
 8002df2:	4b92      	ldr	r3, [pc, #584]	; (800303c <main+0x111c>)
 8002df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	4b91      	ldr	r3, [pc, #580]	; (8003044 <main+0x1124>)
 8002dfe:	f7fd fe81 	bl	8000b04 <__aeabi_dcmpge>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00c      	beq.n	8002e22 <main+0xf02>
							LCD_Font(297, 220, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002e08:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2301      	movs	r3, #1
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4b86      	ldr	r3, [pc, #536]	; (8003030 <main+0x1110>)
 8002e16:	21dc      	movs	r1, #220	; 0xdc
 8002e18:	f240 1029 	movw	r0, #297	; 0x129
 8002e1c:	f002 f8d9 	bl	8004fd2 <LCD_Font>
 8002e20:	e00b      	b.n	8002e3a <main+0xf1a>
						else LCD_Font(323, 220, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002e22:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002e26:	2300      	movs	r3, #0
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	4b80      	ldr	r3, [pc, #512]	; (8003030 <main+0x1110>)
 8002e30:	21dc      	movs	r1, #220	; 0xdc
 8002e32:	f240 1043 	movw	r0, #323	; 0x143
 8002e36:	f002 f8cc 	bl	8004fd2 <LCD_Font>

						sprintf(weatherPrintH, "%.1f H2O", humidity);
 8002e3a:	4b7f      	ldr	r3, [pc, #508]	; (8003038 <main+0x1118>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002e44:	497e      	ldr	r1, [pc, #504]	; (8003040 <main+0x1120>)
 8002e46:	f009 fb5d 	bl	800c504 <siprintf>
						if (humidity >= 10)
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <main+0x1118>)
 8002e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	4b7b      	ldr	r3, [pc, #492]	; (8003044 <main+0x1124>)
 8002e56:	f7fd fe55 	bl	8000b04 <__aeabi_dcmpge>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <main+0xf5c>
							LCD_Font(297, 220, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002e60:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	4b70      	ldr	r3, [pc, #448]	; (8003030 <main+0x1110>)
 8002e70:	21dc      	movs	r1, #220	; 0xdc
 8002e72:	f240 1029 	movw	r0, #297	; 0x129
 8002e76:	f002 f8ac 	bl	8004fd2 <LCD_Font>
 8002e7a:	e00c      	b.n	8002e96 <main+0xf76>
						else LCD_Font(323, 220, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002e7c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	2301      	movs	r3, #1
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	4b69      	ldr	r3, [pc, #420]	; (8003030 <main+0x1110>)
 8002e8c:	21dc      	movs	r1, #220	; 0xdc
 8002e8e:	f240 1043 	movw	r0, #323	; 0x143
 8002e92:	f002 f89e 	bl	8004fd2 <LCD_Font>

						humidityLast = humidity;
 8002e96:	4b68      	ldr	r3, [pc, #416]	; (8003038 <main+0x1118>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	4967      	ldr	r1, [pc, #412]	; (800303c <main+0x111c>)
 8002e9e:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 8002ea2:	4b69      	ldr	r3, [pc, #420]	; (8003048 <main+0x1128>)
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	4b69      	ldr	r3, [pc, #420]	; (800304c <main+0x112c>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d071      	beq.n	8002f92 <main+0x1072>

						LCD_Rect(533, 182, 265, 40, 1, BLUE);
 8002eae:	23ff      	movs	r3, #255	; 0xff
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	2328      	movs	r3, #40	; 0x28
 8002eb8:	f240 1209 	movw	r2, #265	; 0x109
 8002ebc:	21b6      	movs	r1, #182	; 0xb6
 8002ebe:	f240 2015 	movw	r0, #533	; 0x215
 8002ec2:	f001 fe57 	bl	8004b74 <LCD_Rect>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 8002ec6:	4b60      	ldr	r3, [pc, #384]	; (8003048 <main+0x1128>)
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ece:	d315      	bcc.n	8002efc <main+0xfdc>
							sprintf(weatherPrintP, "%02d HPa", pressureLast);
 8002ed0:	4b5d      	ldr	r3, [pc, #372]	; (8003048 <main+0x1128>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002eda:	495d      	ldr	r1, [pc, #372]	; (8003050 <main+0x1130>)
 8002edc:	4618      	mov	r0, r3
 8002ede:	f009 fb11 	bl	800c504 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002ee2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	2301      	movs	r3, #1
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	4b50      	ldr	r3, [pc, #320]	; (8003030 <main+0x1110>)
 8002ef0:	21dc      	movs	r1, #220	; 0xdc
 8002ef2:	f240 203d 	movw	r0, #573	; 0x23d
 8002ef6:	f002 f86c 	bl	8004fd2 <LCD_Font>
 8002efa:	e014      	b.n	8002f26 <main+0x1006>
						}
						else {
							sprintf(weatherPrintP, " %02d HPa", pressureLast);
 8002efc:	4b52      	ldr	r3, [pc, #328]	; (8003048 <main+0x1128>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f06:	4953      	ldr	r1, [pc, #332]	; (8003054 <main+0x1134>)
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f009 fafb 	bl	800c504 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002f0e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f12:	2300      	movs	r3, #0
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	2301      	movs	r3, #1
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	4b45      	ldr	r3, [pc, #276]	; (8003030 <main+0x1110>)
 8002f1c:	21dc      	movs	r1, #220	; 0xdc
 8002f1e:	f240 203d 	movw	r0, #573	; 0x23d
 8002f22:	f002 f856 	bl	8004fd2 <LCD_Font>
						}

						pressureLast = pressure;
 8002f26:	4b49      	ldr	r3, [pc, #292]	; (800304c <main+0x112c>)
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	4b47      	ldr	r3, [pc, #284]	; (8003048 <main+0x1128>)
 8002f2c:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 8002f2e:	4b46      	ldr	r3, [pc, #280]	; (8003048 <main+0x1128>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f36:	d316      	bcc.n	8002f66 <main+0x1046>
							sprintf(weatherPrintP, "%02d HPa", pressureLast);
 8002f38:	4b43      	ldr	r3, [pc, #268]	; (8003048 <main+0x1128>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f42:	4943      	ldr	r1, [pc, #268]	; (8003050 <main+0x1130>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f009 fadd 	bl	800c504 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002f4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f4e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	2301      	movs	r3, #1
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4b35      	ldr	r3, [pc, #212]	; (8003030 <main+0x1110>)
 8002f5a:	21dc      	movs	r1, #220	; 0xdc
 8002f5c:	f240 203d 	movw	r0, #573	; 0x23d
 8002f60:	f002 f837 	bl	8004fd2 <LCD_Font>
 8002f64:	e015      	b.n	8002f92 <main+0x1072>
						}
						else {
							sprintf(weatherPrintP, " %02d HPa", pressureLast);
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <main+0x1128>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f70:	4938      	ldr	r1, [pc, #224]	; (8003054 <main+0x1134>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f009 fac6 	bl	800c504 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002f78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f7c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2301      	movs	r3, #1
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <main+0x1110>)
 8002f88:	21dc      	movs	r1, #220	; 0xdc
 8002f8a:	f240 203d 	movw	r0, #573	; 0x23d
 8002f8e:	f002 f820 	bl	8004fd2 <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fe f87c 	bl	8001090 <AT24XX_Read>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <main+0x1138>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f000 81ee 	beq.w	8003382 <main+0x1462>

						AT24XX_Update(0, rtcHrs);
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <main+0x1138>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fe f898 	bl	80010e2 <AT24XX_Update>

						for (uint16_t i = 0; i < 499; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8002fb8:	e027      	b.n	800300a <main+0x10ea>
 8002fba:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002fbe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe f861 	bl	8001090 <AT24XX_Read>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe f855 	bl	8001090 <AT24XX_Read>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4620      	mov	r0, r4
 8002fec:	f7fe ff5a 	bl	8001ea4 <byteS>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002ff8:	b211      	sxth	r1, r2
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <main+0x113c>)
 8002ffc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003000:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003004:	3301      	adds	r3, #1
 8003006:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800300a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800300e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003012:	d9d2      	bls.n	8002fba <main+0x109a>
						for (uint16_t i = 498; i > 0; i--) hT[i] = hT[i - 1];
 8003014:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8003018:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800301c:	e030      	b.n	8003080 <main+0x1160>
 800301e:	bf00      	nop
 8003020:	20000510 	.word	0x20000510
 8003024:	c0240000 	.word	0xc0240000
 8003028:	080111f4 	.word	0x080111f4
 800302c:	00ffa500 	.word	0x00ffa500
 8003030:	08013a10 	.word	0x08013a10
 8003034:	20000518 	.word	0x20000518
 8003038:	20000520 	.word	0x20000520
 800303c:	20000528 	.word	0x20000528
 8003040:	080111fc 	.word	0x080111fc
 8003044:	40240000 	.word	0x40240000
 8003048:	20000552 	.word	0x20000552
 800304c:	20000550 	.word	0x20000550
 8003050:	08011208 	.word	0x08011208
 8003054:	08011214 	.word	0x08011214
 8003058:	20000507 	.word	0x20000507
 800305c:	20000554 	.word	0x20000554
 8003060:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8003064:	1e5a      	subs	r2, r3, #1
 8003066:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800306a:	49a3      	ldr	r1, [pc, #652]	; (80032f8 <main+0x13d8>)
 800306c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8003070:	4aa1      	ldr	r2, [pc, #644]	; (80032f8 <main+0x13d8>)
 8003072:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003076:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800307a:	3b01      	subs	r3, #1
 800307c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8003080:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1eb      	bne.n	8003060 <main+0x1140>
						hT[0] = (uint16_t) (temperature * 10);
 8003088:	4b9c      	ldr	r3, [pc, #624]	; (80032fc <main+0x13dc>)
 800308a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b9b      	ldr	r3, [pc, #620]	; (8003300 <main+0x13e0>)
 8003094:	f7fd fab0 	bl	80005f8 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fd82 	bl	8000ba8 <__aeabi_d2uiz>
 80030a4:	4603      	mov	r3, r0
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b21a      	sxth	r2, r3
 80030aa:	4b93      	ldr	r3, [pc, #588]	; (80032f8 <main+0x13d8>)
 80030ac:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80030b4:	e02e      	b.n	8003114 <main+0x11f4>
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80030b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80030be:	b29b      	uxth	r3, r3
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	b29c      	uxth	r4, r3
 80030c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030c8:	4a8b      	ldr	r2, [pc, #556]	; (80032f8 <main+0x13d8>)
 80030ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fecb 	bl	8001e6c <byteL>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4619      	mov	r1, r3
 80030da:	4620      	mov	r0, r4
 80030dc:	f7fe f801 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80030e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80030ec:	b29c      	uxth	r4, r3
 80030ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030f2:	4a81      	ldr	r2, [pc, #516]	; (80032f8 <main+0x13d8>)
 80030f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fec3 	bl	8001e86 <byteH>
 8003100:	4603      	mov	r3, r0
 8003102:	4619      	mov	r1, r3
 8003104:	4620      	mov	r0, r4
 8003106:	f7fd ffec 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 800310a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800310e:	3301      	adds	r3, #1
 8003110:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8003114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003118:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800311c:	d9cb      	bls.n	80030b6 <main+0x1196>
						}

						for (uint16_t i = 0; i < 499; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800311e:	2300      	movs	r3, #0
 8003120:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8003124:	e027      	b.n	8003176 <main+0x1256>
 8003126:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800312a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800312e:	b29b      	uxth	r3, r3
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd ffab 	bl	8001090 <AT24XX_Read>
 800313a:	4603      	mov	r3, r0
 800313c:	461c      	mov	r4, r3
 800313e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	b29b      	uxth	r3, r3
 8003146:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 800314a:	b29b      	uxth	r3, r3
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd ff9f 	bl	8001090 <AT24XX_Read>
 8003152:	4603      	mov	r3, r0
 8003154:	4619      	mov	r1, r3
 8003156:	4620      	mov	r0, r4
 8003158:	f7fe fea4 	bl	8001ea4 <byteS>
 800315c:	4603      	mov	r3, r0
 800315e:	461a      	mov	r2, r3
 8003160:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8003164:	b211      	sxth	r1, r2
 8003166:	4a67      	ldr	r2, [pc, #412]	; (8003304 <main+0x13e4>)
 8003168:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800316c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8003170:	3301      	adds	r3, #1
 8003172:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8003176:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800317a:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800317e:	d9d2      	bls.n	8003126 <main+0x1206>
						for (uint16_t i = 498; i > 0; i--) hH[i] = hH[i - 1];
 8003180:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8003184:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8003188:	e00f      	b.n	80031aa <main+0x128a>
 800318a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003194:	495b      	ldr	r1, [pc, #364]	; (8003304 <main+0x13e4>)
 8003196:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800319a:	4a5a      	ldr	r2, [pc, #360]	; (8003304 <main+0x13e4>)
 800319c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80031a0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80031a4:	3b01      	subs	r3, #1
 80031a6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80031aa:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1eb      	bne.n	800318a <main+0x126a>
						hH[0] = (uint16_t) (humidity * 10);
 80031b2:	4b55      	ldr	r3, [pc, #340]	; (8003308 <main+0x13e8>)
 80031b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <main+0x13e0>)
 80031be:	f7fd fa1b 	bl	80005f8 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	f7fd fced 	bl	8000ba8 <__aeabi_d2uiz>
 80031ce:	4603      	mov	r3, r0
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <main+0x13e4>)
 80031d6:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 80031d8:	2300      	movs	r3, #0
 80031da:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80031de:	e02e      	b.n	800323e <main+0x131e>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80031e0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80031e4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	b29c      	uxth	r4, r3
 80031ee:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80031f2:	4a44      	ldr	r2, [pc, #272]	; (8003304 <main+0x13e4>)
 80031f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fe36 	bl	8001e6c <byteL>
 8003200:	4603      	mov	r3, r0
 8003202:	4619      	mov	r1, r3
 8003204:	4620      	mov	r0, r4
 8003206:	f7fd ff6c 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 800320a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8003216:	b29c      	uxth	r4, r3
 8003218:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800321c:	4a39      	ldr	r2, [pc, #228]	; (8003304 <main+0x13e4>)
 800321e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fe2e 	bl	8001e86 <byteH>
 800322a:	4603      	mov	r3, r0
 800322c:	4619      	mov	r1, r3
 800322e:	4620      	mov	r0, r4
 8003230:	f7fd ff57 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 8003234:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003238:	3301      	adds	r3, #1
 800323a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800323e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003242:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003246:	d9cb      	bls.n	80031e0 <main+0x12c0>
						}

						for (uint16_t i = 0; i < 499; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003248:	2300      	movs	r3, #0
 800324a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800324e:	e027      	b.n	80032a0 <main+0x1380>
 8003250:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8003254:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003258:	b29b      	uxth	r3, r3
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	b29b      	uxth	r3, r3
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd ff16 	bl	8001090 <AT24XX_Read>
 8003264:	4603      	mov	r3, r0
 8003266:	461c      	mov	r4, r3
 8003268:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8003274:	b29b      	uxth	r3, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd ff0a 	bl	8001090 <AT24XX_Read>
 800327c:	4603      	mov	r3, r0
 800327e:	4619      	mov	r1, r3
 8003280:	4620      	mov	r0, r4
 8003282:	f7fe fe0f 	bl	8001ea4 <byteS>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800328e:	b211      	sxth	r1, r2
 8003290:	4a1e      	ldr	r2, [pc, #120]	; (800330c <main+0x13ec>)
 8003292:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003296:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800329a:	3301      	adds	r3, #1
 800329c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 80032a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80032a4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80032a8:	d9d2      	bls.n	8003250 <main+0x1330>
						for (uint16_t i = 498; i > 0; i--) hP[i] = hP[i - 1];
 80032aa:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80032ae:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80032b2:	e00f      	b.n	80032d4 <main+0x13b4>
 80032b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80032be:	4913      	ldr	r1, [pc, #76]	; (800330c <main+0x13ec>)
 80032c0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80032c4:	4a11      	ldr	r2, [pc, #68]	; (800330c <main+0x13ec>)
 80032c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80032ca:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80032d4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1eb      	bne.n	80032b4 <main+0x1394>
						hP[0] = (uint16_t) (pressure * 10);
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <main+0x13f0>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	b21a      	sxth	r2, r3
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <main+0x13ec>)
 80032ee:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80032f6:	e03c      	b.n	8003372 <main+0x1452>
 80032f8:	20000554 	.word	0x20000554
 80032fc:	20000510 	.word	0x20000510
 8003300:	40240000 	.word	0x40240000
 8003304:	2000093c 	.word	0x2000093c
 8003308:	20000520 	.word	0x20000520
 800330c:	20000d24 	.word	0x20000d24
 8003310:	20000550 	.word	0x20000550
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8003314:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003318:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800331c:	b29b      	uxth	r3, r3
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	b29c      	uxth	r4, r3
 8003322:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003326:	4ab8      	ldr	r2, [pc, #736]	; (8003608 <main+0x16e8>)
 8003328:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fd9c 	bl	8001e6c <byteL>
 8003334:	4603      	mov	r3, r0
 8003336:	4619      	mov	r1, r3
 8003338:	4620      	mov	r0, r4
 800333a:	f7fd fed2 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 800333e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800334a:	b29c      	uxth	r4, r3
 800334c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003350:	4aad      	ldr	r2, [pc, #692]	; (8003608 <main+0x16e8>)
 8003352:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fd94 	bl	8001e86 <byteH>
 800335e:	4603      	mov	r3, r0
 8003360:	4619      	mov	r1, r3
 8003362:	4620      	mov	r0, r4
 8003364:	f7fd febd 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 8003368:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800336c:	3301      	adds	r3, #1
 800336e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8003372:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003376:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800337a:	d9cb      	bls.n	8003314 <main+0x13f4>
						}

						viewGraphs = 0;
 800337c:	4ba3      	ldr	r3, [pc, #652]	; (800360c <main+0x16ec>)
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(1, 222, 265, 256, 1, BLUE);
 8003382:	23ff      	movs	r3, #255	; 0xff
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	2301      	movs	r3, #1
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338e:	f240 1209 	movw	r2, #265	; 0x109
 8003392:	21de      	movs	r1, #222	; 0xde
 8003394:	2001      	movs	r0, #1
 8003396:	f001 fbed 	bl	8004b74 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 255);
 800339a:	4b9d      	ldr	r3, [pc, #628]	; (8003610 <main+0x16f0>)
 800339c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	4b9b      	ldr	r3, [pc, #620]	; (8003614 <main+0x16f4>)
 80033a6:	f7fd f927 	bl	80005f8 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f7fd fbd1 	bl	8000b58 <__aeabi_d2iz>
 80033b6:	4603      	mov	r3, r0
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	b298      	uxth	r0, r3
 80033bc:	23ff      	movs	r3, #255	; 0xff
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2300      	movs	r3, #0
 80033c2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80033c6:	21c8      	movs	r1, #200	; 0xc8
 80033c8:	f7fe fd24 	bl	8001e14 <map>
 80033cc:	ec53 2b10 	vmov	r2, r3, d0
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fd fbc0 	bl	8000b58 <__aeabi_d2iz>
 80033d8:	4603      	mov	r3, r0
 80033da:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap < 0) valMap = 0;
 80033de:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da02      	bge.n	80033ec <main+0x14cc>
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap > 255) valMap = 255;
 80033ec:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80033f0:	2bff      	cmp	r3, #255	; 0xff
 80033f2:	dd02      	ble.n	80033fa <main+0x14da>
 80033f4:	23ff      	movs	r3, #255	; 0xff
 80033f6:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					LCD_Line(2 + 263, 223, 2 + 263, 477, 1, BLACK);
 80033fa:	2300      	movs	r3, #0
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	2301      	movs	r3, #1
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	f240 13dd 	movw	r3, #477	; 0x1dd
 8003406:	f240 1209 	movw	r2, #265	; 0x109
 800340a:	21df      	movs	r1, #223	; 0xdf
 800340c:	f240 1009 	movw	r0, #265	; 0x109
 8003410:	f001 fb42 	bl	8004a98 <LCD_Line>
					if (valMap)
 8003414:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01d      	beq.n	8003458 <main+0x1538>
						LCD_Line(2 + 263, 223 + (255 - valMap), 2 + 263, 477, 1,
 800341c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003420:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8003424:	b29c      	uxth	r4, r3
 8003426:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800342a:	b2d8      	uxtb	r0, r3
 800342c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	2100      	movs	r1, #0
 800343a:	f001 fa26 	bl	800488a <RGB>
 800343e:	4603      	mov	r3, r0
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	2301      	movs	r3, #1
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	f240 13dd 	movw	r3, #477	; 0x1dd
 800344a:	f240 1209 	movw	r2, #265	; 0x109
 800344e:	4621      	mov	r1, r4
 8003450:	f240 1009 	movw	r0, #265	; 0x109
 8003454:	f001 fb20 	bl	8004a98 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					LCD_Rect(267, 222, 265, 256, 1, BLUE);
 8003458:	23ff      	movs	r3, #255	; 0xff
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	2301      	movs	r3, #1
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003464:	f240 1209 	movw	r2, #265	; 0x109
 8003468:	21de      	movs	r1, #222	; 0xde
 800346a:	f240 100b 	movw	r0, #267	; 0x10b
 800346e:	f001 fb81 	bl	8004b74 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 255);
 8003472:	4b69      	ldr	r3, [pc, #420]	; (8003618 <main+0x16f8>)
 8003474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	4b65      	ldr	r3, [pc, #404]	; (8003614 <main+0x16f4>)
 800347e:	f7fd f8bb 	bl	80005f8 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f7fd fb65 	bl	8000b58 <__aeabi_d2iz>
 800348e:	4603      	mov	r3, r0
 8003490:	b21b      	sxth	r3, r3
 8003492:	b298      	uxth	r0, r3
 8003494:	23ff      	movs	r3, #255	; 0xff
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2300      	movs	r3, #0
 800349a:	f44f 7259 	mov.w	r2, #868	; 0x364
 800349e:	2164      	movs	r1, #100	; 0x64
 80034a0:	f7fe fcb8 	bl	8001e14 <map>
 80034a4:	ec53 2b10 	vmov	r2, r3, d0
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7fd fb54 	bl	8000b58 <__aeabi_d2iz>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap < 0) valMap = 0;
 80034b6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da02      	bge.n	80034c4 <main+0x15a4>
 80034be:	2300      	movs	r3, #0
 80034c0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap > 255) valMap = 255;
 80034c4:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80034c8:	2bff      	cmp	r3, #255	; 0xff
 80034ca:	dd02      	ble.n	80034d2 <main+0x15b2>
 80034cc:	23ff      	movs	r3, #255	; 0xff
 80034ce:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					LCD_Line(268 + 263, 223, 268 + 263, 477, 1, BLACK);
 80034d2:	2300      	movs	r3, #0
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2301      	movs	r3, #1
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f240 13dd 	movw	r3, #477	; 0x1dd
 80034de:	f240 2213 	movw	r2, #531	; 0x213
 80034e2:	21df      	movs	r1, #223	; 0xdf
 80034e4:	f240 2013 	movw	r0, #531	; 0x213
 80034e8:	f001 fad6 	bl	8004a98 <LCD_Line>
					if (valMap)
 80034ec:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01d      	beq.n	8003530 <main+0x1610>
						LCD_Line(268 + 263, 223 + (255 - valMap), 268 + 263, 477, 1,
 80034f4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80034f8:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80034fc:	b29c      	uxth	r4, r3
 80034fe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003502:	b2d8      	uxtb	r0, r3
 8003504:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f001 f9ba 	bl	800488a <RGB>
 8003516:	4603      	mov	r3, r0
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2301      	movs	r3, #1
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	f240 13dd 	movw	r3, #477	; 0x1dd
 8003522:	f240 2213 	movw	r2, #531	; 0x213
 8003526:	4621      	mov	r1, r4
 8003528:	f240 2013 	movw	r0, #531	; 0x213
 800352c:	f001 fab4 	bl	8004a98 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					LCD_Rect(533, 222, 265, 256, 1, BLUE);
 8003530:	23ff      	movs	r3, #255	; 0xff
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2301      	movs	r3, #1
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353c:	f240 1209 	movw	r2, #265	; 0x109
 8003540:	21de      	movs	r1, #222	; 0xde
 8003542:	f240 2015 	movw	r0, #533	; 0x215
 8003546:	f001 fb15 	bl	8004b74 <LCD_Rect>
					valMap = map(((int16_t)(pressure * 10)), MIN_PRESSURE_X10, MAX_PRESSURE_X10, 0, 255);
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <main+0x16fc>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	4413      	add	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	b298      	uxth	r0, r3
 8003558:	23ff      	movs	r3, #255	; 0xff
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	f642 1254 	movw	r2, #10580	; 0x2954
 8003562:	f242 4154 	movw	r1, #9300	; 0x2454
 8003566:	f7fe fc55 	bl	8001e14 <map>
 800356a:	ec53 2b10 	vmov	r2, r3, d0
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	f7fd faf1 	bl	8000b58 <__aeabi_d2iz>
 8003576:	4603      	mov	r3, r0
 8003578:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap < 0) valMap = 0;
 800357c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003580:	2b00      	cmp	r3, #0
 8003582:	da02      	bge.n	800358a <main+0x166a>
 8003584:	2300      	movs	r3, #0
 8003586:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap > 255) valMap = 255;
 800358a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 800358e:	2bff      	cmp	r3, #255	; 0xff
 8003590:	dd02      	ble.n	8003598 <main+0x1678>
 8003592:	23ff      	movs	r3, #255	; 0xff
 8003594:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					LCD_Line(534 + 263, 223, 534 + 263, 477, 1, BLACK);
 8003598:	2300      	movs	r3, #0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2301      	movs	r3, #1
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	f240 13dd 	movw	r3, #477	; 0x1dd
 80035a4:	f240 321d 	movw	r2, #797	; 0x31d
 80035a8:	21df      	movs	r1, #223	; 0xdf
 80035aa:	f240 301d 	movw	r0, #797	; 0x31d
 80035ae:	f001 fa73 	bl	8004a98 <LCD_Line>
					if (valMap)
 80035b2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01d      	beq.n	80035f6 <main+0x16d6>
						LCD_Line(534 + 263, 223 + (255 - valMap), 534 + 263, 477, 1,
 80035ba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80035be:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80035c2:	b29c      	uxth	r4, r3
 80035c4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80035c8:	b2d8      	uxtb	r0, r3
 80035ca:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	2100      	movs	r1, #0
 80035d8:	f001 f957 	bl	800488a <RGB>
 80035dc:	4603      	mov	r3, r0
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	2301      	movs	r3, #1
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	f240 13dd 	movw	r3, #477	; 0x1dd
 80035e8:	f240 321d 	movw	r2, #797	; 0x31d
 80035ec:	4621      	mov	r1, r4
 80035ee:	f240 301d 	movw	r0, #797	; 0x31d
 80035f2:	f001 fa51 	bl	8004a98 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					if (!viewGraphs) {
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <main+0x16ec>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 8168 	bne.w	80038d0 <main+0x19b0>

						for (uint16_t i = 0; i < 263 ; i++) {
 8003600:	2300      	movs	r3, #0
 8003602:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003606:	e072      	b.n	80036ee <main+0x17ce>
 8003608:	20000d24 	.word	0x20000d24
 800360c:	20000504 	.word	0x20000504
 8003610:	20000510 	.word	0x20000510
 8003614:	40240000 	.word	0x40240000
 8003618:	20000520 	.word	0x20000520
 800361c:	20000550 	.word	0x20000550
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 255);
 8003620:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003624:	4a70      	ldr	r2, [pc, #448]	; (80037e8 <main+0x18c8>)
 8003626:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800362a:	b298      	uxth	r0, r3
 800362c:	23ff      	movs	r3, #255	; 0xff
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8003636:	21c8      	movs	r1, #200	; 0xc8
 8003638:	f7fe fbec 	bl	8001e14 <map>
 800363c:	ec53 2b10 	vmov	r2, r3, d0
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	f7fd fa88 	bl	8000b58 <__aeabi_d2iz>
 8003648:	4603      	mov	r3, r0
 800364a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap < 0) valMap = 0;
 800364e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003652:	2b00      	cmp	r3, #0
 8003654:	da02      	bge.n	800365c <main+0x173c>
 8003656:	2300      	movs	r3, #0
 8003658:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap > 255) valMap = 255;
 800365c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003660:	2bff      	cmp	r3, #255	; 0xff
 8003662:	dd02      	ble.n	800366a <main+0x174a>
 8003664:	23ff      	movs	r3, #255	; 0xff
 8003666:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							LCD_Line(2 + (262 - i), 223, 2 + (262 - i), 477, 1, BLACK);
 800366a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800366e:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8003672:	b298      	uxth	r0, r3
 8003674:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003678:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 800367c:	b29a      	uxth	r2, r3
 800367e:	2300      	movs	r3, #0
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2301      	movs	r3, #1
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f240 13dd 	movw	r3, #477	; 0x1dd
 800368a:	21df      	movs	r1, #223	; 0xdf
 800368c:	f001 fa04 	bl	8004a98 <LCD_Line>
							if (valMap)
 8003690:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d025      	beq.n	80036e4 <main+0x17c4>
								LCD_Line(2 + (262 - i), 223 + (255 - valMap), 2 + (262 - i), 477, 1,
 8003698:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800369c:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 80036a0:	b29c      	uxth	r4, r3
 80036a2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80036a6:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80036aa:	b29d      	uxth	r5, r3
 80036ac:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80036b0:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 80036b4:	b29e      	uxth	r6, r3
 80036b6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80036ba:	b2d8      	uxtb	r0, r3
 80036bc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	2100      	movs	r1, #0
 80036ca:	f001 f8de 	bl	800488a <RGB>
 80036ce:	4603      	mov	r3, r0
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	2301      	movs	r3, #1
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f240 13dd 	movw	r3, #477	; 0x1dd
 80036da:	4632      	mov	r2, r6
 80036dc:	4629      	mov	r1, r5
 80036de:	4620      	mov	r0, r4
 80036e0:	f001 f9da 	bl	8004a98 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80036e4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80036e8:	3301      	adds	r3, #1
 80036ea:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80036ee:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80036f2:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80036f6:	d993      	bls.n	8003620 <main+0x1700>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80036fe:	e06a      	b.n	80037d6 <main+0x18b6>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 255);
 8003700:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003704:	4a39      	ldr	r2, [pc, #228]	; (80037ec <main+0x18cc>)
 8003706:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800370a:	b298      	uxth	r0, r3
 800370c:	23ff      	movs	r3, #255	; 0xff
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	f44f 7259 	mov.w	r2, #868	; 0x364
 8003716:	2164      	movs	r1, #100	; 0x64
 8003718:	f7fe fb7c 	bl	8001e14 <map>
 800371c:	ec53 2b10 	vmov	r2, r3, d0
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	f7fd fa18 	bl	8000b58 <__aeabi_d2iz>
 8003728:	4603      	mov	r3, r0
 800372a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap < 0) valMap = 0;
 800372e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003732:	2b00      	cmp	r3, #0
 8003734:	da02      	bge.n	800373c <main+0x181c>
 8003736:	2300      	movs	r3, #0
 8003738:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap > 255) valMap = 255;
 800373c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003740:	2bff      	cmp	r3, #255	; 0xff
 8003742:	dd02      	ble.n	800374a <main+0x182a>
 8003744:	23ff      	movs	r3, #255	; 0xff
 8003746:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							LCD_Line(268 + (262 - i), 223, 268 + (262 - i), 477, 1, BLACK);
 800374a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800374e:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003752:	3302      	adds	r3, #2
 8003754:	b298      	uxth	r0, r3
 8003756:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800375a:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 800375e:	3302      	adds	r3, #2
 8003760:	b29a      	uxth	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2301      	movs	r3, #1
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f240 13dd 	movw	r3, #477	; 0x1dd
 800376e:	21df      	movs	r1, #223	; 0xdf
 8003770:	f001 f992 	bl	8004a98 <LCD_Line>
							if (valMap)
 8003774:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d027      	beq.n	80037cc <main+0x18ac>
								LCD_Line(268 + (262 - i), 223 + (255 - valMap), 268 + (262 - i), 477, 1,
 800377c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003780:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003784:	3302      	adds	r3, #2
 8003786:	b29c      	uxth	r4, r3
 8003788:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800378c:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8003790:	b29d      	uxth	r5, r3
 8003792:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003796:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 800379a:	3302      	adds	r3, #2
 800379c:	b29e      	uxth	r6, r3
 800379e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80037a2:	b2d8      	uxtb	r0, r3
 80037a4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	2100      	movs	r1, #0
 80037b2:	f001 f86a 	bl	800488a <RGB>
 80037b6:	4603      	mov	r3, r0
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	2301      	movs	r3, #1
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	f240 13dd 	movw	r3, #477	; 0x1dd
 80037c2:	4632      	mov	r2, r6
 80037c4:	4629      	mov	r1, r5
 80037c6:	4620      	mov	r0, r4
 80037c8:	f001 f966 	bl	8004a98 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80037cc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80037d0:	3301      	adds	r3, #1
 80037d2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80037d6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80037da:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80037de:	d98f      	bls.n	8003700 <main+0x17e0>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80037e6:	e06b      	b.n	80038c0 <main+0x19a0>
 80037e8:	20000554 	.word	0x20000554
 80037ec:	2000093c 	.word	0x2000093c
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE_X10, MAX_PRESSURE_X10, 0, 255);
 80037f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80037f4:	4abb      	ldr	r2, [pc, #748]	; (8003ae4 <main+0x1bc4>)
 80037f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80037fa:	b298      	uxth	r0, r3
 80037fc:	23ff      	movs	r3, #255	; 0xff
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	f642 1254 	movw	r2, #10580	; 0x2954
 8003806:	f242 4154 	movw	r1, #9300	; 0x2454
 800380a:	f7fe fb03 	bl	8001e14 <map>
 800380e:	ec53 2b10 	vmov	r2, r3, d0
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	f7fd f99f 	bl	8000b58 <__aeabi_d2iz>
 800381a:	4603      	mov	r3, r0
 800381c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap < 0) valMap = 0;
 8003820:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003824:	2b00      	cmp	r3, #0
 8003826:	da02      	bge.n	800382e <main+0x190e>
 8003828:	2300      	movs	r3, #0
 800382a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap > 255) valMap = 255;
 800382e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003832:	2bff      	cmp	r3, #255	; 0xff
 8003834:	dd02      	ble.n	800383c <main+0x191c>
 8003836:	23ff      	movs	r3, #255	; 0xff
 8003838:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							LCD_Line(534 + (262 - i), 223, 534 + (262 - i), 477, 1, BLACK);
 800383c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003840:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003844:	b298      	uxth	r0, r3
 8003846:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800384a:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800384e:	b29a      	uxth	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2301      	movs	r3, #1
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f240 13dd 	movw	r3, #477	; 0x1dd
 800385c:	21df      	movs	r1, #223	; 0xdf
 800385e:	f001 f91b 	bl	8004a98 <LCD_Line>
							if (valMap)
 8003862:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d025      	beq.n	80038b6 <main+0x1996>
								LCD_Line(534 + (262 - i), 223 + (255 - valMap), 534 + (262 - i), 477, 1,
 800386a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800386e:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003872:	b29c      	uxth	r4, r3
 8003874:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003878:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800387c:	b29d      	uxth	r5, r3
 800387e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003882:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003886:	b29e      	uxth	r6, r3
 8003888:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800388c:	b2d8      	uxtb	r0, r3
 800388e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	2100      	movs	r1, #0
 800389c:	f000 fff5 	bl	800488a <RGB>
 80038a0:	4603      	mov	r3, r0
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	2301      	movs	r3, #1
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f240 13dd 	movw	r3, #477	; 0x1dd
 80038ac:	4632      	mov	r2, r6
 80038ae:	4629      	mov	r1, r5
 80038b0:	4620      	mov	r0, r4
 80038b2:	f001 f8f1 	bl	8004a98 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80038b6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80038ba:	3301      	adds	r3, #1
 80038bc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80038c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80038c4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80038c8:	d992      	bls.n	80037f0 <main+0x18d0>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						//						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
						viewGraphs = 1;
 80038ca:	4b87      	ldr	r3, [pc, #540]	; (8003ae8 <main+0x1bc8>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 80038d0:	4b86      	ldr	r3, [pc, #536]	; (8003aec <main+0x1bcc>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8392 	beq.w	8003ffe <main+0x20de>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 80038da:	2202      	movs	r2, #2
 80038dc:	4984      	ldr	r1, [pc, #528]	; (8003af0 <main+0x1bd0>)
 80038de:	4885      	ldr	r0, [pc, #532]	; (8003af4 <main+0x1bd4>)
 80038e0:	f007 ff36 	bl	800b750 <memcmp>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 808a 	bne.w	8003a00 <main+0x1ae0>

					char val[2];

					val[0] = rx_buffer[2];
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <main+0x1bd4>)
 80038ee:	789b      	ldrb	r3, [r3, #2]
 80038f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[3];
 80038f4:	4b7f      	ldr	r3, [pc, #508]	; (8003af4 <main+0x1bd4>)
 80038f6:	78db      	ldrb	r3, [r3, #3]
 80038f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setHrs(atoi(val));
 80038fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003900:	4618      	mov	r0, r3
 8003902:	f007 fef7 	bl	800b6f4 <atoi>
 8003906:	4603      	mov	r3, r0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe f8aa 	bl	8001a64 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8003910:	4b78      	ldr	r3, [pc, #480]	; (8003af4 <main+0x1bd4>)
 8003912:	791b      	ldrb	r3, [r3, #4]
 8003914:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[5];
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <main+0x1bd4>)
 800391a:	795b      	ldrb	r3, [r3, #5]
 800391c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setMin(atoi(val));
 8003920:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003924:	4618      	mov	r0, r3
 8003926:	f007 fee5 	bl	800b6f4 <atoi>
 800392a:	4603      	mov	r3, r0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f87a 	bl	8001a28 <DS3231_setMin>

					val[0] = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setSec(atoi(val));
 8003940:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003944:	4618      	mov	r0, r3
 8003946:	f007 fed5 	bl	800b6f4 <atoi>
 800394a:	4603      	mov	r3, r0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe f84c 	bl	80019ec <DS3231_setSec>

					val[0] = rx_buffer[6];
 8003954:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <main+0x1bd4>)
 8003956:	799b      	ldrb	r3, [r3, #6]
 8003958:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[7];
 800395c:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <main+0x1bd4>)
 800395e:	79db      	ldrb	r3, [r3, #7]
 8003960:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setDate(atoi(val));
 8003964:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003968:	4618      	mov	r0, r3
 800396a:	f007 fec3 	bl	800b6f4 <atoi>
 800396e:	4603      	mov	r3, r0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe f8b2 	bl	8001adc <DS3231_setDate>

					val[0] = rx_buffer[8];
 8003978:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <main+0x1bd4>)
 800397a:	7a1b      	ldrb	r3, [r3, #8]
 800397c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[9];
 8003980:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <main+0x1bd4>)
 8003982:	7a5b      	ldrb	r3, [r3, #9]
 8003984:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setMonth(atoi(val));
 8003988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800398c:	4618      	mov	r0, r3
 800398e:	f007 feb1 	bl	800b6f4 <atoi>
 8003992:	4603      	mov	r3, r0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe f8be 	bl	8001b18 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 800399c:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <main+0x1bd4>)
 800399e:	7a9b      	ldrb	r3, [r3, #10]
 80039a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[11];
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <main+0x1bd4>)
 80039a6:	7adb      	ldrb	r3, [r3, #11]
 80039a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setYear(atoi(val));
 80039ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039b0:	4618      	mov	r0, r3
 80039b2:	f007 fe9f 	bl	800b6f4 <atoi>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f8ca 	bl	8001b54 <DS3231_setYear>

					val[1] = rx_buffer[12];
 80039c0:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <main+0x1bd4>)
 80039c2:	7b1b      	ldrb	r3, [r3, #12]
 80039c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setWeekDay(atoi(val));
 80039c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039cc:	4618      	mov	r0, r3
 80039ce:	f007 fe91 	bl	800b6f4 <atoi>
 80039d2:	4603      	mov	r3, r0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe f862 	bl	8001aa0 <DS3231_setWeekDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80039e2:	e008      	b.n	80039f6 <main+0x1ad6>
 80039e4:	4a44      	ldr	r2, [pc, #272]	; (8003af8 <main+0x1bd8>)
 80039e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039ea:	6353      	str	r3, [r2, #52]	; 0x34
 80039ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039f0:	3301      	adds	r3, #1
 80039f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80039f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d9f1      	bls.n	80039e4 <main+0x1ac4>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003a00:	2202      	movs	r2, #2
 8003a02:	493e      	ldr	r1, [pc, #248]	; (8003afc <main+0x1bdc>)
 8003a04:	483b      	ldr	r0, [pc, #236]	; (8003af4 <main+0x1bd4>)
 8003a06:	f007 fea3 	bl	800b750 <memcmp>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d122      	bne.n	8003a56 <main+0x1b36>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8003a16:	e00a      	b.n	8003a2e <main+0x1b0e>
 8003a18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd fb5f 	bl	80010e2 <AT24XX_Update>
 8003a24:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8003a2e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d3ef      	bcc.n	8003a18 <main+0x1af8>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <main+0x1be0>)
 8003a3a:	f107 0420 	add.w	r4, r7, #32
 8003a3e:	461d      	mov	r5, r3
 8003a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8003a48:	f107 0120 	add.w	r1, r7, #32
 8003a4c:	2364      	movs	r3, #100	; 0x64
 8003a4e:	2214      	movs	r2, #20
 8003a50:	482c      	ldr	r0, [pc, #176]	; (8003b04 <main+0x1be4>)
 8003a52:	f006 fd58 	bl	800a506 <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8003a56:	2202      	movs	r2, #2
 8003a58:	492b      	ldr	r1, [pc, #172]	; (8003b08 <main+0x1be8>)
 8003a5a:	4826      	ldr	r0, [pc, #152]	; (8003af4 <main+0x1bd4>)
 8003a5c:	f007 fe78 	bl	800b750 <memcmp>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 82b6 	bne.w	8003fd4 <main+0x20b4>

					char valT[4] = { 0 };
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8003a72:	e00f      	b.n	8003a94 <main+0x1b74>
 8003a74:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003a7e:	491d      	ldr	r1, [pc, #116]	; (8003af4 <main+0x1bd4>)
 8003a80:	5c8a      	ldrb	r2, [r1, r2]
 8003a82:	33d0      	adds	r3, #208	; 0xd0
 8003a84:	443b      	add	r3, r7
 8003a86:	f803 2cb4 	strb.w	r2, [r3, #-180]
 8003a8a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8003a94:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d9eb      	bls.n	8003a74 <main+0x1b54>

					temperatureRemote = atoi(valT);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f007 fe27 	bl	800b6f4 <atoi>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fc fd3b 	bl	8000524 <__aeabi_i2d>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4916      	ldr	r1, [pc, #88]	; (8003b0c <main+0x1bec>)
 8003ab4:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <main+0x1bec>)
 8003aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <main+0x1bf0>)
 8003ac4:	f7fc fec2 	bl	800084c <__aeabi_ddiv>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	490f      	ldr	r1, [pc, #60]	; (8003b0c <main+0x1bec>)
 8003ace:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <main+0x1bf4>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	833b      	strh	r3, [r7, #24]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	76bb      	strb	r3, [r7, #26]

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8003ae2:	e029      	b.n	8003b38 <main+0x1c18>
 8003ae4:	20000d24 	.word	0x20000d24
 8003ae8:	20000504 	.word	0x20000504
 8003aec:	2000111c 	.word	0x2000111c
 8003af0:	08011220 	.word	0x08011220
 8003af4:	2000110c 	.word	0x2000110c
 8003af8:	40010000 	.word	0x40010000
 8003afc:	08011224 	.word	0x08011224
 8003b00:	08011240 	.word	0x08011240
 8003b04:	20000458 	.word	0x20000458
 8003b08:	08011228 	.word	0x08011228
 8003b0c:	20000530 	.word	0x20000530
 8003b10:	40240000 	.word	0x40240000
 8003b14:	08011254 	.word	0x08011254
 8003b18:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003b1c:	1d9a      	adds	r2, r3, #6
 8003b1e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003b22:	499d      	ldr	r1, [pc, #628]	; (8003d98 <main+0x1e78>)
 8003b24:	5c8a      	ldrb	r2, [r1, r2]
 8003b26:	33d0      	adds	r3, #208	; 0xd0
 8003b28:	443b      	add	r3, r7
 8003b2a:	f803 2cb8 	strb.w	r2, [r3, #-184]
 8003b2e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003b32:	3301      	adds	r3, #1
 8003b34:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8003b38:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d9eb      	bls.n	8003b18 <main+0x1bf8>

					humidityRemote = atoi(valH);
 8003b40:	f107 0318 	add.w	r3, r7, #24
 8003b44:	4618      	mov	r0, r3
 8003b46:	f007 fdd5 	bl	800b6f4 <atoi>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc fce9 	bl	8000524 <__aeabi_i2d>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4991      	ldr	r1, [pc, #580]	; (8003d9c <main+0x1e7c>)
 8003b58:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 8003b5c:	4b8f      	ldr	r3, [pc, #572]	; (8003d9c <main+0x1e7c>)
 8003b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	4b8e      	ldr	r3, [pc, #568]	; (8003da0 <main+0x1e80>)
 8003b68:	f7fc fe70 	bl	800084c <__aeabi_ddiv>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	498a      	ldr	r1, [pc, #552]	; (8003d9c <main+0x1e7c>)
 8003b72:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003b76:	4b8b      	ldr	r3, [pc, #556]	; (8003da4 <main+0x1e84>)
 8003b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b7c:	4b8a      	ldr	r3, [pc, #552]	; (8003da8 <main+0x1e88>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d115      	bne.n	8003bb8 <main+0x1c98>
 8003b8c:	4b85      	ldr	r3, [pc, #532]	; (8003da4 <main+0x1e84>)
 8003b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	4b85      	ldr	r3, [pc, #532]	; (8003dac <main+0x1e8c>)
 8003b98:	f7fc ffa0 	bl	8000adc <__aeabi_dcmplt>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <main+0x1c98>
 8003ba2:	4b80      	ldr	r3, [pc, #512]	; (8003da4 <main+0x1e84>)
 8003ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	4b80      	ldr	r3, [pc, #512]	; (8003db0 <main+0x1e90>)
 8003bae:	f7fc ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d118      	bne.n	8003bea <main+0x1cca>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003bb8:	4b78      	ldr	r3, [pc, #480]	; (8003d9c <main+0x1e7c>)
 8003bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bbe:	4b7d      	ldr	r3, [pc, #500]	; (8003db4 <main+0x1e94>)
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003bc4:	f7fc ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 8202 	bne.w	8003fd4 <main+0x20b4>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003bd0:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <main+0x1e7c>)
 8003bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	f7fc ff9b 	bl	8000b18 <__aeabi_dcmpgt>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 81f5 	beq.w	8003fd4 <main+0x20b4>

						remoteSensorLastUpdate = 0;
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <main+0x1e98>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 8003bf0:	4b72      	ldr	r3, [pc, #456]	; (8003dbc <main+0x1e9c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bfa:	4971      	ldr	r1, [pc, #452]	; (8003dc0 <main+0x1ea0>)
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f008 fc81 	bl	800c504 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003c02:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c06:	2300      	movs	r3, #0
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	; (8003dc4 <main+0x1ea4>)
 8003c10:	2128      	movs	r1, #40	; 0x28
 8003c12:	f240 1077 	movw	r0, #375	; 0x177
 8003c16:	f001 f9dc 	bl	8004fd2 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <main+0x1e88>)
 8003c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <main+0x1ea8>)
 8003c26:	f7fc ff63 	bl	8000af0 <__aeabi_dcmple>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d014      	beq.n	8003c5a <main+0x1d3a>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003c30:	4b5d      	ldr	r3, [pc, #372]	; (8003da8 <main+0x1e88>)
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f107 0010 	add.w	r0, r7, #16
 8003c3a:	4964      	ldr	r1, [pc, #400]	; (8003dcc <main+0x1eac>)
 8003c3c:	f008 fc62 	bl	800c504 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003c40:	f107 0210 	add.w	r2, r7, #16
 8003c44:	2300      	movs	r3, #0
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <main+0x1ea4>)
 8003c4e:	215a      	movs	r1, #90	; 0x5a
 8003c50:	f240 1061 	movw	r0, #353	; 0x161
 8003c54:	f001 f9bd 	bl	8004fd2 <LCD_Font>
 8003c58:	e076      	b.n	8003d48 <main+0x1e28>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003c5a:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <main+0x1e88>)
 8003c5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	f7fc ff38 	bl	8000adc <__aeabi_dcmplt>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01f      	beq.n	8003cb2 <main+0x1d92>
 8003c72:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <main+0x1e88>)
 8003c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	4b52      	ldr	r3, [pc, #328]	; (8003dc8 <main+0x1ea8>)
 8003c7e:	f7fc ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <main+0x1d92>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003c88:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <main+0x1e88>)
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f107 0010 	add.w	r0, r7, #16
 8003c92:	494e      	ldr	r1, [pc, #312]	; (8003dcc <main+0x1eac>)
 8003c94:	f008 fc36 	bl	800c504 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003c98:	f107 0210 	add.w	r2, r7, #16
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <main+0x1ea4>)
 8003ca6:	215a      	movs	r1, #90	; 0x5a
 8003ca8:	f240 1081 	movw	r0, #385	; 0x181
 8003cac:	f001 f991 	bl	8004fd2 <LCD_Font>
 8003cb0:	e04a      	b.n	8003d48 <main+0x1e28>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003cb2:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <main+0x1e88>)
 8003cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	f7fc ff2a 	bl	8000b18 <__aeabi_dcmpgt>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01f      	beq.n	8003d0a <main+0x1dea>
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <main+0x1e88>)
 8003ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	4b32      	ldr	r3, [pc, #200]	; (8003da0 <main+0x1e80>)
 8003cd6:	f7fc ff01 	bl	8000adc <__aeabi_dcmplt>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d014      	beq.n	8003d0a <main+0x1dea>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <main+0x1e88>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f107 0010 	add.w	r0, r7, #16
 8003cea:	4939      	ldr	r1, [pc, #228]	; (8003dd0 <main+0x1eb0>)
 8003cec:	f008 fc0a 	bl	800c504 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003cf0:	f107 0210 	add.w	r2, r7, #16
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <main+0x1ea4>)
 8003cfe:	215a      	movs	r1, #90	; 0x5a
 8003d00:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003d04:	f001 f965 	bl	8004fd2 <LCD_Font>
 8003d08:	e01e      	b.n	8003d48 <main+0x1e28>
						}
						else if (temperatureRemoteLast >= 10) {
 8003d0a:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <main+0x1e88>)
 8003d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <main+0x1e80>)
 8003d16:	f7fc fef5 	bl	8000b04 <__aeabi_dcmpge>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <main+0x1e28>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003d20:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <main+0x1e88>)
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f107 0010 	add.w	r0, r7, #16
 8003d2a:	4929      	ldr	r1, [pc, #164]	; (8003dd0 <main+0x1eb0>)
 8003d2c:	f008 fbea 	bl	800c504 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003d30:	f107 0210 	add.w	r2, r7, #16
 8003d34:	2300      	movs	r3, #0
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2301      	movs	r3, #1
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <main+0x1ea4>)
 8003d3e:	215a      	movs	r1, #90	; 0x5a
 8003d40:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003d44:	f001 f945 	bl	8004fd2 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 8003d48:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <main+0x1e84>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	4916      	ldr	r1, [pc, #88]	; (8003da8 <main+0x1e88>)
 8003d50:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <main+0x1e88>)
 8003d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <main+0x1ea8>)
 8003d60:	f7fc fec6 	bl	8000af0 <__aeabi_dcmple>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d034      	beq.n	8003dd4 <main+0x1eb4>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <main+0x1e88>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f107 0010 	add.w	r0, r7, #16
 8003d74:	4915      	ldr	r1, [pc, #84]	; (8003dcc <main+0x1eac>)
 8003d76:	f008 fbc5 	bl	800c504 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003d7a:	f107 0210 	add.w	r2, r7, #16
 8003d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	2301      	movs	r3, #1
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <main+0x1ea4>)
 8003d8a:	215a      	movs	r1, #90	; 0x5a
 8003d8c:	f240 1061 	movw	r0, #353	; 0x161
 8003d90:	f001 f91f 	bl	8004fd2 <LCD_Font>
 8003d94:	e098      	b.n	8003ec8 <main+0x1fa8>
 8003d96:	bf00      	nop
 8003d98:	2000110c 	.word	0x2000110c
 8003d9c:	20000540 	.word	0x20000540
 8003da0:	40240000 	.word	0x40240000
 8003da4:	20000530 	.word	0x20000530
 8003da8:	20000538 	.word	0x20000538
 8003dac:	40554000 	.word	0x40554000
 8003db0:	c0440000 	.word	0xc0440000
 8003db4:	20000548 	.word	0x20000548
 8003db8:	20000004 	.word	0x20000004
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	080111d4 	.word	0x080111d4
 8003dc4:	08013a10 	.word	0x08013a10
 8003dc8:	c0240000 	.word	0xc0240000
 8003dcc:	0801122c 	.word	0x0801122c
 8003dd0:	08011234 	.word	0x08011234
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003dd4:	4bab      	ldr	r3, [pc, #684]	; (8004084 <main+0x2164>)
 8003dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	f7fc fe7b 	bl	8000adc <__aeabi_dcmplt>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <main+0x1f0e>
 8003dec:	4ba5      	ldr	r3, [pc, #660]	; (8004084 <main+0x2164>)
 8003dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	4ba4      	ldr	r3, [pc, #656]	; (8004088 <main+0x2168>)
 8003df8:	f7fc fe8e 	bl	8000b18 <__aeabi_dcmpgt>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d015      	beq.n	8003e2e <main+0x1f0e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003e02:	4ba0      	ldr	r3, [pc, #640]	; (8004084 <main+0x2164>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f107 0010 	add.w	r0, r7, #16
 8003e0c:	499f      	ldr	r1, [pc, #636]	; (800408c <main+0x216c>)
 8003e0e:	f008 fb79 	bl	800c504 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003e12:	f107 0210 	add.w	r2, r7, #16
 8003e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4b9b      	ldr	r3, [pc, #620]	; (8004090 <main+0x2170>)
 8003e22:	215a      	movs	r1, #90	; 0x5a
 8003e24:	f240 1081 	movw	r0, #385	; 0x181
 8003e28:	f001 f8d3 	bl	8004fd2 <LCD_Font>
 8003e2c:	e04c      	b.n	8003ec8 <main+0x1fa8>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003e2e:	4b95      	ldr	r3, [pc, #596]	; (8004084 <main+0x2164>)
 8003e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	f7fc fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d020      	beq.n	8003e88 <main+0x1f68>
 8003e46:	4b8f      	ldr	r3, [pc, #572]	; (8004084 <main+0x2164>)
 8003e48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	4b90      	ldr	r3, [pc, #576]	; (8004094 <main+0x2174>)
 8003e52:	f7fc fe43 	bl	8000adc <__aeabi_dcmplt>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d015      	beq.n	8003e88 <main+0x1f68>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003e5c:	4b89      	ldr	r3, [pc, #548]	; (8004084 <main+0x2164>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f107 0010 	add.w	r0, r7, #16
 8003e66:	498c      	ldr	r1, [pc, #560]	; (8004098 <main+0x2178>)
 8003e68:	f008 fb4c 	bl	800c504 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003e6c:	f107 0210 	add.w	r2, r7, #16
 8003e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	2301      	movs	r3, #1
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	4b85      	ldr	r3, [pc, #532]	; (8004090 <main+0x2170>)
 8003e7c:	215a      	movs	r1, #90	; 0x5a
 8003e7e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003e82:	f001 f8a6 	bl	8004fd2 <LCD_Font>
 8003e86:	e01f      	b.n	8003ec8 <main+0x1fa8>
						}
						else if (temperatureRemoteLast >= 10) {
 8003e88:	4b7e      	ldr	r3, [pc, #504]	; (8004084 <main+0x2164>)
 8003e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	4b80      	ldr	r3, [pc, #512]	; (8004094 <main+0x2174>)
 8003e94:	f7fc fe36 	bl	8000b04 <__aeabi_dcmpge>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d014      	beq.n	8003ec8 <main+0x1fa8>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003e9e:	4b79      	ldr	r3, [pc, #484]	; (8004084 <main+0x2164>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f107 0010 	add.w	r0, r7, #16
 8003ea8:	497b      	ldr	r1, [pc, #492]	; (8004098 <main+0x2178>)
 8003eaa:	f008 fb2b 	bl	800c504 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003eae:	f107 0210 	add.w	r2, r7, #16
 8003eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	2301      	movs	r3, #1
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4b74      	ldr	r3, [pc, #464]	; (8004090 <main+0x2170>)
 8003ebe:	215a      	movs	r1, #90	; 0x5a
 8003ec0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003ec4:	f001 f885 	bl	8004fd2 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 8003ec8:	4b74      	ldr	r3, [pc, #464]	; (800409c <main+0x217c>)
 8003eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	4b70      	ldr	r3, [pc, #448]	; (8004094 <main+0x2174>)
 8003ed4:	f7fc fe16 	bl	8000b04 <__aeabi_dcmpge>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d014      	beq.n	8003f08 <main+0x1fe8>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003ede:	4b6f      	ldr	r3, [pc, #444]	; (800409c <main+0x217c>)
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f107 000c 	add.w	r0, r7, #12
 8003ee8:	4968      	ldr	r1, [pc, #416]	; (800408c <main+0x216c>)
 8003eea:	f008 fb0b 	bl	800c504 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003eee:	f107 020c 	add.w	r2, r7, #12
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <main+0x2170>)
 8003efc:	2128      	movs	r1, #40	; 0x28
 8003efe:	f240 1073 	movw	r0, #371	; 0x173
 8003f02:	f001 f866 	bl	8004fd2 <LCD_Font>
 8003f06:	e01e      	b.n	8003f46 <main+0x2026>
						}
						else if (humidityRemoteLast < 10) {
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <main+0x217c>)
 8003f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	4b60      	ldr	r3, [pc, #384]	; (8004094 <main+0x2174>)
 8003f14:	f7fc fde2 	bl	8000adc <__aeabi_dcmplt>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d013      	beq.n	8003f46 <main+0x2026>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003f1e:	4b5f      	ldr	r3, [pc, #380]	; (800409c <main+0x217c>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f107 000c 	add.w	r0, r7, #12
 8003f28:	4958      	ldr	r1, [pc, #352]	; (800408c <main+0x216c>)
 8003f2a:	f008 faeb 	bl	800c504 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003f2e:	f107 020c 	add.w	r2, r7, #12
 8003f32:	2300      	movs	r3, #0
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	2301      	movs	r3, #1
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	4b55      	ldr	r3, [pc, #340]	; (8004090 <main+0x2170>)
 8003f3c:	2128      	movs	r1, #40	; 0x28
 8003f3e:	f240 1093 	movw	r0, #403	; 0x193
 8003f42:	f001 f846 	bl	8004fd2 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 8003f46:	4b56      	ldr	r3, [pc, #344]	; (80040a0 <main+0x2180>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	4953      	ldr	r1, [pc, #332]	; (800409c <main+0x217c>)
 8003f4e:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <main+0x217c>)
 8003f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <main+0x2174>)
 8003f5e:	f7fc fdd1 	bl	8000b04 <__aeabi_dcmpge>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d015      	beq.n	8003f94 <main+0x2074>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <main+0x217c>)
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	f107 000c 	add.w	r0, r7, #12
 8003f72:	4946      	ldr	r1, [pc, #280]	; (800408c <main+0x216c>)
 8003f74:	f008 fac6 	bl	800c504 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003f78:	f107 020c 	add.w	r2, r7, #12
 8003f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2301      	movs	r3, #1
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	4b42      	ldr	r3, [pc, #264]	; (8004090 <main+0x2170>)
 8003f88:	2128      	movs	r1, #40	; 0x28
 8003f8a:	f240 1073 	movw	r0, #371	; 0x173
 8003f8e:	f001 f820 	bl	8004fd2 <LCD_Font>
 8003f92:	e01f      	b.n	8003fd4 <main+0x20b4>
						}
						else if (humidityRemoteLast < 10) {
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <main+0x217c>)
 8003f96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <main+0x2174>)
 8003fa0:	f7fc fd9c 	bl	8000adc <__aeabi_dcmplt>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d014      	beq.n	8003fd4 <main+0x20b4>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003faa:	4b3c      	ldr	r3, [pc, #240]	; (800409c <main+0x217c>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f107 000c 	add.w	r0, r7, #12
 8003fb4:	4935      	ldr	r1, [pc, #212]	; (800408c <main+0x216c>)
 8003fb6:	f008 faa5 	bl	800c504 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003fba:	f107 020c 	add.w	r2, r7, #12
 8003fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <main+0x2170>)
 8003fca:	2128      	movs	r1, #40	; 0x28
 8003fcc:	f240 1093 	movw	r0, #403	; 0x193
 8003fd0:	f000 ffff 	bl	8004fd2 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <main+0x2184>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003fe0:	e009      	b.n	8003ff6 <main+0x20d6>
 8003fe2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003fe6:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <main+0x2188>)
 8003fe8:	2100      	movs	r1, #0
 8003fea:	54d1      	strb	r1, [r2, r3]
 8003fec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003ff6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d9f1      	bls.n	8003fe2 <main+0x20c2>
			}

			remoteSensorLastUpdate++;
 8003ffe:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <main+0x218c>)
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	4b29      	ldr	r3, [pc, #164]	; (80040ac <main+0x218c>)
 8004008:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800400a:	4b28      	ldr	r3, [pc, #160]	; (80040ac <main+0x218c>)
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	f240 8108 	bls.w	8004224 <main+0x2304>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <main+0x2164>)
 8004016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	f7fc fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 80fb 	bne.w	8004224 <main+0x2304>
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <main+0x217c>)
 8004030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	f7fc fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	f040 80ee 	bne.w	8004224 <main+0x2304>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <main+0x2164>)
 800404a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <main+0x2168>)
 8004054:	f7fc fd4c 	bl	8000af0 <__aeabi_dcmple>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d028      	beq.n	80040b0 <main+0x2190>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <main+0x2164>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	1d38      	adds	r0, r7, #4
 8004066:	4909      	ldr	r1, [pc, #36]	; (800408c <main+0x216c>)
 8004068:	f008 fa4c 	bl	800c504 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800406c:	1d3a      	adds	r2, r7, #4
 800406e:	2300      	movs	r3, #0
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	2301      	movs	r3, #1
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <main+0x2170>)
 8004078:	215a      	movs	r1, #90	; 0x5a
 800407a:	f240 1061 	movw	r0, #353	; 0x161
 800407e:	f000 ffa8 	bl	8004fd2 <LCD_Font>
 8004082:	e086      	b.n	8004192 <main+0x2272>
 8004084:	20000538 	.word	0x20000538
 8004088:	c0240000 	.word	0xc0240000
 800408c:	0801122c 	.word	0x0801122c
 8004090:	08013a10 	.word	0x08013a10
 8004094:	40240000 	.word	0x40240000
 8004098:	08011234 	.word	0x08011234
 800409c:	20000548 	.word	0x20000548
 80040a0:	20000540 	.word	0x20000540
 80040a4:	2000111c 	.word	0x2000111c
 80040a8:	2000110c 	.word	0x2000110c
 80040ac:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80040b0:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <main+0x2310>)
 80040b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f7fc fd0d 	bl	8000adc <__aeabi_dcmplt>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01d      	beq.n	8004104 <main+0x21e4>
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <main+0x2310>)
 80040ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	4b58      	ldr	r3, [pc, #352]	; (8004234 <main+0x2314>)
 80040d4:	f7fc fd20 	bl	8000b18 <__aeabi_dcmpgt>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d012      	beq.n	8004104 <main+0x21e4>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80040de:	4b54      	ldr	r3, [pc, #336]	; (8004230 <main+0x2310>)
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	1d38      	adds	r0, r7, #4
 80040e6:	4954      	ldr	r1, [pc, #336]	; (8004238 <main+0x2318>)
 80040e8:	f008 fa0c 	bl	800c504 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80040ec:	1d3a      	adds	r2, r7, #4
 80040ee:	2300      	movs	r3, #0
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	2301      	movs	r3, #1
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	4b51      	ldr	r3, [pc, #324]	; (800423c <main+0x231c>)
 80040f8:	215a      	movs	r1, #90	; 0x5a
 80040fa:	f240 1081 	movw	r0, #385	; 0x181
 80040fe:	f000 ff68 	bl	8004fd2 <LCD_Font>
 8004102:	e046      	b.n	8004192 <main+0x2272>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8004104:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <main+0x2310>)
 8004106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	f7fc fd01 	bl	8000b18 <__aeabi_dcmpgt>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01d      	beq.n	8004158 <main+0x2238>
 800411c:	4b44      	ldr	r3, [pc, #272]	; (8004230 <main+0x2310>)
 800411e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	4b46      	ldr	r3, [pc, #280]	; (8004240 <main+0x2320>)
 8004128:	f7fc fcd8 	bl	8000adc <__aeabi_dcmplt>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d012      	beq.n	8004158 <main+0x2238>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <main+0x2310>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	1d38      	adds	r0, r7, #4
 800413a:	4942      	ldr	r1, [pc, #264]	; (8004244 <main+0x2324>)
 800413c:	f008 f9e2 	bl	800c504 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004140:	1d3a      	adds	r2, r7, #4
 8004142:	2300      	movs	r3, #0
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	2301      	movs	r3, #1
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	4b3c      	ldr	r3, [pc, #240]	; (800423c <main+0x231c>)
 800414c:	215a      	movs	r1, #90	; 0x5a
 800414e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8004152:	f000 ff3e 	bl	8004fd2 <LCD_Font>
 8004156:	e01c      	b.n	8004192 <main+0x2272>
					}
					else if (temperatureRemoteLast >= 10) {
 8004158:	4b35      	ldr	r3, [pc, #212]	; (8004230 <main+0x2310>)
 800415a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <main+0x2320>)
 8004164:	f7fc fcce 	bl	8000b04 <__aeabi_dcmpge>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d011      	beq.n	8004192 <main+0x2272>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800416e:	4b30      	ldr	r3, [pc, #192]	; (8004230 <main+0x2310>)
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	1d38      	adds	r0, r7, #4
 8004176:	4933      	ldr	r1, [pc, #204]	; (8004244 <main+0x2324>)
 8004178:	f008 f9c4 	bl	800c504 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800417c:	1d3a      	adds	r2, r7, #4
 800417e:	2300      	movs	r3, #0
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2301      	movs	r3, #1
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4b2d      	ldr	r3, [pc, #180]	; (800423c <main+0x231c>)
 8004188:	215a      	movs	r1, #90	; 0x5a
 800418a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800418e:	f000 ff20 	bl	8004fd2 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8004192:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <main+0x2328>)
 8004194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	4b28      	ldr	r3, [pc, #160]	; (8004240 <main+0x2320>)
 800419e:	f7fc fcb1 	bl	8000b04 <__aeabi_dcmpge>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d012      	beq.n	80041ce <main+0x22ae>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <main+0x2328>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	4638      	mov	r0, r7
 80041b0:	4921      	ldr	r1, [pc, #132]	; (8004238 <main+0x2318>)
 80041b2:	f008 f9a7 	bl	800c504 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80041b6:	463a      	mov	r2, r7
 80041b8:	2300      	movs	r3, #0
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2301      	movs	r3, #1
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <main+0x231c>)
 80041c2:	2128      	movs	r1, #40	; 0x28
 80041c4:	f240 1073 	movw	r0, #371	; 0x173
 80041c8:	f000 ff03 	bl	8004fd2 <LCD_Font>
 80041cc:	e01c      	b.n	8004208 <main+0x22e8>
					}
					else if (humidityRemoteLast < 10) {
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <main+0x2328>)
 80041d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <main+0x2320>)
 80041da:	f7fc fc7f 	bl	8000adc <__aeabi_dcmplt>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d011      	beq.n	8004208 <main+0x22e8>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <main+0x2328>)
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	4638      	mov	r0, r7
 80041ec:	4912      	ldr	r1, [pc, #72]	; (8004238 <main+0x2318>)
 80041ee:	f008 f989 	bl	800c504 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80041f2:	463a      	mov	r2, r7
 80041f4:	2300      	movs	r3, #0
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	2301      	movs	r3, #1
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <main+0x231c>)
 80041fe:	2128      	movs	r1, #40	; 0x28
 8004200:	f240 1093 	movw	r0, #403	; 0x193
 8004204:	f000 fee5 	bl	8004fd2 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8004208:	4909      	ldr	r1, [pc, #36]	; (8004230 <main+0x2310>)
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8004216:	490c      	ldr	r1, [pc, #48]	; (8004248 <main+0x2328>)
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			rtcSecLast = rtcSec;
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <main+0x232c>)
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <main+0x2330>)
 800422a:	701a      	strb	r2, [r3, #0]
	while (1) {
 800422c:	f7fe b996 	b.w	800255c <main+0x63c>
 8004230:	20000538 	.word	0x20000538
 8004234:	c0240000 	.word	0xc0240000
 8004238:	0801122c 	.word	0x0801122c
 800423c:	08013a10 	.word	0x08013a10
 8004240:	40240000 	.word	0x40240000
 8004244:	08011234 	.word	0x08011234
 8004248:	20000548 	.word	0x20000548
 800424c:	20000505 	.word	0x20000505
 8004250:	20000000 	.word	0x20000000

08004254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b094      	sub	sp, #80	; 0x50
 8004258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800425a:	f107 0320 	add.w	r3, r7, #32
 800425e:	2230      	movs	r2, #48	; 0x30
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f007 fa92 	bl	800b78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004268:	f107 030c 	add.w	r3, r7, #12
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <SystemClock_Config+0xd4>)
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <SystemClock_Config+0xd4>)
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004286:	6413      	str	r3, [r2, #64]	; 0x40
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <SystemClock_Config+0xd4>)
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004294:	2300      	movs	r3, #0
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <SystemClock_Config+0xd8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a23      	ldr	r2, [pc, #140]	; (800432c <SystemClock_Config+0xd8>)
 800429e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b21      	ldr	r3, [pc, #132]	; (800432c <SystemClock_Config+0xd8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80042b0:	230d      	movs	r3, #13
 80042b2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042ba:	2301      	movs	r3, #1
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80042be:	2301      	movs	r3, #1
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042c2:	2302      	movs	r3, #2
 80042c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80042cc:	2304      	movs	r3, #4
 80042ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80042d0:	23a8      	movs	r3, #168	; 0xa8
 80042d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042d4:	2302      	movs	r3, #2
 80042d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80042d8:	2307      	movs	r3, #7
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042dc:	f107 0320 	add.w	r3, r7, #32
 80042e0:	4618      	mov	r0, r3
 80042e2:	f004 fa2b 	bl	800873c <HAL_RCC_OscConfig>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80042ec:	f000 fac8 	bl	8004880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042f0:	230f      	movs	r3, #15
 80042f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f4:	2302      	movs	r3, #2
 80042f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004306:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	2105      	movs	r1, #5
 800430e:	4618      	mov	r0, r3
 8004310:	f004 fc8c 	bl	8008c2c <HAL_RCC_ClockConfig>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800431a:	f000 fab1 	bl	8004880 <Error_Handler>
  }
}
 800431e:	bf00      	nop
 8004320:	3750      	adds	r7, #80	; 0x50
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	40007000 	.word	0x40007000

08004330 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004336:	463b      	mov	r3, r7
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800433e:	4b14      	ldr	r3, [pc, #80]	; (8004390 <MX_DAC_Init+0x60>)
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <MX_DAC_Init+0x64>)
 8004342:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004344:	4812      	ldr	r0, [pc, #72]	; (8004390 <MX_DAC_Init+0x60>)
 8004346:	f002 f848 	bl	80063da <HAL_DAC_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8004350:	f000 fa96 	bl	8004880 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004354:	2300      	movs	r3, #0
 8004356:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800435c:	463b      	mov	r3, r7
 800435e:	2200      	movs	r2, #0
 8004360:	4619      	mov	r1, r3
 8004362:	480b      	ldr	r0, [pc, #44]	; (8004390 <MX_DAC_Init+0x60>)
 8004364:	f002 f85b 	bl	800641e <HAL_DAC_ConfigChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800436e:	f000 fa87 	bl	8004880 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004372:	463b      	mov	r3, r7
 8004374:	2210      	movs	r2, #16
 8004376:	4619      	mov	r1, r3
 8004378:	4805      	ldr	r0, [pc, #20]	; (8004390 <MX_DAC_Init+0x60>)
 800437a:	f002 f850 	bl	800641e <HAL_DAC_ConfigChannel>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8004384:	f000 fa7c 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200002bc 	.word	0x200002bc
 8004394:	40007400 	.word	0x40007400

08004398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <MX_I2C1_Init+0x50>)
 800439e:	4a13      	ldr	r2, [pc, #76]	; (80043ec <MX_I2C1_Init+0x54>)
 80043a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043a4:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <MX_I2C1_Init+0x58>)
 80043a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80043ae:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043be:	2200      	movs	r2, #0
 80043c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043d4:	4804      	ldr	r0, [pc, #16]	; (80043e8 <MX_I2C1_Init+0x50>)
 80043d6:	f002 fbcd 	bl	8006b74 <HAL_I2C_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80043e0:	f000 fa4e 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	200002d0 	.word	0x200002d0
 80043ec:	40005400 	.word	0x40005400
 80043f0:	00061a80 	.word	0x00061a80

080043f4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <MX_IWDG_Init+0x2c>)
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <MX_IWDG_Init+0x30>)
 80043fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <MX_IWDG_Init+0x2c>)
 8004400:	2206      	movs	r2, #6
 8004402:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <MX_IWDG_Init+0x2c>)
 8004406:	f640 72ff 	movw	r2, #4095	; 0xfff
 800440a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800440c:	4804      	ldr	r0, [pc, #16]	; (8004420 <MX_IWDG_Init+0x2c>)
 800440e:	f004 f942 	bl	8008696 <HAL_IWDG_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8004418:	f000 fa32 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000324 	.word	0x20000324
 8004424:	40003000 	.word	0x40003000

08004428 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800442c:	4b0f      	ldr	r3, [pc, #60]	; (800446c <MX_RTC_Init+0x44>)
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <MX_RTC_Init+0x48>)
 8004430:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <MX_RTC_Init+0x44>)
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <MX_RTC_Init+0x44>)
 800443a:	227f      	movs	r2, #127	; 0x7f
 800443c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <MX_RTC_Init+0x44>)
 8004440:	22ff      	movs	r2, #255	; 0xff
 8004442:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <MX_RTC_Init+0x44>)
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <MX_RTC_Init+0x44>)
 800444c:	2200      	movs	r2, #0
 800444e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <MX_RTC_Init+0x44>)
 8004452:	2200      	movs	r2, #0
 8004454:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004456:	4805      	ldr	r0, [pc, #20]	; (800446c <MX_RTC_Init+0x44>)
 8004458:	f004 feea 	bl	8009230 <HAL_RTC_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004462:	f000 fa0d 	bl	8004880 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000330 	.word	0x20000330
 8004470:	40002800 	.word	0x40002800

08004474 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <MX_SPI1_Init+0x64>)
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <MX_SPI1_Init+0x68>)
 800447c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <MX_SPI1_Init+0x64>)
 8004480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <MX_SPI1_Init+0x64>)
 8004488:	2200      	movs	r2, #0
 800448a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <MX_SPI1_Init+0x64>)
 800448e:	2200      	movs	r2, #0
 8004490:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <MX_SPI1_Init+0x64>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <MX_SPI1_Init+0x64>)
 800449a:	2200      	movs	r2, #0
 800449c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <MX_SPI1_Init+0x64>)
 80044a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <MX_SPI1_Init+0x64>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <MX_SPI1_Init+0x64>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <MX_SPI1_Init+0x64>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <MX_SPI1_Init+0x64>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <MX_SPI1_Init+0x64>)
 80044c0:	220a      	movs	r2, #10
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044c4:	4804      	ldr	r0, [pc, #16]	; (80044d8 <MX_SPI1_Init+0x64>)
 80044c6:	f005 f9e5 	bl	8009894 <HAL_SPI_Init>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80044d0:	f000 f9d6 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044d4:	bf00      	nop
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000350 	.word	0x20000350
 80044dc:	40013000 	.word	0x40013000

080044e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <MX_SPI2_Init+0x64>)
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <MX_SPI2_Init+0x68>)
 80044e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <MX_SPI2_Init+0x64>)
 80044ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <MX_SPI2_Init+0x64>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <MX_SPI2_Init+0x64>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <MX_SPI2_Init+0x64>)
 8004500:	2200      	movs	r2, #0
 8004502:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <MX_SPI2_Init+0x64>)
 8004506:	2200      	movs	r2, #0
 8004508:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <MX_SPI2_Init+0x64>)
 800450c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004510:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <MX_SPI2_Init+0x64>)
 8004514:	2238      	movs	r2, #56	; 0x38
 8004516:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <MX_SPI2_Init+0x64>)
 800451a:	2200      	movs	r2, #0
 800451c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <MX_SPI2_Init+0x64>)
 8004520:	2200      	movs	r2, #0
 8004522:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <MX_SPI2_Init+0x64>)
 8004526:	2200      	movs	r2, #0
 8004528:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <MX_SPI2_Init+0x64>)
 800452c:	220a      	movs	r2, #10
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004530:	4804      	ldr	r0, [pc, #16]	; (8004544 <MX_SPI2_Init+0x64>)
 8004532:	f005 f9af 	bl	8009894 <HAL_SPI_Init>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800453c:	f000 f9a0 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200003a8 	.word	0x200003a8
 8004548:	40003800 	.word	0x40003800

0800454c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004550:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <MX_SPI3_Init+0x68>)
 8004554:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800455c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004566:	2200      	movs	r2, #0
 8004568:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <MX_SPI3_Init+0x64>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004572:	2200      	movs	r2, #0
 8004574:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004578:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800457c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004580:	2238      	movs	r2, #56	; 0x38
 8004582:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004586:	2200      	movs	r2, #0
 8004588:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <MX_SPI3_Init+0x64>)
 800458c:	2200      	movs	r2, #0
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004592:	2200      	movs	r2, #0
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <MX_SPI3_Init+0x64>)
 8004598:	220a      	movs	r2, #10
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800459c:	4804      	ldr	r0, [pc, #16]	; (80045b0 <MX_SPI3_Init+0x64>)
 800459e:	f005 f979 	bl	8009894 <HAL_SPI_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80045a8:	f000 f96a 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80045ac:	bf00      	nop
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000400 	.word	0x20000400
 80045b4:	40003c00 	.word	0x40003c00

080045b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <MX_USART1_UART_Init+0x50>)
 80045c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045de:	220c      	movs	r2, #12
 80045e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045ee:	4805      	ldr	r0, [pc, #20]	; (8004604 <MX_USART1_UART_Init+0x4c>)
 80045f0:	f005 ff3c 	bl	800a46c <HAL_UART_Init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045fa:	f000 f941 	bl	8004880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000458 	.word	0x20000458
 8004608:	40011000 	.word	0x40011000

0800460c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	; 0x30
 8004610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004612:	f107 031c 	add.w	r3, r7, #28
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	4b60      	ldr	r3, [pc, #384]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	4a5f      	ldr	r2, [pc, #380]	; (80047a8 <MX_GPIO_Init+0x19c>)
 800462c:	f043 0310 	orr.w	r3, r3, #16
 8004630:	6313      	str	r3, [r2, #48]	; 0x30
 8004632:	4b5d      	ldr	r3, [pc, #372]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	4b59      	ldr	r3, [pc, #356]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	4a58      	ldr	r2, [pc, #352]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	6313      	str	r3, [r2, #48]	; 0x30
 800464e:	4b56      	ldr	r3, [pc, #344]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	4b52      	ldr	r3, [pc, #328]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a51      	ldr	r2, [pc, #324]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b4f      	ldr	r3, [pc, #316]	; (80047a8 <MX_GPIO_Init+0x19c>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <MX_GPIO_Init+0x19c>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a4a      	ldr	r2, [pc, #296]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6313      	str	r3, [r2, #48]	; 0x30
 8004686:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b44      	ldr	r3, [pc, #272]	; (80047a8 <MX_GPIO_Init+0x19c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <MX_GPIO_Init+0x19c>)
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	6313      	str	r3, [r2, #48]	; 0x30
 80046a2:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <MX_GPIO_Init+0x19c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	4b3d      	ldr	r3, [pc, #244]	; (80047a8 <MX_GPIO_Init+0x19c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <MX_GPIO_Init+0x19c>)
 80046b8:	f043 0308 	orr.w	r3, r3, #8
 80046bc:	6313      	str	r3, [r2, #48]	; 0x30
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <MX_GPIO_Init+0x19c>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80046ca:	2201      	movs	r2, #1
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	4837      	ldr	r0, [pc, #220]	; (80047ac <MX_GPIO_Init+0x1a0>)
 80046d0:	f002 fa36 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	4834      	ldr	r0, [pc, #208]	; (80047ac <MX_GPIO_Init+0x1a0>)
 80046da:	f002 fa31 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_SET);
 80046de:	2201      	movs	r2, #1
 80046e0:	2101      	movs	r1, #1
 80046e2:	4833      	ldr	r0, [pc, #204]	; (80047b0 <MX_GPIO_Init+0x1a4>)
 80046e4:	f002 fa2c 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 80046e8:	2200      	movs	r2, #0
 80046ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 80046ee:	4831      	ldr	r0, [pc, #196]	; (80047b4 <MX_GPIO_Init+0x1a8>)
 80046f0:	f002 fa26 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 80046f4:	2200      	movs	r2, #0
 80046f6:	2104      	movs	r1, #4
 80046f8:	482f      	ldr	r0, [pc, #188]	; (80047b8 <MX_GPIO_Init+0x1ac>)
 80046fa:	f002 fa21 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 80046fe:	2318      	movs	r3, #24
 8004700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004702:	2300      	movs	r3, #0
 8004704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800470a:	f107 031c 	add.w	r3, r7, #28
 800470e:	4619      	mov	r1, r3
 8004710:	482a      	ldr	r0, [pc, #168]	; (80047bc <MX_GPIO_Init+0x1b0>)
 8004712:	f001 ff65 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8004716:	23c0      	movs	r3, #192	; 0xc0
 8004718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800471a:	2301      	movs	r3, #1
 800471c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004722:	2300      	movs	r3, #0
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004726:	f107 031c 	add.w	r3, r7, #28
 800472a:	4619      	mov	r1, r3
 800472c:	481f      	ldr	r0, [pc, #124]	; (80047ac <MX_GPIO_Init+0x1a0>)
 800472e:	f001 ff57 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8004732:	2320      	movs	r3, #32
 8004734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004736:	2300      	movs	r3, #0
 8004738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800473a:	2301      	movs	r3, #1
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800473e:	f107 031c 	add.w	r3, r7, #28
 8004742:	4619      	mov	r1, r3
 8004744:	481b      	ldr	r0, [pc, #108]	; (80047b4 <MX_GPIO_Init+0x1a8>)
 8004746:	f001 ff4b 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 800474a:	2301      	movs	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800474e:	2301      	movs	r3, #1
 8004750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004752:	2301      	movs	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004756:	2303      	movs	r3, #3
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 800475a:	f107 031c 	add.w	r3, r7, #28
 800475e:	4619      	mov	r1, r3
 8004760:	4813      	ldr	r0, [pc, #76]	; (80047b0 <MX_GPIO_Init+0x1a4>)
 8004762:	f001 ff3d 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8004766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800476a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800476c:	2301      	movs	r3, #1
 800476e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004774:	2300      	movs	r3, #0
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004778:	f107 031c 	add.w	r3, r7, #28
 800477c:	4619      	mov	r1, r3
 800477e:	480d      	ldr	r0, [pc, #52]	; (80047b4 <MX_GPIO_Init+0x1a8>)
 8004780:	f001 ff2e 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8004784:	2304      	movs	r3, #4
 8004786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004788:	2301      	movs	r3, #1
 800478a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004790:	2300      	movs	r3, #0
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	4619      	mov	r1, r3
 800479a:	4807      	ldr	r0, [pc, #28]	; (80047b8 <MX_GPIO_Init+0x1ac>)
 800479c:	f001 ff20 	bl	80065e0 <HAL_GPIO_Init>

}
 80047a0:	bf00      	nop
 80047a2:	3730      	adds	r7, #48	; 0x30
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40021000 	.word	0x40021000

080047c0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	611a      	str	r2, [r3, #16]
 80047d4:	615a      	str	r2, [r3, #20]
 80047d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <MX_FSMC_Init+0xb8>)
 80047da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80047de:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <MX_FSMC_Init+0xb8>)
 80047e2:	4a26      	ldr	r2, [pc, #152]	; (800487c <MX_FSMC_Init+0xbc>)
 80047e4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <MX_FSMC_Init+0xb8>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <MX_FSMC_Init+0xb8>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80047f2:	4b21      	ldr	r3, [pc, #132]	; (8004878 <MX_FSMC_Init+0xb8>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80047f8:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <MX_FSMC_Init+0xb8>)
 80047fa:	2210      	movs	r2, #16
 80047fc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004800:	2200      	movs	r2, #0
 8004802:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004804:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004806:	2200      	movs	r2, #0
 8004808:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800480a:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <MX_FSMC_Init+0xb8>)
 800480c:	2200      	movs	r2, #0
 800480e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004812:	2200      	movs	r2, #0
 8004814:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800481c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800481e:	4b16      	ldr	r3, [pc, #88]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004820:	2200      	movs	r2, #0
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <MX_FSMC_Init+0xb8>)
 800482c:	2200      	movs	r2, #0
 800482e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004832:	2200      	movs	r2, #0
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004838:	2200      	movs	r2, #0
 800483a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 800483c:	2302      	movs	r3, #2
 800483e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004840:	230f      	movs	r3, #15
 8004842:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8004844:	2305      	movs	r3, #5
 8004846:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8004848:	2302      	movs	r3, #2
 800484a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800484c:	2310      	movs	r3, #16
 800484e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004850:	2311      	movs	r3, #17
 8004852:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	2200      	movs	r2, #0
 800485c:	4619      	mov	r1, r3
 800485e:	4806      	ldr	r0, [pc, #24]	; (8004878 <MX_FSMC_Init+0xb8>)
 8004860:	f005 fdc0 	bl	800a3e4 <HAL_SRAM_Init>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800486a:	f000 f809 	bl	8004880 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800486e:	bf00      	nop
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2000049c 	.word	0x2000049c
 800487c:	a0000104 	.word	0xa0000104

08004880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004884:	b672      	cpsid	i
}
 8004886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004888:	e7fe      	b.n	8004888 <Error_Handler+0x8>

0800488a <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b) {
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	4603      	mov	r3, r0
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	460b      	mov	r3, r1
 8004896:	71bb      	strb	r3, [r7, #6]
 8004898:	4613      	mov	r3, r2
 800489a:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	041a      	lsls	r2, r3, #16
 80048a0:	79bb      	ldrb	r3, [r7, #6]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	441a      	add	r2, r3
 80048a6:	797b      	ldrb	r3, [r7, #5]
 80048a8:	4413      	add	r3, r2
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24) {
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4603      	mov	r3, r0
 80048be:	6039      	str	r1, [r7, #0]
 80048c0:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <H24_RGB565+0x4a>
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	08db      	lsrs	r3, r3, #3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	02db      	lsls	r3, r3, #11
 80048e0:	b21a      	sxth	r2, r3
 80048e2:	7bbb      	ldrb	r3, [r7, #14]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	015b      	lsls	r3, r3, #5
 80048ea:	b21b      	sxth	r3, r3
 80048ec:	4313      	orrs	r3, r2
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	7b7b      	ldrb	r3, [r7, #13]
 80048f2:	08db      	lsrs	r3, r3, #3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	b21b      	sxth	r3, r3
 80048f8:	4313      	orrs	r3, r2
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	e012      	b.n	8004926 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8004900:	7b7b      	ldrb	r3, [r7, #13]
 8004902:	08db      	lsrs	r3, r3, #3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	02db      	lsls	r3, r3, #11
 8004908:	b21a      	sxth	r2, r3
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	b2db      	uxtb	r3, r3
 8004910:	015b      	lsls	r3, r3, #5
 8004912:	b21b      	sxth	r3, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	b21a      	sxth	r2, r3
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	b21b      	sxth	r3, r3
 8004920:	4313      	orrs	r3, r2
 8004922:	b21b      	sxth	r3, r3
 8004924:	b29b      	uxth	r3, r3
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd) {
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 800493c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	8013      	strh	r3, [r2, #0]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat) {
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e005      	b.n	800496c <LCD_Send_Dat+0x1c>
	DAT = dat;
 8004960:	4a07      	ldr	r2, [pc, #28]	; (8004980 <LCD_Send_Dat+0x30>)
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	3301      	adds	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f6      	beq.n	8004960 <LCD_Send_Dat+0x10>
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	60080000 	.word	0x60080000

08004984 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4604      	mov	r4, r0
 800498c:	4608      	mov	r0, r1
 800498e:	4611      	mov	r1, r2
 8004990:	461a      	mov	r2, r3
 8004992:	4623      	mov	r3, r4
 8004994:	80fb      	strh	r3, [r7, #6]
 8004996:	4603      	mov	r3, r0
 8004998:	80bb      	strh	r3, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	807b      	strh	r3, [r7, #2]
 800499e:	4613      	mov	r3, r2
 80049a0:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 80049a2:	202a      	movs	r0, #42	; 0x2a
 80049a4:	f7ff ffc5 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 80049a8:	88bb      	ldrh	r3, [r7, #4]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff ffce 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 80049b4:	88bb      	ldrh	r3, [r7, #4]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ffc8 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 80049c0:	883b      	ldrh	r3, [r7, #0]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff ffc2 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 80049cc:	883b      	ldrh	r3, [r7, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ffbc 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 80049d8:	202b      	movs	r0, #43	; 0x2b
 80049da:	f7ff ffaa 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ffb3 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ffad 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 80049f6:	887b      	ldrh	r3, [r7, #2]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ffa7 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ffa1 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8004a0e:	202c      	movs	r0, #44	; 0x2c
 8004a10:	f7ff ff8f 	bl	8004932 <LCD_Send_Cmd>
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}

08004a1c <LCD_Rect_Fill>:
void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24) {
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(1, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24) {
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4604      	mov	r4, r0
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	80fb      	strh	r3, [r7, #6]
 8004a2e:	4603      	mov	r3, r0
 8004a30:	80bb      	strh	r3, [r7, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	807b      	strh	r3, [r7, #2]
 8004a36:	4613      	mov	r3, r2
 8004a38:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	883a      	ldrh	r2, [r7, #0]
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004a48:	88ba      	ldrh	r2, [r7, #4]
 8004a4a:	883b      	ldrh	r3, [r7, #0]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29c      	uxth	r4, r3
 8004a54:	88fa      	ldrh	r2, [r7, #6]
 8004a56:	887b      	ldrh	r3, [r7, #2]
 8004a58:	4413      	add	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	88f9      	ldrh	r1, [r7, #6]
 8004a62:	88b8      	ldrh	r0, [r7, #4]
 8004a64:	4622      	mov	r2, r4
 8004a66:	f7ff ff8d 	bl	8004984 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e00a      	b.n	8004a86 <LCD_Rect_Fill+0x6a>
 8004a70:	6a39      	ldr	r1, [r7, #32]
 8004a72:	2001      	movs	r0, #1
 8004a74:	f7ff ff1f 	bl	80048b6 <H24_RGB565>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff ff68 	bl	8004950 <LCD_Send_Dat>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3f0      	bcc.n	8004a70 <LCD_Rect_Fill+0x54>
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd90      	pop	{r4, r7, pc}

08004a98 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24) {
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b08b      	sub	sp, #44	; 0x2c
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	80fb      	strh	r3, [r7, #6]
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80bb      	strh	r3, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	807b      	strh	r3, [r7, #2]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bfb8      	it	lt
 8004ac0:	425b      	neglt	r3, r3
 8004ac2:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8004ac4:	883a      	ldrh	r2, [r7, #0]
 8004ac6:	88bb      	ldrh	r3, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfb8      	it	lt
 8004ace:	425b      	neglt	r3, r3
 8004ad0:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d201      	bcs.n	8004ade <LCD_Line+0x46>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e001      	b.n	8004ae2 <LCD_Line+0x4a>
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae2:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8004ae4:	88ba      	ldrh	r2, [r7, #4]
 8004ae6:	883b      	ldrh	r3, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d201      	bcs.n	8004af0 <LCD_Line+0x58>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e001      	b.n	8004af4 <LCD_Line+0x5c>
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004b02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b0c:	b29c      	uxth	r4, r3
 8004b0e:	88b9      	ldrh	r1, [r7, #4]
 8004b10:	88f8      	ldrh	r0, [r7, #6]
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4623      	mov	r3, r4
 8004b18:	f7ff ff80 	bl	8004a1c <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d103      	bne.n	8004b2c <LCD_Line+0x94>
 8004b24:	88ba      	ldrh	r2, [r7, #4]
 8004b26:	883b      	ldrh	r3, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d01e      	beq.n	8004b6a <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	425b      	negs	r3, r3
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	dd08      	ble.n	8004b4e <LCD_Line+0xb6>
		{
			error -= deltaY;
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	dad5      	bge.n	8004b02 <LCD_Line+0x6a>
		{
			error += deltaX;
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	88bb      	ldrh	r3, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004b68:	e7cb      	b.n	8004b02 <LCD_Line+0x6a>
		break;
 8004b6a:	bf00      	nop
		}
	}
}
 8004b6c:	bf00      	nop
 8004b6e:	3724      	adds	r7, #36	; 0x24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd90      	pop	{r4, r7, pc}

08004b74 <LCD_Rect>:
		x += xinc2;
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24) {
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	80fb      	strh	r3, [r7, #6]
 8004b86:	4603      	mov	r3, r0
 8004b88:	80bb      	strh	r3, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	807b      	strh	r3, [r7, #2]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	4413      	add	r3, r2
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	88bc      	ldrh	r4, [r7, #4]
 8004b9c:	88b9      	ldrh	r1, [r7, #4]
 8004b9e:	88f8      	ldrh	r0, [r7, #6]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	7e3b      	ldrb	r3, [r7, #24]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4623      	mov	r3, r4
 8004baa:	f7ff ff75 	bl	8004a98 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004bae:	88ba      	ldrh	r2, [r7, #4]
 8004bb0:	883b      	ldrh	r3, [r7, #0]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	b299      	uxth	r1, r3
 8004bb6:	88fa      	ldrh	r2, [r7, #6]
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	4413      	add	r3, r2
 8004bbc:	b29c      	uxth	r4, r3
 8004bbe:	88ba      	ldrh	r2, [r7, #4]
 8004bc0:	883b      	ldrh	r3, [r7, #0]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	88f8      	ldrh	r0, [r7, #6]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	7e3b      	ldrb	r3, [r7, #24]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	f7ff ff60 	bl	8004a98 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004bd8:	88ba      	ldrh	r2, [r7, #4]
 8004bda:	883b      	ldrh	r3, [r7, #0]
 8004bdc:	4413      	add	r3, r2
 8004bde:	b29c      	uxth	r4, r3
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	88b9      	ldrh	r1, [r7, #4]
 8004be4:	88f8      	ldrh	r0, [r7, #6]
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	7e3b      	ldrb	r3, [r7, #24]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4623      	mov	r3, r4
 8004bf0:	f7ff ff52 	bl	8004a98 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004bf4:	88fa      	ldrh	r2, [r7, #6]
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	b298      	uxth	r0, r3
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	4413      	add	r3, r2
 8004c02:	b29c      	uxth	r4, r3
 8004c04:	88ba      	ldrh	r2, [r7, #4]
 8004c06:	883b      	ldrh	r3, [r7, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	88b9      	ldrh	r1, [r7, #4]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	7e3b      	ldrb	r3, [r7, #24]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	4622      	mov	r2, r4
 8004c1a:	f7ff ff3d 	bl	8004a98 <LCD_Line>
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd90      	pop	{r4, r7, pc}

08004c26 <LCD_Circle>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24) {
 8004c26:	b590      	push	{r4, r7, lr}
 8004c28:	b089      	sub	sp, #36	; 0x24
 8004c2a:	af02      	add	r7, sp, #8
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	4608      	mov	r0, r1
 8004c30:	4611      	mov	r1, r2
 8004c32:	461a      	mov	r2, r3
 8004c34:	4623      	mov	r3, r4
 8004c36:	80fb      	strh	r3, [r7, #6]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	80bb      	strh	r3, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
 8004c40:	4613      	mov	r3, r2
 8004c42:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	f1c3 0301 	rsb	r3, r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004c54:	e0fc      	b.n	8004e50 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004c56:	78bb      	ldrb	r3, [r7, #2]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d136      	bne.n	8004cca <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	b298      	uxth	r0, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	88ba      	ldrh	r2, [r7, #4]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	b299      	uxth	r1, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	b29c      	uxth	r4, r3
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	f7ff fec5 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	b298      	uxth	r0, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	88ba      	ldrh	r2, [r7, #4]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	b299      	uxth	r1, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b29c      	uxth	r4, r3
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	f7ff feaa 	bl	8004a1c <LCD_Rect_Fill>
 8004cc8:	e0a7      	b.n	8004e1a <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	b298      	uxth	r0, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	88bb      	ldrh	r3, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	b299      	uxth	r1, r3
 8004cde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ce8:	b29c      	uxth	r4, r3
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4623      	mov	r3, r4
 8004cf0:	f7ff fe94 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	b298      	uxth	r0, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	88bb      	ldrh	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	b299      	uxth	r1, r3
 8004d08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d12:	b29c      	uxth	r4, r3
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4623      	mov	r3, r4
 8004d1a:	f7ff fe7f 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	b298      	uxth	r0, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	88bb      	ldrh	r3, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	b299      	uxth	r1, r3
 8004d32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d3c:	b29c      	uxth	r4, r3
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	4623      	mov	r3, r4
 8004d44:	f7ff fe6a 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	b298      	uxth	r0, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	88bb      	ldrh	r3, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	b299      	uxth	r1, r3
 8004d5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d66:	b29c      	uxth	r4, r3
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	f7ff fe55 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	4413      	add	r3, r2
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	88ba      	ldrh	r2, [r7, #4]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	b299      	uxth	r1, r3
 8004d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d90:	b29c      	uxth	r4, r3
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	4623      	mov	r3, r4
 8004d98:	f7ff fe40 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	4413      	add	r3, r2
 8004da4:	b298      	uxth	r0, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	88ba      	ldrh	r2, [r7, #4]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	b299      	uxth	r1, r3
 8004db0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dba:	b29c      	uxth	r4, r3
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	f7ff fe2b 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	b298      	uxth	r0, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	88ba      	ldrh	r2, [r7, #4]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	b299      	uxth	r1, r3
 8004dda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004de4:	b29c      	uxth	r4, r3
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	4623      	mov	r3, r4
 8004dec:	f7ff fe16 	bl	8004a1c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	88fa      	ldrh	r2, [r7, #6]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	b298      	uxth	r0, r3
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	88ba      	ldrh	r2, [r7, #4]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	b299      	uxth	r1, r3
 8004e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e0e:	b29c      	uxth	r4, r3
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	4623      	mov	r3, r4
 8004e16:	f7ff fe01 	bl	8004a1c <LCD_Rect_Fill>
		}
		if (P < 0)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	da09      	bge.n	8004e34 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1cda      	adds	r2, r3, #3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
			a_++;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e00d      	b.n	8004e50 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1d5a      	adds	r2, r3, #5
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1acb      	subs	r3, r1, r3
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
			a_++;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3301      	adds	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
			b_--;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	f77f aefe 	ble.w	8004c56 <LCD_Circle+0x30>
		}
	}
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd90      	pop	{r4, r7, pc}

08004e64 <LCD_Char>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24) {
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b08b      	sub	sp, #44	; 0x2c
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60ba      	str	r2, [r7, #8]
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	4603      	mov	r3, r0
 8004e70:	81fb      	strh	r3, [r7, #14]
 8004e72:	460b      	mov	r3, r1
 8004e74:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	777b      	strb	r3, [r7, #29]
 8004e86:	2300      	movs	r3, #0
 8004e88:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004e8e:	2300      	movs	r3, #0
 8004e90:	763b      	strb	r3, [r7, #24]
 8004e92:	e093      	b.n	8004fbc <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	767b      	strb	r3, [r7, #25]
 8004e98:	e052      	b.n	8004f40 <LCD_Char+0xdc>
		{
			if(bit == 0)
 8004e9a:	7f3b      	ldrb	r3, [r7, #28]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8004ea0:	8bfb      	ldrh	r3, [r7, #30]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	83fa      	strh	r2, [r7, #30]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4413      	add	r3, r2
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8004eb4:	7f7a      	ldrb	r2, [r7, #29]
 8004eb6:	7f3b      	ldrb	r3, [r7, #28]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <LCD_Char+0x64>
			{
				set_pixels++;
 8004ec0:	8b7b      	ldrh	r3, [r7, #26]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	837b      	strh	r3, [r7, #26]
 8004ec6:	e035      	b.n	8004f34 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8004ec8:	8b7b      	ldrh	r3, [r7, #26]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d032      	beq.n	8004f34 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	7e7b      	ldrb	r3, [r7, #25]
 8004ed8:	441a      	add	r2, r3
 8004eda:	8b7b      	ldrh	r3, [r7, #26]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	fb12 f303 	smulbb	r3, r2, r3
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	4413      	add	r3, r2
 8004ef0:	b298      	uxth	r0, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	7e3b      	ldrb	r3, [r7, #24]
 8004efc:	4413      	add	r3, r2
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	fb12 f303 	smulbb	r3, r2, r3
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	89bb      	ldrh	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	b299      	uxth	r1, r3
 8004f12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8b7a      	ldrh	r2, [r7, #26]
 8004f1a:	fb12 f303 	smulbb	r3, r2, r3
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f24:	b29c      	uxth	r4, r3
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	4623      	mov	r3, r4
 8004f2c:	f7ff fd76 	bl	8004a1c <LCD_Rect_Fill>
				set_pixels = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8004f34:	7f3b      	ldrb	r3, [r7, #28]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8004f3a:	7e7b      	ldrb	r3, [r7, #25]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	767b      	strb	r3, [r7, #25]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	789b      	ldrb	r3, [r3, #2]
 8004f44:	7e7a      	ldrb	r2, [r7, #25]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3a7      	bcc.n	8004e9a <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8004f4a:	8b7b      	ldrh	r3, [r7, #26]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d032      	beq.n	8004fb6 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8004f56:	461a      	mov	r2, r3
 8004f58:	7e7b      	ldrb	r3, [r7, #25]
 8004f5a:	441a      	add	r2, r3
 8004f5c:	8b7b      	ldrh	r3, [r7, #26]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	fb12 f303 	smulbb	r3, r2, r3
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	89fb      	ldrh	r3, [r7, #14]
 8004f70:	4413      	add	r3, r2
 8004f72:	b298      	uxth	r0, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	7e3b      	ldrb	r3, [r7, #24]
 8004f7e:	4413      	add	r3, r2
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	fb12 f303 	smulbb	r3, r2, r3
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	89bb      	ldrh	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	b299      	uxth	r1, r3
 8004f94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	8b7a      	ldrh	r2, [r7, #26]
 8004f9c:	fb12 f303 	smulbb	r3, r2, r3
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004fa6:	b29c      	uxth	r4, r3
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4623      	mov	r3, r4
 8004fae:	f7ff fd35 	bl	8004a1c <LCD_Rect_Fill>
			set_pixels = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004fb6:	7e3b      	ldrb	r3, [r7, #24]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	763b      	strb	r3, [r7, #24]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	78db      	ldrb	r3, [r3, #3]
 8004fc0:	7e3a      	ldrb	r2, [r7, #24]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	f4ff af66 	bcc.w	8004e94 <LCD_Char+0x30>
		}
	}
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3724      	adds	r7, #36	; 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd90      	pop	{r4, r7, pc}

08004fd2 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24) {
 8004fd2:	b590      	push	{r4, r7, lr}
 8004fd4:	b08f      	sub	sp, #60	; 0x3c
 8004fd6:	af02      	add	r7, sp, #8
 8004fd8:	60ba      	str	r2, [r7, #8]
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	81fb      	strh	r3, [r7, #14]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8004fe4:	89fb      	ldrh	r3, [r7, #14]
 8004fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8004fe8:	89bb      	ldrh	r3, [r7, #12]
 8004fea:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8004fec:	f107 031c 	add.w	r3, r7, #28
 8004ff0:	220c      	movs	r2, #12
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f006 fbbb 	bl	800b770 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ffe:	e056      	b.n	80050ae <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8005000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4413      	add	r3, r2
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 800500c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005010:	2b0a      	cmp	r3, #10
 8005012:	d10f      	bne.n	8005034 <LCD_Font+0x62>
		{
			cursor_x = x;
 8005014:	89fb      	ldrh	r3, [r7, #14]
 8005016:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8005018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800501c:	b29a      	uxth	r2, r3
 800501e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005022:	b29b      	uxth	r3, r3
 8005024:	fb12 f303 	smulbb	r3, r2, r3
 8005028:	b29a      	uxth	r2, r3
 800502a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800502c:	4413      	add	r3, r2
 800502e:	b29b      	uxth	r3, r3
 8005030:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005032:	e039      	b.n	80050a8 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8005034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005038:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800503c:	429a      	cmp	r2, r3
 800503e:	d333      	bcc.n	80050a8 <LCD_Font+0xd6>
 8005040:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005044:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005048:	429a      	cmp	r2, r3
 800504a:	d82d      	bhi.n	80050a8 <LCD_Font+0xd6>
 800504c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005050:	2b0d      	cmp	r3, #13
 8005052:	d029      	beq.n	80050a8 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800505a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800505e:	1a5b      	subs	r3, r3, r1
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	18d1      	adds	r1, r2, r3
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	2208      	movs	r2, #8
 800506a:	4618      	mov	r0, r3
 800506c:	f006 fb80 	bl	800b770 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005070:	f107 041c 	add.w	r4, r7, #28
 8005074:	f107 0214 	add.w	r2, r7, #20
 8005078:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800507c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4623      	mov	r3, r4
 800508c:	f7ff feea 	bl	8004e64 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8005090:	7e3b      	ldrb	r3, [r7, #24]
 8005092:	b29a      	uxth	r2, r3
 8005094:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005098:	b29b      	uxth	r3, r3
 800509a:	fb12 f303 	smulbb	r3, r2, r3
 800509e:	b29a      	uxth	r2, r3
 80050a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050a2:	4413      	add	r3, r2
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80050a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050aa:	3301      	adds	r3, #1
 80050ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050ae:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80050b0:	68b8      	ldr	r0, [r7, #8]
 80050b2:	f7fb f88d 	bl	80001d0 <strlen>
 80050b6:	4603      	mov	r3, r0
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d3a1      	bcc.n	8005000 <LCD_Font+0x2e>
		}
	}
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	3734      	adds	r7, #52	; 0x34
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}

080050c6 <LCD_Init>:

void LCD_Init(void) {
 80050c6:	b580      	push	{r7, lr}
 80050c8:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 80050ca:	2096      	movs	r0, #150	; 0x96
 80050cc:	f001 f850 	bl	8006170 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7ff fc2e 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 80050d6:	2029      	movs	r0, #41	; 0x29
 80050d8:	f7ff fc2b 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 80050dc:	20e2      	movs	r0, #226	; 0xe2
 80050de:	f7ff fc28 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 80050e2:	201d      	movs	r0, #29
 80050e4:	f7ff fc34 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 80050e8:	2002      	movs	r0, #2
 80050ea:	f7ff fc31 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 80050ee:	20ff      	movs	r0, #255	; 0xff
 80050f0:	f7ff fc2e 	bl	8004950 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 80050f4:	20e0      	movs	r0, #224	; 0xe0
 80050f6:	f7ff fc1c 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7ff fc28 	bl	8004950 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 8005100:	2078      	movs	r0, #120	; 0x78
 8005102:	f001 f835 	bl	8006170 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 8005106:	20e0      	movs	r0, #224	; 0xe0
 8005108:	f7ff fc13 	bl	8004932 <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 800510c:	2003      	movs	r0, #3
 800510e:	f7ff fc1f 	bl	8004950 <LCD_Send_Dat>
	HAL_Delay(120);
 8005112:	2078      	movs	r0, #120	; 0x78
 8005114:	f001 f82c 	bl	8006170 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 8005118:	2001      	movs	r0, #1
 800511a:	f7ff fc0a 	bl	8004932 <LCD_Send_Cmd>
	HAL_Delay(120);
 800511e:	2078      	movs	r0, #120	; 0x78
 8005120:	f001 f826 	bl	8006170 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 8005124:	20e6      	movs	r0, #230	; 0xe6
 8005126:	f7ff fc04 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 800512a:	2003      	movs	r0, #3
 800512c:	f7ff fc10 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 8005130:	2085      	movs	r0, #133	; 0x85
 8005132:	f7ff fc0d 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8005136:	201d      	movs	r0, #29
 8005138:	f7ff fc0a 	bl	8004950 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 800513c:	20b0      	movs	r0, #176	; 0xb0
 800513e:	f7ff fbf8 	bl	8004932 <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 8005142:	20ae      	movs	r0, #174	; 0xae
 8005144:	f7ff fc04 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 8005148:	2020      	movs	r0, #32
 800514a:	f7ff fc01 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 800514e:	2003      	movs	r0, #3
 8005150:	f7ff fbfe 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 8005154:	201f      	movs	r0, #31
 8005156:	f7ff fbfb 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 800515a:	2001      	movs	r0, #1
 800515c:	f7ff fbf8 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 8005160:	20df      	movs	r0, #223	; 0xdf
 8005162:	f7ff fbf5 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005166:	202d      	movs	r0, #45	; 0x2d
 8005168:	f7ff fbf2 	bl	8004950 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 800516c:	20b4      	movs	r0, #180	; 0xb4
 800516e:	f7ff fbe0 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8005172:	2003      	movs	r0, #3
 8005174:	f7ff fbec 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8005178:	20a0      	movs	r0, #160	; 0xa0
 800517a:	f7ff fbe9 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 800517e:	2000      	movs	r0, #0
 8005180:	f7ff fbe6 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8005184:	202e      	movs	r0, #46	; 0x2e
 8005186:	f7ff fbe3 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 800518a:	2030      	movs	r0, #48	; 0x30
 800518c:	f7ff fbe0 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 8005190:	2000      	movs	r0, #0
 8005192:	f7ff fbdd 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005196:	200f      	movs	r0, #15
 8005198:	f7ff fbda 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 800519c:	2000      	movs	r0, #0
 800519e:	f7ff fbd7 	bl	8004950 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 80051a2:	20b6      	movs	r0, #182	; 0xb6
 80051a4:	f7ff fbc5 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 80051a8:	2002      	movs	r0, #2
 80051aa:	f7ff fbd1 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 80051ae:	200d      	movs	r0, #13
 80051b0:	f7ff fbce 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 80051b4:	2000      	movs	r0, #0
 80051b6:	f7ff fbcb 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 80051ba:	2010      	movs	r0, #16
 80051bc:	f7ff fbc8 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 80051c0:	2010      	movs	r0, #16
 80051c2:	f7ff fbc5 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 80051c6:	2008      	movs	r0, #8
 80051c8:	f7ff fbc2 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7ff fbbf 	bl	8004950 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 80051d2:	20be      	movs	r0, #190	; 0xbe
 80051d4:	f7ff fbad 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80051d8:	2008      	movs	r0, #8
 80051da:	f7ff fbb9 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 80051de:	20ff      	movs	r0, #255	; 0xff
 80051e0:	f7ff fbb6 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 80051e4:	2001      	movs	r0, #1
 80051e6:	f7ff fbb3 	bl	8004950 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 80051ea:	2036      	movs	r0, #54	; 0x36
 80051ec:	f7ff fba1 	bl	8004932 <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 80051f0:	2003      	movs	r0, #3
 80051f2:	f7ff fbad 	bl	8004950 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80051f6:	20f0      	movs	r0, #240	; 0xf0
 80051f8:	f7ff fb9b 	bl	8004932 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80051fc:	2003      	movs	r0, #3
 80051fe:	f7ff fba7 	bl	8004950 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 8005202:	2029      	movs	r0, #41	; 0x29
 8005204:	f7ff fb95 	bl	8004932 <LCD_Send_Cmd>
}
 8005208:	bf00      	nop
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <HAL_MspInit+0x4c>)
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <HAL_MspInit+0x4c>)
 800521c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005220:	6453      	str	r3, [r2, #68]	; 0x44
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_MspInit+0x4c>)
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_MspInit+0x4c>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a08      	ldr	r2, [pc, #32]	; (8005258 <HAL_MspInit+0x4c>)
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_MspInit+0x4c>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800

0800525c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	; 0x28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005264:	f107 0314 	add.w	r3, r7, #20
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <HAL_DAC_MspInit+0x7c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d127      	bne.n	80052ce <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <HAL_DAC_MspInit+0x80>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	4a15      	ldr	r2, [pc, #84]	; (80052dc <HAL_DAC_MspInit+0x80>)
 8005288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800528c:	6413      	str	r3, [r2, #64]	; 0x40
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_DAC_MspInit+0x80>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <HAL_DAC_MspInit+0x80>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	4a0e      	ldr	r2, [pc, #56]	; (80052dc <HAL_DAC_MspInit+0x80>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6313      	str	r3, [r2, #48]	; 0x30
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <HAL_DAC_MspInit+0x80>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80052b6:	2330      	movs	r3, #48	; 0x30
 80052b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ba:	2303      	movs	r3, #3
 80052bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c2:	f107 0314 	add.w	r3, r7, #20
 80052c6:	4619      	mov	r1, r3
 80052c8:	4805      	ldr	r0, [pc, #20]	; (80052e0 <HAL_DAC_MspInit+0x84>)
 80052ca:	f001 f989 	bl	80065e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80052ce:	bf00      	nop
 80052d0:	3728      	adds	r7, #40	; 0x28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40007400 	.word	0x40007400
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40020000 	.word	0x40020000

080052e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_I2C_MspInit+0x84>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d12b      	bne.n	800535e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_I2C_MspInit+0x88>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <HAL_I2C_MspInit+0x88>)
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	6313      	str	r3, [r2, #48]	; 0x30
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <HAL_I2C_MspInit+0x88>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005322:	23c0      	movs	r3, #192	; 0xc0
 8005324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005326:	2312      	movs	r3, #18
 8005328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800532a:	2301      	movs	r3, #1
 800532c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800532e:	2303      	movs	r3, #3
 8005330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005332:	2304      	movs	r3, #4
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005336:	f107 0314 	add.w	r3, r7, #20
 800533a:	4619      	mov	r1, r3
 800533c:	480c      	ldr	r0, [pc, #48]	; (8005370 <HAL_I2C_MspInit+0x8c>)
 800533e:	f001 f94f 	bl	80065e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_I2C_MspInit+0x88>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <HAL_I2C_MspInit+0x88>)
 800534c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005350:	6413      	str	r3, [r2, #64]	; 0x40
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_I2C_MspInit+0x88>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800535e:	bf00      	nop
 8005360:	3728      	adds	r7, #40	; 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40005400 	.word	0x40005400
 800536c:	40023800 	.word	0x40023800
 8005370:	40020400 	.word	0x40020400

08005374 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <HAL_I2C_MspDeInit+0x38>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10d      	bne.n	80053a2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005386:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <HAL_I2C_MspDeInit+0x3c>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <HAL_I2C_MspDeInit+0x3c>)
 800538c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005390:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005392:	2140      	movs	r1, #64	; 0x40
 8005394:	4807      	ldr	r0, [pc, #28]	; (80053b4 <HAL_I2C_MspDeInit+0x40>)
 8005396:	f001 fabf 	bl	8006918 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	4805      	ldr	r0, [pc, #20]	; (80053b4 <HAL_I2C_MspDeInit+0x40>)
 800539e:	f001 fabb 	bl	8006918 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40005400 	.word	0x40005400
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40020400 	.word	0x40020400

080053b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	605a      	str	r2, [r3, #4]
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <HAL_RTC_MspInit+0x4c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d111      	bne.n	80053fc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80053d8:	2302      	movs	r3, #2
 80053da:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80053dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053e2:	f107 0308 	add.w	r3, r7, #8
 80053e6:	4618      	mov	r0, r3
 80053e8:	f003 fe40 	bl	800906c <HAL_RCCEx_PeriphCLKConfig>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80053f2:	f7ff fa45 	bl	8004880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80053f6:	4b04      	ldr	r3, [pc, #16]	; (8005408 <HAL_RTC_MspInit+0x50>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40002800 	.word	0x40002800
 8005408:	42470e3c 	.word	0x42470e3c

0800540c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a5b      	ldr	r2, [pc, #364]	; (8005598 <HAL_SPI_MspInit+0x18c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d12c      	bne.n	8005488 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	4a59      	ldr	r2, [pc, #356]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800543c:	6453      	str	r3, [r2, #68]	; 0x44
 800543e:	4b57      	ldr	r3, [pc, #348]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	4b53      	ldr	r3, [pc, #332]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	4a52      	ldr	r2, [pc, #328]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	6313      	str	r3, [r2, #48]	; 0x30
 800545a:	4b50      	ldr	r3, [pc, #320]	; (800559c <HAL_SPI_MspInit+0x190>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005466:	2338      	movs	r3, #56	; 0x38
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546a:	2302      	movs	r3, #2
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005472:	2303      	movs	r3, #3
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005476:	2305      	movs	r3, #5
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800547a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800547e:	4619      	mov	r1, r3
 8005480:	4847      	ldr	r0, [pc, #284]	; (80055a0 <HAL_SPI_MspInit+0x194>)
 8005482:	f001 f8ad 	bl	80065e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005486:	e083      	b.n	8005590 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a45      	ldr	r2, [pc, #276]	; (80055a4 <HAL_SPI_MspInit+0x198>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d12d      	bne.n	80054ee <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	4a40      	ldr	r2, [pc, #256]	; (800559c <HAL_SPI_MspInit+0x190>)
 800549c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054a0:	6413      	str	r3, [r2, #64]	; 0x40
 80054a2:	4b3e      	ldr	r3, [pc, #248]	; (800559c <HAL_SPI_MspInit+0x190>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	4b3a      	ldr	r3, [pc, #232]	; (800559c <HAL_SPI_MspInit+0x190>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	4a39      	ldr	r2, [pc, #228]	; (800559c <HAL_SPI_MspInit+0x190>)
 80054b8:	f043 0302 	orr.w	r3, r3, #2
 80054bc:	6313      	str	r3, [r2, #48]	; 0x30
 80054be:	4b37      	ldr	r3, [pc, #220]	; (800559c <HAL_SPI_MspInit+0x190>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80054ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d0:	2302      	movs	r3, #2
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d8:	2303      	movs	r3, #3
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80054dc:	2305      	movs	r3, #5
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e4:	4619      	mov	r1, r3
 80054e6:	482e      	ldr	r0, [pc, #184]	; (80055a0 <HAL_SPI_MspInit+0x194>)
 80054e8:	f001 f87a 	bl	80065e0 <HAL_GPIO_Init>
}
 80054ec:	e050      	b.n	8005590 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI3)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2d      	ldr	r2, [pc, #180]	; (80055a8 <HAL_SPI_MspInit+0x19c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d14b      	bne.n	8005590 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80054f8:	2300      	movs	r3, #0
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	4b27      	ldr	r3, [pc, #156]	; (800559c <HAL_SPI_MspInit+0x190>)
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005506:	6413      	str	r3, [r2, #64]	; 0x40
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <HAL_SPI_MspInit+0x190>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	4b20      	ldr	r3, [pc, #128]	; (800559c <HAL_SPI_MspInit+0x190>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_SPI_MspInit+0x190>)
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	6313      	str	r3, [r2, #48]	; 0x30
 8005524:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005530:	2300      	movs	r3, #0
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4a18      	ldr	r2, [pc, #96]	; (800559c <HAL_SPI_MspInit+0x190>)
 800553a:	f043 0304 	orr.w	r3, r3, #4
 800553e:	6313      	str	r3, [r2, #48]	; 0x30
 8005540:	4b16      	ldr	r3, [pc, #88]	; (800559c <HAL_SPI_MspInit+0x190>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800554c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005552:	2302      	movs	r3, #2
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555a:	2303      	movs	r3, #3
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800555e:	2306      	movs	r3, #6
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005566:	4619      	mov	r1, r3
 8005568:	4810      	ldr	r0, [pc, #64]	; (80055ac <HAL_SPI_MspInit+0x1a0>)
 800556a:	f001 f839 	bl	80065e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800556e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005578:	2300      	movs	r3, #0
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557c:	2303      	movs	r3, #3
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005580:	2306      	movs	r3, #6
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005588:	4619      	mov	r1, r3
 800558a:	4809      	ldr	r0, [pc, #36]	; (80055b0 <HAL_SPI_MspInit+0x1a4>)
 800558c:	f001 f828 	bl	80065e0 <HAL_GPIO_Init>
}
 8005590:	bf00      	nop
 8005592:	3738      	adds	r7, #56	; 0x38
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40013000 	.word	0x40013000
 800559c:	40023800 	.word	0x40023800
 80055a0:	40020400 	.word	0x40020400
 80055a4:	40003800 	.word	0x40003800
 80055a8:	40003c00 	.word	0x40003c00
 80055ac:	40020000 	.word	0x40020000
 80055b0:	40020800 	.word	0x40020800

080055b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <HAL_UART_MspInit+0x94>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d134      	bne.n	8005640 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	4b1c      	ldr	r3, [pc, #112]	; (800564c <HAL_UART_MspInit+0x98>)
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	4a1b      	ldr	r2, [pc, #108]	; (800564c <HAL_UART_MspInit+0x98>)
 80055e0:	f043 0310 	orr.w	r3, r3, #16
 80055e4:	6453      	str	r3, [r2, #68]	; 0x44
 80055e6:	4b19      	ldr	r3, [pc, #100]	; (800564c <HAL_UART_MspInit+0x98>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	4b15      	ldr	r3, [pc, #84]	; (800564c <HAL_UART_MspInit+0x98>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	4a14      	ldr	r2, [pc, #80]	; (800564c <HAL_UART_MspInit+0x98>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	6313      	str	r3, [r2, #48]	; 0x30
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <HAL_UART_MspInit+0x98>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800560e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005614:	2302      	movs	r3, #2
 8005616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561c:	2303      	movs	r3, #3
 800561e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005620:	2307      	movs	r3, #7
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005624:	f107 0314 	add.w	r3, r7, #20
 8005628:	4619      	mov	r1, r3
 800562a:	4809      	ldr	r0, [pc, #36]	; (8005650 <HAL_UART_MspInit+0x9c>)
 800562c:	f000 ffd8 	bl	80065e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005630:	2200      	movs	r2, #0
 8005632:	2100      	movs	r1, #0
 8005634:	2025      	movs	r0, #37	; 0x25
 8005636:	f000 fe9a 	bl	800636e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800563a:	2025      	movs	r0, #37	; 0x25
 800563c:	f000 feb3 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005640:	bf00      	nop
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40011000 	.word	0x40011000
 800564c:	40023800 	.word	0x40023800
 8005650:	40020000 	.word	0x40020000

08005654 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	609a      	str	r2, [r3, #8]
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005668:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <HAL_FSMC_MspInit+0x88>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d131      	bne.n	80056d4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005670:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <HAL_FSMC_MspInit+0x88>)
 8005672:	2201      	movs	r2, #1
 8005674:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <HAL_FSMC_MspInit+0x8c>)
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <HAL_FSMC_MspInit+0x8c>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	6393      	str	r3, [r2, #56]	; 0x38
 8005686:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <HAL_FSMC_MspInit+0x8c>)
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005692:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005696:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005698:	2302      	movs	r3, #2
 800569a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056a0:	2303      	movs	r3, #3
 80056a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80056a4:	230c      	movs	r3, #12
 80056a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	480d      	ldr	r0, [pc, #52]	; (80056e4 <HAL_FSMC_MspInit+0x90>)
 80056ae:	f000 ff97 	bl	80065e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80056b2:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80056b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b8:	2302      	movs	r3, #2
 80056ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c0:	2303      	movs	r3, #3
 80056c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80056c4:	230c      	movs	r3, #12
 80056c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	4619      	mov	r1, r3
 80056cc:	4806      	ldr	r0, [pc, #24]	; (80056e8 <HAL_FSMC_MspInit+0x94>)
 80056ce:	f000 ff87 	bl	80065e0 <HAL_GPIO_Init>
 80056d2:	e000      	b.n	80056d6 <HAL_FSMC_MspInit+0x82>
    return;
 80056d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20001120 	.word	0x20001120
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40020c00 	.word	0x40020c00

080056ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80056f4:	f7ff ffae 	bl	8005654 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005704:	e7fe      	b.n	8005704 <NMI_Handler+0x4>

08005706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005706:	b480      	push	{r7}
 8005708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800570a:	e7fe      	b.n	800570a <HardFault_Handler+0x4>

0800570c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005710:	e7fe      	b.n	8005710 <MemManage_Handler+0x4>

08005712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005712:	b480      	push	{r7}
 8005714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005716:	e7fe      	b.n	8005716 <BusFault_Handler+0x4>

08005718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800571c:	e7fe      	b.n	800571c <UsageFault_Handler+0x4>

0800571e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800571e:	b480      	push	{r7}
 8005720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005722:	bf00      	nop
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800573e:	bf00      	nop
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800574c:	f000 fcf0 	bl	8006130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005750:	bf00      	nop
 8005752:	bd80      	pop	{r7, pc}

08005754 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005758:	4802      	ldr	r0, [pc, #8]	; (8005764 <USART1_IRQHandler+0x10>)
 800575a:	f004 ff97 	bl	800a68c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000458 	.word	0x20000458

08005768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
	return 1;
 800576c:	2301      	movs	r3, #1
}
 800576e:	4618      	mov	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <_kill>:

int _kill(int pid, int sig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005782:	f005 ffbb 	bl	800b6fc <__errno>
 8005786:	4603      	mov	r3, r0
 8005788:	2216      	movs	r2, #22
 800578a:	601a      	str	r2, [r3, #0]
	return -1;
 800578c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <_exit>:

void _exit (int status)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80057a0:	f04f 31ff 	mov.w	r1, #4294967295
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ffe7 	bl	8005778 <_kill>
	while (1) {}		/* Make sure we hang here */
 80057aa:	e7fe      	b.n	80057aa <_exit+0x12>

080057ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e00a      	b.n	80057d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80057be:	f3af 8000 	nop.w
 80057c2:	4601      	mov	r1, r0
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	60ba      	str	r2, [r7, #8]
 80057ca:	b2ca      	uxtb	r2, r1
 80057cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	3301      	adds	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	dbf0      	blt.n	80057be <_read+0x12>
	}

return len;
 80057dc:	687b      	ldr	r3, [r7, #4]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e009      	b.n	800580c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	60ba      	str	r2, [r7, #8]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	3301      	adds	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	dbf1      	blt.n	80057f8 <_write+0x12>
	}
	return len;
 8005814:	687b      	ldr	r3, [r7, #4]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <_close>:

int _close(int file)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
	return -1;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005846:	605a      	str	r2, [r3, #4]
	return 0;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <_isatty>:

int _isatty(int file)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
	return 1;
 800585e:	2301      	movs	r3, #1
}
 8005860:	4618      	mov	r0, r3
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
	return 0;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005890:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <_sbrk+0x5c>)
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <_sbrk+0x60>)
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <_sbrk+0x64>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <_sbrk+0x64>)
 80058a6:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <_sbrk+0x68>)
 80058a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058aa:	4b10      	ldr	r3, [pc, #64]	; (80058ec <_sbrk+0x64>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d207      	bcs.n	80058c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058b8:	f005 ff20 	bl	800b6fc <__errno>
 80058bc:	4603      	mov	r3, r0
 80058be:	220c      	movs	r2, #12
 80058c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
 80058c6:	e009      	b.n	80058dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058c8:	4b08      	ldr	r3, [pc, #32]	; (80058ec <_sbrk+0x64>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <_sbrk+0x64>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	4a05      	ldr	r2, [pc, #20]	; (80058ec <_sbrk+0x64>)
 80058d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058da:	68fb      	ldr	r3, [r7, #12]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20020000 	.word	0x20020000
 80058e8:	00000800 	.word	0x00000800
 80058ec:	20001124 	.word	0x20001124
 80058f0:	200011a0 	.word	0x200011a0

080058f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <SystemInit+0x20>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fe:	4a05      	ldr	r2, [pc, #20]	; (8005914 <SystemInit+0x20>)
 8005900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	e000ed00 	.word	0xe000ed00

08005918 <W25Q_Reset>:
#endif

w25_info_t  w25_info;
uint8_t buf[64] = {0};

void W25Q_Reset (void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800591c:	2200      	movs	r2, #0
 800591e:	2101      	movs	r1, #1
 8005920:	480b      	ldr	r0, [pc, #44]	; (8005950 <W25Q_Reset+0x38>)
 8005922:	f001 f90d 	bl	8006b40 <HAL_GPIO_WritePin>
	buf[0] = W25Q_ENABLE_RESET;
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <W25Q_Reset+0x3c>)
 8005928:	2266      	movs	r2, #102	; 0x66
 800592a:	701a      	strb	r2, [r3, #0]
	buf[1] = W25Q_RESET;
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <W25Q_Reset+0x3c>)
 800592e:	2299      	movs	r2, #153	; 0x99
 8005930:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 8005932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005936:	2202      	movs	r2, #2
 8005938:	4906      	ldr	r1, [pc, #24]	; (8005954 <W25Q_Reset+0x3c>)
 800593a:	4807      	ldr	r0, [pc, #28]	; (8005958 <W25Q_Reset+0x40>)
 800593c:	f004 f833 	bl	80099a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8005940:	2201      	movs	r2, #1
 8005942:	2101      	movs	r1, #1
 8005944:	4802      	ldr	r0, [pc, #8]	; (8005950 <W25Q_Reset+0x38>)
 8005946:	f001 f8fb 	bl	8006b40 <HAL_GPIO_WritePin>
}
 800594a:	bf00      	nop
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40020400 	.word	0x40020400
 8005954:	2000114c 	.word	0x2000114c
 8005958:	20000350 	.word	0x20000350

0800595c <W25Q_Read_ID>:
	}
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
}

uint32_t W25Q_Read_ID(void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	buf[0] = W25Q_GET_JEDEC_ID;
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <W25Q_Read_ID+0x54>)
 8005964:	229f      	movs	r2, #159	; 0x9f
 8005966:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8005968:	2200      	movs	r2, #0
 800596a:	2101      	movs	r1, #1
 800596c:	4811      	ldr	r0, [pc, #68]	; (80059b4 <W25Q_Read_ID+0x58>)
 800596e:	f001 f8e7 	bl	8006b40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8005972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005976:	2201      	movs	r2, #1
 8005978:	490d      	ldr	r1, [pc, #52]	; (80059b0 <W25Q_Read_ID+0x54>)
 800597a:	480f      	ldr	r0, [pc, #60]	; (80059b8 <W25Q_Read_ID+0x5c>)
 800597c:	f004 f813 	bl	80099a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, dt, 3, 1000);
 8005980:	1d39      	adds	r1, r7, #4
 8005982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005986:	2203      	movs	r2, #3
 8005988:	480b      	ldr	r0, [pc, #44]	; (80059b8 <W25Q_Read_ID+0x5c>)
 800598a:	f004 f948 	bl	8009c1e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800598e:	2201      	movs	r2, #1
 8005990:	2101      	movs	r1, #1
 8005992:	4808      	ldr	r0, [pc, #32]	; (80059b4 <W25Q_Read_ID+0x58>)
 8005994:	f001 f8d4 	bl	8006b40 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8005998:	793b      	ldrb	r3, [r7, #4]
 800599a:	041a      	lsls	r2, r3, #16
 800599c:	797b      	ldrb	r3, [r7, #5]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	4313      	orrs	r3, r2
 80059a2:	79ba      	ldrb	r2, [r7, #6]
 80059a4:	4313      	orrs	r3, r2
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2000114c 	.word	0x2000114c
 80059b4:	40020400 	.word	0x40020400
 80059b8:	20000350 	.word	0x20000350

080059bc <W25Q_Init>:

void W25Q_Init(void) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08a      	sub	sp, #40	; 0x28
 80059c0:	af00      	add	r7, sp, #0
	unsigned int id = W25Q_Read_ID();
 80059c2:	f7ff ffcb 	bl	800595c <W25Q_Read_ID>
 80059c6:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(100);
 80059c8:	2064      	movs	r0, #100	; 0x64
 80059ca:	f000 fbd1 	bl	8006170 <HAL_Delay>
	W25Q_Reset();
 80059ce:	f7ff ffa3 	bl	8005918 <W25Q_Reset>
	HAL_Delay(100);
 80059d2:	2064      	movs	r0, #100	; 0x64
 80059d4:	f000 fbcc 	bl	8006170 <HAL_Delay>
	id &= 0x0000FFFF;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	b29b      	uxth	r3, r3
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
	w25_info.high_cap = 0;
 80059de:	4b85      	ldr	r3, [pc, #532]	; (8005bf4 <W25Q_Init+0x238>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	77da      	strb	r2, [r3, #31]
	switch(id)
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80059ea:	3b11      	subs	r3, #17
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	f200 81e7 	bhi.w	8005dc0 <W25Q_Init+0x404>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <W25Q_Init+0x3c>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a7b 	.word	0x08005a7b
 80059fc:	08005a73 	.word	0x08005a73
 8005a00:	08005a6b 	.word	0x08005a6b
 8005a04:	08005a63 	.word	0x08005a63
 8005a08:	08005a5b 	.word	0x08005a5b
 8005a0c:	08005a53 	.word	0x08005a53
 8005a10:	08005a4b 	.word	0x08005a4b
 8005a14:	08005a41 	.word	0x08005a41
 8005a18:	08005a31 	.word	0x08005a31
 8005a1c:	08005a21 	.word	0x08005a21
	{
	case 0x401A:
		w25_info.high_cap=1;
 8005a20:	4b74      	ldr	r3, [pc, #464]	; (8005bf4 <W25Q_Init+0x238>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 8005a26:	4b73      	ldr	r3, [pc, #460]	; (8005bf4 <W25Q_Init+0x238>)
 8005a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a2c:	615a      	str	r2, [r3, #20]
		break;
 8005a2e:	e028      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4019:
		w25_info.high_cap=1;
 8005a30:	4b70      	ldr	r3, [pc, #448]	; (8005bf4 <W25Q_Init+0x238>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 8005a36:	4b6f      	ldr	r3, [pc, #444]	; (8005bf4 <W25Q_Init+0x238>)
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	615a      	str	r2, [r3, #20]
		break;
 8005a3e:	e020      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4018:
		w25_info.BlockCount=256;
 8005a40:	4b6c      	ldr	r3, [pc, #432]	; (8005bf4 <W25Q_Init+0x238>)
 8005a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a46:	615a      	str	r2, [r3, #20]
		break;
 8005a48:	e01b      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4017:
		w25_info.BlockCount=128;
 8005a4a:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <W25Q_Init+0x238>)
 8005a4c:	2280      	movs	r2, #128	; 0x80
 8005a4e:	615a      	str	r2, [r3, #20]
		break;
 8005a50:	e017      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4016:
		w25_info.BlockCount=64;
 8005a52:	4b68      	ldr	r3, [pc, #416]	; (8005bf4 <W25Q_Init+0x238>)
 8005a54:	2240      	movs	r2, #64	; 0x40
 8005a56:	615a      	str	r2, [r3, #20]
		break;
 8005a58:	e013      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4015:
		w25_info.BlockCount=32;
 8005a5a:	4b66      	ldr	r3, [pc, #408]	; (8005bf4 <W25Q_Init+0x238>)
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	615a      	str	r2, [r3, #20]
		break;
 8005a60:	e00f      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4014:
		w25_info.BlockCount=16;
 8005a62:	4b64      	ldr	r3, [pc, #400]	; (8005bf4 <W25Q_Init+0x238>)
 8005a64:	2210      	movs	r2, #16
 8005a66:	615a      	str	r2, [r3, #20]
		break;
 8005a68:	e00b      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4013:
		w25_info.BlockCount=8;
 8005a6a:	4b62      	ldr	r3, [pc, #392]	; (8005bf4 <W25Q_Init+0x238>)
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	615a      	str	r2, [r3, #20]
		break;
 8005a70:	e007      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4012:
		w25_info.BlockCount=4;
 8005a72:	4b60      	ldr	r3, [pc, #384]	; (8005bf4 <W25Q_Init+0x238>)
 8005a74:	2204      	movs	r2, #4
 8005a76:	615a      	str	r2, [r3, #20]
		break;
 8005a78:	e003      	b.n	8005a82 <W25Q_Init+0xc6>
	case 0x4011:
		w25_info.BlockCount=2;
 8005a7a:	4b5e      	ldr	r3, [pc, #376]	; (8005bf4 <W25Q_Init+0x238>)
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	615a      	str	r2, [r3, #20]
		break;
 8005a80:	bf00      	nop
	default:
		return;
	}
	w25_info.PageSize=256;
 8005a82:	4b5c      	ldr	r3, [pc, #368]	; (8005bf4 <W25Q_Init+0x238>)
 8005a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a88:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8005a8a:	4b5a      	ldr	r3, [pc, #360]	; (8005bf4 <W25Q_Init+0x238>)
 8005a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a90:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8005a92:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <W25Q_Init+0x238>)
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	4a56      	ldr	r2, [pc, #344]	; (8005bf4 <W25Q_Init+0x238>)
 8005a9a:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8005a9c:	4b55      	ldr	r3, [pc, #340]	; (8005bf4 <W25Q_Init+0x238>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a54      	ldr	r2, [pc, #336]	; (8005bf4 <W25Q_Init+0x238>)
 8005aa2:	6892      	ldr	r2, [r2, #8]
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <W25Q_Init+0x238>)
 8005aaa:	8812      	ldrh	r2, [r2, #0]
 8005aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ab0:	4a50      	ldr	r2, [pc, #320]	; (8005bf4 <W25Q_Init+0x238>)
 8005ab2:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8005ab4:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <W25Q_Init+0x238>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	4a4e      	ldr	r2, [pc, #312]	; (8005bf4 <W25Q_Init+0x238>)
 8005abc:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8005abe:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <W25Q_Init+0x238>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4a4c      	ldr	r2, [pc, #304]	; (8005bf4 <W25Q_Init+0x238>)
 8005ac4:	6892      	ldr	r2, [r2, #8]
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	0a9b      	lsrs	r3, r3, #10
 8005acc:	4a49      	ldr	r2, [pc, #292]	; (8005bf4 <W25Q_Init+0x238>)
 8005ace:	6193      	str	r3, [r2, #24]

#if (INIT_DEBUG == 1)
	char str1[30];
	sprintf(str1,"FLASH ID: 0x%X \r\n",id);
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad4:	4948      	ldr	r1, [pc, #288]	; (8005bf8 <W25Q_Init+0x23c>)
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f006 fd14 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1), 0x1000);
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fa fb76 	bl	80001d0 <strlen>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	1d39      	adds	r1, r7, #4
 8005aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aee:	4843      	ldr	r0, [pc, #268]	; (8005bfc <W25Q_Init+0x240>)
 8005af0:	f004 fd09 	bl	800a506 <HAL_UART_Transmit>

	w25_info.high_cap = 0;
 8005af4:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <W25Q_Init+0x238>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	77da      	strb	r2, [r3, #31]

	switch(id)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005b00:	3b11      	subs	r3, #17
 8005b02:	2b09      	cmp	r3, #9
 8005b04:	f200 8090 	bhi.w	8005c28 <W25Q_Init+0x26c>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <W25Q_Init+0x154>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005be1 	.word	0x08005be1
 8005b14:	08005bcf 	.word	0x08005bcf
 8005b18:	08005bbd 	.word	0x08005bbd
 8005b1c:	08005bab 	.word	0x08005bab
 8005b20:	08005b99 	.word	0x08005b99
 8005b24:	08005b87 	.word	0x08005b87
 8005b28:	08005b75 	.word	0x08005b75
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005b4d 	.word	0x08005b4d
 8005b34:	08005b39 	.word	0x08005b39
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8005b38:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <W25Q_Init+0x238>)
 8005b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b3e:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q512 \r\n");
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	492f      	ldr	r1, [pc, #188]	; (8005c00 <W25Q_Init+0x244>)
 8005b44:	4618      	mov	r0, r3
 8005b46:	f006 fcdd 	bl	800c504 <siprintf>
		break;
 8005b4a:	e07f      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4019:
		w25_info.BlockCount=512;
 8005b4c:	4b29      	ldr	r3, [pc, #164]	; (8005bf4 <W25Q_Init+0x238>)
 8005b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b52:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q256 \r\n");
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	492b      	ldr	r1, [pc, #172]	; (8005c04 <W25Q_Init+0x248>)
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f006 fcd3 	bl	800c504 <siprintf>
		break;
 8005b5e:	e075      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4018:
		w25_info.BlockCount=256;
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <W25Q_Init+0x238>)
 8005b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b66:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q128 \r\n");
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	4927      	ldr	r1, [pc, #156]	; (8005c08 <W25Q_Init+0x24c>)
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f006 fcc9 	bl	800c504 <siprintf>
		break;
 8005b72:	e06b      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4017:
		w25_info.BlockCount=128;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <W25Q_Init+0x238>)
 8005b76:	2280      	movs	r2, #128	; 0x80
 8005b78:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q64 \r\n");
 8005b7a:	1d3b      	adds	r3, r7, #4
 8005b7c:	4923      	ldr	r1, [pc, #140]	; (8005c0c <W25Q_Init+0x250>)
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f006 fcc0 	bl	800c504 <siprintf>
		break;
 8005b84:	e062      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4016:
		w25_info.BlockCount=64;
 8005b86:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <W25Q_Init+0x238>)
 8005b88:	2240      	movs	r2, #64	; 0x40
 8005b8a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q32 \r\n");
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	4920      	ldr	r1, [pc, #128]	; (8005c10 <W25Q_Init+0x254>)
 8005b90:	4618      	mov	r0, r3
 8005b92:	f006 fcb7 	bl	800c504 <siprintf>
		break;
 8005b96:	e059      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4015:
		w25_info.BlockCount=32;
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <W25Q_Init+0x238>)
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q16 \r\n");
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	491c      	ldr	r1, [pc, #112]	; (8005c14 <W25Q_Init+0x258>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f006 fcae 	bl	800c504 <siprintf>
		break;
 8005ba8:	e050      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4014:
		w25_info.BlockCount=16;
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <W25Q_Init+0x238>)
 8005bac:	2210      	movs	r2, #16
 8005bae:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q80 \r\n");
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	4919      	ldr	r1, [pc, #100]	; (8005c18 <W25Q_Init+0x25c>)
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f006 fca5 	bl	800c504 <siprintf>
		break;
 8005bba:	e047      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4013:
		w25_info.BlockCount=8;
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <W25Q_Init+0x238>)
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q40 \r\n");
 8005bc2:	1d3b      	adds	r3, r7, #4
 8005bc4:	4915      	ldr	r1, [pc, #84]	; (8005c1c <W25Q_Init+0x260>)
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f006 fc9c 	bl	800c504 <siprintf>
		break;
 8005bcc:	e03e      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4012:
		w25_info.BlockCount=4;
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <W25Q_Init+0x238>)
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q20 \r\n");
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	4912      	ldr	r1, [pc, #72]	; (8005c20 <W25Q_Init+0x264>)
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f006 fc93 	bl	800c504 <siprintf>
		break;
 8005bde:	e035      	b.n	8005c4c <W25Q_Init+0x290>
	case 0x4011:
		w25_info.BlockCount=2;
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <W25Q_Init+0x238>)
 8005be2:	2202      	movs	r2, #2
 8005be4:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q10 \r\n");
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	490e      	ldr	r1, [pc, #56]	; (8005c24 <W25Q_Init+0x268>)
 8005bea:	4618      	mov	r0, r3
 8005bec:	f006 fc8a 	bl	800c504 <siprintf>
		break;
 8005bf0:	e02c      	b.n	8005c4c <W25Q_Init+0x290>
 8005bf2:	bf00      	nop
 8005bf4:	20001128 	.word	0x20001128
 8005bf8:	080112a4 	.word	0x080112a4
 8005bfc:	20000458 	.word	0x20000458
 8005c00:	080112b8 	.word	0x080112b8
 8005c04:	080112d0 	.word	0x080112d0
 8005c08:	080112e8 	.word	0x080112e8
 8005c0c:	08011300 	.word	0x08011300
 8005c10:	08011318 	.word	0x08011318
 8005c14:	08011330 	.word	0x08011330
 8005c18:	08011348 	.word	0x08011348
 8005c1c:	08011360 	.word	0x08011360
 8005c20:	08011378 	.word	0x08011378
 8005c24:	08011390 	.word	0x08011390
	default:
		sprintf(str1,"FLASH CHIP: UNKNOWN ID \r\n");
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	4967      	ldr	r1, [pc, #412]	; (8005dc8 <W25Q_Init+0x40c>)
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f006 fc69 	bl	800c504 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005c32:	1d3b      	adds	r3, r7, #4
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fa facb 	bl	80001d0 <strlen>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	1d39      	adds	r1, r7, #4
 8005c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c44:	4861      	ldr	r0, [pc, #388]	; (8005dcc <W25Q_Init+0x410>)
 8005c46:	f004 fc5e 	bl	800a506 <HAL_UART_Transmit>
		break;
 8005c4a:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005c4c:	1d3b      	adds	r3, r7, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa fabe 	bl	80001d0 <strlen>
 8005c54:	4603      	mov	r3, r0
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	1d39      	adds	r1, r7, #4
 8005c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c5e:	485b      	ldr	r0, [pc, #364]	; (8005dcc <W25Q_Init+0x410>)
 8005c60:	f004 fc51 	bl	800a506 <HAL_UART_Transmit>
	w25_info.PageSize=256;
 8005c64:	4b5a      	ldr	r3, [pc, #360]	; (8005dd0 <W25Q_Init+0x414>)
 8005c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c6a:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8005c6c:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <W25Q_Init+0x414>)
 8005c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c72:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8005c74:	4b56      	ldr	r3, [pc, #344]	; (8005dd0 <W25Q_Init+0x414>)
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	4a55      	ldr	r2, [pc, #340]	; (8005dd0 <W25Q_Init+0x414>)
 8005c7c:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8005c7e:	4b54      	ldr	r3, [pc, #336]	; (8005dd0 <W25Q_Init+0x414>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4a53      	ldr	r2, [pc, #332]	; (8005dd0 <W25Q_Init+0x414>)
 8005c84:	6892      	ldr	r2, [r2, #8]
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	4a51      	ldr	r2, [pc, #324]	; (8005dd0 <W25Q_Init+0x414>)
 8005c8c:	8812      	ldrh	r2, [r2, #0]
 8005c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c92:	4a4f      	ldr	r2, [pc, #316]	; (8005dd0 <W25Q_Init+0x414>)
 8005c94:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8005c96:	4b4e      	ldr	r3, [pc, #312]	; (8005dd0 <W25Q_Init+0x414>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	4a4c      	ldr	r2, [pc, #304]	; (8005dd0 <W25Q_Init+0x414>)
 8005c9e:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8005ca0:	4b4b      	ldr	r3, [pc, #300]	; (8005dd0 <W25Q_Init+0x414>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a4a      	ldr	r2, [pc, #296]	; (8005dd0 <W25Q_Init+0x414>)
 8005ca6:	6892      	ldr	r2, [r2, #8]
 8005ca8:	fb02 f303 	mul.w	r3, r2, r3
 8005cac:	0a9b      	lsrs	r3, r3, #10
 8005cae:	4a48      	ldr	r2, [pc, #288]	; (8005dd0 <W25Q_Init+0x414>)
 8005cb0:	6193      	str	r3, [r2, #24]
	sprintf(str1,"FLASH PAGE SIZE: %d Bytes \r\n",(unsigned int)w25_info.PageSize);
 8005cb2:	4b47      	ldr	r3, [pc, #284]	; (8005dd0 <W25Q_Init+0x414>)
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	4946      	ldr	r1, [pc, #280]	; (8005dd4 <W25Q_Init+0x418>)
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f006 fc21 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fa fa83 	bl	80001d0 <strlen>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	1d39      	adds	r1, r7, #4
 8005cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cd4:	483d      	ldr	r0, [pc, #244]	; (8005dcc <W25Q_Init+0x410>)
 8005cd6:	f004 fc16 	bl	800a506 <HAL_UART_Transmit>
	sprintf(str1,"FLASH PAGE COUNT: %u \r\n",(unsigned int)w25_info.PageCount);
 8005cda:	4b3d      	ldr	r3, [pc, #244]	; (8005dd0 <W25Q_Init+0x414>)
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	493d      	ldr	r1, [pc, #244]	; (8005dd8 <W25Q_Init+0x41c>)
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f006 fc0e 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fa fa70 	bl	80001d0 <strlen>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	1d39      	adds	r1, r7, #4
 8005cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cfa:	4834      	ldr	r0, [pc, #208]	; (8005dcc <W25Q_Init+0x410>)
 8005cfc:	f004 fc03 	bl	800a506 <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR SIZE: %u Bytes \r\n",(unsigned int)w25_info.SectorSize);
 8005d00:	4b33      	ldr	r3, [pc, #204]	; (8005dd0 <W25Q_Init+0x414>)
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	4935      	ldr	r1, [pc, #212]	; (8005ddc <W25Q_Init+0x420>)
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f006 fbfb 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005d0e:	1d3b      	adds	r3, r7, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa fa5d 	bl	80001d0 <strlen>
 8005d16:	4603      	mov	r3, r0
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	1d39      	adds	r1, r7, #4
 8005d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d20:	482a      	ldr	r0, [pc, #168]	; (8005dcc <W25Q_Init+0x410>)
 8005d22:	f004 fbf0 	bl	800a506 <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR COUNT: %u \r\n",(unsigned int)w25_info.SectorCount);
 8005d26:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <W25Q_Init+0x414>)
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	492c      	ldr	r1, [pc, #176]	; (8005de0 <W25Q_Init+0x424>)
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f006 fbe8 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fa fa4a 	bl	80001d0 <strlen>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	1d39      	adds	r1, r7, #4
 8005d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d46:	4821      	ldr	r0, [pc, #132]	; (8005dcc <W25Q_Init+0x410>)
 8005d48:	f004 fbdd 	bl	800a506 <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK SIZE: %u Bytes \r\n",(unsigned int)w25_info.BlockSize);
 8005d4c:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <W25Q_Init+0x414>)
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	4924      	ldr	r1, [pc, #144]	; (8005de4 <W25Q_Init+0x428>)
 8005d54:	4618      	mov	r0, r3
 8005d56:	f006 fbd5 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fa fa37 	bl	80001d0 <strlen>
 8005d62:	4603      	mov	r3, r0
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	1d39      	adds	r1, r7, #4
 8005d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d6c:	4817      	ldr	r0, [pc, #92]	; (8005dcc <W25Q_Init+0x410>)
 8005d6e:	f004 fbca 	bl	800a506 <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK COUNT: %u \r\n",(unsigned int)w25_info.BlockCount);
 8005d72:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <W25Q_Init+0x414>)
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	1d3b      	adds	r3, r7, #4
 8005d78:	491b      	ldr	r1, [pc, #108]	; (8005de8 <W25Q_Init+0x42c>)
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f006 fbc2 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005d80:	1d3b      	adds	r3, r7, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fa24 	bl	80001d0 <strlen>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	1d39      	adds	r1, r7, #4
 8005d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d92:	480e      	ldr	r0, [pc, #56]	; (8005dcc <W25Q_Init+0x410>)
 8005d94:	f004 fbb7 	bl	800a506 <HAL_UART_Transmit>
	sprintf(str1,"FLASH CAPACITY: %u KB \r\n",(unsigned int)w25_info.NumKB);
 8005d98:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <W25Q_Init+0x414>)
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	1d3b      	adds	r3, r7, #4
 8005d9e:	4913      	ldr	r1, [pc, #76]	; (8005dec <W25Q_Init+0x430>)
 8005da0:	4618      	mov	r0, r3
 8005da2:	f006 fbaf 	bl	800c504 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa fa11 	bl	80001d0 <strlen>
 8005dae:	4603      	mov	r3, r0
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	1d39      	adds	r1, r7, #4
 8005db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db8:	4804      	ldr	r0, [pc, #16]	; (8005dcc <W25Q_Init+0x410>)
 8005dba:	f004 fba4 	bl	800a506 <HAL_UART_Transmit>
 8005dbe:	e000      	b.n	8005dc2 <W25Q_Init+0x406>
		return;
 8005dc0:	bf00      	nop
#endif
}
 8005dc2:	3728      	adds	r7, #40	; 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	080113a8 	.word	0x080113a8
 8005dcc:	20000458 	.word	0x20000458
 8005dd0:	20001128 	.word	0x20001128
 8005dd4:	080113c4 	.word	0x080113c4
 8005dd8:	080113e4 	.word	0x080113e4
 8005ddc:	080113fc 	.word	0x080113fc
 8005de0:	0801141c 	.word	0x0801141c
 8005de4:	08011438 	.word	0x08011438
 8005de8:	08011458 	.word	0x08011458
 8005dec:	08011474 	.word	0x08011474

08005df0 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	ed87 0a05 	vstr	s0, [r7, #20]
 8005dfa:	edc7 0a04 	vstr	s1, [r7, #16]
 8005dfe:	ed87 1a03 	vstr	s2, [r7, #12]
 8005e02:	edc7 1a02 	vstr	s3, [r7, #8]
 8005e06:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005e0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e16:	edd7 6a01 	vldr	s13, [r7, #4]
 8005e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005e22:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005e26:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <XPT2046_Init>:

void XPT2046_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8005e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e54:	2201      	movs	r2, #1
 8005e56:	2180      	movs	r1, #128	; 0x80
 8005e58:	4809      	ldr	r0, [pc, #36]	; (8005e80 <XPT2046_Init+0x34>)
 8005e5a:	f003 fda4 	bl	80099a6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e62:	2201      	movs	r2, #1
 8005e64:	2100      	movs	r1, #0
 8005e66:	4806      	ldr	r0, [pc, #24]	; (8005e80 <XPT2046_Init+0x34>)
 8005e68:	f003 fd9d 	bl	80099a6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e70:	2201      	movs	r2, #1
 8005e72:	2100      	movs	r1, #0
 8005e74:	4802      	ldr	r0, [pc, #8]	; (8005e80 <XPT2046_Init+0x34>)
 8005e76:	f003 fd96 	bl	80099a6 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8005e7a:	bf00      	nop
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200003a8 	.word	0x200003a8

08005e84 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f000 f96e 	bl	8006170 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8005e94:	1df9      	adds	r1, r7, #7
 8005e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4814      	ldr	r0, [pc, #80]	; (8005ef0 <getRaw+0x6c>)
 8005e9e:	f003 fd82 	bl	80099a6 <HAL_SPI_Transmit>
	address = 0x00;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005ea6:	f107 020b 	add.w	r2, r7, #11
 8005eaa:	1df9      	adds	r1, r7, #7
 8005eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	480e      	ldr	r0, [pc, #56]	; (8005ef0 <getRaw+0x6c>)
 8005eb6:	f003 ffc3 	bl	8009e40 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005ec2:	f107 020b 	add.w	r2, r7, #11
 8005ec6:	1df9      	adds	r1, r7, #7
 8005ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4807      	ldr	r0, [pc, #28]	; (8005ef0 <getRaw+0x6c>)
 8005ed2:	f003 ffb5 	bl	8009e40 <HAL_SPI_TransmitReceive>
	LSB = data;
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8005eda:	89fb      	ldrh	r3, [r7, #14]
 8005edc:	021a      	lsls	r2, r3, #8
 8005ede:	89bb      	ldrh	r3, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	10db      	asrs	r3, r3, #3
 8005ee4:	b29b      	uxth	r3, r3
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200003a8 	.word	0x200003a8

08005ef4 <X>:

inline static uint16_t X(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8005efa:	20d0      	movs	r0, #208	; 0xd0
 8005efc:	f7ff ffc2 	bl	8005e84 <getRaw>
 8005f00:	4603      	mov	r3, r0
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8005f58 <X+0x64>
 8005f0e:	eddf 1a13 	vldr	s3, [pc, #76]	; 8005f5c <X+0x68>
 8005f12:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8005f60 <X+0x6c>
 8005f16:	eddf 0a13 	vldr	s1, [pc, #76]	; 8005f64 <X+0x70>
 8005f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f1e:	f7ff ff67 	bl	8005df0 <remap>
 8005f22:	eef0 7a40 	vmov.f32	s15, s0
 8005f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2a:	ee17 3a90 	vmov	r3, s15
 8005f2e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8005f36:	3303      	adds	r3, #3
 8005f38:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <X+0x5a>
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	f240 321e 	movw	r2, #798	; 0x31e
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d801      	bhi.n	8005f4e <X+0x5a>
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	e000      	b.n	8005f50 <X+0x5c>
	else return 0;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	4447c000 	.word	0x4447c000
 8005f5c:	00000000 	.word	0x00000000
 8005f60:	457a0000 	.word	0x457a0000
 8005f64:	43480000 	.word	0x43480000

08005f68 <Y>:

inline static uint16_t Y(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8005f6e:	2090      	movs	r0, #144	; 0x90
 8005f70:	f7ff ff88 	bl	8005e84 <getRaw>
 8005f74:	4603      	mov	r3, r0
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8005fc0 <Y+0x58>
 8005f82:	eddf 1a10 	vldr	s3, [pc, #64]	; 8005fc4 <Y+0x5c>
 8005f86:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8005fc8 <Y+0x60>
 8005f8a:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005fcc <Y+0x64>
 8005f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f92:	f7ff ff2d 	bl	8005df0 <remap>
 8005f96:	eef0 7a40 	vmov.f32	s15, s0
 8005f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9e:	ee17 3a90 	vmov	r3, s15
 8005fa2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8005fa4:	88fb      	ldrh	r3, [r7, #6]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <Y+0x4e>
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8005fb0:	d801      	bhi.n	8005fb6 <Y+0x4e>
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	e000      	b.n	8005fb8 <Y+0x50>
	else return 0;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	43ef8000 	.word	0x43ef8000
 8005fc4:	00000000 	.word	0x00000000
 8005fc8:	456d8000 	.word	0x456d8000
 8005fcc:	43480000 	.word	0x43480000

08005fd0 <getX>:

uint16_t getX(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <getX+0x30>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8005fdc:	e007      	b.n	8005fee <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8005fde:	f7ff ff89 	bl	8005ef4 <X>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	80bb      	strh	r3, [r7, #4]
 8005fe6:	f7ff ff85 	bl	8005ef4 <X>
 8005fea:	4603      	mov	r3, r0
 8005fec:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8005fee:	88ba      	ldrh	r2, [r7, #4]
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d1f3      	bne.n	8005fde <getX+0xe>
		}
		return x[0];
 8005ff6:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	08011490 	.word	0x08011490

08006004 <getY>:

uint16_t getY(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <getY+0x30>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8006010:	e007      	b.n	8006022 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8006012:	f7ff ffa9 	bl	8005f68 <Y>
 8006016:	4603      	mov	r3, r0
 8006018:	80bb      	strh	r3, [r7, #4]
 800601a:	f7ff ffa5 	bl	8005f68 <Y>
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8006022:	88ba      	ldrh	r2, [r7, #4]
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	429a      	cmp	r2, r3
 8006028:	d1f3      	bne.n	8006012 <getY+0xe>
		}
		return y[0];
 800602a:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	08011490 	.word	0x08011490

08006038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006070 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800603c:	480d      	ldr	r0, [pc, #52]	; (8006074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800603e:	490e      	ldr	r1, [pc, #56]	; (8006078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006040:	4a0e      	ldr	r2, [pc, #56]	; (800607c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006044:	e002      	b.n	800604c <LoopCopyDataInit>

08006046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800604a:	3304      	adds	r3, #4

0800604c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800604c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800604e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006050:	d3f9      	bcc.n	8006046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006052:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006054:	4c0b      	ldr	r4, [pc, #44]	; (8006084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006058:	e001      	b.n	800605e <LoopFillZerobss>

0800605a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800605a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800605c:	3204      	adds	r2, #4

0800605e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800605e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006060:	d3fb      	bcc.n	800605a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006062:	f7ff fc47 	bl	80058f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006066:	f005 fb4f 	bl	800b708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800606a:	f7fb ff59 	bl	8001f20 <main>
  bx  lr    
 800606e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006078:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800607c:	0801fa08 	.word	0x0801fa08
  ldr r2, =_sbss
 8006080:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8006084:	200011a0 	.word	0x200011a0

08006088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006088:	e7fe      	b.n	8006088 <ADC_IRQHandler>
	...

0800608c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_Init+0x40>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <HAL_Init+0x40>)
 8006096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800609a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_Init+0x40>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <HAL_Init+0x40>)
 80060a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060a8:	4b08      	ldr	r3, [pc, #32]	; (80060cc <HAL_Init+0x40>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a07      	ldr	r2, [pc, #28]	; (80060cc <HAL_Init+0x40>)
 80060ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060b4:	2003      	movs	r0, #3
 80060b6:	f000 f94f 	bl	8006358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060ba:	2000      	movs	r0, #0
 80060bc:	f000 f808 	bl	80060d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060c0:	f7ff f8a4 	bl	800520c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40023c00 	.word	0x40023c00

080060d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060d8:	4b12      	ldr	r3, [pc, #72]	; (8006124 <HAL_InitTick+0x54>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <HAL_InitTick+0x58>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	4619      	mov	r1, r3
 80060e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 f967 	bl	80063c2 <HAL_SYSTICK_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e00e      	b.n	800611c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b0f      	cmp	r3, #15
 8006102:	d80a      	bhi.n	800611a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006104:	2200      	movs	r2, #0
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	f000 f92f 	bl	800636e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006110:	4a06      	ldr	r2, [pc, #24]	; (800612c <HAL_InitTick+0x5c>)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e000      	b.n	800611c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000070 	.word	0x20000070
 8006128:	20000078 	.word	0x20000078
 800612c:	20000074 	.word	0x20000074

08006130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <HAL_IncTick+0x20>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_IncTick+0x24>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4413      	add	r3, r2
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <HAL_IncTick+0x24>)
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000078 	.word	0x20000078
 8006154:	2000118c 	.word	0x2000118c

08006158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return uwTick;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_GetTick+0x14>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	2000118c 	.word	0x2000118c

08006170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7ff ffee 	bl	8006158 <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d005      	beq.n	8006196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_Delay+0x44>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006196:	bf00      	nop
 8006198:	f7ff ffde 	bl	8006158 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d8f7      	bhi.n	8006198 <HAL_Delay+0x28>
  {
  }
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000078 	.word	0x20000078

080061b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <__NVIC_SetPriorityGrouping+0x44>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061d4:	4013      	ands	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061ea:	4a04      	ldr	r2, [pc, #16]	; (80061fc <__NVIC_SetPriorityGrouping+0x44>)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	60d3      	str	r3, [r2, #12]
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000ed00 	.word	0xe000ed00

08006200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <__NVIC_GetPriorityGrouping+0x18>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	f003 0307 	and.w	r3, r3, #7
}
 800620e:	4618      	mov	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	e000ed00 	.word	0xe000ed00

0800621c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622a:	2b00      	cmp	r3, #0
 800622c:	db0b      	blt.n	8006246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	f003 021f 	and.w	r2, r3, #31
 8006234:	4907      	ldr	r1, [pc, #28]	; (8006254 <__NVIC_EnableIRQ+0x38>)
 8006236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	2001      	movs	r0, #1
 800623e:	fa00 f202 	lsl.w	r2, r0, r2
 8006242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	e000e100 	.word	0xe000e100

08006258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006268:	2b00      	cmp	r3, #0
 800626a:	db0a      	blt.n	8006282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	490c      	ldr	r1, [pc, #48]	; (80062a4 <__NVIC_SetPriority+0x4c>)
 8006272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006276:	0112      	lsls	r2, r2, #4
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	440b      	add	r3, r1
 800627c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006280:	e00a      	b.n	8006298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	4908      	ldr	r1, [pc, #32]	; (80062a8 <__NVIC_SetPriority+0x50>)
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	3b04      	subs	r3, #4
 8006290:	0112      	lsls	r2, r2, #4
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	440b      	add	r3, r1
 8006296:	761a      	strb	r2, [r3, #24]
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	e000e100 	.word	0xe000e100
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b089      	sub	sp, #36	; 0x24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f1c3 0307 	rsb	r3, r3, #7
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	bf28      	it	cs
 80062ca:	2304      	movcs	r3, #4
 80062cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3304      	adds	r3, #4
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d902      	bls.n	80062dc <NVIC_EncodePriority+0x30>
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	3b03      	subs	r3, #3
 80062da:	e000      	b.n	80062de <NVIC_EncodePriority+0x32>
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	43da      	mvns	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	401a      	ands	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062f4:	f04f 31ff 	mov.w	r1, #4294967295
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	fa01 f303 	lsl.w	r3, r1, r3
 80062fe:	43d9      	mvns	r1, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006304:	4313      	orrs	r3, r2
         );
}
 8006306:	4618      	mov	r0, r3
 8006308:	3724      	adds	r7, #36	; 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3b01      	subs	r3, #1
 8006320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006324:	d301      	bcc.n	800632a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006326:	2301      	movs	r3, #1
 8006328:	e00f      	b.n	800634a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <SysTick_Config+0x40>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3b01      	subs	r3, #1
 8006330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006332:	210f      	movs	r1, #15
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	f7ff ff8e 	bl	8006258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800633c:	4b05      	ldr	r3, [pc, #20]	; (8006354 <SysTick_Config+0x40>)
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <SysTick_Config+0x40>)
 8006344:	2207      	movs	r2, #7
 8006346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	e000e010 	.word	0xe000e010

08006358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ff29 	bl	80061b8 <__NVIC_SetPriorityGrouping>
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800636e:	b580      	push	{r7, lr}
 8006370:	b086      	sub	sp, #24
 8006372:	af00      	add	r7, sp, #0
 8006374:	4603      	mov	r3, r0
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006380:	f7ff ff3e 	bl	8006200 <__NVIC_GetPriorityGrouping>
 8006384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	6978      	ldr	r0, [r7, #20]
 800638c:	f7ff ff8e 	bl	80062ac <NVIC_EncodePriority>
 8006390:	4602      	mov	r2, r0
 8006392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff ff5d 	bl	8006258 <__NVIC_SetPriority>
}
 800639e:	bf00      	nop
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	4603      	mov	r3, r0
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ff31 	bl	800621c <__NVIC_EnableIRQ>
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ffa2 	bl	8006314 <SysTick_Config>
 80063d0:	4603      	mov	r3, r0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e014      	b.n	8006416 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	791b      	ldrb	r3, [r3, #4]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d105      	bne.n	8006402 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fe ff2d 	bl	800525c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	795b      	ldrb	r3, [r3, #5]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_DAC_ConfigChannel+0x18>
 8006432:	2302      	movs	r3, #2
 8006434:	e03c      	b.n	80064b0 <HAL_DAC_ConfigChannel+0x92>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2202      	movs	r2, #2
 8006440:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4013      	ands	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6819      	ldr	r1, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	22c0      	movs	r2, #192	; 0xc0
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	43da      	mvns	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	400a      	ands	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064ca:	f7ff fe45 	bl	8006158 <HAL_GetTick>
 80064ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d008      	beq.n	80064ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2280      	movs	r2, #128	; 0x80
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e052      	b.n	8006594 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0216 	bic.w	r2, r2, #22
 80064fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800650c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_DMA_Abort+0x62>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0208 	bic.w	r2, r2, #8
 800652c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800653e:	e013      	b.n	8006568 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006540:	f7ff fe0a 	bl	8006158 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b05      	cmp	r3, #5
 800654c:	d90c      	bls.n	8006568 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2203      	movs	r2, #3
 8006558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e015      	b.n	8006594 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e4      	bne.n	8006540 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657a:	223f      	movs	r2, #63	; 0x3f
 800657c:	409a      	lsls	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e00c      	b.n	80065d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2205      	movs	r2, #5
 80065be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b089      	sub	sp, #36	; 0x24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	e16b      	b.n	80068d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065fc:	2201      	movs	r2, #1
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4013      	ands	r3, r2
 800660e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	429a      	cmp	r2, r3
 8006616:	f040 815a 	bne.w	80068ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b01      	cmp	r3, #1
 8006624:	d005      	beq.n	8006632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800662e:	2b02      	cmp	r3, #2
 8006630:	d130      	bne.n	8006694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	2203      	movs	r2, #3
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	43db      	mvns	r3, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4013      	ands	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	4313      	orrs	r3, r2
 800665a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006668:	2201      	movs	r2, #1
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4013      	ands	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 0201 	and.w	r2, r3, #1
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4313      	orrs	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b03      	cmp	r3, #3
 800669e:	d017      	beq.n	80066d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	2203      	movs	r2, #3
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	43db      	mvns	r3, r3
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	4013      	ands	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d123      	bne.n	8006724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	08da      	lsrs	r2, r3, #3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3208      	adds	r2, #8
 80066e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	220f      	movs	r2, #15
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	43db      	mvns	r3, r3
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	4013      	ands	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	08da      	lsrs	r2, r3, #3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3208      	adds	r2, #8
 800671e:	69b9      	ldr	r1, [r7, #24]
 8006720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	2203      	movs	r2, #3
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4013      	ands	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 0203 	and.w	r2, r3, #3
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 80b4 	beq.w	80068ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	4b60      	ldr	r3, [pc, #384]	; (80068ec <HAL_GPIO_Init+0x30c>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	4a5f      	ldr	r2, [pc, #380]	; (80068ec <HAL_GPIO_Init+0x30c>)
 8006770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006774:	6453      	str	r3, [r2, #68]	; 0x44
 8006776:	4b5d      	ldr	r3, [pc, #372]	; (80068ec <HAL_GPIO_Init+0x30c>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006782:	4a5b      	ldr	r2, [pc, #364]	; (80068f0 <HAL_GPIO_Init+0x310>)
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	3302      	adds	r3, #2
 800678a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800678e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	220f      	movs	r2, #15
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43db      	mvns	r3, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4013      	ands	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a52      	ldr	r2, [pc, #328]	; (80068f4 <HAL_GPIO_Init+0x314>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d02b      	beq.n	8006806 <HAL_GPIO_Init+0x226>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a51      	ldr	r2, [pc, #324]	; (80068f8 <HAL_GPIO_Init+0x318>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d025      	beq.n	8006802 <HAL_GPIO_Init+0x222>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a50      	ldr	r2, [pc, #320]	; (80068fc <HAL_GPIO_Init+0x31c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01f      	beq.n	80067fe <HAL_GPIO_Init+0x21e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a4f      	ldr	r2, [pc, #316]	; (8006900 <HAL_GPIO_Init+0x320>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d019      	beq.n	80067fa <HAL_GPIO_Init+0x21a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a4e      	ldr	r2, [pc, #312]	; (8006904 <HAL_GPIO_Init+0x324>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <HAL_GPIO_Init+0x216>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a4d      	ldr	r2, [pc, #308]	; (8006908 <HAL_GPIO_Init+0x328>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00d      	beq.n	80067f2 <HAL_GPIO_Init+0x212>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a4c      	ldr	r2, [pc, #304]	; (800690c <HAL_GPIO_Init+0x32c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d007      	beq.n	80067ee <HAL_GPIO_Init+0x20e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a4b      	ldr	r2, [pc, #300]	; (8006910 <HAL_GPIO_Init+0x330>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_GPIO_Init+0x20a>
 80067e6:	2307      	movs	r3, #7
 80067e8:	e00e      	b.n	8006808 <HAL_GPIO_Init+0x228>
 80067ea:	2308      	movs	r3, #8
 80067ec:	e00c      	b.n	8006808 <HAL_GPIO_Init+0x228>
 80067ee:	2306      	movs	r3, #6
 80067f0:	e00a      	b.n	8006808 <HAL_GPIO_Init+0x228>
 80067f2:	2305      	movs	r3, #5
 80067f4:	e008      	b.n	8006808 <HAL_GPIO_Init+0x228>
 80067f6:	2304      	movs	r3, #4
 80067f8:	e006      	b.n	8006808 <HAL_GPIO_Init+0x228>
 80067fa:	2303      	movs	r3, #3
 80067fc:	e004      	b.n	8006808 <HAL_GPIO_Init+0x228>
 80067fe:	2302      	movs	r3, #2
 8006800:	e002      	b.n	8006808 <HAL_GPIO_Init+0x228>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <HAL_GPIO_Init+0x228>
 8006806:	2300      	movs	r3, #0
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	f002 0203 	and.w	r2, r2, #3
 800680e:	0092      	lsls	r2, r2, #2
 8006810:	4093      	lsls	r3, r2
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4313      	orrs	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006818:	4935      	ldr	r1, [pc, #212]	; (80068f0 <HAL_GPIO_Init+0x310>)
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	089b      	lsrs	r3, r3, #2
 800681e:	3302      	adds	r3, #2
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <HAL_GPIO_Init+0x334>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	43db      	mvns	r3, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800684a:	4a32      	ldr	r2, [pc, #200]	; (8006914 <HAL_GPIO_Init+0x334>)
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006850:	4b30      	ldr	r3, [pc, #192]	; (8006914 <HAL_GPIO_Init+0x334>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	43db      	mvns	r3, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4013      	ands	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006874:	4a27      	ldr	r2, [pc, #156]	; (8006914 <HAL_GPIO_Init+0x334>)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800687a:	4b26      	ldr	r3, [pc, #152]	; (8006914 <HAL_GPIO_Init+0x334>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	43db      	mvns	r3, r3
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	4013      	ands	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800689e:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <HAL_GPIO_Init+0x334>)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <HAL_GPIO_Init+0x334>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4013      	ands	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068c8:	4a12      	ldr	r2, [pc, #72]	; (8006914 <HAL_GPIO_Init+0x334>)
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3301      	adds	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b0f      	cmp	r3, #15
 80068d8:	f67f ae90 	bls.w	80065fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	3724      	adds	r7, #36	; 0x24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40023800 	.word	0x40023800
 80068f0:	40013800 	.word	0x40013800
 80068f4:	40020000 	.word	0x40020000
 80068f8:	40020400 	.word	0x40020400
 80068fc:	40020800 	.word	0x40020800
 8006900:	40020c00 	.word	0x40020c00
 8006904:	40021000 	.word	0x40021000
 8006908:	40021400 	.word	0x40021400
 800690c:	40021800 	.word	0x40021800
 8006910:	40021c00 	.word	0x40021c00
 8006914:	40013c00 	.word	0x40013c00

08006918 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800692a:	2300      	movs	r3, #0
 800692c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	e0cd      	b.n	8006ad0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006934:	2201      	movs	r2, #1
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4013      	ands	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	f040 80bd 	bne.w	8006aca <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006950:	4a65      	ldr	r2, [pc, #404]	; (8006ae8 <HAL_GPIO_DeInit+0x1d0>)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	089b      	lsrs	r3, r3, #2
 8006956:	3302      	adds	r3, #2
 8006958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	220f      	movs	r2, #15
 8006968:	fa02 f303 	lsl.w	r3, r2, r3
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	4013      	ands	r3, r2
 8006970:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a5d      	ldr	r2, [pc, #372]	; (8006aec <HAL_GPIO_DeInit+0x1d4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d02b      	beq.n	80069d2 <HAL_GPIO_DeInit+0xba>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a5c      	ldr	r2, [pc, #368]	; (8006af0 <HAL_GPIO_DeInit+0x1d8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d025      	beq.n	80069ce <HAL_GPIO_DeInit+0xb6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a5b      	ldr	r2, [pc, #364]	; (8006af4 <HAL_GPIO_DeInit+0x1dc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01f      	beq.n	80069ca <HAL_GPIO_DeInit+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a5a      	ldr	r2, [pc, #360]	; (8006af8 <HAL_GPIO_DeInit+0x1e0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d019      	beq.n	80069c6 <HAL_GPIO_DeInit+0xae>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a59      	ldr	r2, [pc, #356]	; (8006afc <HAL_GPIO_DeInit+0x1e4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_GPIO_DeInit+0xaa>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a58      	ldr	r2, [pc, #352]	; (8006b00 <HAL_GPIO_DeInit+0x1e8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00d      	beq.n	80069be <HAL_GPIO_DeInit+0xa6>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a57      	ldr	r2, [pc, #348]	; (8006b04 <HAL_GPIO_DeInit+0x1ec>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <HAL_GPIO_DeInit+0xa2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a56      	ldr	r2, [pc, #344]	; (8006b08 <HAL_GPIO_DeInit+0x1f0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_GPIO_DeInit+0x9e>
 80069b2:	2307      	movs	r3, #7
 80069b4:	e00e      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069b6:	2308      	movs	r3, #8
 80069b8:	e00c      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069ba:	2306      	movs	r3, #6
 80069bc:	e00a      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069be:	2305      	movs	r3, #5
 80069c0:	e008      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069c2:	2304      	movs	r3, #4
 80069c4:	e006      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069c6:	2303      	movs	r3, #3
 80069c8:	e004      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e002      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <HAL_GPIO_DeInit+0xbc>
 80069d2:	2300      	movs	r3, #0
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	f002 0203 	and.w	r2, r2, #3
 80069da:	0092      	lsls	r2, r2, #2
 80069dc:	4093      	lsls	r3, r2
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d132      	bne.n	8006a4a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80069e4:	4b49      	ldr	r3, [pc, #292]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	43db      	mvns	r3, r3
 80069ec:	4947      	ldr	r1, [pc, #284]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80069f2:	4b46      	ldr	r3, [pc, #280]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	43db      	mvns	r3, r3
 80069fa:	4944      	ldr	r1, [pc, #272]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006a00:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	43db      	mvns	r3, r3
 8006a08:	4940      	ldr	r1, [pc, #256]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006a0e:	4b3f      	ldr	r3, [pc, #252]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	43db      	mvns	r3, r3
 8006a16:	493d      	ldr	r1, [pc, #244]	; (8006b0c <HAL_GPIO_DeInit+0x1f4>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	220f      	movs	r2, #15
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006a2c:	4a2e      	ldr	r2, [pc, #184]	; (8006ae8 <HAL_GPIO_DeInit+0x1d0>)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	089b      	lsrs	r3, r3, #2
 8006a32:	3302      	adds	r3, #2
 8006a34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	43da      	mvns	r2, r3
 8006a3c:	482a      	ldr	r0, [pc, #168]	; (8006ae8 <HAL_GPIO_DeInit+0x1d0>)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	089b      	lsrs	r3, r3, #2
 8006a42:	400a      	ands	r2, r1
 8006a44:	3302      	adds	r3, #2
 8006a46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	2103      	movs	r1, #3
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	08da      	lsrs	r2, r3, #3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3208      	adds	r2, #8
 8006a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	220f      	movs	r2, #15
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	08d2      	lsrs	r2, r2, #3
 8006a80:	4019      	ands	r1, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3208      	adds	r2, #8
 8006a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	2103      	movs	r1, #3
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aac:	43db      	mvns	r3, r3
 8006aae:	401a      	ands	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	2103      	movs	r1, #3
 8006abe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	401a      	ands	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	3301      	adds	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b0f      	cmp	r3, #15
 8006ad4:	f67f af2e 	bls.w	8006934 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40013800 	.word	0x40013800
 8006aec:	40020000 	.word	0x40020000
 8006af0:	40020400 	.word	0x40020400
 8006af4:	40020800 	.word	0x40020800
 8006af8:	40020c00 	.word	0x40020c00
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40021400 	.word	0x40021400
 8006b04:	40021800 	.word	0x40021800
 8006b08:	40021c00 	.word	0x40021c00
 8006b0c:	40013c00 	.word	0x40013c00

08006b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	887b      	ldrh	r3, [r7, #2]
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e001      	b.n	8006b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	807b      	strh	r3, [r7, #2]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b50:	787b      	ldrb	r3, [r7, #1]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b5c:	e003      	b.n	8006b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b5e:	887b      	ldrh	r3, [r7, #2]
 8006b60:	041a      	lsls	r2, r3, #16
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	619a      	str	r2, [r3, #24]
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e12b      	b.n	8006dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fe fba2 	bl	80052e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	; 0x24
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006bd8:	f002 fa20 	bl	800901c <HAL_RCC_GetPCLK1Freq>
 8006bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4a81      	ldr	r2, [pc, #516]	; (8006de8 <HAL_I2C_Init+0x274>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d807      	bhi.n	8006bf8 <HAL_I2C_Init+0x84>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4a80      	ldr	r2, [pc, #512]	; (8006dec <HAL_I2C_Init+0x278>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	bf94      	ite	ls
 8006bf0:	2301      	movls	r3, #1
 8006bf2:	2300      	movhi	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	e006      	b.n	8006c06 <HAL_I2C_Init+0x92>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a7d      	ldr	r2, [pc, #500]	; (8006df0 <HAL_I2C_Init+0x27c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	bf94      	ite	ls
 8006c00:	2301      	movls	r3, #1
 8006c02:	2300      	movhi	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0e7      	b.n	8006dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a78      	ldr	r2, [pc, #480]	; (8006df4 <HAL_I2C_Init+0x280>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	0c9b      	lsrs	r3, r3, #18
 8006c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	4a6a      	ldr	r2, [pc, #424]	; (8006de8 <HAL_I2C_Init+0x274>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d802      	bhi.n	8006c48 <HAL_I2C_Init+0xd4>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	3301      	adds	r3, #1
 8006c46:	e009      	b.n	8006c5c <HAL_I2C_Init+0xe8>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c4e:	fb02 f303 	mul.w	r3, r2, r3
 8006c52:	4a69      	ldr	r2, [pc, #420]	; (8006df8 <HAL_I2C_Init+0x284>)
 8006c54:	fba2 2303 	umull	r2, r3, r2, r3
 8006c58:	099b      	lsrs	r3, r3, #6
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	495c      	ldr	r1, [pc, #368]	; (8006de8 <HAL_I2C_Init+0x274>)
 8006c78:	428b      	cmp	r3, r1
 8006c7a:	d819      	bhi.n	8006cb0 <HAL_I2C_Init+0x13c>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	1e59      	subs	r1, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c8a:	1c59      	adds	r1, r3, #1
 8006c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c90:	400b      	ands	r3, r1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_I2C_Init+0x138>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1e59      	subs	r1, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006caa:	e051      	b.n	8006d50 <HAL_I2C_Init+0x1dc>
 8006cac:	2304      	movs	r3, #4
 8006cae:	e04f      	b.n	8006d50 <HAL_I2C_Init+0x1dc>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d111      	bne.n	8006cdc <HAL_I2C_Init+0x168>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	1e58      	subs	r0, r3, #1
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6859      	ldr	r1, [r3, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	440b      	add	r3, r1
 8006cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cca:	3301      	adds	r3, #1
 8006ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e012      	b.n	8006d02 <HAL_I2C_Init+0x18e>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	1e58      	subs	r0, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	0099      	lsls	r1, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf0c      	ite	eq
 8006cfc:	2301      	moveq	r3, #1
 8006cfe:	2300      	movne	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_I2C_Init+0x196>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e022      	b.n	8006d50 <HAL_I2C_Init+0x1dc>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10e      	bne.n	8006d30 <HAL_I2C_Init+0x1bc>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1e58      	subs	r0, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6859      	ldr	r1, [r3, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	440b      	add	r3, r1
 8006d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d24:	3301      	adds	r3, #1
 8006d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2e:	e00f      	b.n	8006d50 <HAL_I2C_Init+0x1dc>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	1e58      	subs	r0, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6859      	ldr	r1, [r3, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	0099      	lsls	r1, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d46:	3301      	adds	r3, #1
 8006d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	6809      	ldr	r1, [r1, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6911      	ldr	r1, [r2, #16]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68d2      	ldr	r2, [r2, #12]
 8006d8a:	4311      	orrs	r1, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	430b      	orrs	r3, r1
 8006d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	000186a0 	.word	0x000186a0
 8006dec:	001e847f 	.word	0x001e847f
 8006df0:	003d08ff 	.word	0x003d08ff
 8006df4:	431bde83 	.word	0x431bde83
 8006df8:	10624dd3 	.word	0x10624dd3

08006dfc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e021      	b.n	8006e52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2224      	movs	r2, #36	; 0x24
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fe faa4 	bl	8005374 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	461a      	mov	r2, r3
 8006e68:	460b      	mov	r3, r1
 8006e6a:	817b      	strh	r3, [r7, #10]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e70:	f7ff f972 	bl	8006158 <HAL_GetTick>
 8006e74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	f040 80e0 	bne.w	8007044 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	2319      	movs	r3, #25
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	4970      	ldr	r1, [pc, #448]	; (8007050 <HAL_I2C_Master_Transmit+0x1f4>)
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f001 fa24 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e0d3      	b.n	8007046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_I2C_Master_Transmit+0x50>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e0cc      	b.n	8007046 <HAL_I2C_Master_Transmit+0x1ea>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d007      	beq.n	8006ed2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f042 0201 	orr.w	r2, r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ee0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2221      	movs	r2, #33	; 0x21
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2210      	movs	r2, #16
 8006eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	893a      	ldrh	r2, [r7, #8]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4a50      	ldr	r2, [pc, #320]	; (8007054 <HAL_I2C_Master_Transmit+0x1f8>)
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006f14:	8979      	ldrh	r1, [r7, #10]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 ff10 	bl	8007d40 <I2C_MasterRequestWrite>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e08d      	b.n	8007046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006f40:	e066      	b.n	8007010 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	6a39      	ldr	r1, [r7, #32]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f001 fa9e 	bl	8008488 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00d      	beq.n	8006f6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d107      	bne.n	8006f6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e06b      	b.n	8007046 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	781a      	ldrb	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d11b      	bne.n	8006fe4 <HAL_I2C_Master_Transmit+0x188>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d017      	beq.n	8006fe4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	6a39      	ldr	r1, [r7, #32]
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 fa8e 	bl	800850a <I2C_WaitOnBTFFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00d      	beq.n	8007010 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d107      	bne.n	800700c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e01a      	b.n	8007046 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d194      	bne.n	8006f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e000      	b.n	8007046 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007044:	2302      	movs	r3, #2
  }
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	00100002 	.word	0x00100002
 8007054:	ffff0000 	.word	0xffff0000

08007058 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	; 0x30
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	461a      	mov	r2, r3
 8007064:	460b      	mov	r3, r1
 8007066:	817b      	strh	r3, [r7, #10]
 8007068:	4613      	mov	r3, r2
 800706a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800706c:	f7ff f874 	bl	8006158 <HAL_GetTick>
 8007070:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b20      	cmp	r3, #32
 800707c:	f040 820b 	bne.w	8007496 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	2319      	movs	r3, #25
 8007086:	2201      	movs	r2, #1
 8007088:	497c      	ldr	r1, [pc, #496]	; (800727c <HAL_I2C_Master_Receive+0x224>)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 f926 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007096:	2302      	movs	r3, #2
 8007098:	e1fe      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_I2C_Master_Receive+0x50>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e1f7      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d007      	beq.n	80070ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0201 	orr.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2222      	movs	r2, #34	; 0x22
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2210      	movs	r2, #16
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	893a      	ldrh	r2, [r7, #8]
 80070fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4a5c      	ldr	r2, [pc, #368]	; (8007280 <HAL_I2C_Master_Receive+0x228>)
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007110:	8979      	ldrh	r1, [r7, #10]
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fe94 	bl	8007e44 <I2C_MasterRequestRead>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e1b8      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712a:	2b00      	cmp	r3, #0
 800712c:	d113      	bne.n	8007156 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800712e:	2300      	movs	r3, #0
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	623b      	str	r3, [r7, #32]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	623b      	str	r3, [r7, #32]
 8007142:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e18c      	b.n	8007470 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715a:	2b01      	cmp	r3, #1
 800715c:	d11b      	bne.n	8007196 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800716c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	61fb      	str	r3, [r7, #28]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	e16c      	b.n	8007470 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719a:	2b02      	cmp	r3, #2
 800719c:	d11b      	bne.n	80071d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071be:	2300      	movs	r3, #0
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	e14c      	b.n	8007470 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80071fc:	e138      	b.n	8007470 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007202:	2b03      	cmp	r3, #3
 8007204:	f200 80f1 	bhi.w	80073ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720c:	2b01      	cmp	r3, #1
 800720e:	d123      	bne.n	8007258 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f001 f9b9 	bl	800858c <I2C_WaitOnRXNEFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e139      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691a      	ldr	r2, [r3, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007256:	e10b      	b.n	8007470 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725c:	2b02      	cmp	r3, #2
 800725e:	d14e      	bne.n	80072fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	2200      	movs	r2, #0
 8007268:	4906      	ldr	r1, [pc, #24]	; (8007284 <HAL_I2C_Master_Receive+0x22c>)
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f001 f836 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e10e      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
 800727a:	bf00      	nop
 800727c:	00100002 	.word	0x00100002
 8007280:	ffff0000 	.word	0xffff0000
 8007284:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072fc:	e0b8      	b.n	8007470 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	2200      	movs	r2, #0
 8007306:	4966      	ldr	r1, [pc, #408]	; (80074a0 <HAL_I2C_Master_Receive+0x448>)
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 ffe7 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e0bf      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2200      	movs	r2, #0
 8007362:	494f      	ldr	r1, [pc, #316]	; (80074a0 <HAL_I2C_Master_Receive+0x448>)
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 ffb9 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e091      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073e8:	e042      	b.n	8007470 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f001 f8cc 	bl	800858c <I2C_WaitOnRXNEFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e04c      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b04      	cmp	r3, #4
 800743c:	d118      	bne.n	8007470 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	f47f aec2 	bne.w	80071fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	e000      	b.n	8007498 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007496:	2302      	movs	r3, #2
  }
}
 8007498:	4618      	mov	r0, r3
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	00010004 	.word	0x00010004

080074a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	461a      	mov	r2, r3
 80074b2:	4603      	mov	r3, r0
 80074b4:	817b      	strh	r3, [r7, #10]
 80074b6:	460b      	mov	r3, r1
 80074b8:	813b      	strh	r3, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074be:	f7fe fe4b 	bl	8006158 <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	f040 80d9 	bne.w	8007684 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	2319      	movs	r3, #25
 80074d8:	2201      	movs	r2, #1
 80074da:	496d      	ldr	r1, [pc, #436]	; (8007690 <HAL_I2C_Mem_Write+0x1ec>)
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fefd 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
 80074ea:	e0cc      	b.n	8007686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_I2C_Mem_Write+0x56>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e0c5      	b.n	8007686 <HAL_I2C_Mem_Write+0x1e2>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d007      	beq.n	8007520 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800752e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2221      	movs	r2, #33	; 0x21
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a4d      	ldr	r2, [pc, #308]	; (8007694 <HAL_I2C_Mem_Write+0x1f0>)
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007562:	88f8      	ldrh	r0, [r7, #6]
 8007564:	893a      	ldrh	r2, [r7, #8]
 8007566:	8979      	ldrh	r1, [r7, #10]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	4603      	mov	r3, r0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fd34 	bl	8007fe0 <I2C_RequestMemoryWrite>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d052      	beq.n	8007624 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e081      	b.n	8007686 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 ff7e 	bl	8008488 <I2C_WaitOnTXEFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00d      	beq.n	80075ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	2b04      	cmp	r3, #4
 8007598:	d107      	bne.n	80075aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e06b      	b.n	8007686 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d11b      	bne.n	8007624 <HAL_I2C_Mem_Write+0x180>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d017      	beq.n	8007624 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1aa      	bne.n	8007582 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 ff6a 	bl	800850a <I2C_WaitOnBTFFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00d      	beq.n	8007658 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	2b04      	cmp	r3, #4
 8007642:	d107      	bne.n	8007654 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007652:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e016      	b.n	8007686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	e000      	b.n	8007686 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007684:	2302      	movs	r3, #2
  }
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	00100002 	.word	0x00100002
 8007694:	ffff0000 	.word	0xffff0000

08007698 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08c      	sub	sp, #48	; 0x30
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	4608      	mov	r0, r1
 80076a2:	4611      	mov	r1, r2
 80076a4:	461a      	mov	r2, r3
 80076a6:	4603      	mov	r3, r0
 80076a8:	817b      	strh	r3, [r7, #10]
 80076aa:	460b      	mov	r3, r1
 80076ac:	813b      	strh	r3, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076b2:	f7fe fd51 	bl	8006158 <HAL_GetTick>
 80076b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	f040 8208 	bne.w	8007ad6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	2319      	movs	r3, #25
 80076cc:	2201      	movs	r2, #1
 80076ce:	497b      	ldr	r1, [pc, #492]	; (80078bc <HAL_I2C_Mem_Read+0x224>)
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 fe03 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
 80076de:	e1fb      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_I2C_Mem_Read+0x56>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e1f4      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b01      	cmp	r3, #1
 8007702:	d007      	beq.n	8007714 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2222      	movs	r2, #34	; 0x22
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2240      	movs	r2, #64	; 0x40
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a5b      	ldr	r2, [pc, #364]	; (80078c0 <HAL_I2C_Mem_Read+0x228>)
 8007754:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007756:	88f8      	ldrh	r0, [r7, #6]
 8007758:	893a      	ldrh	r2, [r7, #8]
 800775a:	8979      	ldrh	r1, [r7, #10]
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	4603      	mov	r3, r0
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fcd0 	bl	800810c <I2C_RequestMemoryRead>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e1b0      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d113      	bne.n	80077a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777e:	2300      	movs	r3, #0
 8007780:	623b      	str	r3, [r7, #32]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	623b      	str	r3, [r7, #32]
 8007792:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	e184      	b.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d11b      	bne.n	80077e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	61fb      	str	r3, [r7, #28]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e164      	b.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d11b      	bne.n	8007826 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800780c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	e144      	b.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800783c:	e138      	b.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007842:	2b03      	cmp	r3, #3
 8007844:	f200 80f1 	bhi.w	8007a2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784c:	2b01      	cmp	r3, #1
 800784e:	d123      	bne.n	8007898 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fe99 	bl	800858c <I2C_WaitOnRXNEFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e139      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007896:	e10b      	b.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789c:	2b02      	cmp	r3, #2
 800789e:	d14e      	bne.n	800793e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	2200      	movs	r2, #0
 80078a8:	4906      	ldr	r1, [pc, #24]	; (80078c4 <HAL_I2C_Mem_Read+0x22c>)
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fd16 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e10e      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
 80078ba:	bf00      	nop
 80078bc:	00100002 	.word	0x00100002
 80078c0:	ffff0000 	.word	0xffff0000
 80078c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800793c:	e0b8      	b.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	2200      	movs	r2, #0
 8007946:	4966      	ldr	r1, [pc, #408]	; (8007ae0 <HAL_I2C_Mem_Read+0x448>)
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fcc7 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e0bf      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	2200      	movs	r2, #0
 80079a2:	494f      	ldr	r1, [pc, #316]	; (8007ae0 <HAL_I2C_Mem_Read+0x448>)
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fc99 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e091      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a28:	e042      	b.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fdac 	bl	800858c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e04c      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691a      	ldr	r2, [r3, #16]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d118      	bne.n	8007ab0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	691a      	ldr	r2, [r3, #16]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f47f aec2 	bne.w	800783e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e000      	b.n	8007ad8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ad6:	2302      	movs	r3, #2
  }
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3728      	adds	r7, #40	; 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	00010004 	.word	0x00010004

08007ae4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	460b      	mov	r3, r1
 8007af2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007af4:	f7fe fb30 	bl	8006158 <HAL_GetTick>
 8007af8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8007afa:	2301      	movs	r3, #1
 8007afc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	f040 8111 	bne.w	8007d2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	2319      	movs	r3, #25
 8007b12:	2201      	movs	r2, #1
 8007b14:	4988      	ldr	r1, [pc, #544]	; (8007d38 <HAL_I2C_IsDeviceReady+0x254>)
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fbe0 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	e104      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_I2C_IsDeviceReady+0x50>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e0fd      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x24c>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d007      	beq.n	8007b5a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2224      	movs	r2, #36	; 0x24
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4a70      	ldr	r2, [pc, #448]	; (8007d3c <HAL_I2C_IsDeviceReady+0x258>)
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b8c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fb9e 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00d      	beq.n	8007bc2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb4:	d103      	bne.n	8007bbe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bbc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e0b6      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bc2:	897b      	ldrh	r3, [r7, #10]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bd0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007bd2:	f7fe fac1 	bl	8006158 <HAL_GetTick>
 8007bd6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	bf0c      	ite	eq
 8007be6:	2301      	moveq	r3, #1
 8007be8:	2300      	movne	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfc:	bf0c      	ite	eq
 8007bfe:	2301      	moveq	r3, #1
 8007c00:	2300      	movne	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007c06:	e025      	b.n	8007c54 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c08:	f7fe faa6 	bl	8006158 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d302      	bcc.n	8007c1e <HAL_I2C_IsDeviceReady+0x13a>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d103      	bne.n	8007c26 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	22a0      	movs	r2, #160	; 0xa0
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2301      	moveq	r3, #1
 8007c4e:	2300      	movne	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2ba0      	cmp	r3, #160	; 0xa0
 8007c5e:	d005      	beq.n	8007c6c <HAL_I2C_IsDeviceReady+0x188>
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d102      	bne.n	8007c6c <HAL_I2C_IsDeviceReady+0x188>
 8007c66:	7dbb      	ldrb	r3, [r7, #22]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0cd      	beq.n	8007c08 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d129      	bne.n	8007cd6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	2319      	movs	r3, #25
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4921      	ldr	r1, [pc, #132]	; (8007d38 <HAL_I2C_IsDeviceReady+0x254>)
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fb12 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e036      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e02c      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ce4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	2319      	movs	r3, #25
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	490f      	ldr	r1, [pc, #60]	; (8007d38 <HAL_I2C_IsDeviceReady+0x254>)
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 faee 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e012      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	f4ff af32 	bcc.w	8007b7e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007d2e:	2302      	movs	r3, #2
  }
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3720      	adds	r7, #32
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	00100002 	.word	0x00100002
 8007d3c:	ffff0000 	.word	0xffff0000

08007d40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d006      	beq.n	8007d6a <I2C_MasterRequestWrite+0x2a>
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d003      	beq.n	8007d6a <I2C_MasterRequestWrite+0x2a>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d68:	d108      	bne.n	8007d7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	e00b      	b.n	8007d94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	2b12      	cmp	r3, #18
 8007d82:	d107      	bne.n	8007d94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fa9b 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00d      	beq.n	8007dc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dba:	d103      	bne.n	8007dc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e035      	b.n	8007e34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dd0:	d108      	bne.n	8007de4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007dd2:	897b      	ldrh	r3, [r7, #10]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007de0:	611a      	str	r2, [r3, #16]
 8007de2:	e01b      	b.n	8007e1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007de4:	897b      	ldrh	r3, [r7, #10]
 8007de6:	11db      	asrs	r3, r3, #7
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 0306 	and.w	r3, r3, #6
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f063 030f 	orn	r3, r3, #15
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	490e      	ldr	r1, [pc, #56]	; (8007e3c <I2C_MasterRequestWrite+0xfc>)
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fac1 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e010      	b.n	8007e34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e12:	897b      	ldrh	r3, [r7, #10]
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	4907      	ldr	r1, [pc, #28]	; (8007e40 <I2C_MasterRequestWrite+0x100>)
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fab1 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	00010008 	.word	0x00010008
 8007e40:	00010002 	.word	0x00010002

08007e44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af02      	add	r7, sp, #8
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	607a      	str	r2, [r7, #4]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	460b      	mov	r3, r1
 8007e52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d006      	beq.n	8007e7e <I2C_MasterRequestRead+0x3a>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d003      	beq.n	8007e7e <I2C_MasterRequestRead+0x3a>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e7c:	d108      	bne.n	8007e90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e00b      	b.n	8007ea8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e94:	2b11      	cmp	r3, #17
 8007e96:	d107      	bne.n	8007ea8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fa11 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00d      	beq.n	8007edc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ece:	d103      	bne.n	8007ed8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e079      	b.n	8007fd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ee4:	d108      	bne.n	8007ef8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007ee6:	897b      	ldrh	r3, [r7, #10]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	611a      	str	r2, [r3, #16]
 8007ef6:	e05f      	b.n	8007fb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ef8:	897b      	ldrh	r3, [r7, #10]
 8007efa:	11db      	asrs	r3, r3, #7
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0306 	and.w	r3, r3, #6
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f063 030f 	orn	r3, r3, #15
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4930      	ldr	r1, [pc, #192]	; (8007fd8 <I2C_MasterRequestRead+0x194>)
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fa37 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e054      	b.n	8007fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f26:	897b      	ldrh	r3, [r7, #10]
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	4929      	ldr	r1, [pc, #164]	; (8007fdc <I2C_MasterRequestRead+0x198>)
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fa27 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e044      	b.n	8007fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f9af 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00d      	beq.n	8007fa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f92:	d103      	bne.n	8007f9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e017      	b.n	8007fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007fa0:	897b      	ldrh	r3, [r7, #10]
 8007fa2:	11db      	asrs	r3, r3, #7
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 0306 	and.w	r3, r3, #6
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f063 030e 	orn	r3, r3, #14
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	4907      	ldr	r1, [pc, #28]	; (8007fdc <I2C_MasterRequestRead+0x198>)
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f9e3 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	00010008 	.word	0x00010008
 8007fdc:	00010002 	.word	0x00010002

08007fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4611      	mov	r1, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	817b      	strh	r3, [r7, #10]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	813b      	strh	r3, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	2200      	movs	r2, #0
 8008012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 f960 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00d      	beq.n	800803e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008030:	d103      	bne.n	800803a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e05f      	b.n	80080fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800803e:	897b      	ldrh	r3, [r7, #10]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800804c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	6a3a      	ldr	r2, [r7, #32]
 8008052:	492d      	ldr	r1, [pc, #180]	; (8008108 <I2C_RequestMemoryWrite+0x128>)
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f998 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e04c      	b.n	80080fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800807a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807c:	6a39      	ldr	r1, [r7, #32]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fa02 	bl	8008488 <I2C_WaitOnTXEFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00d      	beq.n	80080a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	2b04      	cmp	r3, #4
 8008090:	d107      	bne.n	80080a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e02b      	b.n	80080fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d105      	bne.n	80080b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080ac:	893b      	ldrh	r3, [r7, #8]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]
 80080b6:	e021      	b.n	80080fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080b8:	893b      	ldrh	r3, [r7, #8]
 80080ba:	0a1b      	lsrs	r3, r3, #8
 80080bc:	b29b      	uxth	r3, r3
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c8:	6a39      	ldr	r1, [r7, #32]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f9dc 	bl	8008488 <I2C_WaitOnTXEFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d107      	bne.n	80080ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e005      	b.n	80080fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080f2:	893b      	ldrh	r3, [r7, #8]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	00010002 	.word	0x00010002

0800810c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	817b      	strh	r3, [r7, #10]
 800811e:	460b      	mov	r3, r1
 8008120:	813b      	strh	r3, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008134:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	2200      	movs	r2, #0
 800814e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f8c2 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816c:	d103      	bne.n	8008176 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e0aa      	b.n	80082d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800817a:	897b      	ldrh	r3, [r7, #10]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	6a3a      	ldr	r2, [r7, #32]
 800818e:	4952      	ldr	r1, [pc, #328]	; (80082d8 <I2C_RequestMemoryRead+0x1cc>)
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f8fa 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e097      	b.n	80082d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b8:	6a39      	ldr	r1, [r7, #32]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 f964 	bl	8008488 <I2C_WaitOnTXEFlagUntilTimeout>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00d      	beq.n	80081e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d107      	bne.n	80081de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e076      	b.n	80082d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081e2:	88fb      	ldrh	r3, [r7, #6]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d105      	bne.n	80081f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081e8:	893b      	ldrh	r3, [r7, #8]
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	611a      	str	r2, [r3, #16]
 80081f2:	e021      	b.n	8008238 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081f4:	893b      	ldrh	r3, [r7, #8]
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008204:	6a39      	ldr	r1, [r7, #32]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 f93e 	bl	8008488 <I2C_WaitOnTXEFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00d      	beq.n	800822e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	2b04      	cmp	r3, #4
 8008218:	d107      	bne.n	800822a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e050      	b.n	80082d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800822e:	893b      	ldrh	r3, [r7, #8]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	6a39      	ldr	r1, [r7, #32]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f923 	bl	8008488 <I2C_WaitOnTXEFlagUntilTimeout>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00d      	beq.n	8008264 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	2b04      	cmp	r3, #4
 800824e:	d107      	bne.n	8008260 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800825e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e035      	b.n	80082d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008272:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	2200      	movs	r2, #0
 800827c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 f82b 	bl	80082dc <I2C_WaitOnFlagUntilTimeout>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00d      	beq.n	80082a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829a:	d103      	bne.n	80082a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e013      	b.n	80082d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082a8:	897b      	ldrh	r3, [r7, #10]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	6a3a      	ldr	r2, [r7, #32]
 80082bc:	4906      	ldr	r1, [pc, #24]	; (80082d8 <I2C_RequestMemoryRead+0x1cc>)
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 f863 	bl	800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	00010002 	.word	0x00010002

080082dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	4613      	mov	r3, r2
 80082ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082ec:	e025      	b.n	800833a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f4:	d021      	beq.n	800833a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f6:	f7fd ff2f 	bl	8006158 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d302      	bcc.n	800830c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d116      	bne.n	800833a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e023      	b.n	8008382 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	0c1b      	lsrs	r3, r3, #16
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b01      	cmp	r3, #1
 8008342:	d10d      	bne.n	8008360 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	43da      	mvns	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4013      	ands	r3, r2
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	bf0c      	ite	eq
 8008356:	2301      	moveq	r3, #1
 8008358:	2300      	movne	r3, #0
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	e00c      	b.n	800837a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	43da      	mvns	r2, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4013      	ands	r3, r2
 800836c:	b29b      	uxth	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	bf0c      	ite	eq
 8008372:	2301      	moveq	r3, #1
 8008374:	2300      	movne	r3, #0
 8008376:	b2db      	uxtb	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	429a      	cmp	r2, r3
 800837e:	d0b6      	beq.n	80082ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008398:	e051      	b.n	800843e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a8:	d123      	bne.n	80083f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	f043 0204 	orr.w	r2, r3, #4
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e046      	b.n	8008480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d021      	beq.n	800843e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fa:	f7fd fead 	bl	8006158 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	429a      	cmp	r2, r3
 8008408:	d302      	bcc.n	8008410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d116      	bne.n	800843e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2220      	movs	r2, #32
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	f043 0220 	orr.w	r2, r3, #32
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e020      	b.n	8008480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	0c1b      	lsrs	r3, r3, #16
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	d10c      	bne.n	8008462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	43da      	mvns	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4013      	ands	r3, r2
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	bf14      	ite	ne
 800845a:	2301      	movne	r3, #1
 800845c:	2300      	moveq	r3, #0
 800845e:	b2db      	uxtb	r3, r3
 8008460:	e00b      	b.n	800847a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	43da      	mvns	r2, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4013      	ands	r3, r2
 800846e:	b29b      	uxth	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	bf14      	ite	ne
 8008474:	2301      	movne	r3, #1
 8008476:	2300      	moveq	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d18d      	bne.n	800839a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008494:	e02d      	b.n	80084f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f8ce 	bl	8008638 <I2C_IsAcknowledgeFailed>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e02d      	b.n	8008502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ac:	d021      	beq.n	80084f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ae:	f7fd fe53 	bl	8006158 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d302      	bcc.n	80084c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d116      	bne.n	80084f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	f043 0220 	orr.w	r2, r3, #32
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e007      	b.n	8008502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fc:	2b80      	cmp	r3, #128	; 0x80
 80084fe:	d1ca      	bne.n	8008496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008516:	e02d      	b.n	8008574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f88d 	bl	8008638 <I2C_IsAcknowledgeFailed>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e02d      	b.n	8008584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852e:	d021      	beq.n	8008574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008530:	f7fd fe12 	bl	8006158 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	429a      	cmp	r2, r3
 800853e:	d302      	bcc.n	8008546 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d116      	bne.n	8008574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	f043 0220 	orr.w	r2, r3, #32
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e007      	b.n	8008584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b04      	cmp	r3, #4
 8008580:	d1ca      	bne.n	8008518 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008598:	e042      	b.n	8008620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	2b10      	cmp	r3, #16
 80085a6:	d119      	bne.n	80085dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f06f 0210 	mvn.w	r2, #16
 80085b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e029      	b.n	8008630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085dc:	f7fd fdbc 	bl	8006158 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d116      	bne.n	8008620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	f043 0220 	orr.w	r2, r3, #32
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e007      	b.n	8008630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d1b5      	bne.n	800859a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800864a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800864e:	d11b      	bne.n	8008688 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008658:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	f043 0204 	orr.w	r2, r3, #4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e034      	b.n	8008712 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80086b0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f245 5255 	movw	r2, #21845	; 0x5555
 80086ba:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6852      	ldr	r2, [r2, #4]
 80086c4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6892      	ldr	r2, [r2, #8]
 80086ce:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80086d0:	f7fd fd42 	bl	8006158 <HAL_GetTick>
 80086d4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80086d6:	e00f      	b.n	80086f8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80086d8:	f7fd fd3e 	bl	8006158 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b31      	cmp	r3, #49	; 0x31
 80086e4:	d908      	bls.n	80086f8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e00c      	b.n	8008712 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e8      	bne.n	80086d8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800870e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800872a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
	...

0800873c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e267      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d075      	beq.n	8008846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800875a:	4b88      	ldr	r3, [pc, #544]	; (800897c <HAL_RCC_OscConfig+0x240>)
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 030c 	and.w	r3, r3, #12
 8008762:	2b04      	cmp	r3, #4
 8008764:	d00c      	beq.n	8008780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008766:	4b85      	ldr	r3, [pc, #532]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800876e:	2b08      	cmp	r3, #8
 8008770:	d112      	bne.n	8008798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008772:	4b82      	ldr	r3, [pc, #520]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800877a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800877e:	d10b      	bne.n	8008798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008780:	4b7e      	ldr	r3, [pc, #504]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05b      	beq.n	8008844 <HAL_RCC_OscConfig+0x108>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d157      	bne.n	8008844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e242      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a0:	d106      	bne.n	80087b0 <HAL_RCC_OscConfig+0x74>
 80087a2:	4b76      	ldr	r3, [pc, #472]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a75      	ldr	r2, [pc, #468]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e01d      	b.n	80087ec <HAL_RCC_OscConfig+0xb0>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087b8:	d10c      	bne.n	80087d4 <HAL_RCC_OscConfig+0x98>
 80087ba:	4b70      	ldr	r3, [pc, #448]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a6f      	ldr	r2, [pc, #444]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4b6d      	ldr	r3, [pc, #436]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a6c      	ldr	r2, [pc, #432]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	e00b      	b.n	80087ec <HAL_RCC_OscConfig+0xb0>
 80087d4:	4b69      	ldr	r3, [pc, #420]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a68      	ldr	r2, [pc, #416]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	4b66      	ldr	r3, [pc, #408]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a65      	ldr	r2, [pc, #404]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80087e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d013      	beq.n	800881c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f4:	f7fd fcb0 	bl	8006158 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087fc:	f7fd fcac 	bl	8006158 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b64      	cmp	r3, #100	; 0x64
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e207      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880e:	4b5b      	ldr	r3, [pc, #364]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0xc0>
 800881a:	e014      	b.n	8008846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881c:	f7fd fc9c 	bl	8006158 <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008824:	f7fd fc98 	bl	8006158 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b64      	cmp	r3, #100	; 0x64
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e1f3      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008836:	4b51      	ldr	r3, [pc, #324]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0xe8>
 8008842:	e000      	b.n	8008846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d063      	beq.n	800891a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008852:	4b4a      	ldr	r3, [pc, #296]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 030c 	and.w	r3, r3, #12
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800885e:	4b47      	ldr	r3, [pc, #284]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008866:	2b08      	cmp	r3, #8
 8008868:	d11c      	bne.n	80088a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800886a:	4b44      	ldr	r3, [pc, #272]	; (800897c <HAL_RCC_OscConfig+0x240>)
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d116      	bne.n	80088a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008876:	4b41      	ldr	r3, [pc, #260]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <HAL_RCC_OscConfig+0x152>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d001      	beq.n	800888e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e1c7      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888e:	4b3b      	ldr	r3, [pc, #236]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4937      	ldr	r1, [pc, #220]	; (800897c <HAL_RCC_OscConfig+0x240>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088a2:	e03a      	b.n	800891a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d020      	beq.n	80088ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088ac:	4b34      	ldr	r3, [pc, #208]	; (8008980 <HAL_RCC_OscConfig+0x244>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b2:	f7fd fc51 	bl	8006158 <HAL_GetTick>
 80088b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088b8:	e008      	b.n	80088cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088ba:	f7fd fc4d 	bl	8006158 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e1a8      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088cc:	4b2b      	ldr	r3, [pc, #172]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0f0      	beq.n	80088ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d8:	4b28      	ldr	r3, [pc, #160]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	4925      	ldr	r1, [pc, #148]	; (800897c <HAL_RCC_OscConfig+0x240>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	600b      	str	r3, [r1, #0]
 80088ec:	e015      	b.n	800891a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ee:	4b24      	ldr	r3, [pc, #144]	; (8008980 <HAL_RCC_OscConfig+0x244>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f4:	f7fd fc30 	bl	8006158 <HAL_GetTick>
 80088f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088fc:	f7fd fc2c 	bl	8006158 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e187      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800890e:	4b1b      	ldr	r3, [pc, #108]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f0      	bne.n	80088fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0308 	and.w	r3, r3, #8
 8008922:	2b00      	cmp	r3, #0
 8008924:	d036      	beq.n	8008994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d016      	beq.n	800895c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800892e:	4b15      	ldr	r3, [pc, #84]	; (8008984 <HAL_RCC_OscConfig+0x248>)
 8008930:	2201      	movs	r2, #1
 8008932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008934:	f7fd fc10 	bl	8006158 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800893c:	f7fd fc0c 	bl	8006158 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e167      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800894e:	4b0b      	ldr	r3, [pc, #44]	; (800897c <HAL_RCC_OscConfig+0x240>)
 8008950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0f0      	beq.n	800893c <HAL_RCC_OscConfig+0x200>
 800895a:	e01b      	b.n	8008994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <HAL_RCC_OscConfig+0x248>)
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008962:	f7fd fbf9 	bl	8006158 <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008968:	e00e      	b.n	8008988 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800896a:	f7fd fbf5 	bl	8006158 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b02      	cmp	r3, #2
 8008976:	d907      	bls.n	8008988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e150      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
 800897c:	40023800 	.word	0x40023800
 8008980:	42470000 	.word	0x42470000
 8008984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008988:	4b88      	ldr	r3, [pc, #544]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 800898a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1ea      	bne.n	800896a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8097 	beq.w	8008ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089a6:	4b81      	ldr	r3, [pc, #516]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10f      	bne.n	80089d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	60bb      	str	r3, [r7, #8]
 80089b6:	4b7d      	ldr	r3, [pc, #500]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	4a7c      	ldr	r2, [pc, #496]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 80089bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c0:	6413      	str	r3, [r2, #64]	; 0x40
 80089c2:	4b7a      	ldr	r3, [pc, #488]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ca:	60bb      	str	r3, [r7, #8]
 80089cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ce:	2301      	movs	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d2:	4b77      	ldr	r3, [pc, #476]	; (8008bb0 <HAL_RCC_OscConfig+0x474>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d118      	bne.n	8008a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089de:	4b74      	ldr	r3, [pc, #464]	; (8008bb0 <HAL_RCC_OscConfig+0x474>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a73      	ldr	r2, [pc, #460]	; (8008bb0 <HAL_RCC_OscConfig+0x474>)
 80089e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ea:	f7fd fbb5 	bl	8006158 <HAL_GetTick>
 80089ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089f0:	e008      	b.n	8008a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089f2:	f7fd fbb1 	bl	8006158 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e10c      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a04:	4b6a      	ldr	r3, [pc, #424]	; (8008bb0 <HAL_RCC_OscConfig+0x474>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0f0      	beq.n	80089f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d106      	bne.n	8008a26 <HAL_RCC_OscConfig+0x2ea>
 8008a18:	4b64      	ldr	r3, [pc, #400]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1c:	4a63      	ldr	r2, [pc, #396]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	6713      	str	r3, [r2, #112]	; 0x70
 8008a24:	e01c      	b.n	8008a60 <HAL_RCC_OscConfig+0x324>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	d10c      	bne.n	8008a48 <HAL_RCC_OscConfig+0x30c>
 8008a2e:	4b5f      	ldr	r3, [pc, #380]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	4a5e      	ldr	r2, [pc, #376]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a34:	f043 0304 	orr.w	r3, r3, #4
 8008a38:	6713      	str	r3, [r2, #112]	; 0x70
 8008a3a:	4b5c      	ldr	r3, [pc, #368]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3e:	4a5b      	ldr	r2, [pc, #364]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	6713      	str	r3, [r2, #112]	; 0x70
 8008a46:	e00b      	b.n	8008a60 <HAL_RCC_OscConfig+0x324>
 8008a48:	4b58      	ldr	r3, [pc, #352]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4c:	4a57      	ldr	r2, [pc, #348]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	6713      	str	r3, [r2, #112]	; 0x70
 8008a54:	4b55      	ldr	r3, [pc, #340]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a58:	4a54      	ldr	r2, [pc, #336]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a5a:	f023 0304 	bic.w	r3, r3, #4
 8008a5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d015      	beq.n	8008a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a68:	f7fd fb76 	bl	8006158 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a6e:	e00a      	b.n	8008a86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a70:	f7fd fb72 	bl	8006158 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e0cb      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a86:	4b49      	ldr	r3, [pc, #292]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0ee      	beq.n	8008a70 <HAL_RCC_OscConfig+0x334>
 8008a92:	e014      	b.n	8008abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a94:	f7fd fb60 	bl	8006158 <HAL_GetTick>
 8008a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a9a:	e00a      	b.n	8008ab2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a9c:	f7fd fb5c 	bl	8006158 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e0b5      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ab2:	4b3e      	ldr	r3, [pc, #248]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1ee      	bne.n	8008a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d105      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ac4:	4b39      	ldr	r3, [pc, #228]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	4a38      	ldr	r2, [pc, #224]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ace:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 80a1 	beq.w	8008c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ada:	4b34      	ldr	r3, [pc, #208]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 030c 	and.w	r3, r3, #12
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	d05c      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d141      	bne.n	8008b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <HAL_RCC_OscConfig+0x478>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af4:	f7fd fb30 	bl	8006158 <HAL_GetTick>
 8008af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008afa:	e008      	b.n	8008b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008afc:	f7fd fb2c 	bl	8006158 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d901      	bls.n	8008b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e087      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b0e:	4b27      	ldr	r3, [pc, #156]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1f0      	bne.n	8008afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69da      	ldr	r2, [r3, #28]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	019b      	lsls	r3, r3, #6
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	3b01      	subs	r3, #1
 8008b34:	041b      	lsls	r3, r3, #16
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	061b      	lsls	r3, r3, #24
 8008b3e:	491b      	ldr	r1, [pc, #108]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b44:	4b1b      	ldr	r3, [pc, #108]	; (8008bb4 <HAL_RCC_OscConfig+0x478>)
 8008b46:	2201      	movs	r2, #1
 8008b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b4a:	f7fd fb05 	bl	8006158 <HAL_GetTick>
 8008b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b50:	e008      	b.n	8008b64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b52:	f7fd fb01 	bl	8006158 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e05c      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0f0      	beq.n	8008b52 <HAL_RCC_OscConfig+0x416>
 8008b70:	e054      	b.n	8008c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b72:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <HAL_RCC_OscConfig+0x478>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b78:	f7fd faee 	bl	8006158 <HAL_GetTick>
 8008b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b7e:	e008      	b.n	8008b92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b80:	f7fd faea 	bl	8006158 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e045      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b92:	4b06      	ldr	r3, [pc, #24]	; (8008bac <HAL_RCC_OscConfig+0x470>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1f0      	bne.n	8008b80 <HAL_RCC_OscConfig+0x444>
 8008b9e:	e03d      	b.n	8008c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d107      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e038      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
 8008bac:	40023800 	.word	0x40023800
 8008bb0:	40007000 	.word	0x40007000
 8008bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008bb8:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <HAL_RCC_OscConfig+0x4ec>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d028      	beq.n	8008c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d121      	bne.n	8008c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d11a      	bne.n	8008c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008be8:	4013      	ands	r3, r2
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d111      	bne.n	8008c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	3b01      	subs	r3, #1
 8008c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d107      	bne.n	8008c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d001      	beq.n	8008c1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e000      	b.n	8008c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	40023800 	.word	0x40023800

08008c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0cc      	b.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c40:	4b68      	ldr	r3, [pc, #416]	; (8008de4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d90c      	bls.n	8008c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4e:	4b65      	ldr	r3, [pc, #404]	; (8008de4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c56:	4b63      	ldr	r3, [pc, #396]	; (8008de4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d001      	beq.n	8008c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e0b8      	b.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d020      	beq.n	8008cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c80:	4b59      	ldr	r3, [pc, #356]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	4a58      	ldr	r2, [pc, #352]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c98:	4b53      	ldr	r3, [pc, #332]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	4a52      	ldr	r2, [pc, #328]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ca4:	4b50      	ldr	r3, [pc, #320]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	494d      	ldr	r1, [pc, #308]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d044      	beq.n	8008d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d107      	bne.n	8008cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cca:	4b47      	ldr	r3, [pc, #284]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d119      	bne.n	8008d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e07f      	b.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d003      	beq.n	8008cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d107      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cea:	4b3f      	ldr	r3, [pc, #252]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d109      	bne.n	8008d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e06f      	b.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cfa:	4b3b      	ldr	r3, [pc, #236]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e067      	b.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d0a:	4b37      	ldr	r3, [pc, #220]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f023 0203 	bic.w	r2, r3, #3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	4934      	ldr	r1, [pc, #208]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d1c:	f7fd fa1c 	bl	8006158 <HAL_GetTick>
 8008d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d22:	e00a      	b.n	8008d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d24:	f7fd fa18 	bl	8006158 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e04f      	b.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d3a:	4b2b      	ldr	r3, [pc, #172]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f003 020c 	and.w	r2, r3, #12
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d1eb      	bne.n	8008d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d4c:	4b25      	ldr	r3, [pc, #148]	; (8008de4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d20c      	bcs.n	8008d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d5a:	4b22      	ldr	r3, [pc, #136]	; (8008de4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d62:	4b20      	ldr	r3, [pc, #128]	; (8008de4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d001      	beq.n	8008d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e032      	b.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d008      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d80:	4b19      	ldr	r3, [pc, #100]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	4916      	ldr	r1, [pc, #88]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0308 	and.w	r3, r3, #8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d9e:	4b12      	ldr	r3, [pc, #72]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	490e      	ldr	r1, [pc, #56]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008db2:	f000 f821 	bl	8008df8 <HAL_RCC_GetSysClockFreq>
 8008db6:	4602      	mov	r2, r0
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	091b      	lsrs	r3, r3, #4
 8008dbe:	f003 030f 	and.w	r3, r3, #15
 8008dc2:	490a      	ldr	r1, [pc, #40]	; (8008dec <HAL_RCC_ClockConfig+0x1c0>)
 8008dc4:	5ccb      	ldrb	r3, [r1, r3]
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	4a09      	ldr	r2, [pc, #36]	; (8008df0 <HAL_RCC_ClockConfig+0x1c4>)
 8008dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <HAL_RCC_ClockConfig+0x1c8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fd f97c 	bl	80060d0 <HAL_InitTick>

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	40023c00 	.word	0x40023c00
 8008de8:	40023800 	.word	0x40023800
 8008dec:	0801f508 	.word	0x0801f508
 8008df0:	20000070 	.word	0x20000070
 8008df4:	20000074 	.word	0x20000074

08008df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dfc:	b094      	sub	sp, #80	; 0x50
 8008dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	647b      	str	r3, [r7, #68]	; 0x44
 8008e04:	2300      	movs	r3, #0
 8008e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e08:	2300      	movs	r3, #0
 8008e0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e10:	4b79      	ldr	r3, [pc, #484]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f003 030c 	and.w	r3, r3, #12
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d00d      	beq.n	8008e38 <HAL_RCC_GetSysClockFreq+0x40>
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	f200 80e1 	bhi.w	8008fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <HAL_RCC_GetSysClockFreq+0x34>
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	d003      	beq.n	8008e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e2a:	e0db      	b.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e2c:	4b73      	ldr	r3, [pc, #460]	; (8008ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8008e2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008e30:	e0db      	b.n	8008fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e32:	4b73      	ldr	r3, [pc, #460]	; (8009000 <HAL_RCC_GetSysClockFreq+0x208>)
 8008e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e36:	e0d8      	b.n	8008fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e38:	4b6f      	ldr	r3, [pc, #444]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e42:	4b6d      	ldr	r3, [pc, #436]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d063      	beq.n	8008f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e4e:	4b6a      	ldr	r3, [pc, #424]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	099b      	lsrs	r3, r3, #6
 8008e54:	2200      	movs	r2, #0
 8008e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e60:	633b      	str	r3, [r7, #48]	; 0x30
 8008e62:	2300      	movs	r3, #0
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
 8008e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	f04f 0000 	mov.w	r0, #0
 8008e72:	f04f 0100 	mov.w	r1, #0
 8008e76:	0159      	lsls	r1, r3, #5
 8008e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e7c:	0150      	lsls	r0, r2, #5
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4621      	mov	r1, r4
 8008e84:	1a51      	subs	r1, r2, r1
 8008e86:	6139      	str	r1, [r7, #16]
 8008e88:	4629      	mov	r1, r5
 8008e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	018b      	lsls	r3, r1, #6
 8008ea0:	4651      	mov	r1, sl
 8008ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	018a      	lsls	r2, r1, #6
 8008eaa:	4651      	mov	r1, sl
 8008eac:	ebb2 0801 	subs.w	r8, r2, r1
 8008eb0:	4659      	mov	r1, fp
 8008eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008eca:	4690      	mov	r8, r2
 8008ecc:	4699      	mov	r9, r3
 8008ece:	4623      	mov	r3, r4
 8008ed0:	eb18 0303 	adds.w	r3, r8, r3
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	eb49 0303 	adc.w	r3, r9, r3
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008eea:	4629      	mov	r1, r5
 8008eec:	024b      	lsls	r3, r1, #9
 8008eee:	4621      	mov	r1, r4
 8008ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	024a      	lsls	r2, r1, #9
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4619      	mov	r1, r3
 8008efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efe:	2200      	movs	r2, #0
 8008f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f08:	f7f7 febe 	bl	8000c88 <__aeabi_uldivmod>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4613      	mov	r3, r2
 8008f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f14:	e058      	b.n	8008fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f16:	4b38      	ldr	r3, [pc, #224]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	099b      	lsrs	r3, r3, #6
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	4611      	mov	r1, r2
 8008f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008f26:	623b      	str	r3, [r7, #32]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008f30:	4642      	mov	r2, r8
 8008f32:	464b      	mov	r3, r9
 8008f34:	f04f 0000 	mov.w	r0, #0
 8008f38:	f04f 0100 	mov.w	r1, #0
 8008f3c:	0159      	lsls	r1, r3, #5
 8008f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f42:	0150      	lsls	r0, r2, #5
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4641      	mov	r1, r8
 8008f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008f4e:	4649      	mov	r1, r9
 8008f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008f68:	ebb2 040a 	subs.w	r4, r2, sl
 8008f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	f04f 0300 	mov.w	r3, #0
 8008f78:	00eb      	lsls	r3, r5, #3
 8008f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f7e:	00e2      	lsls	r2, r4, #3
 8008f80:	4614      	mov	r4, r2
 8008f82:	461d      	mov	r5, r3
 8008f84:	4643      	mov	r3, r8
 8008f86:	18e3      	adds	r3, r4, r3
 8008f88:	603b      	str	r3, [r7, #0]
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	eb45 0303 	adc.w	r3, r5, r3
 8008f90:	607b      	str	r3, [r7, #4]
 8008f92:	f04f 0200 	mov.w	r2, #0
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	028b      	lsls	r3, r1, #10
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008fa8:	4621      	mov	r1, r4
 8008faa:	028a      	lsls	r2, r1, #10
 8008fac:	4610      	mov	r0, r2
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	61bb      	str	r3, [r7, #24]
 8008fb6:	61fa      	str	r2, [r7, #28]
 8008fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fbc:	f7f7 fe64 	bl	8000c88 <__aeabi_uldivmod>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fc8:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	0c1b      	lsrs	r3, r3, #16
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fe2:	e002      	b.n	8008fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fe4:	4b05      	ldr	r3, [pc, #20]	; (8008ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8008fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3750      	adds	r7, #80	; 0x50
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	00f42400 	.word	0x00f42400
 8009000:	007a1200 	.word	0x007a1200

08009004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009008:	4b03      	ldr	r3, [pc, #12]	; (8009018 <HAL_RCC_GetHCLKFreq+0x14>)
 800900a:	681b      	ldr	r3, [r3, #0]
}
 800900c:	4618      	mov	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	20000070 	.word	0x20000070

0800901c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009020:	f7ff fff0 	bl	8009004 <HAL_RCC_GetHCLKFreq>
 8009024:	4602      	mov	r2, r0
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	0a9b      	lsrs	r3, r3, #10
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	4903      	ldr	r1, [pc, #12]	; (8009040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009032:	5ccb      	ldrb	r3, [r1, r3]
 8009034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009038:	4618      	mov	r0, r3
 800903a:	bd80      	pop	{r7, pc}
 800903c:	40023800 	.word	0x40023800
 8009040:	0801f518 	.word	0x0801f518

08009044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009048:	f7ff ffdc 	bl	8009004 <HAL_RCC_GetHCLKFreq>
 800904c:	4602      	mov	r2, r0
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	0b5b      	lsrs	r3, r3, #13
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	4903      	ldr	r1, [pc, #12]	; (8009068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800905a:	5ccb      	ldrb	r3, [r1, r3]
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009060:	4618      	mov	r0, r3
 8009062:	bd80      	pop	{r7, pc}
 8009064:	40023800 	.word	0x40023800
 8009068:	0801f518 	.word	0x0801f518

0800906c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	d105      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009090:	2b00      	cmp	r3, #0
 8009092:	d035      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009094:	4b62      	ldr	r3, [pc, #392]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800909a:	f7fd f85d 	bl	8006158 <HAL_GetTick>
 800909e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090a0:	e008      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80090a2:	f7fd f859 	bl	8006158 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d901      	bls.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e0b0      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090b4:	4b5b      	ldr	r3, [pc, #364]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1f0      	bne.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	019a      	lsls	r2, r3, #6
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	071b      	lsls	r3, r3, #28
 80090cc:	4955      	ldr	r1, [pc, #340]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80090d4:	4b52      	ldr	r3, [pc, #328]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090da:	f7fd f83d 	bl	8006158 <HAL_GetTick>
 80090de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090e0:	e008      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80090e2:	f7fd f839 	bl	8006158 <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d901      	bls.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e090      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090f4:	4b4b      	ldr	r3, [pc, #300]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0f0      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 8083 	beq.w	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800910e:	2300      	movs	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	4b44      	ldr	r3, [pc, #272]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	4a43      	ldr	r2, [pc, #268]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800911c:	6413      	str	r3, [r2, #64]	; 0x40
 800911e:	4b41      	ldr	r3, [pc, #260]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800912a:	4b3f      	ldr	r3, [pc, #252]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a3e      	ldr	r2, [pc, #248]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009134:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009136:	f7fd f80f 	bl	8006158 <HAL_GetTick>
 800913a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800913c:	e008      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800913e:	f7fd f80b 	bl	8006158 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d901      	bls.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e062      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009150:	4b35      	ldr	r3, [pc, #212]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0f0      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800915c:	4b31      	ldr	r3, [pc, #196]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800915e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009164:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d02f      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	429a      	cmp	r2, r3
 8009178:	d028      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800917a:	4b2a      	ldr	r3, [pc, #168]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800917c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009182:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009184:	4b29      	ldr	r3, [pc, #164]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800918a:	4b28      	ldr	r3, [pc, #160]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009190:	4a24      	ldr	r2, [pc, #144]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009196:	4b23      	ldr	r3, [pc, #140]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d114      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80091a2:	f7fc ffd9 	bl	8006158 <HAL_GetTick>
 80091a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091a8:	e00a      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091aa:	f7fc ffd5 	bl	8006158 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d901      	bls.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e02a      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091c0:	4b18      	ldr	r3, [pc, #96]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0ee      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091d8:	d10d      	bne.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80091da:	4b12      	ldr	r3, [pc, #72]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ee:	490d      	ldr	r1, [pc, #52]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	608b      	str	r3, [r1, #8]
 80091f4:	e005      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	4a0a      	ldr	r2, [pc, #40]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80091fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009200:	6093      	str	r3, [r2, #8]
 8009202:	4b08      	ldr	r3, [pc, #32]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800920e:	4905      	ldr	r1, [pc, #20]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009210:	4313      	orrs	r3, r2
 8009212:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	42470068 	.word	0x42470068
 8009224:	40023800 	.word	0x40023800
 8009228:	40007000 	.word	0x40007000
 800922c:	42470e40 	.word	0x42470e40

08009230 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e083      	b.n	800934a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	7f5b      	ldrb	r3, [r3, #29]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d105      	bne.n	8009258 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fc f8b0 	bl	80053b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	22ca      	movs	r2, #202	; 0xca
 8009264:	625a      	str	r2, [r3, #36]	; 0x24
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2253      	movs	r2, #83	; 0x53
 800926c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 faa8 	bl	80097c4 <RTC_EnterInitMode>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	22ff      	movs	r2, #255	; 0xff
 8009280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2204      	movs	r2, #4
 8009286:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e05e      	b.n	800934a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800929a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800929e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6899      	ldr	r1, [r3, #8]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	431a      	orrs	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	68d2      	ldr	r2, [r2, #12]
 80092c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6919      	ldr	r1, [r3, #16]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	041a      	lsls	r2, r3, #16
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10e      	bne.n	8009318 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa3a 	bl	8009774 <HAL_RTC_WaitForSynchro>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d008      	beq.n	8009318 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	22ff      	movs	r2, #255	; 0xff
 800930c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2204      	movs	r2, #4
 8009312:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e018      	b.n	800934a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009326:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	22ff      	movs	r2, #255	; 0xff
 8009340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009348:	2300      	movs	r3, #0
  }
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009352:	b590      	push	{r4, r7, lr}
 8009354:	b087      	sub	sp, #28
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	7f1b      	ldrb	r3, [r3, #28]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d101      	bne.n	800936e <HAL_RTC_SetTime+0x1c>
 800936a:	2302      	movs	r3, #2
 800936c:	e0aa      	b.n	80094c4 <HAL_RTC_SetTime+0x172>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2201      	movs	r2, #1
 8009372:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2202      	movs	r2, #2
 8009378:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d126      	bne.n	80093ce <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2200      	movs	r2, #0
 8009392:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fa3f 	bl	800981c <RTC_ByteToBcd2>
 800939e:	4603      	mov	r3, r0
 80093a0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fa38 	bl	800981c <RTC_ByteToBcd2>
 80093ac:	4603      	mov	r3, r0
 80093ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80093b0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	789b      	ldrb	r3, [r3, #2]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fa30 	bl	800981c <RTC_ByteToBcd2>
 80093bc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80093be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	78db      	ldrb	r3, [r3, #3]
 80093c6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80093c8:	4313      	orrs	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	e018      	b.n	8009400 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d102      	bne.n	80093e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2200      	movs	r2, #0
 80093e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	785b      	ldrb	r3, [r3, #1]
 80093ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80093ee:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80093f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	78db      	ldrb	r3, [r3, #3]
 80093fa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	22ca      	movs	r2, #202	; 0xca
 8009406:	625a      	str	r2, [r3, #36]	; 0x24
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2253      	movs	r2, #83	; 0x53
 800940e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f9d7 	bl	80097c4 <RTC_EnterInitMode>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	22ff      	movs	r2, #255	; 0xff
 8009422:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2204      	movs	r2, #4
 8009428:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e047      	b.n	80094c4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800943e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009442:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009452:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6899      	ldr	r1, [r3, #8]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	431a      	orrs	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800947a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b00      	cmp	r3, #0
 8009488:	d111      	bne.n	80094ae <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 f972 	bl	8009774 <HAL_RTC_WaitForSynchro>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00b      	beq.n	80094ae <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	22ff      	movs	r2, #255	; 0xff
 800949c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2204      	movs	r2, #4
 80094a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e00a      	b.n	80094c4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	22ff      	movs	r2, #255	; 0xff
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80094c2:	2300      	movs	r3, #0
  }
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	371c      	adds	r7, #28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd90      	pop	{r4, r7, pc}

080094cc <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80094fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009502:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	0c1b      	lsrs	r3, r3, #16
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800950e:	b2da      	uxtb	r2, r3
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800951e:	b2da      	uxtb	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800952c:	b2da      	uxtb	r2, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	0c1b      	lsrs	r3, r3, #16
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953c:	b2da      	uxtb	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11a      	bne.n	800957e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f983 	bl	8009858 <RTC_Bcd2ToByte>
 8009552:	4603      	mov	r3, r0
 8009554:	461a      	mov	r2, r3
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	4618      	mov	r0, r3
 8009560:	f000 f97a 	bl	8009858 <RTC_Bcd2ToByte>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	789b      	ldrb	r3, [r3, #2]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 f971 	bl	8009858 <RTC_Bcd2ToByte>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	7f1b      	ldrb	r3, [r3, #28]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_RTC_SetDate+0x1c>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e094      	b.n	80096ce <HAL_RTC_SetDate+0x146>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2202      	movs	r2, #2
 80095ae:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10e      	bne.n	80095d4 <HAL_RTC_SetDate+0x4c>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	785b      	ldrb	r3, [r3, #1]
 80095c6:	f023 0310 	bic.w	r3, r3, #16
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	330a      	adds	r3, #10
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d11c      	bne.n	8009614 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	78db      	ldrb	r3, [r3, #3]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 f91c 	bl	800981c <RTC_ByteToBcd2>
 80095e4:	4603      	mov	r3, r0
 80095e6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f915 	bl	800981c <RTC_ByteToBcd2>
 80095f2:	4603      	mov	r3, r0
 80095f4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80095f6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	789b      	ldrb	r3, [r3, #2]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f90d 	bl	800981c <RTC_ByteToBcd2>
 8009602:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009604:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e00e      	b.n	8009632 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	78db      	ldrb	r3, [r3, #3]
 8009618:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	785b      	ldrb	r3, [r3, #1]
 800961e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009620:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009626:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	22ca      	movs	r2, #202	; 0xca
 8009638:	625a      	str	r2, [r3, #36]	; 0x24
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2253      	movs	r2, #83	; 0x53
 8009640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f8be 	bl	80097c4 <RTC_EnterInitMode>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	22ff      	movs	r2, #255	; 0xff
 8009654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2204      	movs	r2, #4
 800965a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e033      	b.n	80096ce <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009670:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009674:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009684:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0320 	and.w	r3, r3, #32
 8009690:	2b00      	cmp	r3, #0
 8009692:	d111      	bne.n	80096b8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f86d 	bl	8009774 <HAL_RTC_WaitForSynchro>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00b      	beq.n	80096b8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	22ff      	movs	r2, #255	; 0xff
 80096a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2204      	movs	r2, #4
 80096ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e00a      	b.n	80096ce <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	22ff      	movs	r2, #255	; 0xff
 80096be:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2201      	movs	r2, #1
 80096c4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80096cc:	2300      	movs	r3, #0
  }
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd90      	pop	{r4, r7, pc}

080096d6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b086      	sub	sp, #24
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80096f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80096f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	0c1b      	lsrs	r3, r3, #16
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f003 031f 	and.w	r3, r3, #31
 800970a:	b2da      	uxtb	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009718:	b2da      	uxtb	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	0b5b      	lsrs	r3, r3, #13
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	b2da      	uxtb	r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d11a      	bne.n	800976a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	78db      	ldrb	r3, [r3, #3]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 f88d 	bl	8009858 <RTC_Bcd2ToByte>
 800973e:	4603      	mov	r3, r0
 8009740:	461a      	mov	r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 f884 	bl	8009858 <RTC_Bcd2ToByte>
 8009750:	4603      	mov	r3, r0
 8009752:	461a      	mov	r2, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	789b      	ldrb	r3, [r3, #2]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f87b 	bl	8009858 <RTC_Bcd2ToByte>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800978e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009790:	f7fc fce2 	bl	8006158 <HAL_GetTick>
 8009794:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009796:	e009      	b.n	80097ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009798:	f7fc fcde 	bl	8006158 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a6:	d901      	bls.n	80097ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e007      	b.n	80097bc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0ee      	beq.n	8009798 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d119      	bne.n	8009812 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f04f 32ff 	mov.w	r2, #4294967295
 80097e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80097e8:	f7fc fcb6 	bl	8006158 <HAL_GetTick>
 80097ec:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80097ee:	e009      	b.n	8009804 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80097f0:	f7fc fcb2 	bl	8006158 <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097fe:	d901      	bls.n	8009804 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e007      	b.n	8009814 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0ee      	beq.n	80097f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800982a:	e005      	b.n	8009838 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	3b0a      	subs	r3, #10
 8009836:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	2b09      	cmp	r3, #9
 800983c:	d8f6      	bhi.n	800982c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	011b      	lsls	r3, r3, #4
 8009844:	b2da      	uxtb	r2, r3
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	4313      	orrs	r3, r2
 800984a:	b2db      	uxtb	r3, r3
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	091b      	lsrs	r3, r3, #4
 800986a:	b2db      	uxtb	r3, r3
 800986c:	461a      	mov	r2, r3
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	b2da      	uxtb	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	4413      	add	r3, r2
 8009886:	b2db      	uxtb	r3, r3
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e07b      	b.n	800999e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d108      	bne.n	80098c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098b6:	d009      	beq.n	80098cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	61da      	str	r2, [r3, #28]
 80098be:	e005      	b.n	80098cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7fb fd90 	bl	800540c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009902:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009914:	431a      	orrs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800991e:	431a      	orrs	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	431a      	orrs	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009946:	431a      	orrs	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009950:	ea42 0103 	orr.w	r1, r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009958:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	430a      	orrs	r2, r1
 8009962:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	0c1b      	lsrs	r3, r3, #16
 800996a:	f003 0104 	and.w	r1, r3, #4
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	f003 0210 	and.w	r2, r3, #16
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	69da      	ldr	r2, [r3, #28]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800998c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b088      	sub	sp, #32
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	603b      	str	r3, [r7, #0]
 80099b2:	4613      	mov	r3, r2
 80099b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <HAL_SPI_Transmit+0x22>
 80099c4:	2302      	movs	r3, #2
 80099c6:	e126      	b.n	8009c16 <HAL_SPI_Transmit+0x270>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099d0:	f7fc fbc2 	bl	8006158 <HAL_GetTick>
 80099d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80099d6:	88fb      	ldrh	r3, [r7, #6]
 80099d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d002      	beq.n	80099ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80099e6:	2302      	movs	r3, #2
 80099e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099ea:	e10b      	b.n	8009c04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <HAL_SPI_Transmit+0x52>
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d102      	bne.n	80099fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80099fc:	e102      	b.n	8009c04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2203      	movs	r2, #3
 8009a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	88fa      	ldrh	r2, [r7, #6]
 8009a16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	88fa      	ldrh	r2, [r7, #6]
 8009a1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a44:	d10f      	bne.n	8009a66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a70:	2b40      	cmp	r3, #64	; 0x40
 8009a72:	d007      	beq.n	8009a84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a8c:	d14b      	bne.n	8009b26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d002      	beq.n	8009a9c <HAL_SPI_Transmit+0xf6>
 8009a96:	8afb      	ldrh	r3, [r7, #22]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d13e      	bne.n	8009b1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa0:	881a      	ldrh	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aac:	1c9a      	adds	r2, r3, #2
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009ac0:	e02b      	b.n	8009b1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d112      	bne.n	8009af6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad4:	881a      	ldrh	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae0:	1c9a      	adds	r2, r3, #2
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	3b01      	subs	r3, #1
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	86da      	strh	r2, [r3, #54]	; 0x36
 8009af4:	e011      	b.n	8009b1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009af6:	f7fc fb2f 	bl	8006158 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d803      	bhi.n	8009b0e <HAL_SPI_Transmit+0x168>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0c:	d102      	bne.n	8009b14 <HAL_SPI_Transmit+0x16e>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d102      	bne.n	8009b1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b18:	e074      	b.n	8009c04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1ce      	bne.n	8009ac2 <HAL_SPI_Transmit+0x11c>
 8009b24:	e04c      	b.n	8009bc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <HAL_SPI_Transmit+0x18e>
 8009b2e:	8afb      	ldrh	r3, [r7, #22]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d140      	bne.n	8009bb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	330c      	adds	r3, #12
 8009b3e:	7812      	ldrb	r2, [r2, #0]
 8009b40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009b5a:	e02c      	b.n	8009bb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d113      	bne.n	8009b92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	330c      	adds	r3, #12
 8009b74:	7812      	ldrb	r2, [r2, #0]
 8009b76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b90:	e011      	b.n	8009bb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b92:	f7fc fae1 	bl	8006158 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d803      	bhi.n	8009baa <HAL_SPI_Transmit+0x204>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba8:	d102      	bne.n	8009bb0 <HAL_SPI_Transmit+0x20a>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009bb4:	e026      	b.n	8009c04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1cd      	bne.n	8009b5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fbcb 	bl	800a360 <SPI_EndRxTxTransaction>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10a      	bne.n	8009bf4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bde:	2300      	movs	r3, #0
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	77fb      	strb	r3, [r7, #31]
 8009c00:	e000      	b.n	8009c04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009c02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b088      	sub	sp, #32
 8009c22:	af02      	add	r7, sp, #8
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	603b      	str	r3, [r7, #0]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c3a:	d112      	bne.n	8009c62 <HAL_SPI_Receive+0x44>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10e      	bne.n	8009c62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2204      	movs	r2, #4
 8009c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009c4c:	88fa      	ldrh	r2, [r7, #6]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	4613      	mov	r3, r2
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 f8f1 	bl	8009e40 <HAL_SPI_TransmitReceive>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	e0ea      	b.n	8009e38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_SPI_Receive+0x52>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e0e3      	b.n	8009e38 <HAL_SPI_Receive+0x21a>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c78:	f7fc fa6e 	bl	8006158 <HAL_GetTick>
 8009c7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d002      	beq.n	8009c90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c8e:	e0ca      	b.n	8009e26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <HAL_SPI_Receive+0x7e>
 8009c96:	88fb      	ldrh	r3, [r7, #6]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ca0:	e0c1      	b.n	8009e26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2204      	movs	r2, #4
 8009ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	88fa      	ldrh	r2, [r7, #6]
 8009cba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce8:	d10f      	bne.n	8009d0a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d14:	2b40      	cmp	r3, #64	; 0x40
 8009d16:	d007      	beq.n	8009d28 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d162      	bne.n	8009df6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009d30:	e02e      	b.n	8009d90 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d115      	bne.n	8009d6c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f103 020c 	add.w	r2, r3, #12
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	7812      	ldrb	r2, [r2, #0]
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	3b01      	subs	r3, #1
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d6a:	e011      	b.n	8009d90 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d6c:	f7fc f9f4 	bl	8006158 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d803      	bhi.n	8009d84 <HAL_SPI_Receive+0x166>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d82:	d102      	bne.n	8009d8a <HAL_SPI_Receive+0x16c>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d102      	bne.n	8009d90 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009d8e:	e04a      	b.n	8009e26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1cb      	bne.n	8009d32 <HAL_SPI_Receive+0x114>
 8009d9a:	e031      	b.n	8009e00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d113      	bne.n	8009dd2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	b292      	uxth	r2, r2
 8009db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	1c9a      	adds	r2, r3, #2
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dd0:	e011      	b.n	8009df6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dd2:	f7fc f9c1 	bl	8006158 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d803      	bhi.n	8009dea <HAL_SPI_Receive+0x1cc>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d102      	bne.n	8009df0 <HAL_SPI_Receive+0x1d2>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009df4:	e017      	b.n	8009e26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1cd      	bne.n	8009d9c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 fa45 	bl	800a294 <SPI_EndRxTransaction>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2220      	movs	r2, #32
 8009e14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
 8009e22:	e000      	b.n	8009e26 <HAL_SPI_Receive+0x208>
  }

error :
 8009e24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08c      	sub	sp, #48	; 0x30
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_SPI_TransmitReceive+0x26>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e18a      	b.n	800a17c <HAL_SPI_TransmitReceive+0x33c>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e6e:	f7fc f973 	bl	8006158 <HAL_GetTick>
 8009e72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009e84:	887b      	ldrh	r3, [r7, #2]
 8009e86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d00f      	beq.n	8009eb0 <HAL_SPI_TransmitReceive+0x70>
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e96:	d107      	bne.n	8009ea8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d103      	bne.n	8009ea8 <HAL_SPI_TransmitReceive+0x68>
 8009ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	d003      	beq.n	8009eb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009eae:	e15b      	b.n	800a168 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <HAL_SPI_TransmitReceive+0x82>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <HAL_SPI_TransmitReceive+0x82>
 8009ebc:	887b      	ldrh	r3, [r7, #2]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d103      	bne.n	8009eca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009ec8:	e14e      	b.n	800a168 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d003      	beq.n	8009ede <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2205      	movs	r2, #5
 8009eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	887a      	ldrh	r2, [r7, #2]
 8009eee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	887a      	ldrh	r2, [r7, #2]
 8009ef4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	887a      	ldrh	r2, [r7, #2]
 8009f00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	887a      	ldrh	r2, [r7, #2]
 8009f06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1e:	2b40      	cmp	r3, #64	; 0x40
 8009f20:	d007      	beq.n	8009f32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f3a:	d178      	bne.n	800a02e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <HAL_SPI_TransmitReceive+0x10a>
 8009f44:	8b7b      	ldrh	r3, [r7, #26]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d166      	bne.n	800a018 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4e:	881a      	ldrh	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5a:	1c9a      	adds	r2, r3, #2
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f6e:	e053      	b.n	800a018 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d11b      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x176>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d016      	beq.n	8009fb6 <HAL_SPI_TransmitReceive+0x176>
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d113      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f92:	881a      	ldrh	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9e:	1c9a      	adds	r2, r3, #2
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	3b01      	subs	r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d119      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x1b8>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d014      	beq.n	8009ff8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	b292      	uxth	r2, r2
 8009fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	1c9a      	adds	r2, r3, #2
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ff8:	f7fc f8ae 	bl	8006158 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a004:	429a      	cmp	r2, r3
 800a006:	d807      	bhi.n	800a018 <HAL_SPI_TransmitReceive+0x1d8>
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00e:	d003      	beq.n	800a018 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a016:	e0a7      	b.n	800a168 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1a6      	bne.n	8009f70 <HAL_SPI_TransmitReceive+0x130>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a026:	b29b      	uxth	r3, r3
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1a1      	bne.n	8009f70 <HAL_SPI_TransmitReceive+0x130>
 800a02c:	e07c      	b.n	800a128 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <HAL_SPI_TransmitReceive+0x1fc>
 800a036:	8b7b      	ldrh	r3, [r7, #26]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d16b      	bne.n	800a114 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	330c      	adds	r3, #12
 800a046:	7812      	ldrb	r2, [r2, #0]
 800a048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a062:	e057      	b.n	800a114 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d11c      	bne.n	800a0ac <HAL_SPI_TransmitReceive+0x26c>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a076:	b29b      	uxth	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d017      	beq.n	800a0ac <HAL_SPI_TransmitReceive+0x26c>
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d114      	bne.n	800a0ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	330c      	adds	r3, #12
 800a08c:	7812      	ldrb	r2, [r2, #0]
 800a08e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d119      	bne.n	800a0ee <HAL_SPI_TransmitReceive+0x2ae>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d014      	beq.n	800a0ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0ee:	f7fc f833 	bl	8006158 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d803      	bhi.n	800a106 <HAL_SPI_TransmitReceive+0x2c6>
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d102      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x2cc>
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a112:	e029      	b.n	800a168 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a118:	b29b      	uxth	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1a2      	bne.n	800a064 <HAL_SPI_TransmitReceive+0x224>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a122:	b29b      	uxth	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d19d      	bne.n	800a064 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f000 f917 	bl	800a360 <SPI_EndRxTxTransaction>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2220      	movs	r2, #32
 800a142:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a144:	e010      	b.n	800a168 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10b      	bne.n	800a166 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a14e:	2300      	movs	r3, #0
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	e000      	b.n	800a168 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a178:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3730      	adds	r7, #48	; 0x30
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	4613      	mov	r3, r2
 800a192:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a194:	f7fb ffe0 	bl	8006158 <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	1a9b      	subs	r3, r3, r2
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a1a4:	f7fb ffd8 	bl	8006158 <HAL_GetTick>
 800a1a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1aa:	4b39      	ldr	r3, [pc, #228]	; (800a290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	015b      	lsls	r3, r3, #5
 800a1b0:	0d1b      	lsrs	r3, r3, #20
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	fb02 f303 	mul.w	r3, r2, r3
 800a1b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1ba:	e054      	b.n	800a266 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c2:	d050      	beq.n	800a266 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1c4:	f7fb ffc8 	bl	8006158 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	69fa      	ldr	r2, [r7, #28]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d902      	bls.n	800a1da <SPI_WaitFlagStateUntilTimeout+0x56>
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d13d      	bne.n	800a256 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1f2:	d111      	bne.n	800a218 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fc:	d004      	beq.n	800a208 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a206:	d107      	bne.n	800a218 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a220:	d10f      	bne.n	800a242 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e017      	b.n	800a286 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	3b01      	subs	r3, #1
 800a264:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	4013      	ands	r3, r2
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	429a      	cmp	r2, r3
 800a274:	bf0c      	ite	eq
 800a276:	2301      	moveq	r3, #1
 800a278:	2300      	movne	r3, #0
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	79fb      	ldrb	r3, [r7, #7]
 800a280:	429a      	cmp	r2, r3
 800a282:	d19b      	bne.n	800a1bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3720      	adds	r7, #32
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000070 	.word	0x20000070

0800a294 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af02      	add	r7, sp, #8
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2a8:	d111      	bne.n	800a2ce <SPI_EndRxTransaction+0x3a>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2b2:	d004      	beq.n	800a2be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2bc:	d107      	bne.n	800a2ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2d6:	d12a      	bne.n	800a32e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2e0:	d012      	beq.n	800a308 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2180      	movs	r1, #128	; 0x80
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff ff49 	bl	800a184 <SPI_WaitFlagStateUntilTimeout>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d02d      	beq.n	800a354 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fc:	f043 0220 	orr.w	r2, r3, #32
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e026      	b.n	800a356 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2200      	movs	r2, #0
 800a310:	2101      	movs	r1, #1
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f7ff ff36 	bl	800a184 <SPI_WaitFlagStateUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d01a      	beq.n	800a354 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a322:	f043 0220 	orr.w	r2, r3, #32
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e013      	b.n	800a356 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2200      	movs	r2, #0
 800a336:	2101      	movs	r1, #1
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f7ff ff23 	bl	800a184 <SPI_WaitFlagStateUntilTimeout>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d007      	beq.n	800a354 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a348:	f043 0220 	orr.w	r2, r3, #32
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e000      	b.n	800a356 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a36c:	4b1b      	ldr	r3, [pc, #108]	; (800a3dc <SPI_EndRxTxTransaction+0x7c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a1b      	ldr	r2, [pc, #108]	; (800a3e0 <SPI_EndRxTxTransaction+0x80>)
 800a372:	fba2 2303 	umull	r2, r3, r2, r3
 800a376:	0d5b      	lsrs	r3, r3, #21
 800a378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a37c:	fb02 f303 	mul.w	r3, r2, r3
 800a380:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a38a:	d112      	bne.n	800a3b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2200      	movs	r2, #0
 800a394:	2180      	movs	r1, #128	; 0x80
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7ff fef4 	bl	800a184 <SPI_WaitFlagStateUntilTimeout>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d016      	beq.n	800a3d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a6:	f043 0220 	orr.w	r2, r3, #32
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e00f      	b.n	800a3d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00a      	beq.n	800a3ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c8:	2b80      	cmp	r3, #128	; 0x80
 800a3ca:	d0f2      	beq.n	800a3b2 <SPI_EndRxTxTransaction+0x52>
 800a3cc:	e000      	b.n	800a3d0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a3ce:	bf00      	nop
  }

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000070 	.word	0x20000070
 800a3e0:	165e9f81 	.word	0x165e9f81

0800a3e4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e034      	b.n	800a464 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d106      	bne.n	800a414 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7fb f96c 	bl	80056ec <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3308      	adds	r3, #8
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f001 f898 	bl	800b554 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	461a      	mov	r2, r3
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	f001 f8e2 	bl	800b5f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6858      	ldr	r0, [r3, #4]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	689a      	ldr	r2, [r3, #8]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	f001 f917 	bl	800b674 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	6892      	ldr	r2, [r2, #8]
 800a44e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	6892      	ldr	r2, [r2, #8]
 800a45a:	f041 0101 	orr.w	r1, r1, #1
 800a45e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e03f      	b.n	800a4fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d106      	bne.n	800a498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7fb f88e 	bl	80055b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2224      	movs	r2, #36	; 0x24
 800a49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68da      	ldr	r2, [r3, #12]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fddb 	bl	800b06c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695a      	ldr	r2, [r3, #20]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b08a      	sub	sp, #40	; 0x28
 800a50a:	af02      	add	r7, sp, #8
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	603b      	str	r3, [r7, #0]
 800a512:	4613      	mov	r3, r2
 800a514:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b20      	cmp	r3, #32
 800a524:	d17c      	bne.n	800a620 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <HAL_UART_Transmit+0x2c>
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e075      	b.n	800a622 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_UART_Transmit+0x3e>
 800a540:	2302      	movs	r3, #2
 800a542:	e06e      	b.n	800a622 <HAL_UART_Transmit+0x11c>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2221      	movs	r2, #33	; 0x21
 800a556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a55a:	f7fb fdfd 	bl	8006158 <HAL_GetTick>
 800a55e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	88fa      	ldrh	r2, [r7, #6]
 800a564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	88fa      	ldrh	r2, [r7, #6]
 800a56a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a574:	d108      	bne.n	800a588 <HAL_UART_Transmit+0x82>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	e003      	b.n	800a590 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a598:	e02a      	b.n	800a5f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2180      	movs	r1, #128	; 0x80
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f000 fb1f 	bl	800abe8 <UART_WaitOnFlagUntilTimeout>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e036      	b.n	800a622 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10b      	bne.n	800a5d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	3302      	adds	r3, #2
 800a5ce:	61bb      	str	r3, [r7, #24]
 800a5d0:	e007      	b.n	800a5e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1cf      	bne.n	800a59a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2200      	movs	r2, #0
 800a602:	2140      	movs	r1, #64	; 0x40
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 faef 	bl	800abe8 <UART_WaitOnFlagUntilTimeout>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e006      	b.n	800a622 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	e000      	b.n	800a622 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a620:	2302      	movs	r3, #2
  }
}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	4613      	mov	r3, r2
 800a636:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b20      	cmp	r3, #32
 800a642:	d11d      	bne.n	800a680 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <HAL_UART_Receive_IT+0x26>
 800a64a:	88fb      	ldrh	r3, [r7, #6]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e016      	b.n	800a682 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d101      	bne.n	800a662 <HAL_UART_Receive_IT+0x38>
 800a65e:	2302      	movs	r3, #2
 800a660:	e00f      	b.n	800a682 <HAL_UART_Receive_IT+0x58>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a670:	88fb      	ldrh	r3, [r7, #6]
 800a672:	461a      	mov	r2, r3
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fb24 	bl	800acc4 <UART_Start_Receive_IT>
 800a67c:	4603      	mov	r3, r0
 800a67e:	e000      	b.n	800a682 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a680:	2302      	movs	r3, #2
  }
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b0ba      	sub	sp, #232	; 0xe8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a6ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10f      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x66>
 800a6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fc03 	bl	800aef6 <UART_Receive_IT>
      return;
 800a6f0:	e256      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80de 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x22c>
 800a6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a70c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80d1 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00b      	beq.n	800a73a <HAL_UART_IRQHandler+0xae>
 800a722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a732:	f043 0201 	orr.w	r2, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73e:	f003 0304 	and.w	r3, r3, #4
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <HAL_UART_IRQHandler+0xd2>
 800a746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	f043 0202 	orr.w	r2, r3, #2
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00b      	beq.n	800a782 <HAL_UART_IRQHandler+0xf6>
 800a76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	f043 0204 	orr.w	r2, r3, #4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a786:	f003 0308 	and.w	r3, r3, #8
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d011      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x126>
 800a78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d105      	bne.n	800a7a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a79a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d005      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7aa:	f043 0208 	orr.w	r2, r3, #8
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 81ed 	beq.w	800ab96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d008      	beq.n	800a7da <HAL_UART_IRQHandler+0x14e>
 800a7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fb8e 	bl	800aef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e4:	2b40      	cmp	r3, #64	; 0x40
 800a7e6:	bf0c      	ite	eq
 800a7e8:	2301      	moveq	r3, #1
 800a7ea:	2300      	movne	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d103      	bne.n	800a806 <HAL_UART_IRQHandler+0x17a>
 800a7fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d04f      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fa96 	bl	800ad38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a816:	2b40      	cmp	r3, #64	; 0x40
 800a818:	d141      	bne.n	800a89e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3314      	adds	r3, #20
 800a820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3314      	adds	r3, #20
 800a842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a846:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a84a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a85e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d9      	bne.n	800a81a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d013      	beq.n	800a896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	4a7d      	ldr	r2, [pc, #500]	; (800aa68 <HAL_UART_IRQHandler+0x3dc>)
 800a874:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fb fe8e 	bl	800659c <HAL_DMA_Abort_IT>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d016      	beq.n	800a8b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a894:	e00e      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f990 	bl	800abbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a89c:	e00a      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f98c 	bl	800abbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a4:	e006      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f988 	bl	800abbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a8b2:	e170      	b.n	800ab96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b4:	bf00      	nop
    return;
 800a8b6:	e16e      	b.n	800ab96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	f040 814a 	bne.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c6:	f003 0310 	and.w	r3, r3, #16
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8143 	beq.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d4:	f003 0310 	and.w	r3, r3, #16
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 813c 	beq.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60bb      	str	r3, [r7, #8]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60bb      	str	r3, [r7, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	f040 80b4 	bne.w	800aa6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8140 	beq.w	800ab9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a91e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a922:	429a      	cmp	r2, r3
 800a924:	f080 8139 	bcs.w	800ab9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a92e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93a:	f000 8088 	beq.w	800aa4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	330c      	adds	r3, #12
 800a944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a95c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	330c      	adds	r3, #12
 800a966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a96a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a96e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a976:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1d9      	bne.n	800a93e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3314      	adds	r3, #20
 800a990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3314      	adds	r3, #20
 800a9aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e1      	bne.n	800a98a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3314      	adds	r3, #20
 800a9cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e3      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	330c      	adds	r3, #12
 800aa12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa1e:	f023 0310 	bic.w	r3, r3, #16
 800aa22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	330c      	adds	r3, #12
 800aa2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa30:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e3      	bne.n	800aa0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fb fd37 	bl	80064bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f8b6 	bl	800abd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa64:	e099      	b.n	800ab9a <HAL_UART_IRQHandler+0x50e>
 800aa66:	bf00      	nop
 800aa68:	0800adff 	.word	0x0800adff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 808b 	beq.w	800ab9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8086 	beq.w	800ab9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	330c      	adds	r3, #12
 800aab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aab6:	647a      	str	r2, [r7, #68]	; 0x44
 800aab8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e3      	bne.n	800aa92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3314      	adds	r3, #20
 800aad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	623b      	str	r3, [r7, #32]
   return(result);
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	f023 0301 	bic.w	r3, r3, #1
 800aae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3314      	adds	r3, #20
 800aaea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaee:	633a      	str	r2, [r7, #48]	; 0x30
 800aaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e3      	bne.n	800aaca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	330c      	adds	r3, #12
 800ab16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0310 	bic.w	r3, r3, #16
 800ab26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	330c      	adds	r3, #12
 800ab30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ab34:	61fa      	str	r2, [r7, #28]
 800ab36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	69b9      	ldr	r1, [r7, #24]
 800ab3a:	69fa      	ldr	r2, [r7, #28]
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	617b      	str	r3, [r7, #20]
   return(result);
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e3      	bne.n	800ab10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f83e 	bl	800abd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab54:	e023      	b.n	800ab9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <HAL_UART_IRQHandler+0x4ea>
 800ab62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f959 	bl	800ae26 <UART_Transmit_IT>
    return;
 800ab74:	e014      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00e      	beq.n	800aba0 <HAL_UART_IRQHandler+0x514>
 800ab82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d008      	beq.n	800aba0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f999 	bl	800aec6 <UART_EndTransmit_IT>
    return;
 800ab94:	e004      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
    return;
 800ab96:	bf00      	nop
 800ab98:	e002      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
      return;
 800ab9a:	bf00      	nop
 800ab9c:	e000      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
      return;
 800ab9e:	bf00      	nop
  }
}
 800aba0:	37e8      	adds	r7, #232	; 0xe8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop

0800aba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b090      	sub	sp, #64	; 0x40
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	4613      	mov	r3, r2
 800abf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abf8:	e050      	b.n	800ac9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d04c      	beq.n	800ac9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ac02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d007      	beq.n	800ac18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac08:	f7fb faa6 	bl	8006158 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d241      	bcs.n	800ac9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	330c      	adds	r3, #12
 800ac36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac38:	637a      	str	r2, [r7, #52]	; 0x34
 800ac3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e5      	bne.n	800ac18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3314      	adds	r3, #20
 800ac52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	e853 3f00 	ldrex	r3, [r3]
 800ac5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f023 0301 	bic.w	r3, r3, #1
 800ac62:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3314      	adds	r3, #20
 800ac6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac6c:	623a      	str	r2, [r7, #32]
 800ac6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	69f9      	ldr	r1, [r7, #28]
 800ac72:	6a3a      	ldr	r2, [r7, #32]
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e5      	bne.n	800ac4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2220      	movs	r2, #32
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2220      	movs	r2, #32
 800ac8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e00f      	b.n	800acbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	4013      	ands	r3, r2
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	bf0c      	ite	eq
 800acac:	2301      	moveq	r3, #1
 800acae:	2300      	movne	r3, #0
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	461a      	mov	r2, r3
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d09f      	beq.n	800abfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3740      	adds	r7, #64	; 0x40
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	4613      	mov	r3, r2
 800acd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	88fa      	ldrh	r2, [r7, #6]
 800acdc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	88fa      	ldrh	r2, [r7, #6]
 800ace2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2222      	movs	r2, #34	; 0x22
 800acee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad08:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	695a      	ldr	r2, [r3, #20]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0201 	orr.w	r2, r2, #1
 800ad18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68da      	ldr	r2, [r3, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f042 0220 	orr.w	r2, r2, #32
 800ad28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b095      	sub	sp, #84	; 0x54
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	330c      	adds	r3, #12
 800ad46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	330c      	adds	r3, #12
 800ad5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad60:	643a      	str	r2, [r7, #64]	; 0x40
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e5      	bne.n	800ad40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3314      	adds	r3, #20
 800ad7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	f023 0301 	bic.w	r3, r3, #1
 800ad8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3314      	adds	r3, #20
 800ad92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e5      	bne.n	800ad74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adac:	2b01      	cmp	r3, #1
 800adae:	d119      	bne.n	800ade4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	330c      	adds	r3, #12
 800adb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	f023 0310 	bic.w	r3, r3, #16
 800adc6:	647b      	str	r3, [r7, #68]	; 0x44
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	330c      	adds	r3, #12
 800adce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800add0:	61ba      	str	r2, [r7, #24]
 800add2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6979      	ldr	r1, [r7, #20]
 800add6:	69ba      	ldr	r2, [r7, #24]
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	613b      	str	r3, [r7, #16]
   return(result);
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e5      	bne.n	800adb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800adf2:	bf00      	nop
 800adf4:	3754      	adds	r7, #84	; 0x54
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7ff fecf 	bl	800abbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b085      	sub	sp, #20
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b21      	cmp	r3, #33	; 0x21
 800ae38:	d13e      	bne.n	800aeb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae42:	d114      	bne.n	800ae6e <UART_Transmit_IT+0x48>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d110      	bne.n	800ae6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	1c9a      	adds	r2, r3, #2
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	621a      	str	r2, [r3, #32]
 800ae6c:	e008      	b.n	800ae80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	1c59      	adds	r1, r3, #1
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	6211      	str	r1, [r2, #32]
 800ae78:	781a      	ldrb	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10f      	bne.n	800aeb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68da      	ldr	r2, [r3, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aea2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e000      	b.n	800aeba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aeb8:	2302      	movs	r3, #2
  }
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aedc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff fe5e 	bl	800aba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b08c      	sub	sp, #48	; 0x30
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b22      	cmp	r3, #34	; 0x22
 800af08:	f040 80ab 	bne.w	800b062 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af14:	d117      	bne.n	800af46 <UART_Receive_IT+0x50>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d113      	bne.n	800af46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af1e:	2300      	movs	r3, #0
 800af20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af34:	b29a      	uxth	r2, r3
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3e:	1c9a      	adds	r2, r3, #2
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	629a      	str	r2, [r3, #40]	; 0x28
 800af44:	e026      	b.n	800af94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af58:	d007      	beq.n	800af6a <UART_Receive_IT+0x74>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <UART_Receive_IT+0x82>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	b2da      	uxtb	r2, r3
 800af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	e008      	b.n	800af8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af84:	b2da      	uxtb	r2, r3
 800af86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af98:	b29b      	uxth	r3, r3
 800af9a:	3b01      	subs	r3, #1
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	4619      	mov	r1, r3
 800afa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d15a      	bne.n	800b05e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 0220 	bic.w	r2, r2, #32
 800afb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	695a      	ldr	r2, [r3, #20]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0201 	bic.w	r2, r2, #1
 800afd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2220      	movs	r2, #32
 800afdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d135      	bne.n	800b054 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	330c      	adds	r3, #12
 800aff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	613b      	str	r3, [r7, #16]
   return(result);
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f023 0310 	bic.w	r3, r3, #16
 800b004:	627b      	str	r3, [r7, #36]	; 0x24
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	330c      	adds	r3, #12
 800b00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b00e:	623a      	str	r2, [r7, #32]
 800b010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	69f9      	ldr	r1, [r7, #28]
 800b014:	6a3a      	ldr	r2, [r7, #32]
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e5      	bne.n	800afee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0310 	and.w	r3, r3, #16
 800b02c:	2b10      	cmp	r3, #16
 800b02e:	d10a      	bne.n	800b046 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b030:	2300      	movs	r3, #0
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff fdbf 	bl	800abd0 <HAL_UARTEx_RxEventCallback>
 800b052:	e002      	b.n	800b05a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7f6 ff3b 	bl	8001ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	e002      	b.n	800b064 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	e000      	b.n	800b064 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b062:	2302      	movs	r3, #2
  }
}
 800b064:	4618      	mov	r0, r3
 800b066:	3730      	adds	r7, #48	; 0x30
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b06c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b070:	b0c0      	sub	sp, #256	; 0x100
 800b072:	af00      	add	r7, sp, #0
 800b074:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b088:	68d9      	ldr	r1, [r3, #12]
 800b08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	ea40 0301 	orr.w	r3, r0, r1
 800b094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b09a:	689a      	ldr	r2, [r3, #8]
 800b09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b0:	69db      	ldr	r3, [r3, #28]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b0c4:	f021 010c 	bic.w	r1, r1, #12
 800b0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b0d2:	430b      	orrs	r3, r1
 800b0d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0e6:	6999      	ldr	r1, [r3, #24]
 800b0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	ea40 0301 	orr.w	r3, r0, r1
 800b0f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	4b8f      	ldr	r3, [pc, #572]	; (800b338 <UART_SetConfig+0x2cc>)
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d005      	beq.n	800b10c <UART_SetConfig+0xa0>
 800b100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	4b8d      	ldr	r3, [pc, #564]	; (800b33c <UART_SetConfig+0x2d0>)
 800b108:	429a      	cmp	r2, r3
 800b10a:	d104      	bne.n	800b116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b10c:	f7fd ff9a 	bl	8009044 <HAL_RCC_GetPCLK2Freq>
 800b110:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b114:	e003      	b.n	800b11e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b116:	f7fd ff81 	bl	800901c <HAL_RCC_GetPCLK1Freq>
 800b11a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b128:	f040 810c 	bne.w	800b344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b12c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b130:	2200      	movs	r2, #0
 800b132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b136:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b13a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b13e:	4622      	mov	r2, r4
 800b140:	462b      	mov	r3, r5
 800b142:	1891      	adds	r1, r2, r2
 800b144:	65b9      	str	r1, [r7, #88]	; 0x58
 800b146:	415b      	adcs	r3, r3
 800b148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b14a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b14e:	4621      	mov	r1, r4
 800b150:	eb12 0801 	adds.w	r8, r2, r1
 800b154:	4629      	mov	r1, r5
 800b156:	eb43 0901 	adc.w	r9, r3, r1
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	f04f 0300 	mov.w	r3, #0
 800b162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b16a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b16e:	4690      	mov	r8, r2
 800b170:	4699      	mov	r9, r3
 800b172:	4623      	mov	r3, r4
 800b174:	eb18 0303 	adds.w	r3, r8, r3
 800b178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b17c:	462b      	mov	r3, r5
 800b17e:	eb49 0303 	adc.w	r3, r9, r3
 800b182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b192:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b19a:	460b      	mov	r3, r1
 800b19c:	18db      	adds	r3, r3, r3
 800b19e:	653b      	str	r3, [r7, #80]	; 0x50
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	eb42 0303 	adc.w	r3, r2, r3
 800b1a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b1a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b1ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b1b0:	f7f5 fd6a 	bl	8000c88 <__aeabi_uldivmod>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4b61      	ldr	r3, [pc, #388]	; (800b340 <UART_SetConfig+0x2d4>)
 800b1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b1be:	095b      	lsrs	r3, r3, #5
 800b1c0:	011c      	lsls	r4, r3, #4
 800b1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b1d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	1891      	adds	r1, r2, r2
 800b1da:	64b9      	str	r1, [r7, #72]	; 0x48
 800b1dc:	415b      	adcs	r3, r3
 800b1de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b1e4:	4641      	mov	r1, r8
 800b1e6:	eb12 0a01 	adds.w	sl, r2, r1
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	eb43 0b01 	adc.w	fp, r3, r1
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b1fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b204:	4692      	mov	sl, r2
 800b206:	469b      	mov	fp, r3
 800b208:	4643      	mov	r3, r8
 800b20a:	eb1a 0303 	adds.w	r3, sl, r3
 800b20e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b212:	464b      	mov	r3, r9
 800b214:	eb4b 0303 	adc.w	r3, fp, r3
 800b218:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b228:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b22c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b230:	460b      	mov	r3, r1
 800b232:	18db      	adds	r3, r3, r3
 800b234:	643b      	str	r3, [r7, #64]	; 0x40
 800b236:	4613      	mov	r3, r2
 800b238:	eb42 0303 	adc.w	r3, r2, r3
 800b23c:	647b      	str	r3, [r7, #68]	; 0x44
 800b23e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b246:	f7f5 fd1f 	bl	8000c88 <__aeabi_uldivmod>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4611      	mov	r1, r2
 800b250:	4b3b      	ldr	r3, [pc, #236]	; (800b340 <UART_SetConfig+0x2d4>)
 800b252:	fba3 2301 	umull	r2, r3, r3, r1
 800b256:	095b      	lsrs	r3, r3, #5
 800b258:	2264      	movs	r2, #100	; 0x64
 800b25a:	fb02 f303 	mul.w	r3, r2, r3
 800b25e:	1acb      	subs	r3, r1, r3
 800b260:	00db      	lsls	r3, r3, #3
 800b262:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b266:	4b36      	ldr	r3, [pc, #216]	; (800b340 <UART_SetConfig+0x2d4>)
 800b268:	fba3 2302 	umull	r2, r3, r3, r2
 800b26c:	095b      	lsrs	r3, r3, #5
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b274:	441c      	add	r4, r3
 800b276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b27a:	2200      	movs	r2, #0
 800b27c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b280:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b288:	4642      	mov	r2, r8
 800b28a:	464b      	mov	r3, r9
 800b28c:	1891      	adds	r1, r2, r2
 800b28e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b290:	415b      	adcs	r3, r3
 800b292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b298:	4641      	mov	r1, r8
 800b29a:	1851      	adds	r1, r2, r1
 800b29c:	6339      	str	r1, [r7, #48]	; 0x30
 800b29e:	4649      	mov	r1, r9
 800b2a0:	414b      	adcs	r3, r1
 800b2a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2a4:	f04f 0200 	mov.w	r2, #0
 800b2a8:	f04f 0300 	mov.w	r3, #0
 800b2ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b2b0:	4659      	mov	r1, fp
 800b2b2:	00cb      	lsls	r3, r1, #3
 800b2b4:	4651      	mov	r1, sl
 800b2b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ba:	4651      	mov	r1, sl
 800b2bc:	00ca      	lsls	r2, r1, #3
 800b2be:	4610      	mov	r0, r2
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4642      	mov	r2, r8
 800b2c6:	189b      	adds	r3, r3, r2
 800b2c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2cc:	464b      	mov	r3, r9
 800b2ce:	460a      	mov	r2, r1
 800b2d0:	eb42 0303 	adc.w	r3, r2, r3
 800b2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b2e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	18db      	adds	r3, r3, r3
 800b2f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	eb42 0303 	adc.w	r3, r2, r3
 800b2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b302:	f7f5 fcc1 	bl	8000c88 <__aeabi_uldivmod>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <UART_SetConfig+0x2d4>)
 800b30c:	fba3 1302 	umull	r1, r3, r3, r2
 800b310:	095b      	lsrs	r3, r3, #5
 800b312:	2164      	movs	r1, #100	; 0x64
 800b314:	fb01 f303 	mul.w	r3, r1, r3
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	3332      	adds	r3, #50	; 0x32
 800b31e:	4a08      	ldr	r2, [pc, #32]	; (800b340 <UART_SetConfig+0x2d4>)
 800b320:	fba2 2303 	umull	r2, r3, r2, r3
 800b324:	095b      	lsrs	r3, r3, #5
 800b326:	f003 0207 	and.w	r2, r3, #7
 800b32a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4422      	add	r2, r4
 800b332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b334:	e105      	b.n	800b542 <UART_SetConfig+0x4d6>
 800b336:	bf00      	nop
 800b338:	40011000 	.word	0x40011000
 800b33c:	40011400 	.word	0x40011400
 800b340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b34e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b356:	4642      	mov	r2, r8
 800b358:	464b      	mov	r3, r9
 800b35a:	1891      	adds	r1, r2, r2
 800b35c:	6239      	str	r1, [r7, #32]
 800b35e:	415b      	adcs	r3, r3
 800b360:	627b      	str	r3, [r7, #36]	; 0x24
 800b362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b366:	4641      	mov	r1, r8
 800b368:	1854      	adds	r4, r2, r1
 800b36a:	4649      	mov	r1, r9
 800b36c:	eb43 0501 	adc.w	r5, r3, r1
 800b370:	f04f 0200 	mov.w	r2, #0
 800b374:	f04f 0300 	mov.w	r3, #0
 800b378:	00eb      	lsls	r3, r5, #3
 800b37a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b37e:	00e2      	lsls	r2, r4, #3
 800b380:	4614      	mov	r4, r2
 800b382:	461d      	mov	r5, r3
 800b384:	4643      	mov	r3, r8
 800b386:	18e3      	adds	r3, r4, r3
 800b388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b38c:	464b      	mov	r3, r9
 800b38e:	eb45 0303 	adc.w	r3, r5, r3
 800b392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b3a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b3a6:	f04f 0200 	mov.w	r2, #0
 800b3aa:	f04f 0300 	mov.w	r3, #0
 800b3ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	008b      	lsls	r3, r1, #2
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3bc:	4621      	mov	r1, r4
 800b3be:	008a      	lsls	r2, r1, #2
 800b3c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b3c4:	f7f5 fc60 	bl	8000c88 <__aeabi_uldivmod>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4b60      	ldr	r3, [pc, #384]	; (800b550 <UART_SetConfig+0x4e4>)
 800b3ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b3d2:	095b      	lsrs	r3, r3, #5
 800b3d4:	011c      	lsls	r4, r3, #4
 800b3d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	464b      	mov	r3, r9
 800b3ec:	1891      	adds	r1, r2, r2
 800b3ee:	61b9      	str	r1, [r7, #24]
 800b3f0:	415b      	adcs	r3, r3
 800b3f2:	61fb      	str	r3, [r7, #28]
 800b3f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	1851      	adds	r1, r2, r1
 800b3fc:	6139      	str	r1, [r7, #16]
 800b3fe:	4649      	mov	r1, r9
 800b400:	414b      	adcs	r3, r1
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	f04f 0200 	mov.w	r2, #0
 800b408:	f04f 0300 	mov.w	r3, #0
 800b40c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b410:	4659      	mov	r1, fp
 800b412:	00cb      	lsls	r3, r1, #3
 800b414:	4651      	mov	r1, sl
 800b416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b41a:	4651      	mov	r1, sl
 800b41c:	00ca      	lsls	r2, r1, #3
 800b41e:	4610      	mov	r0, r2
 800b420:	4619      	mov	r1, r3
 800b422:	4603      	mov	r3, r0
 800b424:	4642      	mov	r2, r8
 800b426:	189b      	adds	r3, r3, r2
 800b428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b42c:	464b      	mov	r3, r9
 800b42e:	460a      	mov	r2, r1
 800b430:	eb42 0303 	adc.w	r3, r2, r3
 800b434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	67bb      	str	r3, [r7, #120]	; 0x78
 800b442:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b444:	f04f 0200 	mov.w	r2, #0
 800b448:	f04f 0300 	mov.w	r3, #0
 800b44c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b450:	4649      	mov	r1, r9
 800b452:	008b      	lsls	r3, r1, #2
 800b454:	4641      	mov	r1, r8
 800b456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b45a:	4641      	mov	r1, r8
 800b45c:	008a      	lsls	r2, r1, #2
 800b45e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b462:	f7f5 fc11 	bl	8000c88 <__aeabi_uldivmod>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4b39      	ldr	r3, [pc, #228]	; (800b550 <UART_SetConfig+0x4e4>)
 800b46c:	fba3 1302 	umull	r1, r3, r3, r2
 800b470:	095b      	lsrs	r3, r3, #5
 800b472:	2164      	movs	r1, #100	; 0x64
 800b474:	fb01 f303 	mul.w	r3, r1, r3
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	3332      	adds	r3, #50	; 0x32
 800b47e:	4a34      	ldr	r2, [pc, #208]	; (800b550 <UART_SetConfig+0x4e4>)
 800b480:	fba2 2303 	umull	r2, r3, r2, r3
 800b484:	095b      	lsrs	r3, r3, #5
 800b486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b48a:	441c      	add	r4, r3
 800b48c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b490:	2200      	movs	r2, #0
 800b492:	673b      	str	r3, [r7, #112]	; 0x70
 800b494:	677a      	str	r2, [r7, #116]	; 0x74
 800b496:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b49a:	4642      	mov	r2, r8
 800b49c:	464b      	mov	r3, r9
 800b49e:	1891      	adds	r1, r2, r2
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	415b      	adcs	r3, r3
 800b4a4:	60fb      	str	r3, [r7, #12]
 800b4a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4aa:	4641      	mov	r1, r8
 800b4ac:	1851      	adds	r1, r2, r1
 800b4ae:	6039      	str	r1, [r7, #0]
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	414b      	adcs	r3, r1
 800b4b4:	607b      	str	r3, [r7, #4]
 800b4b6:	f04f 0200 	mov.w	r2, #0
 800b4ba:	f04f 0300 	mov.w	r3, #0
 800b4be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4c2:	4659      	mov	r1, fp
 800b4c4:	00cb      	lsls	r3, r1, #3
 800b4c6:	4651      	mov	r1, sl
 800b4c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4cc:	4651      	mov	r1, sl
 800b4ce:	00ca      	lsls	r2, r1, #3
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	4642      	mov	r2, r8
 800b4d8:	189b      	adds	r3, r3, r2
 800b4da:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4dc:	464b      	mov	r3, r9
 800b4de:	460a      	mov	r2, r1
 800b4e0:	eb42 0303 	adc.w	r3, r2, r3
 800b4e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	663b      	str	r3, [r7, #96]	; 0x60
 800b4f0:	667a      	str	r2, [r7, #100]	; 0x64
 800b4f2:	f04f 0200 	mov.w	r2, #0
 800b4f6:	f04f 0300 	mov.w	r3, #0
 800b4fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b4fe:	4649      	mov	r1, r9
 800b500:	008b      	lsls	r3, r1, #2
 800b502:	4641      	mov	r1, r8
 800b504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b508:	4641      	mov	r1, r8
 800b50a:	008a      	lsls	r2, r1, #2
 800b50c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b510:	f7f5 fbba 	bl	8000c88 <__aeabi_uldivmod>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4b0d      	ldr	r3, [pc, #52]	; (800b550 <UART_SetConfig+0x4e4>)
 800b51a:	fba3 1302 	umull	r1, r3, r3, r2
 800b51e:	095b      	lsrs	r3, r3, #5
 800b520:	2164      	movs	r1, #100	; 0x64
 800b522:	fb01 f303 	mul.w	r3, r1, r3
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	3332      	adds	r3, #50	; 0x32
 800b52c:	4a08      	ldr	r2, [pc, #32]	; (800b550 <UART_SetConfig+0x4e4>)
 800b52e:	fba2 2303 	umull	r2, r3, r2, r3
 800b532:	095b      	lsrs	r3, r3, #5
 800b534:	f003 020f 	and.w	r2, r3, #15
 800b538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4422      	add	r2, r4
 800b540:	609a      	str	r2, [r3, #8]
}
 800b542:	bf00      	nop
 800b544:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b548:	46bd      	mov	sp, r7
 800b54a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b54e:	bf00      	nop
 800b550:	51eb851f 	.word	0x51eb851f

0800b554 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	4b20      	ldr	r3, [pc, #128]	; (800b5f4 <FSMC_NORSRAM_Init+0xa0>)
 800b572:	4013      	ands	r3, r2
 800b574:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b57e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b584:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b58a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b590:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800b596:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800b59c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b5a2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b5a8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b5ae:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b5b4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800b5ba:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800b5c0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d103      	bne.n	800b5d8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68f9      	ldr	r1, [r7, #12]
 800b5e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	fff00080 	.word	0xfff00080

0800b5f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b612:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b61a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b626:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b62e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800b636:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b640:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	3b02      	subs	r3, #2
 800b648:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b64a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b650:	4313      	orrs	r3, r2
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	4313      	orrs	r3, r2
 800b656:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6979      	ldr	r1, [r7, #20]
 800b660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	371c      	adds	r7, #28
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
	...

0800b674 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b68c:	d122      	bne.n	800b6d4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b696:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800b69c:	4013      	ands	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b6aa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b6b2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800b6ba:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b6c0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	6979      	ldr	r1, [r7, #20]
 800b6ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b6d2:	e005      	b.n	800b6e0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b6dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	cff00000 	.word	0xcff00000

0800b6f4 <atoi>:
 800b6f4:	220a      	movs	r2, #10
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	f001 bdd2 	b.w	800d2a0 <strtol>

0800b6fc <__errno>:
 800b6fc:	4b01      	ldr	r3, [pc, #4]	; (800b704 <__errno+0x8>)
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	2000007c 	.word	0x2000007c

0800b708 <__libc_init_array>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4d0d      	ldr	r5, [pc, #52]	; (800b740 <__libc_init_array+0x38>)
 800b70c:	4c0d      	ldr	r4, [pc, #52]	; (800b744 <__libc_init_array+0x3c>)
 800b70e:	1b64      	subs	r4, r4, r5
 800b710:	10a4      	asrs	r4, r4, #2
 800b712:	2600      	movs	r6, #0
 800b714:	42a6      	cmp	r6, r4
 800b716:	d109      	bne.n	800b72c <__libc_init_array+0x24>
 800b718:	4d0b      	ldr	r5, [pc, #44]	; (800b748 <__libc_init_array+0x40>)
 800b71a:	4c0c      	ldr	r4, [pc, #48]	; (800b74c <__libc_init_array+0x44>)
 800b71c:	f005 fc7a 	bl	8011014 <_init>
 800b720:	1b64      	subs	r4, r4, r5
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	2600      	movs	r6, #0
 800b726:	42a6      	cmp	r6, r4
 800b728:	d105      	bne.n	800b736 <__libc_init_array+0x2e>
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b730:	4798      	blx	r3
 800b732:	3601      	adds	r6, #1
 800b734:	e7ee      	b.n	800b714 <__libc_init_array+0xc>
 800b736:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73a:	4798      	blx	r3
 800b73c:	3601      	adds	r6, #1
 800b73e:	e7f2      	b.n	800b726 <__libc_init_array+0x1e>
 800b740:	0801fa00 	.word	0x0801fa00
 800b744:	0801fa00 	.word	0x0801fa00
 800b748:	0801fa00 	.word	0x0801fa00
 800b74c:	0801fa04 	.word	0x0801fa04

0800b750 <memcmp>:
 800b750:	b510      	push	{r4, lr}
 800b752:	3901      	subs	r1, #1
 800b754:	4402      	add	r2, r0
 800b756:	4290      	cmp	r0, r2
 800b758:	d101      	bne.n	800b75e <memcmp+0xe>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e005      	b.n	800b76a <memcmp+0x1a>
 800b75e:	7803      	ldrb	r3, [r0, #0]
 800b760:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b764:	42a3      	cmp	r3, r4
 800b766:	d001      	beq.n	800b76c <memcmp+0x1c>
 800b768:	1b18      	subs	r0, r3, r4
 800b76a:	bd10      	pop	{r4, pc}
 800b76c:	3001      	adds	r0, #1
 800b76e:	e7f2      	b.n	800b756 <memcmp+0x6>

0800b770 <memcpy>:
 800b770:	440a      	add	r2, r1
 800b772:	4291      	cmp	r1, r2
 800b774:	f100 33ff 	add.w	r3, r0, #4294967295
 800b778:	d100      	bne.n	800b77c <memcpy+0xc>
 800b77a:	4770      	bx	lr
 800b77c:	b510      	push	{r4, lr}
 800b77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b782:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b786:	4291      	cmp	r1, r2
 800b788:	d1f9      	bne.n	800b77e <memcpy+0xe>
 800b78a:	bd10      	pop	{r4, pc}

0800b78c <memset>:
 800b78c:	4402      	add	r2, r0
 800b78e:	4603      	mov	r3, r0
 800b790:	4293      	cmp	r3, r2
 800b792:	d100      	bne.n	800b796 <memset+0xa>
 800b794:	4770      	bx	lr
 800b796:	f803 1b01 	strb.w	r1, [r3], #1
 800b79a:	e7f9      	b.n	800b790 <memset+0x4>

0800b79c <__cvt>:
 800b79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a0:	ec55 4b10 	vmov	r4, r5, d0
 800b7a4:	2d00      	cmp	r5, #0
 800b7a6:	460e      	mov	r6, r1
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	bfbb      	ittet	lt
 800b7ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7b2:	461d      	movlt	r5, r3
 800b7b4:	2300      	movge	r3, #0
 800b7b6:	232d      	movlt	r3, #45	; 0x2d
 800b7b8:	700b      	strb	r3, [r1, #0]
 800b7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b7c0:	4691      	mov	r9, r2
 800b7c2:	f023 0820 	bic.w	r8, r3, #32
 800b7c6:	bfbc      	itt	lt
 800b7c8:	4622      	movlt	r2, r4
 800b7ca:	4614      	movlt	r4, r2
 800b7cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7d0:	d005      	beq.n	800b7de <__cvt+0x42>
 800b7d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7d6:	d100      	bne.n	800b7da <__cvt+0x3e>
 800b7d8:	3601      	adds	r6, #1
 800b7da:	2102      	movs	r1, #2
 800b7dc:	e000      	b.n	800b7e0 <__cvt+0x44>
 800b7de:	2103      	movs	r1, #3
 800b7e0:	ab03      	add	r3, sp, #12
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	ab02      	add	r3, sp, #8
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	ec45 4b10 	vmov	d0, r4, r5
 800b7ec:	4653      	mov	r3, sl
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	f001 fdee 	bl	800d3d0 <_dtoa_r>
 800b7f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7f8:	4607      	mov	r7, r0
 800b7fa:	d102      	bne.n	800b802 <__cvt+0x66>
 800b7fc:	f019 0f01 	tst.w	r9, #1
 800b800:	d022      	beq.n	800b848 <__cvt+0xac>
 800b802:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b806:	eb07 0906 	add.w	r9, r7, r6
 800b80a:	d110      	bne.n	800b82e <__cvt+0x92>
 800b80c:	783b      	ldrb	r3, [r7, #0]
 800b80e:	2b30      	cmp	r3, #48	; 0x30
 800b810:	d10a      	bne.n	800b828 <__cvt+0x8c>
 800b812:	2200      	movs	r2, #0
 800b814:	2300      	movs	r3, #0
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f5 f955 	bl	8000ac8 <__aeabi_dcmpeq>
 800b81e:	b918      	cbnz	r0, 800b828 <__cvt+0x8c>
 800b820:	f1c6 0601 	rsb	r6, r6, #1
 800b824:	f8ca 6000 	str.w	r6, [sl]
 800b828:	f8da 3000 	ldr.w	r3, [sl]
 800b82c:	4499      	add	r9, r3
 800b82e:	2200      	movs	r2, #0
 800b830:	2300      	movs	r3, #0
 800b832:	4620      	mov	r0, r4
 800b834:	4629      	mov	r1, r5
 800b836:	f7f5 f947 	bl	8000ac8 <__aeabi_dcmpeq>
 800b83a:	b108      	cbz	r0, 800b840 <__cvt+0xa4>
 800b83c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b840:	2230      	movs	r2, #48	; 0x30
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	454b      	cmp	r3, r9
 800b846:	d307      	bcc.n	800b858 <__cvt+0xbc>
 800b848:	9b03      	ldr	r3, [sp, #12]
 800b84a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b84c:	1bdb      	subs	r3, r3, r7
 800b84e:	4638      	mov	r0, r7
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	b004      	add	sp, #16
 800b854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b858:	1c59      	adds	r1, r3, #1
 800b85a:	9103      	str	r1, [sp, #12]
 800b85c:	701a      	strb	r2, [r3, #0]
 800b85e:	e7f0      	b.n	800b842 <__cvt+0xa6>

0800b860 <__exponent>:
 800b860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b862:	4603      	mov	r3, r0
 800b864:	2900      	cmp	r1, #0
 800b866:	bfb8      	it	lt
 800b868:	4249      	neglt	r1, r1
 800b86a:	f803 2b02 	strb.w	r2, [r3], #2
 800b86e:	bfb4      	ite	lt
 800b870:	222d      	movlt	r2, #45	; 0x2d
 800b872:	222b      	movge	r2, #43	; 0x2b
 800b874:	2909      	cmp	r1, #9
 800b876:	7042      	strb	r2, [r0, #1]
 800b878:	dd2a      	ble.n	800b8d0 <__exponent+0x70>
 800b87a:	f10d 0407 	add.w	r4, sp, #7
 800b87e:	46a4      	mov	ip, r4
 800b880:	270a      	movs	r7, #10
 800b882:	46a6      	mov	lr, r4
 800b884:	460a      	mov	r2, r1
 800b886:	fb91 f6f7 	sdiv	r6, r1, r7
 800b88a:	fb07 1516 	mls	r5, r7, r6, r1
 800b88e:	3530      	adds	r5, #48	; 0x30
 800b890:	2a63      	cmp	r2, #99	; 0x63
 800b892:	f104 34ff 	add.w	r4, r4, #4294967295
 800b896:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b89a:	4631      	mov	r1, r6
 800b89c:	dcf1      	bgt.n	800b882 <__exponent+0x22>
 800b89e:	3130      	adds	r1, #48	; 0x30
 800b8a0:	f1ae 0502 	sub.w	r5, lr, #2
 800b8a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b8a8:	1c44      	adds	r4, r0, #1
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	4561      	cmp	r1, ip
 800b8ae:	d30a      	bcc.n	800b8c6 <__exponent+0x66>
 800b8b0:	f10d 0209 	add.w	r2, sp, #9
 800b8b4:	eba2 020e 	sub.w	r2, r2, lr
 800b8b8:	4565      	cmp	r5, ip
 800b8ba:	bf88      	it	hi
 800b8bc:	2200      	movhi	r2, #0
 800b8be:	4413      	add	r3, r2
 800b8c0:	1a18      	subs	r0, r3, r0
 800b8c2:	b003      	add	sp, #12
 800b8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8ce:	e7ed      	b.n	800b8ac <__exponent+0x4c>
 800b8d0:	2330      	movs	r3, #48	; 0x30
 800b8d2:	3130      	adds	r1, #48	; 0x30
 800b8d4:	7083      	strb	r3, [r0, #2]
 800b8d6:	70c1      	strb	r1, [r0, #3]
 800b8d8:	1d03      	adds	r3, r0, #4
 800b8da:	e7f1      	b.n	800b8c0 <__exponent+0x60>

0800b8dc <_printf_float>:
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	ed2d 8b02 	vpush	{d8}
 800b8e4:	b08d      	sub	sp, #52	; 0x34
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	461f      	mov	r7, r3
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	f002 fecb 	bl	800e68c <_localeconv_r>
 800b8f6:	f8d0 a000 	ldr.w	sl, [r0]
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	f7f4 fc68 	bl	80001d0 <strlen>
 800b900:	2300      	movs	r3, #0
 800b902:	930a      	str	r3, [sp, #40]	; 0x28
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	9305      	str	r3, [sp, #20]
 800b908:	f8d8 3000 	ldr.w	r3, [r8]
 800b90c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b910:	3307      	adds	r3, #7
 800b912:	f023 0307 	bic.w	r3, r3, #7
 800b916:	f103 0208 	add.w	r2, r3, #8
 800b91a:	f8c8 2000 	str.w	r2, [r8]
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b926:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b92a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b92e:	9307      	str	r3, [sp, #28]
 800b930:	f8cd 8018 	str.w	r8, [sp, #24]
 800b934:	ee08 0a10 	vmov	s16, r0
 800b938:	4b9f      	ldr	r3, [pc, #636]	; (800bbb8 <_printf_float+0x2dc>)
 800b93a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b93e:	f04f 32ff 	mov.w	r2, #4294967295
 800b942:	f7f5 f8f3 	bl	8000b2c <__aeabi_dcmpun>
 800b946:	bb88      	cbnz	r0, 800b9ac <_printf_float+0xd0>
 800b948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b94c:	4b9a      	ldr	r3, [pc, #616]	; (800bbb8 <_printf_float+0x2dc>)
 800b94e:	f04f 32ff 	mov.w	r2, #4294967295
 800b952:	f7f5 f8cd 	bl	8000af0 <__aeabi_dcmple>
 800b956:	bb48      	cbnz	r0, 800b9ac <_printf_float+0xd0>
 800b958:	2200      	movs	r2, #0
 800b95a:	2300      	movs	r3, #0
 800b95c:	4640      	mov	r0, r8
 800b95e:	4649      	mov	r1, r9
 800b960:	f7f5 f8bc 	bl	8000adc <__aeabi_dcmplt>
 800b964:	b110      	cbz	r0, 800b96c <_printf_float+0x90>
 800b966:	232d      	movs	r3, #45	; 0x2d
 800b968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b96c:	4b93      	ldr	r3, [pc, #588]	; (800bbbc <_printf_float+0x2e0>)
 800b96e:	4894      	ldr	r0, [pc, #592]	; (800bbc0 <_printf_float+0x2e4>)
 800b970:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b974:	bf94      	ite	ls
 800b976:	4698      	movls	r8, r3
 800b978:	4680      	movhi	r8, r0
 800b97a:	2303      	movs	r3, #3
 800b97c:	6123      	str	r3, [r4, #16]
 800b97e:	9b05      	ldr	r3, [sp, #20]
 800b980:	f023 0204 	bic.w	r2, r3, #4
 800b984:	6022      	str	r2, [r4, #0]
 800b986:	f04f 0900 	mov.w	r9, #0
 800b98a:	9700      	str	r7, [sp, #0]
 800b98c:	4633      	mov	r3, r6
 800b98e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b990:	4621      	mov	r1, r4
 800b992:	4628      	mov	r0, r5
 800b994:	f000 f9d8 	bl	800bd48 <_printf_common>
 800b998:	3001      	adds	r0, #1
 800b99a:	f040 8090 	bne.w	800babe <_printf_float+0x1e2>
 800b99e:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a2:	b00d      	add	sp, #52	; 0x34
 800b9a4:	ecbd 8b02 	vpop	{d8}
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	4642      	mov	r2, r8
 800b9ae:	464b      	mov	r3, r9
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f7f5 f8ba 	bl	8000b2c <__aeabi_dcmpun>
 800b9b8:	b140      	cbz	r0, 800b9cc <_printf_float+0xf0>
 800b9ba:	464b      	mov	r3, r9
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfbc      	itt	lt
 800b9c0:	232d      	movlt	r3, #45	; 0x2d
 800b9c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9c6:	487f      	ldr	r0, [pc, #508]	; (800bbc4 <_printf_float+0x2e8>)
 800b9c8:	4b7f      	ldr	r3, [pc, #508]	; (800bbc8 <_printf_float+0x2ec>)
 800b9ca:	e7d1      	b.n	800b970 <_printf_float+0x94>
 800b9cc:	6863      	ldr	r3, [r4, #4]
 800b9ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9d2:	9206      	str	r2, [sp, #24]
 800b9d4:	1c5a      	adds	r2, r3, #1
 800b9d6:	d13f      	bne.n	800ba58 <_printf_float+0x17c>
 800b9d8:	2306      	movs	r3, #6
 800b9da:	6063      	str	r3, [r4, #4]
 800b9dc:	9b05      	ldr	r3, [sp, #20]
 800b9de:	6861      	ldr	r1, [r4, #4]
 800b9e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9303      	str	r3, [sp, #12]
 800b9e8:	ab0a      	add	r3, sp, #40	; 0x28
 800b9ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9ee:	ab09      	add	r3, sp, #36	; 0x24
 800b9f0:	ec49 8b10 	vmov	d0, r8, r9
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	6022      	str	r2, [r4, #0]
 800b9f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f7ff fecd 	bl	800b79c <__cvt>
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba06:	2b47      	cmp	r3, #71	; 0x47
 800ba08:	4680      	mov	r8, r0
 800ba0a:	d108      	bne.n	800ba1e <_printf_float+0x142>
 800ba0c:	1cc8      	adds	r0, r1, #3
 800ba0e:	db02      	blt.n	800ba16 <_printf_float+0x13a>
 800ba10:	6863      	ldr	r3, [r4, #4]
 800ba12:	4299      	cmp	r1, r3
 800ba14:	dd41      	ble.n	800ba9a <_printf_float+0x1be>
 800ba16:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba1a:	fa5f fb8b 	uxtb.w	fp, fp
 800ba1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba22:	d820      	bhi.n	800ba66 <_printf_float+0x18a>
 800ba24:	3901      	subs	r1, #1
 800ba26:	465a      	mov	r2, fp
 800ba28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba2c:	9109      	str	r1, [sp, #36]	; 0x24
 800ba2e:	f7ff ff17 	bl	800b860 <__exponent>
 800ba32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba34:	1813      	adds	r3, r2, r0
 800ba36:	2a01      	cmp	r2, #1
 800ba38:	4681      	mov	r9, r0
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	dc02      	bgt.n	800ba44 <_printf_float+0x168>
 800ba3e:	6822      	ldr	r2, [r4, #0]
 800ba40:	07d2      	lsls	r2, r2, #31
 800ba42:	d501      	bpl.n	800ba48 <_printf_float+0x16c>
 800ba44:	3301      	adds	r3, #1
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d09c      	beq.n	800b98a <_printf_float+0xae>
 800ba50:	232d      	movs	r3, #45	; 0x2d
 800ba52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba56:	e798      	b.n	800b98a <_printf_float+0xae>
 800ba58:	9a06      	ldr	r2, [sp, #24]
 800ba5a:	2a47      	cmp	r2, #71	; 0x47
 800ba5c:	d1be      	bne.n	800b9dc <_printf_float+0x100>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1bc      	bne.n	800b9dc <_printf_float+0x100>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e7b9      	b.n	800b9da <_printf_float+0xfe>
 800ba66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba6a:	d118      	bne.n	800ba9e <_printf_float+0x1c2>
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	6863      	ldr	r3, [r4, #4]
 800ba70:	dd0b      	ble.n	800ba8a <_printf_float+0x1ae>
 800ba72:	6121      	str	r1, [r4, #16]
 800ba74:	b913      	cbnz	r3, 800ba7c <_printf_float+0x1a0>
 800ba76:	6822      	ldr	r2, [r4, #0]
 800ba78:	07d0      	lsls	r0, r2, #31
 800ba7a:	d502      	bpl.n	800ba82 <_printf_float+0x1a6>
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	440b      	add	r3, r1
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba84:	f04f 0900 	mov.w	r9, #0
 800ba88:	e7de      	b.n	800ba48 <_printf_float+0x16c>
 800ba8a:	b913      	cbnz	r3, 800ba92 <_printf_float+0x1b6>
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	07d2      	lsls	r2, r2, #31
 800ba90:	d501      	bpl.n	800ba96 <_printf_float+0x1ba>
 800ba92:	3302      	adds	r3, #2
 800ba94:	e7f4      	b.n	800ba80 <_printf_float+0x1a4>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e7f2      	b.n	800ba80 <_printf_float+0x1a4>
 800ba9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa0:	4299      	cmp	r1, r3
 800baa2:	db05      	blt.n	800bab0 <_printf_float+0x1d4>
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	6121      	str	r1, [r4, #16]
 800baa8:	07d8      	lsls	r0, r3, #31
 800baaa:	d5ea      	bpl.n	800ba82 <_printf_float+0x1a6>
 800baac:	1c4b      	adds	r3, r1, #1
 800baae:	e7e7      	b.n	800ba80 <_printf_float+0x1a4>
 800bab0:	2900      	cmp	r1, #0
 800bab2:	bfd4      	ite	le
 800bab4:	f1c1 0202 	rsble	r2, r1, #2
 800bab8:	2201      	movgt	r2, #1
 800baba:	4413      	add	r3, r2
 800babc:	e7e0      	b.n	800ba80 <_printf_float+0x1a4>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	055a      	lsls	r2, r3, #21
 800bac2:	d407      	bmi.n	800bad4 <_printf_float+0x1f8>
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	4642      	mov	r2, r8
 800bac8:	4631      	mov	r1, r6
 800baca:	4628      	mov	r0, r5
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	d12c      	bne.n	800bb2c <_printf_float+0x250>
 800bad2:	e764      	b.n	800b99e <_printf_float+0xc2>
 800bad4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bad8:	f240 80e0 	bls.w	800bc9c <_printf_float+0x3c0>
 800badc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bae0:	2200      	movs	r2, #0
 800bae2:	2300      	movs	r3, #0
 800bae4:	f7f4 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d034      	beq.n	800bb56 <_printf_float+0x27a>
 800baec:	4a37      	ldr	r2, [pc, #220]	; (800bbcc <_printf_float+0x2f0>)
 800baee:	2301      	movs	r3, #1
 800baf0:	4631      	mov	r1, r6
 800baf2:	4628      	mov	r0, r5
 800baf4:	47b8      	blx	r7
 800baf6:	3001      	adds	r0, #1
 800baf8:	f43f af51 	beq.w	800b99e <_printf_float+0xc2>
 800bafc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb00:	429a      	cmp	r2, r3
 800bb02:	db02      	blt.n	800bb0a <_printf_float+0x22e>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	07d8      	lsls	r0, r3, #31
 800bb08:	d510      	bpl.n	800bb2c <_printf_float+0x250>
 800bb0a:	ee18 3a10 	vmov	r3, s16
 800bb0e:	4652      	mov	r2, sl
 800bb10:	4631      	mov	r1, r6
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b8      	blx	r7
 800bb16:	3001      	adds	r0, #1
 800bb18:	f43f af41 	beq.w	800b99e <_printf_float+0xc2>
 800bb1c:	f04f 0800 	mov.w	r8, #0
 800bb20:	f104 091a 	add.w	r9, r4, #26
 800bb24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb26:	3b01      	subs	r3, #1
 800bb28:	4543      	cmp	r3, r8
 800bb2a:	dc09      	bgt.n	800bb40 <_printf_float+0x264>
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	079b      	lsls	r3, r3, #30
 800bb30:	f100 8105 	bmi.w	800bd3e <_printf_float+0x462>
 800bb34:	68e0      	ldr	r0, [r4, #12]
 800bb36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb38:	4298      	cmp	r0, r3
 800bb3a:	bfb8      	it	lt
 800bb3c:	4618      	movlt	r0, r3
 800bb3e:	e730      	b.n	800b9a2 <_printf_float+0xc6>
 800bb40:	2301      	movs	r3, #1
 800bb42:	464a      	mov	r2, r9
 800bb44:	4631      	mov	r1, r6
 800bb46:	4628      	mov	r0, r5
 800bb48:	47b8      	blx	r7
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	f43f af27 	beq.w	800b99e <_printf_float+0xc2>
 800bb50:	f108 0801 	add.w	r8, r8, #1
 800bb54:	e7e6      	b.n	800bb24 <_printf_float+0x248>
 800bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dc39      	bgt.n	800bbd0 <_printf_float+0x2f4>
 800bb5c:	4a1b      	ldr	r2, [pc, #108]	; (800bbcc <_printf_float+0x2f0>)
 800bb5e:	2301      	movs	r3, #1
 800bb60:	4631      	mov	r1, r6
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b8      	blx	r7
 800bb66:	3001      	adds	r0, #1
 800bb68:	f43f af19 	beq.w	800b99e <_printf_float+0xc2>
 800bb6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb70:	4313      	orrs	r3, r2
 800bb72:	d102      	bne.n	800bb7a <_printf_float+0x29e>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	07d9      	lsls	r1, r3, #31
 800bb78:	d5d8      	bpl.n	800bb2c <_printf_float+0x250>
 800bb7a:	ee18 3a10 	vmov	r3, s16
 800bb7e:	4652      	mov	r2, sl
 800bb80:	4631      	mov	r1, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	f43f af09 	beq.w	800b99e <_printf_float+0xc2>
 800bb8c:	f04f 0900 	mov.w	r9, #0
 800bb90:	f104 0a1a 	add.w	sl, r4, #26
 800bb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb96:	425b      	negs	r3, r3
 800bb98:	454b      	cmp	r3, r9
 800bb9a:	dc01      	bgt.n	800bba0 <_printf_float+0x2c4>
 800bb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb9e:	e792      	b.n	800bac6 <_printf_float+0x1ea>
 800bba0:	2301      	movs	r3, #1
 800bba2:	4652      	mov	r2, sl
 800bba4:	4631      	mov	r1, r6
 800bba6:	4628      	mov	r0, r5
 800bba8:	47b8      	blx	r7
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f43f aef7 	beq.w	800b99e <_printf_float+0xc2>
 800bbb0:	f109 0901 	add.w	r9, r9, #1
 800bbb4:	e7ee      	b.n	800bb94 <_printf_float+0x2b8>
 800bbb6:	bf00      	nop
 800bbb8:	7fefffff 	.word	0x7fefffff
 800bbbc:	0801f524 	.word	0x0801f524
 800bbc0:	0801f528 	.word	0x0801f528
 800bbc4:	0801f530 	.word	0x0801f530
 800bbc8:	0801f52c 	.word	0x0801f52c
 800bbcc:	0801f534 	.word	0x0801f534
 800bbd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	bfa8      	it	ge
 800bbd8:	461a      	movge	r2, r3
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	4691      	mov	r9, r2
 800bbde:	dc37      	bgt.n	800bc50 <_printf_float+0x374>
 800bbe0:	f04f 0b00 	mov.w	fp, #0
 800bbe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbe8:	f104 021a 	add.w	r2, r4, #26
 800bbec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbee:	9305      	str	r3, [sp, #20]
 800bbf0:	eba3 0309 	sub.w	r3, r3, r9
 800bbf4:	455b      	cmp	r3, fp
 800bbf6:	dc33      	bgt.n	800bc60 <_printf_float+0x384>
 800bbf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	db3b      	blt.n	800bc78 <_printf_float+0x39c>
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	07da      	lsls	r2, r3, #31
 800bc04:	d438      	bmi.n	800bc78 <_printf_float+0x39c>
 800bc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc08:	9a05      	ldr	r2, [sp, #20]
 800bc0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc0c:	1a9a      	subs	r2, r3, r2
 800bc0e:	eba3 0901 	sub.w	r9, r3, r1
 800bc12:	4591      	cmp	r9, r2
 800bc14:	bfa8      	it	ge
 800bc16:	4691      	movge	r9, r2
 800bc18:	f1b9 0f00 	cmp.w	r9, #0
 800bc1c:	dc35      	bgt.n	800bc8a <_printf_float+0x3ae>
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc26:	f104 0a1a 	add.w	sl, r4, #26
 800bc2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc2e:	1a9b      	subs	r3, r3, r2
 800bc30:	eba3 0309 	sub.w	r3, r3, r9
 800bc34:	4543      	cmp	r3, r8
 800bc36:	f77f af79 	ble.w	800bb2c <_printf_float+0x250>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	4652      	mov	r2, sl
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b8      	blx	r7
 800bc44:	3001      	adds	r0, #1
 800bc46:	f43f aeaa 	beq.w	800b99e <_printf_float+0xc2>
 800bc4a:	f108 0801 	add.w	r8, r8, #1
 800bc4e:	e7ec      	b.n	800bc2a <_printf_float+0x34e>
 800bc50:	4613      	mov	r3, r2
 800bc52:	4631      	mov	r1, r6
 800bc54:	4642      	mov	r2, r8
 800bc56:	4628      	mov	r0, r5
 800bc58:	47b8      	blx	r7
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	d1c0      	bne.n	800bbe0 <_printf_float+0x304>
 800bc5e:	e69e      	b.n	800b99e <_printf_float+0xc2>
 800bc60:	2301      	movs	r3, #1
 800bc62:	4631      	mov	r1, r6
 800bc64:	4628      	mov	r0, r5
 800bc66:	9205      	str	r2, [sp, #20]
 800bc68:	47b8      	blx	r7
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	f43f ae97 	beq.w	800b99e <_printf_float+0xc2>
 800bc70:	9a05      	ldr	r2, [sp, #20]
 800bc72:	f10b 0b01 	add.w	fp, fp, #1
 800bc76:	e7b9      	b.n	800bbec <_printf_float+0x310>
 800bc78:	ee18 3a10 	vmov	r3, s16
 800bc7c:	4652      	mov	r2, sl
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	d1be      	bne.n	800bc06 <_printf_float+0x32a>
 800bc88:	e689      	b.n	800b99e <_printf_float+0xc2>
 800bc8a:	9a05      	ldr	r2, [sp, #20]
 800bc8c:	464b      	mov	r3, r9
 800bc8e:	4442      	add	r2, r8
 800bc90:	4631      	mov	r1, r6
 800bc92:	4628      	mov	r0, r5
 800bc94:	47b8      	blx	r7
 800bc96:	3001      	adds	r0, #1
 800bc98:	d1c1      	bne.n	800bc1e <_printf_float+0x342>
 800bc9a:	e680      	b.n	800b99e <_printf_float+0xc2>
 800bc9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc9e:	2a01      	cmp	r2, #1
 800bca0:	dc01      	bgt.n	800bca6 <_printf_float+0x3ca>
 800bca2:	07db      	lsls	r3, r3, #31
 800bca4:	d538      	bpl.n	800bd18 <_printf_float+0x43c>
 800bca6:	2301      	movs	r3, #1
 800bca8:	4642      	mov	r2, r8
 800bcaa:	4631      	mov	r1, r6
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b8      	blx	r7
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	f43f ae74 	beq.w	800b99e <_printf_float+0xc2>
 800bcb6:	ee18 3a10 	vmov	r3, s16
 800bcba:	4652      	mov	r2, sl
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b8      	blx	r7
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f43f ae6b 	beq.w	800b99e <_printf_float+0xc2>
 800bcc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bccc:	2200      	movs	r2, #0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f7f4 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcd4:	b9d8      	cbnz	r0, 800bd0e <_printf_float+0x432>
 800bcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd8:	f108 0201 	add.w	r2, r8, #1
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	d10e      	bne.n	800bd06 <_printf_float+0x42a>
 800bce8:	e659      	b.n	800b99e <_printf_float+0xc2>
 800bcea:	2301      	movs	r3, #1
 800bcec:	4652      	mov	r2, sl
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	47b8      	blx	r7
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	f43f ae52 	beq.w	800b99e <_printf_float+0xc2>
 800bcfa:	f108 0801 	add.w	r8, r8, #1
 800bcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd00:	3b01      	subs	r3, #1
 800bd02:	4543      	cmp	r3, r8
 800bd04:	dcf1      	bgt.n	800bcea <_printf_float+0x40e>
 800bd06:	464b      	mov	r3, r9
 800bd08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd0c:	e6dc      	b.n	800bac8 <_printf_float+0x1ec>
 800bd0e:	f04f 0800 	mov.w	r8, #0
 800bd12:	f104 0a1a 	add.w	sl, r4, #26
 800bd16:	e7f2      	b.n	800bcfe <_printf_float+0x422>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	4642      	mov	r2, r8
 800bd1c:	e7df      	b.n	800bcde <_printf_float+0x402>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	464a      	mov	r2, r9
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f ae38 	beq.w	800b99e <_printf_float+0xc2>
 800bd2e:	f108 0801 	add.w	r8, r8, #1
 800bd32:	68e3      	ldr	r3, [r4, #12]
 800bd34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd36:	1a5b      	subs	r3, r3, r1
 800bd38:	4543      	cmp	r3, r8
 800bd3a:	dcf0      	bgt.n	800bd1e <_printf_float+0x442>
 800bd3c:	e6fa      	b.n	800bb34 <_printf_float+0x258>
 800bd3e:	f04f 0800 	mov.w	r8, #0
 800bd42:	f104 0919 	add.w	r9, r4, #25
 800bd46:	e7f4      	b.n	800bd32 <_printf_float+0x456>

0800bd48 <_printf_common>:
 800bd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd4c:	4616      	mov	r6, r2
 800bd4e:	4699      	mov	r9, r3
 800bd50:	688a      	ldr	r2, [r1, #8]
 800bd52:	690b      	ldr	r3, [r1, #16]
 800bd54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	bfb8      	it	lt
 800bd5c:	4613      	movlt	r3, r2
 800bd5e:	6033      	str	r3, [r6, #0]
 800bd60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd64:	4607      	mov	r7, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	b10a      	cbz	r2, 800bd6e <_printf_common+0x26>
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	6033      	str	r3, [r6, #0]
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	0699      	lsls	r1, r3, #26
 800bd72:	bf42      	ittt	mi
 800bd74:	6833      	ldrmi	r3, [r6, #0]
 800bd76:	3302      	addmi	r3, #2
 800bd78:	6033      	strmi	r3, [r6, #0]
 800bd7a:	6825      	ldr	r5, [r4, #0]
 800bd7c:	f015 0506 	ands.w	r5, r5, #6
 800bd80:	d106      	bne.n	800bd90 <_printf_common+0x48>
 800bd82:	f104 0a19 	add.w	sl, r4, #25
 800bd86:	68e3      	ldr	r3, [r4, #12]
 800bd88:	6832      	ldr	r2, [r6, #0]
 800bd8a:	1a9b      	subs	r3, r3, r2
 800bd8c:	42ab      	cmp	r3, r5
 800bd8e:	dc26      	bgt.n	800bdde <_printf_common+0x96>
 800bd90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd94:	1e13      	subs	r3, r2, #0
 800bd96:	6822      	ldr	r2, [r4, #0]
 800bd98:	bf18      	it	ne
 800bd9a:	2301      	movne	r3, #1
 800bd9c:	0692      	lsls	r2, r2, #26
 800bd9e:	d42b      	bmi.n	800bdf8 <_printf_common+0xb0>
 800bda0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bda4:	4649      	mov	r1, r9
 800bda6:	4638      	mov	r0, r7
 800bda8:	47c0      	blx	r8
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d01e      	beq.n	800bdec <_printf_common+0xa4>
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	68e5      	ldr	r5, [r4, #12]
 800bdb2:	6832      	ldr	r2, [r6, #0]
 800bdb4:	f003 0306 	and.w	r3, r3, #6
 800bdb8:	2b04      	cmp	r3, #4
 800bdba:	bf08      	it	eq
 800bdbc:	1aad      	subeq	r5, r5, r2
 800bdbe:	68a3      	ldr	r3, [r4, #8]
 800bdc0:	6922      	ldr	r2, [r4, #16]
 800bdc2:	bf0c      	ite	eq
 800bdc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc8:	2500      	movne	r5, #0
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	bfc4      	itt	gt
 800bdce:	1a9b      	subgt	r3, r3, r2
 800bdd0:	18ed      	addgt	r5, r5, r3
 800bdd2:	2600      	movs	r6, #0
 800bdd4:	341a      	adds	r4, #26
 800bdd6:	42b5      	cmp	r5, r6
 800bdd8:	d11a      	bne.n	800be10 <_printf_common+0xc8>
 800bdda:	2000      	movs	r0, #0
 800bddc:	e008      	b.n	800bdf0 <_printf_common+0xa8>
 800bdde:	2301      	movs	r3, #1
 800bde0:	4652      	mov	r2, sl
 800bde2:	4649      	mov	r1, r9
 800bde4:	4638      	mov	r0, r7
 800bde6:	47c0      	blx	r8
 800bde8:	3001      	adds	r0, #1
 800bdea:	d103      	bne.n	800bdf4 <_printf_common+0xac>
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf4:	3501      	adds	r5, #1
 800bdf6:	e7c6      	b.n	800bd86 <_printf_common+0x3e>
 800bdf8:	18e1      	adds	r1, r4, r3
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	2030      	movs	r0, #48	; 0x30
 800bdfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be02:	4422      	add	r2, r4
 800be04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be0c:	3302      	adds	r3, #2
 800be0e:	e7c7      	b.n	800bda0 <_printf_common+0x58>
 800be10:	2301      	movs	r3, #1
 800be12:	4622      	mov	r2, r4
 800be14:	4649      	mov	r1, r9
 800be16:	4638      	mov	r0, r7
 800be18:	47c0      	blx	r8
 800be1a:	3001      	adds	r0, #1
 800be1c:	d0e6      	beq.n	800bdec <_printf_common+0xa4>
 800be1e:	3601      	adds	r6, #1
 800be20:	e7d9      	b.n	800bdd6 <_printf_common+0x8e>
	...

0800be24 <_printf_i>:
 800be24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be28:	7e0f      	ldrb	r7, [r1, #24]
 800be2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be2c:	2f78      	cmp	r7, #120	; 0x78
 800be2e:	4691      	mov	r9, r2
 800be30:	4680      	mov	r8, r0
 800be32:	460c      	mov	r4, r1
 800be34:	469a      	mov	sl, r3
 800be36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be3a:	d807      	bhi.n	800be4c <_printf_i+0x28>
 800be3c:	2f62      	cmp	r7, #98	; 0x62
 800be3e:	d80a      	bhi.n	800be56 <_printf_i+0x32>
 800be40:	2f00      	cmp	r7, #0
 800be42:	f000 80d8 	beq.w	800bff6 <_printf_i+0x1d2>
 800be46:	2f58      	cmp	r7, #88	; 0x58
 800be48:	f000 80a3 	beq.w	800bf92 <_printf_i+0x16e>
 800be4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be54:	e03a      	b.n	800becc <_printf_i+0xa8>
 800be56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be5a:	2b15      	cmp	r3, #21
 800be5c:	d8f6      	bhi.n	800be4c <_printf_i+0x28>
 800be5e:	a101      	add	r1, pc, #4	; (adr r1, 800be64 <_printf_i+0x40>)
 800be60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be64:	0800bebd 	.word	0x0800bebd
 800be68:	0800bed1 	.word	0x0800bed1
 800be6c:	0800be4d 	.word	0x0800be4d
 800be70:	0800be4d 	.word	0x0800be4d
 800be74:	0800be4d 	.word	0x0800be4d
 800be78:	0800be4d 	.word	0x0800be4d
 800be7c:	0800bed1 	.word	0x0800bed1
 800be80:	0800be4d 	.word	0x0800be4d
 800be84:	0800be4d 	.word	0x0800be4d
 800be88:	0800be4d 	.word	0x0800be4d
 800be8c:	0800be4d 	.word	0x0800be4d
 800be90:	0800bfdd 	.word	0x0800bfdd
 800be94:	0800bf01 	.word	0x0800bf01
 800be98:	0800bfbf 	.word	0x0800bfbf
 800be9c:	0800be4d 	.word	0x0800be4d
 800bea0:	0800be4d 	.word	0x0800be4d
 800bea4:	0800bfff 	.word	0x0800bfff
 800bea8:	0800be4d 	.word	0x0800be4d
 800beac:	0800bf01 	.word	0x0800bf01
 800beb0:	0800be4d 	.word	0x0800be4d
 800beb4:	0800be4d 	.word	0x0800be4d
 800beb8:	0800bfc7 	.word	0x0800bfc7
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	1d1a      	adds	r2, r3, #4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	602a      	str	r2, [r5, #0]
 800bec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800becc:	2301      	movs	r3, #1
 800bece:	e0a3      	b.n	800c018 <_printf_i+0x1f4>
 800bed0:	6820      	ldr	r0, [r4, #0]
 800bed2:	6829      	ldr	r1, [r5, #0]
 800bed4:	0606      	lsls	r6, r0, #24
 800bed6:	f101 0304 	add.w	r3, r1, #4
 800beda:	d50a      	bpl.n	800bef2 <_printf_i+0xce>
 800bedc:	680e      	ldr	r6, [r1, #0]
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	2e00      	cmp	r6, #0
 800bee2:	da03      	bge.n	800beec <_printf_i+0xc8>
 800bee4:	232d      	movs	r3, #45	; 0x2d
 800bee6:	4276      	negs	r6, r6
 800bee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beec:	485e      	ldr	r0, [pc, #376]	; (800c068 <_printf_i+0x244>)
 800beee:	230a      	movs	r3, #10
 800bef0:	e019      	b.n	800bf26 <_printf_i+0x102>
 800bef2:	680e      	ldr	r6, [r1, #0]
 800bef4:	602b      	str	r3, [r5, #0]
 800bef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800befa:	bf18      	it	ne
 800befc:	b236      	sxthne	r6, r6
 800befe:	e7ef      	b.n	800bee0 <_printf_i+0xbc>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	6820      	ldr	r0, [r4, #0]
 800bf04:	1d19      	adds	r1, r3, #4
 800bf06:	6029      	str	r1, [r5, #0]
 800bf08:	0601      	lsls	r1, r0, #24
 800bf0a:	d501      	bpl.n	800bf10 <_printf_i+0xec>
 800bf0c:	681e      	ldr	r6, [r3, #0]
 800bf0e:	e002      	b.n	800bf16 <_printf_i+0xf2>
 800bf10:	0646      	lsls	r6, r0, #25
 800bf12:	d5fb      	bpl.n	800bf0c <_printf_i+0xe8>
 800bf14:	881e      	ldrh	r6, [r3, #0]
 800bf16:	4854      	ldr	r0, [pc, #336]	; (800c068 <_printf_i+0x244>)
 800bf18:	2f6f      	cmp	r7, #111	; 0x6f
 800bf1a:	bf0c      	ite	eq
 800bf1c:	2308      	moveq	r3, #8
 800bf1e:	230a      	movne	r3, #10
 800bf20:	2100      	movs	r1, #0
 800bf22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf26:	6865      	ldr	r5, [r4, #4]
 800bf28:	60a5      	str	r5, [r4, #8]
 800bf2a:	2d00      	cmp	r5, #0
 800bf2c:	bfa2      	ittt	ge
 800bf2e:	6821      	ldrge	r1, [r4, #0]
 800bf30:	f021 0104 	bicge.w	r1, r1, #4
 800bf34:	6021      	strge	r1, [r4, #0]
 800bf36:	b90e      	cbnz	r6, 800bf3c <_printf_i+0x118>
 800bf38:	2d00      	cmp	r5, #0
 800bf3a:	d04d      	beq.n	800bfd8 <_printf_i+0x1b4>
 800bf3c:	4615      	mov	r5, r2
 800bf3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf42:	fb03 6711 	mls	r7, r3, r1, r6
 800bf46:	5dc7      	ldrb	r7, [r0, r7]
 800bf48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf4c:	4637      	mov	r7, r6
 800bf4e:	42bb      	cmp	r3, r7
 800bf50:	460e      	mov	r6, r1
 800bf52:	d9f4      	bls.n	800bf3e <_printf_i+0x11a>
 800bf54:	2b08      	cmp	r3, #8
 800bf56:	d10b      	bne.n	800bf70 <_printf_i+0x14c>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	07de      	lsls	r6, r3, #31
 800bf5c:	d508      	bpl.n	800bf70 <_printf_i+0x14c>
 800bf5e:	6923      	ldr	r3, [r4, #16]
 800bf60:	6861      	ldr	r1, [r4, #4]
 800bf62:	4299      	cmp	r1, r3
 800bf64:	bfde      	ittt	le
 800bf66:	2330      	movle	r3, #48	; 0x30
 800bf68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf70:	1b52      	subs	r2, r2, r5
 800bf72:	6122      	str	r2, [r4, #16]
 800bf74:	f8cd a000 	str.w	sl, [sp]
 800bf78:	464b      	mov	r3, r9
 800bf7a:	aa03      	add	r2, sp, #12
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	4640      	mov	r0, r8
 800bf80:	f7ff fee2 	bl	800bd48 <_printf_common>
 800bf84:	3001      	adds	r0, #1
 800bf86:	d14c      	bne.n	800c022 <_printf_i+0x1fe>
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8c:	b004      	add	sp, #16
 800bf8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf92:	4835      	ldr	r0, [pc, #212]	; (800c068 <_printf_i+0x244>)
 800bf94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf98:	6829      	ldr	r1, [r5, #0]
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfa0:	6029      	str	r1, [r5, #0]
 800bfa2:	061d      	lsls	r5, r3, #24
 800bfa4:	d514      	bpl.n	800bfd0 <_printf_i+0x1ac>
 800bfa6:	07df      	lsls	r7, r3, #31
 800bfa8:	bf44      	itt	mi
 800bfaa:	f043 0320 	orrmi.w	r3, r3, #32
 800bfae:	6023      	strmi	r3, [r4, #0]
 800bfb0:	b91e      	cbnz	r6, 800bfba <_printf_i+0x196>
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	f023 0320 	bic.w	r3, r3, #32
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	2310      	movs	r3, #16
 800bfbc:	e7b0      	b.n	800bf20 <_printf_i+0xfc>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f043 0320 	orr.w	r3, r3, #32
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	2378      	movs	r3, #120	; 0x78
 800bfc8:	4828      	ldr	r0, [pc, #160]	; (800c06c <_printf_i+0x248>)
 800bfca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfce:	e7e3      	b.n	800bf98 <_printf_i+0x174>
 800bfd0:	0659      	lsls	r1, r3, #25
 800bfd2:	bf48      	it	mi
 800bfd4:	b2b6      	uxthmi	r6, r6
 800bfd6:	e7e6      	b.n	800bfa6 <_printf_i+0x182>
 800bfd8:	4615      	mov	r5, r2
 800bfda:	e7bb      	b.n	800bf54 <_printf_i+0x130>
 800bfdc:	682b      	ldr	r3, [r5, #0]
 800bfde:	6826      	ldr	r6, [r4, #0]
 800bfe0:	6961      	ldr	r1, [r4, #20]
 800bfe2:	1d18      	adds	r0, r3, #4
 800bfe4:	6028      	str	r0, [r5, #0]
 800bfe6:	0635      	lsls	r5, r6, #24
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	d501      	bpl.n	800bff0 <_printf_i+0x1cc>
 800bfec:	6019      	str	r1, [r3, #0]
 800bfee:	e002      	b.n	800bff6 <_printf_i+0x1d2>
 800bff0:	0670      	lsls	r0, r6, #25
 800bff2:	d5fb      	bpl.n	800bfec <_printf_i+0x1c8>
 800bff4:	8019      	strh	r1, [r3, #0]
 800bff6:	2300      	movs	r3, #0
 800bff8:	6123      	str	r3, [r4, #16]
 800bffa:	4615      	mov	r5, r2
 800bffc:	e7ba      	b.n	800bf74 <_printf_i+0x150>
 800bffe:	682b      	ldr	r3, [r5, #0]
 800c000:	1d1a      	adds	r2, r3, #4
 800c002:	602a      	str	r2, [r5, #0]
 800c004:	681d      	ldr	r5, [r3, #0]
 800c006:	6862      	ldr	r2, [r4, #4]
 800c008:	2100      	movs	r1, #0
 800c00a:	4628      	mov	r0, r5
 800c00c:	f7f4 f8e8 	bl	80001e0 <memchr>
 800c010:	b108      	cbz	r0, 800c016 <_printf_i+0x1f2>
 800c012:	1b40      	subs	r0, r0, r5
 800c014:	6060      	str	r0, [r4, #4]
 800c016:	6863      	ldr	r3, [r4, #4]
 800c018:	6123      	str	r3, [r4, #16]
 800c01a:	2300      	movs	r3, #0
 800c01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c020:	e7a8      	b.n	800bf74 <_printf_i+0x150>
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	462a      	mov	r2, r5
 800c026:	4649      	mov	r1, r9
 800c028:	4640      	mov	r0, r8
 800c02a:	47d0      	blx	sl
 800c02c:	3001      	adds	r0, #1
 800c02e:	d0ab      	beq.n	800bf88 <_printf_i+0x164>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	079b      	lsls	r3, r3, #30
 800c034:	d413      	bmi.n	800c05e <_printf_i+0x23a>
 800c036:	68e0      	ldr	r0, [r4, #12]
 800c038:	9b03      	ldr	r3, [sp, #12]
 800c03a:	4298      	cmp	r0, r3
 800c03c:	bfb8      	it	lt
 800c03e:	4618      	movlt	r0, r3
 800c040:	e7a4      	b.n	800bf8c <_printf_i+0x168>
 800c042:	2301      	movs	r3, #1
 800c044:	4632      	mov	r2, r6
 800c046:	4649      	mov	r1, r9
 800c048:	4640      	mov	r0, r8
 800c04a:	47d0      	blx	sl
 800c04c:	3001      	adds	r0, #1
 800c04e:	d09b      	beq.n	800bf88 <_printf_i+0x164>
 800c050:	3501      	adds	r5, #1
 800c052:	68e3      	ldr	r3, [r4, #12]
 800c054:	9903      	ldr	r1, [sp, #12]
 800c056:	1a5b      	subs	r3, r3, r1
 800c058:	42ab      	cmp	r3, r5
 800c05a:	dcf2      	bgt.n	800c042 <_printf_i+0x21e>
 800c05c:	e7eb      	b.n	800c036 <_printf_i+0x212>
 800c05e:	2500      	movs	r5, #0
 800c060:	f104 0619 	add.w	r6, r4, #25
 800c064:	e7f5      	b.n	800c052 <_printf_i+0x22e>
 800c066:	bf00      	nop
 800c068:	0801f536 	.word	0x0801f536
 800c06c:	0801f547 	.word	0x0801f547

0800c070 <_scanf_float>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	b087      	sub	sp, #28
 800c076:	4617      	mov	r7, r2
 800c078:	9303      	str	r3, [sp, #12]
 800c07a:	688b      	ldr	r3, [r1, #8]
 800c07c:	1e5a      	subs	r2, r3, #1
 800c07e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c082:	bf83      	ittte	hi
 800c084:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c088:	195b      	addhi	r3, r3, r5
 800c08a:	9302      	strhi	r3, [sp, #8]
 800c08c:	2300      	movls	r3, #0
 800c08e:	bf86      	itte	hi
 800c090:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c094:	608b      	strhi	r3, [r1, #8]
 800c096:	9302      	strls	r3, [sp, #8]
 800c098:	680b      	ldr	r3, [r1, #0]
 800c09a:	468b      	mov	fp, r1
 800c09c:	2500      	movs	r5, #0
 800c09e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c0a2:	f84b 3b1c 	str.w	r3, [fp], #28
 800c0a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	460c      	mov	r4, r1
 800c0ae:	465e      	mov	r6, fp
 800c0b0:	46aa      	mov	sl, r5
 800c0b2:	46a9      	mov	r9, r5
 800c0b4:	9501      	str	r5, [sp, #4]
 800c0b6:	68a2      	ldr	r2, [r4, #8]
 800c0b8:	b152      	cbz	r2, 800c0d0 <_scanf_float+0x60>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	2b4e      	cmp	r3, #78	; 0x4e
 800c0c0:	d864      	bhi.n	800c18c <_scanf_float+0x11c>
 800c0c2:	2b40      	cmp	r3, #64	; 0x40
 800c0c4:	d83c      	bhi.n	800c140 <_scanf_float+0xd0>
 800c0c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c0ca:	b2c8      	uxtb	r0, r1
 800c0cc:	280e      	cmp	r0, #14
 800c0ce:	d93a      	bls.n	800c146 <_scanf_float+0xd6>
 800c0d0:	f1b9 0f00 	cmp.w	r9, #0
 800c0d4:	d003      	beq.n	800c0de <_scanf_float+0x6e>
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0e2:	f1ba 0f01 	cmp.w	sl, #1
 800c0e6:	f200 8113 	bhi.w	800c310 <_scanf_float+0x2a0>
 800c0ea:	455e      	cmp	r6, fp
 800c0ec:	f200 8105 	bhi.w	800c2fa <_scanf_float+0x28a>
 800c0f0:	2501      	movs	r5, #1
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	b007      	add	sp, #28
 800c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c0fe:	2a0d      	cmp	r2, #13
 800c100:	d8e6      	bhi.n	800c0d0 <_scanf_float+0x60>
 800c102:	a101      	add	r1, pc, #4	; (adr r1, 800c108 <_scanf_float+0x98>)
 800c104:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c108:	0800c247 	.word	0x0800c247
 800c10c:	0800c0d1 	.word	0x0800c0d1
 800c110:	0800c0d1 	.word	0x0800c0d1
 800c114:	0800c0d1 	.word	0x0800c0d1
 800c118:	0800c2a7 	.word	0x0800c2a7
 800c11c:	0800c27f 	.word	0x0800c27f
 800c120:	0800c0d1 	.word	0x0800c0d1
 800c124:	0800c0d1 	.word	0x0800c0d1
 800c128:	0800c255 	.word	0x0800c255
 800c12c:	0800c0d1 	.word	0x0800c0d1
 800c130:	0800c0d1 	.word	0x0800c0d1
 800c134:	0800c0d1 	.word	0x0800c0d1
 800c138:	0800c0d1 	.word	0x0800c0d1
 800c13c:	0800c20d 	.word	0x0800c20d
 800c140:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c144:	e7db      	b.n	800c0fe <_scanf_float+0x8e>
 800c146:	290e      	cmp	r1, #14
 800c148:	d8c2      	bhi.n	800c0d0 <_scanf_float+0x60>
 800c14a:	a001      	add	r0, pc, #4	; (adr r0, 800c150 <_scanf_float+0xe0>)
 800c14c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c150:	0800c1ff 	.word	0x0800c1ff
 800c154:	0800c0d1 	.word	0x0800c0d1
 800c158:	0800c1ff 	.word	0x0800c1ff
 800c15c:	0800c293 	.word	0x0800c293
 800c160:	0800c0d1 	.word	0x0800c0d1
 800c164:	0800c1ad 	.word	0x0800c1ad
 800c168:	0800c1e9 	.word	0x0800c1e9
 800c16c:	0800c1e9 	.word	0x0800c1e9
 800c170:	0800c1e9 	.word	0x0800c1e9
 800c174:	0800c1e9 	.word	0x0800c1e9
 800c178:	0800c1e9 	.word	0x0800c1e9
 800c17c:	0800c1e9 	.word	0x0800c1e9
 800c180:	0800c1e9 	.word	0x0800c1e9
 800c184:	0800c1e9 	.word	0x0800c1e9
 800c188:	0800c1e9 	.word	0x0800c1e9
 800c18c:	2b6e      	cmp	r3, #110	; 0x6e
 800c18e:	d809      	bhi.n	800c1a4 <_scanf_float+0x134>
 800c190:	2b60      	cmp	r3, #96	; 0x60
 800c192:	d8b2      	bhi.n	800c0fa <_scanf_float+0x8a>
 800c194:	2b54      	cmp	r3, #84	; 0x54
 800c196:	d077      	beq.n	800c288 <_scanf_float+0x218>
 800c198:	2b59      	cmp	r3, #89	; 0x59
 800c19a:	d199      	bne.n	800c0d0 <_scanf_float+0x60>
 800c19c:	2d07      	cmp	r5, #7
 800c19e:	d197      	bne.n	800c0d0 <_scanf_float+0x60>
 800c1a0:	2508      	movs	r5, #8
 800c1a2:	e029      	b.n	800c1f8 <_scanf_float+0x188>
 800c1a4:	2b74      	cmp	r3, #116	; 0x74
 800c1a6:	d06f      	beq.n	800c288 <_scanf_float+0x218>
 800c1a8:	2b79      	cmp	r3, #121	; 0x79
 800c1aa:	e7f6      	b.n	800c19a <_scanf_float+0x12a>
 800c1ac:	6821      	ldr	r1, [r4, #0]
 800c1ae:	05c8      	lsls	r0, r1, #23
 800c1b0:	d51a      	bpl.n	800c1e8 <_scanf_float+0x178>
 800c1b2:	9b02      	ldr	r3, [sp, #8]
 800c1b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c1b8:	6021      	str	r1, [r4, #0]
 800c1ba:	f109 0901 	add.w	r9, r9, #1
 800c1be:	b11b      	cbz	r3, 800c1c8 <_scanf_float+0x158>
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	3201      	adds	r2, #1
 800c1c4:	9302      	str	r3, [sp, #8]
 800c1c6:	60a2      	str	r2, [r4, #8]
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	60a3      	str	r3, [r4, #8]
 800c1ce:	6923      	ldr	r3, [r4, #16]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	6123      	str	r3, [r4, #16]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	607b      	str	r3, [r7, #4]
 800c1dc:	f340 8084 	ble.w	800c2e8 <_scanf_float+0x278>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	e766      	b.n	800c0b6 <_scanf_float+0x46>
 800c1e8:	eb1a 0f05 	cmn.w	sl, r5
 800c1ec:	f47f af70 	bne.w	800c0d0 <_scanf_float+0x60>
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c1f6:	6022      	str	r2, [r4, #0]
 800c1f8:	f806 3b01 	strb.w	r3, [r6], #1
 800c1fc:	e7e4      	b.n	800c1c8 <_scanf_float+0x158>
 800c1fe:	6822      	ldr	r2, [r4, #0]
 800c200:	0610      	lsls	r0, r2, #24
 800c202:	f57f af65 	bpl.w	800c0d0 <_scanf_float+0x60>
 800c206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c20a:	e7f4      	b.n	800c1f6 <_scanf_float+0x186>
 800c20c:	f1ba 0f00 	cmp.w	sl, #0
 800c210:	d10e      	bne.n	800c230 <_scanf_float+0x1c0>
 800c212:	f1b9 0f00 	cmp.w	r9, #0
 800c216:	d10e      	bne.n	800c236 <_scanf_float+0x1c6>
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c21e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c222:	d108      	bne.n	800c236 <_scanf_float+0x1c6>
 800c224:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c228:	6022      	str	r2, [r4, #0]
 800c22a:	f04f 0a01 	mov.w	sl, #1
 800c22e:	e7e3      	b.n	800c1f8 <_scanf_float+0x188>
 800c230:	f1ba 0f02 	cmp.w	sl, #2
 800c234:	d055      	beq.n	800c2e2 <_scanf_float+0x272>
 800c236:	2d01      	cmp	r5, #1
 800c238:	d002      	beq.n	800c240 <_scanf_float+0x1d0>
 800c23a:	2d04      	cmp	r5, #4
 800c23c:	f47f af48 	bne.w	800c0d0 <_scanf_float+0x60>
 800c240:	3501      	adds	r5, #1
 800c242:	b2ed      	uxtb	r5, r5
 800c244:	e7d8      	b.n	800c1f8 <_scanf_float+0x188>
 800c246:	f1ba 0f01 	cmp.w	sl, #1
 800c24a:	f47f af41 	bne.w	800c0d0 <_scanf_float+0x60>
 800c24e:	f04f 0a02 	mov.w	sl, #2
 800c252:	e7d1      	b.n	800c1f8 <_scanf_float+0x188>
 800c254:	b97d      	cbnz	r5, 800c276 <_scanf_float+0x206>
 800c256:	f1b9 0f00 	cmp.w	r9, #0
 800c25a:	f47f af3c 	bne.w	800c0d6 <_scanf_float+0x66>
 800c25e:	6822      	ldr	r2, [r4, #0]
 800c260:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c264:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c268:	f47f af39 	bne.w	800c0de <_scanf_float+0x6e>
 800c26c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c270:	6022      	str	r2, [r4, #0]
 800c272:	2501      	movs	r5, #1
 800c274:	e7c0      	b.n	800c1f8 <_scanf_float+0x188>
 800c276:	2d03      	cmp	r5, #3
 800c278:	d0e2      	beq.n	800c240 <_scanf_float+0x1d0>
 800c27a:	2d05      	cmp	r5, #5
 800c27c:	e7de      	b.n	800c23c <_scanf_float+0x1cc>
 800c27e:	2d02      	cmp	r5, #2
 800c280:	f47f af26 	bne.w	800c0d0 <_scanf_float+0x60>
 800c284:	2503      	movs	r5, #3
 800c286:	e7b7      	b.n	800c1f8 <_scanf_float+0x188>
 800c288:	2d06      	cmp	r5, #6
 800c28a:	f47f af21 	bne.w	800c0d0 <_scanf_float+0x60>
 800c28e:	2507      	movs	r5, #7
 800c290:	e7b2      	b.n	800c1f8 <_scanf_float+0x188>
 800c292:	6822      	ldr	r2, [r4, #0]
 800c294:	0591      	lsls	r1, r2, #22
 800c296:	f57f af1b 	bpl.w	800c0d0 <_scanf_float+0x60>
 800c29a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c29e:	6022      	str	r2, [r4, #0]
 800c2a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2a4:	e7a8      	b.n	800c1f8 <_scanf_float+0x188>
 800c2a6:	6822      	ldr	r2, [r4, #0]
 800c2a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c2ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c2b0:	d006      	beq.n	800c2c0 <_scanf_float+0x250>
 800c2b2:	0550      	lsls	r0, r2, #21
 800c2b4:	f57f af0c 	bpl.w	800c0d0 <_scanf_float+0x60>
 800c2b8:	f1b9 0f00 	cmp.w	r9, #0
 800c2bc:	f43f af0f 	beq.w	800c0de <_scanf_float+0x6e>
 800c2c0:	0591      	lsls	r1, r2, #22
 800c2c2:	bf58      	it	pl
 800c2c4:	9901      	ldrpl	r1, [sp, #4]
 800c2c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2ca:	bf58      	it	pl
 800c2cc:	eba9 0101 	subpl.w	r1, r9, r1
 800c2d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c2d4:	bf58      	it	pl
 800c2d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2da:	6022      	str	r2, [r4, #0]
 800c2dc:	f04f 0900 	mov.w	r9, #0
 800c2e0:	e78a      	b.n	800c1f8 <_scanf_float+0x188>
 800c2e2:	f04f 0a03 	mov.w	sl, #3
 800c2e6:	e787      	b.n	800c1f8 <_scanf_float+0x188>
 800c2e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	4798      	blx	r3
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f43f aedf 	beq.w	800c0b6 <_scanf_float+0x46>
 800c2f8:	e6ea      	b.n	800c0d0 <_scanf_float+0x60>
 800c2fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c302:	463a      	mov	r2, r7
 800c304:	4640      	mov	r0, r8
 800c306:	4798      	blx	r3
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	6123      	str	r3, [r4, #16]
 800c30e:	e6ec      	b.n	800c0ea <_scanf_float+0x7a>
 800c310:	1e6b      	subs	r3, r5, #1
 800c312:	2b06      	cmp	r3, #6
 800c314:	d825      	bhi.n	800c362 <_scanf_float+0x2f2>
 800c316:	2d02      	cmp	r5, #2
 800c318:	d836      	bhi.n	800c388 <_scanf_float+0x318>
 800c31a:	455e      	cmp	r6, fp
 800c31c:	f67f aee8 	bls.w	800c0f0 <_scanf_float+0x80>
 800c320:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c324:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c328:	463a      	mov	r2, r7
 800c32a:	4640      	mov	r0, r8
 800c32c:	4798      	blx	r3
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	3b01      	subs	r3, #1
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	e7f1      	b.n	800c31a <_scanf_float+0x2aa>
 800c336:	9802      	ldr	r0, [sp, #8]
 800c338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c33c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c340:	9002      	str	r0, [sp, #8]
 800c342:	463a      	mov	r2, r7
 800c344:	4640      	mov	r0, r8
 800c346:	4798      	blx	r3
 800c348:	6923      	ldr	r3, [r4, #16]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	6123      	str	r3, [r4, #16]
 800c34e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c352:	fa5f fa8a 	uxtb.w	sl, sl
 800c356:	f1ba 0f02 	cmp.w	sl, #2
 800c35a:	d1ec      	bne.n	800c336 <_scanf_float+0x2c6>
 800c35c:	3d03      	subs	r5, #3
 800c35e:	b2ed      	uxtb	r5, r5
 800c360:	1b76      	subs	r6, r6, r5
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	05da      	lsls	r2, r3, #23
 800c366:	d52f      	bpl.n	800c3c8 <_scanf_float+0x358>
 800c368:	055b      	lsls	r3, r3, #21
 800c36a:	d510      	bpl.n	800c38e <_scanf_float+0x31e>
 800c36c:	455e      	cmp	r6, fp
 800c36e:	f67f aebf 	bls.w	800c0f0 <_scanf_float+0x80>
 800c372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c37a:	463a      	mov	r2, r7
 800c37c:	4640      	mov	r0, r8
 800c37e:	4798      	blx	r3
 800c380:	6923      	ldr	r3, [r4, #16]
 800c382:	3b01      	subs	r3, #1
 800c384:	6123      	str	r3, [r4, #16]
 800c386:	e7f1      	b.n	800c36c <_scanf_float+0x2fc>
 800c388:	46aa      	mov	sl, r5
 800c38a:	9602      	str	r6, [sp, #8]
 800c38c:	e7df      	b.n	800c34e <_scanf_float+0x2de>
 800c38e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	2965      	cmp	r1, #101	; 0x65
 800c396:	f103 33ff 	add.w	r3, r3, #4294967295
 800c39a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c39e:	6123      	str	r3, [r4, #16]
 800c3a0:	d00c      	beq.n	800c3bc <_scanf_float+0x34c>
 800c3a2:	2945      	cmp	r1, #69	; 0x45
 800c3a4:	d00a      	beq.n	800c3bc <_scanf_float+0x34c>
 800c3a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3aa:	463a      	mov	r2, r7
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	4798      	blx	r3
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	1eb5      	subs	r5, r6, #2
 800c3ba:	6123      	str	r3, [r4, #16]
 800c3bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3c0:	463a      	mov	r2, r7
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	4798      	blx	r3
 800c3c6:	462e      	mov	r6, r5
 800c3c8:	6825      	ldr	r5, [r4, #0]
 800c3ca:	f015 0510 	ands.w	r5, r5, #16
 800c3ce:	d159      	bne.n	800c484 <_scanf_float+0x414>
 800c3d0:	7035      	strb	r5, [r6, #0]
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c3d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3dc:	d11b      	bne.n	800c416 <_scanf_float+0x3a6>
 800c3de:	9b01      	ldr	r3, [sp, #4]
 800c3e0:	454b      	cmp	r3, r9
 800c3e2:	eba3 0209 	sub.w	r2, r3, r9
 800c3e6:	d123      	bne.n	800c430 <_scanf_float+0x3c0>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4659      	mov	r1, fp
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	f000 fecd 	bl	800d18c <_strtod_r>
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	9b03      	ldr	r3, [sp, #12]
 800c3f6:	f012 0f02 	tst.w	r2, #2
 800c3fa:	ec57 6b10 	vmov	r6, r7, d0
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	d021      	beq.n	800c446 <_scanf_float+0x3d6>
 800c402:	9903      	ldr	r1, [sp, #12]
 800c404:	1d1a      	adds	r2, r3, #4
 800c406:	600a      	str	r2, [r1, #0]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	e9c3 6700 	strd	r6, r7, [r3]
 800c40e:	68e3      	ldr	r3, [r4, #12]
 800c410:	3301      	adds	r3, #1
 800c412:	60e3      	str	r3, [r4, #12]
 800c414:	e66d      	b.n	800c0f2 <_scanf_float+0x82>
 800c416:	9b04      	ldr	r3, [sp, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d0e5      	beq.n	800c3e8 <_scanf_float+0x378>
 800c41c:	9905      	ldr	r1, [sp, #20]
 800c41e:	230a      	movs	r3, #10
 800c420:	462a      	mov	r2, r5
 800c422:	3101      	adds	r1, #1
 800c424:	4640      	mov	r0, r8
 800c426:	f000 ff39 	bl	800d29c <_strtol_r>
 800c42a:	9b04      	ldr	r3, [sp, #16]
 800c42c:	9e05      	ldr	r6, [sp, #20]
 800c42e:	1ac2      	subs	r2, r0, r3
 800c430:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c434:	429e      	cmp	r6, r3
 800c436:	bf28      	it	cs
 800c438:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c43c:	4912      	ldr	r1, [pc, #72]	; (800c488 <_scanf_float+0x418>)
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 f860 	bl	800c504 <siprintf>
 800c444:	e7d0      	b.n	800c3e8 <_scanf_float+0x378>
 800c446:	9903      	ldr	r1, [sp, #12]
 800c448:	f012 0f04 	tst.w	r2, #4
 800c44c:	f103 0204 	add.w	r2, r3, #4
 800c450:	600a      	str	r2, [r1, #0]
 800c452:	d1d9      	bne.n	800c408 <_scanf_float+0x398>
 800c454:	f8d3 8000 	ldr.w	r8, [r3]
 800c458:	ee10 2a10 	vmov	r2, s0
 800c45c:	ee10 0a10 	vmov	r0, s0
 800c460:	463b      	mov	r3, r7
 800c462:	4639      	mov	r1, r7
 800c464:	f7f4 fb62 	bl	8000b2c <__aeabi_dcmpun>
 800c468:	b128      	cbz	r0, 800c476 <_scanf_float+0x406>
 800c46a:	4808      	ldr	r0, [pc, #32]	; (800c48c <_scanf_float+0x41c>)
 800c46c:	f000 f810 	bl	800c490 <nanf>
 800c470:	ed88 0a00 	vstr	s0, [r8]
 800c474:	e7cb      	b.n	800c40e <_scanf_float+0x39e>
 800c476:	4630      	mov	r0, r6
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f4 fbb5 	bl	8000be8 <__aeabi_d2f>
 800c47e:	f8c8 0000 	str.w	r0, [r8]
 800c482:	e7c4      	b.n	800c40e <_scanf_float+0x39e>
 800c484:	2500      	movs	r5, #0
 800c486:	e634      	b.n	800c0f2 <_scanf_float+0x82>
 800c488:	0801f558 	.word	0x0801f558
 800c48c:	0801f960 	.word	0x0801f960

0800c490 <nanf>:
 800c490:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c498 <nanf+0x8>
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	7fc00000 	.word	0x7fc00000

0800c49c <sniprintf>:
 800c49c:	b40c      	push	{r2, r3}
 800c49e:	b530      	push	{r4, r5, lr}
 800c4a0:	4b17      	ldr	r3, [pc, #92]	; (800c500 <sniprintf+0x64>)
 800c4a2:	1e0c      	subs	r4, r1, #0
 800c4a4:	681d      	ldr	r5, [r3, #0]
 800c4a6:	b09d      	sub	sp, #116	; 0x74
 800c4a8:	da08      	bge.n	800c4bc <sniprintf+0x20>
 800c4aa:	238b      	movs	r3, #139	; 0x8b
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b2:	b01d      	add	sp, #116	; 0x74
 800c4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4b8:	b002      	add	sp, #8
 800c4ba:	4770      	bx	lr
 800c4bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c4c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c4c4:	bf14      	ite	ne
 800c4c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c4ca:	4623      	moveq	r3, r4
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	9307      	str	r3, [sp, #28]
 800c4d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4d4:	9002      	str	r0, [sp, #8]
 800c4d6:	9006      	str	r0, [sp, #24]
 800c4d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c4de:	ab21      	add	r3, sp, #132	; 0x84
 800c4e0:	a902      	add	r1, sp, #8
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	f002 ff03 	bl	800f2f0 <_svfiprintf_r>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	bfbc      	itt	lt
 800c4ee:	238b      	movlt	r3, #139	; 0x8b
 800c4f0:	602b      	strlt	r3, [r5, #0]
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	d0dd      	beq.n	800c4b2 <sniprintf+0x16>
 800c4f6:	9b02      	ldr	r3, [sp, #8]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	701a      	strb	r2, [r3, #0]
 800c4fc:	e7d9      	b.n	800c4b2 <sniprintf+0x16>
 800c4fe:	bf00      	nop
 800c500:	2000007c 	.word	0x2000007c

0800c504 <siprintf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	b500      	push	{lr}
 800c508:	b09c      	sub	sp, #112	; 0x70
 800c50a:	ab1d      	add	r3, sp, #116	; 0x74
 800c50c:	9002      	str	r0, [sp, #8]
 800c50e:	9006      	str	r0, [sp, #24]
 800c510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c514:	4809      	ldr	r0, [pc, #36]	; (800c53c <siprintf+0x38>)
 800c516:	9107      	str	r1, [sp, #28]
 800c518:	9104      	str	r1, [sp, #16]
 800c51a:	4909      	ldr	r1, [pc, #36]	; (800c540 <siprintf+0x3c>)
 800c51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c520:	9105      	str	r1, [sp, #20]
 800c522:	6800      	ldr	r0, [r0, #0]
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	a902      	add	r1, sp, #8
 800c528:	f002 fee2 	bl	800f2f0 <_svfiprintf_r>
 800c52c:	9b02      	ldr	r3, [sp, #8]
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	b01c      	add	sp, #112	; 0x70
 800c534:	f85d eb04 	ldr.w	lr, [sp], #4
 800c538:	b003      	add	sp, #12
 800c53a:	4770      	bx	lr
 800c53c:	2000007c 	.word	0x2000007c
 800c540:	ffff0208 	.word	0xffff0208

0800c544 <sulp>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4604      	mov	r4, r0
 800c548:	460d      	mov	r5, r1
 800c54a:	ec45 4b10 	vmov	d0, r4, r5
 800c54e:	4616      	mov	r6, r2
 800c550:	f002 fc2c 	bl	800edac <__ulp>
 800c554:	ec51 0b10 	vmov	r0, r1, d0
 800c558:	b17e      	cbz	r6, 800c57a <sulp+0x36>
 800c55a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c55e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c562:	2b00      	cmp	r3, #0
 800c564:	dd09      	ble.n	800c57a <sulp+0x36>
 800c566:	051b      	lsls	r3, r3, #20
 800c568:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c56c:	2400      	movs	r4, #0
 800c56e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c572:	4622      	mov	r2, r4
 800c574:	462b      	mov	r3, r5
 800c576:	f7f4 f83f 	bl	80005f8 <__aeabi_dmul>
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	0000      	movs	r0, r0
	...

0800c580 <_strtod_l>:
 800c580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c584:	ed2d 8b02 	vpush	{d8}
 800c588:	b09d      	sub	sp, #116	; 0x74
 800c58a:	461f      	mov	r7, r3
 800c58c:	2300      	movs	r3, #0
 800c58e:	9318      	str	r3, [sp, #96]	; 0x60
 800c590:	4ba2      	ldr	r3, [pc, #648]	; (800c81c <_strtod_l+0x29c>)
 800c592:	9213      	str	r2, [sp, #76]	; 0x4c
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	9305      	str	r3, [sp, #20]
 800c598:	4604      	mov	r4, r0
 800c59a:	4618      	mov	r0, r3
 800c59c:	4688      	mov	r8, r1
 800c59e:	f7f3 fe17 	bl	80001d0 <strlen>
 800c5a2:	f04f 0a00 	mov.w	sl, #0
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	f04f 0b00 	mov.w	fp, #0
 800c5ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5b2:	781a      	ldrb	r2, [r3, #0]
 800c5b4:	2a2b      	cmp	r2, #43	; 0x2b
 800c5b6:	d04e      	beq.n	800c656 <_strtod_l+0xd6>
 800c5b8:	d83b      	bhi.n	800c632 <_strtod_l+0xb2>
 800c5ba:	2a0d      	cmp	r2, #13
 800c5bc:	d834      	bhi.n	800c628 <_strtod_l+0xa8>
 800c5be:	2a08      	cmp	r2, #8
 800c5c0:	d834      	bhi.n	800c62c <_strtod_l+0xac>
 800c5c2:	2a00      	cmp	r2, #0
 800c5c4:	d03e      	beq.n	800c644 <_strtod_l+0xc4>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	930a      	str	r3, [sp, #40]	; 0x28
 800c5ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c5cc:	7833      	ldrb	r3, [r6, #0]
 800c5ce:	2b30      	cmp	r3, #48	; 0x30
 800c5d0:	f040 80b0 	bne.w	800c734 <_strtod_l+0x1b4>
 800c5d4:	7873      	ldrb	r3, [r6, #1]
 800c5d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5da:	2b58      	cmp	r3, #88	; 0x58
 800c5dc:	d168      	bne.n	800c6b0 <_strtod_l+0x130>
 800c5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	ab18      	add	r3, sp, #96	; 0x60
 800c5e4:	9702      	str	r7, [sp, #8]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	4a8d      	ldr	r2, [pc, #564]	; (800c820 <_strtod_l+0x2a0>)
 800c5ea:	ab19      	add	r3, sp, #100	; 0x64
 800c5ec:	a917      	add	r1, sp, #92	; 0x5c
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f001 fd44 	bl	800e07c <__gethex>
 800c5f4:	f010 0707 	ands.w	r7, r0, #7
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	d005      	beq.n	800c608 <_strtod_l+0x88>
 800c5fc:	2f06      	cmp	r7, #6
 800c5fe:	d12c      	bne.n	800c65a <_strtod_l+0xda>
 800c600:	3601      	adds	r6, #1
 800c602:	2300      	movs	r3, #0
 800c604:	9617      	str	r6, [sp, #92]	; 0x5c
 800c606:	930a      	str	r3, [sp, #40]	; 0x28
 800c608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f040 8590 	bne.w	800d130 <_strtod_l+0xbb0>
 800c610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c612:	b1eb      	cbz	r3, 800c650 <_strtod_l+0xd0>
 800c614:	4652      	mov	r2, sl
 800c616:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c61a:	ec43 2b10 	vmov	d0, r2, r3
 800c61e:	b01d      	add	sp, #116	; 0x74
 800c620:	ecbd 8b02 	vpop	{d8}
 800c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c628:	2a20      	cmp	r2, #32
 800c62a:	d1cc      	bne.n	800c5c6 <_strtod_l+0x46>
 800c62c:	3301      	adds	r3, #1
 800c62e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c630:	e7be      	b.n	800c5b0 <_strtod_l+0x30>
 800c632:	2a2d      	cmp	r2, #45	; 0x2d
 800c634:	d1c7      	bne.n	800c5c6 <_strtod_l+0x46>
 800c636:	2201      	movs	r2, #1
 800c638:	920a      	str	r2, [sp, #40]	; 0x28
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c63e:	785b      	ldrb	r3, [r3, #1]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1c2      	bne.n	800c5ca <_strtod_l+0x4a>
 800c644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c646:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f040 856e 	bne.w	800d12c <_strtod_l+0xbac>
 800c650:	4652      	mov	r2, sl
 800c652:	465b      	mov	r3, fp
 800c654:	e7e1      	b.n	800c61a <_strtod_l+0x9a>
 800c656:	2200      	movs	r2, #0
 800c658:	e7ee      	b.n	800c638 <_strtod_l+0xb8>
 800c65a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c65c:	b13a      	cbz	r2, 800c66e <_strtod_l+0xee>
 800c65e:	2135      	movs	r1, #53	; 0x35
 800c660:	a81a      	add	r0, sp, #104	; 0x68
 800c662:	f002 fcae 	bl	800efc2 <__copybits>
 800c666:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c668:	4620      	mov	r0, r4
 800c66a:	f002 f86d 	bl	800e748 <_Bfree>
 800c66e:	3f01      	subs	r7, #1
 800c670:	2f04      	cmp	r7, #4
 800c672:	d806      	bhi.n	800c682 <_strtod_l+0x102>
 800c674:	e8df f007 	tbb	[pc, r7]
 800c678:	1714030a 	.word	0x1714030a
 800c67c:	0a          	.byte	0x0a
 800c67d:	00          	.byte	0x00
 800c67e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c682:	0728      	lsls	r0, r5, #28
 800c684:	d5c0      	bpl.n	800c608 <_strtod_l+0x88>
 800c686:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c68a:	e7bd      	b.n	800c608 <_strtod_l+0x88>
 800c68c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c690:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c692:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c696:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c69a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c69e:	e7f0      	b.n	800c682 <_strtod_l+0x102>
 800c6a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c824 <_strtod_l+0x2a4>
 800c6a4:	e7ed      	b.n	800c682 <_strtod_l+0x102>
 800c6a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c6aa:	f04f 3aff 	mov.w	sl, #4294967295
 800c6ae:	e7e8      	b.n	800c682 <_strtod_l+0x102>
 800c6b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6b6:	785b      	ldrb	r3, [r3, #1]
 800c6b8:	2b30      	cmp	r3, #48	; 0x30
 800c6ba:	d0f9      	beq.n	800c6b0 <_strtod_l+0x130>
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d0a3      	beq.n	800c608 <_strtod_l+0x88>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f04f 0900 	mov.w	r9, #0
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6ca:	9308      	str	r3, [sp, #32]
 800c6cc:	f8cd 901c 	str.w	r9, [sp, #28]
 800c6d0:	464f      	mov	r7, r9
 800c6d2:	220a      	movs	r2, #10
 800c6d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c6d6:	7806      	ldrb	r6, [r0, #0]
 800c6d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c6dc:	b2d9      	uxtb	r1, r3
 800c6de:	2909      	cmp	r1, #9
 800c6e0:	d92a      	bls.n	800c738 <_strtod_l+0x1b8>
 800c6e2:	9905      	ldr	r1, [sp, #20]
 800c6e4:	462a      	mov	r2, r5
 800c6e6:	f002 ff1b 	bl	800f520 <strncmp>
 800c6ea:	b398      	cbz	r0, 800c754 <_strtod_l+0x1d4>
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	4632      	mov	r2, r6
 800c6f0:	463d      	mov	r5, r7
 800c6f2:	9005      	str	r0, [sp, #20]
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2a65      	cmp	r2, #101	; 0x65
 800c6f8:	d001      	beq.n	800c6fe <_strtod_l+0x17e>
 800c6fa:	2a45      	cmp	r2, #69	; 0x45
 800c6fc:	d118      	bne.n	800c730 <_strtod_l+0x1b0>
 800c6fe:	b91d      	cbnz	r5, 800c708 <_strtod_l+0x188>
 800c700:	9a04      	ldr	r2, [sp, #16]
 800c702:	4302      	orrs	r2, r0
 800c704:	d09e      	beq.n	800c644 <_strtod_l+0xc4>
 800c706:	2500      	movs	r5, #0
 800c708:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c70c:	f108 0201 	add.w	r2, r8, #1
 800c710:	9217      	str	r2, [sp, #92]	; 0x5c
 800c712:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c716:	2a2b      	cmp	r2, #43	; 0x2b
 800c718:	d075      	beq.n	800c806 <_strtod_l+0x286>
 800c71a:	2a2d      	cmp	r2, #45	; 0x2d
 800c71c:	d07b      	beq.n	800c816 <_strtod_l+0x296>
 800c71e:	f04f 0c00 	mov.w	ip, #0
 800c722:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c726:	2909      	cmp	r1, #9
 800c728:	f240 8082 	bls.w	800c830 <_strtod_l+0x2b0>
 800c72c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c730:	2600      	movs	r6, #0
 800c732:	e09d      	b.n	800c870 <_strtod_l+0x2f0>
 800c734:	2300      	movs	r3, #0
 800c736:	e7c4      	b.n	800c6c2 <_strtod_l+0x142>
 800c738:	2f08      	cmp	r7, #8
 800c73a:	bfd8      	it	le
 800c73c:	9907      	ldrle	r1, [sp, #28]
 800c73e:	f100 0001 	add.w	r0, r0, #1
 800c742:	bfda      	itte	le
 800c744:	fb02 3301 	mlale	r3, r2, r1, r3
 800c748:	9307      	strle	r3, [sp, #28]
 800c74a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c74e:	3701      	adds	r7, #1
 800c750:	9017      	str	r0, [sp, #92]	; 0x5c
 800c752:	e7bf      	b.n	800c6d4 <_strtod_l+0x154>
 800c754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c756:	195a      	adds	r2, r3, r5
 800c758:	9217      	str	r2, [sp, #92]	; 0x5c
 800c75a:	5d5a      	ldrb	r2, [r3, r5]
 800c75c:	2f00      	cmp	r7, #0
 800c75e:	d037      	beq.n	800c7d0 <_strtod_l+0x250>
 800c760:	9005      	str	r0, [sp, #20]
 800c762:	463d      	mov	r5, r7
 800c764:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c768:	2b09      	cmp	r3, #9
 800c76a:	d912      	bls.n	800c792 <_strtod_l+0x212>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e7c2      	b.n	800c6f6 <_strtod_l+0x176>
 800c770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	9217      	str	r2, [sp, #92]	; 0x5c
 800c776:	785a      	ldrb	r2, [r3, #1]
 800c778:	3001      	adds	r0, #1
 800c77a:	2a30      	cmp	r2, #48	; 0x30
 800c77c:	d0f8      	beq.n	800c770 <_strtod_l+0x1f0>
 800c77e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c782:	2b08      	cmp	r3, #8
 800c784:	f200 84d9 	bhi.w	800d13a <_strtod_l+0xbba>
 800c788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c78a:	9005      	str	r0, [sp, #20]
 800c78c:	2000      	movs	r0, #0
 800c78e:	9308      	str	r3, [sp, #32]
 800c790:	4605      	mov	r5, r0
 800c792:	3a30      	subs	r2, #48	; 0x30
 800c794:	f100 0301 	add.w	r3, r0, #1
 800c798:	d014      	beq.n	800c7c4 <_strtod_l+0x244>
 800c79a:	9905      	ldr	r1, [sp, #20]
 800c79c:	4419      	add	r1, r3
 800c79e:	9105      	str	r1, [sp, #20]
 800c7a0:	462b      	mov	r3, r5
 800c7a2:	eb00 0e05 	add.w	lr, r0, r5
 800c7a6:	210a      	movs	r1, #10
 800c7a8:	4573      	cmp	r3, lr
 800c7aa:	d113      	bne.n	800c7d4 <_strtod_l+0x254>
 800c7ac:	182b      	adds	r3, r5, r0
 800c7ae:	2b08      	cmp	r3, #8
 800c7b0:	f105 0501 	add.w	r5, r5, #1
 800c7b4:	4405      	add	r5, r0
 800c7b6:	dc1c      	bgt.n	800c7f2 <_strtod_l+0x272>
 800c7b8:	9907      	ldr	r1, [sp, #28]
 800c7ba:	230a      	movs	r3, #10
 800c7bc:	fb03 2301 	mla	r3, r3, r1, r2
 800c7c0:	9307      	str	r3, [sp, #28]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7c6:	1c51      	adds	r1, r2, #1
 800c7c8:	9117      	str	r1, [sp, #92]	; 0x5c
 800c7ca:	7852      	ldrb	r2, [r2, #1]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	e7c9      	b.n	800c764 <_strtod_l+0x1e4>
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	e7d2      	b.n	800c77a <_strtod_l+0x1fa>
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	dc04      	bgt.n	800c7e2 <_strtod_l+0x262>
 800c7d8:	9e07      	ldr	r6, [sp, #28]
 800c7da:	434e      	muls	r6, r1
 800c7dc:	9607      	str	r6, [sp, #28]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	e7e2      	b.n	800c7a8 <_strtod_l+0x228>
 800c7e2:	f103 0c01 	add.w	ip, r3, #1
 800c7e6:	f1bc 0f10 	cmp.w	ip, #16
 800c7ea:	bfd8      	it	le
 800c7ec:	fb01 f909 	mulle.w	r9, r1, r9
 800c7f0:	e7f5      	b.n	800c7de <_strtod_l+0x25e>
 800c7f2:	2d10      	cmp	r5, #16
 800c7f4:	bfdc      	itt	le
 800c7f6:	230a      	movle	r3, #10
 800c7f8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c7fc:	e7e1      	b.n	800c7c2 <_strtod_l+0x242>
 800c7fe:	2300      	movs	r3, #0
 800c800:	9305      	str	r3, [sp, #20]
 800c802:	2301      	movs	r3, #1
 800c804:	e77c      	b.n	800c700 <_strtod_l+0x180>
 800c806:	f04f 0c00 	mov.w	ip, #0
 800c80a:	f108 0202 	add.w	r2, r8, #2
 800c80e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c810:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c814:	e785      	b.n	800c722 <_strtod_l+0x1a2>
 800c816:	f04f 0c01 	mov.w	ip, #1
 800c81a:	e7f6      	b.n	800c80a <_strtod_l+0x28a>
 800c81c:	0801f7a8 	.word	0x0801f7a8
 800c820:	0801f560 	.word	0x0801f560
 800c824:	7ff00000 	.word	0x7ff00000
 800c828:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c82a:	1c51      	adds	r1, r2, #1
 800c82c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c82e:	7852      	ldrb	r2, [r2, #1]
 800c830:	2a30      	cmp	r2, #48	; 0x30
 800c832:	d0f9      	beq.n	800c828 <_strtod_l+0x2a8>
 800c834:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c838:	2908      	cmp	r1, #8
 800c83a:	f63f af79 	bhi.w	800c730 <_strtod_l+0x1b0>
 800c83e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c842:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c844:	9206      	str	r2, [sp, #24]
 800c846:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c848:	1c51      	adds	r1, r2, #1
 800c84a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c84c:	7852      	ldrb	r2, [r2, #1]
 800c84e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c852:	2e09      	cmp	r6, #9
 800c854:	d937      	bls.n	800c8c6 <_strtod_l+0x346>
 800c856:	9e06      	ldr	r6, [sp, #24]
 800c858:	1b89      	subs	r1, r1, r6
 800c85a:	2908      	cmp	r1, #8
 800c85c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c860:	dc02      	bgt.n	800c868 <_strtod_l+0x2e8>
 800c862:	4576      	cmp	r6, lr
 800c864:	bfa8      	it	ge
 800c866:	4676      	movge	r6, lr
 800c868:	f1bc 0f00 	cmp.w	ip, #0
 800c86c:	d000      	beq.n	800c870 <_strtod_l+0x2f0>
 800c86e:	4276      	negs	r6, r6
 800c870:	2d00      	cmp	r5, #0
 800c872:	d14d      	bne.n	800c910 <_strtod_l+0x390>
 800c874:	9904      	ldr	r1, [sp, #16]
 800c876:	4301      	orrs	r1, r0
 800c878:	f47f aec6 	bne.w	800c608 <_strtod_l+0x88>
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f47f aee1 	bne.w	800c644 <_strtod_l+0xc4>
 800c882:	2a69      	cmp	r2, #105	; 0x69
 800c884:	d027      	beq.n	800c8d6 <_strtod_l+0x356>
 800c886:	dc24      	bgt.n	800c8d2 <_strtod_l+0x352>
 800c888:	2a49      	cmp	r2, #73	; 0x49
 800c88a:	d024      	beq.n	800c8d6 <_strtod_l+0x356>
 800c88c:	2a4e      	cmp	r2, #78	; 0x4e
 800c88e:	f47f aed9 	bne.w	800c644 <_strtod_l+0xc4>
 800c892:	499f      	ldr	r1, [pc, #636]	; (800cb10 <_strtod_l+0x590>)
 800c894:	a817      	add	r0, sp, #92	; 0x5c
 800c896:	f001 fe49 	bl	800e52c <__match>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	f43f aed2 	beq.w	800c644 <_strtod_l+0xc4>
 800c8a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b28      	cmp	r3, #40	; 0x28
 800c8a6:	d12d      	bne.n	800c904 <_strtod_l+0x384>
 800c8a8:	499a      	ldr	r1, [pc, #616]	; (800cb14 <_strtod_l+0x594>)
 800c8aa:	aa1a      	add	r2, sp, #104	; 0x68
 800c8ac:	a817      	add	r0, sp, #92	; 0x5c
 800c8ae:	f001 fe51 	bl	800e554 <__hexnan>
 800c8b2:	2805      	cmp	r0, #5
 800c8b4:	d126      	bne.n	800c904 <_strtod_l+0x384>
 800c8b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c8bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c8c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c8c4:	e6a0      	b.n	800c608 <_strtod_l+0x88>
 800c8c6:	210a      	movs	r1, #10
 800c8c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c8cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c8d0:	e7b9      	b.n	800c846 <_strtod_l+0x2c6>
 800c8d2:	2a6e      	cmp	r2, #110	; 0x6e
 800c8d4:	e7db      	b.n	800c88e <_strtod_l+0x30e>
 800c8d6:	4990      	ldr	r1, [pc, #576]	; (800cb18 <_strtod_l+0x598>)
 800c8d8:	a817      	add	r0, sp, #92	; 0x5c
 800c8da:	f001 fe27 	bl	800e52c <__match>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	f43f aeb0 	beq.w	800c644 <_strtod_l+0xc4>
 800c8e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8e6:	498d      	ldr	r1, [pc, #564]	; (800cb1c <_strtod_l+0x59c>)
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	a817      	add	r0, sp, #92	; 0x5c
 800c8ec:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8ee:	f001 fe1d 	bl	800e52c <__match>
 800c8f2:	b910      	cbnz	r0, 800c8fa <_strtod_l+0x37a>
 800c8f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cb2c <_strtod_l+0x5ac>
 800c8fe:	f04f 0a00 	mov.w	sl, #0
 800c902:	e681      	b.n	800c608 <_strtod_l+0x88>
 800c904:	4886      	ldr	r0, [pc, #536]	; (800cb20 <_strtod_l+0x5a0>)
 800c906:	f002 fdf3 	bl	800f4f0 <nan>
 800c90a:	ec5b ab10 	vmov	sl, fp, d0
 800c90e:	e67b      	b.n	800c608 <_strtod_l+0x88>
 800c910:	9b05      	ldr	r3, [sp, #20]
 800c912:	9807      	ldr	r0, [sp, #28]
 800c914:	1af3      	subs	r3, r6, r3
 800c916:	2f00      	cmp	r7, #0
 800c918:	bf08      	it	eq
 800c91a:	462f      	moveq	r7, r5
 800c91c:	2d10      	cmp	r5, #16
 800c91e:	9306      	str	r3, [sp, #24]
 800c920:	46a8      	mov	r8, r5
 800c922:	bfa8      	it	ge
 800c924:	f04f 0810 	movge.w	r8, #16
 800c928:	f7f3 fdec 	bl	8000504 <__aeabi_ui2d>
 800c92c:	2d09      	cmp	r5, #9
 800c92e:	4682      	mov	sl, r0
 800c930:	468b      	mov	fp, r1
 800c932:	dd13      	ble.n	800c95c <_strtod_l+0x3dc>
 800c934:	4b7b      	ldr	r3, [pc, #492]	; (800cb24 <_strtod_l+0x5a4>)
 800c936:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c93a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c93e:	f7f3 fe5b 	bl	80005f8 <__aeabi_dmul>
 800c942:	4682      	mov	sl, r0
 800c944:	4648      	mov	r0, r9
 800c946:	468b      	mov	fp, r1
 800c948:	f7f3 fddc 	bl	8000504 <__aeabi_ui2d>
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	4650      	mov	r0, sl
 800c952:	4659      	mov	r1, fp
 800c954:	f7f3 fc9a 	bl	800028c <__adddf3>
 800c958:	4682      	mov	sl, r0
 800c95a:	468b      	mov	fp, r1
 800c95c:	2d0f      	cmp	r5, #15
 800c95e:	dc38      	bgt.n	800c9d2 <_strtod_l+0x452>
 800c960:	9b06      	ldr	r3, [sp, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	f43f ae50 	beq.w	800c608 <_strtod_l+0x88>
 800c968:	dd24      	ble.n	800c9b4 <_strtod_l+0x434>
 800c96a:	2b16      	cmp	r3, #22
 800c96c:	dc0b      	bgt.n	800c986 <_strtod_l+0x406>
 800c96e:	496d      	ldr	r1, [pc, #436]	; (800cb24 <_strtod_l+0x5a4>)
 800c970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c978:	4652      	mov	r2, sl
 800c97a:	465b      	mov	r3, fp
 800c97c:	f7f3 fe3c 	bl	80005f8 <__aeabi_dmul>
 800c980:	4682      	mov	sl, r0
 800c982:	468b      	mov	fp, r1
 800c984:	e640      	b.n	800c608 <_strtod_l+0x88>
 800c986:	9a06      	ldr	r2, [sp, #24]
 800c988:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c98c:	4293      	cmp	r3, r2
 800c98e:	db20      	blt.n	800c9d2 <_strtod_l+0x452>
 800c990:	4c64      	ldr	r4, [pc, #400]	; (800cb24 <_strtod_l+0x5a4>)
 800c992:	f1c5 050f 	rsb	r5, r5, #15
 800c996:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c99a:	4652      	mov	r2, sl
 800c99c:	465b      	mov	r3, fp
 800c99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a2:	f7f3 fe29 	bl	80005f8 <__aeabi_dmul>
 800c9a6:	9b06      	ldr	r3, [sp, #24]
 800c9a8:	1b5d      	subs	r5, r3, r5
 800c9aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c9ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c9b2:	e7e3      	b.n	800c97c <_strtod_l+0x3fc>
 800c9b4:	9b06      	ldr	r3, [sp, #24]
 800c9b6:	3316      	adds	r3, #22
 800c9b8:	db0b      	blt.n	800c9d2 <_strtod_l+0x452>
 800c9ba:	9b05      	ldr	r3, [sp, #20]
 800c9bc:	1b9e      	subs	r6, r3, r6
 800c9be:	4b59      	ldr	r3, [pc, #356]	; (800cb24 <_strtod_l+0x5a4>)
 800c9c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c9c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	4659      	mov	r1, fp
 800c9cc:	f7f3 ff3e 	bl	800084c <__aeabi_ddiv>
 800c9d0:	e7d6      	b.n	800c980 <_strtod_l+0x400>
 800c9d2:	9b06      	ldr	r3, [sp, #24]
 800c9d4:	eba5 0808 	sub.w	r8, r5, r8
 800c9d8:	4498      	add	r8, r3
 800c9da:	f1b8 0f00 	cmp.w	r8, #0
 800c9de:	dd74      	ble.n	800caca <_strtod_l+0x54a>
 800c9e0:	f018 030f 	ands.w	r3, r8, #15
 800c9e4:	d00a      	beq.n	800c9fc <_strtod_l+0x47c>
 800c9e6:	494f      	ldr	r1, [pc, #316]	; (800cb24 <_strtod_l+0x5a4>)
 800c9e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c9ec:	4652      	mov	r2, sl
 800c9ee:	465b      	mov	r3, fp
 800c9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9f4:	f7f3 fe00 	bl	80005f8 <__aeabi_dmul>
 800c9f8:	4682      	mov	sl, r0
 800c9fa:	468b      	mov	fp, r1
 800c9fc:	f038 080f 	bics.w	r8, r8, #15
 800ca00:	d04f      	beq.n	800caa2 <_strtod_l+0x522>
 800ca02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ca06:	dd22      	ble.n	800ca4e <_strtod_l+0x4ce>
 800ca08:	2500      	movs	r5, #0
 800ca0a:	462e      	mov	r6, r5
 800ca0c:	9507      	str	r5, [sp, #28]
 800ca0e:	9505      	str	r5, [sp, #20]
 800ca10:	2322      	movs	r3, #34	; 0x22
 800ca12:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cb2c <_strtod_l+0x5ac>
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	f04f 0a00 	mov.w	sl, #0
 800ca1c:	9b07      	ldr	r3, [sp, #28]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f43f adf2 	beq.w	800c608 <_strtod_l+0x88>
 800ca24:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca26:	4620      	mov	r0, r4
 800ca28:	f001 fe8e 	bl	800e748 <_Bfree>
 800ca2c:	9905      	ldr	r1, [sp, #20]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f001 fe8a 	bl	800e748 <_Bfree>
 800ca34:	4631      	mov	r1, r6
 800ca36:	4620      	mov	r0, r4
 800ca38:	f001 fe86 	bl	800e748 <_Bfree>
 800ca3c:	9907      	ldr	r1, [sp, #28]
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f001 fe82 	bl	800e748 <_Bfree>
 800ca44:	4629      	mov	r1, r5
 800ca46:	4620      	mov	r0, r4
 800ca48:	f001 fe7e 	bl	800e748 <_Bfree>
 800ca4c:	e5dc      	b.n	800c608 <_strtod_l+0x88>
 800ca4e:	4b36      	ldr	r3, [pc, #216]	; (800cb28 <_strtod_l+0x5a8>)
 800ca50:	9304      	str	r3, [sp, #16]
 800ca52:	2300      	movs	r3, #0
 800ca54:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ca58:	4650      	mov	r0, sl
 800ca5a:	4659      	mov	r1, fp
 800ca5c:	4699      	mov	r9, r3
 800ca5e:	f1b8 0f01 	cmp.w	r8, #1
 800ca62:	dc21      	bgt.n	800caa8 <_strtod_l+0x528>
 800ca64:	b10b      	cbz	r3, 800ca6a <_strtod_l+0x4ea>
 800ca66:	4682      	mov	sl, r0
 800ca68:	468b      	mov	fp, r1
 800ca6a:	4b2f      	ldr	r3, [pc, #188]	; (800cb28 <_strtod_l+0x5a8>)
 800ca6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ca70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ca74:	4652      	mov	r2, sl
 800ca76:	465b      	mov	r3, fp
 800ca78:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ca7c:	f7f3 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ca80:	4b2a      	ldr	r3, [pc, #168]	; (800cb2c <_strtod_l+0x5ac>)
 800ca82:	460a      	mov	r2, r1
 800ca84:	400b      	ands	r3, r1
 800ca86:	492a      	ldr	r1, [pc, #168]	; (800cb30 <_strtod_l+0x5b0>)
 800ca88:	428b      	cmp	r3, r1
 800ca8a:	4682      	mov	sl, r0
 800ca8c:	d8bc      	bhi.n	800ca08 <_strtod_l+0x488>
 800ca8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ca92:	428b      	cmp	r3, r1
 800ca94:	bf86      	itte	hi
 800ca96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cb34 <_strtod_l+0x5b4>
 800ca9a:	f04f 3aff 	movhi.w	sl, #4294967295
 800ca9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800caa2:	2300      	movs	r3, #0
 800caa4:	9304      	str	r3, [sp, #16]
 800caa6:	e084      	b.n	800cbb2 <_strtod_l+0x632>
 800caa8:	f018 0f01 	tst.w	r8, #1
 800caac:	d005      	beq.n	800caba <_strtod_l+0x53a>
 800caae:	9b04      	ldr	r3, [sp, #16]
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f7f3 fda0 	bl	80005f8 <__aeabi_dmul>
 800cab8:	2301      	movs	r3, #1
 800caba:	9a04      	ldr	r2, [sp, #16]
 800cabc:	3208      	adds	r2, #8
 800cabe:	f109 0901 	add.w	r9, r9, #1
 800cac2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cac6:	9204      	str	r2, [sp, #16]
 800cac8:	e7c9      	b.n	800ca5e <_strtod_l+0x4de>
 800caca:	d0ea      	beq.n	800caa2 <_strtod_l+0x522>
 800cacc:	f1c8 0800 	rsb	r8, r8, #0
 800cad0:	f018 020f 	ands.w	r2, r8, #15
 800cad4:	d00a      	beq.n	800caec <_strtod_l+0x56c>
 800cad6:	4b13      	ldr	r3, [pc, #76]	; (800cb24 <_strtod_l+0x5a4>)
 800cad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cadc:	4650      	mov	r0, sl
 800cade:	4659      	mov	r1, fp
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 feb2 	bl	800084c <__aeabi_ddiv>
 800cae8:	4682      	mov	sl, r0
 800caea:	468b      	mov	fp, r1
 800caec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800caf0:	d0d7      	beq.n	800caa2 <_strtod_l+0x522>
 800caf2:	f1b8 0f1f 	cmp.w	r8, #31
 800caf6:	dd1f      	ble.n	800cb38 <_strtod_l+0x5b8>
 800caf8:	2500      	movs	r5, #0
 800cafa:	462e      	mov	r6, r5
 800cafc:	9507      	str	r5, [sp, #28]
 800cafe:	9505      	str	r5, [sp, #20]
 800cb00:	2322      	movs	r3, #34	; 0x22
 800cb02:	f04f 0a00 	mov.w	sl, #0
 800cb06:	f04f 0b00 	mov.w	fp, #0
 800cb0a:	6023      	str	r3, [r4, #0]
 800cb0c:	e786      	b.n	800ca1c <_strtod_l+0x49c>
 800cb0e:	bf00      	nop
 800cb10:	0801f531 	.word	0x0801f531
 800cb14:	0801f574 	.word	0x0801f574
 800cb18:	0801f529 	.word	0x0801f529
 800cb1c:	0801f6b4 	.word	0x0801f6b4
 800cb20:	0801f960 	.word	0x0801f960
 800cb24:	0801f840 	.word	0x0801f840
 800cb28:	0801f818 	.word	0x0801f818
 800cb2c:	7ff00000 	.word	0x7ff00000
 800cb30:	7ca00000 	.word	0x7ca00000
 800cb34:	7fefffff 	.word	0x7fefffff
 800cb38:	f018 0310 	ands.w	r3, r8, #16
 800cb3c:	bf18      	it	ne
 800cb3e:	236a      	movne	r3, #106	; 0x6a
 800cb40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cef0 <_strtod_l+0x970>
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	4650      	mov	r0, sl
 800cb48:	4659      	mov	r1, fp
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f018 0f01 	tst.w	r8, #1
 800cb50:	d004      	beq.n	800cb5c <_strtod_l+0x5dc>
 800cb52:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cb56:	f7f3 fd4f 	bl	80005f8 <__aeabi_dmul>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cb60:	f109 0908 	add.w	r9, r9, #8
 800cb64:	d1f2      	bne.n	800cb4c <_strtod_l+0x5cc>
 800cb66:	b10b      	cbz	r3, 800cb6c <_strtod_l+0x5ec>
 800cb68:	4682      	mov	sl, r0
 800cb6a:	468b      	mov	fp, r1
 800cb6c:	9b04      	ldr	r3, [sp, #16]
 800cb6e:	b1c3      	cbz	r3, 800cba2 <_strtod_l+0x622>
 800cb70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cb74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	4659      	mov	r1, fp
 800cb7c:	dd11      	ble.n	800cba2 <_strtod_l+0x622>
 800cb7e:	2b1f      	cmp	r3, #31
 800cb80:	f340 8124 	ble.w	800cdcc <_strtod_l+0x84c>
 800cb84:	2b34      	cmp	r3, #52	; 0x34
 800cb86:	bfde      	ittt	le
 800cb88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cb8c:	f04f 33ff 	movle.w	r3, #4294967295
 800cb90:	fa03 f202 	lslle.w	r2, r3, r2
 800cb94:	f04f 0a00 	mov.w	sl, #0
 800cb98:	bfcc      	ite	gt
 800cb9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cb9e:	ea02 0b01 	andle.w	fp, r2, r1
 800cba2:	2200      	movs	r2, #0
 800cba4:	2300      	movs	r3, #0
 800cba6:	4650      	mov	r0, sl
 800cba8:	4659      	mov	r1, fp
 800cbaa:	f7f3 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d1a2      	bne.n	800caf8 <_strtod_l+0x578>
 800cbb2:	9b07      	ldr	r3, [sp, #28]
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	9908      	ldr	r1, [sp, #32]
 800cbb8:	462b      	mov	r3, r5
 800cbba:	463a      	mov	r2, r7
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f001 fe2b 	bl	800e818 <__s2b>
 800cbc2:	9007      	str	r0, [sp, #28]
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	f43f af1f 	beq.w	800ca08 <_strtod_l+0x488>
 800cbca:	9b05      	ldr	r3, [sp, #20]
 800cbcc:	1b9e      	subs	r6, r3, r6
 800cbce:	9b06      	ldr	r3, [sp, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	bfb4      	ite	lt
 800cbd4:	4633      	movlt	r3, r6
 800cbd6:	2300      	movge	r3, #0
 800cbd8:	930c      	str	r3, [sp, #48]	; 0x30
 800cbda:	9b06      	ldr	r3, [sp, #24]
 800cbdc:	2500      	movs	r5, #0
 800cbde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cbe2:	9312      	str	r3, [sp, #72]	; 0x48
 800cbe4:	462e      	mov	r6, r5
 800cbe6:	9b07      	ldr	r3, [sp, #28]
 800cbe8:	4620      	mov	r0, r4
 800cbea:	6859      	ldr	r1, [r3, #4]
 800cbec:	f001 fd6c 	bl	800e6c8 <_Balloc>
 800cbf0:	9005      	str	r0, [sp, #20]
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	f43f af0c 	beq.w	800ca10 <_strtod_l+0x490>
 800cbf8:	9b07      	ldr	r3, [sp, #28]
 800cbfa:	691a      	ldr	r2, [r3, #16]
 800cbfc:	3202      	adds	r2, #2
 800cbfe:	f103 010c 	add.w	r1, r3, #12
 800cc02:	0092      	lsls	r2, r2, #2
 800cc04:	300c      	adds	r0, #12
 800cc06:	f7fe fdb3 	bl	800b770 <memcpy>
 800cc0a:	ec4b ab10 	vmov	d0, sl, fp
 800cc0e:	aa1a      	add	r2, sp, #104	; 0x68
 800cc10:	a919      	add	r1, sp, #100	; 0x64
 800cc12:	4620      	mov	r0, r4
 800cc14:	f002 f946 	bl	800eea4 <__d2b>
 800cc18:	ec4b ab18 	vmov	d8, sl, fp
 800cc1c:	9018      	str	r0, [sp, #96]	; 0x60
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f43f aef6 	beq.w	800ca10 <_strtod_l+0x490>
 800cc24:	2101      	movs	r1, #1
 800cc26:	4620      	mov	r0, r4
 800cc28:	f001 fe90 	bl	800e94c <__i2b>
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	f43f aeee 	beq.w	800ca10 <_strtod_l+0x490>
 800cc34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc36:	9904      	ldr	r1, [sp, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	bfab      	itete	ge
 800cc3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cc3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cc40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cc42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cc46:	bfac      	ite	ge
 800cc48:	eb03 0902 	addge.w	r9, r3, r2
 800cc4c:	1ad7      	sublt	r7, r2, r3
 800cc4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cc50:	eba3 0801 	sub.w	r8, r3, r1
 800cc54:	4490      	add	r8, r2
 800cc56:	4ba1      	ldr	r3, [pc, #644]	; (800cedc <_strtod_l+0x95c>)
 800cc58:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc5c:	4598      	cmp	r8, r3
 800cc5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cc62:	f280 80c7 	bge.w	800cdf4 <_strtod_l+0x874>
 800cc66:	eba3 0308 	sub.w	r3, r3, r8
 800cc6a:	2b1f      	cmp	r3, #31
 800cc6c:	eba2 0203 	sub.w	r2, r2, r3
 800cc70:	f04f 0101 	mov.w	r1, #1
 800cc74:	f300 80b1 	bgt.w	800cdda <_strtod_l+0x85a>
 800cc78:	fa01 f303 	lsl.w	r3, r1, r3
 800cc7c:	930d      	str	r3, [sp, #52]	; 0x34
 800cc7e:	2300      	movs	r3, #0
 800cc80:	9308      	str	r3, [sp, #32]
 800cc82:	eb09 0802 	add.w	r8, r9, r2
 800cc86:	9b04      	ldr	r3, [sp, #16]
 800cc88:	45c1      	cmp	r9, r8
 800cc8a:	4417      	add	r7, r2
 800cc8c:	441f      	add	r7, r3
 800cc8e:	464b      	mov	r3, r9
 800cc90:	bfa8      	it	ge
 800cc92:	4643      	movge	r3, r8
 800cc94:	42bb      	cmp	r3, r7
 800cc96:	bfa8      	it	ge
 800cc98:	463b      	movge	r3, r7
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	bfc2      	ittt	gt
 800cc9e:	eba8 0803 	subgt.w	r8, r8, r3
 800cca2:	1aff      	subgt	r7, r7, r3
 800cca4:	eba9 0903 	subgt.w	r9, r9, r3
 800cca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	dd17      	ble.n	800ccde <_strtod_l+0x75e>
 800ccae:	4631      	mov	r1, r6
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f001 ff0a 	bl	800eacc <__pow5mult>
 800ccb8:	4606      	mov	r6, r0
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	f43f aea8 	beq.w	800ca10 <_strtod_l+0x490>
 800ccc0:	4601      	mov	r1, r0
 800ccc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f001 fe57 	bl	800e978 <__multiply>
 800ccca:	900b      	str	r0, [sp, #44]	; 0x2c
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f43f ae9f 	beq.w	800ca10 <_strtod_l+0x490>
 800ccd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f001 fd37 	bl	800e748 <_Bfree>
 800ccda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccdc:	9318      	str	r3, [sp, #96]	; 0x60
 800ccde:	f1b8 0f00 	cmp.w	r8, #0
 800cce2:	f300 808c 	bgt.w	800cdfe <_strtod_l+0x87e>
 800cce6:	9b06      	ldr	r3, [sp, #24]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	dd08      	ble.n	800ccfe <_strtod_l+0x77e>
 800ccec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccee:	9905      	ldr	r1, [sp, #20]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f001 feeb 	bl	800eacc <__pow5mult>
 800ccf6:	9005      	str	r0, [sp, #20]
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	f43f ae89 	beq.w	800ca10 <_strtod_l+0x490>
 800ccfe:	2f00      	cmp	r7, #0
 800cd00:	dd08      	ble.n	800cd14 <_strtod_l+0x794>
 800cd02:	9905      	ldr	r1, [sp, #20]
 800cd04:	463a      	mov	r2, r7
 800cd06:	4620      	mov	r0, r4
 800cd08:	f001 ff3a 	bl	800eb80 <__lshift>
 800cd0c:	9005      	str	r0, [sp, #20]
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f43f ae7e 	beq.w	800ca10 <_strtod_l+0x490>
 800cd14:	f1b9 0f00 	cmp.w	r9, #0
 800cd18:	dd08      	ble.n	800cd2c <_strtod_l+0x7ac>
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	464a      	mov	r2, r9
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f001 ff2e 	bl	800eb80 <__lshift>
 800cd24:	4606      	mov	r6, r0
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f43f ae72 	beq.w	800ca10 <_strtod_l+0x490>
 800cd2c:	9a05      	ldr	r2, [sp, #20]
 800cd2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd30:	4620      	mov	r0, r4
 800cd32:	f001 ffb1 	bl	800ec98 <__mdiff>
 800cd36:	4605      	mov	r5, r0
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	f43f ae69 	beq.w	800ca10 <_strtod_l+0x490>
 800cd3e:	68c3      	ldr	r3, [r0, #12]
 800cd40:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd42:	2300      	movs	r3, #0
 800cd44:	60c3      	str	r3, [r0, #12]
 800cd46:	4631      	mov	r1, r6
 800cd48:	f001 ff8a 	bl	800ec60 <__mcmp>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	da60      	bge.n	800ce12 <_strtod_l+0x892>
 800cd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd52:	ea53 030a 	orrs.w	r3, r3, sl
 800cd56:	f040 8082 	bne.w	800ce5e <_strtod_l+0x8de>
 800cd5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d17d      	bne.n	800ce5e <_strtod_l+0x8de>
 800cd62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd66:	0d1b      	lsrs	r3, r3, #20
 800cd68:	051b      	lsls	r3, r3, #20
 800cd6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cd6e:	d976      	bls.n	800ce5e <_strtod_l+0x8de>
 800cd70:	696b      	ldr	r3, [r5, #20]
 800cd72:	b913      	cbnz	r3, 800cd7a <_strtod_l+0x7fa>
 800cd74:	692b      	ldr	r3, [r5, #16]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	dd71      	ble.n	800ce5e <_strtod_l+0x8de>
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f001 fefe 	bl	800eb80 <__lshift>
 800cd84:	4631      	mov	r1, r6
 800cd86:	4605      	mov	r5, r0
 800cd88:	f001 ff6a 	bl	800ec60 <__mcmp>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	dd66      	ble.n	800ce5e <_strtod_l+0x8de>
 800cd90:	9904      	ldr	r1, [sp, #16]
 800cd92:	4a53      	ldr	r2, [pc, #332]	; (800cee0 <_strtod_l+0x960>)
 800cd94:	465b      	mov	r3, fp
 800cd96:	2900      	cmp	r1, #0
 800cd98:	f000 8081 	beq.w	800ce9e <_strtod_l+0x91e>
 800cd9c:	ea02 010b 	and.w	r1, r2, fp
 800cda0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cda4:	dc7b      	bgt.n	800ce9e <_strtod_l+0x91e>
 800cda6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cdaa:	f77f aea9 	ble.w	800cb00 <_strtod_l+0x580>
 800cdae:	4b4d      	ldr	r3, [pc, #308]	; (800cee4 <_strtod_l+0x964>)
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	4659      	mov	r1, fp
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f7f3 fc1f 	bl	80005f8 <__aeabi_dmul>
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4303      	orrs	r3, r0
 800cdbe:	bf08      	it	eq
 800cdc0:	2322      	moveq	r3, #34	; 0x22
 800cdc2:	4682      	mov	sl, r0
 800cdc4:	468b      	mov	fp, r1
 800cdc6:	bf08      	it	eq
 800cdc8:	6023      	streq	r3, [r4, #0]
 800cdca:	e62b      	b.n	800ca24 <_strtod_l+0x4a4>
 800cdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd4:	ea03 0a0a 	and.w	sl, r3, sl
 800cdd8:	e6e3      	b.n	800cba2 <_strtod_l+0x622>
 800cdda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cdde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cde2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cde6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cdea:	fa01 f308 	lsl.w	r3, r1, r8
 800cdee:	9308      	str	r3, [sp, #32]
 800cdf0:	910d      	str	r1, [sp, #52]	; 0x34
 800cdf2:	e746      	b.n	800cc82 <_strtod_l+0x702>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	9308      	str	r3, [sp, #32]
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	930d      	str	r3, [sp, #52]	; 0x34
 800cdfc:	e741      	b.n	800cc82 <_strtod_l+0x702>
 800cdfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce00:	4642      	mov	r2, r8
 800ce02:	4620      	mov	r0, r4
 800ce04:	f001 febc 	bl	800eb80 <__lshift>
 800ce08:	9018      	str	r0, [sp, #96]	; 0x60
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	f47f af6b 	bne.w	800cce6 <_strtod_l+0x766>
 800ce10:	e5fe      	b.n	800ca10 <_strtod_l+0x490>
 800ce12:	465f      	mov	r7, fp
 800ce14:	d16e      	bne.n	800cef4 <_strtod_l+0x974>
 800ce16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce1c:	b342      	cbz	r2, 800ce70 <_strtod_l+0x8f0>
 800ce1e:	4a32      	ldr	r2, [pc, #200]	; (800cee8 <_strtod_l+0x968>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d128      	bne.n	800ce76 <_strtod_l+0x8f6>
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	4651      	mov	r1, sl
 800ce28:	b1eb      	cbz	r3, 800ce66 <_strtod_l+0x8e6>
 800ce2a:	4b2d      	ldr	r3, [pc, #180]	; (800cee0 <_strtod_l+0x960>)
 800ce2c:	403b      	ands	r3, r7
 800ce2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ce32:	f04f 32ff 	mov.w	r2, #4294967295
 800ce36:	d819      	bhi.n	800ce6c <_strtod_l+0x8ec>
 800ce38:	0d1b      	lsrs	r3, r3, #20
 800ce3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce42:	4299      	cmp	r1, r3
 800ce44:	d117      	bne.n	800ce76 <_strtod_l+0x8f6>
 800ce46:	4b29      	ldr	r3, [pc, #164]	; (800ceec <_strtod_l+0x96c>)
 800ce48:	429f      	cmp	r7, r3
 800ce4a:	d102      	bne.n	800ce52 <_strtod_l+0x8d2>
 800ce4c:	3101      	adds	r1, #1
 800ce4e:	f43f addf 	beq.w	800ca10 <_strtod_l+0x490>
 800ce52:	4b23      	ldr	r3, [pc, #140]	; (800cee0 <_strtod_l+0x960>)
 800ce54:	403b      	ands	r3, r7
 800ce56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ce5a:	f04f 0a00 	mov.w	sl, #0
 800ce5e:	9b04      	ldr	r3, [sp, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1a4      	bne.n	800cdae <_strtod_l+0x82e>
 800ce64:	e5de      	b.n	800ca24 <_strtod_l+0x4a4>
 800ce66:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6a:	e7ea      	b.n	800ce42 <_strtod_l+0x8c2>
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	e7e8      	b.n	800ce42 <_strtod_l+0x8c2>
 800ce70:	ea53 030a 	orrs.w	r3, r3, sl
 800ce74:	d08c      	beq.n	800cd90 <_strtod_l+0x810>
 800ce76:	9b08      	ldr	r3, [sp, #32]
 800ce78:	b1db      	cbz	r3, 800ceb2 <_strtod_l+0x932>
 800ce7a:	423b      	tst	r3, r7
 800ce7c:	d0ef      	beq.n	800ce5e <_strtod_l+0x8de>
 800ce7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce80:	9a04      	ldr	r2, [sp, #16]
 800ce82:	4650      	mov	r0, sl
 800ce84:	4659      	mov	r1, fp
 800ce86:	b1c3      	cbz	r3, 800ceba <_strtod_l+0x93a>
 800ce88:	f7ff fb5c 	bl	800c544 <sulp>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	ec51 0b18 	vmov	r0, r1, d8
 800ce94:	f7f3 f9fa 	bl	800028c <__adddf3>
 800ce98:	4682      	mov	sl, r0
 800ce9a:	468b      	mov	fp, r1
 800ce9c:	e7df      	b.n	800ce5e <_strtod_l+0x8de>
 800ce9e:	4013      	ands	r3, r2
 800cea0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cea4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cea8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ceac:	f04f 3aff 	mov.w	sl, #4294967295
 800ceb0:	e7d5      	b.n	800ce5e <_strtod_l+0x8de>
 800ceb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ceb4:	ea13 0f0a 	tst.w	r3, sl
 800ceb8:	e7e0      	b.n	800ce7c <_strtod_l+0x8fc>
 800ceba:	f7ff fb43 	bl	800c544 <sulp>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	ec51 0b18 	vmov	r0, r1, d8
 800cec6:	f7f3 f9df 	bl	8000288 <__aeabi_dsub>
 800ceca:	2200      	movs	r2, #0
 800cecc:	2300      	movs	r3, #0
 800cece:	4682      	mov	sl, r0
 800ced0:	468b      	mov	fp, r1
 800ced2:	f7f3 fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d0c1      	beq.n	800ce5e <_strtod_l+0x8de>
 800ceda:	e611      	b.n	800cb00 <_strtod_l+0x580>
 800cedc:	fffffc02 	.word	0xfffffc02
 800cee0:	7ff00000 	.word	0x7ff00000
 800cee4:	39500000 	.word	0x39500000
 800cee8:	000fffff 	.word	0x000fffff
 800ceec:	7fefffff 	.word	0x7fefffff
 800cef0:	0801f588 	.word	0x0801f588
 800cef4:	4631      	mov	r1, r6
 800cef6:	4628      	mov	r0, r5
 800cef8:	f002 f830 	bl	800ef5c <__ratio>
 800cefc:	ec59 8b10 	vmov	r8, r9, d0
 800cf00:	ee10 0a10 	vmov	r0, s0
 800cf04:	2200      	movs	r2, #0
 800cf06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	f7f3 fdf0 	bl	8000af0 <__aeabi_dcmple>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d07a      	beq.n	800d00a <_strtod_l+0xa8a>
 800cf14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d04a      	beq.n	800cfb0 <_strtod_l+0xa30>
 800cf1a:	4b95      	ldr	r3, [pc, #596]	; (800d170 <_strtod_l+0xbf0>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cf22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d170 <_strtod_l+0xbf0>
 800cf26:	f04f 0800 	mov.w	r8, #0
 800cf2a:	4b92      	ldr	r3, [pc, #584]	; (800d174 <_strtod_l+0xbf4>)
 800cf2c:	403b      	ands	r3, r7
 800cf2e:	930d      	str	r3, [sp, #52]	; 0x34
 800cf30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf32:	4b91      	ldr	r3, [pc, #580]	; (800d178 <_strtod_l+0xbf8>)
 800cf34:	429a      	cmp	r2, r3
 800cf36:	f040 80b0 	bne.w	800d09a <_strtod_l+0xb1a>
 800cf3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cf42:	ec4b ab10 	vmov	d0, sl, fp
 800cf46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf4a:	f001 ff2f 	bl	800edac <__ulp>
 800cf4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf52:	ec53 2b10 	vmov	r2, r3, d0
 800cf56:	f7f3 fb4f 	bl	80005f8 <__aeabi_dmul>
 800cf5a:	4652      	mov	r2, sl
 800cf5c:	465b      	mov	r3, fp
 800cf5e:	f7f3 f995 	bl	800028c <__adddf3>
 800cf62:	460b      	mov	r3, r1
 800cf64:	4983      	ldr	r1, [pc, #524]	; (800d174 <_strtod_l+0xbf4>)
 800cf66:	4a85      	ldr	r2, [pc, #532]	; (800d17c <_strtod_l+0xbfc>)
 800cf68:	4019      	ands	r1, r3
 800cf6a:	4291      	cmp	r1, r2
 800cf6c:	4682      	mov	sl, r0
 800cf6e:	d960      	bls.n	800d032 <_strtod_l+0xab2>
 800cf70:	ee18 3a90 	vmov	r3, s17
 800cf74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d104      	bne.n	800cf86 <_strtod_l+0xa06>
 800cf7c:	ee18 3a10 	vmov	r3, s16
 800cf80:	3301      	adds	r3, #1
 800cf82:	f43f ad45 	beq.w	800ca10 <_strtod_l+0x490>
 800cf86:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d188 <_strtod_l+0xc08>
 800cf8a:	f04f 3aff 	mov.w	sl, #4294967295
 800cf8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf90:	4620      	mov	r0, r4
 800cf92:	f001 fbd9 	bl	800e748 <_Bfree>
 800cf96:	9905      	ldr	r1, [sp, #20]
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f001 fbd5 	bl	800e748 <_Bfree>
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f001 fbd1 	bl	800e748 <_Bfree>
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f001 fbcd 	bl	800e748 <_Bfree>
 800cfae:	e61a      	b.n	800cbe6 <_strtod_l+0x666>
 800cfb0:	f1ba 0f00 	cmp.w	sl, #0
 800cfb4:	d11b      	bne.n	800cfee <_strtod_l+0xa6e>
 800cfb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfba:	b9f3      	cbnz	r3, 800cffa <_strtod_l+0xa7a>
 800cfbc:	4b6c      	ldr	r3, [pc, #432]	; (800d170 <_strtod_l+0xbf0>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	f7f3 fd8a 	bl	8000adc <__aeabi_dcmplt>
 800cfc8:	b9d0      	cbnz	r0, 800d000 <_strtod_l+0xa80>
 800cfca:	4640      	mov	r0, r8
 800cfcc:	4649      	mov	r1, r9
 800cfce:	4b6c      	ldr	r3, [pc, #432]	; (800d180 <_strtod_l+0xc00>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f7f3 fb11 	bl	80005f8 <__aeabi_dmul>
 800cfd6:	4680      	mov	r8, r0
 800cfd8:	4689      	mov	r9, r1
 800cfda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cfde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cfe2:	9315      	str	r3, [sp, #84]	; 0x54
 800cfe4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cfe8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cfec:	e79d      	b.n	800cf2a <_strtod_l+0x9aa>
 800cfee:	f1ba 0f01 	cmp.w	sl, #1
 800cff2:	d102      	bne.n	800cffa <_strtod_l+0xa7a>
 800cff4:	2f00      	cmp	r7, #0
 800cff6:	f43f ad83 	beq.w	800cb00 <_strtod_l+0x580>
 800cffa:	4b62      	ldr	r3, [pc, #392]	; (800d184 <_strtod_l+0xc04>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	e78e      	b.n	800cf1e <_strtod_l+0x99e>
 800d000:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d180 <_strtod_l+0xc00>
 800d004:	f04f 0800 	mov.w	r8, #0
 800d008:	e7e7      	b.n	800cfda <_strtod_l+0xa5a>
 800d00a:	4b5d      	ldr	r3, [pc, #372]	; (800d180 <_strtod_l+0xc00>)
 800d00c:	4640      	mov	r0, r8
 800d00e:	4649      	mov	r1, r9
 800d010:	2200      	movs	r2, #0
 800d012:	f7f3 faf1 	bl	80005f8 <__aeabi_dmul>
 800d016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d018:	4680      	mov	r8, r0
 800d01a:	4689      	mov	r9, r1
 800d01c:	b933      	cbnz	r3, 800d02c <_strtod_l+0xaac>
 800d01e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d022:	900e      	str	r0, [sp, #56]	; 0x38
 800d024:	930f      	str	r3, [sp, #60]	; 0x3c
 800d026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d02a:	e7dd      	b.n	800cfe8 <_strtod_l+0xa68>
 800d02c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d030:	e7f9      	b.n	800d026 <_strtod_l+0xaa6>
 800d032:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1a8      	bne.n	800cf8e <_strtod_l+0xa0e>
 800d03c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d042:	0d1b      	lsrs	r3, r3, #20
 800d044:	051b      	lsls	r3, r3, #20
 800d046:	429a      	cmp	r2, r3
 800d048:	d1a1      	bne.n	800cf8e <_strtod_l+0xa0e>
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	f7f3 fe33 	bl	8000cb8 <__aeabi_d2lz>
 800d052:	f7f3 faa3 	bl	800059c <__aeabi_l2d>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	f7f3 f913 	bl	8000288 <__aeabi_dsub>
 800d062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d068:	ea43 030a 	orr.w	r3, r3, sl
 800d06c:	4313      	orrs	r3, r2
 800d06e:	4680      	mov	r8, r0
 800d070:	4689      	mov	r9, r1
 800d072:	d055      	beq.n	800d120 <_strtod_l+0xba0>
 800d074:	a336      	add	r3, pc, #216	; (adr r3, 800d150 <_strtod_l+0xbd0>)
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	f7f3 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800d07e:	2800      	cmp	r0, #0
 800d080:	f47f acd0 	bne.w	800ca24 <_strtod_l+0x4a4>
 800d084:	a334      	add	r3, pc, #208	; (adr r3, 800d158 <_strtod_l+0xbd8>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	4640      	mov	r0, r8
 800d08c:	4649      	mov	r1, r9
 800d08e:	f7f3 fd43 	bl	8000b18 <__aeabi_dcmpgt>
 800d092:	2800      	cmp	r0, #0
 800d094:	f43f af7b 	beq.w	800cf8e <_strtod_l+0xa0e>
 800d098:	e4c4      	b.n	800ca24 <_strtod_l+0x4a4>
 800d09a:	9b04      	ldr	r3, [sp, #16]
 800d09c:	b333      	cbz	r3, 800d0ec <_strtod_l+0xb6c>
 800d09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d0a4:	d822      	bhi.n	800d0ec <_strtod_l+0xb6c>
 800d0a6:	a32e      	add	r3, pc, #184	; (adr r3, 800d160 <_strtod_l+0xbe0>)
 800d0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	f7f3 fd1e 	bl	8000af0 <__aeabi_dcmple>
 800d0b4:	b1a0      	cbz	r0, 800d0e0 <_strtod_l+0xb60>
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	f7f3 fd75 	bl	8000ba8 <__aeabi_d2uiz>
 800d0be:	2801      	cmp	r0, #1
 800d0c0:	bf38      	it	cc
 800d0c2:	2001      	movcc	r0, #1
 800d0c4:	f7f3 fa1e 	bl	8000504 <__aeabi_ui2d>
 800d0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ca:	4680      	mov	r8, r0
 800d0cc:	4689      	mov	r9, r1
 800d0ce:	bb23      	cbnz	r3, 800d11a <_strtod_l+0xb9a>
 800d0d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0d4:	9010      	str	r0, [sp, #64]	; 0x40
 800d0d6:	9311      	str	r3, [sp, #68]	; 0x44
 800d0d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d0dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d0e8:	1a9b      	subs	r3, r3, r2
 800d0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0f0:	eeb0 0a48 	vmov.f32	s0, s16
 800d0f4:	eef0 0a68 	vmov.f32	s1, s17
 800d0f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0fc:	f001 fe56 	bl	800edac <__ulp>
 800d100:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d104:	ec53 2b10 	vmov	r2, r3, d0
 800d108:	f7f3 fa76 	bl	80005f8 <__aeabi_dmul>
 800d10c:	ec53 2b18 	vmov	r2, r3, d8
 800d110:	f7f3 f8bc 	bl	800028c <__adddf3>
 800d114:	4682      	mov	sl, r0
 800d116:	468b      	mov	fp, r1
 800d118:	e78d      	b.n	800d036 <_strtod_l+0xab6>
 800d11a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d11e:	e7db      	b.n	800d0d8 <_strtod_l+0xb58>
 800d120:	a311      	add	r3, pc, #68	; (adr r3, 800d168 <_strtod_l+0xbe8>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 fcd9 	bl	8000adc <__aeabi_dcmplt>
 800d12a:	e7b2      	b.n	800d092 <_strtod_l+0xb12>
 800d12c:	2300      	movs	r3, #0
 800d12e:	930a      	str	r3, [sp, #40]	; 0x28
 800d130:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d132:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	f7ff ba6b 	b.w	800c610 <_strtod_l+0x90>
 800d13a:	2a65      	cmp	r2, #101	; 0x65
 800d13c:	f43f ab5f 	beq.w	800c7fe <_strtod_l+0x27e>
 800d140:	2a45      	cmp	r2, #69	; 0x45
 800d142:	f43f ab5c 	beq.w	800c7fe <_strtod_l+0x27e>
 800d146:	2301      	movs	r3, #1
 800d148:	f7ff bb94 	b.w	800c874 <_strtod_l+0x2f4>
 800d14c:	f3af 8000 	nop.w
 800d150:	94a03595 	.word	0x94a03595
 800d154:	3fdfffff 	.word	0x3fdfffff
 800d158:	35afe535 	.word	0x35afe535
 800d15c:	3fe00000 	.word	0x3fe00000
 800d160:	ffc00000 	.word	0xffc00000
 800d164:	41dfffff 	.word	0x41dfffff
 800d168:	94a03595 	.word	0x94a03595
 800d16c:	3fcfffff 	.word	0x3fcfffff
 800d170:	3ff00000 	.word	0x3ff00000
 800d174:	7ff00000 	.word	0x7ff00000
 800d178:	7fe00000 	.word	0x7fe00000
 800d17c:	7c9fffff 	.word	0x7c9fffff
 800d180:	3fe00000 	.word	0x3fe00000
 800d184:	bff00000 	.word	0xbff00000
 800d188:	7fefffff 	.word	0x7fefffff

0800d18c <_strtod_r>:
 800d18c:	4b01      	ldr	r3, [pc, #4]	; (800d194 <_strtod_r+0x8>)
 800d18e:	f7ff b9f7 	b.w	800c580 <_strtod_l>
 800d192:	bf00      	nop
 800d194:	200000e4 	.word	0x200000e4

0800d198 <_strtol_l.constprop.0>:
 800d198:	2b01      	cmp	r3, #1
 800d19a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d19e:	d001      	beq.n	800d1a4 <_strtol_l.constprop.0+0xc>
 800d1a0:	2b24      	cmp	r3, #36	; 0x24
 800d1a2:	d906      	bls.n	800d1b2 <_strtol_l.constprop.0+0x1a>
 800d1a4:	f7fe faaa 	bl	800b6fc <__errno>
 800d1a8:	2316      	movs	r3, #22
 800d1aa:	6003      	str	r3, [r0, #0]
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d298 <_strtol_l.constprop.0+0x100>
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	462e      	mov	r6, r5
 800d1ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d1c2:	f017 0708 	ands.w	r7, r7, #8
 800d1c6:	d1f7      	bne.n	800d1b8 <_strtol_l.constprop.0+0x20>
 800d1c8:	2c2d      	cmp	r4, #45	; 0x2d
 800d1ca:	d132      	bne.n	800d232 <_strtol_l.constprop.0+0x9a>
 800d1cc:	782c      	ldrb	r4, [r5, #0]
 800d1ce:	2701      	movs	r7, #1
 800d1d0:	1cb5      	adds	r5, r6, #2
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d05b      	beq.n	800d28e <_strtol_l.constprop.0+0xf6>
 800d1d6:	2b10      	cmp	r3, #16
 800d1d8:	d109      	bne.n	800d1ee <_strtol_l.constprop.0+0x56>
 800d1da:	2c30      	cmp	r4, #48	; 0x30
 800d1dc:	d107      	bne.n	800d1ee <_strtol_l.constprop.0+0x56>
 800d1de:	782c      	ldrb	r4, [r5, #0]
 800d1e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d1e4:	2c58      	cmp	r4, #88	; 0x58
 800d1e6:	d14d      	bne.n	800d284 <_strtol_l.constprop.0+0xec>
 800d1e8:	786c      	ldrb	r4, [r5, #1]
 800d1ea:	2310      	movs	r3, #16
 800d1ec:	3502      	adds	r5, #2
 800d1ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d1f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d1f6:	f04f 0c00 	mov.w	ip, #0
 800d1fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800d1fe:	4666      	mov	r6, ip
 800d200:	fb03 8a19 	mls	sl, r3, r9, r8
 800d204:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d208:	f1be 0f09 	cmp.w	lr, #9
 800d20c:	d816      	bhi.n	800d23c <_strtol_l.constprop.0+0xa4>
 800d20e:	4674      	mov	r4, lr
 800d210:	42a3      	cmp	r3, r4
 800d212:	dd24      	ble.n	800d25e <_strtol_l.constprop.0+0xc6>
 800d214:	f1bc 0f00 	cmp.w	ip, #0
 800d218:	db1e      	blt.n	800d258 <_strtol_l.constprop.0+0xc0>
 800d21a:	45b1      	cmp	r9, r6
 800d21c:	d31c      	bcc.n	800d258 <_strtol_l.constprop.0+0xc0>
 800d21e:	d101      	bne.n	800d224 <_strtol_l.constprop.0+0x8c>
 800d220:	45a2      	cmp	sl, r4
 800d222:	db19      	blt.n	800d258 <_strtol_l.constprop.0+0xc0>
 800d224:	fb06 4603 	mla	r6, r6, r3, r4
 800d228:	f04f 0c01 	mov.w	ip, #1
 800d22c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d230:	e7e8      	b.n	800d204 <_strtol_l.constprop.0+0x6c>
 800d232:	2c2b      	cmp	r4, #43	; 0x2b
 800d234:	bf04      	itt	eq
 800d236:	782c      	ldrbeq	r4, [r5, #0]
 800d238:	1cb5      	addeq	r5, r6, #2
 800d23a:	e7ca      	b.n	800d1d2 <_strtol_l.constprop.0+0x3a>
 800d23c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d240:	f1be 0f19 	cmp.w	lr, #25
 800d244:	d801      	bhi.n	800d24a <_strtol_l.constprop.0+0xb2>
 800d246:	3c37      	subs	r4, #55	; 0x37
 800d248:	e7e2      	b.n	800d210 <_strtol_l.constprop.0+0x78>
 800d24a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d24e:	f1be 0f19 	cmp.w	lr, #25
 800d252:	d804      	bhi.n	800d25e <_strtol_l.constprop.0+0xc6>
 800d254:	3c57      	subs	r4, #87	; 0x57
 800d256:	e7db      	b.n	800d210 <_strtol_l.constprop.0+0x78>
 800d258:	f04f 3cff 	mov.w	ip, #4294967295
 800d25c:	e7e6      	b.n	800d22c <_strtol_l.constprop.0+0x94>
 800d25e:	f1bc 0f00 	cmp.w	ip, #0
 800d262:	da05      	bge.n	800d270 <_strtol_l.constprop.0+0xd8>
 800d264:	2322      	movs	r3, #34	; 0x22
 800d266:	6003      	str	r3, [r0, #0]
 800d268:	4646      	mov	r6, r8
 800d26a:	b942      	cbnz	r2, 800d27e <_strtol_l.constprop.0+0xe6>
 800d26c:	4630      	mov	r0, r6
 800d26e:	e79e      	b.n	800d1ae <_strtol_l.constprop.0+0x16>
 800d270:	b107      	cbz	r7, 800d274 <_strtol_l.constprop.0+0xdc>
 800d272:	4276      	negs	r6, r6
 800d274:	2a00      	cmp	r2, #0
 800d276:	d0f9      	beq.n	800d26c <_strtol_l.constprop.0+0xd4>
 800d278:	f1bc 0f00 	cmp.w	ip, #0
 800d27c:	d000      	beq.n	800d280 <_strtol_l.constprop.0+0xe8>
 800d27e:	1e69      	subs	r1, r5, #1
 800d280:	6011      	str	r1, [r2, #0]
 800d282:	e7f3      	b.n	800d26c <_strtol_l.constprop.0+0xd4>
 800d284:	2430      	movs	r4, #48	; 0x30
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1b1      	bne.n	800d1ee <_strtol_l.constprop.0+0x56>
 800d28a:	2308      	movs	r3, #8
 800d28c:	e7af      	b.n	800d1ee <_strtol_l.constprop.0+0x56>
 800d28e:	2c30      	cmp	r4, #48	; 0x30
 800d290:	d0a5      	beq.n	800d1de <_strtol_l.constprop.0+0x46>
 800d292:	230a      	movs	r3, #10
 800d294:	e7ab      	b.n	800d1ee <_strtol_l.constprop.0+0x56>
 800d296:	bf00      	nop
 800d298:	0801f5b1 	.word	0x0801f5b1

0800d29c <_strtol_r>:
 800d29c:	f7ff bf7c 	b.w	800d198 <_strtol_l.constprop.0>

0800d2a0 <strtol>:
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	460a      	mov	r2, r1
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	4802      	ldr	r0, [pc, #8]	; (800d2b0 <strtol+0x10>)
 800d2a8:	6800      	ldr	r0, [r0, #0]
 800d2aa:	f7ff bf75 	b.w	800d198 <_strtol_l.constprop.0>
 800d2ae:	bf00      	nop
 800d2b0:	2000007c 	.word	0x2000007c

0800d2b4 <quorem>:
 800d2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b8:	6903      	ldr	r3, [r0, #16]
 800d2ba:	690c      	ldr	r4, [r1, #16]
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	4607      	mov	r7, r0
 800d2c0:	f2c0 8081 	blt.w	800d3c6 <quorem+0x112>
 800d2c4:	3c01      	subs	r4, #1
 800d2c6:	f101 0814 	add.w	r8, r1, #20
 800d2ca:	f100 0514 	add.w	r5, r0, #20
 800d2ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2d2:	9301      	str	r3, [sp, #4]
 800d2d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2ec:	d331      	bcc.n	800d352 <quorem+0x9e>
 800d2ee:	f04f 0e00 	mov.w	lr, #0
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	46ac      	mov	ip, r5
 800d2f6:	46f2      	mov	sl, lr
 800d2f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2fc:	b293      	uxth	r3, r2
 800d2fe:	fb06 e303 	mla	r3, r6, r3, lr
 800d302:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d306:	b29b      	uxth	r3, r3
 800d308:	ebaa 0303 	sub.w	r3, sl, r3
 800d30c:	f8dc a000 	ldr.w	sl, [ip]
 800d310:	0c12      	lsrs	r2, r2, #16
 800d312:	fa13 f38a 	uxtah	r3, r3, sl
 800d316:	fb06 e202 	mla	r2, r6, r2, lr
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	9b00      	ldr	r3, [sp, #0]
 800d31e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d322:	b292      	uxth	r2, r2
 800d324:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d32c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d330:	4581      	cmp	r9, r0
 800d332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d336:	f84c 3b04 	str.w	r3, [ip], #4
 800d33a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d33e:	d2db      	bcs.n	800d2f8 <quorem+0x44>
 800d340:	f855 300b 	ldr.w	r3, [r5, fp]
 800d344:	b92b      	cbnz	r3, 800d352 <quorem+0x9e>
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	3b04      	subs	r3, #4
 800d34a:	429d      	cmp	r5, r3
 800d34c:	461a      	mov	r2, r3
 800d34e:	d32e      	bcc.n	800d3ae <quorem+0xfa>
 800d350:	613c      	str	r4, [r7, #16]
 800d352:	4638      	mov	r0, r7
 800d354:	f001 fc84 	bl	800ec60 <__mcmp>
 800d358:	2800      	cmp	r0, #0
 800d35a:	db24      	blt.n	800d3a6 <quorem+0xf2>
 800d35c:	3601      	adds	r6, #1
 800d35e:	4628      	mov	r0, r5
 800d360:	f04f 0c00 	mov.w	ip, #0
 800d364:	f858 2b04 	ldr.w	r2, [r8], #4
 800d368:	f8d0 e000 	ldr.w	lr, [r0]
 800d36c:	b293      	uxth	r3, r2
 800d36e:	ebac 0303 	sub.w	r3, ip, r3
 800d372:	0c12      	lsrs	r2, r2, #16
 800d374:	fa13 f38e 	uxtah	r3, r3, lr
 800d378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d37c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d380:	b29b      	uxth	r3, r3
 800d382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d386:	45c1      	cmp	r9, r8
 800d388:	f840 3b04 	str.w	r3, [r0], #4
 800d38c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d390:	d2e8      	bcs.n	800d364 <quorem+0xb0>
 800d392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d39a:	b922      	cbnz	r2, 800d3a6 <quorem+0xf2>
 800d39c:	3b04      	subs	r3, #4
 800d39e:	429d      	cmp	r5, r3
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	d30a      	bcc.n	800d3ba <quorem+0x106>
 800d3a4:	613c      	str	r4, [r7, #16]
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	b003      	add	sp, #12
 800d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	6812      	ldr	r2, [r2, #0]
 800d3b0:	3b04      	subs	r3, #4
 800d3b2:	2a00      	cmp	r2, #0
 800d3b4:	d1cc      	bne.n	800d350 <quorem+0x9c>
 800d3b6:	3c01      	subs	r4, #1
 800d3b8:	e7c7      	b.n	800d34a <quorem+0x96>
 800d3ba:	6812      	ldr	r2, [r2, #0]
 800d3bc:	3b04      	subs	r3, #4
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	d1f0      	bne.n	800d3a4 <quorem+0xf0>
 800d3c2:	3c01      	subs	r4, #1
 800d3c4:	e7eb      	b.n	800d39e <quorem+0xea>
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	e7ee      	b.n	800d3a8 <quorem+0xf4>
 800d3ca:	0000      	movs	r0, r0
 800d3cc:	0000      	movs	r0, r0
	...

0800d3d0 <_dtoa_r>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	ed2d 8b04 	vpush	{d8-d9}
 800d3d8:	ec57 6b10 	vmov	r6, r7, d0
 800d3dc:	b093      	sub	sp, #76	; 0x4c
 800d3de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3e4:	9106      	str	r1, [sp, #24]
 800d3e6:	ee10 aa10 	vmov	sl, s0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d3f0:	46bb      	mov	fp, r7
 800d3f2:	b975      	cbnz	r5, 800d412 <_dtoa_r+0x42>
 800d3f4:	2010      	movs	r0, #16
 800d3f6:	f001 f94d 	bl	800e694 <malloc>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	6260      	str	r0, [r4, #36]	; 0x24
 800d3fe:	b920      	cbnz	r0, 800d40a <_dtoa_r+0x3a>
 800d400:	4ba7      	ldr	r3, [pc, #668]	; (800d6a0 <_dtoa_r+0x2d0>)
 800d402:	21ea      	movs	r1, #234	; 0xea
 800d404:	48a7      	ldr	r0, [pc, #668]	; (800d6a4 <_dtoa_r+0x2d4>)
 800d406:	f002 f8ad 	bl	800f564 <__assert_func>
 800d40a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d40e:	6005      	str	r5, [r0, #0]
 800d410:	60c5      	str	r5, [r0, #12]
 800d412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d414:	6819      	ldr	r1, [r3, #0]
 800d416:	b151      	cbz	r1, 800d42e <_dtoa_r+0x5e>
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	604a      	str	r2, [r1, #4]
 800d41c:	2301      	movs	r3, #1
 800d41e:	4093      	lsls	r3, r2
 800d420:	608b      	str	r3, [r1, #8]
 800d422:	4620      	mov	r0, r4
 800d424:	f001 f990 	bl	800e748 <_Bfree>
 800d428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
 800d42e:	1e3b      	subs	r3, r7, #0
 800d430:	bfaa      	itet	ge
 800d432:	2300      	movge	r3, #0
 800d434:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d438:	f8c8 3000 	strge.w	r3, [r8]
 800d43c:	4b9a      	ldr	r3, [pc, #616]	; (800d6a8 <_dtoa_r+0x2d8>)
 800d43e:	bfbc      	itt	lt
 800d440:	2201      	movlt	r2, #1
 800d442:	f8c8 2000 	strlt.w	r2, [r8]
 800d446:	ea33 030b 	bics.w	r3, r3, fp
 800d44a:	d11b      	bne.n	800d484 <_dtoa_r+0xb4>
 800d44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d44e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d458:	4333      	orrs	r3, r6
 800d45a:	f000 8592 	beq.w	800df82 <_dtoa_r+0xbb2>
 800d45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d460:	b963      	cbnz	r3, 800d47c <_dtoa_r+0xac>
 800d462:	4b92      	ldr	r3, [pc, #584]	; (800d6ac <_dtoa_r+0x2dc>)
 800d464:	e022      	b.n	800d4ac <_dtoa_r+0xdc>
 800d466:	4b92      	ldr	r3, [pc, #584]	; (800d6b0 <_dtoa_r+0x2e0>)
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	3308      	adds	r3, #8
 800d46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	9801      	ldr	r0, [sp, #4]
 800d472:	b013      	add	sp, #76	; 0x4c
 800d474:	ecbd 8b04 	vpop	{d8-d9}
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	4b8b      	ldr	r3, [pc, #556]	; (800d6ac <_dtoa_r+0x2dc>)
 800d47e:	9301      	str	r3, [sp, #4]
 800d480:	3303      	adds	r3, #3
 800d482:	e7f3      	b.n	800d46c <_dtoa_r+0x9c>
 800d484:	2200      	movs	r2, #0
 800d486:	2300      	movs	r3, #0
 800d488:	4650      	mov	r0, sl
 800d48a:	4659      	mov	r1, fp
 800d48c:	f7f3 fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d490:	ec4b ab19 	vmov	d9, sl, fp
 800d494:	4680      	mov	r8, r0
 800d496:	b158      	cbz	r0, 800d4b0 <_dtoa_r+0xe0>
 800d498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d49a:	2301      	movs	r3, #1
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 856b 	beq.w	800df7c <_dtoa_r+0xbac>
 800d4a6:	4883      	ldr	r0, [pc, #524]	; (800d6b4 <_dtoa_r+0x2e4>)
 800d4a8:	6018      	str	r0, [r3, #0]
 800d4aa:	1e43      	subs	r3, r0, #1
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	e7df      	b.n	800d470 <_dtoa_r+0xa0>
 800d4b0:	ec4b ab10 	vmov	d0, sl, fp
 800d4b4:	aa10      	add	r2, sp, #64	; 0x40
 800d4b6:	a911      	add	r1, sp, #68	; 0x44
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f001 fcf3 	bl	800eea4 <__d2b>
 800d4be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d4c2:	ee08 0a10 	vmov	s16, r0
 800d4c6:	2d00      	cmp	r5, #0
 800d4c8:	f000 8084 	beq.w	800d5d4 <_dtoa_r+0x204>
 800d4cc:	ee19 3a90 	vmov	r3, s19
 800d4d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d4d8:	4656      	mov	r6, sl
 800d4da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d4de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d4e6:	4b74      	ldr	r3, [pc, #464]	; (800d6b8 <_dtoa_r+0x2e8>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	f7f2 fecb 	bl	8000288 <__aeabi_dsub>
 800d4f2:	a365      	add	r3, pc, #404	; (adr r3, 800d688 <_dtoa_r+0x2b8>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	f7f3 f87e 	bl	80005f8 <__aeabi_dmul>
 800d4fc:	a364      	add	r3, pc, #400	; (adr r3, 800d690 <_dtoa_r+0x2c0>)
 800d4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d502:	f7f2 fec3 	bl	800028c <__adddf3>
 800d506:	4606      	mov	r6, r0
 800d508:	4628      	mov	r0, r5
 800d50a:	460f      	mov	r7, r1
 800d50c:	f7f3 f80a 	bl	8000524 <__aeabi_i2d>
 800d510:	a361      	add	r3, pc, #388	; (adr r3, 800d698 <_dtoa_r+0x2c8>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f7f3 f86f 	bl	80005f8 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4630      	mov	r0, r6
 800d520:	4639      	mov	r1, r7
 800d522:	f7f2 feb3 	bl	800028c <__adddf3>
 800d526:	4606      	mov	r6, r0
 800d528:	460f      	mov	r7, r1
 800d52a:	f7f3 fb15 	bl	8000b58 <__aeabi_d2iz>
 800d52e:	2200      	movs	r2, #0
 800d530:	9000      	str	r0, [sp, #0]
 800d532:	2300      	movs	r3, #0
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	f7f3 fad0 	bl	8000adc <__aeabi_dcmplt>
 800d53c:	b150      	cbz	r0, 800d554 <_dtoa_r+0x184>
 800d53e:	9800      	ldr	r0, [sp, #0]
 800d540:	f7f2 fff0 	bl	8000524 <__aeabi_i2d>
 800d544:	4632      	mov	r2, r6
 800d546:	463b      	mov	r3, r7
 800d548:	f7f3 fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d54c:	b910      	cbnz	r0, 800d554 <_dtoa_r+0x184>
 800d54e:	9b00      	ldr	r3, [sp, #0]
 800d550:	3b01      	subs	r3, #1
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	9b00      	ldr	r3, [sp, #0]
 800d556:	2b16      	cmp	r3, #22
 800d558:	d85a      	bhi.n	800d610 <_dtoa_r+0x240>
 800d55a:	9a00      	ldr	r2, [sp, #0]
 800d55c:	4b57      	ldr	r3, [pc, #348]	; (800d6bc <_dtoa_r+0x2ec>)
 800d55e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	ec51 0b19 	vmov	r0, r1, d9
 800d56a:	f7f3 fab7 	bl	8000adc <__aeabi_dcmplt>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d050      	beq.n	800d614 <_dtoa_r+0x244>
 800d572:	9b00      	ldr	r3, [sp, #0]
 800d574:	3b01      	subs	r3, #1
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	2300      	movs	r3, #0
 800d57a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d57e:	1b5d      	subs	r5, r3, r5
 800d580:	1e6b      	subs	r3, r5, #1
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	bf45      	ittet	mi
 800d586:	f1c5 0301 	rsbmi	r3, r5, #1
 800d58a:	9304      	strmi	r3, [sp, #16]
 800d58c:	2300      	movpl	r3, #0
 800d58e:	2300      	movmi	r3, #0
 800d590:	bf4c      	ite	mi
 800d592:	9305      	strmi	r3, [sp, #20]
 800d594:	9304      	strpl	r3, [sp, #16]
 800d596:	9b00      	ldr	r3, [sp, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	db3d      	blt.n	800d618 <_dtoa_r+0x248>
 800d59c:	9b05      	ldr	r3, [sp, #20]
 800d59e:	9a00      	ldr	r2, [sp, #0]
 800d5a0:	920a      	str	r2, [sp, #40]	; 0x28
 800d5a2:	4413      	add	r3, r2
 800d5a4:	9305      	str	r3, [sp, #20]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	9b06      	ldr	r3, [sp, #24]
 800d5ac:	2b09      	cmp	r3, #9
 800d5ae:	f200 8089 	bhi.w	800d6c4 <_dtoa_r+0x2f4>
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	bfc4      	itt	gt
 800d5b6:	3b04      	subgt	r3, #4
 800d5b8:	9306      	strgt	r3, [sp, #24]
 800d5ba:	9b06      	ldr	r3, [sp, #24]
 800d5bc:	f1a3 0302 	sub.w	r3, r3, #2
 800d5c0:	bfcc      	ite	gt
 800d5c2:	2500      	movgt	r5, #0
 800d5c4:	2501      	movle	r5, #1
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	f200 8087 	bhi.w	800d6da <_dtoa_r+0x30a>
 800d5cc:	e8df f003 	tbb	[pc, r3]
 800d5d0:	59383a2d 	.word	0x59383a2d
 800d5d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d5d8:	441d      	add	r5, r3
 800d5da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5de:	2b20      	cmp	r3, #32
 800d5e0:	bfc1      	itttt	gt
 800d5e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d5ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800d5ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d5f2:	bfda      	itte	le
 800d5f4:	f1c3 0320 	rsble	r3, r3, #32
 800d5f8:	fa06 f003 	lslle.w	r0, r6, r3
 800d5fc:	4318      	orrgt	r0, r3
 800d5fe:	f7f2 ff81 	bl	8000504 <__aeabi_ui2d>
 800d602:	2301      	movs	r3, #1
 800d604:	4606      	mov	r6, r0
 800d606:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d60a:	3d01      	subs	r5, #1
 800d60c:	930e      	str	r3, [sp, #56]	; 0x38
 800d60e:	e76a      	b.n	800d4e6 <_dtoa_r+0x116>
 800d610:	2301      	movs	r3, #1
 800d612:	e7b2      	b.n	800d57a <_dtoa_r+0x1aa>
 800d614:	900b      	str	r0, [sp, #44]	; 0x2c
 800d616:	e7b1      	b.n	800d57c <_dtoa_r+0x1ac>
 800d618:	9b04      	ldr	r3, [sp, #16]
 800d61a:	9a00      	ldr	r2, [sp, #0]
 800d61c:	1a9b      	subs	r3, r3, r2
 800d61e:	9304      	str	r3, [sp, #16]
 800d620:	4253      	negs	r3, r2
 800d622:	9307      	str	r3, [sp, #28]
 800d624:	2300      	movs	r3, #0
 800d626:	930a      	str	r3, [sp, #40]	; 0x28
 800d628:	e7bf      	b.n	800d5aa <_dtoa_r+0x1da>
 800d62a:	2300      	movs	r3, #0
 800d62c:	9308      	str	r3, [sp, #32]
 800d62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d630:	2b00      	cmp	r3, #0
 800d632:	dc55      	bgt.n	800d6e0 <_dtoa_r+0x310>
 800d634:	2301      	movs	r3, #1
 800d636:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d63a:	461a      	mov	r2, r3
 800d63c:	9209      	str	r2, [sp, #36]	; 0x24
 800d63e:	e00c      	b.n	800d65a <_dtoa_r+0x28a>
 800d640:	2301      	movs	r3, #1
 800d642:	e7f3      	b.n	800d62c <_dtoa_r+0x25c>
 800d644:	2300      	movs	r3, #0
 800d646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d648:	9308      	str	r3, [sp, #32]
 800d64a:	9b00      	ldr	r3, [sp, #0]
 800d64c:	4413      	add	r3, r2
 800d64e:	9302      	str	r3, [sp, #8]
 800d650:	3301      	adds	r3, #1
 800d652:	2b01      	cmp	r3, #1
 800d654:	9303      	str	r3, [sp, #12]
 800d656:	bfb8      	it	lt
 800d658:	2301      	movlt	r3, #1
 800d65a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d65c:	2200      	movs	r2, #0
 800d65e:	6042      	str	r2, [r0, #4]
 800d660:	2204      	movs	r2, #4
 800d662:	f102 0614 	add.w	r6, r2, #20
 800d666:	429e      	cmp	r6, r3
 800d668:	6841      	ldr	r1, [r0, #4]
 800d66a:	d93d      	bls.n	800d6e8 <_dtoa_r+0x318>
 800d66c:	4620      	mov	r0, r4
 800d66e:	f001 f82b 	bl	800e6c8 <_Balloc>
 800d672:	9001      	str	r0, [sp, #4]
 800d674:	2800      	cmp	r0, #0
 800d676:	d13b      	bne.n	800d6f0 <_dtoa_r+0x320>
 800d678:	4b11      	ldr	r3, [pc, #68]	; (800d6c0 <_dtoa_r+0x2f0>)
 800d67a:	4602      	mov	r2, r0
 800d67c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d680:	e6c0      	b.n	800d404 <_dtoa_r+0x34>
 800d682:	2301      	movs	r3, #1
 800d684:	e7df      	b.n	800d646 <_dtoa_r+0x276>
 800d686:	bf00      	nop
 800d688:	636f4361 	.word	0x636f4361
 800d68c:	3fd287a7 	.word	0x3fd287a7
 800d690:	8b60c8b3 	.word	0x8b60c8b3
 800d694:	3fc68a28 	.word	0x3fc68a28
 800d698:	509f79fb 	.word	0x509f79fb
 800d69c:	3fd34413 	.word	0x3fd34413
 800d6a0:	0801f6be 	.word	0x0801f6be
 800d6a4:	0801f6d5 	.word	0x0801f6d5
 800d6a8:	7ff00000 	.word	0x7ff00000
 800d6ac:	0801f6ba 	.word	0x0801f6ba
 800d6b0:	0801f6b1 	.word	0x0801f6b1
 800d6b4:	0801f535 	.word	0x0801f535
 800d6b8:	3ff80000 	.word	0x3ff80000
 800d6bc:	0801f840 	.word	0x0801f840
 800d6c0:	0801f730 	.word	0x0801f730
 800d6c4:	2501      	movs	r5, #1
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	9306      	str	r3, [sp, #24]
 800d6ca:	9508      	str	r5, [sp, #32]
 800d6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2312      	movs	r3, #18
 800d6d8:	e7b0      	b.n	800d63c <_dtoa_r+0x26c>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	9308      	str	r3, [sp, #32]
 800d6de:	e7f5      	b.n	800d6cc <_dtoa_r+0x2fc>
 800d6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6e6:	e7b8      	b.n	800d65a <_dtoa_r+0x28a>
 800d6e8:	3101      	adds	r1, #1
 800d6ea:	6041      	str	r1, [r0, #4]
 800d6ec:	0052      	lsls	r2, r2, #1
 800d6ee:	e7b8      	b.n	800d662 <_dtoa_r+0x292>
 800d6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f2:	9a01      	ldr	r2, [sp, #4]
 800d6f4:	601a      	str	r2, [r3, #0]
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	2b0e      	cmp	r3, #14
 800d6fa:	f200 809d 	bhi.w	800d838 <_dtoa_r+0x468>
 800d6fe:	2d00      	cmp	r5, #0
 800d700:	f000 809a 	beq.w	800d838 <_dtoa_r+0x468>
 800d704:	9b00      	ldr	r3, [sp, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	dd32      	ble.n	800d770 <_dtoa_r+0x3a0>
 800d70a:	4ab7      	ldr	r2, [pc, #732]	; (800d9e8 <_dtoa_r+0x618>)
 800d70c:	f003 030f 	and.w	r3, r3, #15
 800d710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d714:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d718:	9b00      	ldr	r3, [sp, #0]
 800d71a:	05d8      	lsls	r0, r3, #23
 800d71c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d720:	d516      	bpl.n	800d750 <_dtoa_r+0x380>
 800d722:	4bb2      	ldr	r3, [pc, #712]	; (800d9ec <_dtoa_r+0x61c>)
 800d724:	ec51 0b19 	vmov	r0, r1, d9
 800d728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d72c:	f7f3 f88e 	bl	800084c <__aeabi_ddiv>
 800d730:	f007 070f 	and.w	r7, r7, #15
 800d734:	4682      	mov	sl, r0
 800d736:	468b      	mov	fp, r1
 800d738:	2503      	movs	r5, #3
 800d73a:	4eac      	ldr	r6, [pc, #688]	; (800d9ec <_dtoa_r+0x61c>)
 800d73c:	b957      	cbnz	r7, 800d754 <_dtoa_r+0x384>
 800d73e:	4642      	mov	r2, r8
 800d740:	464b      	mov	r3, r9
 800d742:	4650      	mov	r0, sl
 800d744:	4659      	mov	r1, fp
 800d746:	f7f3 f881 	bl	800084c <__aeabi_ddiv>
 800d74a:	4682      	mov	sl, r0
 800d74c:	468b      	mov	fp, r1
 800d74e:	e028      	b.n	800d7a2 <_dtoa_r+0x3d2>
 800d750:	2502      	movs	r5, #2
 800d752:	e7f2      	b.n	800d73a <_dtoa_r+0x36a>
 800d754:	07f9      	lsls	r1, r7, #31
 800d756:	d508      	bpl.n	800d76a <_dtoa_r+0x39a>
 800d758:	4640      	mov	r0, r8
 800d75a:	4649      	mov	r1, r9
 800d75c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d760:	f7f2 ff4a 	bl	80005f8 <__aeabi_dmul>
 800d764:	3501      	adds	r5, #1
 800d766:	4680      	mov	r8, r0
 800d768:	4689      	mov	r9, r1
 800d76a:	107f      	asrs	r7, r7, #1
 800d76c:	3608      	adds	r6, #8
 800d76e:	e7e5      	b.n	800d73c <_dtoa_r+0x36c>
 800d770:	f000 809b 	beq.w	800d8aa <_dtoa_r+0x4da>
 800d774:	9b00      	ldr	r3, [sp, #0]
 800d776:	4f9d      	ldr	r7, [pc, #628]	; (800d9ec <_dtoa_r+0x61c>)
 800d778:	425e      	negs	r6, r3
 800d77a:	4b9b      	ldr	r3, [pc, #620]	; (800d9e8 <_dtoa_r+0x618>)
 800d77c:	f006 020f 	and.w	r2, r6, #15
 800d780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	ec51 0b19 	vmov	r0, r1, d9
 800d78c:	f7f2 ff34 	bl	80005f8 <__aeabi_dmul>
 800d790:	1136      	asrs	r6, r6, #4
 800d792:	4682      	mov	sl, r0
 800d794:	468b      	mov	fp, r1
 800d796:	2300      	movs	r3, #0
 800d798:	2502      	movs	r5, #2
 800d79a:	2e00      	cmp	r6, #0
 800d79c:	d17a      	bne.n	800d894 <_dtoa_r+0x4c4>
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1d3      	bne.n	800d74a <_dtoa_r+0x37a>
 800d7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f000 8082 	beq.w	800d8ae <_dtoa_r+0x4de>
 800d7aa:	4b91      	ldr	r3, [pc, #580]	; (800d9f0 <_dtoa_r+0x620>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4650      	mov	r0, sl
 800d7b0:	4659      	mov	r1, fp
 800d7b2:	f7f3 f993 	bl	8000adc <__aeabi_dcmplt>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d079      	beq.n	800d8ae <_dtoa_r+0x4de>
 800d7ba:	9b03      	ldr	r3, [sp, #12]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d076      	beq.n	800d8ae <_dtoa_r+0x4de>
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	dd36      	ble.n	800d834 <_dtoa_r+0x464>
 800d7c6:	9b00      	ldr	r3, [sp, #0]
 800d7c8:	4650      	mov	r0, sl
 800d7ca:	4659      	mov	r1, fp
 800d7cc:	1e5f      	subs	r7, r3, #1
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	4b88      	ldr	r3, [pc, #544]	; (800d9f4 <_dtoa_r+0x624>)
 800d7d2:	f7f2 ff11 	bl	80005f8 <__aeabi_dmul>
 800d7d6:	9e02      	ldr	r6, [sp, #8]
 800d7d8:	4682      	mov	sl, r0
 800d7da:	468b      	mov	fp, r1
 800d7dc:	3501      	adds	r5, #1
 800d7de:	4628      	mov	r0, r5
 800d7e0:	f7f2 fea0 	bl	8000524 <__aeabi_i2d>
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	465b      	mov	r3, fp
 800d7e8:	f7f2 ff06 	bl	80005f8 <__aeabi_dmul>
 800d7ec:	4b82      	ldr	r3, [pc, #520]	; (800d9f8 <_dtoa_r+0x628>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f7f2 fd4c 	bl	800028c <__adddf3>
 800d7f4:	46d0      	mov	r8, sl
 800d7f6:	46d9      	mov	r9, fp
 800d7f8:	4682      	mov	sl, r0
 800d7fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d7fe:	2e00      	cmp	r6, #0
 800d800:	d158      	bne.n	800d8b4 <_dtoa_r+0x4e4>
 800d802:	4b7e      	ldr	r3, [pc, #504]	; (800d9fc <_dtoa_r+0x62c>)
 800d804:	2200      	movs	r2, #0
 800d806:	4640      	mov	r0, r8
 800d808:	4649      	mov	r1, r9
 800d80a:	f7f2 fd3d 	bl	8000288 <__aeabi_dsub>
 800d80e:	4652      	mov	r2, sl
 800d810:	465b      	mov	r3, fp
 800d812:	4680      	mov	r8, r0
 800d814:	4689      	mov	r9, r1
 800d816:	f7f3 f97f 	bl	8000b18 <__aeabi_dcmpgt>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	f040 8295 	bne.w	800dd4a <_dtoa_r+0x97a>
 800d820:	4652      	mov	r2, sl
 800d822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d826:	4640      	mov	r0, r8
 800d828:	4649      	mov	r1, r9
 800d82a:	f7f3 f957 	bl	8000adc <__aeabi_dcmplt>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f040 8289 	bne.w	800dd46 <_dtoa_r+0x976>
 800d834:	ec5b ab19 	vmov	sl, fp, d9
 800d838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f2c0 8148 	blt.w	800dad0 <_dtoa_r+0x700>
 800d840:	9a00      	ldr	r2, [sp, #0]
 800d842:	2a0e      	cmp	r2, #14
 800d844:	f300 8144 	bgt.w	800dad0 <_dtoa_r+0x700>
 800d848:	4b67      	ldr	r3, [pc, #412]	; (800d9e8 <_dtoa_r+0x618>)
 800d84a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d84e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d854:	2b00      	cmp	r3, #0
 800d856:	f280 80d5 	bge.w	800da04 <_dtoa_r+0x634>
 800d85a:	9b03      	ldr	r3, [sp, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f300 80d1 	bgt.w	800da04 <_dtoa_r+0x634>
 800d862:	f040 826f 	bne.w	800dd44 <_dtoa_r+0x974>
 800d866:	4b65      	ldr	r3, [pc, #404]	; (800d9fc <_dtoa_r+0x62c>)
 800d868:	2200      	movs	r2, #0
 800d86a:	4640      	mov	r0, r8
 800d86c:	4649      	mov	r1, r9
 800d86e:	f7f2 fec3 	bl	80005f8 <__aeabi_dmul>
 800d872:	4652      	mov	r2, sl
 800d874:	465b      	mov	r3, fp
 800d876:	f7f3 f945 	bl	8000b04 <__aeabi_dcmpge>
 800d87a:	9e03      	ldr	r6, [sp, #12]
 800d87c:	4637      	mov	r7, r6
 800d87e:	2800      	cmp	r0, #0
 800d880:	f040 8245 	bne.w	800dd0e <_dtoa_r+0x93e>
 800d884:	9d01      	ldr	r5, [sp, #4]
 800d886:	2331      	movs	r3, #49	; 0x31
 800d888:	f805 3b01 	strb.w	r3, [r5], #1
 800d88c:	9b00      	ldr	r3, [sp, #0]
 800d88e:	3301      	adds	r3, #1
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	e240      	b.n	800dd16 <_dtoa_r+0x946>
 800d894:	07f2      	lsls	r2, r6, #31
 800d896:	d505      	bpl.n	800d8a4 <_dtoa_r+0x4d4>
 800d898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d89c:	f7f2 feac 	bl	80005f8 <__aeabi_dmul>
 800d8a0:	3501      	adds	r5, #1
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	1076      	asrs	r6, r6, #1
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	e777      	b.n	800d79a <_dtoa_r+0x3ca>
 800d8aa:	2502      	movs	r5, #2
 800d8ac:	e779      	b.n	800d7a2 <_dtoa_r+0x3d2>
 800d8ae:	9f00      	ldr	r7, [sp, #0]
 800d8b0:	9e03      	ldr	r6, [sp, #12]
 800d8b2:	e794      	b.n	800d7de <_dtoa_r+0x40e>
 800d8b4:	9901      	ldr	r1, [sp, #4]
 800d8b6:	4b4c      	ldr	r3, [pc, #304]	; (800d9e8 <_dtoa_r+0x618>)
 800d8b8:	4431      	add	r1, r6
 800d8ba:	910d      	str	r1, [sp, #52]	; 0x34
 800d8bc:	9908      	ldr	r1, [sp, #32]
 800d8be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d8c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8c6:	2900      	cmp	r1, #0
 800d8c8:	d043      	beq.n	800d952 <_dtoa_r+0x582>
 800d8ca:	494d      	ldr	r1, [pc, #308]	; (800da00 <_dtoa_r+0x630>)
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	f7f2 ffbd 	bl	800084c <__aeabi_ddiv>
 800d8d2:	4652      	mov	r2, sl
 800d8d4:	465b      	mov	r3, fp
 800d8d6:	f7f2 fcd7 	bl	8000288 <__aeabi_dsub>
 800d8da:	9d01      	ldr	r5, [sp, #4]
 800d8dc:	4682      	mov	sl, r0
 800d8de:	468b      	mov	fp, r1
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	4640      	mov	r0, r8
 800d8e4:	f7f3 f938 	bl	8000b58 <__aeabi_d2iz>
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	f7f2 fe1b 	bl	8000524 <__aeabi_i2d>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	4649      	mov	r1, r9
 800d8f6:	f7f2 fcc7 	bl	8000288 <__aeabi_dsub>
 800d8fa:	3630      	adds	r6, #48	; 0x30
 800d8fc:	f805 6b01 	strb.w	r6, [r5], #1
 800d900:	4652      	mov	r2, sl
 800d902:	465b      	mov	r3, fp
 800d904:	4680      	mov	r8, r0
 800d906:	4689      	mov	r9, r1
 800d908:	f7f3 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d163      	bne.n	800d9d8 <_dtoa_r+0x608>
 800d910:	4642      	mov	r2, r8
 800d912:	464b      	mov	r3, r9
 800d914:	4936      	ldr	r1, [pc, #216]	; (800d9f0 <_dtoa_r+0x620>)
 800d916:	2000      	movs	r0, #0
 800d918:	f7f2 fcb6 	bl	8000288 <__aeabi_dsub>
 800d91c:	4652      	mov	r2, sl
 800d91e:	465b      	mov	r3, fp
 800d920:	f7f3 f8dc 	bl	8000adc <__aeabi_dcmplt>
 800d924:	2800      	cmp	r0, #0
 800d926:	f040 80b5 	bne.w	800da94 <_dtoa_r+0x6c4>
 800d92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d92c:	429d      	cmp	r5, r3
 800d92e:	d081      	beq.n	800d834 <_dtoa_r+0x464>
 800d930:	4b30      	ldr	r3, [pc, #192]	; (800d9f4 <_dtoa_r+0x624>)
 800d932:	2200      	movs	r2, #0
 800d934:	4650      	mov	r0, sl
 800d936:	4659      	mov	r1, fp
 800d938:	f7f2 fe5e 	bl	80005f8 <__aeabi_dmul>
 800d93c:	4b2d      	ldr	r3, [pc, #180]	; (800d9f4 <_dtoa_r+0x624>)
 800d93e:	4682      	mov	sl, r0
 800d940:	468b      	mov	fp, r1
 800d942:	4640      	mov	r0, r8
 800d944:	4649      	mov	r1, r9
 800d946:	2200      	movs	r2, #0
 800d948:	f7f2 fe56 	bl	80005f8 <__aeabi_dmul>
 800d94c:	4680      	mov	r8, r0
 800d94e:	4689      	mov	r9, r1
 800d950:	e7c6      	b.n	800d8e0 <_dtoa_r+0x510>
 800d952:	4650      	mov	r0, sl
 800d954:	4659      	mov	r1, fp
 800d956:	f7f2 fe4f 	bl	80005f8 <__aeabi_dmul>
 800d95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d95c:	9d01      	ldr	r5, [sp, #4]
 800d95e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d960:	4682      	mov	sl, r0
 800d962:	468b      	mov	fp, r1
 800d964:	4649      	mov	r1, r9
 800d966:	4640      	mov	r0, r8
 800d968:	f7f3 f8f6 	bl	8000b58 <__aeabi_d2iz>
 800d96c:	4606      	mov	r6, r0
 800d96e:	f7f2 fdd9 	bl	8000524 <__aeabi_i2d>
 800d972:	3630      	adds	r6, #48	; 0x30
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4640      	mov	r0, r8
 800d97a:	4649      	mov	r1, r9
 800d97c:	f7f2 fc84 	bl	8000288 <__aeabi_dsub>
 800d980:	f805 6b01 	strb.w	r6, [r5], #1
 800d984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d986:	429d      	cmp	r5, r3
 800d988:	4680      	mov	r8, r0
 800d98a:	4689      	mov	r9, r1
 800d98c:	f04f 0200 	mov.w	r2, #0
 800d990:	d124      	bne.n	800d9dc <_dtoa_r+0x60c>
 800d992:	4b1b      	ldr	r3, [pc, #108]	; (800da00 <_dtoa_r+0x630>)
 800d994:	4650      	mov	r0, sl
 800d996:	4659      	mov	r1, fp
 800d998:	f7f2 fc78 	bl	800028c <__adddf3>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4640      	mov	r0, r8
 800d9a2:	4649      	mov	r1, r9
 800d9a4:	f7f3 f8b8 	bl	8000b18 <__aeabi_dcmpgt>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d173      	bne.n	800da94 <_dtoa_r+0x6c4>
 800d9ac:	4652      	mov	r2, sl
 800d9ae:	465b      	mov	r3, fp
 800d9b0:	4913      	ldr	r1, [pc, #76]	; (800da00 <_dtoa_r+0x630>)
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	f7f2 fc68 	bl	8000288 <__aeabi_dsub>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	4640      	mov	r0, r8
 800d9be:	4649      	mov	r1, r9
 800d9c0:	f7f3 f88c 	bl	8000adc <__aeabi_dcmplt>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	f43f af35 	beq.w	800d834 <_dtoa_r+0x464>
 800d9ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d9cc:	1e6b      	subs	r3, r5, #1
 800d9ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9d4:	2b30      	cmp	r3, #48	; 0x30
 800d9d6:	d0f8      	beq.n	800d9ca <_dtoa_r+0x5fa>
 800d9d8:	9700      	str	r7, [sp, #0]
 800d9da:	e049      	b.n	800da70 <_dtoa_r+0x6a0>
 800d9dc:	4b05      	ldr	r3, [pc, #20]	; (800d9f4 <_dtoa_r+0x624>)
 800d9de:	f7f2 fe0b 	bl	80005f8 <__aeabi_dmul>
 800d9e2:	4680      	mov	r8, r0
 800d9e4:	4689      	mov	r9, r1
 800d9e6:	e7bd      	b.n	800d964 <_dtoa_r+0x594>
 800d9e8:	0801f840 	.word	0x0801f840
 800d9ec:	0801f818 	.word	0x0801f818
 800d9f0:	3ff00000 	.word	0x3ff00000
 800d9f4:	40240000 	.word	0x40240000
 800d9f8:	401c0000 	.word	0x401c0000
 800d9fc:	40140000 	.word	0x40140000
 800da00:	3fe00000 	.word	0x3fe00000
 800da04:	9d01      	ldr	r5, [sp, #4]
 800da06:	4656      	mov	r6, sl
 800da08:	465f      	mov	r7, fp
 800da0a:	4642      	mov	r2, r8
 800da0c:	464b      	mov	r3, r9
 800da0e:	4630      	mov	r0, r6
 800da10:	4639      	mov	r1, r7
 800da12:	f7f2 ff1b 	bl	800084c <__aeabi_ddiv>
 800da16:	f7f3 f89f 	bl	8000b58 <__aeabi_d2iz>
 800da1a:	4682      	mov	sl, r0
 800da1c:	f7f2 fd82 	bl	8000524 <__aeabi_i2d>
 800da20:	4642      	mov	r2, r8
 800da22:	464b      	mov	r3, r9
 800da24:	f7f2 fde8 	bl	80005f8 <__aeabi_dmul>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4630      	mov	r0, r6
 800da2e:	4639      	mov	r1, r7
 800da30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800da34:	f7f2 fc28 	bl	8000288 <__aeabi_dsub>
 800da38:	f805 6b01 	strb.w	r6, [r5], #1
 800da3c:	9e01      	ldr	r6, [sp, #4]
 800da3e:	9f03      	ldr	r7, [sp, #12]
 800da40:	1bae      	subs	r6, r5, r6
 800da42:	42b7      	cmp	r7, r6
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	d135      	bne.n	800dab6 <_dtoa_r+0x6e6>
 800da4a:	f7f2 fc1f 	bl	800028c <__adddf3>
 800da4e:	4642      	mov	r2, r8
 800da50:	464b      	mov	r3, r9
 800da52:	4606      	mov	r6, r0
 800da54:	460f      	mov	r7, r1
 800da56:	f7f3 f85f 	bl	8000b18 <__aeabi_dcmpgt>
 800da5a:	b9d0      	cbnz	r0, 800da92 <_dtoa_r+0x6c2>
 800da5c:	4642      	mov	r2, r8
 800da5e:	464b      	mov	r3, r9
 800da60:	4630      	mov	r0, r6
 800da62:	4639      	mov	r1, r7
 800da64:	f7f3 f830 	bl	8000ac8 <__aeabi_dcmpeq>
 800da68:	b110      	cbz	r0, 800da70 <_dtoa_r+0x6a0>
 800da6a:	f01a 0f01 	tst.w	sl, #1
 800da6e:	d110      	bne.n	800da92 <_dtoa_r+0x6c2>
 800da70:	4620      	mov	r0, r4
 800da72:	ee18 1a10 	vmov	r1, s16
 800da76:	f000 fe67 	bl	800e748 <_Bfree>
 800da7a:	2300      	movs	r3, #0
 800da7c:	9800      	ldr	r0, [sp, #0]
 800da7e:	702b      	strb	r3, [r5, #0]
 800da80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da82:	3001      	adds	r0, #1
 800da84:	6018      	str	r0, [r3, #0]
 800da86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f43f acf1 	beq.w	800d470 <_dtoa_r+0xa0>
 800da8e:	601d      	str	r5, [r3, #0]
 800da90:	e4ee      	b.n	800d470 <_dtoa_r+0xa0>
 800da92:	9f00      	ldr	r7, [sp, #0]
 800da94:	462b      	mov	r3, r5
 800da96:	461d      	mov	r5, r3
 800da98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da9c:	2a39      	cmp	r2, #57	; 0x39
 800da9e:	d106      	bne.n	800daae <_dtoa_r+0x6de>
 800daa0:	9a01      	ldr	r2, [sp, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d1f7      	bne.n	800da96 <_dtoa_r+0x6c6>
 800daa6:	9901      	ldr	r1, [sp, #4]
 800daa8:	2230      	movs	r2, #48	; 0x30
 800daaa:	3701      	adds	r7, #1
 800daac:	700a      	strb	r2, [r1, #0]
 800daae:	781a      	ldrb	r2, [r3, #0]
 800dab0:	3201      	adds	r2, #1
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	e790      	b.n	800d9d8 <_dtoa_r+0x608>
 800dab6:	4ba6      	ldr	r3, [pc, #664]	; (800dd50 <_dtoa_r+0x980>)
 800dab8:	2200      	movs	r2, #0
 800daba:	f7f2 fd9d 	bl	80005f8 <__aeabi_dmul>
 800dabe:	2200      	movs	r2, #0
 800dac0:	2300      	movs	r3, #0
 800dac2:	4606      	mov	r6, r0
 800dac4:	460f      	mov	r7, r1
 800dac6:	f7f2 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d09d      	beq.n	800da0a <_dtoa_r+0x63a>
 800dace:	e7cf      	b.n	800da70 <_dtoa_r+0x6a0>
 800dad0:	9a08      	ldr	r2, [sp, #32]
 800dad2:	2a00      	cmp	r2, #0
 800dad4:	f000 80d7 	beq.w	800dc86 <_dtoa_r+0x8b6>
 800dad8:	9a06      	ldr	r2, [sp, #24]
 800dada:	2a01      	cmp	r2, #1
 800dadc:	f300 80ba 	bgt.w	800dc54 <_dtoa_r+0x884>
 800dae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dae2:	2a00      	cmp	r2, #0
 800dae4:	f000 80b2 	beq.w	800dc4c <_dtoa_r+0x87c>
 800dae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800daec:	9e07      	ldr	r6, [sp, #28]
 800daee:	9d04      	ldr	r5, [sp, #16]
 800daf0:	9a04      	ldr	r2, [sp, #16]
 800daf2:	441a      	add	r2, r3
 800daf4:	9204      	str	r2, [sp, #16]
 800daf6:	9a05      	ldr	r2, [sp, #20]
 800daf8:	2101      	movs	r1, #1
 800dafa:	441a      	add	r2, r3
 800dafc:	4620      	mov	r0, r4
 800dafe:	9205      	str	r2, [sp, #20]
 800db00:	f000 ff24 	bl	800e94c <__i2b>
 800db04:	4607      	mov	r7, r0
 800db06:	2d00      	cmp	r5, #0
 800db08:	dd0c      	ble.n	800db24 <_dtoa_r+0x754>
 800db0a:	9b05      	ldr	r3, [sp, #20]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	dd09      	ble.n	800db24 <_dtoa_r+0x754>
 800db10:	42ab      	cmp	r3, r5
 800db12:	9a04      	ldr	r2, [sp, #16]
 800db14:	bfa8      	it	ge
 800db16:	462b      	movge	r3, r5
 800db18:	1ad2      	subs	r2, r2, r3
 800db1a:	9204      	str	r2, [sp, #16]
 800db1c:	9a05      	ldr	r2, [sp, #20]
 800db1e:	1aed      	subs	r5, r5, r3
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	9305      	str	r3, [sp, #20]
 800db24:	9b07      	ldr	r3, [sp, #28]
 800db26:	b31b      	cbz	r3, 800db70 <_dtoa_r+0x7a0>
 800db28:	9b08      	ldr	r3, [sp, #32]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f000 80af 	beq.w	800dc8e <_dtoa_r+0x8be>
 800db30:	2e00      	cmp	r6, #0
 800db32:	dd13      	ble.n	800db5c <_dtoa_r+0x78c>
 800db34:	4639      	mov	r1, r7
 800db36:	4632      	mov	r2, r6
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 ffc7 	bl	800eacc <__pow5mult>
 800db3e:	ee18 2a10 	vmov	r2, s16
 800db42:	4601      	mov	r1, r0
 800db44:	4607      	mov	r7, r0
 800db46:	4620      	mov	r0, r4
 800db48:	f000 ff16 	bl	800e978 <__multiply>
 800db4c:	ee18 1a10 	vmov	r1, s16
 800db50:	4680      	mov	r8, r0
 800db52:	4620      	mov	r0, r4
 800db54:	f000 fdf8 	bl	800e748 <_Bfree>
 800db58:	ee08 8a10 	vmov	s16, r8
 800db5c:	9b07      	ldr	r3, [sp, #28]
 800db5e:	1b9a      	subs	r2, r3, r6
 800db60:	d006      	beq.n	800db70 <_dtoa_r+0x7a0>
 800db62:	ee18 1a10 	vmov	r1, s16
 800db66:	4620      	mov	r0, r4
 800db68:	f000 ffb0 	bl	800eacc <__pow5mult>
 800db6c:	ee08 0a10 	vmov	s16, r0
 800db70:	2101      	movs	r1, #1
 800db72:	4620      	mov	r0, r4
 800db74:	f000 feea 	bl	800e94c <__i2b>
 800db78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	4606      	mov	r6, r0
 800db7e:	f340 8088 	ble.w	800dc92 <_dtoa_r+0x8c2>
 800db82:	461a      	mov	r2, r3
 800db84:	4601      	mov	r1, r0
 800db86:	4620      	mov	r0, r4
 800db88:	f000 ffa0 	bl	800eacc <__pow5mult>
 800db8c:	9b06      	ldr	r3, [sp, #24]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	4606      	mov	r6, r0
 800db92:	f340 8081 	ble.w	800dc98 <_dtoa_r+0x8c8>
 800db96:	f04f 0800 	mov.w	r8, #0
 800db9a:	6933      	ldr	r3, [r6, #16]
 800db9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dba0:	6918      	ldr	r0, [r3, #16]
 800dba2:	f000 fe83 	bl	800e8ac <__hi0bits>
 800dba6:	f1c0 0020 	rsb	r0, r0, #32
 800dbaa:	9b05      	ldr	r3, [sp, #20]
 800dbac:	4418      	add	r0, r3
 800dbae:	f010 001f 	ands.w	r0, r0, #31
 800dbb2:	f000 8092 	beq.w	800dcda <_dtoa_r+0x90a>
 800dbb6:	f1c0 0320 	rsb	r3, r0, #32
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	f340 808a 	ble.w	800dcd4 <_dtoa_r+0x904>
 800dbc0:	f1c0 001c 	rsb	r0, r0, #28
 800dbc4:	9b04      	ldr	r3, [sp, #16]
 800dbc6:	4403      	add	r3, r0
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	9b05      	ldr	r3, [sp, #20]
 800dbcc:	4403      	add	r3, r0
 800dbce:	4405      	add	r5, r0
 800dbd0:	9305      	str	r3, [sp, #20]
 800dbd2:	9b04      	ldr	r3, [sp, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd07      	ble.n	800dbe8 <_dtoa_r+0x818>
 800dbd8:	ee18 1a10 	vmov	r1, s16
 800dbdc:	461a      	mov	r2, r3
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f000 ffce 	bl	800eb80 <__lshift>
 800dbe4:	ee08 0a10 	vmov	s16, r0
 800dbe8:	9b05      	ldr	r3, [sp, #20]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	dd05      	ble.n	800dbfa <_dtoa_r+0x82a>
 800dbee:	4631      	mov	r1, r6
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 ffc4 	bl	800eb80 <__lshift>
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d06e      	beq.n	800dcde <_dtoa_r+0x90e>
 800dc00:	ee18 0a10 	vmov	r0, s16
 800dc04:	4631      	mov	r1, r6
 800dc06:	f001 f82b 	bl	800ec60 <__mcmp>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	da67      	bge.n	800dcde <_dtoa_r+0x90e>
 800dc0e:	9b00      	ldr	r3, [sp, #0]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	ee18 1a10 	vmov	r1, s16
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	220a      	movs	r2, #10
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f000 fdb5 	bl	800e78c <__multadd>
 800dc22:	9b08      	ldr	r3, [sp, #32]
 800dc24:	ee08 0a10 	vmov	s16, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f000 81b1 	beq.w	800df90 <_dtoa_r+0xbc0>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	4639      	mov	r1, r7
 800dc32:	220a      	movs	r2, #10
 800dc34:	4620      	mov	r0, r4
 800dc36:	f000 fda9 	bl	800e78c <__multadd>
 800dc3a:	9b02      	ldr	r3, [sp, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	4607      	mov	r7, r0
 800dc40:	f300 808e 	bgt.w	800dd60 <_dtoa_r+0x990>
 800dc44:	9b06      	ldr	r3, [sp, #24]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	dc51      	bgt.n	800dcee <_dtoa_r+0x91e>
 800dc4a:	e089      	b.n	800dd60 <_dtoa_r+0x990>
 800dc4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc52:	e74b      	b.n	800daec <_dtoa_r+0x71c>
 800dc54:	9b03      	ldr	r3, [sp, #12]
 800dc56:	1e5e      	subs	r6, r3, #1
 800dc58:	9b07      	ldr	r3, [sp, #28]
 800dc5a:	42b3      	cmp	r3, r6
 800dc5c:	bfbf      	itttt	lt
 800dc5e:	9b07      	ldrlt	r3, [sp, #28]
 800dc60:	9607      	strlt	r6, [sp, #28]
 800dc62:	1af2      	sublt	r2, r6, r3
 800dc64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc66:	bfb6      	itet	lt
 800dc68:	189b      	addlt	r3, r3, r2
 800dc6a:	1b9e      	subge	r6, r3, r6
 800dc6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	bfb8      	it	lt
 800dc72:	2600      	movlt	r6, #0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bfb7      	itett	lt
 800dc78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dc7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dc80:	1a9d      	sublt	r5, r3, r2
 800dc82:	2300      	movlt	r3, #0
 800dc84:	e734      	b.n	800daf0 <_dtoa_r+0x720>
 800dc86:	9e07      	ldr	r6, [sp, #28]
 800dc88:	9d04      	ldr	r5, [sp, #16]
 800dc8a:	9f08      	ldr	r7, [sp, #32]
 800dc8c:	e73b      	b.n	800db06 <_dtoa_r+0x736>
 800dc8e:	9a07      	ldr	r2, [sp, #28]
 800dc90:	e767      	b.n	800db62 <_dtoa_r+0x792>
 800dc92:	9b06      	ldr	r3, [sp, #24]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	dc18      	bgt.n	800dcca <_dtoa_r+0x8fa>
 800dc98:	f1ba 0f00 	cmp.w	sl, #0
 800dc9c:	d115      	bne.n	800dcca <_dtoa_r+0x8fa>
 800dc9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dca2:	b993      	cbnz	r3, 800dcca <_dtoa_r+0x8fa>
 800dca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dca8:	0d1b      	lsrs	r3, r3, #20
 800dcaa:	051b      	lsls	r3, r3, #20
 800dcac:	b183      	cbz	r3, 800dcd0 <_dtoa_r+0x900>
 800dcae:	9b04      	ldr	r3, [sp, #16]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	9b05      	ldr	r3, [sp, #20]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	9305      	str	r3, [sp, #20]
 800dcba:	f04f 0801 	mov.w	r8, #1
 800dcbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f47f af6a 	bne.w	800db9a <_dtoa_r+0x7ca>
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	e76f      	b.n	800dbaa <_dtoa_r+0x7da>
 800dcca:	f04f 0800 	mov.w	r8, #0
 800dcce:	e7f6      	b.n	800dcbe <_dtoa_r+0x8ee>
 800dcd0:	4698      	mov	r8, r3
 800dcd2:	e7f4      	b.n	800dcbe <_dtoa_r+0x8ee>
 800dcd4:	f43f af7d 	beq.w	800dbd2 <_dtoa_r+0x802>
 800dcd8:	4618      	mov	r0, r3
 800dcda:	301c      	adds	r0, #28
 800dcdc:	e772      	b.n	800dbc4 <_dtoa_r+0x7f4>
 800dcde:	9b03      	ldr	r3, [sp, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	dc37      	bgt.n	800dd54 <_dtoa_r+0x984>
 800dce4:	9b06      	ldr	r3, [sp, #24]
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	dd34      	ble.n	800dd54 <_dtoa_r+0x984>
 800dcea:	9b03      	ldr	r3, [sp, #12]
 800dcec:	9302      	str	r3, [sp, #8]
 800dcee:	9b02      	ldr	r3, [sp, #8]
 800dcf0:	b96b      	cbnz	r3, 800dd0e <_dtoa_r+0x93e>
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	2205      	movs	r2, #5
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f000 fd48 	bl	800e78c <__multadd>
 800dcfc:	4601      	mov	r1, r0
 800dcfe:	4606      	mov	r6, r0
 800dd00:	ee18 0a10 	vmov	r0, s16
 800dd04:	f000 ffac 	bl	800ec60 <__mcmp>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	f73f adbb 	bgt.w	800d884 <_dtoa_r+0x4b4>
 800dd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd10:	9d01      	ldr	r5, [sp, #4]
 800dd12:	43db      	mvns	r3, r3
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	f04f 0800 	mov.w	r8, #0
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f000 fd13 	bl	800e748 <_Bfree>
 800dd22:	2f00      	cmp	r7, #0
 800dd24:	f43f aea4 	beq.w	800da70 <_dtoa_r+0x6a0>
 800dd28:	f1b8 0f00 	cmp.w	r8, #0
 800dd2c:	d005      	beq.n	800dd3a <_dtoa_r+0x96a>
 800dd2e:	45b8      	cmp	r8, r7
 800dd30:	d003      	beq.n	800dd3a <_dtoa_r+0x96a>
 800dd32:	4641      	mov	r1, r8
 800dd34:	4620      	mov	r0, r4
 800dd36:	f000 fd07 	bl	800e748 <_Bfree>
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 fd03 	bl	800e748 <_Bfree>
 800dd42:	e695      	b.n	800da70 <_dtoa_r+0x6a0>
 800dd44:	2600      	movs	r6, #0
 800dd46:	4637      	mov	r7, r6
 800dd48:	e7e1      	b.n	800dd0e <_dtoa_r+0x93e>
 800dd4a:	9700      	str	r7, [sp, #0]
 800dd4c:	4637      	mov	r7, r6
 800dd4e:	e599      	b.n	800d884 <_dtoa_r+0x4b4>
 800dd50:	40240000 	.word	0x40240000
 800dd54:	9b08      	ldr	r3, [sp, #32]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 80ca 	beq.w	800def0 <_dtoa_r+0xb20>
 800dd5c:	9b03      	ldr	r3, [sp, #12]
 800dd5e:	9302      	str	r3, [sp, #8]
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	dd05      	ble.n	800dd70 <_dtoa_r+0x9a0>
 800dd64:	4639      	mov	r1, r7
 800dd66:	462a      	mov	r2, r5
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f000 ff09 	bl	800eb80 <__lshift>
 800dd6e:	4607      	mov	r7, r0
 800dd70:	f1b8 0f00 	cmp.w	r8, #0
 800dd74:	d05b      	beq.n	800de2e <_dtoa_r+0xa5e>
 800dd76:	6879      	ldr	r1, [r7, #4]
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f000 fca5 	bl	800e6c8 <_Balloc>
 800dd7e:	4605      	mov	r5, r0
 800dd80:	b928      	cbnz	r0, 800dd8e <_dtoa_r+0x9be>
 800dd82:	4b87      	ldr	r3, [pc, #540]	; (800dfa0 <_dtoa_r+0xbd0>)
 800dd84:	4602      	mov	r2, r0
 800dd86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd8a:	f7ff bb3b 	b.w	800d404 <_dtoa_r+0x34>
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	3202      	adds	r2, #2
 800dd92:	0092      	lsls	r2, r2, #2
 800dd94:	f107 010c 	add.w	r1, r7, #12
 800dd98:	300c      	adds	r0, #12
 800dd9a:	f7fd fce9 	bl	800b770 <memcpy>
 800dd9e:	2201      	movs	r2, #1
 800dda0:	4629      	mov	r1, r5
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 feec 	bl	800eb80 <__lshift>
 800dda8:	9b01      	ldr	r3, [sp, #4]
 800ddaa:	f103 0901 	add.w	r9, r3, #1
 800ddae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	9305      	str	r3, [sp, #20]
 800ddb6:	f00a 0301 	and.w	r3, sl, #1
 800ddba:	46b8      	mov	r8, r7
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	4607      	mov	r7, r0
 800ddc0:	4631      	mov	r1, r6
 800ddc2:	ee18 0a10 	vmov	r0, s16
 800ddc6:	f7ff fa75 	bl	800d2b4 <quorem>
 800ddca:	4641      	mov	r1, r8
 800ddcc:	9002      	str	r0, [sp, #8]
 800ddce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ddd2:	ee18 0a10 	vmov	r0, s16
 800ddd6:	f000 ff43 	bl	800ec60 <__mcmp>
 800ddda:	463a      	mov	r2, r7
 800dddc:	9003      	str	r0, [sp, #12]
 800ddde:	4631      	mov	r1, r6
 800dde0:	4620      	mov	r0, r4
 800dde2:	f000 ff59 	bl	800ec98 <__mdiff>
 800dde6:	68c2      	ldr	r2, [r0, #12]
 800dde8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ddec:	4605      	mov	r5, r0
 800ddee:	bb02      	cbnz	r2, 800de32 <_dtoa_r+0xa62>
 800ddf0:	4601      	mov	r1, r0
 800ddf2:	ee18 0a10 	vmov	r0, s16
 800ddf6:	f000 ff33 	bl	800ec60 <__mcmp>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	4620      	mov	r0, r4
 800de00:	9207      	str	r2, [sp, #28]
 800de02:	f000 fca1 	bl	800e748 <_Bfree>
 800de06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800de0a:	ea43 0102 	orr.w	r1, r3, r2
 800de0e:	9b04      	ldr	r3, [sp, #16]
 800de10:	430b      	orrs	r3, r1
 800de12:	464d      	mov	r5, r9
 800de14:	d10f      	bne.n	800de36 <_dtoa_r+0xa66>
 800de16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de1a:	d02a      	beq.n	800de72 <_dtoa_r+0xaa2>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	dd02      	ble.n	800de28 <_dtoa_r+0xa58>
 800de22:	9b02      	ldr	r3, [sp, #8]
 800de24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800de28:	f88b a000 	strb.w	sl, [fp]
 800de2c:	e775      	b.n	800dd1a <_dtoa_r+0x94a>
 800de2e:	4638      	mov	r0, r7
 800de30:	e7ba      	b.n	800dda8 <_dtoa_r+0x9d8>
 800de32:	2201      	movs	r2, #1
 800de34:	e7e2      	b.n	800ddfc <_dtoa_r+0xa2c>
 800de36:	9b03      	ldr	r3, [sp, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	db04      	blt.n	800de46 <_dtoa_r+0xa76>
 800de3c:	9906      	ldr	r1, [sp, #24]
 800de3e:	430b      	orrs	r3, r1
 800de40:	9904      	ldr	r1, [sp, #16]
 800de42:	430b      	orrs	r3, r1
 800de44:	d122      	bne.n	800de8c <_dtoa_r+0xabc>
 800de46:	2a00      	cmp	r2, #0
 800de48:	ddee      	ble.n	800de28 <_dtoa_r+0xa58>
 800de4a:	ee18 1a10 	vmov	r1, s16
 800de4e:	2201      	movs	r2, #1
 800de50:	4620      	mov	r0, r4
 800de52:	f000 fe95 	bl	800eb80 <__lshift>
 800de56:	4631      	mov	r1, r6
 800de58:	ee08 0a10 	vmov	s16, r0
 800de5c:	f000 ff00 	bl	800ec60 <__mcmp>
 800de60:	2800      	cmp	r0, #0
 800de62:	dc03      	bgt.n	800de6c <_dtoa_r+0xa9c>
 800de64:	d1e0      	bne.n	800de28 <_dtoa_r+0xa58>
 800de66:	f01a 0f01 	tst.w	sl, #1
 800de6a:	d0dd      	beq.n	800de28 <_dtoa_r+0xa58>
 800de6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de70:	d1d7      	bne.n	800de22 <_dtoa_r+0xa52>
 800de72:	2339      	movs	r3, #57	; 0x39
 800de74:	f88b 3000 	strb.w	r3, [fp]
 800de78:	462b      	mov	r3, r5
 800de7a:	461d      	mov	r5, r3
 800de7c:	3b01      	subs	r3, #1
 800de7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de82:	2a39      	cmp	r2, #57	; 0x39
 800de84:	d071      	beq.n	800df6a <_dtoa_r+0xb9a>
 800de86:	3201      	adds	r2, #1
 800de88:	701a      	strb	r2, [r3, #0]
 800de8a:	e746      	b.n	800dd1a <_dtoa_r+0x94a>
 800de8c:	2a00      	cmp	r2, #0
 800de8e:	dd07      	ble.n	800dea0 <_dtoa_r+0xad0>
 800de90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de94:	d0ed      	beq.n	800de72 <_dtoa_r+0xaa2>
 800de96:	f10a 0301 	add.w	r3, sl, #1
 800de9a:	f88b 3000 	strb.w	r3, [fp]
 800de9e:	e73c      	b.n	800dd1a <_dtoa_r+0x94a>
 800dea0:	9b05      	ldr	r3, [sp, #20]
 800dea2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dea6:	4599      	cmp	r9, r3
 800dea8:	d047      	beq.n	800df3a <_dtoa_r+0xb6a>
 800deaa:	ee18 1a10 	vmov	r1, s16
 800deae:	2300      	movs	r3, #0
 800deb0:	220a      	movs	r2, #10
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 fc6a 	bl	800e78c <__multadd>
 800deb8:	45b8      	cmp	r8, r7
 800deba:	ee08 0a10 	vmov	s16, r0
 800debe:	f04f 0300 	mov.w	r3, #0
 800dec2:	f04f 020a 	mov.w	r2, #10
 800dec6:	4641      	mov	r1, r8
 800dec8:	4620      	mov	r0, r4
 800deca:	d106      	bne.n	800deda <_dtoa_r+0xb0a>
 800decc:	f000 fc5e 	bl	800e78c <__multadd>
 800ded0:	4680      	mov	r8, r0
 800ded2:	4607      	mov	r7, r0
 800ded4:	f109 0901 	add.w	r9, r9, #1
 800ded8:	e772      	b.n	800ddc0 <_dtoa_r+0x9f0>
 800deda:	f000 fc57 	bl	800e78c <__multadd>
 800dede:	4639      	mov	r1, r7
 800dee0:	4680      	mov	r8, r0
 800dee2:	2300      	movs	r3, #0
 800dee4:	220a      	movs	r2, #10
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 fc50 	bl	800e78c <__multadd>
 800deec:	4607      	mov	r7, r0
 800deee:	e7f1      	b.n	800ded4 <_dtoa_r+0xb04>
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	9302      	str	r3, [sp, #8]
 800def4:	9d01      	ldr	r5, [sp, #4]
 800def6:	ee18 0a10 	vmov	r0, s16
 800defa:	4631      	mov	r1, r6
 800defc:	f7ff f9da 	bl	800d2b4 <quorem>
 800df00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df04:	9b01      	ldr	r3, [sp, #4]
 800df06:	f805 ab01 	strb.w	sl, [r5], #1
 800df0a:	1aea      	subs	r2, r5, r3
 800df0c:	9b02      	ldr	r3, [sp, #8]
 800df0e:	4293      	cmp	r3, r2
 800df10:	dd09      	ble.n	800df26 <_dtoa_r+0xb56>
 800df12:	ee18 1a10 	vmov	r1, s16
 800df16:	2300      	movs	r3, #0
 800df18:	220a      	movs	r2, #10
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 fc36 	bl	800e78c <__multadd>
 800df20:	ee08 0a10 	vmov	s16, r0
 800df24:	e7e7      	b.n	800def6 <_dtoa_r+0xb26>
 800df26:	9b02      	ldr	r3, [sp, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bfc8      	it	gt
 800df2c:	461d      	movgt	r5, r3
 800df2e:	9b01      	ldr	r3, [sp, #4]
 800df30:	bfd8      	it	le
 800df32:	2501      	movle	r5, #1
 800df34:	441d      	add	r5, r3
 800df36:	f04f 0800 	mov.w	r8, #0
 800df3a:	ee18 1a10 	vmov	r1, s16
 800df3e:	2201      	movs	r2, #1
 800df40:	4620      	mov	r0, r4
 800df42:	f000 fe1d 	bl	800eb80 <__lshift>
 800df46:	4631      	mov	r1, r6
 800df48:	ee08 0a10 	vmov	s16, r0
 800df4c:	f000 fe88 	bl	800ec60 <__mcmp>
 800df50:	2800      	cmp	r0, #0
 800df52:	dc91      	bgt.n	800de78 <_dtoa_r+0xaa8>
 800df54:	d102      	bne.n	800df5c <_dtoa_r+0xb8c>
 800df56:	f01a 0f01 	tst.w	sl, #1
 800df5a:	d18d      	bne.n	800de78 <_dtoa_r+0xaa8>
 800df5c:	462b      	mov	r3, r5
 800df5e:	461d      	mov	r5, r3
 800df60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df64:	2a30      	cmp	r2, #48	; 0x30
 800df66:	d0fa      	beq.n	800df5e <_dtoa_r+0xb8e>
 800df68:	e6d7      	b.n	800dd1a <_dtoa_r+0x94a>
 800df6a:	9a01      	ldr	r2, [sp, #4]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d184      	bne.n	800de7a <_dtoa_r+0xaaa>
 800df70:	9b00      	ldr	r3, [sp, #0]
 800df72:	3301      	adds	r3, #1
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	2331      	movs	r3, #49	; 0x31
 800df78:	7013      	strb	r3, [r2, #0]
 800df7a:	e6ce      	b.n	800dd1a <_dtoa_r+0x94a>
 800df7c:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <_dtoa_r+0xbd4>)
 800df7e:	f7ff ba95 	b.w	800d4ac <_dtoa_r+0xdc>
 800df82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df84:	2b00      	cmp	r3, #0
 800df86:	f47f aa6e 	bne.w	800d466 <_dtoa_r+0x96>
 800df8a:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <_dtoa_r+0xbd8>)
 800df8c:	f7ff ba8e 	b.w	800d4ac <_dtoa_r+0xdc>
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	dcae      	bgt.n	800def4 <_dtoa_r+0xb24>
 800df96:	9b06      	ldr	r3, [sp, #24]
 800df98:	2b02      	cmp	r3, #2
 800df9a:	f73f aea8 	bgt.w	800dcee <_dtoa_r+0x91e>
 800df9e:	e7a9      	b.n	800def4 <_dtoa_r+0xb24>
 800dfa0:	0801f730 	.word	0x0801f730
 800dfa4:	0801f534 	.word	0x0801f534
 800dfa8:	0801f6b1 	.word	0x0801f6b1

0800dfac <rshift>:
 800dfac:	6903      	ldr	r3, [r0, #16]
 800dfae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dfb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dfba:	f100 0414 	add.w	r4, r0, #20
 800dfbe:	dd45      	ble.n	800e04c <rshift+0xa0>
 800dfc0:	f011 011f 	ands.w	r1, r1, #31
 800dfc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dfc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dfcc:	d10c      	bne.n	800dfe8 <rshift+0x3c>
 800dfce:	f100 0710 	add.w	r7, r0, #16
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	42b1      	cmp	r1, r6
 800dfd6:	d334      	bcc.n	800e042 <rshift+0x96>
 800dfd8:	1a9b      	subs	r3, r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	1eea      	subs	r2, r5, #3
 800dfde:	4296      	cmp	r6, r2
 800dfe0:	bf38      	it	cc
 800dfe2:	2300      	movcc	r3, #0
 800dfe4:	4423      	add	r3, r4
 800dfe6:	e015      	b.n	800e014 <rshift+0x68>
 800dfe8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dfec:	f1c1 0820 	rsb	r8, r1, #32
 800dff0:	40cf      	lsrs	r7, r1
 800dff2:	f105 0e04 	add.w	lr, r5, #4
 800dff6:	46a1      	mov	r9, r4
 800dff8:	4576      	cmp	r6, lr
 800dffa:	46f4      	mov	ip, lr
 800dffc:	d815      	bhi.n	800e02a <rshift+0x7e>
 800dffe:	1a9a      	subs	r2, r3, r2
 800e000:	0092      	lsls	r2, r2, #2
 800e002:	3a04      	subs	r2, #4
 800e004:	3501      	adds	r5, #1
 800e006:	42ae      	cmp	r6, r5
 800e008:	bf38      	it	cc
 800e00a:	2200      	movcc	r2, #0
 800e00c:	18a3      	adds	r3, r4, r2
 800e00e:	50a7      	str	r7, [r4, r2]
 800e010:	b107      	cbz	r7, 800e014 <rshift+0x68>
 800e012:	3304      	adds	r3, #4
 800e014:	1b1a      	subs	r2, r3, r4
 800e016:	42a3      	cmp	r3, r4
 800e018:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e01c:	bf08      	it	eq
 800e01e:	2300      	moveq	r3, #0
 800e020:	6102      	str	r2, [r0, #16]
 800e022:	bf08      	it	eq
 800e024:	6143      	streq	r3, [r0, #20]
 800e026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e02a:	f8dc c000 	ldr.w	ip, [ip]
 800e02e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e032:	ea4c 0707 	orr.w	r7, ip, r7
 800e036:	f849 7b04 	str.w	r7, [r9], #4
 800e03a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e03e:	40cf      	lsrs	r7, r1
 800e040:	e7da      	b.n	800dff8 <rshift+0x4c>
 800e042:	f851 cb04 	ldr.w	ip, [r1], #4
 800e046:	f847 cf04 	str.w	ip, [r7, #4]!
 800e04a:	e7c3      	b.n	800dfd4 <rshift+0x28>
 800e04c:	4623      	mov	r3, r4
 800e04e:	e7e1      	b.n	800e014 <rshift+0x68>

0800e050 <__hexdig_fun>:
 800e050:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e054:	2b09      	cmp	r3, #9
 800e056:	d802      	bhi.n	800e05e <__hexdig_fun+0xe>
 800e058:	3820      	subs	r0, #32
 800e05a:	b2c0      	uxtb	r0, r0
 800e05c:	4770      	bx	lr
 800e05e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e062:	2b05      	cmp	r3, #5
 800e064:	d801      	bhi.n	800e06a <__hexdig_fun+0x1a>
 800e066:	3847      	subs	r0, #71	; 0x47
 800e068:	e7f7      	b.n	800e05a <__hexdig_fun+0xa>
 800e06a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e06e:	2b05      	cmp	r3, #5
 800e070:	d801      	bhi.n	800e076 <__hexdig_fun+0x26>
 800e072:	3827      	subs	r0, #39	; 0x27
 800e074:	e7f1      	b.n	800e05a <__hexdig_fun+0xa>
 800e076:	2000      	movs	r0, #0
 800e078:	4770      	bx	lr
	...

0800e07c <__gethex>:
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	ed2d 8b02 	vpush	{d8}
 800e084:	b089      	sub	sp, #36	; 0x24
 800e086:	ee08 0a10 	vmov	s16, r0
 800e08a:	9304      	str	r3, [sp, #16]
 800e08c:	4bb4      	ldr	r3, [pc, #720]	; (800e360 <__gethex+0x2e4>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	4618      	mov	r0, r3
 800e094:	468b      	mov	fp, r1
 800e096:	4690      	mov	r8, r2
 800e098:	f7f2 f89a 	bl	80001d0 <strlen>
 800e09c:	9b01      	ldr	r3, [sp, #4]
 800e09e:	f8db 2000 	ldr.w	r2, [fp]
 800e0a2:	4403      	add	r3, r0
 800e0a4:	4682      	mov	sl, r0
 800e0a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e0aa:	9305      	str	r3, [sp, #20]
 800e0ac:	1c93      	adds	r3, r2, #2
 800e0ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e0b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e0b6:	32fe      	adds	r2, #254	; 0xfe
 800e0b8:	18d1      	adds	r1, r2, r3
 800e0ba:	461f      	mov	r7, r3
 800e0bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e0c0:	9100      	str	r1, [sp, #0]
 800e0c2:	2830      	cmp	r0, #48	; 0x30
 800e0c4:	d0f8      	beq.n	800e0b8 <__gethex+0x3c>
 800e0c6:	f7ff ffc3 	bl	800e050 <__hexdig_fun>
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d13a      	bne.n	800e146 <__gethex+0xca>
 800e0d0:	9901      	ldr	r1, [sp, #4]
 800e0d2:	4652      	mov	r2, sl
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f001 fa23 	bl	800f520 <strncmp>
 800e0da:	4605      	mov	r5, r0
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d168      	bne.n	800e1b2 <__gethex+0x136>
 800e0e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e0e4:	eb07 060a 	add.w	r6, r7, sl
 800e0e8:	f7ff ffb2 	bl	800e050 <__hexdig_fun>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d062      	beq.n	800e1b6 <__gethex+0x13a>
 800e0f0:	4633      	mov	r3, r6
 800e0f2:	7818      	ldrb	r0, [r3, #0]
 800e0f4:	2830      	cmp	r0, #48	; 0x30
 800e0f6:	461f      	mov	r7, r3
 800e0f8:	f103 0301 	add.w	r3, r3, #1
 800e0fc:	d0f9      	beq.n	800e0f2 <__gethex+0x76>
 800e0fe:	f7ff ffa7 	bl	800e050 <__hexdig_fun>
 800e102:	2301      	movs	r3, #1
 800e104:	fab0 f480 	clz	r4, r0
 800e108:	0964      	lsrs	r4, r4, #5
 800e10a:	4635      	mov	r5, r6
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	463a      	mov	r2, r7
 800e110:	4616      	mov	r6, r2
 800e112:	3201      	adds	r2, #1
 800e114:	7830      	ldrb	r0, [r6, #0]
 800e116:	f7ff ff9b 	bl	800e050 <__hexdig_fun>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d1f8      	bne.n	800e110 <__gethex+0x94>
 800e11e:	9901      	ldr	r1, [sp, #4]
 800e120:	4652      	mov	r2, sl
 800e122:	4630      	mov	r0, r6
 800e124:	f001 f9fc 	bl	800f520 <strncmp>
 800e128:	b980      	cbnz	r0, 800e14c <__gethex+0xd0>
 800e12a:	b94d      	cbnz	r5, 800e140 <__gethex+0xc4>
 800e12c:	eb06 050a 	add.w	r5, r6, sl
 800e130:	462a      	mov	r2, r5
 800e132:	4616      	mov	r6, r2
 800e134:	3201      	adds	r2, #1
 800e136:	7830      	ldrb	r0, [r6, #0]
 800e138:	f7ff ff8a 	bl	800e050 <__hexdig_fun>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d1f8      	bne.n	800e132 <__gethex+0xb6>
 800e140:	1bad      	subs	r5, r5, r6
 800e142:	00ad      	lsls	r5, r5, #2
 800e144:	e004      	b.n	800e150 <__gethex+0xd4>
 800e146:	2400      	movs	r4, #0
 800e148:	4625      	mov	r5, r4
 800e14a:	e7e0      	b.n	800e10e <__gethex+0x92>
 800e14c:	2d00      	cmp	r5, #0
 800e14e:	d1f7      	bne.n	800e140 <__gethex+0xc4>
 800e150:	7833      	ldrb	r3, [r6, #0]
 800e152:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e156:	2b50      	cmp	r3, #80	; 0x50
 800e158:	d13b      	bne.n	800e1d2 <__gethex+0x156>
 800e15a:	7873      	ldrb	r3, [r6, #1]
 800e15c:	2b2b      	cmp	r3, #43	; 0x2b
 800e15e:	d02c      	beq.n	800e1ba <__gethex+0x13e>
 800e160:	2b2d      	cmp	r3, #45	; 0x2d
 800e162:	d02e      	beq.n	800e1c2 <__gethex+0x146>
 800e164:	1c71      	adds	r1, r6, #1
 800e166:	f04f 0900 	mov.w	r9, #0
 800e16a:	7808      	ldrb	r0, [r1, #0]
 800e16c:	f7ff ff70 	bl	800e050 <__hexdig_fun>
 800e170:	1e43      	subs	r3, r0, #1
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b18      	cmp	r3, #24
 800e176:	d82c      	bhi.n	800e1d2 <__gethex+0x156>
 800e178:	f1a0 0210 	sub.w	r2, r0, #16
 800e17c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e180:	f7ff ff66 	bl	800e050 <__hexdig_fun>
 800e184:	1e43      	subs	r3, r0, #1
 800e186:	b2db      	uxtb	r3, r3
 800e188:	2b18      	cmp	r3, #24
 800e18a:	d91d      	bls.n	800e1c8 <__gethex+0x14c>
 800e18c:	f1b9 0f00 	cmp.w	r9, #0
 800e190:	d000      	beq.n	800e194 <__gethex+0x118>
 800e192:	4252      	negs	r2, r2
 800e194:	4415      	add	r5, r2
 800e196:	f8cb 1000 	str.w	r1, [fp]
 800e19a:	b1e4      	cbz	r4, 800e1d6 <__gethex+0x15a>
 800e19c:	9b00      	ldr	r3, [sp, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bf14      	ite	ne
 800e1a2:	2700      	movne	r7, #0
 800e1a4:	2706      	moveq	r7, #6
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	b009      	add	sp, #36	; 0x24
 800e1aa:	ecbd 8b02 	vpop	{d8}
 800e1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b2:	463e      	mov	r6, r7
 800e1b4:	4625      	mov	r5, r4
 800e1b6:	2401      	movs	r4, #1
 800e1b8:	e7ca      	b.n	800e150 <__gethex+0xd4>
 800e1ba:	f04f 0900 	mov.w	r9, #0
 800e1be:	1cb1      	adds	r1, r6, #2
 800e1c0:	e7d3      	b.n	800e16a <__gethex+0xee>
 800e1c2:	f04f 0901 	mov.w	r9, #1
 800e1c6:	e7fa      	b.n	800e1be <__gethex+0x142>
 800e1c8:	230a      	movs	r3, #10
 800e1ca:	fb03 0202 	mla	r2, r3, r2, r0
 800e1ce:	3a10      	subs	r2, #16
 800e1d0:	e7d4      	b.n	800e17c <__gethex+0x100>
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	e7df      	b.n	800e196 <__gethex+0x11a>
 800e1d6:	1bf3      	subs	r3, r6, r7
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	4621      	mov	r1, r4
 800e1dc:	2b07      	cmp	r3, #7
 800e1de:	dc0b      	bgt.n	800e1f8 <__gethex+0x17c>
 800e1e0:	ee18 0a10 	vmov	r0, s16
 800e1e4:	f000 fa70 	bl	800e6c8 <_Balloc>
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	b940      	cbnz	r0, 800e1fe <__gethex+0x182>
 800e1ec:	4b5d      	ldr	r3, [pc, #372]	; (800e364 <__gethex+0x2e8>)
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	21de      	movs	r1, #222	; 0xde
 800e1f2:	485d      	ldr	r0, [pc, #372]	; (800e368 <__gethex+0x2ec>)
 800e1f4:	f001 f9b6 	bl	800f564 <__assert_func>
 800e1f8:	3101      	adds	r1, #1
 800e1fa:	105b      	asrs	r3, r3, #1
 800e1fc:	e7ee      	b.n	800e1dc <__gethex+0x160>
 800e1fe:	f100 0914 	add.w	r9, r0, #20
 800e202:	f04f 0b00 	mov.w	fp, #0
 800e206:	f1ca 0301 	rsb	r3, sl, #1
 800e20a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e20e:	f8cd b000 	str.w	fp, [sp]
 800e212:	9306      	str	r3, [sp, #24]
 800e214:	42b7      	cmp	r7, r6
 800e216:	d340      	bcc.n	800e29a <__gethex+0x21e>
 800e218:	9802      	ldr	r0, [sp, #8]
 800e21a:	9b00      	ldr	r3, [sp, #0]
 800e21c:	f840 3b04 	str.w	r3, [r0], #4
 800e220:	eba0 0009 	sub.w	r0, r0, r9
 800e224:	1080      	asrs	r0, r0, #2
 800e226:	0146      	lsls	r6, r0, #5
 800e228:	6120      	str	r0, [r4, #16]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 fb3e 	bl	800e8ac <__hi0bits>
 800e230:	1a30      	subs	r0, r6, r0
 800e232:	f8d8 6000 	ldr.w	r6, [r8]
 800e236:	42b0      	cmp	r0, r6
 800e238:	dd63      	ble.n	800e302 <__gethex+0x286>
 800e23a:	1b87      	subs	r7, r0, r6
 800e23c:	4639      	mov	r1, r7
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 fee2 	bl	800f008 <__any_on>
 800e244:	4682      	mov	sl, r0
 800e246:	b1a8      	cbz	r0, 800e274 <__gethex+0x1f8>
 800e248:	1e7b      	subs	r3, r7, #1
 800e24a:	1159      	asrs	r1, r3, #5
 800e24c:	f003 021f 	and.w	r2, r3, #31
 800e250:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e254:	f04f 0a01 	mov.w	sl, #1
 800e258:	fa0a f202 	lsl.w	r2, sl, r2
 800e25c:	420a      	tst	r2, r1
 800e25e:	d009      	beq.n	800e274 <__gethex+0x1f8>
 800e260:	4553      	cmp	r3, sl
 800e262:	dd05      	ble.n	800e270 <__gethex+0x1f4>
 800e264:	1eb9      	subs	r1, r7, #2
 800e266:	4620      	mov	r0, r4
 800e268:	f000 fece 	bl	800f008 <__any_on>
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d145      	bne.n	800e2fc <__gethex+0x280>
 800e270:	f04f 0a02 	mov.w	sl, #2
 800e274:	4639      	mov	r1, r7
 800e276:	4620      	mov	r0, r4
 800e278:	f7ff fe98 	bl	800dfac <rshift>
 800e27c:	443d      	add	r5, r7
 800e27e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e282:	42ab      	cmp	r3, r5
 800e284:	da4c      	bge.n	800e320 <__gethex+0x2a4>
 800e286:	ee18 0a10 	vmov	r0, s16
 800e28a:	4621      	mov	r1, r4
 800e28c:	f000 fa5c 	bl	800e748 <_Bfree>
 800e290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e292:	2300      	movs	r3, #0
 800e294:	6013      	str	r3, [r2, #0]
 800e296:	27a3      	movs	r7, #163	; 0xa3
 800e298:	e785      	b.n	800e1a6 <__gethex+0x12a>
 800e29a:	1e73      	subs	r3, r6, #1
 800e29c:	9a05      	ldr	r2, [sp, #20]
 800e29e:	9303      	str	r3, [sp, #12]
 800e2a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d019      	beq.n	800e2dc <__gethex+0x260>
 800e2a8:	f1bb 0f20 	cmp.w	fp, #32
 800e2ac:	d107      	bne.n	800e2be <__gethex+0x242>
 800e2ae:	9b02      	ldr	r3, [sp, #8]
 800e2b0:	9a00      	ldr	r2, [sp, #0]
 800e2b2:	f843 2b04 	str.w	r2, [r3], #4
 800e2b6:	9302      	str	r3, [sp, #8]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	469b      	mov	fp, r3
 800e2be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e2c2:	f7ff fec5 	bl	800e050 <__hexdig_fun>
 800e2c6:	9b00      	ldr	r3, [sp, #0]
 800e2c8:	f000 000f 	and.w	r0, r0, #15
 800e2cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800e2d0:	4303      	orrs	r3, r0
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	f10b 0b04 	add.w	fp, fp, #4
 800e2d8:	9b03      	ldr	r3, [sp, #12]
 800e2da:	e00d      	b.n	800e2f8 <__gethex+0x27c>
 800e2dc:	9b03      	ldr	r3, [sp, #12]
 800e2de:	9a06      	ldr	r2, [sp, #24]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	42bb      	cmp	r3, r7
 800e2e4:	d3e0      	bcc.n	800e2a8 <__gethex+0x22c>
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	9901      	ldr	r1, [sp, #4]
 800e2ea:	9307      	str	r3, [sp, #28]
 800e2ec:	4652      	mov	r2, sl
 800e2ee:	f001 f917 	bl	800f520 <strncmp>
 800e2f2:	9b07      	ldr	r3, [sp, #28]
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d1d7      	bne.n	800e2a8 <__gethex+0x22c>
 800e2f8:	461e      	mov	r6, r3
 800e2fa:	e78b      	b.n	800e214 <__gethex+0x198>
 800e2fc:	f04f 0a03 	mov.w	sl, #3
 800e300:	e7b8      	b.n	800e274 <__gethex+0x1f8>
 800e302:	da0a      	bge.n	800e31a <__gethex+0x29e>
 800e304:	1a37      	subs	r7, r6, r0
 800e306:	4621      	mov	r1, r4
 800e308:	ee18 0a10 	vmov	r0, s16
 800e30c:	463a      	mov	r2, r7
 800e30e:	f000 fc37 	bl	800eb80 <__lshift>
 800e312:	1bed      	subs	r5, r5, r7
 800e314:	4604      	mov	r4, r0
 800e316:	f100 0914 	add.w	r9, r0, #20
 800e31a:	f04f 0a00 	mov.w	sl, #0
 800e31e:	e7ae      	b.n	800e27e <__gethex+0x202>
 800e320:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e324:	42a8      	cmp	r0, r5
 800e326:	dd72      	ble.n	800e40e <__gethex+0x392>
 800e328:	1b45      	subs	r5, r0, r5
 800e32a:	42ae      	cmp	r6, r5
 800e32c:	dc36      	bgt.n	800e39c <__gethex+0x320>
 800e32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e332:	2b02      	cmp	r3, #2
 800e334:	d02a      	beq.n	800e38c <__gethex+0x310>
 800e336:	2b03      	cmp	r3, #3
 800e338:	d02c      	beq.n	800e394 <__gethex+0x318>
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d11c      	bne.n	800e378 <__gethex+0x2fc>
 800e33e:	42ae      	cmp	r6, r5
 800e340:	d11a      	bne.n	800e378 <__gethex+0x2fc>
 800e342:	2e01      	cmp	r6, #1
 800e344:	d112      	bne.n	800e36c <__gethex+0x2f0>
 800e346:	9a04      	ldr	r2, [sp, #16]
 800e348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	2301      	movs	r3, #1
 800e350:	6123      	str	r3, [r4, #16]
 800e352:	f8c9 3000 	str.w	r3, [r9]
 800e356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e358:	2762      	movs	r7, #98	; 0x62
 800e35a:	601c      	str	r4, [r3, #0]
 800e35c:	e723      	b.n	800e1a6 <__gethex+0x12a>
 800e35e:	bf00      	nop
 800e360:	0801f7a8 	.word	0x0801f7a8
 800e364:	0801f730 	.word	0x0801f730
 800e368:	0801f741 	.word	0x0801f741
 800e36c:	1e71      	subs	r1, r6, #1
 800e36e:	4620      	mov	r0, r4
 800e370:	f000 fe4a 	bl	800f008 <__any_on>
 800e374:	2800      	cmp	r0, #0
 800e376:	d1e6      	bne.n	800e346 <__gethex+0x2ca>
 800e378:	ee18 0a10 	vmov	r0, s16
 800e37c:	4621      	mov	r1, r4
 800e37e:	f000 f9e3 	bl	800e748 <_Bfree>
 800e382:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e384:	2300      	movs	r3, #0
 800e386:	6013      	str	r3, [r2, #0]
 800e388:	2750      	movs	r7, #80	; 0x50
 800e38a:	e70c      	b.n	800e1a6 <__gethex+0x12a>
 800e38c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1f2      	bne.n	800e378 <__gethex+0x2fc>
 800e392:	e7d8      	b.n	800e346 <__gethex+0x2ca>
 800e394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1d5      	bne.n	800e346 <__gethex+0x2ca>
 800e39a:	e7ed      	b.n	800e378 <__gethex+0x2fc>
 800e39c:	1e6f      	subs	r7, r5, #1
 800e39e:	f1ba 0f00 	cmp.w	sl, #0
 800e3a2:	d131      	bne.n	800e408 <__gethex+0x38c>
 800e3a4:	b127      	cbz	r7, 800e3b0 <__gethex+0x334>
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f000 fe2d 	bl	800f008 <__any_on>
 800e3ae:	4682      	mov	sl, r0
 800e3b0:	117b      	asrs	r3, r7, #5
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e3b8:	f007 071f 	and.w	r7, r7, #31
 800e3bc:	fa01 f707 	lsl.w	r7, r1, r7
 800e3c0:	421f      	tst	r7, r3
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	bf18      	it	ne
 800e3c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800e3cc:	1b76      	subs	r6, r6, r5
 800e3ce:	f7ff fded 	bl	800dfac <rshift>
 800e3d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e3d6:	2702      	movs	r7, #2
 800e3d8:	f1ba 0f00 	cmp.w	sl, #0
 800e3dc:	d048      	beq.n	800e470 <__gethex+0x3f4>
 800e3de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d015      	beq.n	800e412 <__gethex+0x396>
 800e3e6:	2b03      	cmp	r3, #3
 800e3e8:	d017      	beq.n	800e41a <__gethex+0x39e>
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d109      	bne.n	800e402 <__gethex+0x386>
 800e3ee:	f01a 0f02 	tst.w	sl, #2
 800e3f2:	d006      	beq.n	800e402 <__gethex+0x386>
 800e3f4:	f8d9 0000 	ldr.w	r0, [r9]
 800e3f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800e3fc:	f01a 0f01 	tst.w	sl, #1
 800e400:	d10e      	bne.n	800e420 <__gethex+0x3a4>
 800e402:	f047 0710 	orr.w	r7, r7, #16
 800e406:	e033      	b.n	800e470 <__gethex+0x3f4>
 800e408:	f04f 0a01 	mov.w	sl, #1
 800e40c:	e7d0      	b.n	800e3b0 <__gethex+0x334>
 800e40e:	2701      	movs	r7, #1
 800e410:	e7e2      	b.n	800e3d8 <__gethex+0x35c>
 800e412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e414:	f1c3 0301 	rsb	r3, r3, #1
 800e418:	9315      	str	r3, [sp, #84]	; 0x54
 800e41a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d0f0      	beq.n	800e402 <__gethex+0x386>
 800e420:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e424:	f104 0314 	add.w	r3, r4, #20
 800e428:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e42c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e430:	f04f 0c00 	mov.w	ip, #0
 800e434:	4618      	mov	r0, r3
 800e436:	f853 2b04 	ldr.w	r2, [r3], #4
 800e43a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e43e:	d01c      	beq.n	800e47a <__gethex+0x3fe>
 800e440:	3201      	adds	r2, #1
 800e442:	6002      	str	r2, [r0, #0]
 800e444:	2f02      	cmp	r7, #2
 800e446:	f104 0314 	add.w	r3, r4, #20
 800e44a:	d13f      	bne.n	800e4cc <__gethex+0x450>
 800e44c:	f8d8 2000 	ldr.w	r2, [r8]
 800e450:	3a01      	subs	r2, #1
 800e452:	42b2      	cmp	r2, r6
 800e454:	d10a      	bne.n	800e46c <__gethex+0x3f0>
 800e456:	1171      	asrs	r1, r6, #5
 800e458:	2201      	movs	r2, #1
 800e45a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e45e:	f006 061f 	and.w	r6, r6, #31
 800e462:	fa02 f606 	lsl.w	r6, r2, r6
 800e466:	421e      	tst	r6, r3
 800e468:	bf18      	it	ne
 800e46a:	4617      	movne	r7, r2
 800e46c:	f047 0720 	orr.w	r7, r7, #32
 800e470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e472:	601c      	str	r4, [r3, #0]
 800e474:	9b04      	ldr	r3, [sp, #16]
 800e476:	601d      	str	r5, [r3, #0]
 800e478:	e695      	b.n	800e1a6 <__gethex+0x12a>
 800e47a:	4299      	cmp	r1, r3
 800e47c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e480:	d8d8      	bhi.n	800e434 <__gethex+0x3b8>
 800e482:	68a3      	ldr	r3, [r4, #8]
 800e484:	459b      	cmp	fp, r3
 800e486:	db19      	blt.n	800e4bc <__gethex+0x440>
 800e488:	6861      	ldr	r1, [r4, #4]
 800e48a:	ee18 0a10 	vmov	r0, s16
 800e48e:	3101      	adds	r1, #1
 800e490:	f000 f91a 	bl	800e6c8 <_Balloc>
 800e494:	4681      	mov	r9, r0
 800e496:	b918      	cbnz	r0, 800e4a0 <__gethex+0x424>
 800e498:	4b1a      	ldr	r3, [pc, #104]	; (800e504 <__gethex+0x488>)
 800e49a:	4602      	mov	r2, r0
 800e49c:	2184      	movs	r1, #132	; 0x84
 800e49e:	e6a8      	b.n	800e1f2 <__gethex+0x176>
 800e4a0:	6922      	ldr	r2, [r4, #16]
 800e4a2:	3202      	adds	r2, #2
 800e4a4:	f104 010c 	add.w	r1, r4, #12
 800e4a8:	0092      	lsls	r2, r2, #2
 800e4aa:	300c      	adds	r0, #12
 800e4ac:	f7fd f960 	bl	800b770 <memcpy>
 800e4b0:	4621      	mov	r1, r4
 800e4b2:	ee18 0a10 	vmov	r0, s16
 800e4b6:	f000 f947 	bl	800e748 <_Bfree>
 800e4ba:	464c      	mov	r4, r9
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	1c5a      	adds	r2, r3, #1
 800e4c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4c4:	6122      	str	r2, [r4, #16]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	615a      	str	r2, [r3, #20]
 800e4ca:	e7bb      	b.n	800e444 <__gethex+0x3c8>
 800e4cc:	6922      	ldr	r2, [r4, #16]
 800e4ce:	455a      	cmp	r2, fp
 800e4d0:	dd0b      	ble.n	800e4ea <__gethex+0x46e>
 800e4d2:	2101      	movs	r1, #1
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7ff fd69 	bl	800dfac <rshift>
 800e4da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4de:	3501      	adds	r5, #1
 800e4e0:	42ab      	cmp	r3, r5
 800e4e2:	f6ff aed0 	blt.w	800e286 <__gethex+0x20a>
 800e4e6:	2701      	movs	r7, #1
 800e4e8:	e7c0      	b.n	800e46c <__gethex+0x3f0>
 800e4ea:	f016 061f 	ands.w	r6, r6, #31
 800e4ee:	d0fa      	beq.n	800e4e6 <__gethex+0x46a>
 800e4f0:	4453      	add	r3, sl
 800e4f2:	f1c6 0620 	rsb	r6, r6, #32
 800e4f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e4fa:	f000 f9d7 	bl	800e8ac <__hi0bits>
 800e4fe:	42b0      	cmp	r0, r6
 800e500:	dbe7      	blt.n	800e4d2 <__gethex+0x456>
 800e502:	e7f0      	b.n	800e4e6 <__gethex+0x46a>
 800e504:	0801f730 	.word	0x0801f730

0800e508 <L_shift>:
 800e508:	f1c2 0208 	rsb	r2, r2, #8
 800e50c:	0092      	lsls	r2, r2, #2
 800e50e:	b570      	push	{r4, r5, r6, lr}
 800e510:	f1c2 0620 	rsb	r6, r2, #32
 800e514:	6843      	ldr	r3, [r0, #4]
 800e516:	6804      	ldr	r4, [r0, #0]
 800e518:	fa03 f506 	lsl.w	r5, r3, r6
 800e51c:	432c      	orrs	r4, r5
 800e51e:	40d3      	lsrs	r3, r2
 800e520:	6004      	str	r4, [r0, #0]
 800e522:	f840 3f04 	str.w	r3, [r0, #4]!
 800e526:	4288      	cmp	r0, r1
 800e528:	d3f4      	bcc.n	800e514 <L_shift+0xc>
 800e52a:	bd70      	pop	{r4, r5, r6, pc}

0800e52c <__match>:
 800e52c:	b530      	push	{r4, r5, lr}
 800e52e:	6803      	ldr	r3, [r0, #0]
 800e530:	3301      	adds	r3, #1
 800e532:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e536:	b914      	cbnz	r4, 800e53e <__match+0x12>
 800e538:	6003      	str	r3, [r0, #0]
 800e53a:	2001      	movs	r0, #1
 800e53c:	bd30      	pop	{r4, r5, pc}
 800e53e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e542:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e546:	2d19      	cmp	r5, #25
 800e548:	bf98      	it	ls
 800e54a:	3220      	addls	r2, #32
 800e54c:	42a2      	cmp	r2, r4
 800e54e:	d0f0      	beq.n	800e532 <__match+0x6>
 800e550:	2000      	movs	r0, #0
 800e552:	e7f3      	b.n	800e53c <__match+0x10>

0800e554 <__hexnan>:
 800e554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e558:	680b      	ldr	r3, [r1, #0]
 800e55a:	115e      	asrs	r6, r3, #5
 800e55c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e560:	f013 031f 	ands.w	r3, r3, #31
 800e564:	b087      	sub	sp, #28
 800e566:	bf18      	it	ne
 800e568:	3604      	addne	r6, #4
 800e56a:	2500      	movs	r5, #0
 800e56c:	1f37      	subs	r7, r6, #4
 800e56e:	4690      	mov	r8, r2
 800e570:	6802      	ldr	r2, [r0, #0]
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	4682      	mov	sl, r0
 800e576:	f846 5c04 	str.w	r5, [r6, #-4]
 800e57a:	46b9      	mov	r9, r7
 800e57c:	463c      	mov	r4, r7
 800e57e:	9502      	str	r5, [sp, #8]
 800e580:	46ab      	mov	fp, r5
 800e582:	7851      	ldrb	r1, [r2, #1]
 800e584:	1c53      	adds	r3, r2, #1
 800e586:	9303      	str	r3, [sp, #12]
 800e588:	b341      	cbz	r1, 800e5dc <__hexnan+0x88>
 800e58a:	4608      	mov	r0, r1
 800e58c:	9205      	str	r2, [sp, #20]
 800e58e:	9104      	str	r1, [sp, #16]
 800e590:	f7ff fd5e 	bl	800e050 <__hexdig_fun>
 800e594:	2800      	cmp	r0, #0
 800e596:	d14f      	bne.n	800e638 <__hexnan+0xe4>
 800e598:	9904      	ldr	r1, [sp, #16]
 800e59a:	9a05      	ldr	r2, [sp, #20]
 800e59c:	2920      	cmp	r1, #32
 800e59e:	d818      	bhi.n	800e5d2 <__hexnan+0x7e>
 800e5a0:	9b02      	ldr	r3, [sp, #8]
 800e5a2:	459b      	cmp	fp, r3
 800e5a4:	dd13      	ble.n	800e5ce <__hexnan+0x7a>
 800e5a6:	454c      	cmp	r4, r9
 800e5a8:	d206      	bcs.n	800e5b8 <__hexnan+0x64>
 800e5aa:	2d07      	cmp	r5, #7
 800e5ac:	dc04      	bgt.n	800e5b8 <__hexnan+0x64>
 800e5ae:	462a      	mov	r2, r5
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f7ff ffa8 	bl	800e508 <L_shift>
 800e5b8:	4544      	cmp	r4, r8
 800e5ba:	d950      	bls.n	800e65e <__hexnan+0x10a>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f1a4 0904 	sub.w	r9, r4, #4
 800e5c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5c6:	f8cd b008 	str.w	fp, [sp, #8]
 800e5ca:	464c      	mov	r4, r9
 800e5cc:	461d      	mov	r5, r3
 800e5ce:	9a03      	ldr	r2, [sp, #12]
 800e5d0:	e7d7      	b.n	800e582 <__hexnan+0x2e>
 800e5d2:	2929      	cmp	r1, #41	; 0x29
 800e5d4:	d156      	bne.n	800e684 <__hexnan+0x130>
 800e5d6:	3202      	adds	r2, #2
 800e5d8:	f8ca 2000 	str.w	r2, [sl]
 800e5dc:	f1bb 0f00 	cmp.w	fp, #0
 800e5e0:	d050      	beq.n	800e684 <__hexnan+0x130>
 800e5e2:	454c      	cmp	r4, r9
 800e5e4:	d206      	bcs.n	800e5f4 <__hexnan+0xa0>
 800e5e6:	2d07      	cmp	r5, #7
 800e5e8:	dc04      	bgt.n	800e5f4 <__hexnan+0xa0>
 800e5ea:	462a      	mov	r2, r5
 800e5ec:	4649      	mov	r1, r9
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f7ff ff8a 	bl	800e508 <L_shift>
 800e5f4:	4544      	cmp	r4, r8
 800e5f6:	d934      	bls.n	800e662 <__hexnan+0x10e>
 800e5f8:	f1a8 0204 	sub.w	r2, r8, #4
 800e5fc:	4623      	mov	r3, r4
 800e5fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800e602:	f842 1f04 	str.w	r1, [r2, #4]!
 800e606:	429f      	cmp	r7, r3
 800e608:	d2f9      	bcs.n	800e5fe <__hexnan+0xaa>
 800e60a:	1b3b      	subs	r3, r7, r4
 800e60c:	f023 0303 	bic.w	r3, r3, #3
 800e610:	3304      	adds	r3, #4
 800e612:	3401      	adds	r4, #1
 800e614:	3e03      	subs	r6, #3
 800e616:	42b4      	cmp	r4, r6
 800e618:	bf88      	it	hi
 800e61a:	2304      	movhi	r3, #4
 800e61c:	4443      	add	r3, r8
 800e61e:	2200      	movs	r2, #0
 800e620:	f843 2b04 	str.w	r2, [r3], #4
 800e624:	429f      	cmp	r7, r3
 800e626:	d2fb      	bcs.n	800e620 <__hexnan+0xcc>
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	b91b      	cbnz	r3, 800e634 <__hexnan+0xe0>
 800e62c:	4547      	cmp	r7, r8
 800e62e:	d127      	bne.n	800e680 <__hexnan+0x12c>
 800e630:	2301      	movs	r3, #1
 800e632:	603b      	str	r3, [r7, #0]
 800e634:	2005      	movs	r0, #5
 800e636:	e026      	b.n	800e686 <__hexnan+0x132>
 800e638:	3501      	adds	r5, #1
 800e63a:	2d08      	cmp	r5, #8
 800e63c:	f10b 0b01 	add.w	fp, fp, #1
 800e640:	dd06      	ble.n	800e650 <__hexnan+0xfc>
 800e642:	4544      	cmp	r4, r8
 800e644:	d9c3      	bls.n	800e5ce <__hexnan+0x7a>
 800e646:	2300      	movs	r3, #0
 800e648:	f844 3c04 	str.w	r3, [r4, #-4]
 800e64c:	2501      	movs	r5, #1
 800e64e:	3c04      	subs	r4, #4
 800e650:	6822      	ldr	r2, [r4, #0]
 800e652:	f000 000f 	and.w	r0, r0, #15
 800e656:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e65a:	6022      	str	r2, [r4, #0]
 800e65c:	e7b7      	b.n	800e5ce <__hexnan+0x7a>
 800e65e:	2508      	movs	r5, #8
 800e660:	e7b5      	b.n	800e5ce <__hexnan+0x7a>
 800e662:	9b01      	ldr	r3, [sp, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d0df      	beq.n	800e628 <__hexnan+0xd4>
 800e668:	f04f 32ff 	mov.w	r2, #4294967295
 800e66c:	f1c3 0320 	rsb	r3, r3, #32
 800e670:	fa22 f303 	lsr.w	r3, r2, r3
 800e674:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e678:	401a      	ands	r2, r3
 800e67a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e67e:	e7d3      	b.n	800e628 <__hexnan+0xd4>
 800e680:	3f04      	subs	r7, #4
 800e682:	e7d1      	b.n	800e628 <__hexnan+0xd4>
 800e684:	2004      	movs	r0, #4
 800e686:	b007      	add	sp, #28
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e68c <_localeconv_r>:
 800e68c:	4800      	ldr	r0, [pc, #0]	; (800e690 <_localeconv_r+0x4>)
 800e68e:	4770      	bx	lr
 800e690:	200001d4 	.word	0x200001d4

0800e694 <malloc>:
 800e694:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <malloc+0xc>)
 800e696:	4601      	mov	r1, r0
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	f000 bd59 	b.w	800f150 <_malloc_r>
 800e69e:	bf00      	nop
 800e6a0:	2000007c 	.word	0x2000007c

0800e6a4 <__ascii_mbtowc>:
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	b901      	cbnz	r1, 800e6aa <__ascii_mbtowc+0x6>
 800e6a8:	a901      	add	r1, sp, #4
 800e6aa:	b142      	cbz	r2, 800e6be <__ascii_mbtowc+0x1a>
 800e6ac:	b14b      	cbz	r3, 800e6c2 <__ascii_mbtowc+0x1e>
 800e6ae:	7813      	ldrb	r3, [r2, #0]
 800e6b0:	600b      	str	r3, [r1, #0]
 800e6b2:	7812      	ldrb	r2, [r2, #0]
 800e6b4:	1e10      	subs	r0, r2, #0
 800e6b6:	bf18      	it	ne
 800e6b8:	2001      	movne	r0, #1
 800e6ba:	b002      	add	sp, #8
 800e6bc:	4770      	bx	lr
 800e6be:	4610      	mov	r0, r2
 800e6c0:	e7fb      	b.n	800e6ba <__ascii_mbtowc+0x16>
 800e6c2:	f06f 0001 	mvn.w	r0, #1
 800e6c6:	e7f8      	b.n	800e6ba <__ascii_mbtowc+0x16>

0800e6c8 <_Balloc>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	460d      	mov	r5, r1
 800e6d0:	b976      	cbnz	r6, 800e6f0 <_Balloc+0x28>
 800e6d2:	2010      	movs	r0, #16
 800e6d4:	f7ff ffde 	bl	800e694 <malloc>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	6260      	str	r0, [r4, #36]	; 0x24
 800e6dc:	b920      	cbnz	r0, 800e6e8 <_Balloc+0x20>
 800e6de:	4b18      	ldr	r3, [pc, #96]	; (800e740 <_Balloc+0x78>)
 800e6e0:	4818      	ldr	r0, [pc, #96]	; (800e744 <_Balloc+0x7c>)
 800e6e2:	2166      	movs	r1, #102	; 0x66
 800e6e4:	f000 ff3e 	bl	800f564 <__assert_func>
 800e6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6ec:	6006      	str	r6, [r0, #0]
 800e6ee:	60c6      	str	r6, [r0, #12]
 800e6f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e6f2:	68f3      	ldr	r3, [r6, #12]
 800e6f4:	b183      	cbz	r3, 800e718 <_Balloc+0x50>
 800e6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6fe:	b9b8      	cbnz	r0, 800e730 <_Balloc+0x68>
 800e700:	2101      	movs	r1, #1
 800e702:	fa01 f605 	lsl.w	r6, r1, r5
 800e706:	1d72      	adds	r2, r6, #5
 800e708:	0092      	lsls	r2, r2, #2
 800e70a:	4620      	mov	r0, r4
 800e70c:	f000 fc9d 	bl	800f04a <_calloc_r>
 800e710:	b160      	cbz	r0, 800e72c <_Balloc+0x64>
 800e712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e716:	e00e      	b.n	800e736 <_Balloc+0x6e>
 800e718:	2221      	movs	r2, #33	; 0x21
 800e71a:	2104      	movs	r1, #4
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 fc94 	bl	800f04a <_calloc_r>
 800e722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e724:	60f0      	str	r0, [r6, #12]
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1e4      	bne.n	800e6f6 <_Balloc+0x2e>
 800e72c:	2000      	movs	r0, #0
 800e72e:	bd70      	pop	{r4, r5, r6, pc}
 800e730:	6802      	ldr	r2, [r0, #0]
 800e732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e736:	2300      	movs	r3, #0
 800e738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e73c:	e7f7      	b.n	800e72e <_Balloc+0x66>
 800e73e:	bf00      	nop
 800e740:	0801f6be 	.word	0x0801f6be
 800e744:	0801f7bc 	.word	0x0801f7bc

0800e748 <_Bfree>:
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e74c:	4605      	mov	r5, r0
 800e74e:	460c      	mov	r4, r1
 800e750:	b976      	cbnz	r6, 800e770 <_Bfree+0x28>
 800e752:	2010      	movs	r0, #16
 800e754:	f7ff ff9e 	bl	800e694 <malloc>
 800e758:	4602      	mov	r2, r0
 800e75a:	6268      	str	r0, [r5, #36]	; 0x24
 800e75c:	b920      	cbnz	r0, 800e768 <_Bfree+0x20>
 800e75e:	4b09      	ldr	r3, [pc, #36]	; (800e784 <_Bfree+0x3c>)
 800e760:	4809      	ldr	r0, [pc, #36]	; (800e788 <_Bfree+0x40>)
 800e762:	218a      	movs	r1, #138	; 0x8a
 800e764:	f000 fefe 	bl	800f564 <__assert_func>
 800e768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e76c:	6006      	str	r6, [r0, #0]
 800e76e:	60c6      	str	r6, [r0, #12]
 800e770:	b13c      	cbz	r4, 800e782 <_Bfree+0x3a>
 800e772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e774:	6862      	ldr	r2, [r4, #4]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e77c:	6021      	str	r1, [r4, #0]
 800e77e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e782:	bd70      	pop	{r4, r5, r6, pc}
 800e784:	0801f6be 	.word	0x0801f6be
 800e788:	0801f7bc 	.word	0x0801f7bc

0800e78c <__multadd>:
 800e78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e790:	690d      	ldr	r5, [r1, #16]
 800e792:	4607      	mov	r7, r0
 800e794:	460c      	mov	r4, r1
 800e796:	461e      	mov	r6, r3
 800e798:	f101 0c14 	add.w	ip, r1, #20
 800e79c:	2000      	movs	r0, #0
 800e79e:	f8dc 3000 	ldr.w	r3, [ip]
 800e7a2:	b299      	uxth	r1, r3
 800e7a4:	fb02 6101 	mla	r1, r2, r1, r6
 800e7a8:	0c1e      	lsrs	r6, r3, #16
 800e7aa:	0c0b      	lsrs	r3, r1, #16
 800e7ac:	fb02 3306 	mla	r3, r2, r6, r3
 800e7b0:	b289      	uxth	r1, r1
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e7b8:	4285      	cmp	r5, r0
 800e7ba:	f84c 1b04 	str.w	r1, [ip], #4
 800e7be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e7c2:	dcec      	bgt.n	800e79e <__multadd+0x12>
 800e7c4:	b30e      	cbz	r6, 800e80a <__multadd+0x7e>
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	42ab      	cmp	r3, r5
 800e7ca:	dc19      	bgt.n	800e800 <__multadd+0x74>
 800e7cc:	6861      	ldr	r1, [r4, #4]
 800e7ce:	4638      	mov	r0, r7
 800e7d0:	3101      	adds	r1, #1
 800e7d2:	f7ff ff79 	bl	800e6c8 <_Balloc>
 800e7d6:	4680      	mov	r8, r0
 800e7d8:	b928      	cbnz	r0, 800e7e6 <__multadd+0x5a>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	4b0c      	ldr	r3, [pc, #48]	; (800e810 <__multadd+0x84>)
 800e7de:	480d      	ldr	r0, [pc, #52]	; (800e814 <__multadd+0x88>)
 800e7e0:	21b5      	movs	r1, #181	; 0xb5
 800e7e2:	f000 febf 	bl	800f564 <__assert_func>
 800e7e6:	6922      	ldr	r2, [r4, #16]
 800e7e8:	3202      	adds	r2, #2
 800e7ea:	f104 010c 	add.w	r1, r4, #12
 800e7ee:	0092      	lsls	r2, r2, #2
 800e7f0:	300c      	adds	r0, #12
 800e7f2:	f7fc ffbd 	bl	800b770 <memcpy>
 800e7f6:	4621      	mov	r1, r4
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	f7ff ffa5 	bl	800e748 <_Bfree>
 800e7fe:	4644      	mov	r4, r8
 800e800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e804:	3501      	adds	r5, #1
 800e806:	615e      	str	r6, [r3, #20]
 800e808:	6125      	str	r5, [r4, #16]
 800e80a:	4620      	mov	r0, r4
 800e80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e810:	0801f730 	.word	0x0801f730
 800e814:	0801f7bc 	.word	0x0801f7bc

0800e818 <__s2b>:
 800e818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e81c:	460c      	mov	r4, r1
 800e81e:	4615      	mov	r5, r2
 800e820:	461f      	mov	r7, r3
 800e822:	2209      	movs	r2, #9
 800e824:	3308      	adds	r3, #8
 800e826:	4606      	mov	r6, r0
 800e828:	fb93 f3f2 	sdiv	r3, r3, r2
 800e82c:	2100      	movs	r1, #0
 800e82e:	2201      	movs	r2, #1
 800e830:	429a      	cmp	r2, r3
 800e832:	db09      	blt.n	800e848 <__s2b+0x30>
 800e834:	4630      	mov	r0, r6
 800e836:	f7ff ff47 	bl	800e6c8 <_Balloc>
 800e83a:	b940      	cbnz	r0, 800e84e <__s2b+0x36>
 800e83c:	4602      	mov	r2, r0
 800e83e:	4b19      	ldr	r3, [pc, #100]	; (800e8a4 <__s2b+0x8c>)
 800e840:	4819      	ldr	r0, [pc, #100]	; (800e8a8 <__s2b+0x90>)
 800e842:	21ce      	movs	r1, #206	; 0xce
 800e844:	f000 fe8e 	bl	800f564 <__assert_func>
 800e848:	0052      	lsls	r2, r2, #1
 800e84a:	3101      	adds	r1, #1
 800e84c:	e7f0      	b.n	800e830 <__s2b+0x18>
 800e84e:	9b08      	ldr	r3, [sp, #32]
 800e850:	6143      	str	r3, [r0, #20]
 800e852:	2d09      	cmp	r5, #9
 800e854:	f04f 0301 	mov.w	r3, #1
 800e858:	6103      	str	r3, [r0, #16]
 800e85a:	dd16      	ble.n	800e88a <__s2b+0x72>
 800e85c:	f104 0909 	add.w	r9, r4, #9
 800e860:	46c8      	mov	r8, r9
 800e862:	442c      	add	r4, r5
 800e864:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e868:	4601      	mov	r1, r0
 800e86a:	3b30      	subs	r3, #48	; 0x30
 800e86c:	220a      	movs	r2, #10
 800e86e:	4630      	mov	r0, r6
 800e870:	f7ff ff8c 	bl	800e78c <__multadd>
 800e874:	45a0      	cmp	r8, r4
 800e876:	d1f5      	bne.n	800e864 <__s2b+0x4c>
 800e878:	f1a5 0408 	sub.w	r4, r5, #8
 800e87c:	444c      	add	r4, r9
 800e87e:	1b2d      	subs	r5, r5, r4
 800e880:	1963      	adds	r3, r4, r5
 800e882:	42bb      	cmp	r3, r7
 800e884:	db04      	blt.n	800e890 <__s2b+0x78>
 800e886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e88a:	340a      	adds	r4, #10
 800e88c:	2509      	movs	r5, #9
 800e88e:	e7f6      	b.n	800e87e <__s2b+0x66>
 800e890:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e894:	4601      	mov	r1, r0
 800e896:	3b30      	subs	r3, #48	; 0x30
 800e898:	220a      	movs	r2, #10
 800e89a:	4630      	mov	r0, r6
 800e89c:	f7ff ff76 	bl	800e78c <__multadd>
 800e8a0:	e7ee      	b.n	800e880 <__s2b+0x68>
 800e8a2:	bf00      	nop
 800e8a4:	0801f730 	.word	0x0801f730
 800e8a8:	0801f7bc 	.word	0x0801f7bc

0800e8ac <__hi0bits>:
 800e8ac:	0c03      	lsrs	r3, r0, #16
 800e8ae:	041b      	lsls	r3, r3, #16
 800e8b0:	b9d3      	cbnz	r3, 800e8e8 <__hi0bits+0x3c>
 800e8b2:	0400      	lsls	r0, r0, #16
 800e8b4:	2310      	movs	r3, #16
 800e8b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e8ba:	bf04      	itt	eq
 800e8bc:	0200      	lsleq	r0, r0, #8
 800e8be:	3308      	addeq	r3, #8
 800e8c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e8c4:	bf04      	itt	eq
 800e8c6:	0100      	lsleq	r0, r0, #4
 800e8c8:	3304      	addeq	r3, #4
 800e8ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e8ce:	bf04      	itt	eq
 800e8d0:	0080      	lsleq	r0, r0, #2
 800e8d2:	3302      	addeq	r3, #2
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	db05      	blt.n	800e8e4 <__hi0bits+0x38>
 800e8d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e8dc:	f103 0301 	add.w	r3, r3, #1
 800e8e0:	bf08      	it	eq
 800e8e2:	2320      	moveq	r3, #32
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	4770      	bx	lr
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	e7e4      	b.n	800e8b6 <__hi0bits+0xa>

0800e8ec <__lo0bits>:
 800e8ec:	6803      	ldr	r3, [r0, #0]
 800e8ee:	f013 0207 	ands.w	r2, r3, #7
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	d00b      	beq.n	800e90e <__lo0bits+0x22>
 800e8f6:	07da      	lsls	r2, r3, #31
 800e8f8:	d423      	bmi.n	800e942 <__lo0bits+0x56>
 800e8fa:	0798      	lsls	r0, r3, #30
 800e8fc:	bf49      	itett	mi
 800e8fe:	085b      	lsrmi	r3, r3, #1
 800e900:	089b      	lsrpl	r3, r3, #2
 800e902:	2001      	movmi	r0, #1
 800e904:	600b      	strmi	r3, [r1, #0]
 800e906:	bf5c      	itt	pl
 800e908:	600b      	strpl	r3, [r1, #0]
 800e90a:	2002      	movpl	r0, #2
 800e90c:	4770      	bx	lr
 800e90e:	b298      	uxth	r0, r3
 800e910:	b9a8      	cbnz	r0, 800e93e <__lo0bits+0x52>
 800e912:	0c1b      	lsrs	r3, r3, #16
 800e914:	2010      	movs	r0, #16
 800e916:	b2da      	uxtb	r2, r3
 800e918:	b90a      	cbnz	r2, 800e91e <__lo0bits+0x32>
 800e91a:	3008      	adds	r0, #8
 800e91c:	0a1b      	lsrs	r3, r3, #8
 800e91e:	071a      	lsls	r2, r3, #28
 800e920:	bf04      	itt	eq
 800e922:	091b      	lsreq	r3, r3, #4
 800e924:	3004      	addeq	r0, #4
 800e926:	079a      	lsls	r2, r3, #30
 800e928:	bf04      	itt	eq
 800e92a:	089b      	lsreq	r3, r3, #2
 800e92c:	3002      	addeq	r0, #2
 800e92e:	07da      	lsls	r2, r3, #31
 800e930:	d403      	bmi.n	800e93a <__lo0bits+0x4e>
 800e932:	085b      	lsrs	r3, r3, #1
 800e934:	f100 0001 	add.w	r0, r0, #1
 800e938:	d005      	beq.n	800e946 <__lo0bits+0x5a>
 800e93a:	600b      	str	r3, [r1, #0]
 800e93c:	4770      	bx	lr
 800e93e:	4610      	mov	r0, r2
 800e940:	e7e9      	b.n	800e916 <__lo0bits+0x2a>
 800e942:	2000      	movs	r0, #0
 800e944:	4770      	bx	lr
 800e946:	2020      	movs	r0, #32
 800e948:	4770      	bx	lr
	...

0800e94c <__i2b>:
 800e94c:	b510      	push	{r4, lr}
 800e94e:	460c      	mov	r4, r1
 800e950:	2101      	movs	r1, #1
 800e952:	f7ff feb9 	bl	800e6c8 <_Balloc>
 800e956:	4602      	mov	r2, r0
 800e958:	b928      	cbnz	r0, 800e966 <__i2b+0x1a>
 800e95a:	4b05      	ldr	r3, [pc, #20]	; (800e970 <__i2b+0x24>)
 800e95c:	4805      	ldr	r0, [pc, #20]	; (800e974 <__i2b+0x28>)
 800e95e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e962:	f000 fdff 	bl	800f564 <__assert_func>
 800e966:	2301      	movs	r3, #1
 800e968:	6144      	str	r4, [r0, #20]
 800e96a:	6103      	str	r3, [r0, #16]
 800e96c:	bd10      	pop	{r4, pc}
 800e96e:	bf00      	nop
 800e970:	0801f730 	.word	0x0801f730
 800e974:	0801f7bc 	.word	0x0801f7bc

0800e978 <__multiply>:
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	4691      	mov	r9, r2
 800e97e:	690a      	ldr	r2, [r1, #16]
 800e980:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e984:	429a      	cmp	r2, r3
 800e986:	bfb8      	it	lt
 800e988:	460b      	movlt	r3, r1
 800e98a:	460c      	mov	r4, r1
 800e98c:	bfbc      	itt	lt
 800e98e:	464c      	movlt	r4, r9
 800e990:	4699      	movlt	r9, r3
 800e992:	6927      	ldr	r7, [r4, #16]
 800e994:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e998:	68a3      	ldr	r3, [r4, #8]
 800e99a:	6861      	ldr	r1, [r4, #4]
 800e99c:	eb07 060a 	add.w	r6, r7, sl
 800e9a0:	42b3      	cmp	r3, r6
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	bfb8      	it	lt
 800e9a6:	3101      	addlt	r1, #1
 800e9a8:	f7ff fe8e 	bl	800e6c8 <_Balloc>
 800e9ac:	b930      	cbnz	r0, 800e9bc <__multiply+0x44>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	4b44      	ldr	r3, [pc, #272]	; (800eac4 <__multiply+0x14c>)
 800e9b2:	4845      	ldr	r0, [pc, #276]	; (800eac8 <__multiply+0x150>)
 800e9b4:	f240 115d 	movw	r1, #349	; 0x15d
 800e9b8:	f000 fdd4 	bl	800f564 <__assert_func>
 800e9bc:	f100 0514 	add.w	r5, r0, #20
 800e9c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	4543      	cmp	r3, r8
 800e9ca:	d321      	bcc.n	800ea10 <__multiply+0x98>
 800e9cc:	f104 0314 	add.w	r3, r4, #20
 800e9d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e9d4:	f109 0314 	add.w	r3, r9, #20
 800e9d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e9dc:	9202      	str	r2, [sp, #8]
 800e9de:	1b3a      	subs	r2, r7, r4
 800e9e0:	3a15      	subs	r2, #21
 800e9e2:	f022 0203 	bic.w	r2, r2, #3
 800e9e6:	3204      	adds	r2, #4
 800e9e8:	f104 0115 	add.w	r1, r4, #21
 800e9ec:	428f      	cmp	r7, r1
 800e9ee:	bf38      	it	cc
 800e9f0:	2204      	movcc	r2, #4
 800e9f2:	9201      	str	r2, [sp, #4]
 800e9f4:	9a02      	ldr	r2, [sp, #8]
 800e9f6:	9303      	str	r3, [sp, #12]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d80c      	bhi.n	800ea16 <__multiply+0x9e>
 800e9fc:	2e00      	cmp	r6, #0
 800e9fe:	dd03      	ble.n	800ea08 <__multiply+0x90>
 800ea00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d05a      	beq.n	800eabe <__multiply+0x146>
 800ea08:	6106      	str	r6, [r0, #16]
 800ea0a:	b005      	add	sp, #20
 800ea0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea10:	f843 2b04 	str.w	r2, [r3], #4
 800ea14:	e7d8      	b.n	800e9c8 <__multiply+0x50>
 800ea16:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea1a:	f1ba 0f00 	cmp.w	sl, #0
 800ea1e:	d024      	beq.n	800ea6a <__multiply+0xf2>
 800ea20:	f104 0e14 	add.w	lr, r4, #20
 800ea24:	46a9      	mov	r9, r5
 800ea26:	f04f 0c00 	mov.w	ip, #0
 800ea2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ea2e:	f8d9 1000 	ldr.w	r1, [r9]
 800ea32:	fa1f fb82 	uxth.w	fp, r2
 800ea36:	b289      	uxth	r1, r1
 800ea38:	fb0a 110b 	mla	r1, sl, fp, r1
 800ea3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ea40:	f8d9 2000 	ldr.w	r2, [r9]
 800ea44:	4461      	add	r1, ip
 800ea46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ea4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ea4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ea52:	b289      	uxth	r1, r1
 800ea54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ea58:	4577      	cmp	r7, lr
 800ea5a:	f849 1b04 	str.w	r1, [r9], #4
 800ea5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ea62:	d8e2      	bhi.n	800ea2a <__multiply+0xb2>
 800ea64:	9a01      	ldr	r2, [sp, #4]
 800ea66:	f845 c002 	str.w	ip, [r5, r2]
 800ea6a:	9a03      	ldr	r2, [sp, #12]
 800ea6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea70:	3304      	adds	r3, #4
 800ea72:	f1b9 0f00 	cmp.w	r9, #0
 800ea76:	d020      	beq.n	800eaba <__multiply+0x142>
 800ea78:	6829      	ldr	r1, [r5, #0]
 800ea7a:	f104 0c14 	add.w	ip, r4, #20
 800ea7e:	46ae      	mov	lr, r5
 800ea80:	f04f 0a00 	mov.w	sl, #0
 800ea84:	f8bc b000 	ldrh.w	fp, [ip]
 800ea88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ea8c:	fb09 220b 	mla	r2, r9, fp, r2
 800ea90:	4492      	add	sl, r2
 800ea92:	b289      	uxth	r1, r1
 800ea94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ea98:	f84e 1b04 	str.w	r1, [lr], #4
 800ea9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eaa0:	f8be 1000 	ldrh.w	r1, [lr]
 800eaa4:	0c12      	lsrs	r2, r2, #16
 800eaa6:	fb09 1102 	mla	r1, r9, r2, r1
 800eaaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eaae:	4567      	cmp	r7, ip
 800eab0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eab4:	d8e6      	bhi.n	800ea84 <__multiply+0x10c>
 800eab6:	9a01      	ldr	r2, [sp, #4]
 800eab8:	50a9      	str	r1, [r5, r2]
 800eaba:	3504      	adds	r5, #4
 800eabc:	e79a      	b.n	800e9f4 <__multiply+0x7c>
 800eabe:	3e01      	subs	r6, #1
 800eac0:	e79c      	b.n	800e9fc <__multiply+0x84>
 800eac2:	bf00      	nop
 800eac4:	0801f730 	.word	0x0801f730
 800eac8:	0801f7bc 	.word	0x0801f7bc

0800eacc <__pow5mult>:
 800eacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ead0:	4615      	mov	r5, r2
 800ead2:	f012 0203 	ands.w	r2, r2, #3
 800ead6:	4606      	mov	r6, r0
 800ead8:	460f      	mov	r7, r1
 800eada:	d007      	beq.n	800eaec <__pow5mult+0x20>
 800eadc:	4c25      	ldr	r4, [pc, #148]	; (800eb74 <__pow5mult+0xa8>)
 800eade:	3a01      	subs	r2, #1
 800eae0:	2300      	movs	r3, #0
 800eae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eae6:	f7ff fe51 	bl	800e78c <__multadd>
 800eaea:	4607      	mov	r7, r0
 800eaec:	10ad      	asrs	r5, r5, #2
 800eaee:	d03d      	beq.n	800eb6c <__pow5mult+0xa0>
 800eaf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eaf2:	b97c      	cbnz	r4, 800eb14 <__pow5mult+0x48>
 800eaf4:	2010      	movs	r0, #16
 800eaf6:	f7ff fdcd 	bl	800e694 <malloc>
 800eafa:	4602      	mov	r2, r0
 800eafc:	6270      	str	r0, [r6, #36]	; 0x24
 800eafe:	b928      	cbnz	r0, 800eb0c <__pow5mult+0x40>
 800eb00:	4b1d      	ldr	r3, [pc, #116]	; (800eb78 <__pow5mult+0xac>)
 800eb02:	481e      	ldr	r0, [pc, #120]	; (800eb7c <__pow5mult+0xb0>)
 800eb04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eb08:	f000 fd2c 	bl	800f564 <__assert_func>
 800eb0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb10:	6004      	str	r4, [r0, #0]
 800eb12:	60c4      	str	r4, [r0, #12]
 800eb14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb1c:	b94c      	cbnz	r4, 800eb32 <__pow5mult+0x66>
 800eb1e:	f240 2171 	movw	r1, #625	; 0x271
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7ff ff12 	bl	800e94c <__i2b>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb2e:	4604      	mov	r4, r0
 800eb30:	6003      	str	r3, [r0, #0]
 800eb32:	f04f 0900 	mov.w	r9, #0
 800eb36:	07eb      	lsls	r3, r5, #31
 800eb38:	d50a      	bpl.n	800eb50 <__pow5mult+0x84>
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	4622      	mov	r2, r4
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f7ff ff1a 	bl	800e978 <__multiply>
 800eb44:	4639      	mov	r1, r7
 800eb46:	4680      	mov	r8, r0
 800eb48:	4630      	mov	r0, r6
 800eb4a:	f7ff fdfd 	bl	800e748 <_Bfree>
 800eb4e:	4647      	mov	r7, r8
 800eb50:	106d      	asrs	r5, r5, #1
 800eb52:	d00b      	beq.n	800eb6c <__pow5mult+0xa0>
 800eb54:	6820      	ldr	r0, [r4, #0]
 800eb56:	b938      	cbnz	r0, 800eb68 <__pow5mult+0x9c>
 800eb58:	4622      	mov	r2, r4
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	f7ff ff0b 	bl	800e978 <__multiply>
 800eb62:	6020      	str	r0, [r4, #0]
 800eb64:	f8c0 9000 	str.w	r9, [r0]
 800eb68:	4604      	mov	r4, r0
 800eb6a:	e7e4      	b.n	800eb36 <__pow5mult+0x6a>
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb72:	bf00      	nop
 800eb74:	0801f908 	.word	0x0801f908
 800eb78:	0801f6be 	.word	0x0801f6be
 800eb7c:	0801f7bc 	.word	0x0801f7bc

0800eb80 <__lshift>:
 800eb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb84:	460c      	mov	r4, r1
 800eb86:	6849      	ldr	r1, [r1, #4]
 800eb88:	6923      	ldr	r3, [r4, #16]
 800eb8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb8e:	68a3      	ldr	r3, [r4, #8]
 800eb90:	4607      	mov	r7, r0
 800eb92:	4691      	mov	r9, r2
 800eb94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb98:	f108 0601 	add.w	r6, r8, #1
 800eb9c:	42b3      	cmp	r3, r6
 800eb9e:	db0b      	blt.n	800ebb8 <__lshift+0x38>
 800eba0:	4638      	mov	r0, r7
 800eba2:	f7ff fd91 	bl	800e6c8 <_Balloc>
 800eba6:	4605      	mov	r5, r0
 800eba8:	b948      	cbnz	r0, 800ebbe <__lshift+0x3e>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4b2a      	ldr	r3, [pc, #168]	; (800ec58 <__lshift+0xd8>)
 800ebae:	482b      	ldr	r0, [pc, #172]	; (800ec5c <__lshift+0xdc>)
 800ebb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ebb4:	f000 fcd6 	bl	800f564 <__assert_func>
 800ebb8:	3101      	adds	r1, #1
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	e7ee      	b.n	800eb9c <__lshift+0x1c>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f100 0114 	add.w	r1, r0, #20
 800ebc4:	f100 0210 	add.w	r2, r0, #16
 800ebc8:	4618      	mov	r0, r3
 800ebca:	4553      	cmp	r3, sl
 800ebcc:	db37      	blt.n	800ec3e <__lshift+0xbe>
 800ebce:	6920      	ldr	r0, [r4, #16]
 800ebd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebd4:	f104 0314 	add.w	r3, r4, #20
 800ebd8:	f019 091f 	ands.w	r9, r9, #31
 800ebdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebe0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ebe4:	d02f      	beq.n	800ec46 <__lshift+0xc6>
 800ebe6:	f1c9 0e20 	rsb	lr, r9, #32
 800ebea:	468a      	mov	sl, r1
 800ebec:	f04f 0c00 	mov.w	ip, #0
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	fa02 f209 	lsl.w	r2, r2, r9
 800ebf6:	ea42 020c 	orr.w	r2, r2, ip
 800ebfa:	f84a 2b04 	str.w	r2, [sl], #4
 800ebfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec02:	4298      	cmp	r0, r3
 800ec04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ec08:	d8f2      	bhi.n	800ebf0 <__lshift+0x70>
 800ec0a:	1b03      	subs	r3, r0, r4
 800ec0c:	3b15      	subs	r3, #21
 800ec0e:	f023 0303 	bic.w	r3, r3, #3
 800ec12:	3304      	adds	r3, #4
 800ec14:	f104 0215 	add.w	r2, r4, #21
 800ec18:	4290      	cmp	r0, r2
 800ec1a:	bf38      	it	cc
 800ec1c:	2304      	movcc	r3, #4
 800ec1e:	f841 c003 	str.w	ip, [r1, r3]
 800ec22:	f1bc 0f00 	cmp.w	ip, #0
 800ec26:	d001      	beq.n	800ec2c <__lshift+0xac>
 800ec28:	f108 0602 	add.w	r6, r8, #2
 800ec2c:	3e01      	subs	r6, #1
 800ec2e:	4638      	mov	r0, r7
 800ec30:	612e      	str	r6, [r5, #16]
 800ec32:	4621      	mov	r1, r4
 800ec34:	f7ff fd88 	bl	800e748 <_Bfree>
 800ec38:	4628      	mov	r0, r5
 800ec3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec42:	3301      	adds	r3, #1
 800ec44:	e7c1      	b.n	800ebca <__lshift+0x4a>
 800ec46:	3904      	subs	r1, #4
 800ec48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec50:	4298      	cmp	r0, r3
 800ec52:	d8f9      	bhi.n	800ec48 <__lshift+0xc8>
 800ec54:	e7ea      	b.n	800ec2c <__lshift+0xac>
 800ec56:	bf00      	nop
 800ec58:	0801f730 	.word	0x0801f730
 800ec5c:	0801f7bc 	.word	0x0801f7bc

0800ec60 <__mcmp>:
 800ec60:	b530      	push	{r4, r5, lr}
 800ec62:	6902      	ldr	r2, [r0, #16]
 800ec64:	690c      	ldr	r4, [r1, #16]
 800ec66:	1b12      	subs	r2, r2, r4
 800ec68:	d10e      	bne.n	800ec88 <__mcmp+0x28>
 800ec6a:	f100 0314 	add.w	r3, r0, #20
 800ec6e:	3114      	adds	r1, #20
 800ec70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec80:	42a5      	cmp	r5, r4
 800ec82:	d003      	beq.n	800ec8c <__mcmp+0x2c>
 800ec84:	d305      	bcc.n	800ec92 <__mcmp+0x32>
 800ec86:	2201      	movs	r2, #1
 800ec88:	4610      	mov	r0, r2
 800ec8a:	bd30      	pop	{r4, r5, pc}
 800ec8c:	4283      	cmp	r3, r0
 800ec8e:	d3f3      	bcc.n	800ec78 <__mcmp+0x18>
 800ec90:	e7fa      	b.n	800ec88 <__mcmp+0x28>
 800ec92:	f04f 32ff 	mov.w	r2, #4294967295
 800ec96:	e7f7      	b.n	800ec88 <__mcmp+0x28>

0800ec98 <__mdiff>:
 800ec98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	4606      	mov	r6, r0
 800eca0:	4611      	mov	r1, r2
 800eca2:	4620      	mov	r0, r4
 800eca4:	4690      	mov	r8, r2
 800eca6:	f7ff ffdb 	bl	800ec60 <__mcmp>
 800ecaa:	1e05      	subs	r5, r0, #0
 800ecac:	d110      	bne.n	800ecd0 <__mdiff+0x38>
 800ecae:	4629      	mov	r1, r5
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	f7ff fd09 	bl	800e6c8 <_Balloc>
 800ecb6:	b930      	cbnz	r0, 800ecc6 <__mdiff+0x2e>
 800ecb8:	4b3a      	ldr	r3, [pc, #232]	; (800eda4 <__mdiff+0x10c>)
 800ecba:	4602      	mov	r2, r0
 800ecbc:	f240 2132 	movw	r1, #562	; 0x232
 800ecc0:	4839      	ldr	r0, [pc, #228]	; (800eda8 <__mdiff+0x110>)
 800ecc2:	f000 fc4f 	bl	800f564 <__assert_func>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd0:	bfa4      	itt	ge
 800ecd2:	4643      	movge	r3, r8
 800ecd4:	46a0      	movge	r8, r4
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ecdc:	bfa6      	itte	ge
 800ecde:	461c      	movge	r4, r3
 800ece0:	2500      	movge	r5, #0
 800ece2:	2501      	movlt	r5, #1
 800ece4:	f7ff fcf0 	bl	800e6c8 <_Balloc>
 800ece8:	b920      	cbnz	r0, 800ecf4 <__mdiff+0x5c>
 800ecea:	4b2e      	ldr	r3, [pc, #184]	; (800eda4 <__mdiff+0x10c>)
 800ecec:	4602      	mov	r2, r0
 800ecee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ecf2:	e7e5      	b.n	800ecc0 <__mdiff+0x28>
 800ecf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ecf8:	6926      	ldr	r6, [r4, #16]
 800ecfa:	60c5      	str	r5, [r0, #12]
 800ecfc:	f104 0914 	add.w	r9, r4, #20
 800ed00:	f108 0514 	add.w	r5, r8, #20
 800ed04:	f100 0e14 	add.w	lr, r0, #20
 800ed08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ed0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed10:	f108 0210 	add.w	r2, r8, #16
 800ed14:	46f2      	mov	sl, lr
 800ed16:	2100      	movs	r1, #0
 800ed18:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ed20:	fa1f f883 	uxth.w	r8, r3
 800ed24:	fa11 f18b 	uxtah	r1, r1, fp
 800ed28:	0c1b      	lsrs	r3, r3, #16
 800ed2a:	eba1 0808 	sub.w	r8, r1, r8
 800ed2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ed32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ed36:	fa1f f888 	uxth.w	r8, r8
 800ed3a:	1419      	asrs	r1, r3, #16
 800ed3c:	454e      	cmp	r6, r9
 800ed3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ed42:	f84a 3b04 	str.w	r3, [sl], #4
 800ed46:	d8e7      	bhi.n	800ed18 <__mdiff+0x80>
 800ed48:	1b33      	subs	r3, r6, r4
 800ed4a:	3b15      	subs	r3, #21
 800ed4c:	f023 0303 	bic.w	r3, r3, #3
 800ed50:	3304      	adds	r3, #4
 800ed52:	3415      	adds	r4, #21
 800ed54:	42a6      	cmp	r6, r4
 800ed56:	bf38      	it	cc
 800ed58:	2304      	movcc	r3, #4
 800ed5a:	441d      	add	r5, r3
 800ed5c:	4473      	add	r3, lr
 800ed5e:	469e      	mov	lr, r3
 800ed60:	462e      	mov	r6, r5
 800ed62:	4566      	cmp	r6, ip
 800ed64:	d30e      	bcc.n	800ed84 <__mdiff+0xec>
 800ed66:	f10c 0203 	add.w	r2, ip, #3
 800ed6a:	1b52      	subs	r2, r2, r5
 800ed6c:	f022 0203 	bic.w	r2, r2, #3
 800ed70:	3d03      	subs	r5, #3
 800ed72:	45ac      	cmp	ip, r5
 800ed74:	bf38      	it	cc
 800ed76:	2200      	movcc	r2, #0
 800ed78:	441a      	add	r2, r3
 800ed7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ed7e:	b17b      	cbz	r3, 800eda0 <__mdiff+0x108>
 800ed80:	6107      	str	r7, [r0, #16]
 800ed82:	e7a3      	b.n	800eccc <__mdiff+0x34>
 800ed84:	f856 8b04 	ldr.w	r8, [r6], #4
 800ed88:	fa11 f288 	uxtah	r2, r1, r8
 800ed8c:	1414      	asrs	r4, r2, #16
 800ed8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ed92:	b292      	uxth	r2, r2
 800ed94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ed98:	f84e 2b04 	str.w	r2, [lr], #4
 800ed9c:	1421      	asrs	r1, r4, #16
 800ed9e:	e7e0      	b.n	800ed62 <__mdiff+0xca>
 800eda0:	3f01      	subs	r7, #1
 800eda2:	e7ea      	b.n	800ed7a <__mdiff+0xe2>
 800eda4:	0801f730 	.word	0x0801f730
 800eda8:	0801f7bc 	.word	0x0801f7bc

0800edac <__ulp>:
 800edac:	b082      	sub	sp, #8
 800edae:	ed8d 0b00 	vstr	d0, [sp]
 800edb2:	9b01      	ldr	r3, [sp, #4]
 800edb4:	4912      	ldr	r1, [pc, #72]	; (800ee00 <__ulp+0x54>)
 800edb6:	4019      	ands	r1, r3
 800edb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800edbc:	2900      	cmp	r1, #0
 800edbe:	dd05      	ble.n	800edcc <__ulp+0x20>
 800edc0:	2200      	movs	r2, #0
 800edc2:	460b      	mov	r3, r1
 800edc4:	ec43 2b10 	vmov	d0, r2, r3
 800edc8:	b002      	add	sp, #8
 800edca:	4770      	bx	lr
 800edcc:	4249      	negs	r1, r1
 800edce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800edd2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800edd6:	f04f 0200 	mov.w	r2, #0
 800edda:	f04f 0300 	mov.w	r3, #0
 800edde:	da04      	bge.n	800edea <__ulp+0x3e>
 800ede0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ede4:	fa41 f300 	asr.w	r3, r1, r0
 800ede8:	e7ec      	b.n	800edc4 <__ulp+0x18>
 800edea:	f1a0 0114 	sub.w	r1, r0, #20
 800edee:	291e      	cmp	r1, #30
 800edf0:	bfda      	itte	le
 800edf2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800edf6:	fa20 f101 	lsrle.w	r1, r0, r1
 800edfa:	2101      	movgt	r1, #1
 800edfc:	460a      	mov	r2, r1
 800edfe:	e7e1      	b.n	800edc4 <__ulp+0x18>
 800ee00:	7ff00000 	.word	0x7ff00000

0800ee04 <__b2d>:
 800ee04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee06:	6905      	ldr	r5, [r0, #16]
 800ee08:	f100 0714 	add.w	r7, r0, #20
 800ee0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ee10:	1f2e      	subs	r6, r5, #4
 800ee12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ee16:	4620      	mov	r0, r4
 800ee18:	f7ff fd48 	bl	800e8ac <__hi0bits>
 800ee1c:	f1c0 0320 	rsb	r3, r0, #32
 800ee20:	280a      	cmp	r0, #10
 800ee22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800eea0 <__b2d+0x9c>
 800ee26:	600b      	str	r3, [r1, #0]
 800ee28:	dc14      	bgt.n	800ee54 <__b2d+0x50>
 800ee2a:	f1c0 0e0b 	rsb	lr, r0, #11
 800ee2e:	fa24 f10e 	lsr.w	r1, r4, lr
 800ee32:	42b7      	cmp	r7, r6
 800ee34:	ea41 030c 	orr.w	r3, r1, ip
 800ee38:	bf34      	ite	cc
 800ee3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ee3e:	2100      	movcs	r1, #0
 800ee40:	3015      	adds	r0, #21
 800ee42:	fa04 f000 	lsl.w	r0, r4, r0
 800ee46:	fa21 f10e 	lsr.w	r1, r1, lr
 800ee4a:	ea40 0201 	orr.w	r2, r0, r1
 800ee4e:	ec43 2b10 	vmov	d0, r2, r3
 800ee52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee54:	42b7      	cmp	r7, r6
 800ee56:	bf3a      	itte	cc
 800ee58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ee5c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ee60:	2100      	movcs	r1, #0
 800ee62:	380b      	subs	r0, #11
 800ee64:	d017      	beq.n	800ee96 <__b2d+0x92>
 800ee66:	f1c0 0c20 	rsb	ip, r0, #32
 800ee6a:	fa04 f500 	lsl.w	r5, r4, r0
 800ee6e:	42be      	cmp	r6, r7
 800ee70:	fa21 f40c 	lsr.w	r4, r1, ip
 800ee74:	ea45 0504 	orr.w	r5, r5, r4
 800ee78:	bf8c      	ite	hi
 800ee7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ee7e:	2400      	movls	r4, #0
 800ee80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ee84:	fa01 f000 	lsl.w	r0, r1, r0
 800ee88:	fa24 f40c 	lsr.w	r4, r4, ip
 800ee8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ee90:	ea40 0204 	orr.w	r2, r0, r4
 800ee94:	e7db      	b.n	800ee4e <__b2d+0x4a>
 800ee96:	ea44 030c 	orr.w	r3, r4, ip
 800ee9a:	460a      	mov	r2, r1
 800ee9c:	e7d7      	b.n	800ee4e <__b2d+0x4a>
 800ee9e:	bf00      	nop
 800eea0:	3ff00000 	.word	0x3ff00000

0800eea4 <__d2b>:
 800eea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eea8:	4689      	mov	r9, r1
 800eeaa:	2101      	movs	r1, #1
 800eeac:	ec57 6b10 	vmov	r6, r7, d0
 800eeb0:	4690      	mov	r8, r2
 800eeb2:	f7ff fc09 	bl	800e6c8 <_Balloc>
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	b930      	cbnz	r0, 800eec8 <__d2b+0x24>
 800eeba:	4602      	mov	r2, r0
 800eebc:	4b25      	ldr	r3, [pc, #148]	; (800ef54 <__d2b+0xb0>)
 800eebe:	4826      	ldr	r0, [pc, #152]	; (800ef58 <__d2b+0xb4>)
 800eec0:	f240 310a 	movw	r1, #778	; 0x30a
 800eec4:	f000 fb4e 	bl	800f564 <__assert_func>
 800eec8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eecc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eed0:	bb35      	cbnz	r5, 800ef20 <__d2b+0x7c>
 800eed2:	2e00      	cmp	r6, #0
 800eed4:	9301      	str	r3, [sp, #4]
 800eed6:	d028      	beq.n	800ef2a <__d2b+0x86>
 800eed8:	4668      	mov	r0, sp
 800eeda:	9600      	str	r6, [sp, #0]
 800eedc:	f7ff fd06 	bl	800e8ec <__lo0bits>
 800eee0:	9900      	ldr	r1, [sp, #0]
 800eee2:	b300      	cbz	r0, 800ef26 <__d2b+0x82>
 800eee4:	9a01      	ldr	r2, [sp, #4]
 800eee6:	f1c0 0320 	rsb	r3, r0, #32
 800eeea:	fa02 f303 	lsl.w	r3, r2, r3
 800eeee:	430b      	orrs	r3, r1
 800eef0:	40c2      	lsrs	r2, r0
 800eef2:	6163      	str	r3, [r4, #20]
 800eef4:	9201      	str	r2, [sp, #4]
 800eef6:	9b01      	ldr	r3, [sp, #4]
 800eef8:	61a3      	str	r3, [r4, #24]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	bf14      	ite	ne
 800eefe:	2202      	movne	r2, #2
 800ef00:	2201      	moveq	r2, #1
 800ef02:	6122      	str	r2, [r4, #16]
 800ef04:	b1d5      	cbz	r5, 800ef3c <__d2b+0x98>
 800ef06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ef0a:	4405      	add	r5, r0
 800ef0c:	f8c9 5000 	str.w	r5, [r9]
 800ef10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef14:	f8c8 0000 	str.w	r0, [r8]
 800ef18:	4620      	mov	r0, r4
 800ef1a:	b003      	add	sp, #12
 800ef1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef24:	e7d5      	b.n	800eed2 <__d2b+0x2e>
 800ef26:	6161      	str	r1, [r4, #20]
 800ef28:	e7e5      	b.n	800eef6 <__d2b+0x52>
 800ef2a:	a801      	add	r0, sp, #4
 800ef2c:	f7ff fcde 	bl	800e8ec <__lo0bits>
 800ef30:	9b01      	ldr	r3, [sp, #4]
 800ef32:	6163      	str	r3, [r4, #20]
 800ef34:	2201      	movs	r2, #1
 800ef36:	6122      	str	r2, [r4, #16]
 800ef38:	3020      	adds	r0, #32
 800ef3a:	e7e3      	b.n	800ef04 <__d2b+0x60>
 800ef3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ef40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ef44:	f8c9 0000 	str.w	r0, [r9]
 800ef48:	6918      	ldr	r0, [r3, #16]
 800ef4a:	f7ff fcaf 	bl	800e8ac <__hi0bits>
 800ef4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef52:	e7df      	b.n	800ef14 <__d2b+0x70>
 800ef54:	0801f730 	.word	0x0801f730
 800ef58:	0801f7bc 	.word	0x0801f7bc

0800ef5c <__ratio>:
 800ef5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef60:	4688      	mov	r8, r1
 800ef62:	4669      	mov	r1, sp
 800ef64:	4681      	mov	r9, r0
 800ef66:	f7ff ff4d 	bl	800ee04 <__b2d>
 800ef6a:	a901      	add	r1, sp, #4
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	ec55 4b10 	vmov	r4, r5, d0
 800ef72:	f7ff ff47 	bl	800ee04 <__b2d>
 800ef76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ef7e:	eba3 0c02 	sub.w	ip, r3, r2
 800ef82:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ef86:	1a9b      	subs	r3, r3, r2
 800ef88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ef8c:	ec51 0b10 	vmov	r0, r1, d0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	bfd6      	itet	le
 800ef94:	460a      	movle	r2, r1
 800ef96:	462a      	movgt	r2, r5
 800ef98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ef9c:	468b      	mov	fp, r1
 800ef9e:	462f      	mov	r7, r5
 800efa0:	bfd4      	ite	le
 800efa2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800efa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800efaa:	4620      	mov	r0, r4
 800efac:	ee10 2a10 	vmov	r2, s0
 800efb0:	465b      	mov	r3, fp
 800efb2:	4639      	mov	r1, r7
 800efb4:	f7f1 fc4a 	bl	800084c <__aeabi_ddiv>
 800efb8:	ec41 0b10 	vmov	d0, r0, r1
 800efbc:	b003      	add	sp, #12
 800efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800efc2 <__copybits>:
 800efc2:	3901      	subs	r1, #1
 800efc4:	b570      	push	{r4, r5, r6, lr}
 800efc6:	1149      	asrs	r1, r1, #5
 800efc8:	6914      	ldr	r4, [r2, #16]
 800efca:	3101      	adds	r1, #1
 800efcc:	f102 0314 	add.w	r3, r2, #20
 800efd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800efd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800efd8:	1f05      	subs	r5, r0, #4
 800efda:	42a3      	cmp	r3, r4
 800efdc:	d30c      	bcc.n	800eff8 <__copybits+0x36>
 800efde:	1aa3      	subs	r3, r4, r2
 800efe0:	3b11      	subs	r3, #17
 800efe2:	f023 0303 	bic.w	r3, r3, #3
 800efe6:	3211      	adds	r2, #17
 800efe8:	42a2      	cmp	r2, r4
 800efea:	bf88      	it	hi
 800efec:	2300      	movhi	r3, #0
 800efee:	4418      	add	r0, r3
 800eff0:	2300      	movs	r3, #0
 800eff2:	4288      	cmp	r0, r1
 800eff4:	d305      	bcc.n	800f002 <__copybits+0x40>
 800eff6:	bd70      	pop	{r4, r5, r6, pc}
 800eff8:	f853 6b04 	ldr.w	r6, [r3], #4
 800effc:	f845 6f04 	str.w	r6, [r5, #4]!
 800f000:	e7eb      	b.n	800efda <__copybits+0x18>
 800f002:	f840 3b04 	str.w	r3, [r0], #4
 800f006:	e7f4      	b.n	800eff2 <__copybits+0x30>

0800f008 <__any_on>:
 800f008:	f100 0214 	add.w	r2, r0, #20
 800f00c:	6900      	ldr	r0, [r0, #16]
 800f00e:	114b      	asrs	r3, r1, #5
 800f010:	4298      	cmp	r0, r3
 800f012:	b510      	push	{r4, lr}
 800f014:	db11      	blt.n	800f03a <__any_on+0x32>
 800f016:	dd0a      	ble.n	800f02e <__any_on+0x26>
 800f018:	f011 011f 	ands.w	r1, r1, #31
 800f01c:	d007      	beq.n	800f02e <__any_on+0x26>
 800f01e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f022:	fa24 f001 	lsr.w	r0, r4, r1
 800f026:	fa00 f101 	lsl.w	r1, r0, r1
 800f02a:	428c      	cmp	r4, r1
 800f02c:	d10b      	bne.n	800f046 <__any_on+0x3e>
 800f02e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f032:	4293      	cmp	r3, r2
 800f034:	d803      	bhi.n	800f03e <__any_on+0x36>
 800f036:	2000      	movs	r0, #0
 800f038:	bd10      	pop	{r4, pc}
 800f03a:	4603      	mov	r3, r0
 800f03c:	e7f7      	b.n	800f02e <__any_on+0x26>
 800f03e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f042:	2900      	cmp	r1, #0
 800f044:	d0f5      	beq.n	800f032 <__any_on+0x2a>
 800f046:	2001      	movs	r0, #1
 800f048:	e7f6      	b.n	800f038 <__any_on+0x30>

0800f04a <_calloc_r>:
 800f04a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f04c:	fba1 2402 	umull	r2, r4, r1, r2
 800f050:	b94c      	cbnz	r4, 800f066 <_calloc_r+0x1c>
 800f052:	4611      	mov	r1, r2
 800f054:	9201      	str	r2, [sp, #4]
 800f056:	f000 f87b 	bl	800f150 <_malloc_r>
 800f05a:	9a01      	ldr	r2, [sp, #4]
 800f05c:	4605      	mov	r5, r0
 800f05e:	b930      	cbnz	r0, 800f06e <_calloc_r+0x24>
 800f060:	4628      	mov	r0, r5
 800f062:	b003      	add	sp, #12
 800f064:	bd30      	pop	{r4, r5, pc}
 800f066:	220c      	movs	r2, #12
 800f068:	6002      	str	r2, [r0, #0]
 800f06a:	2500      	movs	r5, #0
 800f06c:	e7f8      	b.n	800f060 <_calloc_r+0x16>
 800f06e:	4621      	mov	r1, r4
 800f070:	f7fc fb8c 	bl	800b78c <memset>
 800f074:	e7f4      	b.n	800f060 <_calloc_r+0x16>
	...

0800f078 <_free_r>:
 800f078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f07a:	2900      	cmp	r1, #0
 800f07c:	d044      	beq.n	800f108 <_free_r+0x90>
 800f07e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f082:	9001      	str	r0, [sp, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	f1a1 0404 	sub.w	r4, r1, #4
 800f08a:	bfb8      	it	lt
 800f08c:	18e4      	addlt	r4, r4, r3
 800f08e:	f000 fab3 	bl	800f5f8 <__malloc_lock>
 800f092:	4a1e      	ldr	r2, [pc, #120]	; (800f10c <_free_r+0x94>)
 800f094:	9801      	ldr	r0, [sp, #4]
 800f096:	6813      	ldr	r3, [r2, #0]
 800f098:	b933      	cbnz	r3, 800f0a8 <_free_r+0x30>
 800f09a:	6063      	str	r3, [r4, #4]
 800f09c:	6014      	str	r4, [r2, #0]
 800f09e:	b003      	add	sp, #12
 800f0a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0a4:	f000 baae 	b.w	800f604 <__malloc_unlock>
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	d908      	bls.n	800f0be <_free_r+0x46>
 800f0ac:	6825      	ldr	r5, [r4, #0]
 800f0ae:	1961      	adds	r1, r4, r5
 800f0b0:	428b      	cmp	r3, r1
 800f0b2:	bf01      	itttt	eq
 800f0b4:	6819      	ldreq	r1, [r3, #0]
 800f0b6:	685b      	ldreq	r3, [r3, #4]
 800f0b8:	1949      	addeq	r1, r1, r5
 800f0ba:	6021      	streq	r1, [r4, #0]
 800f0bc:	e7ed      	b.n	800f09a <_free_r+0x22>
 800f0be:	461a      	mov	r2, r3
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	b10b      	cbz	r3, 800f0c8 <_free_r+0x50>
 800f0c4:	42a3      	cmp	r3, r4
 800f0c6:	d9fa      	bls.n	800f0be <_free_r+0x46>
 800f0c8:	6811      	ldr	r1, [r2, #0]
 800f0ca:	1855      	adds	r5, r2, r1
 800f0cc:	42a5      	cmp	r5, r4
 800f0ce:	d10b      	bne.n	800f0e8 <_free_r+0x70>
 800f0d0:	6824      	ldr	r4, [r4, #0]
 800f0d2:	4421      	add	r1, r4
 800f0d4:	1854      	adds	r4, r2, r1
 800f0d6:	42a3      	cmp	r3, r4
 800f0d8:	6011      	str	r1, [r2, #0]
 800f0da:	d1e0      	bne.n	800f09e <_free_r+0x26>
 800f0dc:	681c      	ldr	r4, [r3, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	6053      	str	r3, [r2, #4]
 800f0e2:	4421      	add	r1, r4
 800f0e4:	6011      	str	r1, [r2, #0]
 800f0e6:	e7da      	b.n	800f09e <_free_r+0x26>
 800f0e8:	d902      	bls.n	800f0f0 <_free_r+0x78>
 800f0ea:	230c      	movs	r3, #12
 800f0ec:	6003      	str	r3, [r0, #0]
 800f0ee:	e7d6      	b.n	800f09e <_free_r+0x26>
 800f0f0:	6825      	ldr	r5, [r4, #0]
 800f0f2:	1961      	adds	r1, r4, r5
 800f0f4:	428b      	cmp	r3, r1
 800f0f6:	bf04      	itt	eq
 800f0f8:	6819      	ldreq	r1, [r3, #0]
 800f0fa:	685b      	ldreq	r3, [r3, #4]
 800f0fc:	6063      	str	r3, [r4, #4]
 800f0fe:	bf04      	itt	eq
 800f100:	1949      	addeq	r1, r1, r5
 800f102:	6021      	streq	r1, [r4, #0]
 800f104:	6054      	str	r4, [r2, #4]
 800f106:	e7ca      	b.n	800f09e <_free_r+0x26>
 800f108:	b003      	add	sp, #12
 800f10a:	bd30      	pop	{r4, r5, pc}
 800f10c:	20001190 	.word	0x20001190

0800f110 <sbrk_aligned>:
 800f110:	b570      	push	{r4, r5, r6, lr}
 800f112:	4e0e      	ldr	r6, [pc, #56]	; (800f14c <sbrk_aligned+0x3c>)
 800f114:	460c      	mov	r4, r1
 800f116:	6831      	ldr	r1, [r6, #0]
 800f118:	4605      	mov	r5, r0
 800f11a:	b911      	cbnz	r1, 800f122 <sbrk_aligned+0x12>
 800f11c:	f000 f9f0 	bl	800f500 <_sbrk_r>
 800f120:	6030      	str	r0, [r6, #0]
 800f122:	4621      	mov	r1, r4
 800f124:	4628      	mov	r0, r5
 800f126:	f000 f9eb 	bl	800f500 <_sbrk_r>
 800f12a:	1c43      	adds	r3, r0, #1
 800f12c:	d00a      	beq.n	800f144 <sbrk_aligned+0x34>
 800f12e:	1cc4      	adds	r4, r0, #3
 800f130:	f024 0403 	bic.w	r4, r4, #3
 800f134:	42a0      	cmp	r0, r4
 800f136:	d007      	beq.n	800f148 <sbrk_aligned+0x38>
 800f138:	1a21      	subs	r1, r4, r0
 800f13a:	4628      	mov	r0, r5
 800f13c:	f000 f9e0 	bl	800f500 <_sbrk_r>
 800f140:	3001      	adds	r0, #1
 800f142:	d101      	bne.n	800f148 <sbrk_aligned+0x38>
 800f144:	f04f 34ff 	mov.w	r4, #4294967295
 800f148:	4620      	mov	r0, r4
 800f14a:	bd70      	pop	{r4, r5, r6, pc}
 800f14c:	20001194 	.word	0x20001194

0800f150 <_malloc_r>:
 800f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f154:	1ccd      	adds	r5, r1, #3
 800f156:	f025 0503 	bic.w	r5, r5, #3
 800f15a:	3508      	adds	r5, #8
 800f15c:	2d0c      	cmp	r5, #12
 800f15e:	bf38      	it	cc
 800f160:	250c      	movcc	r5, #12
 800f162:	2d00      	cmp	r5, #0
 800f164:	4607      	mov	r7, r0
 800f166:	db01      	blt.n	800f16c <_malloc_r+0x1c>
 800f168:	42a9      	cmp	r1, r5
 800f16a:	d905      	bls.n	800f178 <_malloc_r+0x28>
 800f16c:	230c      	movs	r3, #12
 800f16e:	603b      	str	r3, [r7, #0]
 800f170:	2600      	movs	r6, #0
 800f172:	4630      	mov	r0, r6
 800f174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f178:	4e2e      	ldr	r6, [pc, #184]	; (800f234 <_malloc_r+0xe4>)
 800f17a:	f000 fa3d 	bl	800f5f8 <__malloc_lock>
 800f17e:	6833      	ldr	r3, [r6, #0]
 800f180:	461c      	mov	r4, r3
 800f182:	bb34      	cbnz	r4, 800f1d2 <_malloc_r+0x82>
 800f184:	4629      	mov	r1, r5
 800f186:	4638      	mov	r0, r7
 800f188:	f7ff ffc2 	bl	800f110 <sbrk_aligned>
 800f18c:	1c43      	adds	r3, r0, #1
 800f18e:	4604      	mov	r4, r0
 800f190:	d14d      	bne.n	800f22e <_malloc_r+0xde>
 800f192:	6834      	ldr	r4, [r6, #0]
 800f194:	4626      	mov	r6, r4
 800f196:	2e00      	cmp	r6, #0
 800f198:	d140      	bne.n	800f21c <_malloc_r+0xcc>
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	4631      	mov	r1, r6
 800f19e:	4638      	mov	r0, r7
 800f1a0:	eb04 0803 	add.w	r8, r4, r3
 800f1a4:	f000 f9ac 	bl	800f500 <_sbrk_r>
 800f1a8:	4580      	cmp	r8, r0
 800f1aa:	d13a      	bne.n	800f222 <_malloc_r+0xd2>
 800f1ac:	6821      	ldr	r1, [r4, #0]
 800f1ae:	3503      	adds	r5, #3
 800f1b0:	1a6d      	subs	r5, r5, r1
 800f1b2:	f025 0503 	bic.w	r5, r5, #3
 800f1b6:	3508      	adds	r5, #8
 800f1b8:	2d0c      	cmp	r5, #12
 800f1ba:	bf38      	it	cc
 800f1bc:	250c      	movcc	r5, #12
 800f1be:	4629      	mov	r1, r5
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	f7ff ffa5 	bl	800f110 <sbrk_aligned>
 800f1c6:	3001      	adds	r0, #1
 800f1c8:	d02b      	beq.n	800f222 <_malloc_r+0xd2>
 800f1ca:	6823      	ldr	r3, [r4, #0]
 800f1cc:	442b      	add	r3, r5
 800f1ce:	6023      	str	r3, [r4, #0]
 800f1d0:	e00e      	b.n	800f1f0 <_malloc_r+0xa0>
 800f1d2:	6822      	ldr	r2, [r4, #0]
 800f1d4:	1b52      	subs	r2, r2, r5
 800f1d6:	d41e      	bmi.n	800f216 <_malloc_r+0xc6>
 800f1d8:	2a0b      	cmp	r2, #11
 800f1da:	d916      	bls.n	800f20a <_malloc_r+0xba>
 800f1dc:	1961      	adds	r1, r4, r5
 800f1de:	42a3      	cmp	r3, r4
 800f1e0:	6025      	str	r5, [r4, #0]
 800f1e2:	bf18      	it	ne
 800f1e4:	6059      	strne	r1, [r3, #4]
 800f1e6:	6863      	ldr	r3, [r4, #4]
 800f1e8:	bf08      	it	eq
 800f1ea:	6031      	streq	r1, [r6, #0]
 800f1ec:	5162      	str	r2, [r4, r5]
 800f1ee:	604b      	str	r3, [r1, #4]
 800f1f0:	4638      	mov	r0, r7
 800f1f2:	f104 060b 	add.w	r6, r4, #11
 800f1f6:	f000 fa05 	bl	800f604 <__malloc_unlock>
 800f1fa:	f026 0607 	bic.w	r6, r6, #7
 800f1fe:	1d23      	adds	r3, r4, #4
 800f200:	1af2      	subs	r2, r6, r3
 800f202:	d0b6      	beq.n	800f172 <_malloc_r+0x22>
 800f204:	1b9b      	subs	r3, r3, r6
 800f206:	50a3      	str	r3, [r4, r2]
 800f208:	e7b3      	b.n	800f172 <_malloc_r+0x22>
 800f20a:	6862      	ldr	r2, [r4, #4]
 800f20c:	42a3      	cmp	r3, r4
 800f20e:	bf0c      	ite	eq
 800f210:	6032      	streq	r2, [r6, #0]
 800f212:	605a      	strne	r2, [r3, #4]
 800f214:	e7ec      	b.n	800f1f0 <_malloc_r+0xa0>
 800f216:	4623      	mov	r3, r4
 800f218:	6864      	ldr	r4, [r4, #4]
 800f21a:	e7b2      	b.n	800f182 <_malloc_r+0x32>
 800f21c:	4634      	mov	r4, r6
 800f21e:	6876      	ldr	r6, [r6, #4]
 800f220:	e7b9      	b.n	800f196 <_malloc_r+0x46>
 800f222:	230c      	movs	r3, #12
 800f224:	603b      	str	r3, [r7, #0]
 800f226:	4638      	mov	r0, r7
 800f228:	f000 f9ec 	bl	800f604 <__malloc_unlock>
 800f22c:	e7a1      	b.n	800f172 <_malloc_r+0x22>
 800f22e:	6025      	str	r5, [r4, #0]
 800f230:	e7de      	b.n	800f1f0 <_malloc_r+0xa0>
 800f232:	bf00      	nop
 800f234:	20001190 	.word	0x20001190

0800f238 <__ssputs_r>:
 800f238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f23c:	688e      	ldr	r6, [r1, #8]
 800f23e:	429e      	cmp	r6, r3
 800f240:	4682      	mov	sl, r0
 800f242:	460c      	mov	r4, r1
 800f244:	4690      	mov	r8, r2
 800f246:	461f      	mov	r7, r3
 800f248:	d838      	bhi.n	800f2bc <__ssputs_r+0x84>
 800f24a:	898a      	ldrh	r2, [r1, #12]
 800f24c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f250:	d032      	beq.n	800f2b8 <__ssputs_r+0x80>
 800f252:	6825      	ldr	r5, [r4, #0]
 800f254:	6909      	ldr	r1, [r1, #16]
 800f256:	eba5 0901 	sub.w	r9, r5, r1
 800f25a:	6965      	ldr	r5, [r4, #20]
 800f25c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f264:	3301      	adds	r3, #1
 800f266:	444b      	add	r3, r9
 800f268:	106d      	asrs	r5, r5, #1
 800f26a:	429d      	cmp	r5, r3
 800f26c:	bf38      	it	cc
 800f26e:	461d      	movcc	r5, r3
 800f270:	0553      	lsls	r3, r2, #21
 800f272:	d531      	bpl.n	800f2d8 <__ssputs_r+0xa0>
 800f274:	4629      	mov	r1, r5
 800f276:	f7ff ff6b 	bl	800f150 <_malloc_r>
 800f27a:	4606      	mov	r6, r0
 800f27c:	b950      	cbnz	r0, 800f294 <__ssputs_r+0x5c>
 800f27e:	230c      	movs	r3, #12
 800f280:	f8ca 3000 	str.w	r3, [sl]
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f28a:	81a3      	strh	r3, [r4, #12]
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f294:	6921      	ldr	r1, [r4, #16]
 800f296:	464a      	mov	r2, r9
 800f298:	f7fc fa6a 	bl	800b770 <memcpy>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2a6:	81a3      	strh	r3, [r4, #12]
 800f2a8:	6126      	str	r6, [r4, #16]
 800f2aa:	6165      	str	r5, [r4, #20]
 800f2ac:	444e      	add	r6, r9
 800f2ae:	eba5 0509 	sub.w	r5, r5, r9
 800f2b2:	6026      	str	r6, [r4, #0]
 800f2b4:	60a5      	str	r5, [r4, #8]
 800f2b6:	463e      	mov	r6, r7
 800f2b8:	42be      	cmp	r6, r7
 800f2ba:	d900      	bls.n	800f2be <__ssputs_r+0x86>
 800f2bc:	463e      	mov	r6, r7
 800f2be:	6820      	ldr	r0, [r4, #0]
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	4641      	mov	r1, r8
 800f2c4:	f000 f97e 	bl	800f5c4 <memmove>
 800f2c8:	68a3      	ldr	r3, [r4, #8]
 800f2ca:	1b9b      	subs	r3, r3, r6
 800f2cc:	60a3      	str	r3, [r4, #8]
 800f2ce:	6823      	ldr	r3, [r4, #0]
 800f2d0:	4433      	add	r3, r6
 800f2d2:	6023      	str	r3, [r4, #0]
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	e7db      	b.n	800f290 <__ssputs_r+0x58>
 800f2d8:	462a      	mov	r2, r5
 800f2da:	f000 f999 	bl	800f610 <_realloc_r>
 800f2de:	4606      	mov	r6, r0
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d1e1      	bne.n	800f2a8 <__ssputs_r+0x70>
 800f2e4:	6921      	ldr	r1, [r4, #16]
 800f2e6:	4650      	mov	r0, sl
 800f2e8:	f7ff fec6 	bl	800f078 <_free_r>
 800f2ec:	e7c7      	b.n	800f27e <__ssputs_r+0x46>
	...

0800f2f0 <_svfiprintf_r>:
 800f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f4:	4698      	mov	r8, r3
 800f2f6:	898b      	ldrh	r3, [r1, #12]
 800f2f8:	061b      	lsls	r3, r3, #24
 800f2fa:	b09d      	sub	sp, #116	; 0x74
 800f2fc:	4607      	mov	r7, r0
 800f2fe:	460d      	mov	r5, r1
 800f300:	4614      	mov	r4, r2
 800f302:	d50e      	bpl.n	800f322 <_svfiprintf_r+0x32>
 800f304:	690b      	ldr	r3, [r1, #16]
 800f306:	b963      	cbnz	r3, 800f322 <_svfiprintf_r+0x32>
 800f308:	2140      	movs	r1, #64	; 0x40
 800f30a:	f7ff ff21 	bl	800f150 <_malloc_r>
 800f30e:	6028      	str	r0, [r5, #0]
 800f310:	6128      	str	r0, [r5, #16]
 800f312:	b920      	cbnz	r0, 800f31e <_svfiprintf_r+0x2e>
 800f314:	230c      	movs	r3, #12
 800f316:	603b      	str	r3, [r7, #0]
 800f318:	f04f 30ff 	mov.w	r0, #4294967295
 800f31c:	e0d1      	b.n	800f4c2 <_svfiprintf_r+0x1d2>
 800f31e:	2340      	movs	r3, #64	; 0x40
 800f320:	616b      	str	r3, [r5, #20]
 800f322:	2300      	movs	r3, #0
 800f324:	9309      	str	r3, [sp, #36]	; 0x24
 800f326:	2320      	movs	r3, #32
 800f328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f32c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f330:	2330      	movs	r3, #48	; 0x30
 800f332:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f4dc <_svfiprintf_r+0x1ec>
 800f336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f33a:	f04f 0901 	mov.w	r9, #1
 800f33e:	4623      	mov	r3, r4
 800f340:	469a      	mov	sl, r3
 800f342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f346:	b10a      	cbz	r2, 800f34c <_svfiprintf_r+0x5c>
 800f348:	2a25      	cmp	r2, #37	; 0x25
 800f34a:	d1f9      	bne.n	800f340 <_svfiprintf_r+0x50>
 800f34c:	ebba 0b04 	subs.w	fp, sl, r4
 800f350:	d00b      	beq.n	800f36a <_svfiprintf_r+0x7a>
 800f352:	465b      	mov	r3, fp
 800f354:	4622      	mov	r2, r4
 800f356:	4629      	mov	r1, r5
 800f358:	4638      	mov	r0, r7
 800f35a:	f7ff ff6d 	bl	800f238 <__ssputs_r>
 800f35e:	3001      	adds	r0, #1
 800f360:	f000 80aa 	beq.w	800f4b8 <_svfiprintf_r+0x1c8>
 800f364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f366:	445a      	add	r2, fp
 800f368:	9209      	str	r2, [sp, #36]	; 0x24
 800f36a:	f89a 3000 	ldrb.w	r3, [sl]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 80a2 	beq.w	800f4b8 <_svfiprintf_r+0x1c8>
 800f374:	2300      	movs	r3, #0
 800f376:	f04f 32ff 	mov.w	r2, #4294967295
 800f37a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f37e:	f10a 0a01 	add.w	sl, sl, #1
 800f382:	9304      	str	r3, [sp, #16]
 800f384:	9307      	str	r3, [sp, #28]
 800f386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f38a:	931a      	str	r3, [sp, #104]	; 0x68
 800f38c:	4654      	mov	r4, sl
 800f38e:	2205      	movs	r2, #5
 800f390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f394:	4851      	ldr	r0, [pc, #324]	; (800f4dc <_svfiprintf_r+0x1ec>)
 800f396:	f7f0 ff23 	bl	80001e0 <memchr>
 800f39a:	9a04      	ldr	r2, [sp, #16]
 800f39c:	b9d8      	cbnz	r0, 800f3d6 <_svfiprintf_r+0xe6>
 800f39e:	06d0      	lsls	r0, r2, #27
 800f3a0:	bf44      	itt	mi
 800f3a2:	2320      	movmi	r3, #32
 800f3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3a8:	0711      	lsls	r1, r2, #28
 800f3aa:	bf44      	itt	mi
 800f3ac:	232b      	movmi	r3, #43	; 0x2b
 800f3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f3b8:	d015      	beq.n	800f3e6 <_svfiprintf_r+0xf6>
 800f3ba:	9a07      	ldr	r2, [sp, #28]
 800f3bc:	4654      	mov	r4, sl
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f04f 0c0a 	mov.w	ip, #10
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3ca:	3b30      	subs	r3, #48	; 0x30
 800f3cc:	2b09      	cmp	r3, #9
 800f3ce:	d94e      	bls.n	800f46e <_svfiprintf_r+0x17e>
 800f3d0:	b1b0      	cbz	r0, 800f400 <_svfiprintf_r+0x110>
 800f3d2:	9207      	str	r2, [sp, #28]
 800f3d4:	e014      	b.n	800f400 <_svfiprintf_r+0x110>
 800f3d6:	eba0 0308 	sub.w	r3, r0, r8
 800f3da:	fa09 f303 	lsl.w	r3, r9, r3
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	46a2      	mov	sl, r4
 800f3e4:	e7d2      	b.n	800f38c <_svfiprintf_r+0x9c>
 800f3e6:	9b03      	ldr	r3, [sp, #12]
 800f3e8:	1d19      	adds	r1, r3, #4
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	9103      	str	r1, [sp, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	bfbb      	ittet	lt
 800f3f2:	425b      	neglt	r3, r3
 800f3f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f3f8:	9307      	strge	r3, [sp, #28]
 800f3fa:	9307      	strlt	r3, [sp, #28]
 800f3fc:	bfb8      	it	lt
 800f3fe:	9204      	strlt	r2, [sp, #16]
 800f400:	7823      	ldrb	r3, [r4, #0]
 800f402:	2b2e      	cmp	r3, #46	; 0x2e
 800f404:	d10c      	bne.n	800f420 <_svfiprintf_r+0x130>
 800f406:	7863      	ldrb	r3, [r4, #1]
 800f408:	2b2a      	cmp	r3, #42	; 0x2a
 800f40a:	d135      	bne.n	800f478 <_svfiprintf_r+0x188>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	1d1a      	adds	r2, r3, #4
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	9203      	str	r2, [sp, #12]
 800f414:	2b00      	cmp	r3, #0
 800f416:	bfb8      	it	lt
 800f418:	f04f 33ff 	movlt.w	r3, #4294967295
 800f41c:	3402      	adds	r4, #2
 800f41e:	9305      	str	r3, [sp, #20]
 800f420:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f4ec <_svfiprintf_r+0x1fc>
 800f424:	7821      	ldrb	r1, [r4, #0]
 800f426:	2203      	movs	r2, #3
 800f428:	4650      	mov	r0, sl
 800f42a:	f7f0 fed9 	bl	80001e0 <memchr>
 800f42e:	b140      	cbz	r0, 800f442 <_svfiprintf_r+0x152>
 800f430:	2340      	movs	r3, #64	; 0x40
 800f432:	eba0 000a 	sub.w	r0, r0, sl
 800f436:	fa03 f000 	lsl.w	r0, r3, r0
 800f43a:	9b04      	ldr	r3, [sp, #16]
 800f43c:	4303      	orrs	r3, r0
 800f43e:	3401      	adds	r4, #1
 800f440:	9304      	str	r3, [sp, #16]
 800f442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f446:	4826      	ldr	r0, [pc, #152]	; (800f4e0 <_svfiprintf_r+0x1f0>)
 800f448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f44c:	2206      	movs	r2, #6
 800f44e:	f7f0 fec7 	bl	80001e0 <memchr>
 800f452:	2800      	cmp	r0, #0
 800f454:	d038      	beq.n	800f4c8 <_svfiprintf_r+0x1d8>
 800f456:	4b23      	ldr	r3, [pc, #140]	; (800f4e4 <_svfiprintf_r+0x1f4>)
 800f458:	bb1b      	cbnz	r3, 800f4a2 <_svfiprintf_r+0x1b2>
 800f45a:	9b03      	ldr	r3, [sp, #12]
 800f45c:	3307      	adds	r3, #7
 800f45e:	f023 0307 	bic.w	r3, r3, #7
 800f462:	3308      	adds	r3, #8
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f468:	4433      	add	r3, r6
 800f46a:	9309      	str	r3, [sp, #36]	; 0x24
 800f46c:	e767      	b.n	800f33e <_svfiprintf_r+0x4e>
 800f46e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f472:	460c      	mov	r4, r1
 800f474:	2001      	movs	r0, #1
 800f476:	e7a5      	b.n	800f3c4 <_svfiprintf_r+0xd4>
 800f478:	2300      	movs	r3, #0
 800f47a:	3401      	adds	r4, #1
 800f47c:	9305      	str	r3, [sp, #20]
 800f47e:	4619      	mov	r1, r3
 800f480:	f04f 0c0a 	mov.w	ip, #10
 800f484:	4620      	mov	r0, r4
 800f486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f48a:	3a30      	subs	r2, #48	; 0x30
 800f48c:	2a09      	cmp	r2, #9
 800f48e:	d903      	bls.n	800f498 <_svfiprintf_r+0x1a8>
 800f490:	2b00      	cmp	r3, #0
 800f492:	d0c5      	beq.n	800f420 <_svfiprintf_r+0x130>
 800f494:	9105      	str	r1, [sp, #20]
 800f496:	e7c3      	b.n	800f420 <_svfiprintf_r+0x130>
 800f498:	fb0c 2101 	mla	r1, ip, r1, r2
 800f49c:	4604      	mov	r4, r0
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e7f0      	b.n	800f484 <_svfiprintf_r+0x194>
 800f4a2:	ab03      	add	r3, sp, #12
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	462a      	mov	r2, r5
 800f4a8:	4b0f      	ldr	r3, [pc, #60]	; (800f4e8 <_svfiprintf_r+0x1f8>)
 800f4aa:	a904      	add	r1, sp, #16
 800f4ac:	4638      	mov	r0, r7
 800f4ae:	f7fc fa15 	bl	800b8dc <_printf_float>
 800f4b2:	1c42      	adds	r2, r0, #1
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	d1d6      	bne.n	800f466 <_svfiprintf_r+0x176>
 800f4b8:	89ab      	ldrh	r3, [r5, #12]
 800f4ba:	065b      	lsls	r3, r3, #25
 800f4bc:	f53f af2c 	bmi.w	800f318 <_svfiprintf_r+0x28>
 800f4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4c2:	b01d      	add	sp, #116	; 0x74
 800f4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c8:	ab03      	add	r3, sp, #12
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	462a      	mov	r2, r5
 800f4ce:	4b06      	ldr	r3, [pc, #24]	; (800f4e8 <_svfiprintf_r+0x1f8>)
 800f4d0:	a904      	add	r1, sp, #16
 800f4d2:	4638      	mov	r0, r7
 800f4d4:	f7fc fca6 	bl	800be24 <_printf_i>
 800f4d8:	e7eb      	b.n	800f4b2 <_svfiprintf_r+0x1c2>
 800f4da:	bf00      	nop
 800f4dc:	0801f914 	.word	0x0801f914
 800f4e0:	0801f91e 	.word	0x0801f91e
 800f4e4:	0800b8dd 	.word	0x0800b8dd
 800f4e8:	0800f239 	.word	0x0800f239
 800f4ec:	0801f91a 	.word	0x0801f91a

0800f4f0 <nan>:
 800f4f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f4f8 <nan+0x8>
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	00000000 	.word	0x00000000
 800f4fc:	7ff80000 	.word	0x7ff80000

0800f500 <_sbrk_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4d06      	ldr	r5, [pc, #24]	; (800f51c <_sbrk_r+0x1c>)
 800f504:	2300      	movs	r3, #0
 800f506:	4604      	mov	r4, r0
 800f508:	4608      	mov	r0, r1
 800f50a:	602b      	str	r3, [r5, #0]
 800f50c:	f7f6 f9bc 	bl	8005888 <_sbrk>
 800f510:	1c43      	adds	r3, r0, #1
 800f512:	d102      	bne.n	800f51a <_sbrk_r+0x1a>
 800f514:	682b      	ldr	r3, [r5, #0]
 800f516:	b103      	cbz	r3, 800f51a <_sbrk_r+0x1a>
 800f518:	6023      	str	r3, [r4, #0]
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
 800f51c:	20001198 	.word	0x20001198

0800f520 <strncmp>:
 800f520:	b510      	push	{r4, lr}
 800f522:	b17a      	cbz	r2, 800f544 <strncmp+0x24>
 800f524:	4603      	mov	r3, r0
 800f526:	3901      	subs	r1, #1
 800f528:	1884      	adds	r4, r0, r2
 800f52a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f52e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f532:	4290      	cmp	r0, r2
 800f534:	d101      	bne.n	800f53a <strncmp+0x1a>
 800f536:	42a3      	cmp	r3, r4
 800f538:	d101      	bne.n	800f53e <strncmp+0x1e>
 800f53a:	1a80      	subs	r0, r0, r2
 800f53c:	bd10      	pop	{r4, pc}
 800f53e:	2800      	cmp	r0, #0
 800f540:	d1f3      	bne.n	800f52a <strncmp+0xa>
 800f542:	e7fa      	b.n	800f53a <strncmp+0x1a>
 800f544:	4610      	mov	r0, r2
 800f546:	e7f9      	b.n	800f53c <strncmp+0x1c>

0800f548 <__ascii_wctomb>:
 800f548:	b149      	cbz	r1, 800f55e <__ascii_wctomb+0x16>
 800f54a:	2aff      	cmp	r2, #255	; 0xff
 800f54c:	bf85      	ittet	hi
 800f54e:	238a      	movhi	r3, #138	; 0x8a
 800f550:	6003      	strhi	r3, [r0, #0]
 800f552:	700a      	strbls	r2, [r1, #0]
 800f554:	f04f 30ff 	movhi.w	r0, #4294967295
 800f558:	bf98      	it	ls
 800f55a:	2001      	movls	r0, #1
 800f55c:	4770      	bx	lr
 800f55e:	4608      	mov	r0, r1
 800f560:	4770      	bx	lr
	...

0800f564 <__assert_func>:
 800f564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f566:	4614      	mov	r4, r2
 800f568:	461a      	mov	r2, r3
 800f56a:	4b09      	ldr	r3, [pc, #36]	; (800f590 <__assert_func+0x2c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4605      	mov	r5, r0
 800f570:	68d8      	ldr	r0, [r3, #12]
 800f572:	b14c      	cbz	r4, 800f588 <__assert_func+0x24>
 800f574:	4b07      	ldr	r3, [pc, #28]	; (800f594 <__assert_func+0x30>)
 800f576:	9100      	str	r1, [sp, #0]
 800f578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f57c:	4906      	ldr	r1, [pc, #24]	; (800f598 <__assert_func+0x34>)
 800f57e:	462b      	mov	r3, r5
 800f580:	f000 f80e 	bl	800f5a0 <fiprintf>
 800f584:	f000 fa8c 	bl	800faa0 <abort>
 800f588:	4b04      	ldr	r3, [pc, #16]	; (800f59c <__assert_func+0x38>)
 800f58a:	461c      	mov	r4, r3
 800f58c:	e7f3      	b.n	800f576 <__assert_func+0x12>
 800f58e:	bf00      	nop
 800f590:	2000007c 	.word	0x2000007c
 800f594:	0801f925 	.word	0x0801f925
 800f598:	0801f932 	.word	0x0801f932
 800f59c:	0801f960 	.word	0x0801f960

0800f5a0 <fiprintf>:
 800f5a0:	b40e      	push	{r1, r2, r3}
 800f5a2:	b503      	push	{r0, r1, lr}
 800f5a4:	4601      	mov	r1, r0
 800f5a6:	ab03      	add	r3, sp, #12
 800f5a8:	4805      	ldr	r0, [pc, #20]	; (800f5c0 <fiprintf+0x20>)
 800f5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ae:	6800      	ldr	r0, [r0, #0]
 800f5b0:	9301      	str	r3, [sp, #4]
 800f5b2:	f000 f885 	bl	800f6c0 <_vfiprintf_r>
 800f5b6:	b002      	add	sp, #8
 800f5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5bc:	b003      	add	sp, #12
 800f5be:	4770      	bx	lr
 800f5c0:	2000007c 	.word	0x2000007c

0800f5c4 <memmove>:
 800f5c4:	4288      	cmp	r0, r1
 800f5c6:	b510      	push	{r4, lr}
 800f5c8:	eb01 0402 	add.w	r4, r1, r2
 800f5cc:	d902      	bls.n	800f5d4 <memmove+0x10>
 800f5ce:	4284      	cmp	r4, r0
 800f5d0:	4623      	mov	r3, r4
 800f5d2:	d807      	bhi.n	800f5e4 <memmove+0x20>
 800f5d4:	1e43      	subs	r3, r0, #1
 800f5d6:	42a1      	cmp	r1, r4
 800f5d8:	d008      	beq.n	800f5ec <memmove+0x28>
 800f5da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5e2:	e7f8      	b.n	800f5d6 <memmove+0x12>
 800f5e4:	4402      	add	r2, r0
 800f5e6:	4601      	mov	r1, r0
 800f5e8:	428a      	cmp	r2, r1
 800f5ea:	d100      	bne.n	800f5ee <memmove+0x2a>
 800f5ec:	bd10      	pop	{r4, pc}
 800f5ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5f6:	e7f7      	b.n	800f5e8 <memmove+0x24>

0800f5f8 <__malloc_lock>:
 800f5f8:	4801      	ldr	r0, [pc, #4]	; (800f600 <__malloc_lock+0x8>)
 800f5fa:	f000 bc11 	b.w	800fe20 <__retarget_lock_acquire_recursive>
 800f5fe:	bf00      	nop
 800f600:	2000119c 	.word	0x2000119c

0800f604 <__malloc_unlock>:
 800f604:	4801      	ldr	r0, [pc, #4]	; (800f60c <__malloc_unlock+0x8>)
 800f606:	f000 bc0c 	b.w	800fe22 <__retarget_lock_release_recursive>
 800f60a:	bf00      	nop
 800f60c:	2000119c 	.word	0x2000119c

0800f610 <_realloc_r>:
 800f610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f614:	4680      	mov	r8, r0
 800f616:	4614      	mov	r4, r2
 800f618:	460e      	mov	r6, r1
 800f61a:	b921      	cbnz	r1, 800f626 <_realloc_r+0x16>
 800f61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f620:	4611      	mov	r1, r2
 800f622:	f7ff bd95 	b.w	800f150 <_malloc_r>
 800f626:	b92a      	cbnz	r2, 800f634 <_realloc_r+0x24>
 800f628:	f7ff fd26 	bl	800f078 <_free_r>
 800f62c:	4625      	mov	r5, r4
 800f62e:	4628      	mov	r0, r5
 800f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f634:	f000 fc5c 	bl	800fef0 <_malloc_usable_size_r>
 800f638:	4284      	cmp	r4, r0
 800f63a:	4607      	mov	r7, r0
 800f63c:	d802      	bhi.n	800f644 <_realloc_r+0x34>
 800f63e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f642:	d812      	bhi.n	800f66a <_realloc_r+0x5a>
 800f644:	4621      	mov	r1, r4
 800f646:	4640      	mov	r0, r8
 800f648:	f7ff fd82 	bl	800f150 <_malloc_r>
 800f64c:	4605      	mov	r5, r0
 800f64e:	2800      	cmp	r0, #0
 800f650:	d0ed      	beq.n	800f62e <_realloc_r+0x1e>
 800f652:	42bc      	cmp	r4, r7
 800f654:	4622      	mov	r2, r4
 800f656:	4631      	mov	r1, r6
 800f658:	bf28      	it	cs
 800f65a:	463a      	movcs	r2, r7
 800f65c:	f7fc f888 	bl	800b770 <memcpy>
 800f660:	4631      	mov	r1, r6
 800f662:	4640      	mov	r0, r8
 800f664:	f7ff fd08 	bl	800f078 <_free_r>
 800f668:	e7e1      	b.n	800f62e <_realloc_r+0x1e>
 800f66a:	4635      	mov	r5, r6
 800f66c:	e7df      	b.n	800f62e <_realloc_r+0x1e>

0800f66e <__sfputc_r>:
 800f66e:	6893      	ldr	r3, [r2, #8]
 800f670:	3b01      	subs	r3, #1
 800f672:	2b00      	cmp	r3, #0
 800f674:	b410      	push	{r4}
 800f676:	6093      	str	r3, [r2, #8]
 800f678:	da08      	bge.n	800f68c <__sfputc_r+0x1e>
 800f67a:	6994      	ldr	r4, [r2, #24]
 800f67c:	42a3      	cmp	r3, r4
 800f67e:	db01      	blt.n	800f684 <__sfputc_r+0x16>
 800f680:	290a      	cmp	r1, #10
 800f682:	d103      	bne.n	800f68c <__sfputc_r+0x1e>
 800f684:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f688:	f000 b94a 	b.w	800f920 <__swbuf_r>
 800f68c:	6813      	ldr	r3, [r2, #0]
 800f68e:	1c58      	adds	r0, r3, #1
 800f690:	6010      	str	r0, [r2, #0]
 800f692:	7019      	strb	r1, [r3, #0]
 800f694:	4608      	mov	r0, r1
 800f696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <__sfputs_r>:
 800f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69e:	4606      	mov	r6, r0
 800f6a0:	460f      	mov	r7, r1
 800f6a2:	4614      	mov	r4, r2
 800f6a4:	18d5      	adds	r5, r2, r3
 800f6a6:	42ac      	cmp	r4, r5
 800f6a8:	d101      	bne.n	800f6ae <__sfputs_r+0x12>
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	e007      	b.n	800f6be <__sfputs_r+0x22>
 800f6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b2:	463a      	mov	r2, r7
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f7ff ffda 	bl	800f66e <__sfputc_r>
 800f6ba:	1c43      	adds	r3, r0, #1
 800f6bc:	d1f3      	bne.n	800f6a6 <__sfputs_r+0xa>
 800f6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6c0 <_vfiprintf_r>:
 800f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c4:	460d      	mov	r5, r1
 800f6c6:	b09d      	sub	sp, #116	; 0x74
 800f6c8:	4614      	mov	r4, r2
 800f6ca:	4698      	mov	r8, r3
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	b118      	cbz	r0, 800f6d8 <_vfiprintf_r+0x18>
 800f6d0:	6983      	ldr	r3, [r0, #24]
 800f6d2:	b90b      	cbnz	r3, 800f6d8 <_vfiprintf_r+0x18>
 800f6d4:	f000 fb06 	bl	800fce4 <__sinit>
 800f6d8:	4b89      	ldr	r3, [pc, #548]	; (800f900 <_vfiprintf_r+0x240>)
 800f6da:	429d      	cmp	r5, r3
 800f6dc:	d11b      	bne.n	800f716 <_vfiprintf_r+0x56>
 800f6de:	6875      	ldr	r5, [r6, #4]
 800f6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6e2:	07d9      	lsls	r1, r3, #31
 800f6e4:	d405      	bmi.n	800f6f2 <_vfiprintf_r+0x32>
 800f6e6:	89ab      	ldrh	r3, [r5, #12]
 800f6e8:	059a      	lsls	r2, r3, #22
 800f6ea:	d402      	bmi.n	800f6f2 <_vfiprintf_r+0x32>
 800f6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6ee:	f000 fb97 	bl	800fe20 <__retarget_lock_acquire_recursive>
 800f6f2:	89ab      	ldrh	r3, [r5, #12]
 800f6f4:	071b      	lsls	r3, r3, #28
 800f6f6:	d501      	bpl.n	800f6fc <_vfiprintf_r+0x3c>
 800f6f8:	692b      	ldr	r3, [r5, #16]
 800f6fa:	b9eb      	cbnz	r3, 800f738 <_vfiprintf_r+0x78>
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	4630      	mov	r0, r6
 800f700:	f000 f960 	bl	800f9c4 <__swsetup_r>
 800f704:	b1c0      	cbz	r0, 800f738 <_vfiprintf_r+0x78>
 800f706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f708:	07dc      	lsls	r4, r3, #31
 800f70a:	d50e      	bpl.n	800f72a <_vfiprintf_r+0x6a>
 800f70c:	f04f 30ff 	mov.w	r0, #4294967295
 800f710:	b01d      	add	sp, #116	; 0x74
 800f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	4b7b      	ldr	r3, [pc, #492]	; (800f904 <_vfiprintf_r+0x244>)
 800f718:	429d      	cmp	r5, r3
 800f71a:	d101      	bne.n	800f720 <_vfiprintf_r+0x60>
 800f71c:	68b5      	ldr	r5, [r6, #8]
 800f71e:	e7df      	b.n	800f6e0 <_vfiprintf_r+0x20>
 800f720:	4b79      	ldr	r3, [pc, #484]	; (800f908 <_vfiprintf_r+0x248>)
 800f722:	429d      	cmp	r5, r3
 800f724:	bf08      	it	eq
 800f726:	68f5      	ldreq	r5, [r6, #12]
 800f728:	e7da      	b.n	800f6e0 <_vfiprintf_r+0x20>
 800f72a:	89ab      	ldrh	r3, [r5, #12]
 800f72c:	0598      	lsls	r0, r3, #22
 800f72e:	d4ed      	bmi.n	800f70c <_vfiprintf_r+0x4c>
 800f730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f732:	f000 fb76 	bl	800fe22 <__retarget_lock_release_recursive>
 800f736:	e7e9      	b.n	800f70c <_vfiprintf_r+0x4c>
 800f738:	2300      	movs	r3, #0
 800f73a:	9309      	str	r3, [sp, #36]	; 0x24
 800f73c:	2320      	movs	r3, #32
 800f73e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f742:	f8cd 800c 	str.w	r8, [sp, #12]
 800f746:	2330      	movs	r3, #48	; 0x30
 800f748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f90c <_vfiprintf_r+0x24c>
 800f74c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f750:	f04f 0901 	mov.w	r9, #1
 800f754:	4623      	mov	r3, r4
 800f756:	469a      	mov	sl, r3
 800f758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f75c:	b10a      	cbz	r2, 800f762 <_vfiprintf_r+0xa2>
 800f75e:	2a25      	cmp	r2, #37	; 0x25
 800f760:	d1f9      	bne.n	800f756 <_vfiprintf_r+0x96>
 800f762:	ebba 0b04 	subs.w	fp, sl, r4
 800f766:	d00b      	beq.n	800f780 <_vfiprintf_r+0xc0>
 800f768:	465b      	mov	r3, fp
 800f76a:	4622      	mov	r2, r4
 800f76c:	4629      	mov	r1, r5
 800f76e:	4630      	mov	r0, r6
 800f770:	f7ff ff94 	bl	800f69c <__sfputs_r>
 800f774:	3001      	adds	r0, #1
 800f776:	f000 80aa 	beq.w	800f8ce <_vfiprintf_r+0x20e>
 800f77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f77c:	445a      	add	r2, fp
 800f77e:	9209      	str	r2, [sp, #36]	; 0x24
 800f780:	f89a 3000 	ldrb.w	r3, [sl]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f000 80a2 	beq.w	800f8ce <_vfiprintf_r+0x20e>
 800f78a:	2300      	movs	r3, #0
 800f78c:	f04f 32ff 	mov.w	r2, #4294967295
 800f790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f794:	f10a 0a01 	add.w	sl, sl, #1
 800f798:	9304      	str	r3, [sp, #16]
 800f79a:	9307      	str	r3, [sp, #28]
 800f79c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7a0:	931a      	str	r3, [sp, #104]	; 0x68
 800f7a2:	4654      	mov	r4, sl
 800f7a4:	2205      	movs	r2, #5
 800f7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7aa:	4858      	ldr	r0, [pc, #352]	; (800f90c <_vfiprintf_r+0x24c>)
 800f7ac:	f7f0 fd18 	bl	80001e0 <memchr>
 800f7b0:	9a04      	ldr	r2, [sp, #16]
 800f7b2:	b9d8      	cbnz	r0, 800f7ec <_vfiprintf_r+0x12c>
 800f7b4:	06d1      	lsls	r1, r2, #27
 800f7b6:	bf44      	itt	mi
 800f7b8:	2320      	movmi	r3, #32
 800f7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7be:	0713      	lsls	r3, r2, #28
 800f7c0:	bf44      	itt	mi
 800f7c2:	232b      	movmi	r3, #43	; 0x2b
 800f7c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ce:	d015      	beq.n	800f7fc <_vfiprintf_r+0x13c>
 800f7d0:	9a07      	ldr	r2, [sp, #28]
 800f7d2:	4654      	mov	r4, sl
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	f04f 0c0a 	mov.w	ip, #10
 800f7da:	4621      	mov	r1, r4
 800f7dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7e0:	3b30      	subs	r3, #48	; 0x30
 800f7e2:	2b09      	cmp	r3, #9
 800f7e4:	d94e      	bls.n	800f884 <_vfiprintf_r+0x1c4>
 800f7e6:	b1b0      	cbz	r0, 800f816 <_vfiprintf_r+0x156>
 800f7e8:	9207      	str	r2, [sp, #28]
 800f7ea:	e014      	b.n	800f816 <_vfiprintf_r+0x156>
 800f7ec:	eba0 0308 	sub.w	r3, r0, r8
 800f7f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	9304      	str	r3, [sp, #16]
 800f7f8:	46a2      	mov	sl, r4
 800f7fa:	e7d2      	b.n	800f7a2 <_vfiprintf_r+0xe2>
 800f7fc:	9b03      	ldr	r3, [sp, #12]
 800f7fe:	1d19      	adds	r1, r3, #4
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	9103      	str	r1, [sp, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	bfbb      	ittet	lt
 800f808:	425b      	neglt	r3, r3
 800f80a:	f042 0202 	orrlt.w	r2, r2, #2
 800f80e:	9307      	strge	r3, [sp, #28]
 800f810:	9307      	strlt	r3, [sp, #28]
 800f812:	bfb8      	it	lt
 800f814:	9204      	strlt	r2, [sp, #16]
 800f816:	7823      	ldrb	r3, [r4, #0]
 800f818:	2b2e      	cmp	r3, #46	; 0x2e
 800f81a:	d10c      	bne.n	800f836 <_vfiprintf_r+0x176>
 800f81c:	7863      	ldrb	r3, [r4, #1]
 800f81e:	2b2a      	cmp	r3, #42	; 0x2a
 800f820:	d135      	bne.n	800f88e <_vfiprintf_r+0x1ce>
 800f822:	9b03      	ldr	r3, [sp, #12]
 800f824:	1d1a      	adds	r2, r3, #4
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	9203      	str	r2, [sp, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	bfb8      	it	lt
 800f82e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f832:	3402      	adds	r4, #2
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f91c <_vfiprintf_r+0x25c>
 800f83a:	7821      	ldrb	r1, [r4, #0]
 800f83c:	2203      	movs	r2, #3
 800f83e:	4650      	mov	r0, sl
 800f840:	f7f0 fcce 	bl	80001e0 <memchr>
 800f844:	b140      	cbz	r0, 800f858 <_vfiprintf_r+0x198>
 800f846:	2340      	movs	r3, #64	; 0x40
 800f848:	eba0 000a 	sub.w	r0, r0, sl
 800f84c:	fa03 f000 	lsl.w	r0, r3, r0
 800f850:	9b04      	ldr	r3, [sp, #16]
 800f852:	4303      	orrs	r3, r0
 800f854:	3401      	adds	r4, #1
 800f856:	9304      	str	r3, [sp, #16]
 800f858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f85c:	482c      	ldr	r0, [pc, #176]	; (800f910 <_vfiprintf_r+0x250>)
 800f85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f862:	2206      	movs	r2, #6
 800f864:	f7f0 fcbc 	bl	80001e0 <memchr>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d03f      	beq.n	800f8ec <_vfiprintf_r+0x22c>
 800f86c:	4b29      	ldr	r3, [pc, #164]	; (800f914 <_vfiprintf_r+0x254>)
 800f86e:	bb1b      	cbnz	r3, 800f8b8 <_vfiprintf_r+0x1f8>
 800f870:	9b03      	ldr	r3, [sp, #12]
 800f872:	3307      	adds	r3, #7
 800f874:	f023 0307 	bic.w	r3, r3, #7
 800f878:	3308      	adds	r3, #8
 800f87a:	9303      	str	r3, [sp, #12]
 800f87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f87e:	443b      	add	r3, r7
 800f880:	9309      	str	r3, [sp, #36]	; 0x24
 800f882:	e767      	b.n	800f754 <_vfiprintf_r+0x94>
 800f884:	fb0c 3202 	mla	r2, ip, r2, r3
 800f888:	460c      	mov	r4, r1
 800f88a:	2001      	movs	r0, #1
 800f88c:	e7a5      	b.n	800f7da <_vfiprintf_r+0x11a>
 800f88e:	2300      	movs	r3, #0
 800f890:	3401      	adds	r4, #1
 800f892:	9305      	str	r3, [sp, #20]
 800f894:	4619      	mov	r1, r3
 800f896:	f04f 0c0a 	mov.w	ip, #10
 800f89a:	4620      	mov	r0, r4
 800f89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8a0:	3a30      	subs	r2, #48	; 0x30
 800f8a2:	2a09      	cmp	r2, #9
 800f8a4:	d903      	bls.n	800f8ae <_vfiprintf_r+0x1ee>
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d0c5      	beq.n	800f836 <_vfiprintf_r+0x176>
 800f8aa:	9105      	str	r1, [sp, #20]
 800f8ac:	e7c3      	b.n	800f836 <_vfiprintf_r+0x176>
 800f8ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e7f0      	b.n	800f89a <_vfiprintf_r+0x1da>
 800f8b8:	ab03      	add	r3, sp, #12
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	462a      	mov	r2, r5
 800f8be:	4b16      	ldr	r3, [pc, #88]	; (800f918 <_vfiprintf_r+0x258>)
 800f8c0:	a904      	add	r1, sp, #16
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f7fc f80a 	bl	800b8dc <_printf_float>
 800f8c8:	4607      	mov	r7, r0
 800f8ca:	1c78      	adds	r0, r7, #1
 800f8cc:	d1d6      	bne.n	800f87c <_vfiprintf_r+0x1bc>
 800f8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8d0:	07d9      	lsls	r1, r3, #31
 800f8d2:	d405      	bmi.n	800f8e0 <_vfiprintf_r+0x220>
 800f8d4:	89ab      	ldrh	r3, [r5, #12]
 800f8d6:	059a      	lsls	r2, r3, #22
 800f8d8:	d402      	bmi.n	800f8e0 <_vfiprintf_r+0x220>
 800f8da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8dc:	f000 faa1 	bl	800fe22 <__retarget_lock_release_recursive>
 800f8e0:	89ab      	ldrh	r3, [r5, #12]
 800f8e2:	065b      	lsls	r3, r3, #25
 800f8e4:	f53f af12 	bmi.w	800f70c <_vfiprintf_r+0x4c>
 800f8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8ea:	e711      	b.n	800f710 <_vfiprintf_r+0x50>
 800f8ec:	ab03      	add	r3, sp, #12
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	462a      	mov	r2, r5
 800f8f2:	4b09      	ldr	r3, [pc, #36]	; (800f918 <_vfiprintf_r+0x258>)
 800f8f4:	a904      	add	r1, sp, #16
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f7fc fa94 	bl	800be24 <_printf_i>
 800f8fc:	e7e4      	b.n	800f8c8 <_vfiprintf_r+0x208>
 800f8fe:	bf00      	nop
 800f900:	0801f984 	.word	0x0801f984
 800f904:	0801f9a4 	.word	0x0801f9a4
 800f908:	0801f964 	.word	0x0801f964
 800f90c:	0801f914 	.word	0x0801f914
 800f910:	0801f91e 	.word	0x0801f91e
 800f914:	0800b8dd 	.word	0x0800b8dd
 800f918:	0800f69d 	.word	0x0800f69d
 800f91c:	0801f91a 	.word	0x0801f91a

0800f920 <__swbuf_r>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	460e      	mov	r6, r1
 800f924:	4614      	mov	r4, r2
 800f926:	4605      	mov	r5, r0
 800f928:	b118      	cbz	r0, 800f932 <__swbuf_r+0x12>
 800f92a:	6983      	ldr	r3, [r0, #24]
 800f92c:	b90b      	cbnz	r3, 800f932 <__swbuf_r+0x12>
 800f92e:	f000 f9d9 	bl	800fce4 <__sinit>
 800f932:	4b21      	ldr	r3, [pc, #132]	; (800f9b8 <__swbuf_r+0x98>)
 800f934:	429c      	cmp	r4, r3
 800f936:	d12b      	bne.n	800f990 <__swbuf_r+0x70>
 800f938:	686c      	ldr	r4, [r5, #4]
 800f93a:	69a3      	ldr	r3, [r4, #24]
 800f93c:	60a3      	str	r3, [r4, #8]
 800f93e:	89a3      	ldrh	r3, [r4, #12]
 800f940:	071a      	lsls	r2, r3, #28
 800f942:	d52f      	bpl.n	800f9a4 <__swbuf_r+0x84>
 800f944:	6923      	ldr	r3, [r4, #16]
 800f946:	b36b      	cbz	r3, 800f9a4 <__swbuf_r+0x84>
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	6820      	ldr	r0, [r4, #0]
 800f94c:	1ac0      	subs	r0, r0, r3
 800f94e:	6963      	ldr	r3, [r4, #20]
 800f950:	b2f6      	uxtb	r6, r6
 800f952:	4283      	cmp	r3, r0
 800f954:	4637      	mov	r7, r6
 800f956:	dc04      	bgt.n	800f962 <__swbuf_r+0x42>
 800f958:	4621      	mov	r1, r4
 800f95a:	4628      	mov	r0, r5
 800f95c:	f000 f92e 	bl	800fbbc <_fflush_r>
 800f960:	bb30      	cbnz	r0, 800f9b0 <__swbuf_r+0x90>
 800f962:	68a3      	ldr	r3, [r4, #8]
 800f964:	3b01      	subs	r3, #1
 800f966:	60a3      	str	r3, [r4, #8]
 800f968:	6823      	ldr	r3, [r4, #0]
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	6022      	str	r2, [r4, #0]
 800f96e:	701e      	strb	r6, [r3, #0]
 800f970:	6963      	ldr	r3, [r4, #20]
 800f972:	3001      	adds	r0, #1
 800f974:	4283      	cmp	r3, r0
 800f976:	d004      	beq.n	800f982 <__swbuf_r+0x62>
 800f978:	89a3      	ldrh	r3, [r4, #12]
 800f97a:	07db      	lsls	r3, r3, #31
 800f97c:	d506      	bpl.n	800f98c <__swbuf_r+0x6c>
 800f97e:	2e0a      	cmp	r6, #10
 800f980:	d104      	bne.n	800f98c <__swbuf_r+0x6c>
 800f982:	4621      	mov	r1, r4
 800f984:	4628      	mov	r0, r5
 800f986:	f000 f919 	bl	800fbbc <_fflush_r>
 800f98a:	b988      	cbnz	r0, 800f9b0 <__swbuf_r+0x90>
 800f98c:	4638      	mov	r0, r7
 800f98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f990:	4b0a      	ldr	r3, [pc, #40]	; (800f9bc <__swbuf_r+0x9c>)
 800f992:	429c      	cmp	r4, r3
 800f994:	d101      	bne.n	800f99a <__swbuf_r+0x7a>
 800f996:	68ac      	ldr	r4, [r5, #8]
 800f998:	e7cf      	b.n	800f93a <__swbuf_r+0x1a>
 800f99a:	4b09      	ldr	r3, [pc, #36]	; (800f9c0 <__swbuf_r+0xa0>)
 800f99c:	429c      	cmp	r4, r3
 800f99e:	bf08      	it	eq
 800f9a0:	68ec      	ldreq	r4, [r5, #12]
 800f9a2:	e7ca      	b.n	800f93a <__swbuf_r+0x1a>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f000 f80c 	bl	800f9c4 <__swsetup_r>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d0cb      	beq.n	800f948 <__swbuf_r+0x28>
 800f9b0:	f04f 37ff 	mov.w	r7, #4294967295
 800f9b4:	e7ea      	b.n	800f98c <__swbuf_r+0x6c>
 800f9b6:	bf00      	nop
 800f9b8:	0801f984 	.word	0x0801f984
 800f9bc:	0801f9a4 	.word	0x0801f9a4
 800f9c0:	0801f964 	.word	0x0801f964

0800f9c4 <__swsetup_r>:
 800f9c4:	4b32      	ldr	r3, [pc, #200]	; (800fa90 <__swsetup_r+0xcc>)
 800f9c6:	b570      	push	{r4, r5, r6, lr}
 800f9c8:	681d      	ldr	r5, [r3, #0]
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	b125      	cbz	r5, 800f9da <__swsetup_r+0x16>
 800f9d0:	69ab      	ldr	r3, [r5, #24]
 800f9d2:	b913      	cbnz	r3, 800f9da <__swsetup_r+0x16>
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	f000 f985 	bl	800fce4 <__sinit>
 800f9da:	4b2e      	ldr	r3, [pc, #184]	; (800fa94 <__swsetup_r+0xd0>)
 800f9dc:	429c      	cmp	r4, r3
 800f9de:	d10f      	bne.n	800fa00 <__swsetup_r+0x3c>
 800f9e0:	686c      	ldr	r4, [r5, #4]
 800f9e2:	89a3      	ldrh	r3, [r4, #12]
 800f9e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9e8:	0719      	lsls	r1, r3, #28
 800f9ea:	d42c      	bmi.n	800fa46 <__swsetup_r+0x82>
 800f9ec:	06dd      	lsls	r5, r3, #27
 800f9ee:	d411      	bmi.n	800fa14 <__swsetup_r+0x50>
 800f9f0:	2309      	movs	r3, #9
 800f9f2:	6033      	str	r3, [r6, #0]
 800f9f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9f8:	81a3      	strh	r3, [r4, #12]
 800f9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f9fe:	e03e      	b.n	800fa7e <__swsetup_r+0xba>
 800fa00:	4b25      	ldr	r3, [pc, #148]	; (800fa98 <__swsetup_r+0xd4>)
 800fa02:	429c      	cmp	r4, r3
 800fa04:	d101      	bne.n	800fa0a <__swsetup_r+0x46>
 800fa06:	68ac      	ldr	r4, [r5, #8]
 800fa08:	e7eb      	b.n	800f9e2 <__swsetup_r+0x1e>
 800fa0a:	4b24      	ldr	r3, [pc, #144]	; (800fa9c <__swsetup_r+0xd8>)
 800fa0c:	429c      	cmp	r4, r3
 800fa0e:	bf08      	it	eq
 800fa10:	68ec      	ldreq	r4, [r5, #12]
 800fa12:	e7e6      	b.n	800f9e2 <__swsetup_r+0x1e>
 800fa14:	0758      	lsls	r0, r3, #29
 800fa16:	d512      	bpl.n	800fa3e <__swsetup_r+0x7a>
 800fa18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa1a:	b141      	cbz	r1, 800fa2e <__swsetup_r+0x6a>
 800fa1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa20:	4299      	cmp	r1, r3
 800fa22:	d002      	beq.n	800fa2a <__swsetup_r+0x66>
 800fa24:	4630      	mov	r0, r6
 800fa26:	f7ff fb27 	bl	800f078 <_free_r>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	6363      	str	r3, [r4, #52]	; 0x34
 800fa2e:	89a3      	ldrh	r3, [r4, #12]
 800fa30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa34:	81a3      	strh	r3, [r4, #12]
 800fa36:	2300      	movs	r3, #0
 800fa38:	6063      	str	r3, [r4, #4]
 800fa3a:	6923      	ldr	r3, [r4, #16]
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	89a3      	ldrh	r3, [r4, #12]
 800fa40:	f043 0308 	orr.w	r3, r3, #8
 800fa44:	81a3      	strh	r3, [r4, #12]
 800fa46:	6923      	ldr	r3, [r4, #16]
 800fa48:	b94b      	cbnz	r3, 800fa5e <__swsetup_r+0x9a>
 800fa4a:	89a3      	ldrh	r3, [r4, #12]
 800fa4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa54:	d003      	beq.n	800fa5e <__swsetup_r+0x9a>
 800fa56:	4621      	mov	r1, r4
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f000 fa09 	bl	800fe70 <__smakebuf_r>
 800fa5e:	89a0      	ldrh	r0, [r4, #12]
 800fa60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa64:	f010 0301 	ands.w	r3, r0, #1
 800fa68:	d00a      	beq.n	800fa80 <__swsetup_r+0xbc>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	60a3      	str	r3, [r4, #8]
 800fa6e:	6963      	ldr	r3, [r4, #20]
 800fa70:	425b      	negs	r3, r3
 800fa72:	61a3      	str	r3, [r4, #24]
 800fa74:	6923      	ldr	r3, [r4, #16]
 800fa76:	b943      	cbnz	r3, 800fa8a <__swsetup_r+0xc6>
 800fa78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa7c:	d1ba      	bne.n	800f9f4 <__swsetup_r+0x30>
 800fa7e:	bd70      	pop	{r4, r5, r6, pc}
 800fa80:	0781      	lsls	r1, r0, #30
 800fa82:	bf58      	it	pl
 800fa84:	6963      	ldrpl	r3, [r4, #20]
 800fa86:	60a3      	str	r3, [r4, #8]
 800fa88:	e7f4      	b.n	800fa74 <__swsetup_r+0xb0>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e7f7      	b.n	800fa7e <__swsetup_r+0xba>
 800fa8e:	bf00      	nop
 800fa90:	2000007c 	.word	0x2000007c
 800fa94:	0801f984 	.word	0x0801f984
 800fa98:	0801f9a4 	.word	0x0801f9a4
 800fa9c:	0801f964 	.word	0x0801f964

0800faa0 <abort>:
 800faa0:	b508      	push	{r3, lr}
 800faa2:	2006      	movs	r0, #6
 800faa4:	f000 fa54 	bl	800ff50 <raise>
 800faa8:	2001      	movs	r0, #1
 800faaa:	f7f5 fe75 	bl	8005798 <_exit>
	...

0800fab0 <__sflush_r>:
 800fab0:	898a      	ldrh	r2, [r1, #12]
 800fab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab6:	4605      	mov	r5, r0
 800fab8:	0710      	lsls	r0, r2, #28
 800faba:	460c      	mov	r4, r1
 800fabc:	d458      	bmi.n	800fb70 <__sflush_r+0xc0>
 800fabe:	684b      	ldr	r3, [r1, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	dc05      	bgt.n	800fad0 <__sflush_r+0x20>
 800fac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	dc02      	bgt.n	800fad0 <__sflush_r+0x20>
 800faca:	2000      	movs	r0, #0
 800facc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fad2:	2e00      	cmp	r6, #0
 800fad4:	d0f9      	beq.n	800faca <__sflush_r+0x1a>
 800fad6:	2300      	movs	r3, #0
 800fad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fadc:	682f      	ldr	r7, [r5, #0]
 800fade:	602b      	str	r3, [r5, #0]
 800fae0:	d032      	beq.n	800fb48 <__sflush_r+0x98>
 800fae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	075a      	lsls	r2, r3, #29
 800fae8:	d505      	bpl.n	800faf6 <__sflush_r+0x46>
 800faea:	6863      	ldr	r3, [r4, #4]
 800faec:	1ac0      	subs	r0, r0, r3
 800faee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800faf0:	b10b      	cbz	r3, 800faf6 <__sflush_r+0x46>
 800faf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800faf4:	1ac0      	subs	r0, r0, r3
 800faf6:	2300      	movs	r3, #0
 800faf8:	4602      	mov	r2, r0
 800fafa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fafc:	6a21      	ldr	r1, [r4, #32]
 800fafe:	4628      	mov	r0, r5
 800fb00:	47b0      	blx	r6
 800fb02:	1c43      	adds	r3, r0, #1
 800fb04:	89a3      	ldrh	r3, [r4, #12]
 800fb06:	d106      	bne.n	800fb16 <__sflush_r+0x66>
 800fb08:	6829      	ldr	r1, [r5, #0]
 800fb0a:	291d      	cmp	r1, #29
 800fb0c:	d82c      	bhi.n	800fb68 <__sflush_r+0xb8>
 800fb0e:	4a2a      	ldr	r2, [pc, #168]	; (800fbb8 <__sflush_r+0x108>)
 800fb10:	40ca      	lsrs	r2, r1
 800fb12:	07d6      	lsls	r6, r2, #31
 800fb14:	d528      	bpl.n	800fb68 <__sflush_r+0xb8>
 800fb16:	2200      	movs	r2, #0
 800fb18:	6062      	str	r2, [r4, #4]
 800fb1a:	04d9      	lsls	r1, r3, #19
 800fb1c:	6922      	ldr	r2, [r4, #16]
 800fb1e:	6022      	str	r2, [r4, #0]
 800fb20:	d504      	bpl.n	800fb2c <__sflush_r+0x7c>
 800fb22:	1c42      	adds	r2, r0, #1
 800fb24:	d101      	bne.n	800fb2a <__sflush_r+0x7a>
 800fb26:	682b      	ldr	r3, [r5, #0]
 800fb28:	b903      	cbnz	r3, 800fb2c <__sflush_r+0x7c>
 800fb2a:	6560      	str	r0, [r4, #84]	; 0x54
 800fb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb2e:	602f      	str	r7, [r5, #0]
 800fb30:	2900      	cmp	r1, #0
 800fb32:	d0ca      	beq.n	800faca <__sflush_r+0x1a>
 800fb34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb38:	4299      	cmp	r1, r3
 800fb3a:	d002      	beq.n	800fb42 <__sflush_r+0x92>
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	f7ff fa9b 	bl	800f078 <_free_r>
 800fb42:	2000      	movs	r0, #0
 800fb44:	6360      	str	r0, [r4, #52]	; 0x34
 800fb46:	e7c1      	b.n	800facc <__sflush_r+0x1c>
 800fb48:	6a21      	ldr	r1, [r4, #32]
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	47b0      	blx	r6
 800fb50:	1c41      	adds	r1, r0, #1
 800fb52:	d1c7      	bne.n	800fae4 <__sflush_r+0x34>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d0c4      	beq.n	800fae4 <__sflush_r+0x34>
 800fb5a:	2b1d      	cmp	r3, #29
 800fb5c:	d001      	beq.n	800fb62 <__sflush_r+0xb2>
 800fb5e:	2b16      	cmp	r3, #22
 800fb60:	d101      	bne.n	800fb66 <__sflush_r+0xb6>
 800fb62:	602f      	str	r7, [r5, #0]
 800fb64:	e7b1      	b.n	800faca <__sflush_r+0x1a>
 800fb66:	89a3      	ldrh	r3, [r4, #12]
 800fb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb6c:	81a3      	strh	r3, [r4, #12]
 800fb6e:	e7ad      	b.n	800facc <__sflush_r+0x1c>
 800fb70:	690f      	ldr	r7, [r1, #16]
 800fb72:	2f00      	cmp	r7, #0
 800fb74:	d0a9      	beq.n	800faca <__sflush_r+0x1a>
 800fb76:	0793      	lsls	r3, r2, #30
 800fb78:	680e      	ldr	r6, [r1, #0]
 800fb7a:	bf08      	it	eq
 800fb7c:	694b      	ldreq	r3, [r1, #20]
 800fb7e:	600f      	str	r7, [r1, #0]
 800fb80:	bf18      	it	ne
 800fb82:	2300      	movne	r3, #0
 800fb84:	eba6 0807 	sub.w	r8, r6, r7
 800fb88:	608b      	str	r3, [r1, #8]
 800fb8a:	f1b8 0f00 	cmp.w	r8, #0
 800fb8e:	dd9c      	ble.n	800faca <__sflush_r+0x1a>
 800fb90:	6a21      	ldr	r1, [r4, #32]
 800fb92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb94:	4643      	mov	r3, r8
 800fb96:	463a      	mov	r2, r7
 800fb98:	4628      	mov	r0, r5
 800fb9a:	47b0      	blx	r6
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	dc06      	bgt.n	800fbae <__sflush_r+0xfe>
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba6:	81a3      	strh	r3, [r4, #12]
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	e78e      	b.n	800facc <__sflush_r+0x1c>
 800fbae:	4407      	add	r7, r0
 800fbb0:	eba8 0800 	sub.w	r8, r8, r0
 800fbb4:	e7e9      	b.n	800fb8a <__sflush_r+0xda>
 800fbb6:	bf00      	nop
 800fbb8:	20400001 	.word	0x20400001

0800fbbc <_fflush_r>:
 800fbbc:	b538      	push	{r3, r4, r5, lr}
 800fbbe:	690b      	ldr	r3, [r1, #16]
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	b913      	cbnz	r3, 800fbcc <_fflush_r+0x10>
 800fbc6:	2500      	movs	r5, #0
 800fbc8:	4628      	mov	r0, r5
 800fbca:	bd38      	pop	{r3, r4, r5, pc}
 800fbcc:	b118      	cbz	r0, 800fbd6 <_fflush_r+0x1a>
 800fbce:	6983      	ldr	r3, [r0, #24]
 800fbd0:	b90b      	cbnz	r3, 800fbd6 <_fflush_r+0x1a>
 800fbd2:	f000 f887 	bl	800fce4 <__sinit>
 800fbd6:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <_fflush_r+0x6c>)
 800fbd8:	429c      	cmp	r4, r3
 800fbda:	d11b      	bne.n	800fc14 <_fflush_r+0x58>
 800fbdc:	686c      	ldr	r4, [r5, #4]
 800fbde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d0ef      	beq.n	800fbc6 <_fflush_r+0xa>
 800fbe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fbe8:	07d0      	lsls	r0, r2, #31
 800fbea:	d404      	bmi.n	800fbf6 <_fflush_r+0x3a>
 800fbec:	0599      	lsls	r1, r3, #22
 800fbee:	d402      	bmi.n	800fbf6 <_fflush_r+0x3a>
 800fbf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbf2:	f000 f915 	bl	800fe20 <__retarget_lock_acquire_recursive>
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	4621      	mov	r1, r4
 800fbfa:	f7ff ff59 	bl	800fab0 <__sflush_r>
 800fbfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc00:	07da      	lsls	r2, r3, #31
 800fc02:	4605      	mov	r5, r0
 800fc04:	d4e0      	bmi.n	800fbc8 <_fflush_r+0xc>
 800fc06:	89a3      	ldrh	r3, [r4, #12]
 800fc08:	059b      	lsls	r3, r3, #22
 800fc0a:	d4dd      	bmi.n	800fbc8 <_fflush_r+0xc>
 800fc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc0e:	f000 f908 	bl	800fe22 <__retarget_lock_release_recursive>
 800fc12:	e7d9      	b.n	800fbc8 <_fflush_r+0xc>
 800fc14:	4b05      	ldr	r3, [pc, #20]	; (800fc2c <_fflush_r+0x70>)
 800fc16:	429c      	cmp	r4, r3
 800fc18:	d101      	bne.n	800fc1e <_fflush_r+0x62>
 800fc1a:	68ac      	ldr	r4, [r5, #8]
 800fc1c:	e7df      	b.n	800fbde <_fflush_r+0x22>
 800fc1e:	4b04      	ldr	r3, [pc, #16]	; (800fc30 <_fflush_r+0x74>)
 800fc20:	429c      	cmp	r4, r3
 800fc22:	bf08      	it	eq
 800fc24:	68ec      	ldreq	r4, [r5, #12]
 800fc26:	e7da      	b.n	800fbde <_fflush_r+0x22>
 800fc28:	0801f984 	.word	0x0801f984
 800fc2c:	0801f9a4 	.word	0x0801f9a4
 800fc30:	0801f964 	.word	0x0801f964

0800fc34 <std>:
 800fc34:	2300      	movs	r3, #0
 800fc36:	b510      	push	{r4, lr}
 800fc38:	4604      	mov	r4, r0
 800fc3a:	e9c0 3300 	strd	r3, r3, [r0]
 800fc3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc42:	6083      	str	r3, [r0, #8]
 800fc44:	8181      	strh	r1, [r0, #12]
 800fc46:	6643      	str	r3, [r0, #100]	; 0x64
 800fc48:	81c2      	strh	r2, [r0, #14]
 800fc4a:	6183      	str	r3, [r0, #24]
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	2208      	movs	r2, #8
 800fc50:	305c      	adds	r0, #92	; 0x5c
 800fc52:	f7fb fd9b 	bl	800b78c <memset>
 800fc56:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <std+0x38>)
 800fc58:	6263      	str	r3, [r4, #36]	; 0x24
 800fc5a:	4b05      	ldr	r3, [pc, #20]	; (800fc70 <std+0x3c>)
 800fc5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc5e:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <std+0x40>)
 800fc60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc62:	4b05      	ldr	r3, [pc, #20]	; (800fc78 <std+0x44>)
 800fc64:	6224      	str	r4, [r4, #32]
 800fc66:	6323      	str	r3, [r4, #48]	; 0x30
 800fc68:	bd10      	pop	{r4, pc}
 800fc6a:	bf00      	nop
 800fc6c:	0800ff89 	.word	0x0800ff89
 800fc70:	0800ffab 	.word	0x0800ffab
 800fc74:	0800ffe3 	.word	0x0800ffe3
 800fc78:	08010007 	.word	0x08010007

0800fc7c <_cleanup_r>:
 800fc7c:	4901      	ldr	r1, [pc, #4]	; (800fc84 <_cleanup_r+0x8>)
 800fc7e:	f000 b8af 	b.w	800fde0 <_fwalk_reent>
 800fc82:	bf00      	nop
 800fc84:	0800fbbd 	.word	0x0800fbbd

0800fc88 <__sfmoreglue>:
 800fc88:	b570      	push	{r4, r5, r6, lr}
 800fc8a:	2268      	movs	r2, #104	; 0x68
 800fc8c:	1e4d      	subs	r5, r1, #1
 800fc8e:	4355      	muls	r5, r2
 800fc90:	460e      	mov	r6, r1
 800fc92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fc96:	f7ff fa5b 	bl	800f150 <_malloc_r>
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	b140      	cbz	r0, 800fcb0 <__sfmoreglue+0x28>
 800fc9e:	2100      	movs	r1, #0
 800fca0:	e9c0 1600 	strd	r1, r6, [r0]
 800fca4:	300c      	adds	r0, #12
 800fca6:	60a0      	str	r0, [r4, #8]
 800fca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fcac:	f7fb fd6e 	bl	800b78c <memset>
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	bd70      	pop	{r4, r5, r6, pc}

0800fcb4 <__sfp_lock_acquire>:
 800fcb4:	4801      	ldr	r0, [pc, #4]	; (800fcbc <__sfp_lock_acquire+0x8>)
 800fcb6:	f000 b8b3 	b.w	800fe20 <__retarget_lock_acquire_recursive>
 800fcba:	bf00      	nop
 800fcbc:	2000119d 	.word	0x2000119d

0800fcc0 <__sfp_lock_release>:
 800fcc0:	4801      	ldr	r0, [pc, #4]	; (800fcc8 <__sfp_lock_release+0x8>)
 800fcc2:	f000 b8ae 	b.w	800fe22 <__retarget_lock_release_recursive>
 800fcc6:	bf00      	nop
 800fcc8:	2000119d 	.word	0x2000119d

0800fccc <__sinit_lock_acquire>:
 800fccc:	4801      	ldr	r0, [pc, #4]	; (800fcd4 <__sinit_lock_acquire+0x8>)
 800fcce:	f000 b8a7 	b.w	800fe20 <__retarget_lock_acquire_recursive>
 800fcd2:	bf00      	nop
 800fcd4:	2000119e 	.word	0x2000119e

0800fcd8 <__sinit_lock_release>:
 800fcd8:	4801      	ldr	r0, [pc, #4]	; (800fce0 <__sinit_lock_release+0x8>)
 800fcda:	f000 b8a2 	b.w	800fe22 <__retarget_lock_release_recursive>
 800fcde:	bf00      	nop
 800fce0:	2000119e 	.word	0x2000119e

0800fce4 <__sinit>:
 800fce4:	b510      	push	{r4, lr}
 800fce6:	4604      	mov	r4, r0
 800fce8:	f7ff fff0 	bl	800fccc <__sinit_lock_acquire>
 800fcec:	69a3      	ldr	r3, [r4, #24]
 800fcee:	b11b      	cbz	r3, 800fcf8 <__sinit+0x14>
 800fcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcf4:	f7ff bff0 	b.w	800fcd8 <__sinit_lock_release>
 800fcf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fcfc:	6523      	str	r3, [r4, #80]	; 0x50
 800fcfe:	4b13      	ldr	r3, [pc, #76]	; (800fd4c <__sinit+0x68>)
 800fd00:	4a13      	ldr	r2, [pc, #76]	; (800fd50 <__sinit+0x6c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd06:	42a3      	cmp	r3, r4
 800fd08:	bf04      	itt	eq
 800fd0a:	2301      	moveq	r3, #1
 800fd0c:	61a3      	streq	r3, [r4, #24]
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f000 f820 	bl	800fd54 <__sfp>
 800fd14:	6060      	str	r0, [r4, #4]
 800fd16:	4620      	mov	r0, r4
 800fd18:	f000 f81c 	bl	800fd54 <__sfp>
 800fd1c:	60a0      	str	r0, [r4, #8]
 800fd1e:	4620      	mov	r0, r4
 800fd20:	f000 f818 	bl	800fd54 <__sfp>
 800fd24:	2200      	movs	r2, #0
 800fd26:	60e0      	str	r0, [r4, #12]
 800fd28:	2104      	movs	r1, #4
 800fd2a:	6860      	ldr	r0, [r4, #4]
 800fd2c:	f7ff ff82 	bl	800fc34 <std>
 800fd30:	68a0      	ldr	r0, [r4, #8]
 800fd32:	2201      	movs	r2, #1
 800fd34:	2109      	movs	r1, #9
 800fd36:	f7ff ff7d 	bl	800fc34 <std>
 800fd3a:	68e0      	ldr	r0, [r4, #12]
 800fd3c:	2202      	movs	r2, #2
 800fd3e:	2112      	movs	r1, #18
 800fd40:	f7ff ff78 	bl	800fc34 <std>
 800fd44:	2301      	movs	r3, #1
 800fd46:	61a3      	str	r3, [r4, #24]
 800fd48:	e7d2      	b.n	800fcf0 <__sinit+0xc>
 800fd4a:	bf00      	nop
 800fd4c:	0801f520 	.word	0x0801f520
 800fd50:	0800fc7d 	.word	0x0800fc7d

0800fd54 <__sfp>:
 800fd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd56:	4607      	mov	r7, r0
 800fd58:	f7ff ffac 	bl	800fcb4 <__sfp_lock_acquire>
 800fd5c:	4b1e      	ldr	r3, [pc, #120]	; (800fdd8 <__sfp+0x84>)
 800fd5e:	681e      	ldr	r6, [r3, #0]
 800fd60:	69b3      	ldr	r3, [r6, #24]
 800fd62:	b913      	cbnz	r3, 800fd6a <__sfp+0x16>
 800fd64:	4630      	mov	r0, r6
 800fd66:	f7ff ffbd 	bl	800fce4 <__sinit>
 800fd6a:	3648      	adds	r6, #72	; 0x48
 800fd6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd70:	3b01      	subs	r3, #1
 800fd72:	d503      	bpl.n	800fd7c <__sfp+0x28>
 800fd74:	6833      	ldr	r3, [r6, #0]
 800fd76:	b30b      	cbz	r3, 800fdbc <__sfp+0x68>
 800fd78:	6836      	ldr	r6, [r6, #0]
 800fd7a:	e7f7      	b.n	800fd6c <__sfp+0x18>
 800fd7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd80:	b9d5      	cbnz	r5, 800fdb8 <__sfp+0x64>
 800fd82:	4b16      	ldr	r3, [pc, #88]	; (800fddc <__sfp+0x88>)
 800fd84:	60e3      	str	r3, [r4, #12]
 800fd86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd8a:	6665      	str	r5, [r4, #100]	; 0x64
 800fd8c:	f000 f847 	bl	800fe1e <__retarget_lock_init_recursive>
 800fd90:	f7ff ff96 	bl	800fcc0 <__sfp_lock_release>
 800fd94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fd98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fd9c:	6025      	str	r5, [r4, #0]
 800fd9e:	61a5      	str	r5, [r4, #24]
 800fda0:	2208      	movs	r2, #8
 800fda2:	4629      	mov	r1, r5
 800fda4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fda8:	f7fb fcf0 	bl	800b78c <memset>
 800fdac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fdb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb8:	3468      	adds	r4, #104	; 0x68
 800fdba:	e7d9      	b.n	800fd70 <__sfp+0x1c>
 800fdbc:	2104      	movs	r1, #4
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	f7ff ff62 	bl	800fc88 <__sfmoreglue>
 800fdc4:	4604      	mov	r4, r0
 800fdc6:	6030      	str	r0, [r6, #0]
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d1d5      	bne.n	800fd78 <__sfp+0x24>
 800fdcc:	f7ff ff78 	bl	800fcc0 <__sfp_lock_release>
 800fdd0:	230c      	movs	r3, #12
 800fdd2:	603b      	str	r3, [r7, #0]
 800fdd4:	e7ee      	b.n	800fdb4 <__sfp+0x60>
 800fdd6:	bf00      	nop
 800fdd8:	0801f520 	.word	0x0801f520
 800fddc:	ffff0001 	.word	0xffff0001

0800fde0 <_fwalk_reent>:
 800fde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fde4:	4606      	mov	r6, r0
 800fde6:	4688      	mov	r8, r1
 800fde8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fdec:	2700      	movs	r7, #0
 800fdee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdf2:	f1b9 0901 	subs.w	r9, r9, #1
 800fdf6:	d505      	bpl.n	800fe04 <_fwalk_reent+0x24>
 800fdf8:	6824      	ldr	r4, [r4, #0]
 800fdfa:	2c00      	cmp	r4, #0
 800fdfc:	d1f7      	bne.n	800fdee <_fwalk_reent+0xe>
 800fdfe:	4638      	mov	r0, r7
 800fe00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe04:	89ab      	ldrh	r3, [r5, #12]
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d907      	bls.n	800fe1a <_fwalk_reent+0x3a>
 800fe0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	d003      	beq.n	800fe1a <_fwalk_reent+0x3a>
 800fe12:	4629      	mov	r1, r5
 800fe14:	4630      	mov	r0, r6
 800fe16:	47c0      	blx	r8
 800fe18:	4307      	orrs	r7, r0
 800fe1a:	3568      	adds	r5, #104	; 0x68
 800fe1c:	e7e9      	b.n	800fdf2 <_fwalk_reent+0x12>

0800fe1e <__retarget_lock_init_recursive>:
 800fe1e:	4770      	bx	lr

0800fe20 <__retarget_lock_acquire_recursive>:
 800fe20:	4770      	bx	lr

0800fe22 <__retarget_lock_release_recursive>:
 800fe22:	4770      	bx	lr

0800fe24 <__swhatbuf_r>:
 800fe24:	b570      	push	{r4, r5, r6, lr}
 800fe26:	460e      	mov	r6, r1
 800fe28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe2c:	2900      	cmp	r1, #0
 800fe2e:	b096      	sub	sp, #88	; 0x58
 800fe30:	4614      	mov	r4, r2
 800fe32:	461d      	mov	r5, r3
 800fe34:	da08      	bge.n	800fe48 <__swhatbuf_r+0x24>
 800fe36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	602a      	str	r2, [r5, #0]
 800fe3e:	061a      	lsls	r2, r3, #24
 800fe40:	d410      	bmi.n	800fe64 <__swhatbuf_r+0x40>
 800fe42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe46:	e00e      	b.n	800fe66 <__swhatbuf_r+0x42>
 800fe48:	466a      	mov	r2, sp
 800fe4a:	f000 f903 	bl	8010054 <_fstat_r>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	dbf1      	blt.n	800fe36 <__swhatbuf_r+0x12>
 800fe52:	9a01      	ldr	r2, [sp, #4]
 800fe54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe5c:	425a      	negs	r2, r3
 800fe5e:	415a      	adcs	r2, r3
 800fe60:	602a      	str	r2, [r5, #0]
 800fe62:	e7ee      	b.n	800fe42 <__swhatbuf_r+0x1e>
 800fe64:	2340      	movs	r3, #64	; 0x40
 800fe66:	2000      	movs	r0, #0
 800fe68:	6023      	str	r3, [r4, #0]
 800fe6a:	b016      	add	sp, #88	; 0x58
 800fe6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe70 <__smakebuf_r>:
 800fe70:	898b      	ldrh	r3, [r1, #12]
 800fe72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe74:	079d      	lsls	r5, r3, #30
 800fe76:	4606      	mov	r6, r0
 800fe78:	460c      	mov	r4, r1
 800fe7a:	d507      	bpl.n	800fe8c <__smakebuf_r+0x1c>
 800fe7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	6123      	str	r3, [r4, #16]
 800fe84:	2301      	movs	r3, #1
 800fe86:	6163      	str	r3, [r4, #20]
 800fe88:	b002      	add	sp, #8
 800fe8a:	bd70      	pop	{r4, r5, r6, pc}
 800fe8c:	ab01      	add	r3, sp, #4
 800fe8e:	466a      	mov	r2, sp
 800fe90:	f7ff ffc8 	bl	800fe24 <__swhatbuf_r>
 800fe94:	9900      	ldr	r1, [sp, #0]
 800fe96:	4605      	mov	r5, r0
 800fe98:	4630      	mov	r0, r6
 800fe9a:	f7ff f959 	bl	800f150 <_malloc_r>
 800fe9e:	b948      	cbnz	r0, 800feb4 <__smakebuf_r+0x44>
 800fea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fea4:	059a      	lsls	r2, r3, #22
 800fea6:	d4ef      	bmi.n	800fe88 <__smakebuf_r+0x18>
 800fea8:	f023 0303 	bic.w	r3, r3, #3
 800feac:	f043 0302 	orr.w	r3, r3, #2
 800feb0:	81a3      	strh	r3, [r4, #12]
 800feb2:	e7e3      	b.n	800fe7c <__smakebuf_r+0xc>
 800feb4:	4b0d      	ldr	r3, [pc, #52]	; (800feec <__smakebuf_r+0x7c>)
 800feb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	6020      	str	r0, [r4, #0]
 800febc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fec0:	81a3      	strh	r3, [r4, #12]
 800fec2:	9b00      	ldr	r3, [sp, #0]
 800fec4:	6163      	str	r3, [r4, #20]
 800fec6:	9b01      	ldr	r3, [sp, #4]
 800fec8:	6120      	str	r0, [r4, #16]
 800feca:	b15b      	cbz	r3, 800fee4 <__smakebuf_r+0x74>
 800fecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fed0:	4630      	mov	r0, r6
 800fed2:	f000 f8d1 	bl	8010078 <_isatty_r>
 800fed6:	b128      	cbz	r0, 800fee4 <__smakebuf_r+0x74>
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	f023 0303 	bic.w	r3, r3, #3
 800fede:	f043 0301 	orr.w	r3, r3, #1
 800fee2:	81a3      	strh	r3, [r4, #12]
 800fee4:	89a0      	ldrh	r0, [r4, #12]
 800fee6:	4305      	orrs	r5, r0
 800fee8:	81a5      	strh	r5, [r4, #12]
 800feea:	e7cd      	b.n	800fe88 <__smakebuf_r+0x18>
 800feec:	0800fc7d 	.word	0x0800fc7d

0800fef0 <_malloc_usable_size_r>:
 800fef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fef4:	1f18      	subs	r0, r3, #4
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	bfbc      	itt	lt
 800fefa:	580b      	ldrlt	r3, [r1, r0]
 800fefc:	18c0      	addlt	r0, r0, r3
 800fefe:	4770      	bx	lr

0800ff00 <_raise_r>:
 800ff00:	291f      	cmp	r1, #31
 800ff02:	b538      	push	{r3, r4, r5, lr}
 800ff04:	4604      	mov	r4, r0
 800ff06:	460d      	mov	r5, r1
 800ff08:	d904      	bls.n	800ff14 <_raise_r+0x14>
 800ff0a:	2316      	movs	r3, #22
 800ff0c:	6003      	str	r3, [r0, #0]
 800ff0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff12:	bd38      	pop	{r3, r4, r5, pc}
 800ff14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff16:	b112      	cbz	r2, 800ff1e <_raise_r+0x1e>
 800ff18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff1c:	b94b      	cbnz	r3, 800ff32 <_raise_r+0x32>
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f000 f830 	bl	800ff84 <_getpid_r>
 800ff24:	462a      	mov	r2, r5
 800ff26:	4601      	mov	r1, r0
 800ff28:	4620      	mov	r0, r4
 800ff2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff2e:	f000 b817 	b.w	800ff60 <_kill_r>
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d00a      	beq.n	800ff4c <_raise_r+0x4c>
 800ff36:	1c59      	adds	r1, r3, #1
 800ff38:	d103      	bne.n	800ff42 <_raise_r+0x42>
 800ff3a:	2316      	movs	r3, #22
 800ff3c:	6003      	str	r3, [r0, #0]
 800ff3e:	2001      	movs	r0, #1
 800ff40:	e7e7      	b.n	800ff12 <_raise_r+0x12>
 800ff42:	2400      	movs	r4, #0
 800ff44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff48:	4628      	mov	r0, r5
 800ff4a:	4798      	blx	r3
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	e7e0      	b.n	800ff12 <_raise_r+0x12>

0800ff50 <raise>:
 800ff50:	4b02      	ldr	r3, [pc, #8]	; (800ff5c <raise+0xc>)
 800ff52:	4601      	mov	r1, r0
 800ff54:	6818      	ldr	r0, [r3, #0]
 800ff56:	f7ff bfd3 	b.w	800ff00 <_raise_r>
 800ff5a:	bf00      	nop
 800ff5c:	2000007c 	.word	0x2000007c

0800ff60 <_kill_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4d07      	ldr	r5, [pc, #28]	; (800ff80 <_kill_r+0x20>)
 800ff64:	2300      	movs	r3, #0
 800ff66:	4604      	mov	r4, r0
 800ff68:	4608      	mov	r0, r1
 800ff6a:	4611      	mov	r1, r2
 800ff6c:	602b      	str	r3, [r5, #0]
 800ff6e:	f7f5 fc03 	bl	8005778 <_kill>
 800ff72:	1c43      	adds	r3, r0, #1
 800ff74:	d102      	bne.n	800ff7c <_kill_r+0x1c>
 800ff76:	682b      	ldr	r3, [r5, #0]
 800ff78:	b103      	cbz	r3, 800ff7c <_kill_r+0x1c>
 800ff7a:	6023      	str	r3, [r4, #0]
 800ff7c:	bd38      	pop	{r3, r4, r5, pc}
 800ff7e:	bf00      	nop
 800ff80:	20001198 	.word	0x20001198

0800ff84 <_getpid_r>:
 800ff84:	f7f5 bbf0 	b.w	8005768 <_getpid>

0800ff88 <__sread>:
 800ff88:	b510      	push	{r4, lr}
 800ff8a:	460c      	mov	r4, r1
 800ff8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff90:	f000 f894 	bl	80100bc <_read_r>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	bfab      	itete	ge
 800ff98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ff9c:	181b      	addge	r3, r3, r0
 800ff9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffa2:	bfac      	ite	ge
 800ffa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffa6:	81a3      	strhlt	r3, [r4, #12]
 800ffa8:	bd10      	pop	{r4, pc}

0800ffaa <__swrite>:
 800ffaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffae:	461f      	mov	r7, r3
 800ffb0:	898b      	ldrh	r3, [r1, #12]
 800ffb2:	05db      	lsls	r3, r3, #23
 800ffb4:	4605      	mov	r5, r0
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	4616      	mov	r6, r2
 800ffba:	d505      	bpl.n	800ffc8 <__swrite+0x1e>
 800ffbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc0:	2302      	movs	r3, #2
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f000 f868 	bl	8010098 <_lseek_r>
 800ffc8:	89a3      	ldrh	r3, [r4, #12]
 800ffca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffd2:	81a3      	strh	r3, [r4, #12]
 800ffd4:	4632      	mov	r2, r6
 800ffd6:	463b      	mov	r3, r7
 800ffd8:	4628      	mov	r0, r5
 800ffda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffde:	f000 b817 	b.w	8010010 <_write_r>

0800ffe2 <__sseek>:
 800ffe2:	b510      	push	{r4, lr}
 800ffe4:	460c      	mov	r4, r1
 800ffe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffea:	f000 f855 	bl	8010098 <_lseek_r>
 800ffee:	1c43      	adds	r3, r0, #1
 800fff0:	89a3      	ldrh	r3, [r4, #12]
 800fff2:	bf15      	itete	ne
 800fff4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fffe:	81a3      	strheq	r3, [r4, #12]
 8010000:	bf18      	it	ne
 8010002:	81a3      	strhne	r3, [r4, #12]
 8010004:	bd10      	pop	{r4, pc}

08010006 <__sclose>:
 8010006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801000a:	f000 b813 	b.w	8010034 <_close_r>
	...

08010010 <_write_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	4d07      	ldr	r5, [pc, #28]	; (8010030 <_write_r+0x20>)
 8010014:	4604      	mov	r4, r0
 8010016:	4608      	mov	r0, r1
 8010018:	4611      	mov	r1, r2
 801001a:	2200      	movs	r2, #0
 801001c:	602a      	str	r2, [r5, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	f7f5 fbe1 	bl	80057e6 <_write>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	d102      	bne.n	801002e <_write_r+0x1e>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	b103      	cbz	r3, 801002e <_write_r+0x1e>
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	bd38      	pop	{r3, r4, r5, pc}
 8010030:	20001198 	.word	0x20001198

08010034 <_close_r>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4d06      	ldr	r5, [pc, #24]	; (8010050 <_close_r+0x1c>)
 8010038:	2300      	movs	r3, #0
 801003a:	4604      	mov	r4, r0
 801003c:	4608      	mov	r0, r1
 801003e:	602b      	str	r3, [r5, #0]
 8010040:	f7f5 fbed 	bl	800581e <_close>
 8010044:	1c43      	adds	r3, r0, #1
 8010046:	d102      	bne.n	801004e <_close_r+0x1a>
 8010048:	682b      	ldr	r3, [r5, #0]
 801004a:	b103      	cbz	r3, 801004e <_close_r+0x1a>
 801004c:	6023      	str	r3, [r4, #0]
 801004e:	bd38      	pop	{r3, r4, r5, pc}
 8010050:	20001198 	.word	0x20001198

08010054 <_fstat_r>:
 8010054:	b538      	push	{r3, r4, r5, lr}
 8010056:	4d07      	ldr	r5, [pc, #28]	; (8010074 <_fstat_r+0x20>)
 8010058:	2300      	movs	r3, #0
 801005a:	4604      	mov	r4, r0
 801005c:	4608      	mov	r0, r1
 801005e:	4611      	mov	r1, r2
 8010060:	602b      	str	r3, [r5, #0]
 8010062:	f7f5 fbe8 	bl	8005836 <_fstat>
 8010066:	1c43      	adds	r3, r0, #1
 8010068:	d102      	bne.n	8010070 <_fstat_r+0x1c>
 801006a:	682b      	ldr	r3, [r5, #0]
 801006c:	b103      	cbz	r3, 8010070 <_fstat_r+0x1c>
 801006e:	6023      	str	r3, [r4, #0]
 8010070:	bd38      	pop	{r3, r4, r5, pc}
 8010072:	bf00      	nop
 8010074:	20001198 	.word	0x20001198

08010078 <_isatty_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d06      	ldr	r5, [pc, #24]	; (8010094 <_isatty_r+0x1c>)
 801007c:	2300      	movs	r3, #0
 801007e:	4604      	mov	r4, r0
 8010080:	4608      	mov	r0, r1
 8010082:	602b      	str	r3, [r5, #0]
 8010084:	f7f5 fbe7 	bl	8005856 <_isatty>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d102      	bne.n	8010092 <_isatty_r+0x1a>
 801008c:	682b      	ldr	r3, [r5, #0]
 801008e:	b103      	cbz	r3, 8010092 <_isatty_r+0x1a>
 8010090:	6023      	str	r3, [r4, #0]
 8010092:	bd38      	pop	{r3, r4, r5, pc}
 8010094:	20001198 	.word	0x20001198

08010098 <_lseek_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4d07      	ldr	r5, [pc, #28]	; (80100b8 <_lseek_r+0x20>)
 801009c:	4604      	mov	r4, r0
 801009e:	4608      	mov	r0, r1
 80100a0:	4611      	mov	r1, r2
 80100a2:	2200      	movs	r2, #0
 80100a4:	602a      	str	r2, [r5, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	f7f5 fbe0 	bl	800586c <_lseek>
 80100ac:	1c43      	adds	r3, r0, #1
 80100ae:	d102      	bne.n	80100b6 <_lseek_r+0x1e>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	b103      	cbz	r3, 80100b6 <_lseek_r+0x1e>
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	20001198 	.word	0x20001198

080100bc <_read_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	4d07      	ldr	r5, [pc, #28]	; (80100dc <_read_r+0x20>)
 80100c0:	4604      	mov	r4, r0
 80100c2:	4608      	mov	r0, r1
 80100c4:	4611      	mov	r1, r2
 80100c6:	2200      	movs	r2, #0
 80100c8:	602a      	str	r2, [r5, #0]
 80100ca:	461a      	mov	r2, r3
 80100cc:	f7f5 fb6e 	bl	80057ac <_read>
 80100d0:	1c43      	adds	r3, r0, #1
 80100d2:	d102      	bne.n	80100da <_read_r+0x1e>
 80100d4:	682b      	ldr	r3, [r5, #0]
 80100d6:	b103      	cbz	r3, 80100da <_read_r+0x1e>
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	bd38      	pop	{r3, r4, r5, pc}
 80100dc:	20001198 	.word	0x20001198

080100e0 <floor>:
 80100e0:	ec51 0b10 	vmov	r0, r1, d0
 80100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80100ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80100f0:	2e13      	cmp	r6, #19
 80100f2:	ee10 5a10 	vmov	r5, s0
 80100f6:	ee10 8a10 	vmov	r8, s0
 80100fa:	460c      	mov	r4, r1
 80100fc:	dc32      	bgt.n	8010164 <floor+0x84>
 80100fe:	2e00      	cmp	r6, #0
 8010100:	da14      	bge.n	801012c <floor+0x4c>
 8010102:	a333      	add	r3, pc, #204	; (adr r3, 80101d0 <floor+0xf0>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	f7f0 f8c0 	bl	800028c <__adddf3>
 801010c:	2200      	movs	r2, #0
 801010e:	2300      	movs	r3, #0
 8010110:	f7f0 fd02 	bl	8000b18 <__aeabi_dcmpgt>
 8010114:	b138      	cbz	r0, 8010126 <floor+0x46>
 8010116:	2c00      	cmp	r4, #0
 8010118:	da57      	bge.n	80101ca <floor+0xea>
 801011a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801011e:	431d      	orrs	r5, r3
 8010120:	d001      	beq.n	8010126 <floor+0x46>
 8010122:	4c2d      	ldr	r4, [pc, #180]	; (80101d8 <floor+0xf8>)
 8010124:	2500      	movs	r5, #0
 8010126:	4621      	mov	r1, r4
 8010128:	4628      	mov	r0, r5
 801012a:	e025      	b.n	8010178 <floor+0x98>
 801012c:	4f2b      	ldr	r7, [pc, #172]	; (80101dc <floor+0xfc>)
 801012e:	4137      	asrs	r7, r6
 8010130:	ea01 0307 	and.w	r3, r1, r7
 8010134:	4303      	orrs	r3, r0
 8010136:	d01f      	beq.n	8010178 <floor+0x98>
 8010138:	a325      	add	r3, pc, #148	; (adr r3, 80101d0 <floor+0xf0>)
 801013a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013e:	f7f0 f8a5 	bl	800028c <__adddf3>
 8010142:	2200      	movs	r2, #0
 8010144:	2300      	movs	r3, #0
 8010146:	f7f0 fce7 	bl	8000b18 <__aeabi_dcmpgt>
 801014a:	2800      	cmp	r0, #0
 801014c:	d0eb      	beq.n	8010126 <floor+0x46>
 801014e:	2c00      	cmp	r4, #0
 8010150:	bfbe      	ittt	lt
 8010152:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010156:	fa43 f606 	asrlt.w	r6, r3, r6
 801015a:	19a4      	addlt	r4, r4, r6
 801015c:	ea24 0407 	bic.w	r4, r4, r7
 8010160:	2500      	movs	r5, #0
 8010162:	e7e0      	b.n	8010126 <floor+0x46>
 8010164:	2e33      	cmp	r6, #51	; 0x33
 8010166:	dd0b      	ble.n	8010180 <floor+0xa0>
 8010168:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801016c:	d104      	bne.n	8010178 <floor+0x98>
 801016e:	ee10 2a10 	vmov	r2, s0
 8010172:	460b      	mov	r3, r1
 8010174:	f7f0 f88a 	bl	800028c <__adddf3>
 8010178:	ec41 0b10 	vmov	d0, r0, r1
 801017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010180:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010184:	f04f 33ff 	mov.w	r3, #4294967295
 8010188:	fa23 f707 	lsr.w	r7, r3, r7
 801018c:	4207      	tst	r7, r0
 801018e:	d0f3      	beq.n	8010178 <floor+0x98>
 8010190:	a30f      	add	r3, pc, #60	; (adr r3, 80101d0 <floor+0xf0>)
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	f7f0 f879 	bl	800028c <__adddf3>
 801019a:	2200      	movs	r2, #0
 801019c:	2300      	movs	r3, #0
 801019e:	f7f0 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d0bf      	beq.n	8010126 <floor+0x46>
 80101a6:	2c00      	cmp	r4, #0
 80101a8:	da02      	bge.n	80101b0 <floor+0xd0>
 80101aa:	2e14      	cmp	r6, #20
 80101ac:	d103      	bne.n	80101b6 <floor+0xd6>
 80101ae:	3401      	adds	r4, #1
 80101b0:	ea25 0507 	bic.w	r5, r5, r7
 80101b4:	e7b7      	b.n	8010126 <floor+0x46>
 80101b6:	2301      	movs	r3, #1
 80101b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80101bc:	fa03 f606 	lsl.w	r6, r3, r6
 80101c0:	4435      	add	r5, r6
 80101c2:	4545      	cmp	r5, r8
 80101c4:	bf38      	it	cc
 80101c6:	18e4      	addcc	r4, r4, r3
 80101c8:	e7f2      	b.n	80101b0 <floor+0xd0>
 80101ca:	2500      	movs	r5, #0
 80101cc:	462c      	mov	r4, r5
 80101ce:	e7aa      	b.n	8010126 <floor+0x46>
 80101d0:	8800759c 	.word	0x8800759c
 80101d4:	7e37e43c 	.word	0x7e37e43c
 80101d8:	bff00000 	.word	0xbff00000
 80101dc:	000fffff 	.word	0x000fffff

080101e0 <pow>:
 80101e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e2:	ed2d 8b02 	vpush	{d8}
 80101e6:	eeb0 8a40 	vmov.f32	s16, s0
 80101ea:	eef0 8a60 	vmov.f32	s17, s1
 80101ee:	ec55 4b11 	vmov	r4, r5, d1
 80101f2:	f000 f865 	bl	80102c0 <__ieee754_pow>
 80101f6:	4622      	mov	r2, r4
 80101f8:	462b      	mov	r3, r5
 80101fa:	4620      	mov	r0, r4
 80101fc:	4629      	mov	r1, r5
 80101fe:	ec57 6b10 	vmov	r6, r7, d0
 8010202:	f7f0 fc93 	bl	8000b2c <__aeabi_dcmpun>
 8010206:	2800      	cmp	r0, #0
 8010208:	d13b      	bne.n	8010282 <pow+0xa2>
 801020a:	ec51 0b18 	vmov	r0, r1, d8
 801020e:	2200      	movs	r2, #0
 8010210:	2300      	movs	r3, #0
 8010212:	f7f0 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 8010216:	b1b8      	cbz	r0, 8010248 <pow+0x68>
 8010218:	2200      	movs	r2, #0
 801021a:	2300      	movs	r3, #0
 801021c:	4620      	mov	r0, r4
 801021e:	4629      	mov	r1, r5
 8010220:	f7f0 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 8010224:	2800      	cmp	r0, #0
 8010226:	d146      	bne.n	80102b6 <pow+0xd6>
 8010228:	ec45 4b10 	vmov	d0, r4, r5
 801022c:	f000 fe61 	bl	8010ef2 <finite>
 8010230:	b338      	cbz	r0, 8010282 <pow+0xa2>
 8010232:	2200      	movs	r2, #0
 8010234:	2300      	movs	r3, #0
 8010236:	4620      	mov	r0, r4
 8010238:	4629      	mov	r1, r5
 801023a:	f7f0 fc4f 	bl	8000adc <__aeabi_dcmplt>
 801023e:	b300      	cbz	r0, 8010282 <pow+0xa2>
 8010240:	f7fb fa5c 	bl	800b6fc <__errno>
 8010244:	2322      	movs	r3, #34	; 0x22
 8010246:	e01b      	b.n	8010280 <pow+0xa0>
 8010248:	ec47 6b10 	vmov	d0, r6, r7
 801024c:	f000 fe51 	bl	8010ef2 <finite>
 8010250:	b9e0      	cbnz	r0, 801028c <pow+0xac>
 8010252:	eeb0 0a48 	vmov.f32	s0, s16
 8010256:	eef0 0a68 	vmov.f32	s1, s17
 801025a:	f000 fe4a 	bl	8010ef2 <finite>
 801025e:	b1a8      	cbz	r0, 801028c <pow+0xac>
 8010260:	ec45 4b10 	vmov	d0, r4, r5
 8010264:	f000 fe45 	bl	8010ef2 <finite>
 8010268:	b180      	cbz	r0, 801028c <pow+0xac>
 801026a:	4632      	mov	r2, r6
 801026c:	463b      	mov	r3, r7
 801026e:	4630      	mov	r0, r6
 8010270:	4639      	mov	r1, r7
 8010272:	f7f0 fc5b 	bl	8000b2c <__aeabi_dcmpun>
 8010276:	2800      	cmp	r0, #0
 8010278:	d0e2      	beq.n	8010240 <pow+0x60>
 801027a:	f7fb fa3f 	bl	800b6fc <__errno>
 801027e:	2321      	movs	r3, #33	; 0x21
 8010280:	6003      	str	r3, [r0, #0]
 8010282:	ecbd 8b02 	vpop	{d8}
 8010286:	ec47 6b10 	vmov	d0, r6, r7
 801028a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801028c:	2200      	movs	r2, #0
 801028e:	2300      	movs	r3, #0
 8010290:	4630      	mov	r0, r6
 8010292:	4639      	mov	r1, r7
 8010294:	f7f0 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8010298:	2800      	cmp	r0, #0
 801029a:	d0f2      	beq.n	8010282 <pow+0xa2>
 801029c:	eeb0 0a48 	vmov.f32	s0, s16
 80102a0:	eef0 0a68 	vmov.f32	s1, s17
 80102a4:	f000 fe25 	bl	8010ef2 <finite>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d0ea      	beq.n	8010282 <pow+0xa2>
 80102ac:	ec45 4b10 	vmov	d0, r4, r5
 80102b0:	f000 fe1f 	bl	8010ef2 <finite>
 80102b4:	e7c3      	b.n	801023e <pow+0x5e>
 80102b6:	4f01      	ldr	r7, [pc, #4]	; (80102bc <pow+0xdc>)
 80102b8:	2600      	movs	r6, #0
 80102ba:	e7e2      	b.n	8010282 <pow+0xa2>
 80102bc:	3ff00000 	.word	0x3ff00000

080102c0 <__ieee754_pow>:
 80102c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c4:	ed2d 8b06 	vpush	{d8-d10}
 80102c8:	b089      	sub	sp, #36	; 0x24
 80102ca:	ed8d 1b00 	vstr	d1, [sp]
 80102ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 80102d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80102d6:	ea58 0102 	orrs.w	r1, r8, r2
 80102da:	ec57 6b10 	vmov	r6, r7, d0
 80102de:	d115      	bne.n	801030c <__ieee754_pow+0x4c>
 80102e0:	19b3      	adds	r3, r6, r6
 80102e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80102e6:	4152      	adcs	r2, r2
 80102e8:	4299      	cmp	r1, r3
 80102ea:	4b89      	ldr	r3, [pc, #548]	; (8010510 <__ieee754_pow+0x250>)
 80102ec:	4193      	sbcs	r3, r2
 80102ee:	f080 84d2 	bcs.w	8010c96 <__ieee754_pow+0x9d6>
 80102f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102f6:	4630      	mov	r0, r6
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7ef ffc7 	bl	800028c <__adddf3>
 80102fe:	ec41 0b10 	vmov	d0, r0, r1
 8010302:	b009      	add	sp, #36	; 0x24
 8010304:	ecbd 8b06 	vpop	{d8-d10}
 8010308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801030c:	4b81      	ldr	r3, [pc, #516]	; (8010514 <__ieee754_pow+0x254>)
 801030e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010312:	429c      	cmp	r4, r3
 8010314:	ee10 aa10 	vmov	sl, s0
 8010318:	463d      	mov	r5, r7
 801031a:	dc06      	bgt.n	801032a <__ieee754_pow+0x6a>
 801031c:	d101      	bne.n	8010322 <__ieee754_pow+0x62>
 801031e:	2e00      	cmp	r6, #0
 8010320:	d1e7      	bne.n	80102f2 <__ieee754_pow+0x32>
 8010322:	4598      	cmp	r8, r3
 8010324:	dc01      	bgt.n	801032a <__ieee754_pow+0x6a>
 8010326:	d10f      	bne.n	8010348 <__ieee754_pow+0x88>
 8010328:	b172      	cbz	r2, 8010348 <__ieee754_pow+0x88>
 801032a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801032e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010332:	ea55 050a 	orrs.w	r5, r5, sl
 8010336:	d1dc      	bne.n	80102f2 <__ieee754_pow+0x32>
 8010338:	e9dd 3200 	ldrd	r3, r2, [sp]
 801033c:	18db      	adds	r3, r3, r3
 801033e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010342:	4152      	adcs	r2, r2
 8010344:	429d      	cmp	r5, r3
 8010346:	e7d0      	b.n	80102ea <__ieee754_pow+0x2a>
 8010348:	2d00      	cmp	r5, #0
 801034a:	da3b      	bge.n	80103c4 <__ieee754_pow+0x104>
 801034c:	4b72      	ldr	r3, [pc, #456]	; (8010518 <__ieee754_pow+0x258>)
 801034e:	4598      	cmp	r8, r3
 8010350:	dc51      	bgt.n	80103f6 <__ieee754_pow+0x136>
 8010352:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010356:	4598      	cmp	r8, r3
 8010358:	f340 84ac 	ble.w	8010cb4 <__ieee754_pow+0x9f4>
 801035c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010360:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010364:	2b14      	cmp	r3, #20
 8010366:	dd0f      	ble.n	8010388 <__ieee754_pow+0xc8>
 8010368:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801036c:	fa22 f103 	lsr.w	r1, r2, r3
 8010370:	fa01 f303 	lsl.w	r3, r1, r3
 8010374:	4293      	cmp	r3, r2
 8010376:	f040 849d 	bne.w	8010cb4 <__ieee754_pow+0x9f4>
 801037a:	f001 0101 	and.w	r1, r1, #1
 801037e:	f1c1 0302 	rsb	r3, r1, #2
 8010382:	9304      	str	r3, [sp, #16]
 8010384:	b182      	cbz	r2, 80103a8 <__ieee754_pow+0xe8>
 8010386:	e05f      	b.n	8010448 <__ieee754_pow+0x188>
 8010388:	2a00      	cmp	r2, #0
 801038a:	d15b      	bne.n	8010444 <__ieee754_pow+0x184>
 801038c:	f1c3 0314 	rsb	r3, r3, #20
 8010390:	fa48 f103 	asr.w	r1, r8, r3
 8010394:	fa01 f303 	lsl.w	r3, r1, r3
 8010398:	4543      	cmp	r3, r8
 801039a:	f040 8488 	bne.w	8010cae <__ieee754_pow+0x9ee>
 801039e:	f001 0101 	and.w	r1, r1, #1
 80103a2:	f1c1 0302 	rsb	r3, r1, #2
 80103a6:	9304      	str	r3, [sp, #16]
 80103a8:	4b5c      	ldr	r3, [pc, #368]	; (801051c <__ieee754_pow+0x25c>)
 80103aa:	4598      	cmp	r8, r3
 80103ac:	d132      	bne.n	8010414 <__ieee754_pow+0x154>
 80103ae:	f1b9 0f00 	cmp.w	r9, #0
 80103b2:	f280 8478 	bge.w	8010ca6 <__ieee754_pow+0x9e6>
 80103b6:	4959      	ldr	r1, [pc, #356]	; (801051c <__ieee754_pow+0x25c>)
 80103b8:	4632      	mov	r2, r6
 80103ba:	463b      	mov	r3, r7
 80103bc:	2000      	movs	r0, #0
 80103be:	f7f0 fa45 	bl	800084c <__aeabi_ddiv>
 80103c2:	e79c      	b.n	80102fe <__ieee754_pow+0x3e>
 80103c4:	2300      	movs	r3, #0
 80103c6:	9304      	str	r3, [sp, #16]
 80103c8:	2a00      	cmp	r2, #0
 80103ca:	d13d      	bne.n	8010448 <__ieee754_pow+0x188>
 80103cc:	4b51      	ldr	r3, [pc, #324]	; (8010514 <__ieee754_pow+0x254>)
 80103ce:	4598      	cmp	r8, r3
 80103d0:	d1ea      	bne.n	80103a8 <__ieee754_pow+0xe8>
 80103d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80103d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80103da:	ea53 030a 	orrs.w	r3, r3, sl
 80103de:	f000 845a 	beq.w	8010c96 <__ieee754_pow+0x9d6>
 80103e2:	4b4f      	ldr	r3, [pc, #316]	; (8010520 <__ieee754_pow+0x260>)
 80103e4:	429c      	cmp	r4, r3
 80103e6:	dd08      	ble.n	80103fa <__ieee754_pow+0x13a>
 80103e8:	f1b9 0f00 	cmp.w	r9, #0
 80103ec:	f2c0 8457 	blt.w	8010c9e <__ieee754_pow+0x9de>
 80103f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103f4:	e783      	b.n	80102fe <__ieee754_pow+0x3e>
 80103f6:	2302      	movs	r3, #2
 80103f8:	e7e5      	b.n	80103c6 <__ieee754_pow+0x106>
 80103fa:	f1b9 0f00 	cmp.w	r9, #0
 80103fe:	f04f 0000 	mov.w	r0, #0
 8010402:	f04f 0100 	mov.w	r1, #0
 8010406:	f6bf af7a 	bge.w	80102fe <__ieee754_pow+0x3e>
 801040a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801040e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010412:	e774      	b.n	80102fe <__ieee754_pow+0x3e>
 8010414:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010418:	d106      	bne.n	8010428 <__ieee754_pow+0x168>
 801041a:	4632      	mov	r2, r6
 801041c:	463b      	mov	r3, r7
 801041e:	4630      	mov	r0, r6
 8010420:	4639      	mov	r1, r7
 8010422:	f7f0 f8e9 	bl	80005f8 <__aeabi_dmul>
 8010426:	e76a      	b.n	80102fe <__ieee754_pow+0x3e>
 8010428:	4b3e      	ldr	r3, [pc, #248]	; (8010524 <__ieee754_pow+0x264>)
 801042a:	4599      	cmp	r9, r3
 801042c:	d10c      	bne.n	8010448 <__ieee754_pow+0x188>
 801042e:	2d00      	cmp	r5, #0
 8010430:	db0a      	blt.n	8010448 <__ieee754_pow+0x188>
 8010432:	ec47 6b10 	vmov	d0, r6, r7
 8010436:	b009      	add	sp, #36	; 0x24
 8010438:	ecbd 8b06 	vpop	{d8-d10}
 801043c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010440:	f000 bc6c 	b.w	8010d1c <__ieee754_sqrt>
 8010444:	2300      	movs	r3, #0
 8010446:	9304      	str	r3, [sp, #16]
 8010448:	ec47 6b10 	vmov	d0, r6, r7
 801044c:	f000 fd48 	bl	8010ee0 <fabs>
 8010450:	ec51 0b10 	vmov	r0, r1, d0
 8010454:	f1ba 0f00 	cmp.w	sl, #0
 8010458:	d129      	bne.n	80104ae <__ieee754_pow+0x1ee>
 801045a:	b124      	cbz	r4, 8010466 <__ieee754_pow+0x1a6>
 801045c:	4b2f      	ldr	r3, [pc, #188]	; (801051c <__ieee754_pow+0x25c>)
 801045e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010462:	429a      	cmp	r2, r3
 8010464:	d123      	bne.n	80104ae <__ieee754_pow+0x1ee>
 8010466:	f1b9 0f00 	cmp.w	r9, #0
 801046a:	da05      	bge.n	8010478 <__ieee754_pow+0x1b8>
 801046c:	4602      	mov	r2, r0
 801046e:	460b      	mov	r3, r1
 8010470:	2000      	movs	r0, #0
 8010472:	492a      	ldr	r1, [pc, #168]	; (801051c <__ieee754_pow+0x25c>)
 8010474:	f7f0 f9ea 	bl	800084c <__aeabi_ddiv>
 8010478:	2d00      	cmp	r5, #0
 801047a:	f6bf af40 	bge.w	80102fe <__ieee754_pow+0x3e>
 801047e:	9b04      	ldr	r3, [sp, #16]
 8010480:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010484:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010488:	4323      	orrs	r3, r4
 801048a:	d108      	bne.n	801049e <__ieee754_pow+0x1de>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	4610      	mov	r0, r2
 8010492:	4619      	mov	r1, r3
 8010494:	f7ef fef8 	bl	8000288 <__aeabi_dsub>
 8010498:	4602      	mov	r2, r0
 801049a:	460b      	mov	r3, r1
 801049c:	e78f      	b.n	80103be <__ieee754_pow+0xfe>
 801049e:	9b04      	ldr	r3, [sp, #16]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	f47f af2c 	bne.w	80102fe <__ieee754_pow+0x3e>
 80104a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104aa:	4619      	mov	r1, r3
 80104ac:	e727      	b.n	80102fe <__ieee754_pow+0x3e>
 80104ae:	0feb      	lsrs	r3, r5, #31
 80104b0:	3b01      	subs	r3, #1
 80104b2:	9306      	str	r3, [sp, #24]
 80104b4:	9a06      	ldr	r2, [sp, #24]
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	4313      	orrs	r3, r2
 80104ba:	d102      	bne.n	80104c2 <__ieee754_pow+0x202>
 80104bc:	4632      	mov	r2, r6
 80104be:	463b      	mov	r3, r7
 80104c0:	e7e6      	b.n	8010490 <__ieee754_pow+0x1d0>
 80104c2:	4b19      	ldr	r3, [pc, #100]	; (8010528 <__ieee754_pow+0x268>)
 80104c4:	4598      	cmp	r8, r3
 80104c6:	f340 80fb 	ble.w	80106c0 <__ieee754_pow+0x400>
 80104ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80104ce:	4598      	cmp	r8, r3
 80104d0:	4b13      	ldr	r3, [pc, #76]	; (8010520 <__ieee754_pow+0x260>)
 80104d2:	dd0c      	ble.n	80104ee <__ieee754_pow+0x22e>
 80104d4:	429c      	cmp	r4, r3
 80104d6:	dc0f      	bgt.n	80104f8 <__ieee754_pow+0x238>
 80104d8:	f1b9 0f00 	cmp.w	r9, #0
 80104dc:	da0f      	bge.n	80104fe <__ieee754_pow+0x23e>
 80104de:	2000      	movs	r0, #0
 80104e0:	b009      	add	sp, #36	; 0x24
 80104e2:	ecbd 8b06 	vpop	{d8-d10}
 80104e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ea:	f000 bcf0 	b.w	8010ece <__math_oflow>
 80104ee:	429c      	cmp	r4, r3
 80104f0:	dbf2      	blt.n	80104d8 <__ieee754_pow+0x218>
 80104f2:	4b0a      	ldr	r3, [pc, #40]	; (801051c <__ieee754_pow+0x25c>)
 80104f4:	429c      	cmp	r4, r3
 80104f6:	dd19      	ble.n	801052c <__ieee754_pow+0x26c>
 80104f8:	f1b9 0f00 	cmp.w	r9, #0
 80104fc:	dcef      	bgt.n	80104de <__ieee754_pow+0x21e>
 80104fe:	2000      	movs	r0, #0
 8010500:	b009      	add	sp, #36	; 0x24
 8010502:	ecbd 8b06 	vpop	{d8-d10}
 8010506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050a:	f000 bcd7 	b.w	8010ebc <__math_uflow>
 801050e:	bf00      	nop
 8010510:	fff00000 	.word	0xfff00000
 8010514:	7ff00000 	.word	0x7ff00000
 8010518:	433fffff 	.word	0x433fffff
 801051c:	3ff00000 	.word	0x3ff00000
 8010520:	3fefffff 	.word	0x3fefffff
 8010524:	3fe00000 	.word	0x3fe00000
 8010528:	41e00000 	.word	0x41e00000
 801052c:	4b60      	ldr	r3, [pc, #384]	; (80106b0 <__ieee754_pow+0x3f0>)
 801052e:	2200      	movs	r2, #0
 8010530:	f7ef feaa 	bl	8000288 <__aeabi_dsub>
 8010534:	a354      	add	r3, pc, #336	; (adr r3, 8010688 <__ieee754_pow+0x3c8>)
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	4604      	mov	r4, r0
 801053c:	460d      	mov	r5, r1
 801053e:	f7f0 f85b 	bl	80005f8 <__aeabi_dmul>
 8010542:	a353      	add	r3, pc, #332	; (adr r3, 8010690 <__ieee754_pow+0x3d0>)
 8010544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010548:	4606      	mov	r6, r0
 801054a:	460f      	mov	r7, r1
 801054c:	4620      	mov	r0, r4
 801054e:	4629      	mov	r1, r5
 8010550:	f7f0 f852 	bl	80005f8 <__aeabi_dmul>
 8010554:	4b57      	ldr	r3, [pc, #348]	; (80106b4 <__ieee754_pow+0x3f4>)
 8010556:	4682      	mov	sl, r0
 8010558:	468b      	mov	fp, r1
 801055a:	2200      	movs	r2, #0
 801055c:	4620      	mov	r0, r4
 801055e:	4629      	mov	r1, r5
 8010560:	f7f0 f84a 	bl	80005f8 <__aeabi_dmul>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	a14b      	add	r1, pc, #300	; (adr r1, 8010698 <__ieee754_pow+0x3d8>)
 801056a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801056e:	f7ef fe8b 	bl	8000288 <__aeabi_dsub>
 8010572:	4622      	mov	r2, r4
 8010574:	462b      	mov	r3, r5
 8010576:	f7f0 f83f 	bl	80005f8 <__aeabi_dmul>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	2000      	movs	r0, #0
 8010580:	494d      	ldr	r1, [pc, #308]	; (80106b8 <__ieee754_pow+0x3f8>)
 8010582:	f7ef fe81 	bl	8000288 <__aeabi_dsub>
 8010586:	4622      	mov	r2, r4
 8010588:	4680      	mov	r8, r0
 801058a:	4689      	mov	r9, r1
 801058c:	462b      	mov	r3, r5
 801058e:	4620      	mov	r0, r4
 8010590:	4629      	mov	r1, r5
 8010592:	f7f0 f831 	bl	80005f8 <__aeabi_dmul>
 8010596:	4602      	mov	r2, r0
 8010598:	460b      	mov	r3, r1
 801059a:	4640      	mov	r0, r8
 801059c:	4649      	mov	r1, r9
 801059e:	f7f0 f82b 	bl	80005f8 <__aeabi_dmul>
 80105a2:	a33f      	add	r3, pc, #252	; (adr r3, 80106a0 <__ieee754_pow+0x3e0>)
 80105a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a8:	f7f0 f826 	bl	80005f8 <__aeabi_dmul>
 80105ac:	4602      	mov	r2, r0
 80105ae:	460b      	mov	r3, r1
 80105b0:	4650      	mov	r0, sl
 80105b2:	4659      	mov	r1, fp
 80105b4:	f7ef fe68 	bl	8000288 <__aeabi_dsub>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	4680      	mov	r8, r0
 80105be:	4689      	mov	r9, r1
 80105c0:	4630      	mov	r0, r6
 80105c2:	4639      	mov	r1, r7
 80105c4:	f7ef fe62 	bl	800028c <__adddf3>
 80105c8:	2000      	movs	r0, #0
 80105ca:	4632      	mov	r2, r6
 80105cc:	463b      	mov	r3, r7
 80105ce:	4604      	mov	r4, r0
 80105d0:	460d      	mov	r5, r1
 80105d2:	f7ef fe59 	bl	8000288 <__aeabi_dsub>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	4640      	mov	r0, r8
 80105dc:	4649      	mov	r1, r9
 80105de:	f7ef fe53 	bl	8000288 <__aeabi_dsub>
 80105e2:	9b04      	ldr	r3, [sp, #16]
 80105e4:	9a06      	ldr	r2, [sp, #24]
 80105e6:	3b01      	subs	r3, #1
 80105e8:	4313      	orrs	r3, r2
 80105ea:	4682      	mov	sl, r0
 80105ec:	468b      	mov	fp, r1
 80105ee:	f040 81e7 	bne.w	80109c0 <__ieee754_pow+0x700>
 80105f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80106a8 <__ieee754_pow+0x3e8>
 80105f6:	eeb0 8a47 	vmov.f32	s16, s14
 80105fa:	eef0 8a67 	vmov.f32	s17, s15
 80105fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010602:	2600      	movs	r6, #0
 8010604:	4632      	mov	r2, r6
 8010606:	463b      	mov	r3, r7
 8010608:	e9dd 0100 	ldrd	r0, r1, [sp]
 801060c:	f7ef fe3c 	bl	8000288 <__aeabi_dsub>
 8010610:	4622      	mov	r2, r4
 8010612:	462b      	mov	r3, r5
 8010614:	f7ef fff0 	bl	80005f8 <__aeabi_dmul>
 8010618:	e9dd 2300 	ldrd	r2, r3, [sp]
 801061c:	4680      	mov	r8, r0
 801061e:	4689      	mov	r9, r1
 8010620:	4650      	mov	r0, sl
 8010622:	4659      	mov	r1, fp
 8010624:	f7ef ffe8 	bl	80005f8 <__aeabi_dmul>
 8010628:	4602      	mov	r2, r0
 801062a:	460b      	mov	r3, r1
 801062c:	4640      	mov	r0, r8
 801062e:	4649      	mov	r1, r9
 8010630:	f7ef fe2c 	bl	800028c <__adddf3>
 8010634:	4632      	mov	r2, r6
 8010636:	463b      	mov	r3, r7
 8010638:	4680      	mov	r8, r0
 801063a:	4689      	mov	r9, r1
 801063c:	4620      	mov	r0, r4
 801063e:	4629      	mov	r1, r5
 8010640:	f7ef ffda 	bl	80005f8 <__aeabi_dmul>
 8010644:	460b      	mov	r3, r1
 8010646:	4604      	mov	r4, r0
 8010648:	460d      	mov	r5, r1
 801064a:	4602      	mov	r2, r0
 801064c:	4649      	mov	r1, r9
 801064e:	4640      	mov	r0, r8
 8010650:	f7ef fe1c 	bl	800028c <__adddf3>
 8010654:	4b19      	ldr	r3, [pc, #100]	; (80106bc <__ieee754_pow+0x3fc>)
 8010656:	4299      	cmp	r1, r3
 8010658:	ec45 4b19 	vmov	d9, r4, r5
 801065c:	4606      	mov	r6, r0
 801065e:	460f      	mov	r7, r1
 8010660:	468b      	mov	fp, r1
 8010662:	f340 82f1 	ble.w	8010c48 <__ieee754_pow+0x988>
 8010666:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801066a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801066e:	4303      	orrs	r3, r0
 8010670:	f000 81e4 	beq.w	8010a3c <__ieee754_pow+0x77c>
 8010674:	ec51 0b18 	vmov	r0, r1, d8
 8010678:	2200      	movs	r2, #0
 801067a:	2300      	movs	r3, #0
 801067c:	f7f0 fa2e 	bl	8000adc <__aeabi_dcmplt>
 8010680:	3800      	subs	r0, #0
 8010682:	bf18      	it	ne
 8010684:	2001      	movne	r0, #1
 8010686:	e72b      	b.n	80104e0 <__ieee754_pow+0x220>
 8010688:	60000000 	.word	0x60000000
 801068c:	3ff71547 	.word	0x3ff71547
 8010690:	f85ddf44 	.word	0xf85ddf44
 8010694:	3e54ae0b 	.word	0x3e54ae0b
 8010698:	55555555 	.word	0x55555555
 801069c:	3fd55555 	.word	0x3fd55555
 80106a0:	652b82fe 	.word	0x652b82fe
 80106a4:	3ff71547 	.word	0x3ff71547
 80106a8:	00000000 	.word	0x00000000
 80106ac:	bff00000 	.word	0xbff00000
 80106b0:	3ff00000 	.word	0x3ff00000
 80106b4:	3fd00000 	.word	0x3fd00000
 80106b8:	3fe00000 	.word	0x3fe00000
 80106bc:	408fffff 	.word	0x408fffff
 80106c0:	4bd5      	ldr	r3, [pc, #852]	; (8010a18 <__ieee754_pow+0x758>)
 80106c2:	402b      	ands	r3, r5
 80106c4:	2200      	movs	r2, #0
 80106c6:	b92b      	cbnz	r3, 80106d4 <__ieee754_pow+0x414>
 80106c8:	4bd4      	ldr	r3, [pc, #848]	; (8010a1c <__ieee754_pow+0x75c>)
 80106ca:	f7ef ff95 	bl	80005f8 <__aeabi_dmul>
 80106ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80106d2:	460c      	mov	r4, r1
 80106d4:	1523      	asrs	r3, r4, #20
 80106d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80106da:	4413      	add	r3, r2
 80106dc:	9305      	str	r3, [sp, #20]
 80106de:	4bd0      	ldr	r3, [pc, #832]	; (8010a20 <__ieee754_pow+0x760>)
 80106e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80106e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80106e8:	429c      	cmp	r4, r3
 80106ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80106ee:	dd08      	ble.n	8010702 <__ieee754_pow+0x442>
 80106f0:	4bcc      	ldr	r3, [pc, #816]	; (8010a24 <__ieee754_pow+0x764>)
 80106f2:	429c      	cmp	r4, r3
 80106f4:	f340 8162 	ble.w	80109bc <__ieee754_pow+0x6fc>
 80106f8:	9b05      	ldr	r3, [sp, #20]
 80106fa:	3301      	adds	r3, #1
 80106fc:	9305      	str	r3, [sp, #20]
 80106fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010702:	2400      	movs	r4, #0
 8010704:	00e3      	lsls	r3, r4, #3
 8010706:	9307      	str	r3, [sp, #28]
 8010708:	4bc7      	ldr	r3, [pc, #796]	; (8010a28 <__ieee754_pow+0x768>)
 801070a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801070e:	ed93 7b00 	vldr	d7, [r3]
 8010712:	4629      	mov	r1, r5
 8010714:	ec53 2b17 	vmov	r2, r3, d7
 8010718:	eeb0 9a47 	vmov.f32	s18, s14
 801071c:	eef0 9a67 	vmov.f32	s19, s15
 8010720:	4682      	mov	sl, r0
 8010722:	f7ef fdb1 	bl	8000288 <__aeabi_dsub>
 8010726:	4652      	mov	r2, sl
 8010728:	4606      	mov	r6, r0
 801072a:	460f      	mov	r7, r1
 801072c:	462b      	mov	r3, r5
 801072e:	ec51 0b19 	vmov	r0, r1, d9
 8010732:	f7ef fdab 	bl	800028c <__adddf3>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	2000      	movs	r0, #0
 801073c:	49bb      	ldr	r1, [pc, #748]	; (8010a2c <__ieee754_pow+0x76c>)
 801073e:	f7f0 f885 	bl	800084c <__aeabi_ddiv>
 8010742:	ec41 0b1a 	vmov	d10, r0, r1
 8010746:	4602      	mov	r2, r0
 8010748:	460b      	mov	r3, r1
 801074a:	4630      	mov	r0, r6
 801074c:	4639      	mov	r1, r7
 801074e:	f7ef ff53 	bl	80005f8 <__aeabi_dmul>
 8010752:	2300      	movs	r3, #0
 8010754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010758:	9302      	str	r3, [sp, #8]
 801075a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801075e:	46ab      	mov	fp, r5
 8010760:	106d      	asrs	r5, r5, #1
 8010762:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010766:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801076a:	ec41 0b18 	vmov	d8, r0, r1
 801076e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010772:	2200      	movs	r2, #0
 8010774:	4640      	mov	r0, r8
 8010776:	4649      	mov	r1, r9
 8010778:	4614      	mov	r4, r2
 801077a:	461d      	mov	r5, r3
 801077c:	f7ef ff3c 	bl	80005f8 <__aeabi_dmul>
 8010780:	4602      	mov	r2, r0
 8010782:	460b      	mov	r3, r1
 8010784:	4630      	mov	r0, r6
 8010786:	4639      	mov	r1, r7
 8010788:	f7ef fd7e 	bl	8000288 <__aeabi_dsub>
 801078c:	ec53 2b19 	vmov	r2, r3, d9
 8010790:	4606      	mov	r6, r0
 8010792:	460f      	mov	r7, r1
 8010794:	4620      	mov	r0, r4
 8010796:	4629      	mov	r1, r5
 8010798:	f7ef fd76 	bl	8000288 <__aeabi_dsub>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	4650      	mov	r0, sl
 80107a2:	4659      	mov	r1, fp
 80107a4:	f7ef fd70 	bl	8000288 <__aeabi_dsub>
 80107a8:	4642      	mov	r2, r8
 80107aa:	464b      	mov	r3, r9
 80107ac:	f7ef ff24 	bl	80005f8 <__aeabi_dmul>
 80107b0:	4602      	mov	r2, r0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4630      	mov	r0, r6
 80107b6:	4639      	mov	r1, r7
 80107b8:	f7ef fd66 	bl	8000288 <__aeabi_dsub>
 80107bc:	ec53 2b1a 	vmov	r2, r3, d10
 80107c0:	f7ef ff1a 	bl	80005f8 <__aeabi_dmul>
 80107c4:	ec53 2b18 	vmov	r2, r3, d8
 80107c8:	ec41 0b19 	vmov	d9, r0, r1
 80107cc:	ec51 0b18 	vmov	r0, r1, d8
 80107d0:	f7ef ff12 	bl	80005f8 <__aeabi_dmul>
 80107d4:	a37c      	add	r3, pc, #496	; (adr r3, 80109c8 <__ieee754_pow+0x708>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	4604      	mov	r4, r0
 80107dc:	460d      	mov	r5, r1
 80107de:	f7ef ff0b 	bl	80005f8 <__aeabi_dmul>
 80107e2:	a37b      	add	r3, pc, #492	; (adr r3, 80109d0 <__ieee754_pow+0x710>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	f7ef fd50 	bl	800028c <__adddf3>
 80107ec:	4622      	mov	r2, r4
 80107ee:	462b      	mov	r3, r5
 80107f0:	f7ef ff02 	bl	80005f8 <__aeabi_dmul>
 80107f4:	a378      	add	r3, pc, #480	; (adr r3, 80109d8 <__ieee754_pow+0x718>)
 80107f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fa:	f7ef fd47 	bl	800028c <__adddf3>
 80107fe:	4622      	mov	r2, r4
 8010800:	462b      	mov	r3, r5
 8010802:	f7ef fef9 	bl	80005f8 <__aeabi_dmul>
 8010806:	a376      	add	r3, pc, #472	; (adr r3, 80109e0 <__ieee754_pow+0x720>)
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	f7ef fd3e 	bl	800028c <__adddf3>
 8010810:	4622      	mov	r2, r4
 8010812:	462b      	mov	r3, r5
 8010814:	f7ef fef0 	bl	80005f8 <__aeabi_dmul>
 8010818:	a373      	add	r3, pc, #460	; (adr r3, 80109e8 <__ieee754_pow+0x728>)
 801081a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801081e:	f7ef fd35 	bl	800028c <__adddf3>
 8010822:	4622      	mov	r2, r4
 8010824:	462b      	mov	r3, r5
 8010826:	f7ef fee7 	bl	80005f8 <__aeabi_dmul>
 801082a:	a371      	add	r3, pc, #452	; (adr r3, 80109f0 <__ieee754_pow+0x730>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	f7ef fd2c 	bl	800028c <__adddf3>
 8010834:	4622      	mov	r2, r4
 8010836:	4606      	mov	r6, r0
 8010838:	460f      	mov	r7, r1
 801083a:	462b      	mov	r3, r5
 801083c:	4620      	mov	r0, r4
 801083e:	4629      	mov	r1, r5
 8010840:	f7ef feda 	bl	80005f8 <__aeabi_dmul>
 8010844:	4602      	mov	r2, r0
 8010846:	460b      	mov	r3, r1
 8010848:	4630      	mov	r0, r6
 801084a:	4639      	mov	r1, r7
 801084c:	f7ef fed4 	bl	80005f8 <__aeabi_dmul>
 8010850:	4642      	mov	r2, r8
 8010852:	4604      	mov	r4, r0
 8010854:	460d      	mov	r5, r1
 8010856:	464b      	mov	r3, r9
 8010858:	ec51 0b18 	vmov	r0, r1, d8
 801085c:	f7ef fd16 	bl	800028c <__adddf3>
 8010860:	ec53 2b19 	vmov	r2, r3, d9
 8010864:	f7ef fec8 	bl	80005f8 <__aeabi_dmul>
 8010868:	4622      	mov	r2, r4
 801086a:	462b      	mov	r3, r5
 801086c:	f7ef fd0e 	bl	800028c <__adddf3>
 8010870:	4642      	mov	r2, r8
 8010872:	4682      	mov	sl, r0
 8010874:	468b      	mov	fp, r1
 8010876:	464b      	mov	r3, r9
 8010878:	4640      	mov	r0, r8
 801087a:	4649      	mov	r1, r9
 801087c:	f7ef febc 	bl	80005f8 <__aeabi_dmul>
 8010880:	4b6b      	ldr	r3, [pc, #428]	; (8010a30 <__ieee754_pow+0x770>)
 8010882:	2200      	movs	r2, #0
 8010884:	4606      	mov	r6, r0
 8010886:	460f      	mov	r7, r1
 8010888:	f7ef fd00 	bl	800028c <__adddf3>
 801088c:	4652      	mov	r2, sl
 801088e:	465b      	mov	r3, fp
 8010890:	f7ef fcfc 	bl	800028c <__adddf3>
 8010894:	2000      	movs	r0, #0
 8010896:	4604      	mov	r4, r0
 8010898:	460d      	mov	r5, r1
 801089a:	4602      	mov	r2, r0
 801089c:	460b      	mov	r3, r1
 801089e:	4640      	mov	r0, r8
 80108a0:	4649      	mov	r1, r9
 80108a2:	f7ef fea9 	bl	80005f8 <__aeabi_dmul>
 80108a6:	4b62      	ldr	r3, [pc, #392]	; (8010a30 <__ieee754_pow+0x770>)
 80108a8:	4680      	mov	r8, r0
 80108aa:	4689      	mov	r9, r1
 80108ac:	2200      	movs	r2, #0
 80108ae:	4620      	mov	r0, r4
 80108b0:	4629      	mov	r1, r5
 80108b2:	f7ef fce9 	bl	8000288 <__aeabi_dsub>
 80108b6:	4632      	mov	r2, r6
 80108b8:	463b      	mov	r3, r7
 80108ba:	f7ef fce5 	bl	8000288 <__aeabi_dsub>
 80108be:	4602      	mov	r2, r0
 80108c0:	460b      	mov	r3, r1
 80108c2:	4650      	mov	r0, sl
 80108c4:	4659      	mov	r1, fp
 80108c6:	f7ef fcdf 	bl	8000288 <__aeabi_dsub>
 80108ca:	ec53 2b18 	vmov	r2, r3, d8
 80108ce:	f7ef fe93 	bl	80005f8 <__aeabi_dmul>
 80108d2:	4622      	mov	r2, r4
 80108d4:	4606      	mov	r6, r0
 80108d6:	460f      	mov	r7, r1
 80108d8:	462b      	mov	r3, r5
 80108da:	ec51 0b19 	vmov	r0, r1, d9
 80108de:	f7ef fe8b 	bl	80005f8 <__aeabi_dmul>
 80108e2:	4602      	mov	r2, r0
 80108e4:	460b      	mov	r3, r1
 80108e6:	4630      	mov	r0, r6
 80108e8:	4639      	mov	r1, r7
 80108ea:	f7ef fccf 	bl	800028c <__adddf3>
 80108ee:	4606      	mov	r6, r0
 80108f0:	460f      	mov	r7, r1
 80108f2:	4602      	mov	r2, r0
 80108f4:	460b      	mov	r3, r1
 80108f6:	4640      	mov	r0, r8
 80108f8:	4649      	mov	r1, r9
 80108fa:	f7ef fcc7 	bl	800028c <__adddf3>
 80108fe:	a33e      	add	r3, pc, #248	; (adr r3, 80109f8 <__ieee754_pow+0x738>)
 8010900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010904:	2000      	movs	r0, #0
 8010906:	4604      	mov	r4, r0
 8010908:	460d      	mov	r5, r1
 801090a:	f7ef fe75 	bl	80005f8 <__aeabi_dmul>
 801090e:	4642      	mov	r2, r8
 8010910:	ec41 0b18 	vmov	d8, r0, r1
 8010914:	464b      	mov	r3, r9
 8010916:	4620      	mov	r0, r4
 8010918:	4629      	mov	r1, r5
 801091a:	f7ef fcb5 	bl	8000288 <__aeabi_dsub>
 801091e:	4602      	mov	r2, r0
 8010920:	460b      	mov	r3, r1
 8010922:	4630      	mov	r0, r6
 8010924:	4639      	mov	r1, r7
 8010926:	f7ef fcaf 	bl	8000288 <__aeabi_dsub>
 801092a:	a335      	add	r3, pc, #212	; (adr r3, 8010a00 <__ieee754_pow+0x740>)
 801092c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010930:	f7ef fe62 	bl	80005f8 <__aeabi_dmul>
 8010934:	a334      	add	r3, pc, #208	; (adr r3, 8010a08 <__ieee754_pow+0x748>)
 8010936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093a:	4606      	mov	r6, r0
 801093c:	460f      	mov	r7, r1
 801093e:	4620      	mov	r0, r4
 8010940:	4629      	mov	r1, r5
 8010942:	f7ef fe59 	bl	80005f8 <__aeabi_dmul>
 8010946:	4602      	mov	r2, r0
 8010948:	460b      	mov	r3, r1
 801094a:	4630      	mov	r0, r6
 801094c:	4639      	mov	r1, r7
 801094e:	f7ef fc9d 	bl	800028c <__adddf3>
 8010952:	9a07      	ldr	r2, [sp, #28]
 8010954:	4b37      	ldr	r3, [pc, #220]	; (8010a34 <__ieee754_pow+0x774>)
 8010956:	4413      	add	r3, r2
 8010958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095c:	f7ef fc96 	bl	800028c <__adddf3>
 8010960:	4682      	mov	sl, r0
 8010962:	9805      	ldr	r0, [sp, #20]
 8010964:	468b      	mov	fp, r1
 8010966:	f7ef fddd 	bl	8000524 <__aeabi_i2d>
 801096a:	9a07      	ldr	r2, [sp, #28]
 801096c:	4b32      	ldr	r3, [pc, #200]	; (8010a38 <__ieee754_pow+0x778>)
 801096e:	4413      	add	r3, r2
 8010970:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010974:	4606      	mov	r6, r0
 8010976:	460f      	mov	r7, r1
 8010978:	4652      	mov	r2, sl
 801097a:	465b      	mov	r3, fp
 801097c:	ec51 0b18 	vmov	r0, r1, d8
 8010980:	f7ef fc84 	bl	800028c <__adddf3>
 8010984:	4642      	mov	r2, r8
 8010986:	464b      	mov	r3, r9
 8010988:	f7ef fc80 	bl	800028c <__adddf3>
 801098c:	4632      	mov	r2, r6
 801098e:	463b      	mov	r3, r7
 8010990:	f7ef fc7c 	bl	800028c <__adddf3>
 8010994:	2000      	movs	r0, #0
 8010996:	4632      	mov	r2, r6
 8010998:	463b      	mov	r3, r7
 801099a:	4604      	mov	r4, r0
 801099c:	460d      	mov	r5, r1
 801099e:	f7ef fc73 	bl	8000288 <__aeabi_dsub>
 80109a2:	4642      	mov	r2, r8
 80109a4:	464b      	mov	r3, r9
 80109a6:	f7ef fc6f 	bl	8000288 <__aeabi_dsub>
 80109aa:	ec53 2b18 	vmov	r2, r3, d8
 80109ae:	f7ef fc6b 	bl	8000288 <__aeabi_dsub>
 80109b2:	4602      	mov	r2, r0
 80109b4:	460b      	mov	r3, r1
 80109b6:	4650      	mov	r0, sl
 80109b8:	4659      	mov	r1, fp
 80109ba:	e610      	b.n	80105de <__ieee754_pow+0x31e>
 80109bc:	2401      	movs	r4, #1
 80109be:	e6a1      	b.n	8010704 <__ieee754_pow+0x444>
 80109c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010a10 <__ieee754_pow+0x750>
 80109c4:	e617      	b.n	80105f6 <__ieee754_pow+0x336>
 80109c6:	bf00      	nop
 80109c8:	4a454eef 	.word	0x4a454eef
 80109cc:	3fca7e28 	.word	0x3fca7e28
 80109d0:	93c9db65 	.word	0x93c9db65
 80109d4:	3fcd864a 	.word	0x3fcd864a
 80109d8:	a91d4101 	.word	0xa91d4101
 80109dc:	3fd17460 	.word	0x3fd17460
 80109e0:	518f264d 	.word	0x518f264d
 80109e4:	3fd55555 	.word	0x3fd55555
 80109e8:	db6fabff 	.word	0xdb6fabff
 80109ec:	3fdb6db6 	.word	0x3fdb6db6
 80109f0:	33333303 	.word	0x33333303
 80109f4:	3fe33333 	.word	0x3fe33333
 80109f8:	e0000000 	.word	0xe0000000
 80109fc:	3feec709 	.word	0x3feec709
 8010a00:	dc3a03fd 	.word	0xdc3a03fd
 8010a04:	3feec709 	.word	0x3feec709
 8010a08:	145b01f5 	.word	0x145b01f5
 8010a0c:	be3e2fe0 	.word	0xbe3e2fe0
 8010a10:	00000000 	.word	0x00000000
 8010a14:	3ff00000 	.word	0x3ff00000
 8010a18:	7ff00000 	.word	0x7ff00000
 8010a1c:	43400000 	.word	0x43400000
 8010a20:	0003988e 	.word	0x0003988e
 8010a24:	000bb679 	.word	0x000bb679
 8010a28:	0801f9c8 	.word	0x0801f9c8
 8010a2c:	3ff00000 	.word	0x3ff00000
 8010a30:	40080000 	.word	0x40080000
 8010a34:	0801f9e8 	.word	0x0801f9e8
 8010a38:	0801f9d8 	.word	0x0801f9d8
 8010a3c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010d14 <__ieee754_pow+0xa54>)
 8010a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a42:	4640      	mov	r0, r8
 8010a44:	4649      	mov	r1, r9
 8010a46:	f7ef fc21 	bl	800028c <__adddf3>
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	ec41 0b1a 	vmov	d10, r0, r1
 8010a50:	462b      	mov	r3, r5
 8010a52:	4630      	mov	r0, r6
 8010a54:	4639      	mov	r1, r7
 8010a56:	f7ef fc17 	bl	8000288 <__aeabi_dsub>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	ec51 0b1a 	vmov	r0, r1, d10
 8010a62:	f7f0 f859 	bl	8000b18 <__aeabi_dcmpgt>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	f47f ae04 	bne.w	8010674 <__ieee754_pow+0x3b4>
 8010a6c:	4aa4      	ldr	r2, [pc, #656]	; (8010d00 <__ieee754_pow+0xa40>)
 8010a6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a72:	4293      	cmp	r3, r2
 8010a74:	f340 8108 	ble.w	8010c88 <__ieee754_pow+0x9c8>
 8010a78:	151b      	asrs	r3, r3, #20
 8010a7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010a7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010a82:	fa4a f303 	asr.w	r3, sl, r3
 8010a86:	445b      	add	r3, fp
 8010a88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010a8c:	4e9d      	ldr	r6, [pc, #628]	; (8010d04 <__ieee754_pow+0xa44>)
 8010a8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010a92:	4116      	asrs	r6, r2
 8010a94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010a98:	2000      	movs	r0, #0
 8010a9a:	ea23 0106 	bic.w	r1, r3, r6
 8010a9e:	f1c2 0214 	rsb	r2, r2, #20
 8010aa2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010aa6:	fa4a fa02 	asr.w	sl, sl, r2
 8010aaa:	f1bb 0f00 	cmp.w	fp, #0
 8010aae:	4602      	mov	r2, r0
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	bfb8      	it	lt
 8010ab8:	f1ca 0a00 	rsblt	sl, sl, #0
 8010abc:	f7ef fbe4 	bl	8000288 <__aeabi_dsub>
 8010ac0:	ec41 0b19 	vmov	d9, r0, r1
 8010ac4:	4642      	mov	r2, r8
 8010ac6:	464b      	mov	r3, r9
 8010ac8:	ec51 0b19 	vmov	r0, r1, d9
 8010acc:	f7ef fbde 	bl	800028c <__adddf3>
 8010ad0:	a37b      	add	r3, pc, #492	; (adr r3, 8010cc0 <__ieee754_pow+0xa00>)
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	4604      	mov	r4, r0
 8010ada:	460d      	mov	r5, r1
 8010adc:	f7ef fd8c 	bl	80005f8 <__aeabi_dmul>
 8010ae0:	ec53 2b19 	vmov	r2, r3, d9
 8010ae4:	4606      	mov	r6, r0
 8010ae6:	460f      	mov	r7, r1
 8010ae8:	4620      	mov	r0, r4
 8010aea:	4629      	mov	r1, r5
 8010aec:	f7ef fbcc 	bl	8000288 <__aeabi_dsub>
 8010af0:	4602      	mov	r2, r0
 8010af2:	460b      	mov	r3, r1
 8010af4:	4640      	mov	r0, r8
 8010af6:	4649      	mov	r1, r9
 8010af8:	f7ef fbc6 	bl	8000288 <__aeabi_dsub>
 8010afc:	a372      	add	r3, pc, #456	; (adr r3, 8010cc8 <__ieee754_pow+0xa08>)
 8010afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b02:	f7ef fd79 	bl	80005f8 <__aeabi_dmul>
 8010b06:	a372      	add	r3, pc, #456	; (adr r3, 8010cd0 <__ieee754_pow+0xa10>)
 8010b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0c:	4680      	mov	r8, r0
 8010b0e:	4689      	mov	r9, r1
 8010b10:	4620      	mov	r0, r4
 8010b12:	4629      	mov	r1, r5
 8010b14:	f7ef fd70 	bl	80005f8 <__aeabi_dmul>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	4640      	mov	r0, r8
 8010b1e:	4649      	mov	r1, r9
 8010b20:	f7ef fbb4 	bl	800028c <__adddf3>
 8010b24:	4604      	mov	r4, r0
 8010b26:	460d      	mov	r5, r1
 8010b28:	4602      	mov	r2, r0
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	4630      	mov	r0, r6
 8010b2e:	4639      	mov	r1, r7
 8010b30:	f7ef fbac 	bl	800028c <__adddf3>
 8010b34:	4632      	mov	r2, r6
 8010b36:	463b      	mov	r3, r7
 8010b38:	4680      	mov	r8, r0
 8010b3a:	4689      	mov	r9, r1
 8010b3c:	f7ef fba4 	bl	8000288 <__aeabi_dsub>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4620      	mov	r0, r4
 8010b46:	4629      	mov	r1, r5
 8010b48:	f7ef fb9e 	bl	8000288 <__aeabi_dsub>
 8010b4c:	4642      	mov	r2, r8
 8010b4e:	4606      	mov	r6, r0
 8010b50:	460f      	mov	r7, r1
 8010b52:	464b      	mov	r3, r9
 8010b54:	4640      	mov	r0, r8
 8010b56:	4649      	mov	r1, r9
 8010b58:	f7ef fd4e 	bl	80005f8 <__aeabi_dmul>
 8010b5c:	a35e      	add	r3, pc, #376	; (adr r3, 8010cd8 <__ieee754_pow+0xa18>)
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	4604      	mov	r4, r0
 8010b64:	460d      	mov	r5, r1
 8010b66:	f7ef fd47 	bl	80005f8 <__aeabi_dmul>
 8010b6a:	a35d      	add	r3, pc, #372	; (adr r3, 8010ce0 <__ieee754_pow+0xa20>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	f7ef fb8a 	bl	8000288 <__aeabi_dsub>
 8010b74:	4622      	mov	r2, r4
 8010b76:	462b      	mov	r3, r5
 8010b78:	f7ef fd3e 	bl	80005f8 <__aeabi_dmul>
 8010b7c:	a35a      	add	r3, pc, #360	; (adr r3, 8010ce8 <__ieee754_pow+0xa28>)
 8010b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b82:	f7ef fb83 	bl	800028c <__adddf3>
 8010b86:	4622      	mov	r2, r4
 8010b88:	462b      	mov	r3, r5
 8010b8a:	f7ef fd35 	bl	80005f8 <__aeabi_dmul>
 8010b8e:	a358      	add	r3, pc, #352	; (adr r3, 8010cf0 <__ieee754_pow+0xa30>)
 8010b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b94:	f7ef fb78 	bl	8000288 <__aeabi_dsub>
 8010b98:	4622      	mov	r2, r4
 8010b9a:	462b      	mov	r3, r5
 8010b9c:	f7ef fd2c 	bl	80005f8 <__aeabi_dmul>
 8010ba0:	a355      	add	r3, pc, #340	; (adr r3, 8010cf8 <__ieee754_pow+0xa38>)
 8010ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba6:	f7ef fb71 	bl	800028c <__adddf3>
 8010baa:	4622      	mov	r2, r4
 8010bac:	462b      	mov	r3, r5
 8010bae:	f7ef fd23 	bl	80005f8 <__aeabi_dmul>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	4640      	mov	r0, r8
 8010bb8:	4649      	mov	r1, r9
 8010bba:	f7ef fb65 	bl	8000288 <__aeabi_dsub>
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	460d      	mov	r5, r1
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4640      	mov	r0, r8
 8010bc8:	4649      	mov	r1, r9
 8010bca:	f7ef fd15 	bl	80005f8 <__aeabi_dmul>
 8010bce:	2200      	movs	r2, #0
 8010bd0:	ec41 0b19 	vmov	d9, r0, r1
 8010bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010bd8:	4620      	mov	r0, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	f7ef fb54 	bl	8000288 <__aeabi_dsub>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	ec51 0b19 	vmov	r0, r1, d9
 8010be8:	f7ef fe30 	bl	800084c <__aeabi_ddiv>
 8010bec:	4632      	mov	r2, r6
 8010bee:	4604      	mov	r4, r0
 8010bf0:	460d      	mov	r5, r1
 8010bf2:	463b      	mov	r3, r7
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	f7ef fcfe 	bl	80005f8 <__aeabi_dmul>
 8010bfc:	4632      	mov	r2, r6
 8010bfe:	463b      	mov	r3, r7
 8010c00:	f7ef fb44 	bl	800028c <__adddf3>
 8010c04:	4602      	mov	r2, r0
 8010c06:	460b      	mov	r3, r1
 8010c08:	4620      	mov	r0, r4
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	f7ef fb3c 	bl	8000288 <__aeabi_dsub>
 8010c10:	4642      	mov	r2, r8
 8010c12:	464b      	mov	r3, r9
 8010c14:	f7ef fb38 	bl	8000288 <__aeabi_dsub>
 8010c18:	460b      	mov	r3, r1
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	493a      	ldr	r1, [pc, #232]	; (8010d08 <__ieee754_pow+0xa48>)
 8010c1e:	2000      	movs	r0, #0
 8010c20:	f7ef fb32 	bl	8000288 <__aeabi_dsub>
 8010c24:	ec41 0b10 	vmov	d0, r0, r1
 8010c28:	ee10 3a90 	vmov	r3, s1
 8010c2c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c34:	da2b      	bge.n	8010c8e <__ieee754_pow+0x9ce>
 8010c36:	4650      	mov	r0, sl
 8010c38:	f000 f966 	bl	8010f08 <scalbn>
 8010c3c:	ec51 0b10 	vmov	r0, r1, d0
 8010c40:	ec53 2b18 	vmov	r2, r3, d8
 8010c44:	f7ff bbed 	b.w	8010422 <__ieee754_pow+0x162>
 8010c48:	4b30      	ldr	r3, [pc, #192]	; (8010d0c <__ieee754_pow+0xa4c>)
 8010c4a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010c4e:	429e      	cmp	r6, r3
 8010c50:	f77f af0c 	ble.w	8010a6c <__ieee754_pow+0x7ac>
 8010c54:	4b2e      	ldr	r3, [pc, #184]	; (8010d10 <__ieee754_pow+0xa50>)
 8010c56:	440b      	add	r3, r1
 8010c58:	4303      	orrs	r3, r0
 8010c5a:	d009      	beq.n	8010c70 <__ieee754_pow+0x9b0>
 8010c5c:	ec51 0b18 	vmov	r0, r1, d8
 8010c60:	2200      	movs	r2, #0
 8010c62:	2300      	movs	r3, #0
 8010c64:	f7ef ff3a 	bl	8000adc <__aeabi_dcmplt>
 8010c68:	3800      	subs	r0, #0
 8010c6a:	bf18      	it	ne
 8010c6c:	2001      	movne	r0, #1
 8010c6e:	e447      	b.n	8010500 <__ieee754_pow+0x240>
 8010c70:	4622      	mov	r2, r4
 8010c72:	462b      	mov	r3, r5
 8010c74:	f7ef fb08 	bl	8000288 <__aeabi_dsub>
 8010c78:	4642      	mov	r2, r8
 8010c7a:	464b      	mov	r3, r9
 8010c7c:	f7ef ff42 	bl	8000b04 <__aeabi_dcmpge>
 8010c80:	2800      	cmp	r0, #0
 8010c82:	f43f aef3 	beq.w	8010a6c <__ieee754_pow+0x7ac>
 8010c86:	e7e9      	b.n	8010c5c <__ieee754_pow+0x99c>
 8010c88:	f04f 0a00 	mov.w	sl, #0
 8010c8c:	e71a      	b.n	8010ac4 <__ieee754_pow+0x804>
 8010c8e:	ec51 0b10 	vmov	r0, r1, d0
 8010c92:	4619      	mov	r1, r3
 8010c94:	e7d4      	b.n	8010c40 <__ieee754_pow+0x980>
 8010c96:	491c      	ldr	r1, [pc, #112]	; (8010d08 <__ieee754_pow+0xa48>)
 8010c98:	2000      	movs	r0, #0
 8010c9a:	f7ff bb30 	b.w	80102fe <__ieee754_pow+0x3e>
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	f7ff bb2c 	b.w	80102fe <__ieee754_pow+0x3e>
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	4639      	mov	r1, r7
 8010caa:	f7ff bb28 	b.w	80102fe <__ieee754_pow+0x3e>
 8010cae:	9204      	str	r2, [sp, #16]
 8010cb0:	f7ff bb7a 	b.w	80103a8 <__ieee754_pow+0xe8>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	f7ff bb64 	b.w	8010382 <__ieee754_pow+0xc2>
 8010cba:	bf00      	nop
 8010cbc:	f3af 8000 	nop.w
 8010cc0:	00000000 	.word	0x00000000
 8010cc4:	3fe62e43 	.word	0x3fe62e43
 8010cc8:	fefa39ef 	.word	0xfefa39ef
 8010ccc:	3fe62e42 	.word	0x3fe62e42
 8010cd0:	0ca86c39 	.word	0x0ca86c39
 8010cd4:	be205c61 	.word	0xbe205c61
 8010cd8:	72bea4d0 	.word	0x72bea4d0
 8010cdc:	3e663769 	.word	0x3e663769
 8010ce0:	c5d26bf1 	.word	0xc5d26bf1
 8010ce4:	3ebbbd41 	.word	0x3ebbbd41
 8010ce8:	af25de2c 	.word	0xaf25de2c
 8010cec:	3f11566a 	.word	0x3f11566a
 8010cf0:	16bebd93 	.word	0x16bebd93
 8010cf4:	3f66c16c 	.word	0x3f66c16c
 8010cf8:	5555553e 	.word	0x5555553e
 8010cfc:	3fc55555 	.word	0x3fc55555
 8010d00:	3fe00000 	.word	0x3fe00000
 8010d04:	000fffff 	.word	0x000fffff
 8010d08:	3ff00000 	.word	0x3ff00000
 8010d0c:	4090cbff 	.word	0x4090cbff
 8010d10:	3f6f3400 	.word	0x3f6f3400
 8010d14:	652b82fe 	.word	0x652b82fe
 8010d18:	3c971547 	.word	0x3c971547

08010d1c <__ieee754_sqrt>:
 8010d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d20:	ec55 4b10 	vmov	r4, r5, d0
 8010d24:	4e55      	ldr	r6, [pc, #340]	; (8010e7c <__ieee754_sqrt+0x160>)
 8010d26:	43ae      	bics	r6, r5
 8010d28:	ee10 0a10 	vmov	r0, s0
 8010d2c:	ee10 3a10 	vmov	r3, s0
 8010d30:	462a      	mov	r2, r5
 8010d32:	4629      	mov	r1, r5
 8010d34:	d110      	bne.n	8010d58 <__ieee754_sqrt+0x3c>
 8010d36:	ee10 2a10 	vmov	r2, s0
 8010d3a:	462b      	mov	r3, r5
 8010d3c:	f7ef fc5c 	bl	80005f8 <__aeabi_dmul>
 8010d40:	4602      	mov	r2, r0
 8010d42:	460b      	mov	r3, r1
 8010d44:	4620      	mov	r0, r4
 8010d46:	4629      	mov	r1, r5
 8010d48:	f7ef faa0 	bl	800028c <__adddf3>
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	460d      	mov	r5, r1
 8010d50:	ec45 4b10 	vmov	d0, r4, r5
 8010d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d58:	2d00      	cmp	r5, #0
 8010d5a:	dc10      	bgt.n	8010d7e <__ieee754_sqrt+0x62>
 8010d5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010d60:	4330      	orrs	r0, r6
 8010d62:	d0f5      	beq.n	8010d50 <__ieee754_sqrt+0x34>
 8010d64:	b15d      	cbz	r5, 8010d7e <__ieee754_sqrt+0x62>
 8010d66:	ee10 2a10 	vmov	r2, s0
 8010d6a:	462b      	mov	r3, r5
 8010d6c:	ee10 0a10 	vmov	r0, s0
 8010d70:	f7ef fa8a 	bl	8000288 <__aeabi_dsub>
 8010d74:	4602      	mov	r2, r0
 8010d76:	460b      	mov	r3, r1
 8010d78:	f7ef fd68 	bl	800084c <__aeabi_ddiv>
 8010d7c:	e7e6      	b.n	8010d4c <__ieee754_sqrt+0x30>
 8010d7e:	1512      	asrs	r2, r2, #20
 8010d80:	d074      	beq.n	8010e6c <__ieee754_sqrt+0x150>
 8010d82:	07d4      	lsls	r4, r2, #31
 8010d84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010d88:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010d8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010d90:	bf5e      	ittt	pl
 8010d92:	0fda      	lsrpl	r2, r3, #31
 8010d94:	005b      	lslpl	r3, r3, #1
 8010d96:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010d9a:	2400      	movs	r4, #0
 8010d9c:	0fda      	lsrs	r2, r3, #31
 8010d9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010da2:	107f      	asrs	r7, r7, #1
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	2516      	movs	r5, #22
 8010da8:	4620      	mov	r0, r4
 8010daa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010dae:	1886      	adds	r6, r0, r2
 8010db0:	428e      	cmp	r6, r1
 8010db2:	bfde      	ittt	le
 8010db4:	1b89      	suble	r1, r1, r6
 8010db6:	18b0      	addle	r0, r6, r2
 8010db8:	18a4      	addle	r4, r4, r2
 8010dba:	0049      	lsls	r1, r1, #1
 8010dbc:	3d01      	subs	r5, #1
 8010dbe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010dc2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010dc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010dca:	d1f0      	bne.n	8010dae <__ieee754_sqrt+0x92>
 8010dcc:	462a      	mov	r2, r5
 8010dce:	f04f 0e20 	mov.w	lr, #32
 8010dd2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010dd6:	4281      	cmp	r1, r0
 8010dd8:	eb06 0c05 	add.w	ip, r6, r5
 8010ddc:	dc02      	bgt.n	8010de4 <__ieee754_sqrt+0xc8>
 8010dde:	d113      	bne.n	8010e08 <__ieee754_sqrt+0xec>
 8010de0:	459c      	cmp	ip, r3
 8010de2:	d811      	bhi.n	8010e08 <__ieee754_sqrt+0xec>
 8010de4:	f1bc 0f00 	cmp.w	ip, #0
 8010de8:	eb0c 0506 	add.w	r5, ip, r6
 8010dec:	da43      	bge.n	8010e76 <__ieee754_sqrt+0x15a>
 8010dee:	2d00      	cmp	r5, #0
 8010df0:	db41      	blt.n	8010e76 <__ieee754_sqrt+0x15a>
 8010df2:	f100 0801 	add.w	r8, r0, #1
 8010df6:	1a09      	subs	r1, r1, r0
 8010df8:	459c      	cmp	ip, r3
 8010dfa:	bf88      	it	hi
 8010dfc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010e00:	eba3 030c 	sub.w	r3, r3, ip
 8010e04:	4432      	add	r2, r6
 8010e06:	4640      	mov	r0, r8
 8010e08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010e0c:	f1be 0e01 	subs.w	lr, lr, #1
 8010e10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010e14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010e18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010e1c:	d1db      	bne.n	8010dd6 <__ieee754_sqrt+0xba>
 8010e1e:	430b      	orrs	r3, r1
 8010e20:	d006      	beq.n	8010e30 <__ieee754_sqrt+0x114>
 8010e22:	1c50      	adds	r0, r2, #1
 8010e24:	bf13      	iteet	ne
 8010e26:	3201      	addne	r2, #1
 8010e28:	3401      	addeq	r4, #1
 8010e2a:	4672      	moveq	r2, lr
 8010e2c:	f022 0201 	bicne.w	r2, r2, #1
 8010e30:	1063      	asrs	r3, r4, #1
 8010e32:	0852      	lsrs	r2, r2, #1
 8010e34:	07e1      	lsls	r1, r4, #31
 8010e36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010e3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010e3e:	bf48      	it	mi
 8010e40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010e44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010e48:	4614      	mov	r4, r2
 8010e4a:	e781      	b.n	8010d50 <__ieee754_sqrt+0x34>
 8010e4c:	0ad9      	lsrs	r1, r3, #11
 8010e4e:	3815      	subs	r0, #21
 8010e50:	055b      	lsls	r3, r3, #21
 8010e52:	2900      	cmp	r1, #0
 8010e54:	d0fa      	beq.n	8010e4c <__ieee754_sqrt+0x130>
 8010e56:	02cd      	lsls	r5, r1, #11
 8010e58:	d50a      	bpl.n	8010e70 <__ieee754_sqrt+0x154>
 8010e5a:	f1c2 0420 	rsb	r4, r2, #32
 8010e5e:	fa23 f404 	lsr.w	r4, r3, r4
 8010e62:	1e55      	subs	r5, r2, #1
 8010e64:	4093      	lsls	r3, r2
 8010e66:	4321      	orrs	r1, r4
 8010e68:	1b42      	subs	r2, r0, r5
 8010e6a:	e78a      	b.n	8010d82 <__ieee754_sqrt+0x66>
 8010e6c:	4610      	mov	r0, r2
 8010e6e:	e7f0      	b.n	8010e52 <__ieee754_sqrt+0x136>
 8010e70:	0049      	lsls	r1, r1, #1
 8010e72:	3201      	adds	r2, #1
 8010e74:	e7ef      	b.n	8010e56 <__ieee754_sqrt+0x13a>
 8010e76:	4680      	mov	r8, r0
 8010e78:	e7bd      	b.n	8010df6 <__ieee754_sqrt+0xda>
 8010e7a:	bf00      	nop
 8010e7c:	7ff00000 	.word	0x7ff00000

08010e80 <with_errno>:
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	4604      	mov	r4, r0
 8010e84:	460d      	mov	r5, r1
 8010e86:	4616      	mov	r6, r2
 8010e88:	f7fa fc38 	bl	800b6fc <__errno>
 8010e8c:	4629      	mov	r1, r5
 8010e8e:	6006      	str	r6, [r0, #0]
 8010e90:	4620      	mov	r0, r4
 8010e92:	bd70      	pop	{r4, r5, r6, pc}

08010e94 <xflow>:
 8010e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e96:	4614      	mov	r4, r2
 8010e98:	461d      	mov	r5, r3
 8010e9a:	b108      	cbz	r0, 8010ea0 <xflow+0xc>
 8010e9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010ea0:	e9cd 2300 	strd	r2, r3, [sp]
 8010ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	4629      	mov	r1, r5
 8010eac:	f7ef fba4 	bl	80005f8 <__aeabi_dmul>
 8010eb0:	2222      	movs	r2, #34	; 0x22
 8010eb2:	b003      	add	sp, #12
 8010eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010eb8:	f7ff bfe2 	b.w	8010e80 <with_errno>

08010ebc <__math_uflow>:
 8010ebc:	b508      	push	{r3, lr}
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010ec4:	f7ff ffe6 	bl	8010e94 <xflow>
 8010ec8:	ec41 0b10 	vmov	d0, r0, r1
 8010ecc:	bd08      	pop	{r3, pc}

08010ece <__math_oflow>:
 8010ece:	b508      	push	{r3, lr}
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010ed6:	f7ff ffdd 	bl	8010e94 <xflow>
 8010eda:	ec41 0b10 	vmov	d0, r0, r1
 8010ede:	bd08      	pop	{r3, pc}

08010ee0 <fabs>:
 8010ee0:	ec51 0b10 	vmov	r0, r1, d0
 8010ee4:	ee10 2a10 	vmov	r2, s0
 8010ee8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010eec:	ec43 2b10 	vmov	d0, r2, r3
 8010ef0:	4770      	bx	lr

08010ef2 <finite>:
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	ed8d 0b00 	vstr	d0, [sp]
 8010ef8:	9801      	ldr	r0, [sp, #4]
 8010efa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010efe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010f02:	0fc0      	lsrs	r0, r0, #31
 8010f04:	b002      	add	sp, #8
 8010f06:	4770      	bx	lr

08010f08 <scalbn>:
 8010f08:	b570      	push	{r4, r5, r6, lr}
 8010f0a:	ec55 4b10 	vmov	r4, r5, d0
 8010f0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010f12:	4606      	mov	r6, r0
 8010f14:	462b      	mov	r3, r5
 8010f16:	b99a      	cbnz	r2, 8010f40 <scalbn+0x38>
 8010f18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f1c:	4323      	orrs	r3, r4
 8010f1e:	d036      	beq.n	8010f8e <scalbn+0x86>
 8010f20:	4b39      	ldr	r3, [pc, #228]	; (8011008 <scalbn+0x100>)
 8010f22:	4629      	mov	r1, r5
 8010f24:	ee10 0a10 	vmov	r0, s0
 8010f28:	2200      	movs	r2, #0
 8010f2a:	f7ef fb65 	bl	80005f8 <__aeabi_dmul>
 8010f2e:	4b37      	ldr	r3, [pc, #220]	; (801100c <scalbn+0x104>)
 8010f30:	429e      	cmp	r6, r3
 8010f32:	4604      	mov	r4, r0
 8010f34:	460d      	mov	r5, r1
 8010f36:	da10      	bge.n	8010f5a <scalbn+0x52>
 8010f38:	a32b      	add	r3, pc, #172	; (adr r3, 8010fe8 <scalbn+0xe0>)
 8010f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3e:	e03a      	b.n	8010fb6 <scalbn+0xae>
 8010f40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010f44:	428a      	cmp	r2, r1
 8010f46:	d10c      	bne.n	8010f62 <scalbn+0x5a>
 8010f48:	ee10 2a10 	vmov	r2, s0
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	4629      	mov	r1, r5
 8010f50:	f7ef f99c 	bl	800028c <__adddf3>
 8010f54:	4604      	mov	r4, r0
 8010f56:	460d      	mov	r5, r1
 8010f58:	e019      	b.n	8010f8e <scalbn+0x86>
 8010f5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010f5e:	460b      	mov	r3, r1
 8010f60:	3a36      	subs	r2, #54	; 0x36
 8010f62:	4432      	add	r2, r6
 8010f64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010f68:	428a      	cmp	r2, r1
 8010f6a:	dd08      	ble.n	8010f7e <scalbn+0x76>
 8010f6c:	2d00      	cmp	r5, #0
 8010f6e:	a120      	add	r1, pc, #128	; (adr r1, 8010ff0 <scalbn+0xe8>)
 8010f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f74:	da1c      	bge.n	8010fb0 <scalbn+0xa8>
 8010f76:	a120      	add	r1, pc, #128	; (adr r1, 8010ff8 <scalbn+0xf0>)
 8010f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f7c:	e018      	b.n	8010fb0 <scalbn+0xa8>
 8010f7e:	2a00      	cmp	r2, #0
 8010f80:	dd08      	ble.n	8010f94 <scalbn+0x8c>
 8010f82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010f8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010f8e:	ec45 4b10 	vmov	d0, r4, r5
 8010f92:	bd70      	pop	{r4, r5, r6, pc}
 8010f94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010f98:	da19      	bge.n	8010fce <scalbn+0xc6>
 8010f9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010f9e:	429e      	cmp	r6, r3
 8010fa0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010fa4:	dd0a      	ble.n	8010fbc <scalbn+0xb4>
 8010fa6:	a112      	add	r1, pc, #72	; (adr r1, 8010ff0 <scalbn+0xe8>)
 8010fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d1e2      	bne.n	8010f76 <scalbn+0x6e>
 8010fb0:	a30f      	add	r3, pc, #60	; (adr r3, 8010ff0 <scalbn+0xe8>)
 8010fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb6:	f7ef fb1f 	bl	80005f8 <__aeabi_dmul>
 8010fba:	e7cb      	b.n	8010f54 <scalbn+0x4c>
 8010fbc:	a10a      	add	r1, pc, #40	; (adr r1, 8010fe8 <scalbn+0xe0>)
 8010fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d0b8      	beq.n	8010f38 <scalbn+0x30>
 8010fc6:	a10e      	add	r1, pc, #56	; (adr r1, 8011000 <scalbn+0xf8>)
 8010fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fcc:	e7b4      	b.n	8010f38 <scalbn+0x30>
 8010fce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010fd2:	3236      	adds	r2, #54	; 0x36
 8010fd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010fd8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010fdc:	4620      	mov	r0, r4
 8010fde:	4b0c      	ldr	r3, [pc, #48]	; (8011010 <scalbn+0x108>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	e7e8      	b.n	8010fb6 <scalbn+0xae>
 8010fe4:	f3af 8000 	nop.w
 8010fe8:	c2f8f359 	.word	0xc2f8f359
 8010fec:	01a56e1f 	.word	0x01a56e1f
 8010ff0:	8800759c 	.word	0x8800759c
 8010ff4:	7e37e43c 	.word	0x7e37e43c
 8010ff8:	8800759c 	.word	0x8800759c
 8010ffc:	fe37e43c 	.word	0xfe37e43c
 8011000:	c2f8f359 	.word	0xc2f8f359
 8011004:	81a56e1f 	.word	0x81a56e1f
 8011008:	43500000 	.word	0x43500000
 801100c:	ffff3cb0 	.word	0xffff3cb0
 8011010:	3c900000 	.word	0x3c900000

08011014 <_init>:
 8011014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011016:	bf00      	nop
 8011018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801101a:	bc08      	pop	{r3}
 801101c:	469e      	mov	lr, r3
 801101e:	4770      	bx	lr

08011020 <_fini>:
 8011020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011022:	bf00      	nop
 8011024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011026:	bc08      	pop	{r3}
 8011028:	469e      	mov	lr, r3
 801102a:	4770      	bx	lr
