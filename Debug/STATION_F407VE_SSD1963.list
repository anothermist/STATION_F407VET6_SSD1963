
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000eba8  08013440  08013440  00023440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021fe8  08021fe8  00040250  2**0
                  CONTENTS
  4 .ARM          00000008  08021fe8  08021fe8  00031fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021ff0  08021ff0  00040250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021ff0  08021ff0  00031ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021ff4  08021ff4  00031ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08021ff8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040250  2**0
                  CONTENTS
 10 .bss          00001230  20000250  20000250  00040250  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20001480  20001480  00040250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e241  00000000  00000000  00040280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eeb  00000000  00000000  0005e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  000623b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001848  00000000  00000000  00063d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026939  00000000  00000000  000655d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206f3  00000000  00000000  0008bf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd787  00000000  00000000  000ac5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00189d83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087a8  00000000  00000000  00189dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013424 	.word	0x08013424

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	08013424 	.word	0x08013424

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <AT24XX_Save>:
		return 1;
	else
		return 0;
}

uint8_t AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b20      	cmp	r3, #32
 800100a:	d901      	bls.n	8001010 <AT24XX_Save+0x18>
		return 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e016      	b.n	800103e <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	b29b      	uxth	r3, r3
 8001014:	89fa      	ldrh	r2, [r7, #14]
 8001016:	f04f 31ff 	mov.w	r1, #4294967295
 800101a:	9102      	str	r1, [sp, #8]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2310      	movs	r3, #16
 8001024:	21ae      	movs	r1, #174	; 0xae
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <AT24XX_Save+0x50>)
 8001028:	f007 f9e2 	bl	80083f0 <HAL_I2C_Mem_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8001032:	2005      	movs	r0, #5
 8001034:	f005 fad0 	bl	80065d8 <HAL_Delay>
			return 1;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <AT24XX_Save+0x46>
} else
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000390 	.word	0x20000390

0800104c <AT24XX_Load>:

uint8_t AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	9102      	str	r1, [sp, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2310      	movs	r3, #16
 800106e:	21ae      	movs	r1, #174	; 0xae
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <AT24XX_Load+0x40>)
 8001072:	f007 fab7 	bl	80085e4 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <AT24XX_Load+0x36>
} else
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000390 	.word	0x20000390

08001090 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800109a:	2300      	movs	r3, #0
 800109c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffd0 	bl	800104c <AT24XX_Load>
	return dt[0];
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	4613      	mov	r3, r2
 80010c6:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	2201      	movs	r2, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff8f 	bl	8000ff8 <AT24XX_Save>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	460a      	mov	r2, r1
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffcb 	bl	8001090 <AT24XX_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	4293      	cmp	r3, r2
 8001102:	d005      	beq.n	8001110 <AT24XX_Update+0x2e>
 8001104:	797a      	ldrb	r2, [r7, #5]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffd4 	bl	80010b8 <AT24XX_Write>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001122:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112e:	f7ff fb8d 	bl	800084c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <round_eps+0x68>)
 8001140:	f7ff f8a4 	bl	800028c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b17 	vmov	d7, r2, r3
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	f010 fa8c 	bl	8011670 <floor>
 8001158:	ec51 0b10 	vmov	r0, r1, d0
 800115c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd3c 	bl	8000be8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	3fe00000 	.word	0x3fe00000
 8001184:	00000000 	.word	0x00000000

08001188 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f9d6 	bl	8000548 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9bd 	bl	8000524 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b11 	vmov	d1, r2, r3
 80011b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80011e0 <round_nth+0x58>
 80011b6:	f010 fb33 	bl	8011820 <pow>
 80011ba:	eeb0 7a40 	vmov.f32	s14, s0
 80011be:	eef0 7a60 	vmov.f32	s15, s1
 80011c2:	eeb0 1a47 	vmov.f32	s2, s14
 80011c6:	eef0 1a67 	vmov.f32	s3, s15
 80011ca:	ec45 4b10 	vmov	d0, r4, r5
 80011ce:	f7ff ffa3 	bl	8001118 <round_eps>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40240000 	.word	0x40240000

080011e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80011f2:	23fa      	movs	r3, #250	; 0xfa
 80011f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	482e      	ldr	r0, [pc, #184]	; (80012c0 <BME280_getTemperature+0xd8>)
 8001206:	f006 fdcf 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2303      	movs	r3, #3
 8001218:	21ec      	movs	r1, #236	; 0xec
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <BME280_getTemperature+0xd8>)
 800121c:	f006 fec2 	bl	8007fa4 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001220:	7a7b      	ldrb	r3, [r7, #9]
 8001222:	031a      	lsls	r2, r3, #12
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4313      	orrs	r3, r2
 800122a:	7afa      	ldrb	r2, [r7, #11]
 800122c:	0912      	lsrs	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <BME280_getTemperature+0xdc>)
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <BME280_getTemperature+0xe0>)
 8001242:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	491c      	ldr	r1, [pc, #112]	; (80012c4 <BME280_getTemperature+0xdc>)
 8001252:	8809      	ldrh	r1, [r1, #0]
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	6979      	ldr	r1, [r7, #20]
 8001258:	0909      	lsrs	r1, r1, #4
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <BME280_getTemperature+0xdc>)
 800125c:	8800      	ldrh	r0, [r0, #0]
 800125e:	1a09      	subs	r1, r1, r0
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	0b1b      	lsrs	r3, r3, #12
 8001266:	4919      	ldr	r1, [pc, #100]	; (80012cc <BME280_getTemperature+0xe4>)
 8001268:	f9b1 1000 	ldrsh.w	r1, [r1]
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001272:	4413      	add	r3, r2
    temp =
 8001274:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <BME280_getTemperature+0xe8>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3380      	adds	r3, #128	; 0x80
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001294:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8001298:	edd7 7a03 	vldr	s15, [r7, #12]
 800129c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80012d4 <BME280_getTemperature+0xec>
 80012a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	f7ff ff6b 	bl	8001188 <round_nth>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000390 	.word	0x20000390
 80012c4:	2000026c 	.word	0x2000026c
 80012c8:	2000026e 	.word	0x2000026e
 80012cc:	20000270 	.word	0x20000270
 80012d0:	20000290 	.word	0x20000290
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80012e2:	23fd      	movs	r3, #253	; 0xfd
 80012e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	21ec      	movs	r1, #236	; 0xec
 80012f4:	4840      	ldr	r0, [pc, #256]	; (80013f8 <BME280_getHumidity+0x120>)
 80012f6:	f006 fd57 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, HAL_MAX_DELAY);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2302      	movs	r3, #2
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	483b      	ldr	r0, [pc, #236]	; (80013f8 <BME280_getHumidity+0x120>)
 800130c:	f006 fe4a 	bl	8007fa4 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 8001310:	7a7b      	ldrb	r3, [r7, #9]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	7aba      	ldrb	r2, [r7, #10]
 8001316:	4313      	orrs	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <BME280_getHumidity+0x124>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001322:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <BME280_getHumidity+0x128>)
 800132a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800132e:	0512      	lsls	r2, r2, #20
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <BME280_getHumidity+0x12c>)
 8001334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001338:	4611      	mov	r1, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	fb01 f202 	mul.w	r2, r1, r2
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001346:	0bdb      	lsrs	r3, r3, #15
 8001348:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <BME280_getHumidity+0x130>)
 800134a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800134e:	4611      	mov	r1, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	fb01 f202 	mul.w	r2, r1, r2
 8001356:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001358:	492c      	ldr	r1, [pc, #176]	; (800140c <BME280_getHumidity+0x134>)
 800135a:	8809      	ldrh	r1, [r1, #0]
 800135c:	4608      	mov	r0, r1
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	fb00 f101 	mul.w	r1, r0, r1
 8001364:	12c9      	asrs	r1, r1, #11
 8001366:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800136a:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800136e:	1292      	asrs	r2, r2, #10
 8001370:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8001374:	4926      	ldr	r1, [pc, #152]	; (8001410 <BME280_getHumidity+0x138>)
 8001376:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800137a:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800137e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001382:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001384:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001388:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	13db      	asrs	r3, r3, #15
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	13d2      	asrs	r2, r2, #15
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	11db      	asrs	r3, r3, #7
 8001398:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <BME280_getHumidity+0x13c>)
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	111b      	asrs	r3, r3, #4
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80013ae:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80013b6:	bfa8      	it	ge
 80013b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80013bc:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ca:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001418 <BME280_getHumidity+0x140>
 80013d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	eeb0 0a47 	vmov.f32	s0, s14
 80013e4:	f7ff fed0 	bl	8001188 <round_nth>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000390 	.word	0x20000390
 80013fc:	20000290 	.word	0x20000290
 8001400:	2000028a 	.word	0x2000028a
 8001404:	2000028c 	.word	0x2000028c
 8001408:	2000028e 	.word	0x2000028e
 800140c:	20000286 	.word	0x20000286
 8001410:	20000288 	.word	0x20000288
 8001414:	20000284 	.word	0x20000284
 8001418:	44800000 	.word	0x44800000

0800141c <BME280_getPressure>:

float BME280_getPressure(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 8001422:	23f7      	movs	r3, #247	; 0xf7
 8001424:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001426:	463a      	mov	r2, r7
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	485d      	ldr	r0, [pc, #372]	; (80015a8 <BME280_getPressure+0x18c>)
 8001434:	f006 fcb8 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 8001438:	463b      	mov	r3, r7
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2303      	movs	r3, #3
 8001444:	21ec      	movs	r1, #236	; 0xec
 8001446:	4858      	ldr	r0, [pc, #352]	; (80015a8 <BME280_getPressure+0x18c>)
 8001448:	f006 fdac 	bl	8007fa4 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	031a      	lsls	r2, r3, #12
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4313      	orrs	r3, r2
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	0912      	lsrs	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <BME280_getPressure+0x190>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	105b      	asrs	r3, r3, #1
 8001466:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800146a:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	12db      	asrs	r3, r3, #11
 800147a:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <BME280_getPressure+0x194>)
 800147c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <BME280_getPressure+0x198>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	109a      	asrs	r2, r3, #2
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <BME280_getPressure+0x19c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	4413      	add	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <BME280_getPressure+0x1a0>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	109b      	asrs	r3, r3, #2
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	1092      	asrs	r2, r2, #2
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	135b      	asrs	r3, r3, #13
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	10da      	asrs	r2, r3, #3
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <BME280_getPressure+0x1a4>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	4619      	mov	r1, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	105b      	asrs	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	149b      	asrs	r3, r3, #18
 80014dc:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014e4:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <BME280_getPressure+0x1a8>)
 80014e6:	8812      	ldrh	r2, [r2, #0]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	13db      	asrs	r3, r3, #15
 80014ee:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <BME280_getPressure+0xe0>
        return 0;
 80014f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80015c8 <BME280_getPressure+0x1ac>
 80014fa:	e04e      	b.n	800159a <BME280_getPressure+0x17e>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	131b      	asrs	r3, r3, #12
 8001500:	461a      	mov	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4413      	add	r3, r2
 8001506:	4a31      	ldr	r2, [pc, #196]	; (80015cc <BME280_getPressure+0x1b0>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001510:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001514:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db06      	blt.n	800152a <BME280_getPressure+0x10e>
        press = (press << 1) / var1;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005a      	lsls	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e005      	b.n	8001536 <BME280_getPressure+0x11a>
    } else {
        press = (press / var1) * 2;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <BME280_getPressure+0x1b4>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	4619      	mov	r1, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	08d2      	lsrs	r2, r2, #3
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	131b      	asrs	r3, r3, #12
 8001552:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	461a      	mov	r2, r3
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <BME280_getPressure+0x1b8>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	135b      	asrs	r3, r3, #13
 8001566:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <BME280_getPressure+0x1bc>)
 8001570:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001574:	4413      	add	r3, r2
 8001576:	111b      	asrs	r3, r3, #4
 8001578:	461a      	mov	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	4413      	add	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eddf 6a12 	vldr	s13, [pc, #72]	; 80015dc <BME280_getPressure+0x1c0>
 8001596:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800159a:	eef0 7a47 	vmov.f32	s15, s14
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000390 	.word	0x20000390
 80015ac:	20000290 	.word	0x20000290
 80015b0:	2000027c 	.word	0x2000027c
 80015b4:	2000027a 	.word	0x2000027a
 80015b8:	20000278 	.word	0x20000278
 80015bc:	20000276 	.word	0x20000276
 80015c0:	20000274 	.word	0x20000274
 80015c4:	20000272 	.word	0x20000272
 80015c8:	00000000 	.word	0x00000000
 80015cc:	fffff3cb 	.word	0xfffff3cb
 80015d0:	20000282 	.word	0x20000282
 80015d4:	20000280 	.word	0x20000280
 80015d8:	2000027e 	.word	0x2000027e
 80015dc:	42c80000 	.word	0x42c80000

080015e0 <BME280_Init>:

void BME280_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80015e6:	23f2      	movs	r3, #242	; 0xf2
 80015e8:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80015ea:	2305      	movs	r3, #5
 80015ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 80015ee:	1d3a      	adds	r2, r7, #4
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2302      	movs	r3, #2
 80015f8:	21ec      	movs	r1, #236	; 0xec
 80015fa:	4888      	ldr	r0, [pc, #544]	; (800181c <BME280_Init+0x23c>)
 80015fc:	f006 fbd4 	bl	8007da8 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 8001600:	23f4      	movs	r3, #244	; 0xf4
 8001602:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8001604:	23b7      	movs	r3, #183	; 0xb7
 8001606:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	21ec      	movs	r1, #236	; 0xec
 8001614:	4881      	ldr	r0, [pc, #516]	; (800181c <BME280_Init+0x23c>)
 8001616:	f006 fbc7 	bl	8007da8 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 800161a:	23f5      	movs	r3, #245	; 0xf5
 800161c:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby HAL_MAX_DELAYms, Filter off
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001622:	1d3a      	adds	r2, r7, #4
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2302      	movs	r3, #2
 800162c:	21ec      	movs	r1, #236	; 0xec
 800162e:	487b      	ldr	r0, [pc, #492]	; (800181c <BME280_Init+0x23c>)
 8001630:	f006 fbba 	bl	8007da8 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 8001634:	2388      	movs	r3, #136	; 0x88
 8001636:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001638:	1d3a      	adds	r2, r7, #4
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	21ec      	movs	r1, #236	; 0xec
 8001644:	4875      	ldr	r0, [pc, #468]	; (800181c <BME280_Init+0x23c>)
 8001646:	f006 fbaf 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, HAL_MAX_DELAY);
 800164a:	1d3a      	adds	r2, r7, #4
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2306      	movs	r3, #6
 8001654:	21ec      	movs	r1, #236	; 0xec
 8001656:	4871      	ldr	r0, [pc, #452]	; (800181c <BME280_Init+0x23c>)
 8001658:	f006 fca4 	bl	8007fa4 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	793b      	ldrb	r3, [r7, #4]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <BME280_Init+0x240>)
 800166e:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b69      	ldr	r3, [pc, #420]	; (8001824 <BME280_Init+0x244>)
 8001680:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001682:	7a7b      	ldrb	r3, [r7, #9]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7a3b      	ldrb	r3, [r7, #8]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <BME280_Init+0x248>)
 8001692:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8001694:	238e      	movs	r3, #142	; 0x8e
 8001696:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001698:	1d3a      	adds	r2, r7, #4
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	21ec      	movs	r1, #236	; 0xec
 80016a4:	485d      	ldr	r0, [pc, #372]	; (800181c <BME280_Init+0x23c>)
 80016a6:	f006 fb7f 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, HAL_MAX_DELAY);
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2312      	movs	r3, #18
 80016b4:	21ec      	movs	r1, #236	; 0xec
 80016b6:	4859      	ldr	r0, [pc, #356]	; (800181c <BME280_Init+0x23c>)
 80016b8:	f006 fc74 	bl	8007fa4 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	793b      	ldrb	r3, [r7, #4]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <BME280_Init+0x24c>)
 80016ce:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <BME280_Init+0x250>)
 80016e0:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <BME280_Init+0x254>)
 80016f2:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7abb      	ldrb	r3, [r7, #10]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <BME280_Init+0x258>)
 8001704:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001706:	7b7b      	ldrb	r3, [r7, #13]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7b3b      	ldrb	r3, [r7, #12]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <BME280_Init+0x25c>)
 8001716:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <BME280_Init+0x260>)
 8001728:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800172a:	7c7b      	ldrb	r3, [r7, #17]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	7c3b      	ldrb	r3, [r7, #16]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21a      	sxth	r2, r3
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <BME280_Init+0x264>)
 800173a:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	7cbb      	ldrb	r3, [r7, #18]
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <BME280_Init+0x268>)
 800174c:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800174e:	7d7b      	ldrb	r3, [r7, #21]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	7d3b      	ldrb	r3, [r7, #20]
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <BME280_Init+0x26c>)
 800175e:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 8001760:	23a1      	movs	r3, #161	; 0xa1
 8001762:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	21ec      	movs	r1, #236	; 0xec
 8001770:	482a      	ldr	r0, [pc, #168]	; (800181c <BME280_Init+0x23c>)
 8001772:	f006 fb19 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001776:	1d3a      	adds	r2, r7, #4
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	21ec      	movs	r1, #236	; 0xec
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <BME280_Init+0x23c>)
 8001784:	f006 fc0e 	bl	8007fa4 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8001788:	23e1      	movs	r3, #225	; 0xe1
 800178a:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, HAL_MAX_DELAY);
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	21ec      	movs	r1, #236	; 0xec
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <BME280_Init+0x23c>)
 800179c:	f006 fb04 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, HAL_MAX_DELAY);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2307      	movs	r3, #7
 80017ac:	21ec      	movs	r1, #236	; 0xec
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <BME280_Init+0x23c>)
 80017b0:	f006 fbf8 	bl	8007fa4 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <BME280_Init+0x270>)
 80017ba:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	797b      	ldrb	r3, [r7, #5]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <BME280_Init+0x274>)
 80017cc:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <BME280_Init+0x278>)
 80017d4:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <BME280_Init+0x27c>)
 80017ec:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80017ee:	7abb      	ldrb	r3, [r7, #10]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7a7b      	ldrb	r3, [r7, #9]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <BME280_Init+0x280>)
 8001808:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <BME280_Init+0x284>)
 8001810:	801a      	strh	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000390 	.word	0x20000390
 8001820:	2000026c 	.word	0x2000026c
 8001824:	2000026e 	.word	0x2000026e
 8001828:	20000270 	.word	0x20000270
 800182c:	20000272 	.word	0x20000272
 8001830:	20000274 	.word	0x20000274
 8001834:	20000276 	.word	0x20000276
 8001838:	20000278 	.word	0x20000278
 800183c:	2000027a 	.word	0x2000027a
 8001840:	2000027c 	.word	0x2000027c
 8001844:	2000027e 	.word	0x2000027e
 8001848:	20000280 	.word	0x20000280
 800184c:	20000282 	.word	0x20000282
 8001850:	20000284 	.word	0x20000284
 8001854:	20000288 	.word	0x20000288
 8001858:	20000286 	.word	0x20000286
 800185c:	2000028a 	.word	0x2000028a
 8001860:	2000028c 	.word	0x2000028c
 8001864:	2000028e 	.word	0x2000028e

08001868 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <decToBcd+0x40>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	b2d8      	uxtb	r0, r3
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <decToBcd+0x40>)
 8001886:	fba3 1302 	umull	r1, r3, r3, r2
 800188a:	08d9      	lsrs	r1, r3, #3
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4403      	add	r3, r0
 800189a:	b2db      	uxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	cccccccd 	.word	0xcccccccd

080018ac <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b2db      	uxtb	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <DS3231_Update>:

void DS3231_Update(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 80018ea:	1dba      	adds	r2, r7, #6
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2301      	movs	r3, #1
 80018f4:	21d0      	movs	r1, #208	; 0xd0
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <DS3231_Update+0x58>)
 80018f8:	f006 fa56 	bl	8007da8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, HAL_MAX_DELAY);
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2313      	movs	r3, #19
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <DS3231_Update+0x5c>)
 8001906:	21d0      	movs	r1, #208	; 0xd0
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <DS3231_Update+0x58>)
 800190a:	f006 fb4b 	bl	8007fa4 <HAL_I2C_Master_Receive>
    for (uint8_t i = 0; i < 16; i++) rtcBufferSet[i+1] = rtcBuffer[i];
 800190e:	2300      	movs	r3, #0
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	e009      	b.n	8001928 <DS3231_Update+0x48>
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3301      	adds	r3, #1
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <DS3231_Update+0x5c>)
 800191c:	5c89      	ldrb	r1, [r1, r2]
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <DS3231_Update+0x60>)
 8001920:	54d1      	strb	r1, [r2, r3]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3301      	adds	r3, #1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	d9f2      	bls.n	8001914 <DS3231_Update+0x34>
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000390 	.word	0x20000390
 800193c:	20000294 	.word	0x20000294
 8001940:	200002a8 	.word	0x200002a8

08001944 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[0]);
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <DS3231_getSec+0x14>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ffad 	bl	80018ac <bcdToDec>
 8001952:	4603      	mov	r3, r0
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000294 	.word	0x20000294

0800195c <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[1]);
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <DS3231_getMin+0x14>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffa1 	bl	80018ac <bcdToDec>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000294 	.word	0x20000294

08001974 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[2]);
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <DS3231_getHrs+0x14>)
 800197a:	789b      	ldrb	r3, [r3, #2]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff95 	bl	80018ac <bcdToDec>
 8001982:	4603      	mov	r3, r0
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000294 	.word	0x20000294

0800198c <DS3231_getWeekDay>:

uint8_t DS3231_getWeekDay(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[3]);
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <DS3231_getWeekDay+0x14>)
 8001992:	78db      	ldrb	r3, [r3, #3]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff89 	bl	80018ac <bcdToDec>
 800199a:	4603      	mov	r3, r0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000294 	.word	0x20000294

080019a4 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[4]);
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <DS3231_getDate+0x14>)
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff7d 	bl	80018ac <bcdToDec>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000294 	.word	0x20000294

080019bc <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[5]);
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <DS3231_getMonth+0x14>)
 80019c2:	795b      	ldrb	r3, [r3, #5]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff71 	bl	80018ac <bcdToDec>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000294 	.word	0x20000294

080019d4 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
    return bcdToDec(rtcBuffer[6]);
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <DS3231_getYear+0x14>)
 80019da:	799b      	ldrb	r3, [r3, #6]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff65 	bl	80018ac <bcdToDec>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000294 	.word	0x20000294

080019ec <DS3231_setSec>:
    t *= 0.25;
    t += tempMSB;
    return t;
}

void DS3231_setSec(uint8_t value) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[1] = decToBcd(value);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <decToBcd>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <DS3231_setSec+0x34>)
 8001a04:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2311      	movs	r3, #17
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <DS3231_setSec+0x34>)
 8001a10:	21d0      	movs	r1, #208	; 0xd0
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <DS3231_setSec+0x38>)
 8001a14:	f006 f9c8 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200002a8 	.word	0x200002a8
 8001a24:	20000390 	.word	0x20000390

08001a28 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[2] = decToBcd(value);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff17 	bl	8001868 <decToBcd>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <DS3231_setMin+0x34>)
 8001a40:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2311      	movs	r3, #17
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <DS3231_setMin+0x34>)
 8001a4c:	21d0      	movs	r1, #208	; 0xd0
 8001a4e:	4804      	ldr	r0, [pc, #16]	; (8001a60 <DS3231_setMin+0x38>)
 8001a50:	f006 f9aa 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200002a8 	.word	0x200002a8
 8001a60:	20000390 	.word	0x20000390

08001a64 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[3] = decToBcd(value);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fef9 	bl	8001868 <decToBcd>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <DS3231_setHrs+0x34>)
 8001a7c:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2311      	movs	r3, #17
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <DS3231_setHrs+0x34>)
 8001a88:	21d0      	movs	r1, #208	; 0xd0
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <DS3231_setHrs+0x38>)
 8001a8c:	f006 f98c 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200002a8 	.word	0x200002a8
 8001a9c:	20000390 	.word	0x20000390

08001aa0 <DS3231_setWeekDay>:

void DS3231_setWeekDay(uint8_t value) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[4] = decToBcd(value);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fedb 	bl	8001868 <decToBcd>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <DS3231_setWeekDay+0x34>)
 8001ab8:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2311      	movs	r3, #17
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <DS3231_setWeekDay+0x34>)
 8001ac4:	21d0      	movs	r1, #208	; 0xd0
 8001ac6:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <DS3231_setWeekDay+0x38>)
 8001ac8:	f006 f96e 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200002a8 	.word	0x200002a8
 8001ad8:	20000390 	.word	0x20000390

08001adc <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[5] = decToBcd(value);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff febd 	bl	8001868 <decToBcd>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <DS3231_setDate+0x34>)
 8001af4:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2311      	movs	r3, #17
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <DS3231_setDate+0x34>)
 8001b00:	21d0      	movs	r1, #208	; 0xd0
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <DS3231_setDate+0x38>)
 8001b04:	f006 f950 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200002a8 	.word	0x200002a8
 8001b14:	20000390 	.word	0x20000390

08001b18 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[6] = decToBcd(value);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fe9f 	bl	8001868 <decToBcd>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <DS3231_setMonth+0x34>)
 8001b30:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2311      	movs	r3, #17
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <DS3231_setMonth+0x34>)
 8001b3c:	21d0      	movs	r1, #208	; 0xd0
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <DS3231_setMonth+0x38>)
 8001b40:	f006 f932 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200002a8 	.word	0x200002a8
 8001b50:	20000390 	.word	0x20000390

08001b54 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
    rtcBufferSet[7] = decToBcd(value);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe81 	bl	8001868 <decToBcd>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <DS3231_setYear+0x34>)
 8001b6c:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2311      	movs	r3, #17
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <DS3231_setYear+0x34>)
 8001b78:	21d0      	movs	r1, #208	; 0xd0
 8001b7a:	4804      	ldr	r0, [pc, #16]	; (8001b8c <DS3231_setYear+0x38>)
 8001b7c:	f006 f914 	bl	8007da8 <HAL_I2C_Master_Transmit>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200002a8 	.word	0x200002a8
 8001b8c:	20000390 	.word	0x20000390

08001b90 <I2C_Scan_Bus>:

#if (INIT_DEBUG == 1)
extern UART_HandleTypeDef &DEBUG_UART_I2C;
#endif

void I2C_Scan_Bus(I2C_HandleTypeDef *hi2c) {
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b09a      	sub	sp, #104	; 0x68
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    char info[] = "SCANNING I2C BUS... \r\n";
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <I2C_Scan_Bus+0xbc>)
 8001b9a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ba8:	6020      	str	r0, [r4, #0]
 8001baa:	3404      	adds	r4, #4
 8001bac:	8021      	strh	r1, [r4, #0]
 8001bae:	3402      	adds	r4, #2
 8001bb0:	0c0b      	lsrs	r3, r1, #16
 8001bb2:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&DEBUG_UART_I2C, (uint8_t*)info, strlen(info), 1000);
 8001bb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fb09 	bl	80001d0 <strlen>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	4821      	ldr	r0, [pc, #132]	; (8001c50 <I2C_Scan_Bus+0xc0>)
 8001bcc:	f009 ff63 	bl	800ba96 <HAL_UART_Transmit>

    for(uint16_t i = 0; i < 128; i++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001bd6:	e02f      	b.n	8001c38 <I2C_Scan_Bus+0xa8>
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
 8001bd8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b299      	uxth	r1, r3
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	2201      	movs	r2, #1
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f006 ff23 	bl	8008a30 <HAL_I2C_IsDeviceReady>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11e      	bne.n	8001c2e <I2C_Scan_Bus+0x9e>
        {
        	char msg[64] = {0,};
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	223c      	movs	r2, #60	; 0x3c
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00b f88d 	bl	800cd1c <memset>
            snprintf(msg, 64, "I2C DEVICE: 0x%02X \r\n", i);
 8001c02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c06:	f107 000c 	add.w	r0, r7, #12
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <I2C_Scan_Bus+0xc4>)
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	f00b ff0d 	bl	800da2c <sniprintf>
            HAL_UART_Transmit(&DEBUG_UART_I2C, (uint8_t*)msg, strlen(msg), 1000);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fada 	bl	80001d0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f107 010c 	add.w	r1, r7, #12
 8001c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c28:	4809      	ldr	r0, [pc, #36]	; (8001c50 <I2C_Scan_Bus+0xc0>)
 8001c2a:	f009 ff34 	bl	800ba96 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8001c2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c32:	3301      	adds	r3, #1
 8001c34:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001c38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c3e:	d9cb      	bls.n	8001bd8 <I2C_Scan_Bus+0x48>
        }
    }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3768      	adds	r7, #104	; 0x68
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08013458 	.word	0x08013458
 8001c50:	200005a8 	.word	0x200005a8
 8001c54:	08013440 	.word	0x08013440

08001c58 <wait_for_gpio_state_timeout>:
	}

	while(1){};
}

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	817b      	strh	r3, [r7, #10]
 8001c66:	4613      	mov	r3, r2
 8001c68:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8001c6a:	f004 fca9 	bl	80065c0 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) {
 8001c74:	e011      	b.n	8001c9a <wait_for_gpio_state_timeout+0x42>
        if(timeout != HAL_MAX_DELAY) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d00c      	beq.n	8001c98 <wait_for_gpio_state_timeout+0x40>
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <wait_for_gpio_state_timeout+0x3c>
 8001c84:	f004 fc9c 	bl	80065c0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d201      	bcs.n	8001c98 <wait_for_gpio_state_timeout+0x40>
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
        }
        asm("nop");
 8001c98:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) {
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f005 fedc 	bl	8007a5c <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	7a7b      	ldrb	r3, [r7, #9]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d002      	beq.n	8001cb4 <wait_for_gpio_state_timeout+0x5c>
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d0e0      	beq.n	8001c76 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <I2C_Init>:

void I2C_Init(I2C_HandleTypeDef *hi2c) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]

    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    HAL_I2C_DeInit(hi2c);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f006 f82d 	bl	8007d48 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8001cee:	2311      	movs	r3, #17
 8001cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN;
 8001cf6:	2340      	movs	r3, #64	; 0x40
 8001cf8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4843      	ldr	r0, [pc, #268]	; (8001e10 <I2C_Init+0x150>)
 8001d02:	f005 fc13 	bl	800752c <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4619      	mov	r1, r3
 8001d10:	483f      	ldr	r0, [pc, #252]	; (8001e10 <I2C_Init+0x150>)
 8001d12:	f005 fc0b 	bl	800752c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	483d      	ldr	r0, [pc, #244]	; (8001e10 <I2C_Init+0x150>)
 8001d1c:	f005 feb6 	bl	8007a8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	483a      	ldr	r0, [pc, #232]	; (8001e10 <I2C_Init+0x150>)
 8001d26:	f005 feb1 	bl	8007a8c <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, 1000);
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2140      	movs	r1, #64	; 0x40
 8001d32:	4837      	ldr	r0, [pc, #220]	; (8001e10 <I2C_Init+0x150>)
 8001d34:	f7ff ff90 	bl	8001c58 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, 1000);
 8001d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	4833      	ldr	r0, [pc, #204]	; (8001e10 <I2C_Init+0x150>)
 8001d42:	f7ff ff89 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	4831      	ldr	r0, [pc, #196]	; (8001e10 <I2C_Init+0x150>)
 8001d4c:	f005 fe9e 	bl	8007a8c <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, 1000);
 8001d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d54:	2200      	movs	r2, #0
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	482d      	ldr	r0, [pc, #180]	; (8001e10 <I2C_Init+0x150>)
 8001d5a:	f7ff ff7d 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	482b      	ldr	r0, [pc, #172]	; (8001e10 <I2C_Init+0x150>)
 8001d64:	f005 fe92 	bl	8007a8c <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, 1000);
 8001d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2140      	movs	r1, #64	; 0x40
 8001d70:	4827      	ldr	r0, [pc, #156]	; (8001e10 <I2C_Init+0x150>)
 8001d72:	f7ff ff71 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	4825      	ldr	r0, [pc, #148]	; (8001e10 <I2C_Init+0x150>)
 8001d7c:	f005 fe86 	bl	8007a8c <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, 1000);
 8001d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d84:	2201      	movs	r2, #1
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	4821      	ldr	r0, [pc, #132]	; (8001e10 <I2C_Init+0x150>)
 8001d8a:	f7ff ff65 	bl	8001c58 <wait_for_gpio_state_timeout>

    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	481f      	ldr	r0, [pc, #124]	; (8001e10 <I2C_Init+0x150>)
 8001d94:	f005 fe7a 	bl	8007a8c <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, 1000);
 8001d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	481b      	ldr	r0, [pc, #108]	; (8001e10 <I2C_Init+0x150>)
 8001da2:	f7ff ff59 	bl	8001c58 <wait_for_gpio_state_timeout>

    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001da6:	2312      	movs	r3, #18
 8001da8:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = SCL_PIN;
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	4816      	ldr	r0, [pc, #88]	; (8001e10 <I2C_Init+0x150>)
 8001db6:	f005 fbb9 	bl	800752c <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <I2C_Init+0x150>)
 8001dc6:	f005 fbb1 	bl	800752c <HAL_GPIO_Init>

    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd8:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001dda:	bf00      	nop

    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dea:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001dec:	bf00      	nop

    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001dfe:	bf00      	nop

    HAL_I2C_Init(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f005 fe5d 	bl	8007ac0 <HAL_I2C_Init>
}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40020400 	.word	0x40020400

08001e14 <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	4603      	mov	r3, r0
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	88bb      	ldrh	r3, [r7, #4]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	8b39      	ldrh	r1, [r7, #24]
 8001e3a:	883a      	ldrh	r2, [r7, #0]
 8001e3c:	1a8a      	subs	r2, r1, r2
 8001e3e:	fb03 f202 	mul.w	r2, r3, r2
 8001e42:	8879      	ldrh	r1, [r7, #2]
 8001e44:	88bb      	ldrh	r3, [r7, #4]
 8001e46:	1acb      	subs	r3, r1, r3
 8001e48:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e4c:	883b      	ldrh	r3, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb67 	bl	8000524 <__aeabi_i2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e62:	eef0 0a67 	vmov.f32	s1, s15
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd90      	pop	{r4, r7, pc}

08001e6c <byteL>:

uint8_t byteL(uint16_t val) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	b2db      	uxtb	r3, r3
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <byteH>:

uint8_t byteH(uint16_t val) {
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	b29b      	uxth	r3, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <get_sineval>:

uint32_t sine_val[100];

#define PI 3.1415926

void get_sineval () {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
	for (int i = 0; i<100; i++) sine_val[i] = ((sin(i*2*PI/100) + 1)* (4096/2));
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	e03a      	b.n	8001f52 <get_sineval+0x82>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb1f 	bl	8000524 <__aeabi_i2d>
 8001ee6:	a324      	add	r3, pc, #144	; (adr r3, 8001f78 <get_sineval+0xa8>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb84 	bl	80005f8 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <get_sineval+0x98>)
 8001efe:	f7fe fca5 	bl	800084c <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	ec43 2b17 	vmov	d7, r2, r3
 8001f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0e:	eef0 0a67 	vmov.f32	s1, s15
 8001f12:	f00f fc2d 	bl	8011770 <sin>
 8001f16:	ec51 0b10 	vmov	r0, r1, d0
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <get_sineval+0x9c>)
 8001f20:	f7fe f9b4 	bl	800028c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <get_sineval+0xa0>)
 8001f32:	f7fe fb61 	bl	80005f8 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fe33 	bl	8000ba8 <__aeabi_d2uiz>
 8001f42:	4602      	mov	r2, r0
 8001f44:	490b      	ldr	r1, [pc, #44]	; (8001f74 <get_sineval+0xa4>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b63      	cmp	r3, #99	; 0x63
 8001f56:	ddc1      	ble.n	8001edc <get_sineval+0xc>
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	40590000 	.word	0x40590000
 8001f6c:	3ff00000 	.word	0x3ff00000
 8001f70:	40a00000 	.word	0x40a00000
 8001f74:	2000125c 	.word	0x2000125c
 8001f78:	4d12d84a 	.word	0x4d12d84a
 8001f7c:	400921fb 	.word	0x400921fb

08001f80 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_UART_RxCpltCallback+0x3c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10f      	bne.n	8001fb2 <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_UART_RxCpltCallback+0x40>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	b2d1      	uxtb	r1, r2
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_UART_RxCpltCallback+0x40>)
 8001f9c:	7011      	strb	r1, [r2, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_UART_RxCpltCallback+0x44>)
 8001fa2:	7819      	ldrb	r1, [r3, #0]
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_UART_RxCpltCallback+0x48>)
 8001fa6:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <HAL_UART_RxCpltCallback+0x44>)
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <HAL_UART_RxCpltCallback+0x4c>)
 8001fae:	f009 fe04 	bl	800bbba <HAL_UART_Receive_IT>
		//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	200013fc 	.word	0x200013fc
 8001fc4:	200013fd 	.word	0x200013fd
 8001fc8:	200013ec 	.word	0x200013ec
 8001fcc:	200005a8 	.word	0x200005a8

08001fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	b0bb      	sub	sp, #236	; 0xec
 8001fd4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd6:	f004 fa8d 	bl	80064f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fda:	f002 f9c3 	bl	8004364 <SystemClock_Config>
	//	__HAL_RCC_I2C1_RELEASE_RESET();
	//	HAL_Delay(100);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fde:	f002 fc63 	bl	80048a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fe2:	f002 fc39 	bl	8004858 <MX_DMA_Init>
  MX_FSMC_Init();
 8001fe6:	f002 fd39 	bl	8004a5c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001fea:	f002 fc0b 	bl	8004804 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001fee:	f002 fb6b 	bl	80046c8 <MX_SPI3_Init>
  MX_SPI2_Init();
 8001ff2:	f002 fb33 	bl	800465c <MX_SPI2_Init>
  MX_DAC_Init();
 8001ff6:	f002 fa23 	bl	8004440 <MX_DAC_Init>
  MX_SPI1_Init();
 8001ffa:	f002 faf9 	bl	80045f0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001ffe:	f002 fa55 	bl	80044ac <MX_I2C1_Init>
  MX_IWDG_Init();
 8002002:	f002 fa81 	bl	8004508 <MX_IWDG_Init>
  MX_DMA_Init();
 8002006:	f002 fc27 	bl	8004858 <MX_DMA_Init>
  MX_RTC_Init();
 800200a:	f002 fa97 	bl	800453c <MX_RTC_Init>
  MX_TIM6_Init();
 800200e:	f002 fb91 	bl	8004734 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002012:	f002 fbc3 	bl	800479c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start(&htim6);
 8002016:	48c0      	ldr	r0, [pc, #768]	; (8002318 <main+0x348>)
 8002018:	f009 fa1e 	bl	800b458 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim7);
 800201c:	48bf      	ldr	r0, [pc, #764]	; (800231c <main+0x34c>)
 800201e:	f009 fa1b 	bl	800b458 <HAL_TIM_Base_Start>
    get_sineval();
 8002022:	f7ff ff55 	bl	8001ed0 <get_sineval>
//    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_val, 100, DAC_ALIGN_12B_R);
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2364      	movs	r3, #100	; 0x64
 800202c:	4abc      	ldr	r2, [pc, #752]	; (8002320 <main+0x350>)
 800202e:	2110      	movs	r1, #16
 8002030:	48bc      	ldr	r0, [pc, #752]	; (8002324 <main+0x354>)
 8002032:	f004 fc45 	bl	80068c0 <HAL_DAC_Start_DMA>
    HAL_Delay(2000);
 8002036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800203a:	f004 facd 	bl	80065d8 <HAL_Delay>
    HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 800203e:	2100      	movs	r1, #0
 8002040:	48b8      	ldr	r0, [pc, #736]	; (8002324 <main+0x354>)
 8002042:	f004 fc20 	bl	8006886 <HAL_DAC_Stop>
    HAL_DAC_Stop(&hdac, DAC_CHANNEL_2);
 8002046:	2110      	movs	r1, #16
 8002048:	48b6      	ldr	r0, [pc, #728]	; (8002324 <main+0x354>)
 800204a:	f004 fc1c 	bl	8006886 <HAL_DAC_Stop>

	HAL_RTC_Init(&hrtc);
 800204e:	48b6      	ldr	r0, [pc, #728]	; (8002328 <main+0x358>)
 8002050:	f008 f894 	bl	800a17c <HAL_RTC_Init>
	uint8_t uart_tx_new[] = "\r\n";
 8002054:	4ab5      	ldr	r2, [pc, #724]	; (800232c <main+0x35c>)
 8002056:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	4611      	mov	r1, r2
 800205e:	8019      	strh	r1, [r3, #0]
 8002060:	3302      	adds	r3, #2
 8002062:	0c12      	lsrs	r2, r2, #16
 8002064:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 8002066:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800206a:	2364      	movs	r3, #100	; 0x64
 800206c:	2203      	movs	r2, #3
 800206e:	48b0      	ldr	r0, [pc, #704]	; (8002330 <main+0x360>)
 8002070:	f009 fd11 	bl	800ba96 <HAL_UART_Transmit>
	I2C_Init(&hi2c1);
 8002074:	48af      	ldr	r0, [pc, #700]	; (8002334 <main+0x364>)
 8002076:	f7ff fe23 	bl	8001cc0 <I2C_Init>
	I2C_Scan_Bus(&hi2c1);
 800207a:	48ae      	ldr	r0, [pc, #696]	; (8002334 <main+0x364>)
 800207c:	f7ff fd88 	bl	8001b90 <I2C_Scan_Bus>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 8002080:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002084:	2364      	movs	r3, #100	; 0x64
 8002086:	2203      	movs	r2, #3
 8002088:	48a9      	ldr	r0, [pc, #676]	; (8002330 <main+0x360>)
 800208a:	f009 fd04 	bl	800ba96 <HAL_UART_Transmit>
	W25Q_Init();
 800208e:	f003 fec9 	bl	8005e24 <W25Q_Init>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 8002092:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002096:	2364      	movs	r3, #100	; 0x64
 8002098:	2203      	movs	r2, #3
 800209a:	48a5      	ldr	r0, [pc, #660]	; (8002330 <main+0x360>)
 800209c:	f009 fcfb 	bl	800ba96 <HAL_UART_Transmit>
	BME280_Init();
 80020a0:	f7ff fa9e 	bl	80015e0 <BME280_Init>
	LCD_Init();
 80020a4:	f003 f95d 	bl	8005362 <LCD_Init>
	XPT2046_Init();
 80020a8:	f004 f904 	bl	80062b4 <XPT2046_Init>

	DS3231_Update(); rtcSec = DS3231_getSec(); rtcMin = DS3231_getMin(); rtcHrs = DS3231_getHrs();
 80020ac:	f7ff fc18 	bl	80018e0 <DS3231_Update>
 80020b0:	f7ff fc48 	bl	8001944 <DS3231_getSec>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b9f      	ldr	r3, [pc, #636]	; (8002338 <main+0x368>)
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	f7ff fc4e 	bl	800195c <DS3231_getMin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b9d      	ldr	r3, [pc, #628]	; (800233c <main+0x36c>)
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	f7ff fc54 	bl	8001974 <DS3231_getHrs>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b9b      	ldr	r3, [pc, #620]	; (8002340 <main+0x370>)
 80020d2:	701a      	strb	r2, [r3, #0]
	rtcDate = DS3231_getDate(); rtcMonth = DS3231_getMonth(); rtcYear = DS3231_getYear(); rtcWeekD = DS3231_getWeekDay();
 80020d4:	f7ff fc66 	bl	80019a4 <DS3231_getDate>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	4b99      	ldr	r3, [pc, #612]	; (8002344 <main+0x374>)
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	f7ff fc6c 	bl	80019bc <DS3231_getMonth>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b97      	ldr	r3, [pc, #604]	; (8002348 <main+0x378>)
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	f7ff fc72 	bl	80019d4 <DS3231_getYear>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b95      	ldr	r3, [pc, #596]	; (800234c <main+0x37c>)
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	f7ff fc48 	bl	800198c <DS3231_getWeekDay>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	4b93      	ldr	r3, [pc, #588]	; (8002350 <main+0x380>)
 8002102:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &clockTime, RTC_FORMAT_BIN);
 8002104:	2200      	movs	r2, #0
 8002106:	4993      	ldr	r1, [pc, #588]	; (8002354 <main+0x384>)
 8002108:	4887      	ldr	r0, [pc, #540]	; (8002328 <main+0x358>)
 800210a:	f008 f985 	bl	800a418 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &clockDate, RTC_FORMAT_BIN);
 800210e:	2200      	movs	r2, #0
 8002110:	4991      	ldr	r1, [pc, #580]	; (8002358 <main+0x388>)
 8002112:	4885      	ldr	r0, [pc, #532]	; (8002328 <main+0x358>)
 8002114:	f008 fa85 	bl	800a622 <HAL_RTC_GetDate>

	if (!clockDate.Year) {
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <main+0x388>)
 800211a:	78db      	ldrb	r3, [r3, #3]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d127      	bne.n	8002170 <main+0x1a0>
	clockTime.Hours = rtcHrs;
 8002120:	4b87      	ldr	r3, [pc, #540]	; (8002340 <main+0x370>)
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	4b8b      	ldr	r3, [pc, #556]	; (8002354 <main+0x384>)
 8002126:	701a      	strb	r2, [r3, #0]
	clockTime.Minutes = rtcMin;
 8002128:	4b84      	ldr	r3, [pc, #528]	; (800233c <main+0x36c>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b89      	ldr	r3, [pc, #548]	; (8002354 <main+0x384>)
 800212e:	705a      	strb	r2, [r3, #1]
	clockTime.Seconds = rtcSec +1;
 8002130:	4b81      	ldr	r3, [pc, #516]	; (8002338 <main+0x368>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b86      	ldr	r3, [pc, #536]	; (8002354 <main+0x384>)
 800213a:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &clockTime, RTC_FORMAT_BIN);
 800213c:	2200      	movs	r2, #0
 800213e:	4985      	ldr	r1, [pc, #532]	; (8002354 <main+0x384>)
 8002140:	4879      	ldr	r0, [pc, #484]	; (8002328 <main+0x358>)
 8002142:	f008 f8ac 	bl	800a29e <HAL_RTC_SetTime>
	clockDate.Date = rtcDate;
 8002146:	4b7f      	ldr	r3, [pc, #508]	; (8002344 <main+0x374>)
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	4b83      	ldr	r3, [pc, #524]	; (8002358 <main+0x388>)
 800214c:	709a      	strb	r2, [r3, #2]
	clockDate.Month = rtcMonth;
 800214e:	4b7e      	ldr	r3, [pc, #504]	; (8002348 <main+0x378>)
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	4b81      	ldr	r3, [pc, #516]	; (8002358 <main+0x388>)
 8002154:	705a      	strb	r2, [r3, #1]
	clockDate.Year = rtcYear;
 8002156:	4b7d      	ldr	r3, [pc, #500]	; (800234c <main+0x37c>)
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	4b7f      	ldr	r3, [pc, #508]	; (8002358 <main+0x388>)
 800215c:	70da      	strb	r2, [r3, #3]
	clockDate.WeekDay = rtcWeekD;
 800215e:	4b7c      	ldr	r3, [pc, #496]	; (8002350 <main+0x380>)
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b7d      	ldr	r3, [pc, #500]	; (8002358 <main+0x388>)
 8002164:	701a      	strb	r2, [r3, #0]
	HAL_RTC_SetDate(&hrtc, &clockDate, RTC_FORMAT_BIN);
 8002166:	2200      	movs	r2, #0
 8002168:	497b      	ldr	r1, [pc, #492]	; (8002358 <main+0x388>)
 800216a:	486f      	ldr	r0, [pc, #444]	; (8002328 <main+0x358>)
 800216c:	f008 f9b2 	bl	800a4d4 <HAL_RTC_SetDate>
	}

	char uart_tx[45];
	static const char* weekdays[7] = { "MO", "TU", "WE", "TH", "FR", "SA", "SU" };
	HAL_RTC_GetTime(&hrtc, &clockTime, RTC_FORMAT_BIN);
 8002170:	2200      	movs	r2, #0
 8002172:	4978      	ldr	r1, [pc, #480]	; (8002354 <main+0x384>)
 8002174:	486c      	ldr	r0, [pc, #432]	; (8002328 <main+0x358>)
 8002176:	f008 f94f 	bl	800a418 <HAL_RTC_GetTime>
	snprintf(uart_tx, 45, "INTRTC Time: %02d:%02d:%02d ", clockTime.Hours, clockTime.Minutes, clockTime.Seconds);
 800217a:	4b76      	ldr	r3, [pc, #472]	; (8002354 <main+0x384>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	4b74      	ldr	r3, [pc, #464]	; (8002354 <main+0x384>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	461a      	mov	r2, r3
 8002186:	4b73      	ldr	r3, [pc, #460]	; (8002354 <main+0x384>)
 8002188:	789b      	ldrb	r3, [r3, #2]
 800218a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	9200      	str	r2, [sp, #0]
 8002192:	460b      	mov	r3, r1
 8002194:	4a71      	ldr	r2, [pc, #452]	; (800235c <main+0x38c>)
 8002196:	212d      	movs	r1, #45	; 0x2d
 8002198:	f00b fc48 	bl	800da2c <sniprintf>
	HAL_RTC_GetDate(&hrtc, &clockDate, RTC_FORMAT_BIN);
 800219c:	2200      	movs	r2, #0
 800219e:	496e      	ldr	r1, [pc, #440]	; (8002358 <main+0x388>)
 80021a0:	4861      	ldr	r0, [pc, #388]	; (8002328 <main+0x358>)
 80021a2:	f008 fa3e 	bl	800a622 <HAL_RTC_GetDate>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80021a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f810 	bl	80001d0 <strlen>
 80021b0:	4603      	mov	r3, r0
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80021b8:	2364      	movs	r3, #100	; 0x64
 80021ba:	485d      	ldr	r0, [pc, #372]	; (8002330 <main+0x360>)
 80021bc:	f009 fc6b 	bl	800ba96 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "Date: %02d.%02d.20%02d ", clockDate.Date, clockDate.Month, clockDate.Year);
 80021c0:	4b65      	ldr	r3, [pc, #404]	; (8002358 <main+0x388>)
 80021c2:	789b      	ldrb	r3, [r3, #2]
 80021c4:	4619      	mov	r1, r3
 80021c6:	4b64      	ldr	r3, [pc, #400]	; (8002358 <main+0x388>)
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b62      	ldr	r3, [pc, #392]	; (8002358 <main+0x388>)
 80021ce:	78db      	ldrb	r3, [r3, #3]
 80021d0:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	9200      	str	r2, [sp, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	4a61      	ldr	r2, [pc, #388]	; (8002360 <main+0x390>)
 80021dc:	212d      	movs	r1, #45	; 0x2d
 80021de:	f00b fc25 	bl	800da2c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80021e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fd fff2 	bl	80001d0 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80021f4:	2364      	movs	r3, #100	; 0x64
 80021f6:	484e      	ldr	r0, [pc, #312]	; (8002330 <main+0x360>)
 80021f8:	f009 fc4d 	bl	800ba96 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "%s \r\n", weekdays[(7 + clockDate.WeekDay - 1) % 7]);
 80021fc:	4b56      	ldr	r3, [pc, #344]	; (8002358 <main+0x388>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	1d9a      	adds	r2, r3, #6
 8002202:	4b58      	ldr	r3, [pc, #352]	; (8002364 <main+0x394>)
 8002204:	fb83 1302 	smull	r1, r3, r3, r2
 8002208:	4413      	add	r3, r2
 800220a:	1099      	asrs	r1, r3, #2
 800220c:	17d3      	asrs	r3, r2, #31
 800220e:	1ac9      	subs	r1, r1, r3
 8002210:	460b      	mov	r3, r1
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a5b      	subs	r3, r3, r1
 8002216:	1ad1      	subs	r1, r2, r3
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <main+0x398>)
 800221a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800221e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002222:	4a52      	ldr	r2, [pc, #328]	; (800236c <main+0x39c>)
 8002224:	212d      	movs	r1, #45	; 0x2d
 8002226:	f00b fc01 	bl	800da2c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 800222a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800222e:	4618      	mov	r0, r3
 8002230:	f7fd ffce 	bl	80001d0 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800223c:	2364      	movs	r3, #100	; 0x64
 800223e:	483c      	ldr	r0, [pc, #240]	; (8002330 <main+0x360>)
 8002240:	f009 fc29 	bl	800ba96 <HAL_UART_Transmit>

	if (!rtcYear) {
 8002244:	4b41      	ldr	r3, [pc, #260]	; (800234c <main+0x37c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d124      	bne.n	8002296 <main+0x2c6>
	DS3231_Update();
 800224c:	f7ff fb48 	bl	80018e0 <DS3231_Update>
	DS3231_setHrs(clockTime.Hours);
 8002250:	4b40      	ldr	r3, [pc, #256]	; (8002354 <main+0x384>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fc05 	bl	8001a64 <DS3231_setHrs>
	DS3231_setMin(clockTime.Minutes);
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <main+0x384>)
 800225c:	785b      	ldrb	r3, [r3, #1]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fbe2 	bl	8001a28 <DS3231_setMin>
	DS3231_setSec(clockTime.Seconds);
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <main+0x384>)
 8002266:	789b      	ldrb	r3, [r3, #2]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fbbf 	bl	80019ec <DS3231_setSec>
	DS3231_setDate(clockDate.Date);
 800226e:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <main+0x388>)
 8002270:	789b      	ldrb	r3, [r3, #2]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc32 	bl	8001adc <DS3231_setDate>
	DS3231_setMonth(clockDate.Month);
 8002278:	4b37      	ldr	r3, [pc, #220]	; (8002358 <main+0x388>)
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc4b 	bl	8001b18 <DS3231_setMonth>
	DS3231_setYear(clockDate.Year);
 8002282:	4b35      	ldr	r3, [pc, #212]	; (8002358 <main+0x388>)
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fc64 	bl	8001b54 <DS3231_setYear>
	DS3231_setWeekDay(clockDate.WeekDay);
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <main+0x388>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fc05 	bl	8001aa0 <DS3231_setWeekDay>
	}

	DS3231_Update(); rtcSec = DS3231_getSec(); rtcMin = DS3231_getMin(); rtcHrs = DS3231_getHrs();
 8002296:	f7ff fb23 	bl	80018e0 <DS3231_Update>
 800229a:	f7ff fb53 	bl	8001944 <DS3231_getSec>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <main+0x368>)
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	f7ff fb59 	bl	800195c <DS3231_getMin>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <main+0x36c>)
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	f7ff fb5f 	bl	8001974 <DS3231_getHrs>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <main+0x370>)
 80022bc:	701a      	strb	r2, [r3, #0]
	rtcDate = DS3231_getDate(); rtcMonth = DS3231_getMonth(); rtcYear = DS3231_getYear(); rtcWeekD = DS3231_getWeekDay();
 80022be:	f7ff fb71 	bl	80019a4 <DS3231_getDate>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <main+0x374>)
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	f7ff fb77 	bl	80019bc <DS3231_getMonth>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <main+0x378>)
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	f7ff fb7d 	bl	80019d4 <DS3231_getYear>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <main+0x37c>)
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	f7ff fb53 	bl	800198c <DS3231_getWeekDay>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <main+0x380>)
 80022ec:	701a      	strb	r2, [r3, #0]

	snprintf(uart_tx, 45, "DS3231 Time: %02d:%02d:%02d ", rtcHrs, rtcMin, rtcSec);
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <main+0x370>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <main+0x36c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <main+0x368>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	9200      	str	r2, [sp, #0]
 8002306:	460b      	mov	r3, r1
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <main+0x3a0>)
 800230a:	212d      	movs	r1, #45	; 0x2d
 800230c:	f00b fb8e 	bl	800da2c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 8002310:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002314:	4618      	mov	r0, r3
 8002316:	e02d      	b.n	8002374 <main+0x3a4>
 8002318:	20000518 	.word	0x20000518
 800231c:	20000560 	.word	0x20000560
 8002320:	2000125c 	.word	0x2000125c
 8002324:	200002bc 	.word	0x200002bc
 8002328:	200003f0 	.word	0x200003f0
 800232c:	0801364c 	.word	0x0801364c
 8002330:	200005a8 	.word	0x200005a8
 8002334:	20000390 	.word	0x20000390
 8002338:	20000655 	.word	0x20000655
 800233c:	20000656 	.word	0x20000656
 8002340:	20000657 	.word	0x20000657
 8002344:	20000658 	.word	0x20000658
 8002348:	20000659 	.word	0x20000659
 800234c:	2000065b 	.word	0x2000065b
 8002350:	2000065a 	.word	0x2000065a
 8002354:	2000063c 	.word	0x2000063c
 8002358:	20000650 	.word	0x20000650
 800235c:	08013554 	.word	0x08013554
 8002360:	08013574 	.word	0x08013574
 8002364:	92492493 	.word	0x92492493
 8002368:	20000008 	.word	0x20000008
 800236c:	0801358c 	.word	0x0801358c
 8002370:	08013594 	.word	0x08013594
 8002374:	f7fd ff2c 	bl	80001d0 <strlen>
 8002378:	4603      	mov	r3, r0
 800237a:	b29a      	uxth	r2, r3
 800237c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002380:	2364      	movs	r3, #100	; 0x64
 8002382:	48a3      	ldr	r0, [pc, #652]	; (8002610 <main+0x640>)
 8002384:	f009 fb87 	bl	800ba96 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "Date: %02d.%02d.20%02d ", rtcDate, rtcMonth, rtcYear);
 8002388:	4ba2      	ldr	r3, [pc, #648]	; (8002614 <main+0x644>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	4ba2      	ldr	r3, [pc, #648]	; (8002618 <main+0x648>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	4ba1      	ldr	r3, [pc, #644]	; (800261c <main+0x64c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9200      	str	r2, [sp, #0]
 80023a0:	460b      	mov	r3, r1
 80023a2:	4a9f      	ldr	r2, [pc, #636]	; (8002620 <main+0x650>)
 80023a4:	212d      	movs	r1, #45	; 0x2d
 80023a6:	f00b fb41 	bl	800da2c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80023aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fd ff0e 	bl	80001d0 <strlen>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	4894      	ldr	r0, [pc, #592]	; (8002610 <main+0x640>)
 80023c0:	f009 fb69 	bl	800ba96 <HAL_UART_Transmit>
	snprintf(uart_tx, 45, "%s \r\n", weekdays[(7 + rtcWeekD - 1) % 7]);
 80023c4:	4b97      	ldr	r3, [pc, #604]	; (8002624 <main+0x654>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	1d9a      	adds	r2, r3, #6
 80023ca:	4b97      	ldr	r3, [pc, #604]	; (8002628 <main+0x658>)
 80023cc:	fb83 1302 	smull	r1, r3, r3, r2
 80023d0:	4413      	add	r3, r2
 80023d2:	1099      	asrs	r1, r3, #2
 80023d4:	17d3      	asrs	r3, r2, #31
 80023d6:	1ac9      	subs	r1, r1, r3
 80023d8:	460b      	mov	r3, r1
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a5b      	subs	r3, r3, r1
 80023de:	1ad1      	subs	r1, r2, r3
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <main+0x65c>)
 80023e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023e6:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80023ea:	4a91      	ldr	r2, [pc, #580]	; (8002630 <main+0x660>)
 80023ec:	212d      	movs	r1, #45	; 0x2d
 80023ee:	f00b fb1d 	bl	800da2c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 80023f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fd feea 	bl	80001d0 <strlen>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b29a      	uxth	r2, r3
 8002400:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002404:	2364      	movs	r3, #100	; 0x64
 8002406:	4882      	ldr	r0, [pc, #520]	; (8002610 <main+0x640>)
 8002408:	f009 fb45 	bl	800ba96 <HAL_UART_Transmit>

	temperature = BME280_getTemperature(-1);
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7fe feea 	bl	80011e8 <BME280_getTemperature>
 8002414:	ee10 3a10 	vmov	r3, s0
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f895 	bl	8000548 <__aeabi_f2d>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4984      	ldr	r1, [pc, #528]	; (8002634 <main+0x664>)
 8002424:	e9c1 2300 	strd	r2, r3, [r1]
	humidity = BME280_getHumidity(-1);
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f7fe ff54 	bl	80012d8 <BME280_getHumidity>
 8002430:	ee10 3a10 	vmov	r3, s0
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f887 	bl	8000548 <__aeabi_f2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	497e      	ldr	r1, [pc, #504]	; (8002638 <main+0x668>)
 8002440:	e9c1 2300 	strd	r2, r3, [r1]
	pressure = (uint16_t)BME280_getPressure();
 8002444:	f7fe ffea 	bl	800141c <BME280_getPressure>
 8002448:	eef0 7a40 	vmov.f32	s15, s0
 800244c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002450:	ee17 3a90 	vmov	r3, s15
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b79      	ldr	r3, [pc, #484]	; (800263c <main+0x66c>)
 8002458:	801a      	strh	r2, [r3, #0]
	snprintf(uart_tx, 45, "BME280 T: %.1f 'C | H: %.1f %% | P: %04d HPa \r\n", temperature, humidity, pressure);
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <main+0x664>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	4975      	ldr	r1, [pc, #468]	; (8002638 <main+0x668>)
 8002462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002466:	4c75      	ldr	r4, [pc, #468]	; (800263c <main+0x66c>)
 8002468:	8824      	ldrh	r4, [r4, #0]
 800246a:	4625      	mov	r5, r4
 800246c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8002470:	9504      	str	r5, [sp, #16]
 8002472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002476:	e9cd 2300 	strd	r2, r3, [sp]
 800247a:	4a71      	ldr	r2, [pc, #452]	; (8002640 <main+0x670>)
 800247c:	212d      	movs	r1, #45	; 0x2d
 800247e:	4620      	mov	r0, r4
 8002480:	f00b fad4 	bl	800da2c <sniprintf>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 8002484:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002488:	2364      	movs	r3, #100	; 0x64
 800248a:	2203      	movs	r2, #3
 800248c:	4860      	ldr	r0, [pc, #384]	; (8002610 <main+0x640>)
 800248e:	f009 fb02 	bl	800ba96 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_tx, strlen(uart_tx), 100);
 8002492:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd fe9a 	bl	80001d0 <strlen>
 800249c:	4603      	mov	r3, r0
 800249e:	b29a      	uxth	r2, r3
 80024a0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80024a4:	2364      	movs	r3, #100	; 0x64
 80024a6:	485a      	ldr	r0, [pc, #360]	; (8002610 <main+0x640>)
 80024a8:	f009 faf5 	bl	800ba96 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, uart_tx_new, sizeof(uart_tx_new), 100);
 80024ac:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80024b0:	2364      	movs	r3, #100	; 0x64
 80024b2:	2203      	movs	r2, #3
 80024b4:	4856      	ldr	r0, [pc, #344]	; (8002610 <main+0x640>)
 80024b6:	f009 faee 	bl	800ba96 <HAL_UART_Transmit>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 80024ba:	23ff      	movs	r3, #255	; 0xff
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80024c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024c6:	2100      	movs	r1, #0
 80024c8:	2000      	movs	r0, #0
 80024ca:	f002 fbf5 	bl	8004cb8 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80024d6:	f240 321e 	movw	r2, #798	; 0x31e
 80024da:	2101      	movs	r1, #1
 80024dc:	2001      	movs	r0, #1
 80024de:	f002 fbeb 	bl	8004cb8 <LCD_Rect_Fill>

	//	uint8_t flashOUT[10] = {0};
	//	W25Q_Load_Page(15, flashOUT, 10);
	//	HAL_UART_Transmit(&huart1, flashOUT, sizeof(flashOUT), 100);

	for (uint16_t i = 0; i < 499; i++) hT[i] =  byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80024e8:	e027      	b.n	800253a <main+0x56a>
 80024ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fdc9 	bl	8001090 <AT24XX_Read>
 80024fe:	4603      	mov	r3, r0
 8002500:	461c      	mov	r4, r3
 8002502:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	b29b      	uxth	r3, r3
 800250a:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fdbd 	bl	8001090 <AT24XX_Read>
 8002516:	4603      	mov	r3, r0
 8002518:	4619      	mov	r1, r3
 800251a:	4620      	mov	r0, r4
 800251c:	f7ff fcc2 	bl	8001ea4 <byteS>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002528:	b211      	sxth	r1, r2
 800252a:	4a46      	ldr	r2, [pc, #280]	; (8002644 <main+0x674>)
 800252c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002534:	3301      	adds	r3, #1
 8002536:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800253a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800253e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002542:	d9d2      	bls.n	80024ea <main+0x51a>
	for (uint16_t i = 0; i < 499; i++) hH[i] =  byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8002544:	2300      	movs	r3, #0
 8002546:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800254a:	e027      	b.n	800259c <main+0x5cc>
 800254c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002550:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002554:	b29b      	uxth	r3, r3
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fd98 	bl	8001090 <AT24XX_Read>
 8002560:	4603      	mov	r3, r0
 8002562:	461c      	mov	r4, r3
 8002564:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	b29b      	uxth	r3, r3
 800256c:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002570:	b29b      	uxth	r3, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fd8c 	bl	8001090 <AT24XX_Read>
 8002578:	4603      	mov	r3, r0
 800257a:	4619      	mov	r1, r3
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff fc91 	bl	8001ea4 <byteS>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800258a:	b211      	sxth	r1, r2
 800258c:	4a2e      	ldr	r2, [pc, #184]	; (8002648 <main+0x678>)
 800258e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002592:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002596:	3301      	adds	r3, #1
 8002598:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800259c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80025a0:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80025a4:	d9d2      	bls.n	800254c <main+0x57c>
	for (uint16_t i = 0; i < 499; i++) hP[i] =  byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 80025ac:	e027      	b.n	80025fe <main+0x62e>
 80025ae:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80025b2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fd67 	bl	8001090 <AT24XX_Read>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461c      	mov	r4, r3
 80025c6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fd5b 	bl	8001090 <AT24XX_Read>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff fc60 	bl	8001ea4 <byteS>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80025ec:	b211      	sxth	r1, r2
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <main+0x67c>)
 80025f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80025f4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80025f8:	3301      	adds	r3, #1
 80025fa:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 80025fe:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002602:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8002606:	d9d2      	bls.n	80025ae <main+0x5de>
	//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));
	//
	//	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
	//	HAL_UART_Receive_DMA (&huart1, rx_buffer, UART_RX_BUFFER_SIZE);

	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800260e:	e028      	b.n	8002662 <main+0x692>
 8002610:	200005a8 	.word	0x200005a8
 8002614:	20000658 	.word	0x20000658
 8002618:	20000659 	.word	0x20000659
 800261c:	2000065b 	.word	0x2000065b
 8002620:	08013574 	.word	0x08013574
 8002624:	2000065a 	.word	0x2000065a
 8002628:	92492493 	.word	0x92492493
 800262c:	20000008 	.word	0x20000008
 8002630:	0801358c 	.word	0x0801358c
 8002634:	20000660 	.word	0x20000660
 8002638:	20000670 	.word	0x20000670
 800263c:	200006a0 	.word	0x200006a0
 8002640:	080135b4 	.word	0x080135b4
 8002644:	200006a4 	.word	0x200006a4
 8002648:	20000a8c 	.word	0x20000a8c
 800264c:	20000e74 	.word	0x20000e74
 8002650:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <main+0x878>)
 8002652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002656:	6353      	str	r3, [r2, #52]	; 0x34
 8002658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265c:	3301      	adds	r3, #1
 800265e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002662:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d9f1      	bls.n	8002650 <main+0x680>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_IWDG_Refresh(&hiwdg); //IWDG->KR = 0x0000AAAAU;
 800266c:	4877      	ldr	r0, [pc, #476]	; (800284c <main+0x87c>)
 800266e:	f006 fffa 	bl	8009666 <HAL_IWDG_Refresh>
		if (HAL_I2C_Init(&hi2c1) != HAL_OK) I2C_Init(&hi2c1);
 8002672:	4877      	ldr	r0, [pc, #476]	; (8002850 <main+0x880>)
 8002674:	f005 fa24 	bl	8007ac0 <HAL_I2C_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <main+0x6b4>
 800267e:	4874      	ldr	r0, [pc, #464]	; (8002850 <main+0x880>)
 8002680:	f7ff fb1e 	bl	8001cc0 <I2C_Init>
//		rtcDate = clockDate.Date;
//		rtcMonth = clockDate.Month;
//		rtcYear = clockDate.Year;
//		rtcWeekD = clockDate.WeekDay;

		DS3231_Update(); rtcSec = DS3231_getSec(); rtcMin = DS3231_getMin(); rtcHrs = DS3231_getHrs();
 8002684:	f7ff f92c 	bl	80018e0 <DS3231_Update>
 8002688:	f7ff f95c 	bl	8001944 <DS3231_getSec>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	4b70      	ldr	r3, [pc, #448]	; (8002854 <main+0x884>)
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	f7ff f962 	bl	800195c <DS3231_getMin>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	4b6e      	ldr	r3, [pc, #440]	; (8002858 <main+0x888>)
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	f7ff f968 	bl	8001974 <DS3231_getHrs>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b6c      	ldr	r3, [pc, #432]	; (800285c <main+0x88c>)
 80026aa:	701a      	strb	r2, [r3, #0]
		rtcDate = DS3231_getDate(); rtcMonth = DS3231_getMonth(); rtcYear = DS3231_getYear(); rtcWeekD = DS3231_getWeekDay();
 80026ac:	f7ff f97a 	bl	80019a4 <DS3231_getDate>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <main+0x890>)
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	f7ff f980 	bl	80019bc <DS3231_getMonth>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	4b68      	ldr	r3, [pc, #416]	; (8002864 <main+0x894>)
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	f7ff f986 	bl	80019d4 <DS3231_getYear>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <main+0x898>)
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	f7ff f95c 	bl	800198c <DS3231_getWeekDay>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b64      	ldr	r3, [pc, #400]	; (800286c <main+0x89c>)
 80026da:	701a      	strb	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 80026dc:	2120      	movs	r1, #32
 80026de:	4864      	ldr	r0, [pc, #400]	; (8002870 <main+0x8a0>)
 80026e0:	f005 f9bc 	bl	8007a5c <HAL_GPIO_ReadPin>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d12c      	bne.n	8002744 <main+0x774>

			uint16_t touchX = getX();
 80026ea:	f003 fea5 	bl	8006438 <getX>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			uint16_t touchY = getY();
 80026f4:	f003 feba 	bl	800646c <getY>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			if (touchX && touchY && touchX != 0x0DB) {
 80026fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <main+0x75c>
 8002706:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <main+0x75c>
 800270e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002712:	2bdb      	cmp	r3, #219	; 0xdb
 8002714:	d00a      	beq.n	800272c <main+0x75c>
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8002716:	f8b7 109a 	ldrh.w	r1, [r7, #154]	; 0x9a
 800271a:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 800271e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	2201      	movs	r2, #1
 8002728:	f002 fac6 	bl	8004cb8 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800272c:	2201      	movs	r2, #1
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	4850      	ldr	r0, [pc, #320]	; (8002874 <main+0x8a4>)
 8002732:	f005 f9ab 	bl	8007a8c <HAL_GPIO_WritePin>
			touchX = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			touchY = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002742:	e004      	b.n	800274e <main+0x77e>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	484a      	ldr	r0, [pc, #296]	; (8002874 <main+0x8a4>)
 800274a:	f005 f99f 	bl	8007a8c <HAL_GPIO_WritePin>

		if (rtcSec % 2 == 0)
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <main+0x884>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <main+0x798>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	2140      	movs	r1, #64	; 0x40
 8002760:	4844      	ldr	r0, [pc, #272]	; (8002874 <main+0x8a4>)
 8002762:	f005 f993 	bl	8007a8c <HAL_GPIO_WritePin>
 8002766:	e004      	b.n	8002772 <main+0x7a2>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2140      	movs	r1, #64	; 0x40
 800276c:	4841      	ldr	r0, [pc, #260]	; (8002874 <main+0x8a4>)
 800276e:	f005 f98d 	bl	8007a8c <HAL_GPIO_WritePin>

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <main+0x8a8>)
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <main+0x884>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	f43f af76 	beq.w	800266c <main+0x69c>

			sprintf(clockPrint, "%02d", rtcSecLast);
 8002780:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <main+0x8a8>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800278a:	493c      	ldr	r1, [pc, #240]	; (800287c <main+0x8ac>)
 800278c:	4618      	mov	r0, r3
 800278e:	f00b f981 	bl	800da94 <siprintf>
			LCD_Font(630, 85, clockPrint, &DejaVu_Sans_112, 1, BLACK);
 8002792:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002796:	2300      	movs	r3, #0
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	2301      	movs	r3, #1
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <main+0x8b0>)
 80027a0:	2155      	movs	r1, #85	; 0x55
 80027a2:	f240 2076 	movw	r0, #630	; 0x276
 80027a6:	f002 fd62 	bl	800526e <LCD_Font>
			sprintf(clockPrint, "%02d", rtcSec);
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <main+0x884>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027b4:	4931      	ldr	r1, [pc, #196]	; (800287c <main+0x8ac>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f00b f96c 	bl	800da94 <siprintf>
			LCD_Font(630, 85, clockPrint, &DejaVu_Sans_112, 1, ORANGE);
 80027bc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80027c0:	4b30      	ldr	r3, [pc, #192]	; (8002884 <main+0x8b4>)
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2301      	movs	r3, #1
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <main+0x8b0>)
 80027ca:	2155      	movs	r1, #85	; 0x55
 80027cc:	f240 2076 	movw	r0, #630	; 0x276
 80027d0:	f002 fd4d 	bl	800526e <LCD_Font>

			LCD_Circle(300, 60, 10, 0, 1, ORANGE);
 80027d4:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <main+0x8b4>)
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2301      	movs	r3, #1
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2300      	movs	r3, #0
 80027de:	220a      	movs	r2, #10
 80027e0:	213c      	movs	r1, #60	; 0x3c
 80027e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027e6:	f002 fb6c 	bl	8004ec2 <LCD_Circle>
			LCD_Circle(300, 120, 10, 0, 1, ORANGE);
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <main+0x8b4>)
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2300      	movs	r3, #0
 80027f4:	220a      	movs	r2, #10
 80027f6:	2178      	movs	r1, #120	; 0x78
 80027f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027fc:	f002 fb61 	bl	8004ec2 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <main+0x884>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d03c      	beq.n	8002888 <main+0x8b8>
				LCD_Circle(300, 60, 9, 1, 1, ORANGE);
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <main+0x8b4>)
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2301      	movs	r3, #1
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2301      	movs	r3, #1
 8002818:	2209      	movs	r2, #9
 800281a:	213c      	movs	r1, #60	; 0x3c
 800281c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002820:	f002 fb4f 	bl	8004ec2 <LCD_Circle>
				LCD_Circle(300, 120, 9, 1, 1, ORANGE);
 8002824:	4b17      	ldr	r3, [pc, #92]	; (8002884 <main+0x8b4>)
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2301      	movs	r3, #1
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2301      	movs	r3, #1
 800282e:	2209      	movs	r2, #9
 8002830:	2178      	movs	r1, #120	; 0x78
 8002832:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002836:	f002 fb44 	bl	8004ec2 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <main+0x8a0>)
 8002842:	f005 f923 	bl	8007a8c <HAL_GPIO_WritePin>
 8002846:	e03b      	b.n	80028c0 <main+0x8f0>
 8002848:	40010000 	.word	0x40010000
 800284c:	200003e4 	.word	0x200003e4
 8002850:	20000390 	.word	0x20000390
 8002854:	20000655 	.word	0x20000655
 8002858:	20000656 	.word	0x20000656
 800285c:	20000657 	.word	0x20000657
 8002860:	20000658 	.word	0x20000658
 8002864:	20000659 	.word	0x20000659
 8002868:	2000065b 	.word	0x2000065b
 800286c:	2000065a 	.word	0x2000065a
 8002870:	40020800 	.word	0x40020800
 8002874:	40020000 	.word	0x40020000
 8002878:	20000000 	.word	0x20000000
 800287c:	080135e4 	.word	0x080135e4
 8002880:	0802190c 	.word	0x0802190c
 8002884:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(300, 60, 9, 1, 1, BLACK);
 8002888:	2300      	movs	r3, #0
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	2301      	movs	r3, #1
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2301      	movs	r3, #1
 8002892:	2209      	movs	r2, #9
 8002894:	213c      	movs	r1, #60	; 0x3c
 8002896:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800289a:	f002 fb12 	bl	8004ec2 <LCD_Circle>
				LCD_Circle(300, 120, 9, 1, 1, BLACK);
 800289e:	2300      	movs	r3, #0
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	2301      	movs	r3, #1
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2301      	movs	r3, #1
 80028a8:	2209      	movs	r2, #9
 80028aa:	2178      	movs	r1, #120	; 0x78
 80028ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028b0:	f002 fb07 	bl	8004ec2 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ba:	48ba      	ldr	r0, [pc, #744]	; (8002ba4 <main+0xbd4>)
 80028bc:	f005 f8e6 	bl	8007a8c <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 80028c0:	4bb9      	ldr	r3, [pc, #740]	; (8002ba8 <main+0xbd8>)
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	4bb9      	ldr	r3, [pc, #740]	; (8002bac <main+0xbdc>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f001 8089 	beq.w	80039e0 <main+0x1a10>


				sprintf(clockPrint, "%02d", rtcMinLast);
 80028ce:	4bb6      	ldr	r3, [pc, #728]	; (8002ba8 <main+0xbd8>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028d8:	49b5      	ldr	r1, [pc, #724]	; (8002bb0 <main+0xbe0>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f00b f8da 	bl	800da94 <siprintf>
				LCD_Font(310, 170, clockPrint, &DejaVu_Sans_112, 2, BLACK);
 80028e0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80028e4:	2300      	movs	r3, #0
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	2302      	movs	r3, #2
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	4bb1      	ldr	r3, [pc, #708]	; (8002bb4 <main+0xbe4>)
 80028ee:	21aa      	movs	r1, #170	; 0xaa
 80028f0:	f44f 709b 	mov.w	r0, #310	; 0x136
 80028f4:	f002 fcbb 	bl	800526e <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 80028f8:	4bac      	ldr	r3, [pc, #688]	; (8002bac <main+0xbdc>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002902:	49ab      	ldr	r1, [pc, #684]	; (8002bb0 <main+0xbe0>)
 8002904:	4618      	mov	r0, r3
 8002906:	f00b f8c5 	bl	800da94 <siprintf>
				LCD_Font(310, 170, clockPrint, &DejaVu_Sans_112, 2, ORANGE);
 800290a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800290e:	4baa      	ldr	r3, [pc, #680]	; (8002bb8 <main+0xbe8>)
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2302      	movs	r3, #2
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4ba7      	ldr	r3, [pc, #668]	; (8002bb4 <main+0xbe4>)
 8002918:	21aa      	movs	r1, #170	; 0xaa
 800291a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800291e:	f002 fca6 	bl	800526e <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8002922:	4ba6      	ldr	r3, [pc, #664]	; (8002bbc <main+0xbec>)
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	4ba6      	ldr	r3, [pc, #664]	; (8002bc0 <main+0xbf0>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	f000 80ea 	beq.w	8002b04 <main+0xb34>

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8002930:	4ba2      	ldr	r3, [pc, #648]	; (8002bbc <main+0xbec>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800293a:	499d      	ldr	r1, [pc, #628]	; (8002bb0 <main+0xbe0>)
 800293c:	4618      	mov	r0, r3
 800293e:	f00b f8a9 	bl	800da94 <siprintf>
					LCD_Font(0, 170, clockPrint, &DejaVu_Sans_112, 2, BLACK);
 8002942:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002946:	2300      	movs	r3, #0
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <main+0xbe4>)
 8002950:	21aa      	movs	r1, #170	; 0xaa
 8002952:	2000      	movs	r0, #0
 8002954:	f002 fc8b 	bl	800526e <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <main+0xbf0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002962:	4993      	ldr	r1, [pc, #588]	; (8002bb0 <main+0xbe0>)
 8002964:	4618      	mov	r0, r3
 8002966:	f00b f895 	bl	800da94 <siprintf>
					LCD_Font(0, 170, clockPrint, &DejaVu_Sans_112, 2, ORANGE);
 800296a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800296e:	4b92      	ldr	r3, [pc, #584]	; (8002bb8 <main+0xbe8>)
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2302      	movs	r3, #2
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <main+0xbe4>)
 8002978:	21aa      	movs	r1, #170	; 0xaa
 800297a:	2000      	movs	r0, #0
 800297c:	f002 fc77 	bl	800526e <LCD_Font>

					if (rtcWeekDLast != rtcWeekD) {
 8002980:	4b90      	ldr	r3, [pc, #576]	; (8002bc4 <main+0xbf4>)
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	4b90      	ldr	r3, [pc, #576]	; (8002bc8 <main+0xbf8>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	f000 80af 	beq.w	8002aec <main+0xb1c>

						static const char* days[7] = { "MO", "TU", "WE", "TH", "FR", "SA", "SU" };
						LCD_Font(710, 125, days[(7 + rtcWeekD - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800298e:	4b8e      	ldr	r3, [pc, #568]	; (8002bc8 <main+0xbf8>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	1d5a      	adds	r2, r3, #5
 8002994:	4b8d      	ldr	r3, [pc, #564]	; (8002bcc <main+0xbfc>)
 8002996:	fb83 1302 	smull	r1, r3, r3, r2
 800299a:	4413      	add	r3, r2
 800299c:	1099      	asrs	r1, r3, #2
 800299e:	17d3      	asrs	r3, r2, #31
 80029a0:	1ac9      	subs	r1, r1, r3
 80029a2:	460b      	mov	r3, r1
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a5b      	subs	r3, r3, r1
 80029a8:	1ad1      	subs	r1, r2, r3
 80029aa:	4b89      	ldr	r3, [pc, #548]	; (8002bd0 <main+0xc00>)
 80029ac:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80029b0:	2300      	movs	r3, #0
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2301      	movs	r3, #1
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4b86      	ldr	r3, [pc, #536]	; (8002bd4 <main+0xc04>)
 80029ba:	217d      	movs	r1, #125	; 0x7d
 80029bc:	f240 20c6 	movw	r0, #710	; 0x2c6
 80029c0:	f002 fc55 	bl	800526e <LCD_Font>
						LCD_Font(710, 125, days[(7 + rtcWeekD - 1) % 7], &DejaVu_Sans_48, 1, CYAN);
 80029c4:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <main+0xbf8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	1d9a      	adds	r2, r3, #6
 80029ca:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <main+0xbfc>)
 80029cc:	fb83 1302 	smull	r1, r3, r3, r2
 80029d0:	4413      	add	r3, r2
 80029d2:	1099      	asrs	r1, r3, #2
 80029d4:	17d3      	asrs	r3, r2, #31
 80029d6:	1ac9      	subs	r1, r1, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a5b      	subs	r3, r3, r1
 80029de:	1ad1      	subs	r1, r2, r3
 80029e0:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <main+0xc00>)
 80029e2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80029e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	4b78      	ldr	r3, [pc, #480]	; (8002bd4 <main+0xc04>)
 80029f2:	217d      	movs	r1, #125	; 0x7d
 80029f4:	f240 20c6 	movw	r0, #710	; 0x2c6
 80029f8:	f002 fc39 	bl	800526e <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(600, 125, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 80029fc:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <main+0xc08>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	f103 010a 	add.w	r1, r3, #10
 8002a04:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <main+0xc0c>)
 8002a06:	fb83 2301 	smull	r2, r3, r3, r1
 8002a0a:	105a      	asrs	r2, r3, #1
 8002a0c:	17cb      	asrs	r3, r1, #31
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	1aca      	subs	r2, r1, r3
 8002a1a:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <main+0xc10>)
 8002a1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2301      	movs	r3, #1
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <main+0xc04>)
 8002a2a:	217d      	movs	r1, #125	; 0x7d
 8002a2c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a30:	f002 fc1d 	bl	800526e <LCD_Font>
						LCD_Font(600, 125, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <main+0xc08>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f103 010b 	add.w	r1, r3, #11
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <main+0xc0c>)
 8002a3e:	fb83 2301 	smull	r2, r3, r3, r1
 8002a42:	105a      	asrs	r2, r3, #1
 8002a44:	17cb      	asrs	r3, r1, #31
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	1aca      	subs	r2, r1, r3
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <main+0xc10>)
 8002a54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <main+0xc04>)
 8002a64:	217d      	movs	r1, #125	; 0x7d
 8002a66:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a6a:	f002 fc00 	bl	800526e <LCD_Font>

						sprintf(clockPrint, "%02d.%02d.%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <main+0xc14>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b5c      	ldr	r3, [pc, #368]	; (8002be8 <main+0xc18>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <main+0xc1c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	460b      	mov	r3, r1
 8002a86:	495a      	ldr	r1, [pc, #360]	; (8002bf0 <main+0xc20>)
 8002a88:	f00b f804 	bl	800da94 <siprintf>
						LCD_Font(578, 175, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8002a8c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002a90:	2300      	movs	r3, #0
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	2301      	movs	r3, #1
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4b4e      	ldr	r3, [pc, #312]	; (8002bd4 <main+0xc04>)
 8002a9a:	21af      	movs	r1, #175	; 0xaf
 8002a9c:	f240 2042 	movw	r0, #578	; 0x242
 8002aa0:	f002 fbe5 	bl	800526e <LCD_Font>
						sprintf(clockPrint, "%02d.%02d.%02d", rtcDate, rtcMonth, rtcYear);
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <main+0xc24>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <main+0xc08>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <main+0xc28>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	460b      	mov	r3, r1
 8002abc:	494c      	ldr	r1, [pc, #304]	; (8002bf0 <main+0xc20>)
 8002abe:	f00a ffe9 	bl	800da94 <siprintf>
						LCD_Font(578, 175, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8002ac2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2301      	movs	r3, #1
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <main+0xc04>)
 8002ad2:	21af      	movs	r1, #175	; 0xaf
 8002ad4:	f240 2042 	movw	r0, #578	; 0x242
 8002ad8:	f002 fbc9 	bl	800526e <LCD_Font>

						rtcWeekDLast = rtcWeekD;
 8002adc:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <main+0xbf8>)
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <main+0xbf4>)
 8002ae2:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <main+0xc24>)
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <main+0xc14>)
 8002aea:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8002aec:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <main+0xc08>)
 8002aee:	781a      	ldrb	r2, [r3, #0]
 8002af0:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <main+0xc18>)
 8002af2:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <main+0xc28>)
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <main+0xc1c>)
 8002afa:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8002afc:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <main+0xbf0>)
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <main+0xbec>)
 8002b02:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8002b04:	4b29      	ldr	r3, [pc, #164]	; (8002bac <main+0xbdc>)
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <main+0xbd8>)
 8002b0a:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	f7fe fb6a 	bl	80011e8 <BME280_getTemperature>
 8002b14:	ee10 3a10 	vmov	r3, s0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fd15 	bl	8000548 <__aeabi_f2d>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4936      	ldr	r1, [pc, #216]	; (8002bfc <main+0xc2c>)
 8002b24:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f7fe fbd4 	bl	80012d8 <BME280_getHumidity>
 8002b30:	ee10 3a10 	vmov	r3, s0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fd07 	bl	8000548 <__aeabi_f2d>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4930      	ldr	r1, [pc, #192]	; (8002c00 <main+0xc30>)
 8002b40:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8002b44:	f7fe fc6a 	bl	800141c <BME280_getPressure>
 8002b48:	eef0 7a40 	vmov.f32	s15, s0
 8002b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b50:	ee17 3a90 	vmov	r3, s15
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <main+0xc34>)
 8002b58:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <main+0xc34>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002b62:	f240 873d 	bls.w	80039e0 <main+0x1a10>
 8002b66:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <main+0xc34>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f240 424b 	movw	r2, #1099	; 0x44b
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	f200 8736 	bhi.w	80039e0 <main+0x1a10>
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <main+0xc2c>)
 8002b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <main+0xc38>)
 8002b80:	f7fd ffac 	bl	8000adc <__aeabi_dcmplt>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 872a 	beq.w	80039e0 <main+0x1a10>
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <main+0xc2c>)
 8002b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <main+0xc3c>)
 8002b98:	f7fd ffbe 	bl	8000b18 <__aeabi_dcmpgt>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	e036      	b.n	8002c10 <main+0xc40>
 8002ba2:	bf00      	nop
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	20000001 	.word	0x20000001
 8002bac:	20000656 	.word	0x20000656
 8002bb0:	080135e4 	.word	0x080135e4
 8002bb4:	0802190c 	.word	0x0802190c
 8002bb8:	00ffa500 	.word	0x00ffa500
 8002bbc:	20000002 	.word	0x20000002
 8002bc0:	20000657 	.word	0x20000657
 8002bc4:	2000065c 	.word	0x2000065c
 8002bc8:	2000065a 	.word	0x2000065a
 8002bcc:	92492493 	.word	0x92492493
 8002bd0:	20000024 	.word	0x20000024
 8002bd4:	08015e20 	.word	0x08015e20
 8002bd8:	20000659 	.word	0x20000659
 8002bdc:	2aaaaaab 	.word	0x2aaaaaab
 8002be0:	20000040 	.word	0x20000040
 8002be4:	2000065d 	.word	0x2000065d
 8002be8:	2000065e 	.word	0x2000065e
 8002bec:	2000065f 	.word	0x2000065f
 8002bf0:	080135ec 	.word	0x080135ec
 8002bf4:	20000658 	.word	0x20000658
 8002bf8:	2000065b 	.word	0x2000065b
 8002bfc:	20000660 	.word	0x20000660
 8002c00:	20000670 	.word	0x20000670
 8002c04:	200006a0 	.word	0x200006a0
 8002c08:	40554000 	.word	0x40554000
 8002c0c:	c0440000 	.word	0xc0440000
 8002c10:	f000 86e6 	beq.w	80039e0 <main+0x1a10>
 8002c14:	4b8b      	ldr	r3, [pc, #556]	; (8002e44 <main+0xe74>)
 8002c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f7fd ff79 	bl	8000b18 <__aeabi_dcmpgt>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 86d9 	beq.w	80039e0 <main+0x1a10>
 8002c2e:	4b85      	ldr	r3, [pc, #532]	; (8002e44 <main+0xe74>)
 8002c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	4b83      	ldr	r3, [pc, #524]	; (8002e48 <main+0xe78>)
 8002c3a:	f7fd ff4f 	bl	8000adc <__aeabi_dcmplt>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 86cd 	beq.w	80039e0 <main+0x1a10>

					if (temperature != temperatureLast) {
 8002c46:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <main+0xe7c>)
 8002c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c4c:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <main+0xe80>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd ff39 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f040 8133 	bne.w	8002ec4 <main+0xef4>

						LCD_Rect(1, 182, 265, 40, 1, BLUE);
 8002c5e:	23ff      	movs	r3, #255	; 0xff
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2301      	movs	r3, #1
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2328      	movs	r3, #40	; 0x28
 8002c68:	f240 1209 	movw	r2, #265	; 0x109
 8002c6c:	21b6      	movs	r1, #182	; 0xb6
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f002 f8ce 	bl	8004e10 <LCD_Rect>

						char weatherPrintT[7];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002c74:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <main+0xe80>)
 8002c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <main+0xe84>)
 8002c80:	f7fd ff40 	bl	8000b04 <__aeabi_dcmpge>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <main+0xce8>
 8002c8a:	4b71      	ldr	r3, [pc, #452]	; (8002e50 <main+0xe80>)
 8002c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	f7fd ff20 	bl	8000adc <__aeabi_dcmplt>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01e      	beq.n	8002ce0 <main+0xd10>
 8002ca2:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <main+0xe80>)
 8002ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <main+0xe88>)
 8002cae:	f7fd ff33 	bl	8000b18 <__aeabi_dcmpgt>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <main+0xd10>
							sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002cb8:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <main+0xe80>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002cc2:	4966      	ldr	r1, [pc, #408]	; (8002e5c <main+0xe8c>)
 8002cc4:	f00a fee6 	bl	800da94 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002cc8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4b62      	ldr	r3, [pc, #392]	; (8002e60 <main+0xe90>)
 8002cd6:	21dc      	movs	r1, #220	; 0xdc
 8002cd8:	203d      	movs	r0, #61	; 0x3d
 8002cda:	f002 fac8 	bl	800526e <LCD_Font>
 8002cde:	e050      	b.n	8002d82 <main+0xdb2>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002ce0:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <main+0xe80>)
 8002ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <main+0xe84>)
 8002cec:	f7fd fef6 	bl	8000adc <__aeabi_dcmplt>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01f      	beq.n	8002d36 <main+0xd66>
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <main+0xe80>)
 8002cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	f7fd ff08 	bl	8000b18 <__aeabi_dcmpgt>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d013      	beq.n	8002d36 <main+0xd66>
							sprintf(weatherPrintT, "%.1f 'C", temperatureLast);
 8002d0e:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <main+0xe80>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002d18:	4950      	ldr	r1, [pc, #320]	; (8002e5c <main+0xe8c>)
 8002d1a:	f00a febb 	bl	800da94 <siprintf>
							LCD_Font(87, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002d1e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d22:	2300      	movs	r3, #0
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2301      	movs	r3, #1
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <main+0xe90>)
 8002d2c:	21dc      	movs	r1, #220	; 0xdc
 8002d2e:	2057      	movs	r0, #87	; 0x57
 8002d30:	f002 fa9d 	bl	800526e <LCD_Font>
 8002d34:	e025      	b.n	8002d82 <main+0xdb2>
						}
						else if (temperatureLast <= -10) {
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <main+0xe80>)
 8002d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	4b45      	ldr	r3, [pc, #276]	; (8002e58 <main+0xe88>)
 8002d42:	f7fd fed5 	bl	8000af0 <__aeabi_dcmple>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01a      	beq.n	8002d82 <main+0xdb2>
							sprintf(weatherPrintT, "%2d 'C", (int8_t)temperatureLast);
 8002d4c:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <main+0xe80>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fd feff 	bl	8000b58 <__aeabi_d2iz>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d64:	493f      	ldr	r1, [pc, #252]	; (8002e64 <main+0xe94>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f00a fe94 	bl	800da94 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002d6c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d70:	2300      	movs	r3, #0
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	2301      	movs	r3, #1
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <main+0xe90>)
 8002d7a:	21dc      	movs	r1, #220	; 0xdc
 8002d7c:	203d      	movs	r0, #61	; 0x3d
 8002d7e:	f002 fa76 	bl	800526e <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002d82:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <main+0xe7c>)
 8002d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <main+0xe84>)
 8002d8e:	f7fd feb9 	bl	8000b04 <__aeabi_dcmpge>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <main+0xdf6>
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <main+0xe7c>)
 8002d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	f7fd fe99 	bl	8000adc <__aeabi_dcmplt>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01e      	beq.n	8002dee <main+0xe1e>
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <main+0xe7c>)
 8002db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <main+0xe88>)
 8002dbc:	f7fd feac 	bl	8000b18 <__aeabi_dcmpgt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <main+0xe1e>
							sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <main+0xe7c>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002dd0:	4922      	ldr	r1, [pc, #136]	; (8002e5c <main+0xe8c>)
 8002dd2:	f00a fe5f 	bl	800da94 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002dd6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <main+0xe98>)
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	2301      	movs	r3, #1
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <main+0xe90>)
 8002de4:	21dc      	movs	r1, #220	; 0xdc
 8002de6:	203d      	movs	r0, #61	; 0x3d
 8002de8:	f002 fa41 	bl	800526e <LCD_Font>
 8002dec:	e064      	b.n	8002eb8 <main+0xee8>
						}
						else if (temperature < 10 && temperature > 0) {
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <main+0xe7c>)
 8002df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <main+0xe84>)
 8002dfa:	f7fd fe6f 	bl	8000adc <__aeabi_dcmplt>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d033      	beq.n	8002e6c <main+0xe9c>
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <main+0xe7c>)
 8002e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	f7fd fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d027      	beq.n	8002e6c <main+0xe9c>
							sprintf(weatherPrintT, "%.1f 'C", temperature);
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <main+0xe7c>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002e26:	490d      	ldr	r1, [pc, #52]	; (8002e5c <main+0xe8c>)
 8002e28:	f00a fe34 	bl	800da94 <siprintf>
							LCD_Font(87, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002e2c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <main+0xe98>)
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	2301      	movs	r3, #1
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <main+0xe90>)
 8002e3a:	21dc      	movs	r1, #220	; 0xdc
 8002e3c:	2057      	movs	r0, #87	; 0x57
 8002e3e:	f002 fa16 	bl	800526e <LCD_Font>
 8002e42:	e039      	b.n	8002eb8 <main+0xee8>
 8002e44:	20000670 	.word	0x20000670
 8002e48:	40590000 	.word	0x40590000
 8002e4c:	20000660 	.word	0x20000660
 8002e50:	20000668 	.word	0x20000668
 8002e54:	40240000 	.word	0x40240000
 8002e58:	c0240000 	.word	0xc0240000
 8002e5c:	080135fc 	.word	0x080135fc
 8002e60:	08015e20 	.word	0x08015e20
 8002e64:	08013604 	.word	0x08013604
 8002e68:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 8002e6c:	4bb0      	ldr	r3, [pc, #704]	; (8003130 <main+0x1160>)
 8002e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	4baf      	ldr	r3, [pc, #700]	; (8003134 <main+0x1164>)
 8002e78:	f7fd fe3a 	bl	8000af0 <__aeabi_dcmple>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01a      	beq.n	8002eb8 <main+0xee8>
							sprintf(weatherPrintT, "%2d 'C", (int8_t)temperature);
 8002e82:	4bab      	ldr	r3, [pc, #684]	; (8003130 <main+0x1160>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f7fd fe64 	bl	8000b58 <__aeabi_d2iz>
 8002e90:	4603      	mov	r3, r0
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e9a:	49a7      	ldr	r1, [pc, #668]	; (8003138 <main+0x1168>)
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f00a fdf9 	bl	800da94 <siprintf>
							LCD_Font(61, 220, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002ea2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002ea6:	4ba5      	ldr	r3, [pc, #660]	; (800313c <main+0x116c>)
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	4ba4      	ldr	r3, [pc, #656]	; (8003140 <main+0x1170>)
 8002eb0:	21dc      	movs	r1, #220	; 0xdc
 8002eb2:	203d      	movs	r0, #61	; 0x3d
 8002eb4:	f002 f9db 	bl	800526e <LCD_Font>
						}

						temperatureLast = temperature;
 8002eb8:	4b9d      	ldr	r3, [pc, #628]	; (8003130 <main+0x1160>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	49a1      	ldr	r1, [pc, #644]	; (8003144 <main+0x1174>)
 8002ec0:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 8002ec4:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <main+0x1178>)
 8002ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eca:	4ba0      	ldr	r3, [pc, #640]	; (800314c <main+0x117c>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d16b      	bne.n	8002fb2 <main+0xfe2>

						LCD_Rect(267, 182, 265, 40, 1, BLUE);
 8002eda:	23ff      	movs	r3, #255	; 0xff
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2328      	movs	r3, #40	; 0x28
 8002ee4:	f240 1209 	movw	r2, #265	; 0x109
 8002ee8:	21b6      	movs	r1, #182	; 0xb6
 8002eea:	f240 100b 	movw	r0, #267	; 0x10b
 8002eee:	f001 ff8f 	bl	8004e10 <LCD_Rect>

						char weatherPrintH[8];

						sprintf(weatherPrintH, "%.1f H2O", humidityLast);
 8002ef2:	4b96      	ldr	r3, [pc, #600]	; (800314c <main+0x117c>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002efc:	4994      	ldr	r1, [pc, #592]	; (8003150 <main+0x1180>)
 8002efe:	f00a fdc9 	bl	800da94 <siprintf>
						if (humidityLast >= 10)
 8002f02:	4b92      	ldr	r3, [pc, #584]	; (800314c <main+0x117c>)
 8002f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	4b91      	ldr	r3, [pc, #580]	; (8003154 <main+0x1184>)
 8002f0e:	f7fd fdf9 	bl	8000b04 <__aeabi_dcmpge>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <main+0xf62>
							LCD_Font(297, 220, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002f18:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	2301      	movs	r3, #1
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	4b86      	ldr	r3, [pc, #536]	; (8003140 <main+0x1170>)
 8002f26:	21dc      	movs	r1, #220	; 0xdc
 8002f28:	f240 1029 	movw	r0, #297	; 0x129
 8002f2c:	f002 f99f 	bl	800526e <LCD_Font>
 8002f30:	e00b      	b.n	8002f4a <main+0xf7a>
						else LCD_Font(323, 220, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002f32:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002f36:	2300      	movs	r3, #0
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4b80      	ldr	r3, [pc, #512]	; (8003140 <main+0x1170>)
 8002f40:	21dc      	movs	r1, #220	; 0xdc
 8002f42:	f240 1043 	movw	r0, #323	; 0x143
 8002f46:	f002 f992 	bl	800526e <LCD_Font>

						sprintf(weatherPrintH, "%.1f H2O", humidity);
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <main+0x1178>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002f54:	497e      	ldr	r1, [pc, #504]	; (8003150 <main+0x1180>)
 8002f56:	f00a fd9d 	bl	800da94 <siprintf>
						if (humidity >= 10)
 8002f5a:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <main+0x1178>)
 8002f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <main+0x1184>)
 8002f66:	f7fd fdcd 	bl	8000b04 <__aeabi_dcmpge>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <main+0xfbc>
							LCD_Font(297, 220, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002f70:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4b70      	ldr	r3, [pc, #448]	; (8003140 <main+0x1170>)
 8002f80:	21dc      	movs	r1, #220	; 0xdc
 8002f82:	f240 1029 	movw	r0, #297	; 0x129
 8002f86:	f002 f972 	bl	800526e <LCD_Font>
 8002f8a:	e00c      	b.n	8002fa6 <main+0xfd6>
						else LCD_Font(323, 220, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002f8c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	2301      	movs	r3, #1
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4b69      	ldr	r3, [pc, #420]	; (8003140 <main+0x1170>)
 8002f9c:	21dc      	movs	r1, #220	; 0xdc
 8002f9e:	f240 1043 	movw	r0, #323	; 0x143
 8002fa2:	f002 f964 	bl	800526e <LCD_Font>

						humidityLast = humidity;
 8002fa6:	4b68      	ldr	r3, [pc, #416]	; (8003148 <main+0x1178>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	4967      	ldr	r1, [pc, #412]	; (800314c <main+0x117c>)
 8002fae:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 8002fb2:	4b69      	ldr	r3, [pc, #420]	; (8003158 <main+0x1188>)
 8002fb4:	881a      	ldrh	r2, [r3, #0]
 8002fb6:	4b69      	ldr	r3, [pc, #420]	; (800315c <main+0x118c>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d071      	beq.n	80030a2 <main+0x10d2>

						LCD_Rect(533, 182, 265, 40, 1, BLUE);
 8002fbe:	23ff      	movs	r3, #255	; 0xff
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2328      	movs	r3, #40	; 0x28
 8002fc8:	f240 1209 	movw	r2, #265	; 0x109
 8002fcc:	21b6      	movs	r1, #182	; 0xb6
 8002fce:	f240 2015 	movw	r0, #533	; 0x215
 8002fd2:	f001 ff1d 	bl	8004e10 <LCD_Rect>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 8002fd6:	4b60      	ldr	r3, [pc, #384]	; (8003158 <main+0x1188>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fde:	d315      	bcc.n	800300c <main+0x103c>
							sprintf(weatherPrintP, "%02d HPa", pressureLast);
 8002fe0:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <main+0x1188>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fea:	495d      	ldr	r1, [pc, #372]	; (8003160 <main+0x1190>)
 8002fec:	4618      	mov	r0, r3
 8002fee:	f00a fd51 	bl	800da94 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002ff2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b50      	ldr	r3, [pc, #320]	; (8003140 <main+0x1170>)
 8003000:	21dc      	movs	r1, #220	; 0xdc
 8003002:	f240 203d 	movw	r0, #573	; 0x23d
 8003006:	f002 f932 	bl	800526e <LCD_Font>
 800300a:	e014      	b.n	8003036 <main+0x1066>
						}
						else {
							sprintf(weatherPrintP, " %02d HPa", pressureLast);
 800300c:	4b52      	ldr	r3, [pc, #328]	; (8003158 <main+0x1188>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003016:	4953      	ldr	r1, [pc, #332]	; (8003164 <main+0x1194>)
 8003018:	4618      	mov	r0, r3
 800301a:	f00a fd3b 	bl	800da94 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 800301e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003022:	2300      	movs	r3, #0
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	2301      	movs	r3, #1
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	4b45      	ldr	r3, [pc, #276]	; (8003140 <main+0x1170>)
 800302c:	21dc      	movs	r1, #220	; 0xdc
 800302e:	f240 203d 	movw	r0, #573	; 0x23d
 8003032:	f002 f91c 	bl	800526e <LCD_Font>
						}

						pressureLast = pressure;
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <main+0x118c>)
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <main+0x1188>)
 800303c:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 800303e:	4b46      	ldr	r3, [pc, #280]	; (8003158 <main+0x1188>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003046:	d316      	bcc.n	8003076 <main+0x10a6>
							sprintf(weatherPrintP, "%02d HPa", pressureLast);
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <main+0x1188>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003052:	4943      	ldr	r1, [pc, #268]	; (8003160 <main+0x1190>)
 8003054:	4618      	mov	r0, r3
 8003056:	f00a fd1d 	bl	800da94 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800305a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800305e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	2301      	movs	r3, #1
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <main+0x1170>)
 800306a:	21dc      	movs	r1, #220	; 0xdc
 800306c:	f240 203d 	movw	r0, #573	; 0x23d
 8003070:	f002 f8fd 	bl	800526e <LCD_Font>
 8003074:	e015      	b.n	80030a2 <main+0x10d2>
						}
						else {
							sprintf(weatherPrintP, " %02d HPa", pressureLast);
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <main+0x1188>)
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003080:	4938      	ldr	r1, [pc, #224]	; (8003164 <main+0x1194>)
 8003082:	4618      	mov	r0, r3
 8003084:	f00a fd06 	bl	800da94 <siprintf>
							LCD_Font(573, 220, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8003088:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800308c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2301      	movs	r3, #1
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <main+0x1170>)
 8003098:	21dc      	movs	r1, #220	; 0xdc
 800309a:	f240 203d 	movw	r0, #573	; 0x23d
 800309e:	f002 f8e6 	bl	800526e <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fff4 	bl	8001090 <AT24XX_Read>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <main+0x1198>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f000 81ee 	beq.w	8003492 <main+0x14c2>

						AT24XX_Update(0, rtcHrs);
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <main+0x1198>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	4619      	mov	r1, r3
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fe f810 	bl	80010e2 <AT24XX_Update>

						for (uint16_t i = 0; i < 499; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80030c8:	e027      	b.n	800311a <main+0x114a>
 80030ca:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80030ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd ffd9 	bl	8001090 <AT24XX_Read>
 80030de:	4603      	mov	r3, r0
 80030e0:	461c      	mov	r4, r3
 80030e2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd ffcd 	bl	8001090 <AT24XX_Read>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4619      	mov	r1, r3
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7fe fed2 	bl	8001ea4 <byteS>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003108:	b211      	sxth	r1, r2
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <main+0x119c>)
 800310c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003110:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8003114:	3301      	adds	r3, #1
 8003116:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800311a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800311e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003122:	d9d2      	bls.n	80030ca <main+0x10fa>
						for (uint16_t i = 498; i > 0; i--) hT[i] = hT[i - 1];
 8003124:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8003128:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800312c:	e030      	b.n	8003190 <main+0x11c0>
 800312e:	bf00      	nop
 8003130:	20000660 	.word	0x20000660
 8003134:	c0240000 	.word	0xc0240000
 8003138:	08013604 	.word	0x08013604
 800313c:	00ffa500 	.word	0x00ffa500
 8003140:	08015e20 	.word	0x08015e20
 8003144:	20000668 	.word	0x20000668
 8003148:	20000670 	.word	0x20000670
 800314c:	20000678 	.word	0x20000678
 8003150:	0801360c 	.word	0x0801360c
 8003154:	40240000 	.word	0x40240000
 8003158:	200006a2 	.word	0x200006a2
 800315c:	200006a0 	.word	0x200006a0
 8003160:	08013618 	.word	0x08013618
 8003164:	08013624 	.word	0x08013624
 8003168:	20000657 	.word	0x20000657
 800316c:	200006a4 	.word	0x200006a4
 8003170:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8003174:	1e5a      	subs	r2, r3, #1
 8003176:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800317a:	49a3      	ldr	r1, [pc, #652]	; (8003408 <main+0x1438>)
 800317c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8003180:	4aa1      	ldr	r2, [pc, #644]	; (8003408 <main+0x1438>)
 8003182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003186:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800318a:	3b01      	subs	r3, #1
 800318c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8003190:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1eb      	bne.n	8003170 <main+0x11a0>
						hT[0] = (uint16_t) (temperature * 10);
 8003198:	4b9c      	ldr	r3, [pc, #624]	; (800340c <main+0x143c>)
 800319a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	4b9b      	ldr	r3, [pc, #620]	; (8003410 <main+0x1440>)
 80031a4:	f7fd fa28 	bl	80005f8 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fcfa 	bl	8000ba8 <__aeabi_d2uiz>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	b21a      	sxth	r2, r3
 80031ba:	4b93      	ldr	r3, [pc, #588]	; (8003408 <main+0x1438>)
 80031bc:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80031c4:	e02e      	b.n	8003224 <main+0x1254>
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80031c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	b29c      	uxth	r4, r3
 80031d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031d8:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <main+0x1438>)
 80031da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fe43 	bl	8001e6c <byteL>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4619      	mov	r1, r3
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7fd ff79 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80031f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80031fc:	b29c      	uxth	r4, r3
 80031fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003202:	4a81      	ldr	r2, [pc, #516]	; (8003408 <main+0x1438>)
 8003204:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003208:	b29b      	uxth	r3, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fe3b 	bl	8001e86 <byteH>
 8003210:	4603      	mov	r3, r0
 8003212:	4619      	mov	r1, r3
 8003214:	4620      	mov	r0, r4
 8003216:	f7fd ff64 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 800321a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800321e:	3301      	adds	r3, #1
 8003220:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8003224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003228:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800322c:	d9cb      	bls.n	80031c6 <main+0x11f6>
						}

						for (uint16_t i = 0; i < 499; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800322e:	2300      	movs	r3, #0
 8003230:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8003234:	e027      	b.n	8003286 <main+0x12b6>
 8003236:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800323a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800323e:	b29b      	uxth	r3, r3
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	b29b      	uxth	r3, r3
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd ff23 	bl	8001090 <AT24XX_Read>
 800324a:	4603      	mov	r3, r0
 800324c:	461c      	mov	r4, r3
 800324e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 800325a:	b29b      	uxth	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd ff17 	bl	8001090 <AT24XX_Read>
 8003262:	4603      	mov	r3, r0
 8003264:	4619      	mov	r1, r3
 8003266:	4620      	mov	r0, r4
 8003268:	f7fe fe1c 	bl	8001ea4 <byteS>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8003274:	b211      	sxth	r1, r2
 8003276:	4a67      	ldr	r2, [pc, #412]	; (8003414 <main+0x1444>)
 8003278:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800327c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8003280:	3301      	adds	r3, #1
 8003282:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8003286:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800328a:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800328e:	d9d2      	bls.n	8003236 <main+0x1266>
						for (uint16_t i = 498; i > 0; i--) hH[i] = hH[i - 1];
 8003290:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8003294:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8003298:	e00f      	b.n	80032ba <main+0x12ea>
 800329a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800329e:	1e5a      	subs	r2, r3, #1
 80032a0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80032a4:	495b      	ldr	r1, [pc, #364]	; (8003414 <main+0x1444>)
 80032a6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80032aa:	4a5a      	ldr	r2, [pc, #360]	; (8003414 <main+0x1444>)
 80032ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80032b0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80032b4:	3b01      	subs	r3, #1
 80032b6:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80032ba:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1eb      	bne.n	800329a <main+0x12ca>
						hH[0] = (uint16_t) (humidity * 10);
 80032c2:	4b55      	ldr	r3, [pc, #340]	; (8003418 <main+0x1448>)
 80032c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <main+0x1440>)
 80032ce:	f7fd f993 	bl	80005f8 <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f7fd fc65 	bl	8000ba8 <__aeabi_d2uiz>
 80032de:	4603      	mov	r3, r0
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <main+0x1444>)
 80032e6:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80032ee:	e02e      	b.n	800334e <main+0x137e>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80032f0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80032f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	b29c      	uxth	r4, r3
 80032fe:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003302:	4a44      	ldr	r2, [pc, #272]	; (8003414 <main+0x1444>)
 8003304:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003308:	b29b      	uxth	r3, r3
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fdae 	bl	8001e6c <byteL>
 8003310:	4603      	mov	r3, r0
 8003312:	4619      	mov	r1, r3
 8003314:	4620      	mov	r0, r4
 8003316:	f7fd fee4 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 800331a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8003326:	b29c      	uxth	r4, r3
 8003328:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800332c:	4a39      	ldr	r2, [pc, #228]	; (8003414 <main+0x1444>)
 800332e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003332:	b29b      	uxth	r3, r3
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe fda6 	bl	8001e86 <byteH>
 800333a:	4603      	mov	r3, r0
 800333c:	4619      	mov	r1, r3
 800333e:	4620      	mov	r0, r4
 8003340:	f7fd fecf 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 8003344:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003348:	3301      	adds	r3, #1
 800334a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800334e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003352:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003356:	d9cb      	bls.n	80032f0 <main+0x1320>
						}

						for (uint16_t i = 0; i < 499; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8003358:	2300      	movs	r3, #0
 800335a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800335e:	e027      	b.n	80033b0 <main+0x13e0>
 8003360:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8003364:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003368:	b29b      	uxth	r3, r3
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	b29b      	uxth	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd fe8e 	bl	8001090 <AT24XX_Read>
 8003374:	4603      	mov	r3, r0
 8003376:	461c      	mov	r4, r3
 8003378:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8003384:	b29b      	uxth	r3, r3
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fe82 	bl	8001090 <AT24XX_Read>
 800338c:	4603      	mov	r3, r0
 800338e:	4619      	mov	r1, r3
 8003390:	4620      	mov	r0, r4
 8003392:	f7fe fd87 	bl	8001ea4 <byteS>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800339e:	b211      	sxth	r1, r2
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <main+0x144c>)
 80033a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80033a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80033aa:	3301      	adds	r3, #1
 80033ac:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 80033b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80033b4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80033b8:	d9d2      	bls.n	8003360 <main+0x1390>
						for (uint16_t i = 498; i > 0; i--) hP[i] = hP[i - 1];
 80033ba:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80033be:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80033c2:	e00f      	b.n	80033e4 <main+0x1414>
 80033c4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80033ce:	4913      	ldr	r1, [pc, #76]	; (800341c <main+0x144c>)
 80033d0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <main+0x144c>)
 80033d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80033da:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80033de:	3b01      	subs	r3, #1
 80033e0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80033e4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1eb      	bne.n	80033c4 <main+0x13f4>
						hP[0] = (uint16_t) (pressure * 10);
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <main+0x1450>)
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b21a      	sxth	r2, r3
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <main+0x144c>)
 80033fe:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 499; i++) {
 8003400:	2300      	movs	r3, #0
 8003402:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8003406:	e03c      	b.n	8003482 <main+0x14b2>
 8003408:	200006a4 	.word	0x200006a4
 800340c:	20000660 	.word	0x20000660
 8003410:	40240000 	.word	0x40240000
 8003414:	20000a8c 	.word	0x20000a8c
 8003418:	20000670 	.word	0x20000670
 800341c:	20000e74 	.word	0x20000e74
 8003420:	200006a0 	.word	0x200006a0
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8003424:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003428:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800342c:	b29b      	uxth	r3, r3
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	b29c      	uxth	r4, r3
 8003432:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003436:	4ab8      	ldr	r2, [pc, #736]	; (8003718 <main+0x1748>)
 8003438:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fd14 	bl	8001e6c <byteL>
 8003444:	4603      	mov	r3, r0
 8003446:	4619      	mov	r1, r3
 8003448:	4620      	mov	r0, r4
 800344a:	f7fd fe4a 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 800344e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	b29b      	uxth	r3, r3
 8003456:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800345a:	b29c      	uxth	r4, r3
 800345c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003460:	4aad      	ldr	r2, [pc, #692]	; (8003718 <main+0x1748>)
 8003462:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003466:	b29b      	uxth	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe fd0c 	bl	8001e86 <byteH>
 800346e:	4603      	mov	r3, r0
 8003470:	4619      	mov	r1, r3
 8003472:	4620      	mov	r0, r4
 8003474:	f7fd fe35 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 499; i++) {
 8003478:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800347c:	3301      	adds	r3, #1
 800347e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8003482:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003486:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800348a:	d9cb      	bls.n	8003424 <main+0x1454>
						}

						viewGraphs = 0;
 800348c:	4ba3      	ldr	r3, [pc, #652]	; (800371c <main+0x174c>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(1, 222, 265, 256, 1, BLUE);
 8003492:	23ff      	movs	r3, #255	; 0xff
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	2301      	movs	r3, #1
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349e:	f240 1209 	movw	r2, #265	; 0x109
 80034a2:	21de      	movs	r1, #222	; 0xde
 80034a4:	2001      	movs	r0, #1
 80034a6:	f001 fcb3 	bl	8004e10 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 255);
 80034aa:	4b9d      	ldr	r3, [pc, #628]	; (8003720 <main+0x1750>)
 80034ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	4b9b      	ldr	r3, [pc, #620]	; (8003724 <main+0x1754>)
 80034b6:	f7fd f89f 	bl	80005f8 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f7fd fb49 	bl	8000b58 <__aeabi_d2iz>
 80034c6:	4603      	mov	r3, r0
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	b298      	uxth	r0, r3
 80034cc:	23ff      	movs	r3, #255	; 0xff
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80034d6:	21c8      	movs	r1, #200	; 0xc8
 80034d8:	f7fe fc9c 	bl	8001e14 <map>
 80034dc:	ec53 2b10 	vmov	r2, r3, d0
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fd fb38 	bl	8000b58 <__aeabi_d2iz>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap < 0) valMap = 0;
 80034ee:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da02      	bge.n	80034fc <main+0x152c>
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap > 255) valMap = 255;
 80034fc:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003500:	2bff      	cmp	r3, #255	; 0xff
 8003502:	dd02      	ble.n	800350a <main+0x153a>
 8003504:	23ff      	movs	r3, #255	; 0xff
 8003506:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					LCD_Line(2 + 263, 223, 2 + 263, 477, 1, BLACK);
 800350a:	2300      	movs	r3, #0
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2301      	movs	r3, #1
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	f240 13dd 	movw	r3, #477	; 0x1dd
 8003516:	f240 1209 	movw	r2, #265	; 0x109
 800351a:	21df      	movs	r1, #223	; 0xdf
 800351c:	f240 1009 	movw	r0, #265	; 0x109
 8003520:	f001 fc08 	bl	8004d34 <LCD_Line>
					if (valMap)
 8003524:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01d      	beq.n	8003568 <main+0x1598>
						LCD_Line(2 + 263, 223 + (255 - valMap), 2 + 263, 477, 1,
 800352c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003530:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8003534:	b29c      	uxth	r4, r3
 8003536:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800353a:	b2d8      	uxtb	r0, r3
 800353c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	2100      	movs	r1, #0
 800354a:	f001 faec 	bl	8004b26 <RGB>
 800354e:	4603      	mov	r3, r0
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	2301      	movs	r3, #1
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	f240 13dd 	movw	r3, #477	; 0x1dd
 800355a:	f240 1209 	movw	r2, #265	; 0x109
 800355e:	4621      	mov	r1, r4
 8003560:	f240 1009 	movw	r0, #265	; 0x109
 8003564:	f001 fbe6 	bl	8004d34 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					LCD_Rect(267, 222, 265, 256, 1, BLUE);
 8003568:	23ff      	movs	r3, #255	; 0xff
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	2301      	movs	r3, #1
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003574:	f240 1209 	movw	r2, #265	; 0x109
 8003578:	21de      	movs	r1, #222	; 0xde
 800357a:	f240 100b 	movw	r0, #267	; 0x10b
 800357e:	f001 fc47 	bl	8004e10 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 255);
 8003582:	4b69      	ldr	r3, [pc, #420]	; (8003728 <main+0x1758>)
 8003584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	4b65      	ldr	r3, [pc, #404]	; (8003724 <main+0x1754>)
 800358e:	f7fd f833 	bl	80005f8 <__aeabi_dmul>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	f7fd fadd 	bl	8000b58 <__aeabi_d2iz>
 800359e:	4603      	mov	r3, r0
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	b298      	uxth	r0, r3
 80035a4:	23ff      	movs	r3, #255	; 0xff
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	f44f 7259 	mov.w	r2, #868	; 0x364
 80035ae:	2164      	movs	r1, #100	; 0x64
 80035b0:	f7fe fc30 	bl	8001e14 <map>
 80035b4:	ec53 2b10 	vmov	r2, r3, d0
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7fd facc 	bl	8000b58 <__aeabi_d2iz>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap < 0) valMap = 0;
 80035c6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da02      	bge.n	80035d4 <main+0x1604>
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap > 255) valMap = 255;
 80035d4:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80035d8:	2bff      	cmp	r3, #255	; 0xff
 80035da:	dd02      	ble.n	80035e2 <main+0x1612>
 80035dc:	23ff      	movs	r3, #255	; 0xff
 80035de:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					LCD_Line(268 + 263, 223, 268 + 263, 477, 1, BLACK);
 80035e2:	2300      	movs	r3, #0
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2301      	movs	r3, #1
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	f240 13dd 	movw	r3, #477	; 0x1dd
 80035ee:	f240 2213 	movw	r2, #531	; 0x213
 80035f2:	21df      	movs	r1, #223	; 0xdf
 80035f4:	f240 2013 	movw	r0, #531	; 0x213
 80035f8:	f001 fb9c 	bl	8004d34 <LCD_Line>
					if (valMap)
 80035fc:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01d      	beq.n	8003640 <main+0x1670>
						LCD_Line(268 + 263, 223 + (255 - valMap), 268 + 263, 477, 1,
 8003604:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003608:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800360c:	b29c      	uxth	r4, r3
 800360e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003612:	b2d8      	uxtb	r0, r3
 8003614:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	2100      	movs	r1, #0
 8003622:	f001 fa80 	bl	8004b26 <RGB>
 8003626:	4603      	mov	r3, r0
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2301      	movs	r3, #1
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	f240 13dd 	movw	r3, #477	; 0x1dd
 8003632:	f240 2213 	movw	r2, #531	; 0x213
 8003636:	4621      	mov	r1, r4
 8003638:	f240 2013 	movw	r0, #531	; 0x213
 800363c:	f001 fb7a 	bl	8004d34 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					LCD_Rect(533, 222, 265, 256, 1, BLUE);
 8003640:	23ff      	movs	r3, #255	; 0xff
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2301      	movs	r3, #1
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800364c:	f240 1209 	movw	r2, #265	; 0x109
 8003650:	21de      	movs	r1, #222	; 0xde
 8003652:	f240 2015 	movw	r0, #533	; 0x215
 8003656:	f001 fbdb 	bl	8004e10 <LCD_Rect>
					valMap = map(((int16_t)(pressure * 10)), MIN_PRESSURE_X10, MAX_PRESSURE_X10, 0, 255);
 800365a:	4b34      	ldr	r3, [pc, #208]	; (800372c <main+0x175c>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	0092      	lsls	r2, r2, #2
 8003662:	4413      	add	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	b298      	uxth	r0, r3
 8003668:	23ff      	movs	r3, #255	; 0xff
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	f642 1254 	movw	r2, #10580	; 0x2954
 8003672:	f242 4154 	movw	r1, #9300	; 0x2454
 8003676:	f7fe fbcd 	bl	8001e14 <map>
 800367a:	ec53 2b10 	vmov	r2, r3, d0
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	f7fd fa69 	bl	8000b58 <__aeabi_d2iz>
 8003686:	4603      	mov	r3, r0
 8003688:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap < 0) valMap = 0;
 800368c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003690:	2b00      	cmp	r3, #0
 8003692:	da02      	bge.n	800369a <main+0x16ca>
 8003694:	2300      	movs	r3, #0
 8003696:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					if (valMap > 255) valMap = 255;
 800369a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 800369e:	2bff      	cmp	r3, #255	; 0xff
 80036a0:	dd02      	ble.n	80036a8 <main+0x16d8>
 80036a2:	23ff      	movs	r3, #255	; 0xff
 80036a4:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					LCD_Line(534 + 263, 223, 534 + 263, 477, 1, BLACK);
 80036a8:	2300      	movs	r3, #0
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2301      	movs	r3, #1
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f240 13dd 	movw	r3, #477	; 0x1dd
 80036b4:	f240 321d 	movw	r2, #797	; 0x31d
 80036b8:	21df      	movs	r1, #223	; 0xdf
 80036ba:	f240 301d 	movw	r0, #797	; 0x31d
 80036be:	f001 fb39 	bl	8004d34 <LCD_Line>
					if (valMap)
 80036c2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01d      	beq.n	8003706 <main+0x1736>
						LCD_Line(534 + 263, 223 + (255 - valMap), 534 + 263, 477, 1,
 80036ca:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80036ce:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80036d2:	b29c      	uxth	r4, r3
 80036d4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80036d8:	b2d8      	uxtb	r0, r3
 80036da:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	2100      	movs	r1, #0
 80036e8:	f001 fa1d 	bl	8004b26 <RGB>
 80036ec:	4603      	mov	r3, r0
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2301      	movs	r3, #1
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f240 13dd 	movw	r3, #477	; 0x1dd
 80036f8:	f240 321d 	movw	r2, #797	; 0x31d
 80036fc:	4621      	mov	r1, r4
 80036fe:	f240 301d 	movw	r0, #797	; 0x31d
 8003702:	f001 fb17 	bl	8004d34 <LCD_Line>
								RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));

					if (!viewGraphs) {
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <main+0x174c>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 8168 	bne.w	80039e0 <main+0x1a10>

						for (uint16_t i = 0; i < 263 ; i++) {
 8003710:	2300      	movs	r3, #0
 8003712:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003716:	e072      	b.n	80037fe <main+0x182e>
 8003718:	20000e74 	.word	0x20000e74
 800371c:	20000654 	.word	0x20000654
 8003720:	20000660 	.word	0x20000660
 8003724:	40240000 	.word	0x40240000
 8003728:	20000670 	.word	0x20000670
 800372c:	200006a0 	.word	0x200006a0
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 255);
 8003730:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003734:	4a70      	ldr	r2, [pc, #448]	; (80038f8 <main+0x1928>)
 8003736:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800373a:	b298      	uxth	r0, r3
 800373c:	23ff      	movs	r3, #255	; 0xff
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2300      	movs	r3, #0
 8003742:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8003746:	21c8      	movs	r1, #200	; 0xc8
 8003748:	f7fe fb64 	bl	8001e14 <map>
 800374c:	ec53 2b10 	vmov	r2, r3, d0
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd fa00 	bl	8000b58 <__aeabi_d2iz>
 8003758:	4603      	mov	r3, r0
 800375a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap < 0) valMap = 0;
 800375e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003762:	2b00      	cmp	r3, #0
 8003764:	da02      	bge.n	800376c <main+0x179c>
 8003766:	2300      	movs	r3, #0
 8003768:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap > 255) valMap = 255;
 800376c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003770:	2bff      	cmp	r3, #255	; 0xff
 8003772:	dd02      	ble.n	800377a <main+0x17aa>
 8003774:	23ff      	movs	r3, #255	; 0xff
 8003776:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							LCD_Line(2 + (262 - i), 223, 2 + (262 - i), 477, 1, BLACK);
 800377a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800377e:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8003782:	b298      	uxth	r0, r3
 8003784:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003788:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 800378c:	b29a      	uxth	r2, r3
 800378e:	2300      	movs	r3, #0
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	2301      	movs	r3, #1
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f240 13dd 	movw	r3, #477	; 0x1dd
 800379a:	21df      	movs	r1, #223	; 0xdf
 800379c:	f001 faca 	bl	8004d34 <LCD_Line>
							if (valMap)
 80037a0:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d025      	beq.n	80037f4 <main+0x1824>
								LCD_Line(2 + (262 - i), 223 + (255 - valMap), 2 + (262 - i), 477, 1,
 80037a8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80037ac:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 80037b0:	b29c      	uxth	r4, r3
 80037b2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80037b6:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80037ba:	b29d      	uxth	r5, r3
 80037bc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80037c0:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 80037c4:	b29e      	uxth	r6, r3
 80037c6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80037ca:	b2d8      	uxtb	r0, r3
 80037cc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	2100      	movs	r1, #0
 80037da:	f001 f9a4 	bl	8004b26 <RGB>
 80037de:	4603      	mov	r3, r0
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2301      	movs	r3, #1
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f240 13dd 	movw	r3, #477	; 0x1dd
 80037ea:	4632      	mov	r2, r6
 80037ec:	4629      	mov	r1, r5
 80037ee:	4620      	mov	r0, r4
 80037f0:	f001 faa0 	bl	8004d34 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80037f4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80037fe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003802:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8003806:	d993      	bls.n	8003730 <main+0x1760>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 8003808:	2300      	movs	r3, #0
 800380a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800380e:	e06a      	b.n	80038e6 <main+0x1916>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 255);
 8003810:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003814:	4a39      	ldr	r2, [pc, #228]	; (80038fc <main+0x192c>)
 8003816:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800381a:	b298      	uxth	r0, r3
 800381c:	23ff      	movs	r3, #255	; 0xff
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2300      	movs	r3, #0
 8003822:	f44f 7259 	mov.w	r2, #868	; 0x364
 8003826:	2164      	movs	r1, #100	; 0x64
 8003828:	f7fe faf4 	bl	8001e14 <map>
 800382c:	ec53 2b10 	vmov	r2, r3, d0
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f7fd f990 	bl	8000b58 <__aeabi_d2iz>
 8003838:	4603      	mov	r3, r0
 800383a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap < 0) valMap = 0;
 800383e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003842:	2b00      	cmp	r3, #0
 8003844:	da02      	bge.n	800384c <main+0x187c>
 8003846:	2300      	movs	r3, #0
 8003848:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap > 255) valMap = 255;
 800384c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003850:	2bff      	cmp	r3, #255	; 0xff
 8003852:	dd02      	ble.n	800385a <main+0x188a>
 8003854:	23ff      	movs	r3, #255	; 0xff
 8003856:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							LCD_Line(268 + (262 - i), 223, 268 + (262 - i), 477, 1, BLACK);
 800385a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800385e:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003862:	3302      	adds	r3, #2
 8003864:	b298      	uxth	r0, r3
 8003866:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800386a:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 800386e:	3302      	adds	r3, #2
 8003870:	b29a      	uxth	r2, r3
 8003872:	2300      	movs	r3, #0
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2301      	movs	r3, #1
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f240 13dd 	movw	r3, #477	; 0x1dd
 800387e:	21df      	movs	r1, #223	; 0xdf
 8003880:	f001 fa58 	bl	8004d34 <LCD_Line>
							if (valMap)
 8003884:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d027      	beq.n	80038dc <main+0x190c>
								LCD_Line(268 + (262 - i), 223 + (255 - valMap), 268 + (262 - i), 477, 1,
 800388c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003890:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003894:	3302      	adds	r3, #2
 8003896:	b29c      	uxth	r4, r3
 8003898:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800389c:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80038a0:	b29d      	uxth	r5, r3
 80038a2:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80038a6:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 80038aa:	3302      	adds	r3, #2
 80038ac:	b29e      	uxth	r6, r3
 80038ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80038b2:	b2d8      	uxtb	r0, r3
 80038b4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	2100      	movs	r1, #0
 80038c2:	f001 f930 	bl	8004b26 <RGB>
 80038c6:	4603      	mov	r3, r0
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	2301      	movs	r3, #1
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f240 13dd 	movw	r3, #477	; 0x1dd
 80038d2:	4632      	mov	r2, r6
 80038d4:	4629      	mov	r1, r5
 80038d6:	4620      	mov	r0, r4
 80038d8:	f001 fa2c 	bl	8004d34 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80038dc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80038e0:	3301      	adds	r3, #1
 80038e2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80038e6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80038ea:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80038ee:	d98f      	bls.n	8003810 <main+0x1840>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80038f6:	e06b      	b.n	80039d0 <main+0x1a00>
 80038f8:	200006a4 	.word	0x200006a4
 80038fc:	20000a8c 	.word	0x20000a8c
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE_X10, MAX_PRESSURE_X10, 0, 255);
 8003900:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003904:	4abb      	ldr	r2, [pc, #748]	; (8003bf4 <main+0x1c24>)
 8003906:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800390a:	b298      	uxth	r0, r3
 800390c:	23ff      	movs	r3, #255	; 0xff
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	f642 1254 	movw	r2, #10580	; 0x2954
 8003916:	f242 4154 	movw	r1, #9300	; 0x2454
 800391a:	f7fe fa7b 	bl	8001e14 <map>
 800391e:	ec53 2b10 	vmov	r2, r3, d0
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f7fd f917 	bl	8000b58 <__aeabi_d2iz>
 800392a:	4603      	mov	r3, r0
 800392c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap < 0) valMap = 0;
 8003930:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003934:	2b00      	cmp	r3, #0
 8003936:	da02      	bge.n	800393e <main+0x196e>
 8003938:	2300      	movs	r3, #0
 800393a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							if (valMap > 255) valMap = 255;
 800393e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003942:	2bff      	cmp	r3, #255	; 0xff
 8003944:	dd02      	ble.n	800394c <main+0x197c>
 8003946:	23ff      	movs	r3, #255	; 0xff
 8003948:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
							LCD_Line(534 + (262 - i), 223, 534 + (262 - i), 477, 1, BLACK);
 800394c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003950:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003954:	b298      	uxth	r0, r3
 8003956:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800395a:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800395e:	b29a      	uxth	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	2301      	movs	r3, #1
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f240 13dd 	movw	r3, #477	; 0x1dd
 800396c:	21df      	movs	r1, #223	; 0xdf
 800396e:	f001 f9e1 	bl	8004d34 <LCD_Line>
							if (valMap)
 8003972:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d025      	beq.n	80039c6 <main+0x19f6>
								LCD_Line(534 + (262 - i), 223 + (255 - valMap), 534 + (262 - i), 477, 1,
 800397a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800397e:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003982:	b29c      	uxth	r4, r3
 8003984:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003988:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800398c:	b29d      	uxth	r5, r3
 800398e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003992:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003996:	b29e      	uxth	r6, r3
 8003998:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800399c:	b2d8      	uxtb	r0, r3
 800399e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	2100      	movs	r1, #0
 80039ac:	f001 f8bb 	bl	8004b26 <RGB>
 80039b0:	4603      	mov	r3, r0
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	2301      	movs	r3, #1
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	f240 13dd 	movw	r3, #477	; 0x1dd
 80039bc:	4632      	mov	r2, r6
 80039be:	4629      	mov	r1, r5
 80039c0:	4620      	mov	r0, r4
 80039c2:	f001 f9b7 	bl	8004d34 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80039c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80039d0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80039d4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80039d8:	d992      	bls.n	8003900 <main+0x1930>
										RGB(255 - (255 - valMap), 0, 255 - (255 - (255 - valMap))));
						}

						//						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
						viewGraphs = 1;
 80039da:	4b87      	ldr	r3, [pc, #540]	; (8003bf8 <main+0x1c28>)
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 80039e0:	4b86      	ldr	r3, [pc, #536]	; (8003bfc <main+0x1c2c>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8392 	beq.w	800410e <main+0x213e>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 80039ea:	2202      	movs	r2, #2
 80039ec:	4984      	ldr	r1, [pc, #528]	; (8003c00 <main+0x1c30>)
 80039ee:	4885      	ldr	r0, [pc, #532]	; (8003c04 <main+0x1c34>)
 80039f0:	f009 f976 	bl	800cce0 <memcmp>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 808a 	bne.w	8003b10 <main+0x1b40>

					char val[2];

					val[0] = rx_buffer[2];
 80039fc:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <main+0x1c34>)
 80039fe:	789b      	ldrb	r3, [r3, #2]
 8003a00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[3];
 8003a04:	4b7f      	ldr	r3, [pc, #508]	; (8003c04 <main+0x1c34>)
 8003a06:	78db      	ldrb	r3, [r3, #3]
 8003a08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setHrs(atoi(val));
 8003a0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a10:	4618      	mov	r0, r3
 8003a12:	f009 f937 	bl	800cc84 <atoi>
 8003a16:	4603      	mov	r3, r0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f822 	bl	8001a64 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8003a20:	4b78      	ldr	r3, [pc, #480]	; (8003c04 <main+0x1c34>)
 8003a22:	791b      	ldrb	r3, [r3, #4]
 8003a24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[5];
 8003a28:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <main+0x1c34>)
 8003a2a:	795b      	ldrb	r3, [r3, #5]
 8003a2c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setMin(atoi(val));
 8003a30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a34:	4618      	mov	r0, r3
 8003a36:	f009 f925 	bl	800cc84 <atoi>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fff2 	bl	8001a28 <DS3231_setMin>

					val[0] = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setSec(atoi(val));
 8003a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a54:	4618      	mov	r0, r3
 8003a56:	f009 f915 	bl	800cc84 <atoi>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd ffc4 	bl	80019ec <DS3231_setSec>

					val[0] = rx_buffer[6];
 8003a64:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <main+0x1c34>)
 8003a66:	799b      	ldrb	r3, [r3, #6]
 8003a68:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[7];
 8003a6c:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <main+0x1c34>)
 8003a6e:	79db      	ldrb	r3, [r3, #7]
 8003a70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setDate(atoi(val));
 8003a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f009 f903 	bl	800cc84 <atoi>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe f82a 	bl	8001adc <DS3231_setDate>

					val[0] = rx_buffer[8];
 8003a88:	4b5e      	ldr	r3, [pc, #376]	; (8003c04 <main+0x1c34>)
 8003a8a:	7a1b      	ldrb	r3, [r3, #8]
 8003a8c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[9];
 8003a90:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <main+0x1c34>)
 8003a92:	7a5b      	ldrb	r3, [r3, #9]
 8003a94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setMonth(atoi(val));
 8003a98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f009 f8f1 	bl	800cc84 <atoi>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe f836 	bl	8001b18 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <main+0x1c34>)
 8003aae:	7a9b      	ldrb	r3, [r3, #10]
 8003ab0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					val[1] = rx_buffer[11];
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <main+0x1c34>)
 8003ab6:	7adb      	ldrb	r3, [r3, #11]
 8003ab8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setYear(atoi(val));
 8003abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f009 f8df 	bl	800cc84 <atoi>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe f842 	bl	8001b54 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8003ad0:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <main+0x1c34>)
 8003ad2:	7b1b      	ldrb	r3, [r3, #12]
 8003ad4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					DS3231_setWeekDay(atoi(val));
 8003ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003adc:	4618      	mov	r0, r3
 8003ade:	f009 f8d1 	bl	800cc84 <atoi>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd ffda 	bl	8001aa0 <DS3231_setWeekDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003af2:	e008      	b.n	8003b06 <main+0x1b36>
 8003af4:	4a44      	ldr	r2, [pc, #272]	; (8003c08 <main+0x1c38>)
 8003af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003afa:	6353      	str	r3, [r2, #52]	; 0x34
 8003afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b00:	3301      	adds	r3, #1
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d9f1      	bls.n	8003af4 <main+0x1b24>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003b10:	2202      	movs	r2, #2
 8003b12:	493e      	ldr	r1, [pc, #248]	; (8003c0c <main+0x1c3c>)
 8003b14:	483b      	ldr	r0, [pc, #236]	; (8003c04 <main+0x1c34>)
 8003b16:	f009 f8e3 	bl	800cce0 <memcmp>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d122      	bne.n	8003b66 <main+0x1b96>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8003b26:	e00a      	b.n	8003b3e <main+0x1b6e>
 8003b28:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fad7 	bl	80010e2 <AT24XX_Update>
 8003b34:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8003b3e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	d3ef      	bcc.n	8003b28 <main+0x1b58>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8003b48:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <main+0x1c40>)
 8003b4a:	f107 0420 	add.w	r4, r7, #32
 8003b4e:	461d      	mov	r5, r3
 8003b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8003b58:	f107 0120 	add.w	r1, r7, #32
 8003b5c:	2364      	movs	r3, #100	; 0x64
 8003b5e:	2214      	movs	r2, #20
 8003b60:	482c      	ldr	r0, [pc, #176]	; (8003c14 <main+0x1c44>)
 8003b62:	f007 ff98 	bl	800ba96 <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8003b66:	2202      	movs	r2, #2
 8003b68:	492b      	ldr	r1, [pc, #172]	; (8003c18 <main+0x1c48>)
 8003b6a:	4826      	ldr	r0, [pc, #152]	; (8003c04 <main+0x1c34>)
 8003b6c:	f009 f8b8 	bl	800cce0 <memcmp>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 82b6 	bne.w	80040e4 <main+0x2114>

					char valT[4] = { 0 };
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8003b82:	e00f      	b.n	8003ba4 <main+0x1bd4>
 8003b84:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003b88:	1c9a      	adds	r2, r3, #2
 8003b8a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003b8e:	491d      	ldr	r1, [pc, #116]	; (8003c04 <main+0x1c34>)
 8003b90:	5c8a      	ldrb	r2, [r1, r2]
 8003b92:	33d0      	adds	r3, #208	; 0xd0
 8003b94:	443b      	add	r3, r7
 8003b96:	f803 2cb4 	strb.w	r2, [r3, #-180]
 8003b9a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8003ba4:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d9eb      	bls.n	8003b84 <main+0x1bb4>

					temperatureRemote = atoi(valT);
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f009 f867 	bl	800cc84 <atoi>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fcb3 	bl	8000524 <__aeabi_i2d>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4916      	ldr	r1, [pc, #88]	; (8003c1c <main+0x1c4c>)
 8003bc4:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8003bc8:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <main+0x1c4c>)
 8003bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <main+0x1c50>)
 8003bd4:	f7fc fe3a 	bl	800084c <__aeabi_ddiv>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	490f      	ldr	r1, [pc, #60]	; (8003c1c <main+0x1c4c>)
 8003bde:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <main+0x1c54>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	833b      	strh	r3, [r7, #24]
 8003be8:	2300      	movs	r3, #0
 8003bea:	76bb      	strb	r3, [r7, #26]

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8003bf2:	e029      	b.n	8003c48 <main+0x1c78>
 8003bf4:	20000e74 	.word	0x20000e74
 8003bf8:	20000654 	.word	0x20000654
 8003bfc:	200013fc 	.word	0x200013fc
 8003c00:	08013630 	.word	0x08013630
 8003c04:	200013ec 	.word	0x200013ec
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	08013634 	.word	0x08013634
 8003c10:	08013650 	.word	0x08013650
 8003c14:	200005a8 	.word	0x200005a8
 8003c18:	08013638 	.word	0x08013638
 8003c1c:	20000680 	.word	0x20000680
 8003c20:	40240000 	.word	0x40240000
 8003c24:	08013664 	.word	0x08013664
 8003c28:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003c2c:	1d9a      	adds	r2, r3, #6
 8003c2e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003c32:	499d      	ldr	r1, [pc, #628]	; (8003ea8 <main+0x1ed8>)
 8003c34:	5c8a      	ldrb	r2, [r1, r2]
 8003c36:	33d0      	adds	r3, #208	; 0xd0
 8003c38:	443b      	add	r3, r7
 8003c3a:	f803 2cb8 	strb.w	r2, [r3, #-184]
 8003c3e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003c42:	3301      	adds	r3, #1
 8003c44:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8003c48:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d9eb      	bls.n	8003c28 <main+0x1c58>

					humidityRemote = atoi(valH);
 8003c50:	f107 0318 	add.w	r3, r7, #24
 8003c54:	4618      	mov	r0, r3
 8003c56:	f009 f815 	bl	800cc84 <atoi>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fc61 	bl	8000524 <__aeabi_i2d>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4991      	ldr	r1, [pc, #580]	; (8003eac <main+0x1edc>)
 8003c68:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 8003c6c:	4b8f      	ldr	r3, [pc, #572]	; (8003eac <main+0x1edc>)
 8003c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	4b8e      	ldr	r3, [pc, #568]	; (8003eb0 <main+0x1ee0>)
 8003c78:	f7fc fde8 	bl	800084c <__aeabi_ddiv>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	498a      	ldr	r1, [pc, #552]	; (8003eac <main+0x1edc>)
 8003c82:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003c86:	4b8b      	ldr	r3, [pc, #556]	; (8003eb4 <main+0x1ee4>)
 8003c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c8c:	4b8a      	ldr	r3, [pc, #552]	; (8003eb8 <main+0x1ee8>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d115      	bne.n	8003cc8 <main+0x1cf8>
 8003c9c:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <main+0x1ee4>)
 8003c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	4b85      	ldr	r3, [pc, #532]	; (8003ebc <main+0x1eec>)
 8003ca8:	f7fc ff18 	bl	8000adc <__aeabi_dcmplt>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <main+0x1cf8>
 8003cb2:	4b80      	ldr	r3, [pc, #512]	; (8003eb4 <main+0x1ee4>)
 8003cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	4b80      	ldr	r3, [pc, #512]	; (8003ec0 <main+0x1ef0>)
 8003cbe:	f7fc ff2b 	bl	8000b18 <__aeabi_dcmpgt>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d118      	bne.n	8003cfa <main+0x1d2a>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003cc8:	4b78      	ldr	r3, [pc, #480]	; (8003eac <main+0x1edc>)
 8003cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cce:	4b7d      	ldr	r3, [pc, #500]	; (8003ec4 <main+0x1ef4>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003cd4:	f7fc fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8202 	bne.w	80040e4 <main+0x2114>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003ce0:	4b72      	ldr	r3, [pc, #456]	; (8003eac <main+0x1edc>)
 8003ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	f7fc ff13 	bl	8000b18 <__aeabi_dcmpgt>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 81f5 	beq.w	80040e4 <main+0x2114>

						remoteSensorLastUpdate = 0;
 8003cfa:	4b73      	ldr	r3, [pc, #460]	; (8003ec8 <main+0x1ef8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 8003d00:	4b72      	ldr	r3, [pc, #456]	; (8003ecc <main+0x1efc>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d0a:	4971      	ldr	r1, [pc, #452]	; (8003ed0 <main+0x1f00>)
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f009 fec1 	bl	800da94 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003d12:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003d16:	2300      	movs	r3, #0
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	; (8003ed4 <main+0x1f04>)
 8003d20:	2128      	movs	r1, #40	; 0x28
 8003d22:	f240 1077 	movw	r0, #375	; 0x177
 8003d26:	f001 faa2 	bl	800526e <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003d2a:	4b63      	ldr	r3, [pc, #396]	; (8003eb8 <main+0x1ee8>)
 8003d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <main+0x1f08>)
 8003d36:	f7fc fedb 	bl	8000af0 <__aeabi_dcmple>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d014      	beq.n	8003d6a <main+0x1d9a>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003d40:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <main+0x1ee8>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f107 0010 	add.w	r0, r7, #16
 8003d4a:	4964      	ldr	r1, [pc, #400]	; (8003edc <main+0x1f0c>)
 8003d4c:	f009 fea2 	bl	800da94 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003d50:	f107 0210 	add.w	r2, r7, #16
 8003d54:	2300      	movs	r3, #0
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4b5d      	ldr	r3, [pc, #372]	; (8003ed4 <main+0x1f04>)
 8003d5e:	215a      	movs	r1, #90	; 0x5a
 8003d60:	f240 1061 	movw	r0, #353	; 0x161
 8003d64:	f001 fa83 	bl	800526e <LCD_Font>
 8003d68:	e076      	b.n	8003e58 <main+0x1e88>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003d6a:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <main+0x1ee8>)
 8003d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	f7fc feb0 	bl	8000adc <__aeabi_dcmplt>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <main+0x1df2>
 8003d82:	4b4d      	ldr	r3, [pc, #308]	; (8003eb8 <main+0x1ee8>)
 8003d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	4b52      	ldr	r3, [pc, #328]	; (8003ed8 <main+0x1f08>)
 8003d8e:	f7fc fec3 	bl	8000b18 <__aeabi_dcmpgt>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d014      	beq.n	8003dc2 <main+0x1df2>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003d98:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <main+0x1ee8>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f107 0010 	add.w	r0, r7, #16
 8003da2:	494e      	ldr	r1, [pc, #312]	; (8003edc <main+0x1f0c>)
 8003da4:	f009 fe76 	bl	800da94 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003da8:	f107 0210 	add.w	r2, r7, #16
 8003dac:	2300      	movs	r3, #0
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	2301      	movs	r3, #1
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <main+0x1f04>)
 8003db6:	215a      	movs	r1, #90	; 0x5a
 8003db8:	f240 1081 	movw	r0, #385	; 0x181
 8003dbc:	f001 fa57 	bl	800526e <LCD_Font>
 8003dc0:	e04a      	b.n	8003e58 <main+0x1e88>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <main+0x1ee8>)
 8003dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	f7fc fea2 	bl	8000b18 <__aeabi_dcmpgt>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01f      	beq.n	8003e1a <main+0x1e4a>
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <main+0x1ee8>)
 8003ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <main+0x1ee0>)
 8003de6:	f7fc fe79 	bl	8000adc <__aeabi_dcmplt>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d014      	beq.n	8003e1a <main+0x1e4a>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003df0:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <main+0x1ee8>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f107 0010 	add.w	r0, r7, #16
 8003dfa:	4939      	ldr	r1, [pc, #228]	; (8003ee0 <main+0x1f10>)
 8003dfc:	f009 fe4a 	bl	800da94 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003e00:	f107 0210 	add.w	r2, r7, #16
 8003e04:	2300      	movs	r3, #0
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	2301      	movs	r3, #1
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4b31      	ldr	r3, [pc, #196]	; (8003ed4 <main+0x1f04>)
 8003e0e:	215a      	movs	r1, #90	; 0x5a
 8003e10:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003e14:	f001 fa2b 	bl	800526e <LCD_Font>
 8003e18:	e01e      	b.n	8003e58 <main+0x1e88>
						}
						else if (temperatureRemoteLast >= 10) {
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <main+0x1ee8>)
 8003e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <main+0x1ee0>)
 8003e26:	f7fc fe6d 	bl	8000b04 <__aeabi_dcmpge>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <main+0x1e88>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <main+0x1ee8>)
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f107 0010 	add.w	r0, r7, #16
 8003e3a:	4929      	ldr	r1, [pc, #164]	; (8003ee0 <main+0x1f10>)
 8003e3c:	f009 fe2a 	bl	800da94 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003e40:	f107 0210 	add.w	r2, r7, #16
 8003e44:	2300      	movs	r3, #0
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <main+0x1f04>)
 8003e4e:	215a      	movs	r1, #90	; 0x5a
 8003e50:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003e54:	f001 fa0b 	bl	800526e <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 8003e58:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <main+0x1ee4>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <main+0x1ee8>)
 8003e60:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 8003e64:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <main+0x1ee8>)
 8003e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <main+0x1f08>)
 8003e70:	f7fc fe3e 	bl	8000af0 <__aeabi_dcmple>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d034      	beq.n	8003ee4 <main+0x1f14>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <main+0x1ee8>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f107 0010 	add.w	r0, r7, #16
 8003e84:	4915      	ldr	r1, [pc, #84]	; (8003edc <main+0x1f0c>)
 8003e86:	f009 fe05 	bl	800da94 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003e8a:	f107 0210 	add.w	r2, r7, #16
 8003e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	2301      	movs	r3, #1
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <main+0x1f04>)
 8003e9a:	215a      	movs	r1, #90	; 0x5a
 8003e9c:	f240 1061 	movw	r0, #353	; 0x161
 8003ea0:	f001 f9e5 	bl	800526e <LCD_Font>
 8003ea4:	e098      	b.n	8003fd8 <main+0x2008>
 8003ea6:	bf00      	nop
 8003ea8:	200013ec 	.word	0x200013ec
 8003eac:	20000690 	.word	0x20000690
 8003eb0:	40240000 	.word	0x40240000
 8003eb4:	20000680 	.word	0x20000680
 8003eb8:	20000688 	.word	0x20000688
 8003ebc:	40554000 	.word	0x40554000
 8003ec0:	c0440000 	.word	0xc0440000
 8003ec4:	20000698 	.word	0x20000698
 8003ec8:	20000004 	.word	0x20000004
 8003ecc:	20000000 	.word	0x20000000
 8003ed0:	080135e4 	.word	0x080135e4
 8003ed4:	08015e20 	.word	0x08015e20
 8003ed8:	c0240000 	.word	0xc0240000
 8003edc:	0801363c 	.word	0x0801363c
 8003ee0:	08013644 	.word	0x08013644
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003ee4:	4bab      	ldr	r3, [pc, #684]	; (8004194 <main+0x21c4>)
 8003ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	f7fc fdf3 	bl	8000adc <__aeabi_dcmplt>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <main+0x1f6e>
 8003efc:	4ba5      	ldr	r3, [pc, #660]	; (8004194 <main+0x21c4>)
 8003efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	4ba4      	ldr	r3, [pc, #656]	; (8004198 <main+0x21c8>)
 8003f08:	f7fc fe06 	bl	8000b18 <__aeabi_dcmpgt>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d015      	beq.n	8003f3e <main+0x1f6e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003f12:	4ba0      	ldr	r3, [pc, #640]	; (8004194 <main+0x21c4>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f107 0010 	add.w	r0, r7, #16
 8003f1c:	499f      	ldr	r1, [pc, #636]	; (800419c <main+0x21cc>)
 8003f1e:	f009 fdb9 	bl	800da94 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003f22:	f107 0210 	add.w	r2, r7, #16
 8003f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4b9b      	ldr	r3, [pc, #620]	; (80041a0 <main+0x21d0>)
 8003f32:	215a      	movs	r1, #90	; 0x5a
 8003f34:	f240 1081 	movw	r0, #385	; 0x181
 8003f38:	f001 f999 	bl	800526e <LCD_Font>
 8003f3c:	e04c      	b.n	8003fd8 <main+0x2008>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003f3e:	4b95      	ldr	r3, [pc, #596]	; (8004194 <main+0x21c4>)
 8003f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f7fc fde4 	bl	8000b18 <__aeabi_dcmpgt>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <main+0x1fc8>
 8003f56:	4b8f      	ldr	r3, [pc, #572]	; (8004194 <main+0x21c4>)
 8003f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	4b90      	ldr	r3, [pc, #576]	; (80041a4 <main+0x21d4>)
 8003f62:	f7fc fdbb 	bl	8000adc <__aeabi_dcmplt>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d015      	beq.n	8003f98 <main+0x1fc8>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003f6c:	4b89      	ldr	r3, [pc, #548]	; (8004194 <main+0x21c4>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f107 0010 	add.w	r0, r7, #16
 8003f76:	498c      	ldr	r1, [pc, #560]	; (80041a8 <main+0x21d8>)
 8003f78:	f009 fd8c 	bl	800da94 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003f7c:	f107 0210 	add.w	r2, r7, #16
 8003f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2301      	movs	r3, #1
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4b85      	ldr	r3, [pc, #532]	; (80041a0 <main+0x21d0>)
 8003f8c:	215a      	movs	r1, #90	; 0x5a
 8003f8e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003f92:	f001 f96c 	bl	800526e <LCD_Font>
 8003f96:	e01f      	b.n	8003fd8 <main+0x2008>
						}
						else if (temperatureRemoteLast >= 10) {
 8003f98:	4b7e      	ldr	r3, [pc, #504]	; (8004194 <main+0x21c4>)
 8003f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	4b80      	ldr	r3, [pc, #512]	; (80041a4 <main+0x21d4>)
 8003fa4:	f7fc fdae 	bl	8000b04 <__aeabi_dcmpge>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d014      	beq.n	8003fd8 <main+0x2008>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003fae:	4b79      	ldr	r3, [pc, #484]	; (8004194 <main+0x21c4>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f107 0010 	add.w	r0, r7, #16
 8003fb8:	497b      	ldr	r1, [pc, #492]	; (80041a8 <main+0x21d8>)
 8003fba:	f009 fd6b 	bl	800da94 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003fbe:	f107 0210 	add.w	r2, r7, #16
 8003fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4b74      	ldr	r3, [pc, #464]	; (80041a0 <main+0x21d0>)
 8003fce:	215a      	movs	r1, #90	; 0x5a
 8003fd0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003fd4:	f001 f94b 	bl	800526e <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 8003fd8:	4b74      	ldr	r3, [pc, #464]	; (80041ac <main+0x21dc>)
 8003fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	4b70      	ldr	r3, [pc, #448]	; (80041a4 <main+0x21d4>)
 8003fe4:	f7fc fd8e 	bl	8000b04 <__aeabi_dcmpge>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <main+0x2048>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003fee:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <main+0x21dc>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f107 000c 	add.w	r0, r7, #12
 8003ff8:	4968      	ldr	r1, [pc, #416]	; (800419c <main+0x21cc>)
 8003ffa:	f009 fd4b 	bl	800da94 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003ffe:	f107 020c 	add.w	r2, r7, #12
 8004002:	2300      	movs	r3, #0
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	2301      	movs	r3, #1
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <main+0x21d0>)
 800400c:	2128      	movs	r1, #40	; 0x28
 800400e:	f240 1073 	movw	r0, #371	; 0x173
 8004012:	f001 f92c 	bl	800526e <LCD_Font>
 8004016:	e01e      	b.n	8004056 <main+0x2086>
						}
						else if (humidityRemoteLast < 10) {
 8004018:	4b64      	ldr	r3, [pc, #400]	; (80041ac <main+0x21dc>)
 800401a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	4b60      	ldr	r3, [pc, #384]	; (80041a4 <main+0x21d4>)
 8004024:	f7fc fd5a 	bl	8000adc <__aeabi_dcmplt>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d013      	beq.n	8004056 <main+0x2086>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <main+0x21dc>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f107 000c 	add.w	r0, r7, #12
 8004038:	4958      	ldr	r1, [pc, #352]	; (800419c <main+0x21cc>)
 800403a:	f009 fd2b 	bl	800da94 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800403e:	f107 020c 	add.w	r2, r7, #12
 8004042:	2300      	movs	r3, #0
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	2301      	movs	r3, #1
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	4b55      	ldr	r3, [pc, #340]	; (80041a0 <main+0x21d0>)
 800404c:	2128      	movs	r1, #40	; 0x28
 800404e:	f240 1093 	movw	r0, #403	; 0x193
 8004052:	f001 f90c 	bl	800526e <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 8004056:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <main+0x21e0>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	4953      	ldr	r1, [pc, #332]	; (80041ac <main+0x21dc>)
 800405e:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 8004062:	4b52      	ldr	r3, [pc, #328]	; (80041ac <main+0x21dc>)
 8004064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <main+0x21d4>)
 800406e:	f7fc fd49 	bl	8000b04 <__aeabi_dcmpge>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <main+0x20d4>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8004078:	4b4c      	ldr	r3, [pc, #304]	; (80041ac <main+0x21dc>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f107 000c 	add.w	r0, r7, #12
 8004082:	4946      	ldr	r1, [pc, #280]	; (800419c <main+0x21cc>)
 8004084:	f009 fd06 	bl	800da94 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8004088:	f107 020c 	add.w	r2, r7, #12
 800408c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	2301      	movs	r3, #1
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <main+0x21d0>)
 8004098:	2128      	movs	r1, #40	; 0x28
 800409a:	f240 1073 	movw	r0, #371	; 0x173
 800409e:	f001 f8e6 	bl	800526e <LCD_Font>
 80040a2:	e01f      	b.n	80040e4 <main+0x2114>
						}
						else if (humidityRemoteLast < 10) {
 80040a4:	4b41      	ldr	r3, [pc, #260]	; (80041ac <main+0x21dc>)
 80040a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	4b3d      	ldr	r3, [pc, #244]	; (80041a4 <main+0x21d4>)
 80040b0:	f7fc fd14 	bl	8000adc <__aeabi_dcmplt>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d014      	beq.n	80040e4 <main+0x2114>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <main+0x21dc>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f107 000c 	add.w	r0, r7, #12
 80040c4:	4935      	ldr	r1, [pc, #212]	; (800419c <main+0x21cc>)
 80040c6:	f009 fce5 	bl	800da94 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80040ca:	f107 020c 	add.w	r2, r7, #12
 80040ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	2301      	movs	r3, #1
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <main+0x21d0>)
 80040da:	2128      	movs	r1, #40	; 0x28
 80040dc:	f240 1093 	movw	r0, #403	; 0x193
 80040e0:	f001 f8c5 	bl	800526e <LCD_Font>
						}
					}
				}
				rx_index = 0;
 80040e4:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <main+0x21e4>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80040f0:	e009      	b.n	8004106 <main+0x2136>
 80040f2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80040f6:	4a30      	ldr	r2, [pc, #192]	; (80041b8 <main+0x21e8>)
 80040f8:	2100      	movs	r1, #0
 80040fa:	54d1      	strb	r1, [r2, r3]
 80040fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004100:	3301      	adds	r3, #1
 8004102:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8004106:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800410a:	2b0f      	cmp	r3, #15
 800410c:	d9f1      	bls.n	80040f2 <main+0x2122>
			}

			remoteSensorLastUpdate++;
 800410e:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <main+0x21ec>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	4b29      	ldr	r3, [pc, #164]	; (80041bc <main+0x21ec>)
 8004118:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <main+0x21ec>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	f240 8108 	bls.w	8004334 <main+0x2364>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <main+0x21c4>)
 8004126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f7fc fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 80fb 	bne.w	8004334 <main+0x2364>
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <main+0x21dc>)
 8004140:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	f7fc fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 80ee 	bne.w	8004334 <main+0x2364>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <main+0x21c4>)
 800415a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <main+0x21c8>)
 8004164:	f7fc fcc4 	bl	8000af0 <__aeabi_dcmple>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d028      	beq.n	80041c0 <main+0x21f0>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <main+0x21c4>)
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	1d38      	adds	r0, r7, #4
 8004176:	4909      	ldr	r1, [pc, #36]	; (800419c <main+0x21cc>)
 8004178:	f009 fc8c 	bl	800da94 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800417c:	1d3a      	adds	r2, r7, #4
 800417e:	2300      	movs	r3, #0
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2301      	movs	r3, #1
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <main+0x21d0>)
 8004188:	215a      	movs	r1, #90	; 0x5a
 800418a:	f240 1061 	movw	r0, #353	; 0x161
 800418e:	f001 f86e 	bl	800526e <LCD_Font>
 8004192:	e086      	b.n	80042a2 <main+0x22d2>
 8004194:	20000688 	.word	0x20000688
 8004198:	c0240000 	.word	0xc0240000
 800419c:	0801363c 	.word	0x0801363c
 80041a0:	08015e20 	.word	0x08015e20
 80041a4:	40240000 	.word	0x40240000
 80041a8:	08013644 	.word	0x08013644
 80041ac:	20000698 	.word	0x20000698
 80041b0:	20000690 	.word	0x20000690
 80041b4:	200013fc 	.word	0x200013fc
 80041b8:	200013ec 	.word	0x200013ec
 80041bc:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80041c0:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <main+0x2370>)
 80041c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f7fc fc85 	bl	8000adc <__aeabi_dcmplt>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01d      	beq.n	8004214 <main+0x2244>
 80041d8:	4b59      	ldr	r3, [pc, #356]	; (8004340 <main+0x2370>)
 80041da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	4b58      	ldr	r3, [pc, #352]	; (8004344 <main+0x2374>)
 80041e4:	f7fc fc98 	bl	8000b18 <__aeabi_dcmpgt>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <main+0x2244>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80041ee:	4b54      	ldr	r3, [pc, #336]	; (8004340 <main+0x2370>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	1d38      	adds	r0, r7, #4
 80041f6:	4954      	ldr	r1, [pc, #336]	; (8004348 <main+0x2378>)
 80041f8:	f009 fc4c 	bl	800da94 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80041fc:	1d3a      	adds	r2, r7, #4
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2301      	movs	r3, #1
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	4b51      	ldr	r3, [pc, #324]	; (800434c <main+0x237c>)
 8004208:	215a      	movs	r1, #90	; 0x5a
 800420a:	f240 1081 	movw	r0, #385	; 0x181
 800420e:	f001 f82e 	bl	800526e <LCD_Font>
 8004212:	e046      	b.n	80042a2 <main+0x22d2>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8004214:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <main+0x2370>)
 8004216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	f7fc fc79 	bl	8000b18 <__aeabi_dcmpgt>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01d      	beq.n	8004268 <main+0x2298>
 800422c:	4b44      	ldr	r3, [pc, #272]	; (8004340 <main+0x2370>)
 800422e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	4b46      	ldr	r3, [pc, #280]	; (8004350 <main+0x2380>)
 8004238:	f7fc fc50 	bl	8000adc <__aeabi_dcmplt>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d012      	beq.n	8004268 <main+0x2298>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8004242:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <main+0x2370>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	1d38      	adds	r0, r7, #4
 800424a:	4942      	ldr	r1, [pc, #264]	; (8004354 <main+0x2384>)
 800424c:	f009 fc22 	bl	800da94 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8004250:	1d3a      	adds	r2, r7, #4
 8004252:	2300      	movs	r3, #0
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	2301      	movs	r3, #1
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	4b3c      	ldr	r3, [pc, #240]	; (800434c <main+0x237c>)
 800425c:	215a      	movs	r1, #90	; 0x5a
 800425e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8004262:	f001 f804 	bl	800526e <LCD_Font>
 8004266:	e01c      	b.n	80042a2 <main+0x22d2>
					}
					else if (temperatureRemoteLast >= 10) {
 8004268:	4b35      	ldr	r3, [pc, #212]	; (8004340 <main+0x2370>)
 800426a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <main+0x2380>)
 8004274:	f7fc fc46 	bl	8000b04 <__aeabi_dcmpge>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d011      	beq.n	80042a2 <main+0x22d2>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800427e:	4b30      	ldr	r3, [pc, #192]	; (8004340 <main+0x2370>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	1d38      	adds	r0, r7, #4
 8004286:	4933      	ldr	r1, [pc, #204]	; (8004354 <main+0x2384>)
 8004288:	f009 fc04 	bl	800da94 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800428c:	1d3a      	adds	r2, r7, #4
 800428e:	2300      	movs	r3, #0
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	2301      	movs	r3, #1
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <main+0x237c>)
 8004298:	215a      	movs	r1, #90	; 0x5a
 800429a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800429e:	f000 ffe6 	bl	800526e <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 80042a2:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <main+0x2388>)
 80042a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	4b28      	ldr	r3, [pc, #160]	; (8004350 <main+0x2380>)
 80042ae:	f7fc fc29 	bl	8000b04 <__aeabi_dcmpge>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d012      	beq.n	80042de <main+0x230e>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80042b8:	4b27      	ldr	r3, [pc, #156]	; (8004358 <main+0x2388>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	4638      	mov	r0, r7
 80042c0:	4921      	ldr	r1, [pc, #132]	; (8004348 <main+0x2378>)
 80042c2:	f009 fbe7 	bl	800da94 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80042c6:	463a      	mov	r2, r7
 80042c8:	2300      	movs	r3, #0
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	2301      	movs	r3, #1
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4b1e      	ldr	r3, [pc, #120]	; (800434c <main+0x237c>)
 80042d2:	2128      	movs	r1, #40	; 0x28
 80042d4:	f240 1073 	movw	r0, #371	; 0x173
 80042d8:	f000 ffc9 	bl	800526e <LCD_Font>
 80042dc:	e01c      	b.n	8004318 <main+0x2348>
					}
					else if (humidityRemoteLast < 10) {
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <main+0x2388>)
 80042e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <main+0x2380>)
 80042ea:	f7fc fbf7 	bl	8000adc <__aeabi_dcmplt>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d011      	beq.n	8004318 <main+0x2348>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <main+0x2388>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	4638      	mov	r0, r7
 80042fc:	4912      	ldr	r1, [pc, #72]	; (8004348 <main+0x2378>)
 80042fe:	f009 fbc9 	bl	800da94 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8004302:	463a      	mov	r2, r7
 8004304:	2300      	movs	r3, #0
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	2301      	movs	r3, #1
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <main+0x237c>)
 800430e:	2128      	movs	r1, #40	; 0x28
 8004310:	f240 1093 	movw	r0, #403	; 0x193
 8004314:	f000 ffab 	bl	800526e <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8004318:	4909      	ldr	r1, [pc, #36]	; (8004340 <main+0x2370>)
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8004326:	490c      	ldr	r1, [pc, #48]	; (8004358 <main+0x2388>)
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			rtcSecLast = rtcSec;
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <main+0x238c>)
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <main+0x2390>)
 800433a:	701a      	strb	r2, [r3, #0]
	while (1) {
 800433c:	f7fe b996 	b.w	800266c <main+0x69c>
 8004340:	20000688 	.word	0x20000688
 8004344:	c0240000 	.word	0xc0240000
 8004348:	0801363c 	.word	0x0801363c
 800434c:	08015e20 	.word	0x08015e20
 8004350:	40240000 	.word	0x40240000
 8004354:	08013644 	.word	0x08013644
 8004358:	20000698 	.word	0x20000698
 800435c:	20000655 	.word	0x20000655
 8004360:	20000000 	.word	0x20000000

08004364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b094      	sub	sp, #80	; 0x50
 8004368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800436a:	f107 0320 	add.w	r3, r7, #32
 800436e:	2230      	movs	r2, #48	; 0x30
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f008 fcd2 	bl	800cd1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <SystemClock_Config+0xd4>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4a29      	ldr	r2, [pc, #164]	; (8004438 <SystemClock_Config+0xd4>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <SystemClock_Config+0xd4>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a4:	2300      	movs	r3, #0
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <SystemClock_Config+0xd8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a23      	ldr	r2, [pc, #140]	; (800443c <SystemClock_Config+0xd8>)
 80043ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b21      	ldr	r3, [pc, #132]	; (800443c <SystemClock_Config+0xd8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80043c0:	230d      	movs	r3, #13
 80043c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80043ca:	2301      	movs	r3, #1
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80043ce:	2301      	movs	r3, #1
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043d2:	2302      	movs	r3, #2
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80043dc:	2304      	movs	r3, #4
 80043de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80043e0:	23a8      	movs	r3, #168	; 0xa8
 80043e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043e4:	2302      	movs	r3, #2
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80043e8:	2307      	movs	r3, #7
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043ec:	f107 0320 	add.w	r3, r7, #32
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 f949 	bl	8009688 <HAL_RCC_OscConfig>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80043fc:	f000 fb8e 	bl	8004b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004400:	230f      	movs	r3, #15
 8004402:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004404:	2302      	movs	r3, #2
 8004406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800440c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004410:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004416:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	2105      	movs	r1, #5
 800441e:	4618      	mov	r0, r3
 8004420:	f005 fbaa 	bl	8009b78 <HAL_RCC_ClockConfig>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800442a:	f000 fb77 	bl	8004b1c <Error_Handler>
  }
}
 800442e:	bf00      	nop
 8004430:	3750      	adds	r7, #80	; 0x50
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	40007000 	.word	0x40007000

08004440 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004446:	463b      	mov	r3, r7
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <MX_DAC_Init+0x64>)
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <MX_DAC_Init+0x68>)
 8004452:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004454:	4813      	ldr	r0, [pc, #76]	; (80044a4 <MX_DAC_Init+0x64>)
 8004456:	f002 f9f4 	bl	8006842 <HAL_DAC_Init>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8004460:	f000 fb5c 	bl	8004b1c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8004464:	2304      	movs	r3, #4
 8004466:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004468:	2300      	movs	r3, #0
 800446a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800446c:	463b      	mov	r3, r7
 800446e:	2200      	movs	r2, #0
 8004470:	4619      	mov	r1, r3
 8004472:	480c      	ldr	r0, [pc, #48]	; (80044a4 <MX_DAC_Init+0x64>)
 8004474:	f002 fb74 	bl	8006b60 <HAL_DAC_ConfigChannel>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800447e:	f000 fb4d 	bl	8004b1c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004482:	2314      	movs	r3, #20
 8004484:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004486:	463b      	mov	r3, r7
 8004488:	2210      	movs	r2, #16
 800448a:	4619      	mov	r1, r3
 800448c:	4805      	ldr	r0, [pc, #20]	; (80044a4 <MX_DAC_Init+0x64>)
 800448e:	f002 fb67 	bl	8006b60 <HAL_DAC_ConfigChannel>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8004498:	f000 fb40 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	200002bc 	.word	0x200002bc
 80044a8:	40007400 	.word	0x40007400

080044ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <MX_I2C1_Init+0x50>)
 80044b2:	4a13      	ldr	r2, [pc, #76]	; (8004500 <MX_I2C1_Init+0x54>)
 80044b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <MX_I2C1_Init+0x50>)
 80044b8:	4a12      	ldr	r2, [pc, #72]	; (8004504 <MX_I2C1_Init+0x58>)
 80044ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <MX_I2C1_Init+0x50>)
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <MX_I2C1_Init+0x50>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <MX_I2C1_Init+0x50>)
 80044ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <MX_I2C1_Init+0x50>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <MX_I2C1_Init+0x50>)
 80044d8:	2200      	movs	r2, #0
 80044da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <MX_I2C1_Init+0x50>)
 80044de:	2200      	movs	r2, #0
 80044e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <MX_I2C1_Init+0x50>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80044e8:	4804      	ldr	r0, [pc, #16]	; (80044fc <MX_I2C1_Init+0x50>)
 80044ea:	f003 fae9 	bl	8007ac0 <HAL_I2C_Init>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80044f4:	f000 fb12 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000390 	.word	0x20000390
 8004500:	40005400 	.word	0x40005400
 8004504:	00061a80 	.word	0x00061a80

08004508 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <MX_IWDG_Init+0x2c>)
 800450e:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <MX_IWDG_Init+0x30>)
 8004510:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <MX_IWDG_Init+0x2c>)
 8004514:	2206      	movs	r2, #6
 8004516:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <MX_IWDG_Init+0x2c>)
 800451a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800451e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004520:	4804      	ldr	r0, [pc, #16]	; (8004534 <MX_IWDG_Init+0x2c>)
 8004522:	f005 f85e 	bl	80095e2 <HAL_IWDG_Init>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800452c:	f000 faf6 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004530:	bf00      	nop
 8004532:	bd80      	pop	{r7, pc}
 8004534:	200003e4 	.word	0x200003e4
 8004538:	40003000 	.word	0x40003000

0800453c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004550:	2300      	movs	r3, #0
 8004552:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004554:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <MX_RTC_Init+0xac>)
 8004556:	4a25      	ldr	r2, [pc, #148]	; (80045ec <MX_RTC_Init+0xb0>)
 8004558:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800455a:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <MX_RTC_Init+0xac>)
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <MX_RTC_Init+0xac>)
 8004562:	227f      	movs	r2, #127	; 0x7f
 8004564:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <MX_RTC_Init+0xac>)
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800456c:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <MX_RTC_Init+0xac>)
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <MX_RTC_Init+0xac>)
 8004574:	2200      	movs	r2, #0
 8004576:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <MX_RTC_Init+0xac>)
 800457a:	2200      	movs	r2, #0
 800457c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800457e:	481a      	ldr	r0, [pc, #104]	; (80045e8 <MX_RTC_Init+0xac>)
 8004580:	f005 fdfc 	bl	800a17c <HAL_RTC_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800458a:	f000 fac7 	bl	8004b1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	2200      	movs	r2, #0
 80045a6:	4619      	mov	r1, r3
 80045a8:	480f      	ldr	r0, [pc, #60]	; (80045e8 <MX_RTC_Init+0xac>)
 80045aa:	f005 fe78 	bl	800a29e <HAL_RTC_SetTime>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80045b4:	f000 fab2 	bl	8004b1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80045b8:	2301      	movs	r3, #1
 80045ba:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80045bc:	2301      	movs	r3, #1
 80045be:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80045c8:	463b      	mov	r3, r7
 80045ca:	2200      	movs	r2, #0
 80045cc:	4619      	mov	r1, r3
 80045ce:	4806      	ldr	r0, [pc, #24]	; (80045e8 <MX_RTC_Init+0xac>)
 80045d0:	f005 ff80 	bl	800a4d4 <HAL_RTC_SetDate>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80045da:	f000 fa9f 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80045de:	bf00      	nop
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	200003f0 	.word	0x200003f0
 80045ec:	40002800 	.word	0x40002800

080045f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <MX_SPI1_Init+0x64>)
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <MX_SPI1_Init+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <MX_SPI1_Init+0x64>)
 80045fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <MX_SPI1_Init+0x64>)
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <MX_SPI1_Init+0x64>)
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <MX_SPI1_Init+0x64>)
 8004610:	2200      	movs	r2, #0
 8004612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <MX_SPI1_Init+0x64>)
 8004616:	2200      	movs	r2, #0
 8004618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <MX_SPI1_Init+0x64>)
 800461c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004620:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <MX_SPI1_Init+0x64>)
 8004624:	2200      	movs	r2, #0
 8004626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <MX_SPI1_Init+0x64>)
 800462a:	2200      	movs	r2, #0
 800462c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <MX_SPI1_Init+0x64>)
 8004630:	2200      	movs	r2, #0
 8004632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <MX_SPI1_Init+0x64>)
 8004636:	2200      	movs	r2, #0
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <MX_SPI1_Init+0x64>)
 800463c:	220a      	movs	r2, #10
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004640:	4804      	ldr	r0, [pc, #16]	; (8004654 <MX_SPI1_Init+0x64>)
 8004642:	f006 f8cd 	bl	800a7e0 <HAL_SPI_Init>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800464c:	f000 fa66 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004650:	bf00      	nop
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000410 	.word	0x20000410
 8004658:	40013000 	.word	0x40013000

0800465c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004662:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <MX_SPI2_Init+0x68>)
 8004664:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004666:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800466c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <MX_SPI2_Init+0x64>)
 800467c:	2200      	movs	r2, #0
 800467e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004682:	2200      	movs	r2, #0
 8004684:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004688:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800468c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004690:	2238      	movs	r2, #56	; 0x38
 8004692:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <MX_SPI2_Init+0x64>)
 8004696:	2200      	movs	r2, #0
 8004698:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <MX_SPI2_Init+0x64>)
 800469c:	2200      	movs	r2, #0
 800469e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <MX_SPI2_Init+0x64>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <MX_SPI2_Init+0x64>)
 80046a8:	220a      	movs	r2, #10
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80046ac:	4804      	ldr	r0, [pc, #16]	; (80046c0 <MX_SPI2_Init+0x64>)
 80046ae:	f006 f897 	bl	800a7e0 <HAL_SPI_Init>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80046b8:	f000 fa30 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000468 	.word	0x20000468
 80046c4:	40003800 	.word	0x40003800

080046c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <MX_SPI3_Init+0x64>)
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <MX_SPI3_Init+0x68>)
 80046d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <MX_SPI3_Init+0x64>)
 80046d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <MX_SPI3_Init+0x64>)
 80046dc:	2200      	movs	r2, #0
 80046de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <MX_SPI3_Init+0x64>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e6:	4b11      	ldr	r3, [pc, #68]	; (800472c <MX_SPI3_Init+0x64>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <MX_SPI3_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <MX_SPI3_Init+0x64>)
 80046f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80046f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <MX_SPI3_Init+0x64>)
 80046fc:	2238      	movs	r2, #56	; 0x38
 80046fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <MX_SPI3_Init+0x64>)
 8004702:	2200      	movs	r2, #0
 8004704:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <MX_SPI3_Init+0x64>)
 8004708:	2200      	movs	r2, #0
 800470a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <MX_SPI3_Init+0x64>)
 800470e:	2200      	movs	r2, #0
 8004710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <MX_SPI3_Init+0x64>)
 8004714:	220a      	movs	r2, #10
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004718:	4804      	ldr	r0, [pc, #16]	; (800472c <MX_SPI3_Init+0x64>)
 800471a:	f006 f861 	bl	800a7e0 <HAL_SPI_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004724:	f000 f9fa 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	200004c0 	.word	0x200004c0
 8004730:	40003c00 	.word	0x40003c00

08004734 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800473a:	463b      	mov	r3, r7
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <MX_TIM6_Init+0x60>)
 8004744:	4a14      	ldr	r2, [pc, #80]	; (8004798 <MX_TIM6_Init+0x64>)
 8004746:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 21-1;
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <MX_TIM6_Init+0x60>)
 800474a:	2214      	movs	r2, #20
 800474c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <MX_TIM6_Init+0x60>)
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <MX_TIM6_Init+0x60>)
 8004756:	2209      	movs	r2, #9
 8004758:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <MX_TIM6_Init+0x60>)
 800475c:	2200      	movs	r2, #0
 800475e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004760:	480c      	ldr	r0, [pc, #48]	; (8004794 <MX_TIM6_Init+0x60>)
 8004762:	f006 fe29 	bl	800b3b8 <HAL_TIM_Base_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800476c:	f000 f9d6 	bl	8004b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004770:	2320      	movs	r3, #32
 8004772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004778:	463b      	mov	r3, r7
 800477a:	4619      	mov	r1, r3
 800477c:	4805      	ldr	r0, [pc, #20]	; (8004794 <MX_TIM6_Init+0x60>)
 800477e:	f007 f8ad 	bl	800b8dc <HAL_TIMEx_MasterConfigSynchronization>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8004788:	f000 f9c8 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000518 	.word	0x20000518
 8004798:	40001000 	.word	0x40001000

0800479c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a2:	463b      	mov	r3, r7
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <MX_TIM7_Init+0x60>)
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <MX_TIM7_Init+0x64>)
 80047ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 21-1;
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <MX_TIM7_Init+0x60>)
 80047b2:	2214      	movs	r2, #20
 80047b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <MX_TIM7_Init+0x60>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <MX_TIM7_Init+0x60>)
 80047be:	2209      	movs	r2, #9
 80047c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047c2:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <MX_TIM7_Init+0x60>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80047c8:	480c      	ldr	r0, [pc, #48]	; (80047fc <MX_TIM7_Init+0x60>)
 80047ca:	f006 fdf5 	bl	800b3b8 <HAL_TIM_Base_Init>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80047d4:	f000 f9a2 	bl	8004b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80047d8:	2320      	movs	r3, #32
 80047da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047dc:	2300      	movs	r3, #0
 80047de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047e0:	463b      	mov	r3, r7
 80047e2:	4619      	mov	r1, r3
 80047e4:	4805      	ldr	r0, [pc, #20]	; (80047fc <MX_TIM7_Init+0x60>)
 80047e6:	f007 f879 	bl	800b8dc <HAL_TIMEx_MasterConfigSynchronization>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80047f0:	f000 f994 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000560 	.word	0x20000560
 8004800:	40001400 	.word	0x40001400

08004804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004808:	4b11      	ldr	r3, [pc, #68]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <MX_USART1_UART_Init+0x50>)
 800480c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 8004810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 8004818:	2200      	movs	r2, #0
 800481a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 800481e:	2200      	movs	r2, #0
 8004820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 8004824:	2200      	movs	r2, #0
 8004826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 800482a:	220c      	movs	r2, #12
 800482c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 8004830:	2200      	movs	r2, #0
 8004832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800483a:	4805      	ldr	r0, [pc, #20]	; (8004850 <MX_USART1_UART_Init+0x4c>)
 800483c:	f007 f8de 	bl	800b9fc <HAL_UART_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004846:	f000 f969 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200005a8 	.word	0x200005a8
 8004854:	40011000 	.word	0x40011000

08004858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <MX_DMA_Init+0x4c>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <MX_DMA_Init+0x4c>)
 8004868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <MX_DMA_Init+0x4c>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800487a:	2200      	movs	r2, #0
 800487c:	2100      	movs	r1, #0
 800487e:	2010      	movs	r0, #16
 8004880:	f001 ffa9 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004884:	2010      	movs	r0, #16
 8004886:	f001 ffc2 	bl	800680e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	2011      	movs	r0, #17
 8004890:	f001 ffa1 	bl	80067d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004894:	2011      	movs	r0, #17
 8004896:	f001 ffba 	bl	800680e <HAL_NVIC_EnableIRQ>

}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800

080048a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08c      	sub	sp, #48	; 0x30
 80048ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ae:	f107 031c 	add.w	r3, r7, #28
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	609a      	str	r2, [r3, #8]
 80048ba:	60da      	str	r2, [r3, #12]
 80048bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	4b60      	ldr	r3, [pc, #384]	; (8004a44 <MX_GPIO_Init+0x19c>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4a5f      	ldr	r2, [pc, #380]	; (8004a44 <MX_GPIO_Init+0x19c>)
 80048c8:	f043 0310 	orr.w	r3, r3, #16
 80048cc:	6313      	str	r3, [r2, #48]	; 0x30
 80048ce:	4b5d      	ldr	r3, [pc, #372]	; (8004a44 <MX_GPIO_Init+0x19c>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <MX_GPIO_Init+0x19c>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4a58      	ldr	r2, [pc, #352]	; (8004a44 <MX_GPIO_Init+0x19c>)
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ea:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <MX_GPIO_Init+0x19c>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	4b52      	ldr	r3, [pc, #328]	; (8004a44 <MX_GPIO_Init+0x19c>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a51      	ldr	r2, [pc, #324]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b4f      	ldr	r3, [pc, #316]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a4a      	ldr	r2, [pc, #296]	; (8004a44 <MX_GPIO_Init+0x19c>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b48      	ldr	r3, [pc, #288]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	4b44      	ldr	r3, [pc, #272]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a43      	ldr	r2, [pc, #268]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	4b3d      	ldr	r3, [pc, #244]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	4a3c      	ldr	r2, [pc, #240]	; (8004a44 <MX_GPIO_Init+0x19c>)
 8004954:	f043 0308 	orr.w	r3, r3, #8
 8004958:	6313      	str	r3, [r2, #48]	; 0x30
 800495a:	4b3a      	ldr	r3, [pc, #232]	; (8004a44 <MX_GPIO_Init+0x19c>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8004966:	2201      	movs	r2, #1
 8004968:	2140      	movs	r1, #64	; 0x40
 800496a:	4837      	ldr	r0, [pc, #220]	; (8004a48 <MX_GPIO_Init+0x1a0>)
 800496c:	f003 f88e 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8004970:	2200      	movs	r2, #0
 8004972:	2180      	movs	r1, #128	; 0x80
 8004974:	4834      	ldr	r0, [pc, #208]	; (8004a48 <MX_GPIO_Init+0x1a0>)
 8004976:	f003 f889 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_SET);
 800497a:	2201      	movs	r2, #1
 800497c:	2101      	movs	r1, #1
 800497e:	4833      	ldr	r0, [pc, #204]	; (8004a4c <MX_GPIO_Init+0x1a4>)
 8004980:	f003 f884 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8004984:	2200      	movs	r2, #0
 8004986:	f44f 7140 	mov.w	r1, #768	; 0x300
 800498a:	4831      	ldr	r0, [pc, #196]	; (8004a50 <MX_GPIO_Init+0x1a8>)
 800498c:	f003 f87e 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8004990:	2200      	movs	r2, #0
 8004992:	2104      	movs	r1, #4
 8004994:	482f      	ldr	r0, [pc, #188]	; (8004a54 <MX_GPIO_Init+0x1ac>)
 8004996:	f003 f879 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 800499a:	2318      	movs	r3, #24
 800499c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049a6:	f107 031c 	add.w	r3, r7, #28
 80049aa:	4619      	mov	r1, r3
 80049ac:	482a      	ldr	r0, [pc, #168]	; (8004a58 <MX_GPIO_Init+0x1b0>)
 80049ae:	f002 fdbd 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 80049b2:	23c0      	movs	r3, #192	; 0xc0
 80049b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049b6:	2301      	movs	r3, #1
 80049b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049be:	2300      	movs	r3, #0
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c2:	f107 031c 	add.w	r3, r7, #28
 80049c6:	4619      	mov	r1, r3
 80049c8:	481f      	ldr	r0, [pc, #124]	; (8004a48 <MX_GPIO_Init+0x1a0>)
 80049ca:	f002 fdaf 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80049ce:	2320      	movs	r3, #32
 80049d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049d6:	2301      	movs	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80049da:	f107 031c 	add.w	r3, r7, #28
 80049de:	4619      	mov	r1, r3
 80049e0:	481b      	ldr	r0, [pc, #108]	; (8004a50 <MX_GPIO_Init+0x1a8>)
 80049e2:	f002 fda3 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ea:	2301      	movs	r3, #1
 80049ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ee:	2301      	movs	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f2:	2303      	movs	r3, #3
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 80049f6:	f107 031c 	add.w	r3, r7, #28
 80049fa:	4619      	mov	r1, r3
 80049fc:	4813      	ldr	r0, [pc, #76]	; (8004a4c <MX_GPIO_Init+0x1a4>)
 80049fe:	f002 fd95 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8004a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a10:	2300      	movs	r3, #0
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a14:	f107 031c 	add.w	r3, r7, #28
 8004a18:	4619      	mov	r1, r3
 8004a1a:	480d      	ldr	r0, [pc, #52]	; (8004a50 <MX_GPIO_Init+0x1a8>)
 8004a1c:	f002 fd86 	bl	800752c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8004a20:	2304      	movs	r3, #4
 8004a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a24:	2301      	movs	r3, #1
 8004a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004a30:	f107 031c 	add.w	r3, r7, #28
 8004a34:	4619      	mov	r1, r3
 8004a36:	4807      	ldr	r0, [pc, #28]	; (8004a54 <MX_GPIO_Init+0x1ac>)
 8004a38:	f002 fd78 	bl	800752c <HAL_GPIO_Init>

}
 8004a3c:	bf00      	nop
 8004a3e:	3730      	adds	r7, #48	; 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40020000 	.word	0x40020000
 8004a4c:	40020400 	.word	0x40020400
 8004a50:	40020800 	.word	0x40020800
 8004a54:	40020c00 	.word	0x40020c00
 8004a58:	40021000 	.word	0x40021000

08004a5c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004a62:	1d3b      	adds	r3, r7, #4
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	60da      	str	r2, [r3, #12]
 8004a6e:	611a      	str	r2, [r3, #16]
 8004a70:	615a      	str	r2, [r3, #20]
 8004a72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004a76:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004a7a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004a7e:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <MX_FSMC_Init+0xbc>)
 8004a80:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004a8e:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004a94:	4b1f      	ldr	r3, [pc, #124]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004a96:	2210      	movs	r2, #16
 8004a98:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004aa0:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004ab2:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004ac0:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004adc:	230f      	movs	r3, #15
 8004ade:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004ae8:	2310      	movs	r3, #16
 8004aea:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004aec:	2311      	movs	r3, #17
 8004aee:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	2200      	movs	r2, #0
 8004af8:	4619      	mov	r1, r3
 8004afa:	4806      	ldr	r0, [pc, #24]	; (8004b14 <MX_FSMC_Init+0xb8>)
 8004afc:	f006 fc18 	bl	800b330 <HAL_SRAM_Init>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004b06:	f000 f809 	bl	8004b1c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004b0a:	bf00      	nop
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200005ec 	.word	0x200005ec
 8004b18:	a0000104 	.word	0xa0000104

08004b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b20:	b672      	cpsid	i
}
 8004b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004b24:	e7fe      	b.n	8004b24 <Error_Handler+0x8>

08004b26 <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b) {
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	71fb      	strb	r3, [r7, #7]
 8004b30:	460b      	mov	r3, r1
 8004b32:	71bb      	strb	r3, [r7, #6]
 8004b34:	4613      	mov	r3, r2
 8004b36:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	041a      	lsls	r2, r3, #16
 8004b3c:	79bb      	ldrb	r3, [r7, #6]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	441a      	add	r2, r3
 8004b42:	797b      	ldrb	r3, [r7, #5]
 8004b44:	4413      	add	r3, r2
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24) {
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	6039      	str	r1, [r7, #0]
 8004b5c:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <H24_RGB565+0x4a>
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	08db      	lsrs	r3, r3, #3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	02db      	lsls	r3, r3, #11
 8004b7c:	b21a      	sxth	r2, r3
 8004b7e:	7bbb      	ldrb	r3, [r7, #14]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	015b      	lsls	r3, r3, #5
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	7b7b      	ldrb	r3, [r7, #13]
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	4313      	orrs	r3, r2
 8004b96:	b21b      	sxth	r3, r3
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	e012      	b.n	8004bc2 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8004b9c:	7b7b      	ldrb	r3, [r7, #13]
 8004b9e:	08db      	lsrs	r3, r3, #3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	02db      	lsls	r3, r3, #11
 8004ba4:	b21a      	sxth	r2, r3
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	015b      	lsls	r3, r3, #5
 8004bae:	b21b      	sxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b21a      	sxth	r2, r3
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	08db      	lsrs	r3, r3, #3
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	b21b      	sxth	r3, r3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	b21b      	sxth	r3, r3
 8004bc0:	b29b      	uxth	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd) {
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 8004bd8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	8013      	strh	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat) {
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e005      	b.n	8004c08 <LCD_Send_Dat+0x1c>
	DAT = dat;
 8004bfc:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <LCD_Send_Dat+0x30>)
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	3301      	adds	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f6      	beq.n	8004bfc <LCD_Send_Dat+0x10>
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	60080000 	.word	0x60080000

08004c20 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4623      	mov	r3, r4
 8004c30:	80fb      	strh	r3, [r7, #6]
 8004c32:	4603      	mov	r3, r0
 8004c34:	80bb      	strh	r3, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	807b      	strh	r3, [r7, #2]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8004c3e:	202a      	movs	r0, #42	; 0x2a
 8004c40:	f7ff ffc5 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8004c44:	88bb      	ldrh	r3, [r7, #4]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ffce 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8004c50:	88bb      	ldrh	r3, [r7, #4]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ffc8 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8004c5c:	883b      	ldrh	r3, [r7, #0]
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ffc2 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8004c68:	883b      	ldrh	r3, [r7, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff ffbc 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8004c74:	202b      	movs	r0, #43	; 0x2b
 8004c76:	f7ff ffaa 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ffb3 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ffad 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8004c92:	887b      	ldrh	r3, [r7, #2]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ffa7 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ffa1 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8004caa:	202c      	movs	r0, #44	; 0x2c
 8004cac:	f7ff ff8f 	bl	8004bce <LCD_Send_Cmd>
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd90      	pop	{r4, r7, pc}

08004cb8 <LCD_Rect_Fill>:
void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24) {
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(1, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24) {
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	80fb      	strh	r3, [r7, #6]
 8004cca:	4603      	mov	r3, r0
 8004ccc:	80bb      	strh	r3, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	807b      	strh	r3, [r7, #2]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	883a      	ldrh	r2, [r7, #0]
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004ce4:	88ba      	ldrh	r2, [r7, #4]
 8004ce6:	883b      	ldrh	r3, [r7, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29c      	uxth	r4, r3
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	887b      	ldrh	r3, [r7, #2]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	88f9      	ldrh	r1, [r7, #6]
 8004cfe:	88b8      	ldrh	r0, [r7, #4]
 8004d00:	4622      	mov	r2, r4
 8004d02:	f7ff ff8d 	bl	8004c20 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e00a      	b.n	8004d22 <LCD_Rect_Fill+0x6a>
 8004d0c:	6a39      	ldr	r1, [r7, #32]
 8004d0e:	2001      	movs	r0, #1
 8004d10:	f7ff ff1f 	bl	8004b52 <H24_RGB565>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff68 	bl	8004bec <LCD_Send_Dat>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d3f0      	bcc.n	8004d0c <LCD_Rect_Fill+0x54>
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd90      	pop	{r4, r7, pc}

08004d34 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24) {
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b08b      	sub	sp, #44	; 0x2c
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	80fb      	strh	r3, [r7, #6]
 8004d46:	4603      	mov	r3, r0
 8004d48:	80bb      	strh	r3, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	807b      	strh	r3, [r7, #2]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bfb8      	it	lt
 8004d5c:	425b      	neglt	r3, r3
 8004d5e:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8004d60:	883a      	ldrh	r2, [r7, #0]
 8004d62:	88bb      	ldrh	r3, [r7, #4]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bfb8      	it	lt
 8004d6a:	425b      	neglt	r3, r3
 8004d6c:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d201      	bcs.n	8004d7a <LCD_Line+0x46>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e001      	b.n	8004d7e <LCD_Line+0x4a>
 8004d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7e:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8004d80:	88ba      	ldrh	r2, [r7, #4]
 8004d82:	883b      	ldrh	r3, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d201      	bcs.n	8004d8c <LCD_Line+0x58>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e001      	b.n	8004d90 <LCD_Line+0x5c>
 8004d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d90:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004d9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004da8:	b29c      	uxth	r4, r3
 8004daa:	88b9      	ldrh	r1, [r7, #4]
 8004dac:	88f8      	ldrh	r0, [r7, #6]
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4623      	mov	r3, r4
 8004db4:	f7ff ff80 	bl	8004cb8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	887b      	ldrh	r3, [r7, #2]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d103      	bne.n	8004dc8 <LCD_Line+0x94>
 8004dc0:	88ba      	ldrh	r2, [r7, #4]
 8004dc2:	883b      	ldrh	r3, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d01e      	beq.n	8004e06 <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	425b      	negs	r3, r3
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	dd08      	ble.n	8004dea <LCD_Line+0xb6>
		{
			error -= deltaY;
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	4413      	add	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	dad5      	bge.n	8004d9e <LCD_Line+0x6a>
		{
			error += deltaX;
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	4413      	add	r3, r2
 8004df8:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	88bb      	ldrh	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004e04:	e7cb      	b.n	8004d9e <LCD_Line+0x6a>
		break;
 8004e06:	bf00      	nop
		}
	}
}
 8004e08:	bf00      	nop
 8004e0a:	3724      	adds	r7, #36	; 0x24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd90      	pop	{r4, r7, pc}

08004e10 <LCD_Rect>:
		x += xinc2;
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24) {
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	80fb      	strh	r3, [r7, #6]
 8004e22:	4603      	mov	r3, r0
 8004e24:	80bb      	strh	r3, [r7, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	807b      	strh	r3, [r7, #2]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	4413      	add	r3, r2
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	88bc      	ldrh	r4, [r7, #4]
 8004e38:	88b9      	ldrh	r1, [r7, #4]
 8004e3a:	88f8      	ldrh	r0, [r7, #6]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	7e3b      	ldrb	r3, [r7, #24]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4623      	mov	r3, r4
 8004e46:	f7ff ff75 	bl	8004d34 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004e4a:	88ba      	ldrh	r2, [r7, #4]
 8004e4c:	883b      	ldrh	r3, [r7, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	b299      	uxth	r1, r3
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	887b      	ldrh	r3, [r7, #2]
 8004e56:	4413      	add	r3, r2
 8004e58:	b29c      	uxth	r4, r3
 8004e5a:	88ba      	ldrh	r2, [r7, #4]
 8004e5c:	883b      	ldrh	r3, [r7, #0]
 8004e5e:	4413      	add	r3, r2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	88f8      	ldrh	r0, [r7, #6]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	7e3b      	ldrb	r3, [r7, #24]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	4622      	mov	r2, r4
 8004e70:	f7ff ff60 	bl	8004d34 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004e74:	88ba      	ldrh	r2, [r7, #4]
 8004e76:	883b      	ldrh	r3, [r7, #0]
 8004e78:	4413      	add	r3, r2
 8004e7a:	b29c      	uxth	r4, r3
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	88b9      	ldrh	r1, [r7, #4]
 8004e80:	88f8      	ldrh	r0, [r7, #6]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	7e3b      	ldrb	r3, [r7, #24]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	f7ff ff52 	bl	8004d34 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004e90:	88fa      	ldrh	r2, [r7, #6]
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	4413      	add	r3, r2
 8004e96:	b298      	uxth	r0, r3
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	b29c      	uxth	r4, r3
 8004ea0:	88ba      	ldrh	r2, [r7, #4]
 8004ea2:	883b      	ldrh	r3, [r7, #0]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	88b9      	ldrh	r1, [r7, #4]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	7e3b      	ldrb	r3, [r7, #24]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	f7ff ff3d 	bl	8004d34 <LCD_Line>
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd90      	pop	{r4, r7, pc}

08004ec2 <LCD_Circle>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24) {
 8004ec2:	b590      	push	{r4, r7, lr}
 8004ec4:	b089      	sub	sp, #36	; 0x24
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4608      	mov	r0, r1
 8004ecc:	4611      	mov	r1, r2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4623      	mov	r3, r4
 8004ed2:	80fb      	strh	r3, [r7, #6]
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	80bb      	strh	r3, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
 8004edc:	4613      	mov	r3, r2
 8004ede:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	f1c3 0301 	rsb	r3, r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004ef0:	e0fc      	b.n	80050ec <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004ef2:	78bb      	ldrb	r3, [r7, #2]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d136      	bne.n	8004f66 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	b298      	uxth	r0, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	88ba      	ldrh	r2, [r7, #4]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	b299      	uxth	r1, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	b29c      	uxth	r4, r3
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4623      	mov	r3, r4
 8004f2a:	f7ff fec5 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	b298      	uxth	r0, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	88ba      	ldrh	r2, [r7, #4]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	b299      	uxth	r1, r3
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3301      	adds	r3, #1
 8004f58:	b29c      	uxth	r4, r3
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4623      	mov	r3, r4
 8004f60:	f7ff feaa 	bl	8004cb8 <LCD_Rect_Fill>
 8004f64:	e0a7      	b.n	80050b6 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b298      	uxth	r0, r3
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	88bb      	ldrh	r3, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	b299      	uxth	r1, r3
 8004f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f84:	b29c      	uxth	r4, r3
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	f7ff fe94 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	4413      	add	r3, r2
 8004f98:	b298      	uxth	r0, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	88bb      	ldrh	r3, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	b299      	uxth	r1, r3
 8004fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fae:	b29c      	uxth	r4, r3
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	f7ff fe7f 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b298      	uxth	r0, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	88bb      	ldrh	r3, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	b299      	uxth	r1, r3
 8004fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fd8:	b29c      	uxth	r4, r3
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	4623      	mov	r3, r4
 8004fe0:	f7ff fe6a 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	b298      	uxth	r0, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	88bb      	ldrh	r3, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	b299      	uxth	r1, r3
 8004ff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005002:	b29c      	uxth	r4, r3
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	4623      	mov	r3, r4
 800500a:	f7ff fe55 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	b29a      	uxth	r2, r3
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	4413      	add	r3, r2
 8005016:	b298      	uxth	r0, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	b29b      	uxth	r3, r3
 800501c:	88ba      	ldrh	r2, [r7, #4]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	b299      	uxth	r1, r3
 8005022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005026:	b29a      	uxth	r2, r3
 8005028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800502c:	b29c      	uxth	r4, r3
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	4623      	mov	r3, r4
 8005034:	f7ff fe40 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	b29a      	uxth	r2, r3
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	4413      	add	r3, r2
 8005040:	b298      	uxth	r0, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	b29b      	uxth	r3, r3
 8005046:	88ba      	ldrh	r2, [r7, #4]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	b299      	uxth	r1, r3
 800504c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005050:	b29a      	uxth	r2, r3
 8005052:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005056:	b29c      	uxth	r4, r3
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4623      	mov	r3, r4
 800505e:	f7ff fe2b 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	b29b      	uxth	r3, r3
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	b298      	uxth	r0, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	b29b      	uxth	r3, r3
 8005070:	88ba      	ldrh	r2, [r7, #4]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	b299      	uxth	r1, r3
 8005076:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800507a:	b29a      	uxth	r2, r3
 800507c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005080:	b29c      	uxth	r4, r3
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	4623      	mov	r3, r4
 8005088:	f7ff fe16 	bl	8004cb8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	b29b      	uxth	r3, r3
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	b298      	uxth	r0, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	b29b      	uxth	r3, r3
 800509a:	88ba      	ldrh	r2, [r7, #4]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	b299      	uxth	r1, r3
 80050a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050aa:	b29c      	uxth	r4, r3
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4623      	mov	r3, r4
 80050b2:	f7ff fe01 	bl	8004cb8 <LCD_Rect_Fill>
		}
		if (P < 0)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da09      	bge.n	80050d0 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1cda      	adds	r2, r3, #3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
			a_++;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3301      	adds	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	e00d      	b.n	80050ec <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1d5a      	adds	r2, r3, #5
 80050d4:	6979      	ldr	r1, [r7, #20]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1acb      	subs	r3, r1, r3
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
			a_++;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3301      	adds	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
			b_--;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	f77f aefe 	ble.w	8004ef2 <LCD_Circle+0x30>
		}
	}
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd90      	pop	{r4, r7, pc}

08005100 <LCD_Char>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24) {
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b08b      	sub	sp, #44	; 0x2c
 8005104:	af02      	add	r7, sp, #8
 8005106:	60ba      	str	r2, [r7, #8]
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	4603      	mov	r3, r0
 800510c:	81fb      	strh	r3, [r7, #14]
 800510e:	460b      	mov	r3, r1
 8005110:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	777b      	strb	r3, [r7, #29]
 8005122:	2300      	movs	r3, #0
 8005124:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800512a:	2300      	movs	r3, #0
 800512c:	763b      	strb	r3, [r7, #24]
 800512e:	e093      	b.n	8005258 <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005130:	2300      	movs	r3, #0
 8005132:	767b      	strb	r3, [r7, #25]
 8005134:	e052      	b.n	80051dc <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005136:	7f3b      	ldrb	r3, [r7, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800513c:	8bfb      	ldrh	r3, [r7, #30]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	83fa      	strh	r2, [r7, #30]
 8005142:	461a      	mov	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8005150:	7f7a      	ldrb	r2, [r7, #29]
 8005152:	7f3b      	ldrb	r3, [r7, #28]
 8005154:	4013      	ands	r3, r2
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <LCD_Char+0x64>
			{
				set_pixels++;
 800515c:	8b7b      	ldrh	r3, [r7, #26]
 800515e:	3301      	adds	r3, #1
 8005160:	837b      	strh	r3, [r7, #26]
 8005162:	e035      	b.n	80051d0 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8005164:	8b7b      	ldrh	r3, [r7, #26]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d032      	beq.n	80051d0 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005170:	461a      	mov	r2, r3
 8005172:	7e7b      	ldrb	r3, [r7, #25]
 8005174:	441a      	add	r2, r3
 8005176:	8b7b      	ldrh	r3, [r7, #26]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	b29a      	uxth	r2, r3
 800517c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005180:	b29b      	uxth	r3, r3
 8005182:	fb12 f303 	smulbb	r3, r2, r3
 8005186:	b29a      	uxth	r2, r3
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	4413      	add	r3, r2
 800518c:	b298      	uxth	r0, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005194:	461a      	mov	r2, r3
 8005196:	7e3b      	ldrb	r3, [r7, #24]
 8005198:	4413      	add	r3, r2
 800519a:	b29a      	uxth	r2, r3
 800519c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	fb12 f303 	smulbb	r3, r2, r3
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	89bb      	ldrh	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	b299      	uxth	r1, r3
 80051ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8b7a      	ldrh	r2, [r7, #26]
 80051b6:	fb12 f303 	smulbb	r3, r2, r3
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051c0:	b29c      	uxth	r4, r3
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	4623      	mov	r3, r4
 80051c8:	f7ff fd76 	bl	8004cb8 <LCD_Rect_Fill>
				set_pixels = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 80051d0:	7f3b      	ldrb	r3, [r7, #28]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80051d6:	7e7b      	ldrb	r3, [r7, #25]
 80051d8:	3301      	adds	r3, #1
 80051da:	767b      	strb	r3, [r7, #25]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	789b      	ldrb	r3, [r3, #2]
 80051e0:	7e7a      	ldrb	r2, [r7, #25]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d3a7      	bcc.n	8005136 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80051e6:	8b7b      	ldrh	r3, [r7, #26]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d032      	beq.n	8005252 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80051f2:	461a      	mov	r2, r3
 80051f4:	7e7b      	ldrb	r3, [r7, #25]
 80051f6:	441a      	add	r2, r3
 80051f8:	8b7b      	ldrh	r3, [r7, #26]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005202:	b29b      	uxth	r3, r3
 8005204:	fb12 f303 	smulbb	r3, r2, r3
 8005208:	b29a      	uxth	r2, r3
 800520a:	89fb      	ldrh	r3, [r7, #14]
 800520c:	4413      	add	r3, r2
 800520e:	b298      	uxth	r0, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005216:	461a      	mov	r2, r3
 8005218:	7e3b      	ldrb	r3, [r7, #24]
 800521a:	4413      	add	r3, r2
 800521c:	b29a      	uxth	r2, r3
 800521e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005222:	b29b      	uxth	r3, r3
 8005224:	fb12 f303 	smulbb	r3, r2, r3
 8005228:	b29a      	uxth	r2, r3
 800522a:	89bb      	ldrh	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	b299      	uxth	r1, r3
 8005230:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005234:	b29b      	uxth	r3, r3
 8005236:	8b7a      	ldrh	r2, [r7, #26]
 8005238:	fb12 f303 	smulbb	r3, r2, r3
 800523c:	b29a      	uxth	r2, r3
 800523e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005242:	b29c      	uxth	r4, r3
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4623      	mov	r3, r4
 800524a:	f7ff fd35 	bl	8004cb8 <LCD_Rect_Fill>
			set_pixels = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005252:	7e3b      	ldrb	r3, [r7, #24]
 8005254:	3301      	adds	r3, #1
 8005256:	763b      	strb	r3, [r7, #24]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	78db      	ldrb	r3, [r3, #3]
 800525c:	7e3a      	ldrb	r2, [r7, #24]
 800525e:	429a      	cmp	r2, r3
 8005260:	f4ff af66 	bcc.w	8005130 <LCD_Char+0x30>
		}
	}
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	3724      	adds	r7, #36	; 0x24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}

0800526e <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24) {
 800526e:	b590      	push	{r4, r7, lr}
 8005270:	b08f      	sub	sp, #60	; 0x3c
 8005272:	af02      	add	r7, sp, #8
 8005274:	60ba      	str	r2, [r7, #8]
 8005276:	607b      	str	r3, [r7, #4]
 8005278:	4603      	mov	r3, r0
 800527a:	81fb      	strh	r3, [r7, #14]
 800527c:	460b      	mov	r3, r1
 800527e:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8005284:	89bb      	ldrh	r3, [r7, #12]
 8005286:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8005288:	f107 031c 	add.w	r3, r7, #28
 800528c:	220c      	movs	r2, #12
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	f007 fd35 	bl	800cd00 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005296:	2300      	movs	r3, #0
 8005298:	857b      	strh	r3, [r7, #42]	; 0x2a
 800529a:	e056      	b.n	800534a <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 800529c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4413      	add	r3, r2
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80052a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052ac:	2b0a      	cmp	r3, #10
 80052ae:	d10f      	bne.n	80052d0 <LCD_Font+0x62>
		{
			cursor_x = x;
 80052b0:	89fb      	ldrh	r3, [r7, #14]
 80052b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80052b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80052be:	b29b      	uxth	r3, r3
 80052c0:	fb12 f303 	smulbb	r3, r2, r3
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052c8:	4413      	add	r3, r2
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80052ce:	e039      	b.n	8005344 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 80052d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052d4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80052d8:	429a      	cmp	r2, r3
 80052da:	d333      	bcc.n	8005344 <LCD_Font+0xd6>
 80052dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052e0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d82d      	bhi.n	8005344 <LCD_Font+0xd6>
 80052e8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052ec:	2b0d      	cmp	r3, #13
 80052ee:	d029      	beq.n	8005344 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052f6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80052fa:	1a5b      	subs	r3, r3, r1
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	18d1      	adds	r1, r2, r3
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	2208      	movs	r2, #8
 8005306:	4618      	mov	r0, r3
 8005308:	f007 fcfa 	bl	800cd00 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800530c:	f107 041c 	add.w	r4, r7, #28
 8005310:	f107 0214 	add.w	r2, r7, #20
 8005314:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005318:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	4623      	mov	r3, r4
 8005328:	f7ff feea 	bl	8005100 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800532c:	7e3b      	ldrb	r3, [r7, #24]
 800532e:	b29a      	uxth	r2, r3
 8005330:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005334:	b29b      	uxth	r3, r3
 8005336:	fb12 f303 	smulbb	r3, r2, r3
 800533a:	b29a      	uxth	r2, r3
 800533c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800533e:	4413      	add	r3, r2
 8005340:	b29b      	uxth	r3, r3
 8005342:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005344:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005346:	3301      	adds	r3, #1
 8005348:	857b      	strh	r3, [r7, #42]	; 0x2a
 800534a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800534c:	68b8      	ldr	r0, [r7, #8]
 800534e:	f7fa ff3f 	bl	80001d0 <strlen>
 8005352:	4603      	mov	r3, r0
 8005354:	429c      	cmp	r4, r3
 8005356:	d3a1      	bcc.n	800529c <LCD_Font+0x2e>
		}
	}
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3734      	adds	r7, #52	; 0x34
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}

08005362 <LCD_Init>:

void LCD_Init(void) {
 8005362:	b580      	push	{r7, lr}
 8005364:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8005366:	2096      	movs	r0, #150	; 0x96
 8005368:	f001 f936 	bl	80065d8 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 800536c:	2001      	movs	r0, #1
 800536e:	f7ff fc2e 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 8005372:	2029      	movs	r0, #41	; 0x29
 8005374:	f7ff fc2b 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 8005378:	20e2      	movs	r0, #226	; 0xe2
 800537a:	f7ff fc28 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 800537e:	201d      	movs	r0, #29
 8005380:	f7ff fc34 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 8005384:	2002      	movs	r0, #2
 8005386:	f7ff fc31 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 800538a:	20ff      	movs	r0, #255	; 0xff
 800538c:	f7ff fc2e 	bl	8004bec <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 8005390:	20e0      	movs	r0, #224	; 0xe0
 8005392:	f7ff fc1c 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 8005396:	2001      	movs	r0, #1
 8005398:	f7ff fc28 	bl	8004bec <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 800539c:	2078      	movs	r0, #120	; 0x78
 800539e:	f001 f91b 	bl	80065d8 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 80053a2:	20e0      	movs	r0, #224	; 0xe0
 80053a4:	f7ff fc13 	bl	8004bce <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 80053a8:	2003      	movs	r0, #3
 80053aa:	f7ff fc1f 	bl	8004bec <LCD_Send_Dat>
	HAL_Delay(120);
 80053ae:	2078      	movs	r0, #120	; 0x78
 80053b0:	f001 f912 	bl	80065d8 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7ff fc0a 	bl	8004bce <LCD_Send_Cmd>
	HAL_Delay(120);
 80053ba:	2078      	movs	r0, #120	; 0x78
 80053bc:	f001 f90c 	bl	80065d8 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 80053c0:	20e6      	movs	r0, #230	; 0xe6
 80053c2:	f7ff fc04 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 80053c6:	2003      	movs	r0, #3
 80053c8:	f7ff fc10 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 80053cc:	2085      	movs	r0, #133	; 0x85
 80053ce:	f7ff fc0d 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 80053d2:	201d      	movs	r0, #29
 80053d4:	f7ff fc0a 	bl	8004bec <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 80053d8:	20b0      	movs	r0, #176	; 0xb0
 80053da:	f7ff fbf8 	bl	8004bce <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 80053de:	20ae      	movs	r0, #174	; 0xae
 80053e0:	f7ff fc04 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 80053e4:	2020      	movs	r0, #32
 80053e6:	f7ff fc01 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 80053ea:	2003      	movs	r0, #3
 80053ec:	f7ff fbfe 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 80053f0:	201f      	movs	r0, #31
 80053f2:	f7ff fbfb 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 80053f6:	2001      	movs	r0, #1
 80053f8:	f7ff fbf8 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 80053fc:	20df      	movs	r0, #223	; 0xdf
 80053fe:	f7ff fbf5 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005402:	202d      	movs	r0, #45	; 0x2d
 8005404:	f7ff fbf2 	bl	8004bec <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 8005408:	20b4      	movs	r0, #180	; 0xb4
 800540a:	f7ff fbe0 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 800540e:	2003      	movs	r0, #3
 8005410:	f7ff fbec 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8005414:	20a0      	movs	r0, #160	; 0xa0
 8005416:	f7ff fbe9 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 800541a:	2000      	movs	r0, #0
 800541c:	f7ff fbe6 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8005420:	202e      	movs	r0, #46	; 0x2e
 8005422:	f7ff fbe3 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8005426:	2030      	movs	r0, #48	; 0x30
 8005428:	f7ff fbe0 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 800542c:	2000      	movs	r0, #0
 800542e:	f7ff fbdd 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005432:	200f      	movs	r0, #15
 8005434:	f7ff fbda 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 8005438:	2000      	movs	r0, #0
 800543a:	f7ff fbd7 	bl	8004bec <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 800543e:	20b6      	movs	r0, #182	; 0xb6
 8005440:	f7ff fbc5 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 8005444:	2002      	movs	r0, #2
 8005446:	f7ff fbd1 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 800544a:	200d      	movs	r0, #13
 800544c:	f7ff fbce 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 8005450:	2000      	movs	r0, #0
 8005452:	f7ff fbcb 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8005456:	2010      	movs	r0, #16
 8005458:	f7ff fbc8 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 800545c:	2010      	movs	r0, #16
 800545e:	f7ff fbc5 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 8005462:	2008      	movs	r0, #8
 8005464:	f7ff fbc2 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 8005468:	2000      	movs	r0, #0
 800546a:	f7ff fbbf 	bl	8004bec <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 800546e:	20be      	movs	r0, #190	; 0xbe
 8005470:	f7ff fbad 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 8005474:	2008      	movs	r0, #8
 8005476:	f7ff fbb9 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 800547a:	20ff      	movs	r0, #255	; 0xff
 800547c:	f7ff fbb6 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 8005480:	2001      	movs	r0, #1
 8005482:	f7ff fbb3 	bl	8004bec <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 8005486:	2036      	movs	r0, #54	; 0x36
 8005488:	f7ff fba1 	bl	8004bce <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 800548c:	2003      	movs	r0, #3
 800548e:	f7ff fbad 	bl	8004bec <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 8005492:	20f0      	movs	r0, #240	; 0xf0
 8005494:	f7ff fb9b 	bl	8004bce <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 8005498:	2003      	movs	r0, #3
 800549a:	f7ff fba7 	bl	8004bec <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 800549e:	2029      	movs	r0, #41	; 0x29
 80054a0:	f7ff fb95 	bl	8004bce <LCD_Send_Cmd>
}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <HAL_MspInit+0x4c>)
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	4a0f      	ldr	r2, [pc, #60]	; (80054f4 <HAL_MspInit+0x4c>)
 80054b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054bc:	6453      	str	r3, [r2, #68]	; 0x44
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <HAL_MspInit+0x4c>)
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c6:	607b      	str	r3, [r7, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <HAL_MspInit+0x4c>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	4a08      	ldr	r2, [pc, #32]	; (80054f4 <HAL_MspInit+0x4c>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6413      	str	r3, [r2, #64]	; 0x40
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_MspInit+0x4c>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40023800 	.word	0x40023800

080054f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a4d      	ldr	r2, [pc, #308]	; (800564c <HAL_DAC_MspInit+0x154>)
 8005516:	4293      	cmp	r3, r2
 8005518:	f040 8093 	bne.w	8005642 <HAL_DAC_MspInit+0x14a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	4b4b      	ldr	r3, [pc, #300]	; (8005650 <HAL_DAC_MspInit+0x158>)
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	4a4a      	ldr	r2, [pc, #296]	; (8005650 <HAL_DAC_MspInit+0x158>)
 8005526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800552a:	6413      	str	r3, [r2, #64]	; 0x40
 800552c:	4b48      	ldr	r3, [pc, #288]	; (8005650 <HAL_DAC_MspInit+0x158>)
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	4b44      	ldr	r3, [pc, #272]	; (8005650 <HAL_DAC_MspInit+0x158>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	4a43      	ldr	r2, [pc, #268]	; (8005650 <HAL_DAC_MspInit+0x158>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6313      	str	r3, [r2, #48]	; 0x30
 8005548:	4b41      	ldr	r3, [pc, #260]	; (8005650 <HAL_DAC_MspInit+0x158>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005554:	2330      	movs	r3, #48	; 0x30
 8005556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005558:	2303      	movs	r3, #3
 800555a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	4619      	mov	r1, r3
 8005566:	483b      	ldr	r0, [pc, #236]	; (8005654 <HAL_DAC_MspInit+0x15c>)
 8005568:	f001 ffe0 	bl	800752c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800556c:	4b3a      	ldr	r3, [pc, #232]	; (8005658 <HAL_DAC_MspInit+0x160>)
 800556e:	4a3b      	ldr	r2, [pc, #236]	; (800565c <HAL_DAC_MspInit+0x164>)
 8005570:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005572:	4b39      	ldr	r3, [pc, #228]	; (8005658 <HAL_DAC_MspInit+0x160>)
 8005574:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005578:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800557a:	4b37      	ldr	r3, [pc, #220]	; (8005658 <HAL_DAC_MspInit+0x160>)
 800557c:	2240      	movs	r2, #64	; 0x40
 800557e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005580:	4b35      	ldr	r3, [pc, #212]	; (8005658 <HAL_DAC_MspInit+0x160>)
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005586:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_DAC_MspInit+0x160>)
 8005588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800558e:	4b32      	ldr	r3, [pc, #200]	; (8005658 <HAL_DAC_MspInit+0x160>)
 8005590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005594:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005596:	4b30      	ldr	r3, [pc, #192]	; (8005658 <HAL_DAC_MspInit+0x160>)
 8005598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800559c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800559e:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <HAL_DAC_MspInit+0x160>)
 80055a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055a4:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80055a6:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <HAL_DAC_MspInit+0x160>)
 80055a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055ac:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055ae:	4b2a      	ldr	r3, [pc, #168]	; (8005658 <HAL_DAC_MspInit+0x160>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80055b4:	4828      	ldr	r0, [pc, #160]	; (8005658 <HAL_DAC_MspInit+0x160>)
 80055b6:	f001 fbb7 	bl	8006d28 <HAL_DMA_Init>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 80055c0:	f7ff faac 	bl	8004b1c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a24      	ldr	r2, [pc, #144]	; (8005658 <HAL_DAC_MspInit+0x160>)
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	4a23      	ldr	r2, [pc, #140]	; (8005658 <HAL_DAC_MspInit+0x160>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80055d0:	4b23      	ldr	r3, [pc, #140]	; (8005660 <HAL_DAC_MspInit+0x168>)
 80055d2:	4a24      	ldr	r2, [pc, #144]	; (8005664 <HAL_DAC_MspInit+0x16c>)
 80055d4:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80055d6:	4b22      	ldr	r3, [pc, #136]	; (8005660 <HAL_DAC_MspInit+0x168>)
 80055d8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80055dc:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055de:	4b20      	ldr	r3, [pc, #128]	; (8005660 <HAL_DAC_MspInit+0x168>)
 80055e0:	2240      	movs	r2, #64	; 0x40
 80055e2:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <HAL_DAC_MspInit+0x168>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80055ea:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <HAL_DAC_MspInit+0x168>)
 80055ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055f0:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80055f2:	4b1b      	ldr	r3, [pc, #108]	; (8005660 <HAL_DAC_MspInit+0x168>)
 80055f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055f8:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055fa:	4b19      	ldr	r3, [pc, #100]	; (8005660 <HAL_DAC_MspInit+0x168>)
 80055fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005600:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8005602:	4b17      	ldr	r3, [pc, #92]	; (8005660 <HAL_DAC_MspInit+0x168>)
 8005604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005608:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 800560a:	4b15      	ldr	r3, [pc, #84]	; (8005660 <HAL_DAC_MspInit+0x168>)
 800560c:	2200      	movs	r2, #0
 800560e:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005610:	4b13      	ldr	r3, [pc, #76]	; (8005660 <HAL_DAC_MspInit+0x168>)
 8005612:	2200      	movs	r2, #0
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8005616:	4812      	ldr	r0, [pc, #72]	; (8005660 <HAL_DAC_MspInit+0x168>)
 8005618:	f001 fb86 	bl	8006d28 <HAL_DMA_Init>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_DAC_MspInit+0x12e>
    {
      Error_Handler();
 8005622:	f7ff fa7b 	bl	8004b1c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a0d      	ldr	r2, [pc, #52]	; (8005660 <HAL_DAC_MspInit+0x168>)
 800562a:	60da      	str	r2, [r3, #12]
 800562c:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <HAL_DAC_MspInit+0x168>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	2036      	movs	r0, #54	; 0x36
 8005638:	f001 f8cd 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800563c:	2036      	movs	r0, #54	; 0x36
 800563e:	f001 f8e6 	bl	800680e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005642:	bf00      	nop
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40007400 	.word	0x40007400
 8005650:	40023800 	.word	0x40023800
 8005654:	40020000 	.word	0x40020000
 8005658:	200002d0 	.word	0x200002d0
 800565c:	40026088 	.word	0x40026088
 8005660:	20000330 	.word	0x20000330
 8005664:	400260a0 	.word	0x400260a0

08005668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a19      	ldr	r2, [pc, #100]	; (80056ec <HAL_I2C_MspInit+0x84>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d12b      	bne.n	80056e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <HAL_I2C_MspInit+0x88>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <HAL_I2C_MspInit+0x88>)
 8005694:	f043 0302 	orr.w	r3, r3, #2
 8005698:	6313      	str	r3, [r2, #48]	; 0x30
 800569a:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <HAL_I2C_MspInit+0x88>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80056a6:	23c0      	movs	r3, #192	; 0xc0
 80056a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056aa:	2312      	movs	r3, #18
 80056ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056ae:	2301      	movs	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b2:	2303      	movs	r3, #3
 80056b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80056b6:	2304      	movs	r3, #4
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ba:	f107 0314 	add.w	r3, r7, #20
 80056be:	4619      	mov	r1, r3
 80056c0:	480c      	ldr	r0, [pc, #48]	; (80056f4 <HAL_I2C_MspInit+0x8c>)
 80056c2:	f001 ff33 	bl	800752c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <HAL_I2C_MspInit+0x88>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <HAL_I2C_MspInit+0x88>)
 80056d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056d4:	6413      	str	r3, [r2, #64]	; 0x40
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_I2C_MspInit+0x88>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80056e2:	bf00      	nop
 80056e4:	3728      	adds	r7, #40	; 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40005400 	.word	0x40005400
 80056f0:	40023800 	.word	0x40023800
 80056f4:	40020400 	.word	0x40020400

080056f8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <HAL_I2C_MspDeInit+0x38>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10d      	bne.n	8005726 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <HAL_I2C_MspDeInit+0x3c>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	4a09      	ldr	r2, [pc, #36]	; (8005734 <HAL_I2C_MspDeInit+0x3c>)
 8005710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005714:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005716:	2140      	movs	r1, #64	; 0x40
 8005718:	4807      	ldr	r0, [pc, #28]	; (8005738 <HAL_I2C_MspDeInit+0x40>)
 800571a:	f002 f8a3 	bl	8007864 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800571e:	2180      	movs	r1, #128	; 0x80
 8005720:	4805      	ldr	r0, [pc, #20]	; (8005738 <HAL_I2C_MspDeInit+0x40>)
 8005722:	f002 f89f 	bl	8007864 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40005400 	.word	0x40005400
 8005734:	40023800 	.word	0x40023800
 8005738:	40020400 	.word	0x40020400

0800573c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005744:	f107 0308 	add.w	r3, r7, #8
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <HAL_RTC_MspInit+0x4c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d111      	bne.n	8005780 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800575c:	2302      	movs	r3, #2
 800575e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005764:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005766:	f107 0308 	add.w	r3, r7, #8
 800576a:	4618      	mov	r0, r3
 800576c:	f004 fc24 	bl	8009fb8 <HAL_RCCEx_PeriphCLKConfig>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005776:	f7ff f9d1 	bl	8004b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800577a:	4b04      	ldr	r3, [pc, #16]	; (800578c <HAL_RTC_MspInit+0x50>)
 800577c:	2201      	movs	r2, #1
 800577e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005780:	bf00      	nop
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40002800 	.word	0x40002800
 800578c:	42470e3c 	.word	0x42470e3c

08005790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	; 0x38
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5b      	ldr	r2, [pc, #364]	; (800591c <HAL_SPI_MspInit+0x18c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d12c      	bne.n	800580c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	4b5a      	ldr	r3, [pc, #360]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	4a59      	ldr	r2, [pc, #356]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80057bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057c0:	6453      	str	r3, [r2, #68]	; 0x44
 80057c2:	4b57      	ldr	r3, [pc, #348]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	4b53      	ldr	r3, [pc, #332]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	4a52      	ldr	r2, [pc, #328]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80057d8:	f043 0302 	orr.w	r3, r3, #2
 80057dc:	6313      	str	r3, [r2, #48]	; 0x30
 80057de:	4b50      	ldr	r3, [pc, #320]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80057ea:	2338      	movs	r3, #56	; 0x38
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ee:	2302      	movs	r3, #2
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f6:	2303      	movs	r3, #3
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80057fa:	2305      	movs	r3, #5
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005802:	4619      	mov	r1, r3
 8005804:	4847      	ldr	r0, [pc, #284]	; (8005924 <HAL_SPI_MspInit+0x194>)
 8005806:	f001 fe91 	bl	800752c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800580a:	e083      	b.n	8005914 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a45      	ldr	r2, [pc, #276]	; (8005928 <HAL_SPI_MspInit+0x198>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d12d      	bne.n	8005872 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005816:	2300      	movs	r3, #0
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	4b41      	ldr	r3, [pc, #260]	; (8005920 <HAL_SPI_MspInit+0x190>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	4a40      	ldr	r2, [pc, #256]	; (8005920 <HAL_SPI_MspInit+0x190>)
 8005820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005824:	6413      	str	r3, [r2, #64]	; 0x40
 8005826:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <HAL_SPI_MspInit+0x190>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <HAL_SPI_MspInit+0x190>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	4a39      	ldr	r2, [pc, #228]	; (8005920 <HAL_SPI_MspInit+0x190>)
 800583c:	f043 0302 	orr.w	r3, r3, #2
 8005840:	6313      	str	r3, [r2, #48]	; 0x30
 8005842:	4b37      	ldr	r3, [pc, #220]	; (8005920 <HAL_SPI_MspInit+0x190>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800584e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005854:	2302      	movs	r3, #2
 8005856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005858:	2300      	movs	r3, #0
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800585c:	2303      	movs	r3, #3
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005860:	2305      	movs	r3, #5
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005868:	4619      	mov	r1, r3
 800586a:	482e      	ldr	r0, [pc, #184]	; (8005924 <HAL_SPI_MspInit+0x194>)
 800586c:	f001 fe5e 	bl	800752c <HAL_GPIO_Init>
}
 8005870:	e050      	b.n	8005914 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI3)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HAL_SPI_MspInit+0x19c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d14b      	bne.n	8005914 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	4b27      	ldr	r3, [pc, #156]	; (8005920 <HAL_SPI_MspInit+0x190>)
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	4a26      	ldr	r2, [pc, #152]	; (8005920 <HAL_SPI_MspInit+0x190>)
 8005886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588a:	6413      	str	r3, [r2, #64]	; 0x40
 800588c:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_SPI_MspInit+0x190>)
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_SPI_MspInit+0x190>)
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6313      	str	r3, [r2, #48]	; 0x30
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058b4:	2300      	movs	r3, #0
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	4b19      	ldr	r3, [pc, #100]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80058be:	f043 0304 	orr.w	r3, r3, #4
 80058c2:	6313      	str	r3, [r2, #48]	; 0x30
 80058c4:	4b16      	ldr	r3, [pc, #88]	; (8005920 <HAL_SPI_MspInit+0x190>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80058d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d6:	2302      	movs	r3, #2
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058de:	2303      	movs	r3, #3
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058e2:	2306      	movs	r3, #6
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ea:	4619      	mov	r1, r3
 80058ec:	4810      	ldr	r0, [pc, #64]	; (8005930 <HAL_SPI_MspInit+0x1a0>)
 80058ee:	f001 fe1d 	bl	800752c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80058f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f8:	2302      	movs	r3, #2
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005900:	2303      	movs	r3, #3
 8005902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005904:	2306      	movs	r3, #6
 8005906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800590c:	4619      	mov	r1, r3
 800590e:	4809      	ldr	r0, [pc, #36]	; (8005934 <HAL_SPI_MspInit+0x1a4>)
 8005910:	f001 fe0c 	bl	800752c <HAL_GPIO_Init>
}
 8005914:	bf00      	nop
 8005916:	3738      	adds	r7, #56	; 0x38
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40013000 	.word	0x40013000
 8005920:	40023800 	.word	0x40023800
 8005924:	40020400 	.word	0x40020400
 8005928:	40003800 	.word	0x40003800
 800592c:	40003c00 	.word	0x40003c00
 8005930:	40020000 	.word	0x40020000
 8005934:	40020800 	.word	0x40020800

08005938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1c      	ldr	r2, [pc, #112]	; (80059b8 <HAL_TIM_Base_MspInit+0x80>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d116      	bne.n	8005978 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_TIM_Base_MspInit+0x84>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <HAL_TIM_Base_MspInit+0x84>)
 8005954:	f043 0310 	orr.w	r3, r3, #16
 8005958:	6413      	str	r3, [r2, #64]	; 0x40
 800595a:	4b18      	ldr	r3, [pc, #96]	; (80059bc <HAL_TIM_Base_MspInit+0x84>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005966:	2200      	movs	r2, #0
 8005968:	2100      	movs	r1, #0
 800596a:	2036      	movs	r0, #54	; 0x36
 800596c:	f000 ff33 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005970:	2036      	movs	r0, #54	; 0x36
 8005972:	f000 ff4c 	bl	800680e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005976:	e01a      	b.n	80059ae <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a10      	ldr	r2, [pc, #64]	; (80059c0 <HAL_TIM_Base_MspInit+0x88>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d115      	bne.n	80059ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_TIM_Base_MspInit+0x84>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <HAL_TIM_Base_MspInit+0x84>)
 800598c:	f043 0320 	orr.w	r3, r3, #32
 8005990:	6413      	str	r3, [r2, #64]	; 0x40
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_TIM_Base_MspInit+0x84>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800599e:	2200      	movs	r2, #0
 80059a0:	2100      	movs	r1, #0
 80059a2:	2037      	movs	r0, #55	; 0x37
 80059a4:	f000 ff17 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80059a8:	2037      	movs	r0, #55	; 0x37
 80059aa:	f000 ff30 	bl	800680e <HAL_NVIC_EnableIRQ>
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40001000 	.word	0x40001000
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40001400 	.word	0x40001400

080059c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059cc:	f107 0314 	add.w	r3, r7, #20
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_UART_MspInit+0x94>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d134      	bne.n	8005a50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059e6:	2300      	movs	r3, #0
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	4b1c      	ldr	r3, [pc, #112]	; (8005a5c <HAL_UART_MspInit+0x98>)
 80059ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ee:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <HAL_UART_MspInit+0x98>)
 80059f0:	f043 0310 	orr.w	r3, r3, #16
 80059f4:	6453      	str	r3, [r2, #68]	; 0x44
 80059f6:	4b19      	ldr	r3, [pc, #100]	; (8005a5c <HAL_UART_MspInit+0x98>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <HAL_UART_MspInit+0x98>)
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <HAL_UART_MspInit+0x98>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6313      	str	r3, [r2, #48]	; 0x30
 8005a12:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <HAL_UART_MspInit+0x98>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a24:	2302      	movs	r3, #2
 8005a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a30:	2307      	movs	r3, #7
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4809      	ldr	r0, [pc, #36]	; (8005a60 <HAL_UART_MspInit+0x9c>)
 8005a3c:	f001 fd76 	bl	800752c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a40:	2200      	movs	r2, #0
 8005a42:	2100      	movs	r1, #0
 8005a44:	2025      	movs	r0, #37	; 0x25
 8005a46:	f000 fec6 	bl	80067d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a4a:	2025      	movs	r0, #37	; 0x25
 8005a4c:	f000 fedf 	bl	800680e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005a50:	bf00      	nop
 8005a52:	3728      	adds	r7, #40	; 0x28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40011000 	.word	0x40011000
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40020000 	.word	0x40020000

08005a64 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005a78:	4b1c      	ldr	r3, [pc, #112]	; (8005aec <HAL_FSMC_MspInit+0x88>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d131      	bne.n	8005ae4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005a80:	4b1a      	ldr	r3, [pc, #104]	; (8005aec <HAL_FSMC_MspInit+0x88>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005a86:	2300      	movs	r3, #0
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <HAL_FSMC_MspInit+0x8c>)
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_FSMC_MspInit+0x8c>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	6393      	str	r3, [r2, #56]	; 0x38
 8005a96:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <HAL_FSMC_MspInit+0x8c>)
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005aa2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005aa6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	4619      	mov	r1, r3
 8005abc:	480d      	ldr	r0, [pc, #52]	; (8005af4 <HAL_FSMC_MspInit+0x90>)
 8005abe:	f001 fd35 	bl	800752c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005ac2:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005ac6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ad8:	1d3b      	adds	r3, r7, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4806      	ldr	r0, [pc, #24]	; (8005af8 <HAL_FSMC_MspInit+0x94>)
 8005ade:	f001 fd25 	bl	800752c <HAL_GPIO_Init>
 8005ae2:	e000      	b.n	8005ae6 <HAL_FSMC_MspInit+0x82>
    return;
 8005ae4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20001400 	.word	0x20001400
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40020c00 	.word	0x40020c00

08005afc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005b04:	f7ff ffae 	bl	8005a64 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b14:	e7fe      	b.n	8005b14 <NMI_Handler+0x4>

08005b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b16:	b480      	push	{r7}
 8005b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b1a:	e7fe      	b.n	8005b1a <HardFault_Handler+0x4>

08005b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b20:	e7fe      	b.n	8005b20 <MemManage_Handler+0x4>

08005b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b26:	e7fe      	b.n	8005b26 <BusFault_Handler+0x4>

08005b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b2c:	e7fe      	b.n	8005b2c <UsageFault_Handler+0x4>

08005b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b5c:	f000 fd1c 	bl	8006598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8005b68:	4802      	ldr	r0, [pc, #8]	; (8005b74 <DMA1_Stream5_IRQHandler+0x10>)
 8005b6a:	f001 fa75 	bl	8007058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200002d0 	.word	0x200002d0

08005b78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8005b7c:	4802      	ldr	r0, [pc, #8]	; (8005b88 <DMA1_Stream6_IRQHandler+0x10>)
 8005b7e:	f001 fa6b 	bl	8007058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000330 	.word	0x20000330

08005b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b90:	4802      	ldr	r0, [pc, #8]	; (8005b9c <USART1_IRQHandler+0x10>)
 8005b92:	f006 f843 	bl	800bc1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	200005a8 	.word	0x200005a8

08005ba0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8005ba4:	4803      	ldr	r0, [pc, #12]	; (8005bb4 <TIM6_DAC_IRQHandler+0x14>)
 8005ba6:	f000 ff59 	bl	8006a5c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8005baa:	4803      	ldr	r0, [pc, #12]	; (8005bb8 <TIM6_DAC_IRQHandler+0x18>)
 8005bac:	f005 fcbc 	bl	800b528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005bb0:	bf00      	nop
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	200002bc 	.word	0x200002bc
 8005bb8:	20000518 	.word	0x20000518

08005bbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <TIM7_IRQHandler+0x10>)
 8005bc2:	f005 fcb1 	bl	800b528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000560 	.word	0x20000560

08005bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
	return 1;
 8005bd4:	2301      	movs	r3, #1
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <_kill>:

int _kill(int pid, int sig)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005bea:	f007 f84f 	bl	800cc8c <__errno>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2216      	movs	r2, #22
 8005bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8005bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <_exit>:

void _exit (int status)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005c08:	f04f 31ff 	mov.w	r1, #4294967295
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ffe7 	bl	8005be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005c12:	e7fe      	b.n	8005c12 <_exit+0x12>

08005c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e00a      	b.n	8005c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c26:	f3af 8000 	nop.w
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	60ba      	str	r2, [r7, #8]
 8005c32:	b2ca      	uxtb	r2, r1
 8005c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	dbf0      	blt.n	8005c26 <_read+0x12>
	}

return len;
 8005c44:	687b      	ldr	r3, [r7, #4]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e009      	b.n	8005c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	60ba      	str	r2, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	3301      	adds	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	dbf1      	blt.n	8005c60 <_write+0x12>
	}
	return len;
 8005c7c:	687b      	ldr	r3, [r7, #4]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <_close>:

int _close(int file)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cae:	605a      	str	r2, [r3, #4]
	return 0;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_isatty>:

int _isatty(int file)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8005cc6:	2301      	movs	r3, #1
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
	return 0;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cf8:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <_sbrk+0x5c>)
 8005cfa:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <_sbrk+0x60>)
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <_sbrk+0x64>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <_sbrk+0x64>)
 8005d0e:	4a12      	ldr	r2, [pc, #72]	; (8005d58 <_sbrk+0x68>)
 8005d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d12:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <_sbrk+0x64>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d207      	bcs.n	8005d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d20:	f006 ffb4 	bl	800cc8c <__errno>
 8005d24:	4603      	mov	r3, r0
 8005d26:	220c      	movs	r2, #12
 8005d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	e009      	b.n	8005d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <_sbrk+0x64>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <_sbrk+0x64>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <_sbrk+0x64>)
 8005d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d42:	68fb      	ldr	r3, [r7, #12]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20020000 	.word	0x20020000
 8005d50:	00000800 	.word	0x00000800
 8005d54:	20001404 	.word	0x20001404
 8005d58:	20001480 	.word	0x20001480

08005d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <SystemInit+0x20>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	4a05      	ldr	r2, [pc, #20]	; (8005d7c <SystemInit+0x20>)
 8005d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d70:	bf00      	nop
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	e000ed00 	.word	0xe000ed00

08005d80 <W25Q_Reset>:
#endif

w25_info_t  w25_info;
uint8_t buf[64] = {0};

void W25Q_Reset (void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8005d84:	2200      	movs	r2, #0
 8005d86:	2101      	movs	r1, #1
 8005d88:	480b      	ldr	r0, [pc, #44]	; (8005db8 <W25Q_Reset+0x38>)
 8005d8a:	f001 fe7f 	bl	8007a8c <HAL_GPIO_WritePin>
	buf[0] = W25Q_ENABLE_RESET;
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <W25Q_Reset+0x3c>)
 8005d90:	2266      	movs	r2, #102	; 0x66
 8005d92:	701a      	strb	r2, [r3, #0]
	buf[1] = W25Q_RESET;
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <W25Q_Reset+0x3c>)
 8005d96:	2299      	movs	r2, #153	; 0x99
 8005d98:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 8005d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d9e:	2202      	movs	r2, #2
 8005da0:	4906      	ldr	r1, [pc, #24]	; (8005dbc <W25Q_Reset+0x3c>)
 8005da2:	4807      	ldr	r0, [pc, #28]	; (8005dc0 <W25Q_Reset+0x40>)
 8005da4:	f004 fda5 	bl	800a8f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8005da8:	2201      	movs	r2, #1
 8005daa:	2101      	movs	r1, #1
 8005dac:	4802      	ldr	r0, [pc, #8]	; (8005db8 <W25Q_Reset+0x38>)
 8005dae:	f001 fe6d 	bl	8007a8c <HAL_GPIO_WritePin>
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40020400 	.word	0x40020400
 8005dbc:	2000142c 	.word	0x2000142c
 8005dc0:	20000410 	.word	0x20000410

08005dc4 <W25Q_Read_ID>:
	}
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
}

uint32_t W25Q_Read_ID(void) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	buf[0] = W25Q_GET_JEDEC_ID;
 8005dca:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <W25Q_Read_ID+0x54>)
 8005dcc:	229f      	movs	r2, #159	; 0x9f
 8005dce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4811      	ldr	r0, [pc, #68]	; (8005e1c <W25Q_Read_ID+0x58>)
 8005dd6:	f001 fe59 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8005dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dde:	2201      	movs	r2, #1
 8005de0:	490d      	ldr	r1, [pc, #52]	; (8005e18 <W25Q_Read_ID+0x54>)
 8005de2:	480f      	ldr	r0, [pc, #60]	; (8005e20 <W25Q_Read_ID+0x5c>)
 8005de4:	f004 fd85 	bl	800a8f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, dt, 3, 1000);
 8005de8:	1d39      	adds	r1, r7, #4
 8005dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dee:	2203      	movs	r2, #3
 8005df0:	480b      	ldr	r0, [pc, #44]	; (8005e20 <W25Q_Read_ID+0x5c>)
 8005df2:	f004 feba 	bl	800ab6a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8005df6:	2201      	movs	r2, #1
 8005df8:	2101      	movs	r1, #1
 8005dfa:	4808      	ldr	r0, [pc, #32]	; (8005e1c <W25Q_Read_ID+0x58>)
 8005dfc:	f001 fe46 	bl	8007a8c <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8005e00:	793b      	ldrb	r3, [r7, #4]
 8005e02:	041a      	lsls	r2, r3, #16
 8005e04:	797b      	ldrb	r3, [r7, #5]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	79ba      	ldrb	r2, [r7, #6]
 8005e0c:	4313      	orrs	r3, r2
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	2000142c 	.word	0x2000142c
 8005e1c:	40020400 	.word	0x40020400
 8005e20:	20000410 	.word	0x20000410

08005e24 <W25Q_Init>:

void W25Q_Init(void) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af00      	add	r7, sp, #0
	unsigned int id = W25Q_Read_ID();
 8005e2a:	f7ff ffcb 	bl	8005dc4 <W25Q_Read_ID>
 8005e2e:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(100);
 8005e30:	2064      	movs	r0, #100	; 0x64
 8005e32:	f000 fbd1 	bl	80065d8 <HAL_Delay>
	W25Q_Reset();
 8005e36:	f7ff ffa3 	bl	8005d80 <W25Q_Reset>
	HAL_Delay(100);
 8005e3a:	2064      	movs	r0, #100	; 0x64
 8005e3c:	f000 fbcc 	bl	80065d8 <HAL_Delay>
	id &= 0x0000FFFF;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
	w25_info.high_cap = 0;
 8005e46:	4b85      	ldr	r3, [pc, #532]	; (800605c <W25Q_Init+0x238>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	77da      	strb	r2, [r3, #31]
	switch(id)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005e52:	3b11      	subs	r3, #17
 8005e54:	2b09      	cmp	r3, #9
 8005e56:	f200 81e7 	bhi.w	8006228 <W25Q_Init+0x404>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <W25Q_Init+0x3c>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005ee3 	.word	0x08005ee3
 8005e64:	08005edb 	.word	0x08005edb
 8005e68:	08005ed3 	.word	0x08005ed3
 8005e6c:	08005ecb 	.word	0x08005ecb
 8005e70:	08005ec3 	.word	0x08005ec3
 8005e74:	08005ebb 	.word	0x08005ebb
 8005e78:	08005eb3 	.word	0x08005eb3
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	08005e99 	.word	0x08005e99
 8005e84:	08005e89 	.word	0x08005e89
	{
	case 0x401A:
		w25_info.high_cap=1;
 8005e88:	4b74      	ldr	r3, [pc, #464]	; (800605c <W25Q_Init+0x238>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 8005e8e:	4b73      	ldr	r3, [pc, #460]	; (800605c <W25Q_Init+0x238>)
 8005e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e94:	615a      	str	r2, [r3, #20]
		break;
 8005e96:	e028      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4019:
		w25_info.high_cap=1;
 8005e98:	4b70      	ldr	r3, [pc, #448]	; (800605c <W25Q_Init+0x238>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 8005e9e:	4b6f      	ldr	r3, [pc, #444]	; (800605c <W25Q_Init+0x238>)
 8005ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea4:	615a      	str	r2, [r3, #20]
		break;
 8005ea6:	e020      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4018:
		w25_info.BlockCount=256;
 8005ea8:	4b6c      	ldr	r3, [pc, #432]	; (800605c <W25Q_Init+0x238>)
 8005eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eae:	615a      	str	r2, [r3, #20]
		break;
 8005eb0:	e01b      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4017:
		w25_info.BlockCount=128;
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	; (800605c <W25Q_Init+0x238>)
 8005eb4:	2280      	movs	r2, #128	; 0x80
 8005eb6:	615a      	str	r2, [r3, #20]
		break;
 8005eb8:	e017      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4016:
		w25_info.BlockCount=64;
 8005eba:	4b68      	ldr	r3, [pc, #416]	; (800605c <W25Q_Init+0x238>)
 8005ebc:	2240      	movs	r2, #64	; 0x40
 8005ebe:	615a      	str	r2, [r3, #20]
		break;
 8005ec0:	e013      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4015:
		w25_info.BlockCount=32;
 8005ec2:	4b66      	ldr	r3, [pc, #408]	; (800605c <W25Q_Init+0x238>)
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	615a      	str	r2, [r3, #20]
		break;
 8005ec8:	e00f      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4014:
		w25_info.BlockCount=16;
 8005eca:	4b64      	ldr	r3, [pc, #400]	; (800605c <W25Q_Init+0x238>)
 8005ecc:	2210      	movs	r2, #16
 8005ece:	615a      	str	r2, [r3, #20]
		break;
 8005ed0:	e00b      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4013:
		w25_info.BlockCount=8;
 8005ed2:	4b62      	ldr	r3, [pc, #392]	; (800605c <W25Q_Init+0x238>)
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	615a      	str	r2, [r3, #20]
		break;
 8005ed8:	e007      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4012:
		w25_info.BlockCount=4;
 8005eda:	4b60      	ldr	r3, [pc, #384]	; (800605c <W25Q_Init+0x238>)
 8005edc:	2204      	movs	r2, #4
 8005ede:	615a      	str	r2, [r3, #20]
		break;
 8005ee0:	e003      	b.n	8005eea <W25Q_Init+0xc6>
	case 0x4011:
		w25_info.BlockCount=2;
 8005ee2:	4b5e      	ldr	r3, [pc, #376]	; (800605c <W25Q_Init+0x238>)
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	615a      	str	r2, [r3, #20]
		break;
 8005ee8:	bf00      	nop
	default:
		return;
	}
	w25_info.PageSize=256;
 8005eea:	4b5c      	ldr	r3, [pc, #368]	; (800605c <W25Q_Init+0x238>)
 8005eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ef0:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8005ef2:	4b5a      	ldr	r3, [pc, #360]	; (800605c <W25Q_Init+0x238>)
 8005ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ef8:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8005efa:	4b58      	ldr	r3, [pc, #352]	; (800605c <W25Q_Init+0x238>)
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	4a56      	ldr	r2, [pc, #344]	; (800605c <W25Q_Init+0x238>)
 8005f02:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8005f04:	4b55      	ldr	r3, [pc, #340]	; (800605c <W25Q_Init+0x238>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a54      	ldr	r2, [pc, #336]	; (800605c <W25Q_Init+0x238>)
 8005f0a:	6892      	ldr	r2, [r2, #8]
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
 8005f10:	4a52      	ldr	r2, [pc, #328]	; (800605c <W25Q_Init+0x238>)
 8005f12:	8812      	ldrh	r2, [r2, #0]
 8005f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f18:	4a50      	ldr	r2, [pc, #320]	; (800605c <W25Q_Init+0x238>)
 8005f1a:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8005f1c:	4b4f      	ldr	r3, [pc, #316]	; (800605c <W25Q_Init+0x238>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	4a4e      	ldr	r2, [pc, #312]	; (800605c <W25Q_Init+0x238>)
 8005f24:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8005f26:	4b4d      	ldr	r3, [pc, #308]	; (800605c <W25Q_Init+0x238>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	4a4c      	ldr	r2, [pc, #304]	; (800605c <W25Q_Init+0x238>)
 8005f2c:	6892      	ldr	r2, [r2, #8]
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	0a9b      	lsrs	r3, r3, #10
 8005f34:	4a49      	ldr	r2, [pc, #292]	; (800605c <W25Q_Init+0x238>)
 8005f36:	6193      	str	r3, [r2, #24]

#if (INIT_DEBUG == 1)
	char str1[30];
	sprintf(str1,"FLASH ID: 0x%X \r\n",id);
 8005f38:	1d3b      	adds	r3, r7, #4
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3c:	4948      	ldr	r1, [pc, #288]	; (8006060 <W25Q_Init+0x23c>)
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f007 fda8 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1), 0x1000);
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fa f942 	bl	80001d0 <strlen>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	1d39      	adds	r1, r7, #4
 8005f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f56:	4843      	ldr	r0, [pc, #268]	; (8006064 <W25Q_Init+0x240>)
 8005f58:	f005 fd9d 	bl	800ba96 <HAL_UART_Transmit>

	w25_info.high_cap = 0;
 8005f5c:	4b3f      	ldr	r3, [pc, #252]	; (800605c <W25Q_Init+0x238>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	77da      	strb	r2, [r3, #31]

	switch(id)
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005f68:	3b11      	subs	r3, #17
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	f200 8090 	bhi.w	8006090 <W25Q_Init+0x26c>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <W25Q_Init+0x154>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08006049 	.word	0x08006049
 8005f7c:	08006037 	.word	0x08006037
 8005f80:	08006025 	.word	0x08006025
 8005f84:	08006013 	.word	0x08006013
 8005f88:	08006001 	.word	0x08006001
 8005f8c:	08005fef 	.word	0x08005fef
 8005f90:	08005fdd 	.word	0x08005fdd
 8005f94:	08005fc9 	.word	0x08005fc9
 8005f98:	08005fb5 	.word	0x08005fb5
 8005f9c:	08005fa1 	.word	0x08005fa1
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8005fa0:	4b2e      	ldr	r3, [pc, #184]	; (800605c <W25Q_Init+0x238>)
 8005fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fa6:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q512 \r\n");
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	492f      	ldr	r1, [pc, #188]	; (8006068 <W25Q_Init+0x244>)
 8005fac:	4618      	mov	r0, r3
 8005fae:	f007 fd71 	bl	800da94 <siprintf>
		break;
 8005fb2:	e07f      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4019:
		w25_info.BlockCount=512;
 8005fb4:	4b29      	ldr	r3, [pc, #164]	; (800605c <W25Q_Init+0x238>)
 8005fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fba:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q256 \r\n");
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	492b      	ldr	r1, [pc, #172]	; (800606c <W25Q_Init+0x248>)
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f007 fd67 	bl	800da94 <siprintf>
		break;
 8005fc6:	e075      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4018:
		w25_info.BlockCount=256;
 8005fc8:	4b24      	ldr	r3, [pc, #144]	; (800605c <W25Q_Init+0x238>)
 8005fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fce:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q128 \r\n");
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	4927      	ldr	r1, [pc, #156]	; (8006070 <W25Q_Init+0x24c>)
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f007 fd5d 	bl	800da94 <siprintf>
		break;
 8005fda:	e06b      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4017:
		w25_info.BlockCount=128;
 8005fdc:	4b1f      	ldr	r3, [pc, #124]	; (800605c <W25Q_Init+0x238>)
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q64 \r\n");
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	4923      	ldr	r1, [pc, #140]	; (8006074 <W25Q_Init+0x250>)
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f007 fd54 	bl	800da94 <siprintf>
		break;
 8005fec:	e062      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4016:
		w25_info.BlockCount=64;
 8005fee:	4b1b      	ldr	r3, [pc, #108]	; (800605c <W25Q_Init+0x238>)
 8005ff0:	2240      	movs	r2, #64	; 0x40
 8005ff2:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q32 \r\n");
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	4920      	ldr	r1, [pc, #128]	; (8006078 <W25Q_Init+0x254>)
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f007 fd4b 	bl	800da94 <siprintf>
		break;
 8005ffe:	e059      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4015:
		w25_info.BlockCount=32;
 8006000:	4b16      	ldr	r3, [pc, #88]	; (800605c <W25Q_Init+0x238>)
 8006002:	2220      	movs	r2, #32
 8006004:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q16 \r\n");
 8006006:	1d3b      	adds	r3, r7, #4
 8006008:	491c      	ldr	r1, [pc, #112]	; (800607c <W25Q_Init+0x258>)
 800600a:	4618      	mov	r0, r3
 800600c:	f007 fd42 	bl	800da94 <siprintf>
		break;
 8006010:	e050      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4014:
		w25_info.BlockCount=16;
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <W25Q_Init+0x238>)
 8006014:	2210      	movs	r2, #16
 8006016:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q80 \r\n");
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	4919      	ldr	r1, [pc, #100]	; (8006080 <W25Q_Init+0x25c>)
 800601c:	4618      	mov	r0, r3
 800601e:	f007 fd39 	bl	800da94 <siprintf>
		break;
 8006022:	e047      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4013:
		w25_info.BlockCount=8;
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <W25Q_Init+0x238>)
 8006026:	2208      	movs	r2, #8
 8006028:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q40 \r\n");
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	4915      	ldr	r1, [pc, #84]	; (8006084 <W25Q_Init+0x260>)
 800602e:	4618      	mov	r0, r3
 8006030:	f007 fd30 	bl	800da94 <siprintf>
		break;
 8006034:	e03e      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4012:
		w25_info.BlockCount=4;
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <W25Q_Init+0x238>)
 8006038:	2204      	movs	r2, #4
 800603a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q20 \r\n");
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	4912      	ldr	r1, [pc, #72]	; (8006088 <W25Q_Init+0x264>)
 8006040:	4618      	mov	r0, r3
 8006042:	f007 fd27 	bl	800da94 <siprintf>
		break;
 8006046:	e035      	b.n	80060b4 <W25Q_Init+0x290>
	case 0x4011:
		w25_info.BlockCount=2;
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <W25Q_Init+0x238>)
 800604a:	2202      	movs	r2, #2
 800604c:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q10 \r\n");
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	490e      	ldr	r1, [pc, #56]	; (800608c <W25Q_Init+0x268>)
 8006052:	4618      	mov	r0, r3
 8006054:	f007 fd1e 	bl	800da94 <siprintf>
		break;
 8006058:	e02c      	b.n	80060b4 <W25Q_Init+0x290>
 800605a:	bf00      	nop
 800605c:	20001408 	.word	0x20001408
 8006060:	080136b4 	.word	0x080136b4
 8006064:	200005a8 	.word	0x200005a8
 8006068:	080136c8 	.word	0x080136c8
 800606c:	080136e0 	.word	0x080136e0
 8006070:	080136f8 	.word	0x080136f8
 8006074:	08013710 	.word	0x08013710
 8006078:	08013728 	.word	0x08013728
 800607c:	08013740 	.word	0x08013740
 8006080:	08013758 	.word	0x08013758
 8006084:	08013770 	.word	0x08013770
 8006088:	08013788 	.word	0x08013788
 800608c:	080137a0 	.word	0x080137a0
	default:
		sprintf(str1,"FLASH CHIP: UNKNOWN ID \r\n");
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	4967      	ldr	r1, [pc, #412]	; (8006230 <W25Q_Init+0x40c>)
 8006094:	4618      	mov	r0, r3
 8006096:	f007 fcfd 	bl	800da94 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	4618      	mov	r0, r3
 800609e:	f7fa f897 	bl	80001d0 <strlen>
 80060a2:	4603      	mov	r3, r0
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	1d39      	adds	r1, r7, #4
 80060a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ac:	4861      	ldr	r0, [pc, #388]	; (8006234 <W25Q_Init+0x410>)
 80060ae:	f005 fcf2 	bl	800ba96 <HAL_UART_Transmit>
		break;
 80060b2:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fa f88a 	bl	80001d0 <strlen>
 80060bc:	4603      	mov	r3, r0
 80060be:	b29a      	uxth	r2, r3
 80060c0:	1d39      	adds	r1, r7, #4
 80060c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c6:	485b      	ldr	r0, [pc, #364]	; (8006234 <W25Q_Init+0x410>)
 80060c8:	f005 fce5 	bl	800ba96 <HAL_UART_Transmit>
	w25_info.PageSize=256;
 80060cc:	4b5a      	ldr	r3, [pc, #360]	; (8006238 <W25Q_Init+0x414>)
 80060ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060d2:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 80060d4:	4b58      	ldr	r3, [pc, #352]	; (8006238 <W25Q_Init+0x414>)
 80060d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060da:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 80060dc:	4b56      	ldr	r3, [pc, #344]	; (8006238 <W25Q_Init+0x414>)
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	4a55      	ldr	r2, [pc, #340]	; (8006238 <W25Q_Init+0x414>)
 80060e4:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 80060e6:	4b54      	ldr	r3, [pc, #336]	; (8006238 <W25Q_Init+0x414>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	4a53      	ldr	r2, [pc, #332]	; (8006238 <W25Q_Init+0x414>)
 80060ec:	6892      	ldr	r2, [r2, #8]
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	4a51      	ldr	r2, [pc, #324]	; (8006238 <W25Q_Init+0x414>)
 80060f4:	8812      	ldrh	r2, [r2, #0]
 80060f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060fa:	4a4f      	ldr	r2, [pc, #316]	; (8006238 <W25Q_Init+0x414>)
 80060fc:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 80060fe:	4b4e      	ldr	r3, [pc, #312]	; (8006238 <W25Q_Init+0x414>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	4a4c      	ldr	r2, [pc, #304]	; (8006238 <W25Q_Init+0x414>)
 8006106:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8006108:	4b4b      	ldr	r3, [pc, #300]	; (8006238 <W25Q_Init+0x414>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4a4a      	ldr	r2, [pc, #296]	; (8006238 <W25Q_Init+0x414>)
 800610e:	6892      	ldr	r2, [r2, #8]
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	0a9b      	lsrs	r3, r3, #10
 8006116:	4a48      	ldr	r2, [pc, #288]	; (8006238 <W25Q_Init+0x414>)
 8006118:	6193      	str	r3, [r2, #24]
	sprintf(str1,"FLASH PAGE SIZE: %d Bytes \r\n",(unsigned int)w25_info.PageSize);
 800611a:	4b47      	ldr	r3, [pc, #284]	; (8006238 <W25Q_Init+0x414>)
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	1d3b      	adds	r3, r7, #4
 8006122:	4946      	ldr	r1, [pc, #280]	; (800623c <W25Q_Init+0x418>)
 8006124:	4618      	mov	r0, r3
 8006126:	f007 fcb5 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa f84f 	bl	80001d0 <strlen>
 8006132:	4603      	mov	r3, r0
 8006134:	b29a      	uxth	r2, r3
 8006136:	1d39      	adds	r1, r7, #4
 8006138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800613c:	483d      	ldr	r0, [pc, #244]	; (8006234 <W25Q_Init+0x410>)
 800613e:	f005 fcaa 	bl	800ba96 <HAL_UART_Transmit>
	sprintf(str1,"FLASH PAGE COUNT: %u \r\n",(unsigned int)w25_info.PageCount);
 8006142:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <W25Q_Init+0x414>)
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	1d3b      	adds	r3, r7, #4
 8006148:	493d      	ldr	r1, [pc, #244]	; (8006240 <W25Q_Init+0x41c>)
 800614a:	4618      	mov	r0, r3
 800614c:	f007 fca2 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006150:	1d3b      	adds	r3, r7, #4
 8006152:	4618      	mov	r0, r3
 8006154:	f7fa f83c 	bl	80001d0 <strlen>
 8006158:	4603      	mov	r3, r0
 800615a:	b29a      	uxth	r2, r3
 800615c:	1d39      	adds	r1, r7, #4
 800615e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006162:	4834      	ldr	r0, [pc, #208]	; (8006234 <W25Q_Init+0x410>)
 8006164:	f005 fc97 	bl	800ba96 <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR SIZE: %u Bytes \r\n",(unsigned int)w25_info.SectorSize);
 8006168:	4b33      	ldr	r3, [pc, #204]	; (8006238 <W25Q_Init+0x414>)
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	4935      	ldr	r1, [pc, #212]	; (8006244 <W25Q_Init+0x420>)
 8006170:	4618      	mov	r0, r3
 8006172:	f007 fc8f 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	4618      	mov	r0, r3
 800617a:	f7fa f829 	bl	80001d0 <strlen>
 800617e:	4603      	mov	r3, r0
 8006180:	b29a      	uxth	r2, r3
 8006182:	1d39      	adds	r1, r7, #4
 8006184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006188:	482a      	ldr	r0, [pc, #168]	; (8006234 <W25Q_Init+0x410>)
 800618a:	f005 fc84 	bl	800ba96 <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR COUNT: %u \r\n",(unsigned int)w25_info.SectorCount);
 800618e:	4b2a      	ldr	r3, [pc, #168]	; (8006238 <W25Q_Init+0x414>)
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	1d3b      	adds	r3, r7, #4
 8006194:	492c      	ldr	r1, [pc, #176]	; (8006248 <W25Q_Init+0x424>)
 8006196:	4618      	mov	r0, r3
 8006198:	f007 fc7c 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fa f816 	bl	80001d0 <strlen>
 80061a4:	4603      	mov	r3, r0
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	1d39      	adds	r1, r7, #4
 80061aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ae:	4821      	ldr	r0, [pc, #132]	; (8006234 <W25Q_Init+0x410>)
 80061b0:	f005 fc71 	bl	800ba96 <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK SIZE: %u Bytes \r\n",(unsigned int)w25_info.BlockSize);
 80061b4:	4b20      	ldr	r3, [pc, #128]	; (8006238 <W25Q_Init+0x414>)
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	4924      	ldr	r1, [pc, #144]	; (800624c <W25Q_Init+0x428>)
 80061bc:	4618      	mov	r0, r3
 80061be:	f007 fc69 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80061c2:	1d3b      	adds	r3, r7, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fa f803 	bl	80001d0 <strlen>
 80061ca:	4603      	mov	r3, r0
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	1d39      	adds	r1, r7, #4
 80061d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061d4:	4817      	ldr	r0, [pc, #92]	; (8006234 <W25Q_Init+0x410>)
 80061d6:	f005 fc5e 	bl	800ba96 <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK COUNT: %u \r\n",(unsigned int)w25_info.BlockCount);
 80061da:	4b17      	ldr	r3, [pc, #92]	; (8006238 <W25Q_Init+0x414>)
 80061dc:	695a      	ldr	r2, [r3, #20]
 80061de:	1d3b      	adds	r3, r7, #4
 80061e0:	491b      	ldr	r1, [pc, #108]	; (8006250 <W25Q_Init+0x42c>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f007 fc56 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7f9 fff0 	bl	80001d0 <strlen>
 80061f0:	4603      	mov	r3, r0
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	1d39      	adds	r1, r7, #4
 80061f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061fa:	480e      	ldr	r0, [pc, #56]	; (8006234 <W25Q_Init+0x410>)
 80061fc:	f005 fc4b 	bl	800ba96 <HAL_UART_Transmit>
	sprintf(str1,"FLASH CAPACITY: %u KB \r\n",(unsigned int)w25_info.NumKB);
 8006200:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <W25Q_Init+0x414>)
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	1d3b      	adds	r3, r7, #4
 8006206:	4913      	ldr	r1, [pc, #76]	; (8006254 <W25Q_Init+0x430>)
 8006208:	4618      	mov	r0, r3
 800620a:	f007 fc43 	bl	800da94 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800620e:	1d3b      	adds	r3, r7, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f7f9 ffdd 	bl	80001d0 <strlen>
 8006216:	4603      	mov	r3, r0
 8006218:	b29a      	uxth	r2, r3
 800621a:	1d39      	adds	r1, r7, #4
 800621c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006220:	4804      	ldr	r0, [pc, #16]	; (8006234 <W25Q_Init+0x410>)
 8006222:	f005 fc38 	bl	800ba96 <HAL_UART_Transmit>
 8006226:	e000      	b.n	800622a <W25Q_Init+0x406>
		return;
 8006228:	bf00      	nop
#endif
}
 800622a:	3728      	adds	r7, #40	; 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	080137b8 	.word	0x080137b8
 8006234:	200005a8 	.word	0x200005a8
 8006238:	20001408 	.word	0x20001408
 800623c:	080137d4 	.word	0x080137d4
 8006240:	080137f4 	.word	0x080137f4
 8006244:	0801380c 	.word	0x0801380c
 8006248:	0801382c 	.word	0x0801382c
 800624c:	08013848 	.word	0x08013848
 8006250:	08013868 	.word	0x08013868
 8006254:	08013884 	.word	0x08013884

08006258 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	ed87 0a05 	vstr	s0, [r7, #20]
 8006262:	edc7 0a04 	vstr	s1, [r7, #16]
 8006266:	ed87 1a03 	vstr	s2, [r7, #12]
 800626a:	edc7 1a02 	vstr	s3, [r7, #8]
 800626e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006272:	ed97 7a05 	vldr	s14, [r7, #20]
 8006276:	edd7 7a04 	vldr	s15, [r7, #16]
 800627a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800627e:	edd7 6a01 	vldr	s13, [r7, #4]
 8006282:	edd7 7a02 	vldr	s15, [r7, #8]
 8006286:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800628a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800628e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006292:	edd7 7a04 	vldr	s15, [r7, #16]
 8006296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800629a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629e:	edd7 7a02 	vldr	s15, [r7, #8]
 80062a2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80062a6:	eeb0 0a67 	vmov.f32	s0, s15
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <XPT2046_Init>:

void XPT2046_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 80062b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062bc:	2201      	movs	r2, #1
 80062be:	2180      	movs	r1, #128	; 0x80
 80062c0:	4809      	ldr	r0, [pc, #36]	; (80062e8 <XPT2046_Init+0x34>)
 80062c2:	f004 fb16 	bl	800a8f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 80062c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062ca:	2201      	movs	r2, #1
 80062cc:	2100      	movs	r1, #0
 80062ce:	4806      	ldr	r0, [pc, #24]	; (80062e8 <XPT2046_Init+0x34>)
 80062d0:	f004 fb0f 	bl	800a8f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 80062d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062d8:	2201      	movs	r2, #1
 80062da:	2100      	movs	r1, #0
 80062dc:	4802      	ldr	r0, [pc, #8]	; (80062e8 <XPT2046_Init+0x34>)
 80062de:	f004 fb08 	bl	800a8f2 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 80062e2:	bf00      	nop
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000468 	.word	0x20000468

080062ec <getRaw>:

uint16_t getRaw(uint8_t address)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 80062f6:	2001      	movs	r0, #1
 80062f8:	f000 f96e 	bl	80065d8 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80062fc:	1df9      	adds	r1, r7, #7
 80062fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006302:	2201      	movs	r2, #1
 8006304:	4814      	ldr	r0, [pc, #80]	; (8006358 <getRaw+0x6c>)
 8006306:	f004 faf4 	bl	800a8f2 <HAL_SPI_Transmit>
	address = 0x00;
 800630a:	2300      	movs	r3, #0
 800630c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 800630e:	f107 020b 	add.w	r2, r7, #11
 8006312:	1df9      	adds	r1, r7, #7
 8006314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	2301      	movs	r3, #1
 800631c:	480e      	ldr	r0, [pc, #56]	; (8006358 <getRaw+0x6c>)
 800631e:	f004 fd35 	bl	800ad8c <HAL_SPI_TransmitReceive>
	MSB = data;   
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8006326:	2300      	movs	r3, #0
 8006328:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 800632a:	f107 020b 	add.w	r2, r7, #11
 800632e:	1df9      	adds	r1, r7, #7
 8006330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2301      	movs	r3, #1
 8006338:	4807      	ldr	r0, [pc, #28]	; (8006358 <getRaw+0x6c>)
 800633a:	f004 fd27 	bl	800ad8c <HAL_SPI_TransmitReceive>
	LSB = data;
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8006342:	89fb      	ldrh	r3, [r7, #14]
 8006344:	021a      	lsls	r2, r3, #8
 8006346:	89bb      	ldrh	r3, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	10db      	asrs	r3, r3, #3
 800634c:	b29b      	uxth	r3, r3
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000468 	.word	0x20000468

0800635c <X>:

inline static uint16_t X(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8006362:	20d0      	movs	r0, #208	; 0xd0
 8006364:	f7ff ffc2 	bl	80062ec <getRaw>
 8006368:	4603      	mov	r3, r0
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80063c0 <X+0x64>
 8006376:	eddf 1a13 	vldr	s3, [pc, #76]	; 80063c4 <X+0x68>
 800637a:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80063c8 <X+0x6c>
 800637e:	eddf 0a13 	vldr	s1, [pc, #76]	; 80063cc <X+0x70>
 8006382:	eeb0 0a67 	vmov.f32	s0, s15
 8006386:	f7ff ff67 	bl	8006258 <remap>
 800638a:	eef0 7a40 	vmov.f32	s15, s0
 800638e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006392:	ee17 3a90 	vmov	r3, s15
 8006396:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800639e:	3303      	adds	r3, #3
 80063a0:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <X+0x5a>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	f240 321e 	movw	r2, #798	; 0x31e
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d801      	bhi.n	80063b6 <X+0x5a>
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	e000      	b.n	80063b8 <X+0x5c>
	else return 0;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	4447c000 	.word	0x4447c000
 80063c4:	00000000 	.word	0x00000000
 80063c8:	457a0000 	.word	0x457a0000
 80063cc:	43480000 	.word	0x43480000

080063d0 <Y>:

inline static uint16_t Y(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 80063d6:	2090      	movs	r0, #144	; 0x90
 80063d8:	f7ff ff88 	bl	80062ec <getRaw>
 80063dc:	4603      	mov	r3, r0
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006428 <Y+0x58>
 80063ea:	eddf 1a10 	vldr	s3, [pc, #64]	; 800642c <Y+0x5c>
 80063ee:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8006430 <Y+0x60>
 80063f2:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006434 <Y+0x64>
 80063f6:	eeb0 0a67 	vmov.f32	s0, s15
 80063fa:	f7ff ff2d 	bl	8006258 <remap>
 80063fe:	eef0 7a40 	vmov.f32	s15, s0
 8006402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006406:	ee17 3a90 	vmov	r3, s15
 800640a:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <Y+0x4e>
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006418:	d801      	bhi.n	800641e <Y+0x4e>
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	e000      	b.n	8006420 <Y+0x50>
	else return 0;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	43ef8000 	.word	0x43ef8000
 800642c:	00000000 	.word	0x00000000
 8006430:	456d8000 	.word	0x456d8000
 8006434:	43480000 	.word	0x43480000

08006438 <getX>:

uint16_t getX(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 800643e:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <getX+0x30>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8006444:	e007      	b.n	8006456 <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8006446:	f7ff ff89 	bl	800635c <X>
 800644a:	4603      	mov	r3, r0
 800644c:	80bb      	strh	r3, [r7, #4]
 800644e:	f7ff ff85 	bl	800635c <X>
 8006452:	4603      	mov	r3, r0
 8006454:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8006456:	88ba      	ldrh	r2, [r7, #4]
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	429a      	cmp	r2, r3
 800645c:	d1f3      	bne.n	8006446 <getX+0xe>
		}
		return x[0];
 800645e:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	080138a0 	.word	0x080138a0

0800646c <getY>:

uint16_t getY(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8006472:	4b0a      	ldr	r3, [pc, #40]	; (800649c <getY+0x30>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8006478:	e007      	b.n	800648a <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 800647a:	f7ff ffa9 	bl	80063d0 <Y>
 800647e:	4603      	mov	r3, r0
 8006480:	80bb      	strh	r3, [r7, #4]
 8006482:	f7ff ffa5 	bl	80063d0 <Y>
 8006486:	4603      	mov	r3, r0
 8006488:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 800648a:	88ba      	ldrh	r2, [r7, #4]
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	429a      	cmp	r2, r3
 8006490:	d1f3      	bne.n	800647a <getY+0xe>
		}
		return y[0];
 8006492:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	080138a0 	.word	0x080138a0

080064a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80064a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064a4:	480d      	ldr	r0, [pc, #52]	; (80064dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80064a6:	490e      	ldr	r1, [pc, #56]	; (80064e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80064a8:	4a0e      	ldr	r2, [pc, #56]	; (80064e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80064aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064ac:	e002      	b.n	80064b4 <LoopCopyDataInit>

080064ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064b2:	3304      	adds	r3, #4

080064b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064b8:	d3f9      	bcc.n	80064ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064ba:	4a0b      	ldr	r2, [pc, #44]	; (80064e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064bc:	4c0b      	ldr	r4, [pc, #44]	; (80064ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80064be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064c0:	e001      	b.n	80064c6 <LoopFillZerobss>

080064c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064c4:	3204      	adds	r2, #4

080064c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064c8:	d3fb      	bcc.n	80064c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80064ca:	f7ff fc47 	bl	8005d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ce:	f006 fbe3 	bl	800cc98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064d2:	f7fb fd7d 	bl	8001fd0 <main>
  bx  lr    
 80064d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80064d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80064dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064e0:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80064e4:	08021ff8 	.word	0x08021ff8
  ldr r2, =_sbss
 80064e8:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80064ec:	20001480 	.word	0x20001480

080064f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064f0:	e7fe      	b.n	80064f0 <ADC_IRQHandler>
	...

080064f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064f8:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <HAL_Init+0x40>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a0d      	ldr	r2, [pc, #52]	; (8006534 <HAL_Init+0x40>)
 80064fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_Init+0x40>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a0a      	ldr	r2, [pc, #40]	; (8006534 <HAL_Init+0x40>)
 800650a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800650e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <HAL_Init+0x40>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a07      	ldr	r2, [pc, #28]	; (8006534 <HAL_Init+0x40>)
 8006516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800651a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800651c:	2003      	movs	r0, #3
 800651e:	f000 f94f 	bl	80067c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006522:	2000      	movs	r0, #0
 8006524:	f000 f808 	bl	8006538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006528:	f7fe ffbe 	bl	80054a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40023c00 	.word	0x40023c00

08006538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006540:	4b12      	ldr	r3, [pc, #72]	; (800658c <HAL_InitTick+0x54>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <HAL_InitTick+0x58>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	4619      	mov	r1, r3
 800654a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800654e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f967 	bl	800682a <HAL_SYSTICK_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e00e      	b.n	8006584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d80a      	bhi.n	8006582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800656c:	2200      	movs	r2, #0
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	f000 f92f 	bl	80067d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006578:	4a06      	ldr	r2, [pc, #24]	; (8006594 <HAL_InitTick+0x5c>)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000070 	.word	0x20000070
 8006590:	20000078 	.word	0x20000078
 8006594:	20000074 	.word	0x20000074

08006598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <HAL_IncTick+0x20>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <HAL_IncTick+0x24>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4413      	add	r3, r2
 80065a8:	4a04      	ldr	r2, [pc, #16]	; (80065bc <HAL_IncTick+0x24>)
 80065aa:	6013      	str	r3, [r2, #0]
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000078 	.word	0x20000078
 80065bc:	2000146c 	.word	0x2000146c

080065c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return uwTick;
 80065c4:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <HAL_GetTick+0x14>)
 80065c6:	681b      	ldr	r3, [r3, #0]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	2000146c 	.word	0x2000146c

080065d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065e0:	f7ff ffee 	bl	80065c0 <HAL_GetTick>
 80065e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d005      	beq.n	80065fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_Delay+0x44>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065fe:	bf00      	nop
 8006600:	f7ff ffde 	bl	80065c0 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d8f7      	bhi.n	8006600 <HAL_Delay+0x28>
  {
  }
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000078 	.word	0x20000078

08006620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <__NVIC_SetPriorityGrouping+0x44>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800663c:	4013      	ands	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800664c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006652:	4a04      	ldr	r2, [pc, #16]	; (8006664 <__NVIC_SetPriorityGrouping+0x44>)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	60d3      	str	r3, [r2, #12]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000ed00 	.word	0xe000ed00

08006668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <__NVIC_GetPriorityGrouping+0x18>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	f003 0307 	and.w	r3, r3, #7
}
 8006676:	4618      	mov	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	e000ed00 	.word	0xe000ed00

08006684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	db0b      	blt.n	80066ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	f003 021f 	and.w	r2, r3, #31
 800669c:	4907      	ldr	r1, [pc, #28]	; (80066bc <__NVIC_EnableIRQ+0x38>)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2001      	movs	r0, #1
 80066a6:	fa00 f202 	lsl.w	r2, r0, r2
 80066aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	e000e100 	.word	0xe000e100

080066c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	db0a      	blt.n	80066ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	490c      	ldr	r1, [pc, #48]	; (800670c <__NVIC_SetPriority+0x4c>)
 80066da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	440b      	add	r3, r1
 80066e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066e8:	e00a      	b.n	8006700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4908      	ldr	r1, [pc, #32]	; (8006710 <__NVIC_SetPriority+0x50>)
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	3b04      	subs	r3, #4
 80066f8:	0112      	lsls	r2, r2, #4
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	440b      	add	r3, r1
 80066fe:	761a      	strb	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000e100 	.word	0xe000e100
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006714:	b480      	push	{r7}
 8006716:	b089      	sub	sp, #36	; 0x24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f1c3 0307 	rsb	r3, r3, #7
 800672e:	2b04      	cmp	r3, #4
 8006730:	bf28      	it	cs
 8006732:	2304      	movcs	r3, #4
 8006734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3304      	adds	r3, #4
 800673a:	2b06      	cmp	r3, #6
 800673c:	d902      	bls.n	8006744 <NVIC_EncodePriority+0x30>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3b03      	subs	r3, #3
 8006742:	e000      	b.n	8006746 <NVIC_EncodePriority+0x32>
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43da      	mvns	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	401a      	ands	r2, r3
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800675c:	f04f 31ff 	mov.w	r1, #4294967295
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	fa01 f303 	lsl.w	r3, r1, r3
 8006766:	43d9      	mvns	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	4313      	orrs	r3, r2
         );
}
 800676e:	4618      	mov	r0, r3
 8006770:	3724      	adds	r7, #36	; 0x24
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3b01      	subs	r3, #1
 8006788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800678c:	d301      	bcc.n	8006792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800678e:	2301      	movs	r3, #1
 8006790:	e00f      	b.n	80067b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006792:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <SysTick_Config+0x40>)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3b01      	subs	r3, #1
 8006798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800679a:	210f      	movs	r1, #15
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	f7ff ff8e 	bl	80066c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <SysTick_Config+0x40>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067aa:	4b04      	ldr	r3, [pc, #16]	; (80067bc <SysTick_Config+0x40>)
 80067ac:	2207      	movs	r2, #7
 80067ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	e000e010 	.word	0xe000e010

080067c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff29 	bl	8006620 <__NVIC_SetPriorityGrouping>
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	4603      	mov	r3, r0
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
 80067e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067e8:	f7ff ff3e 	bl	8006668 <__NVIC_GetPriorityGrouping>
 80067ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	6978      	ldr	r0, [r7, #20]
 80067f4:	f7ff ff8e 	bl	8006714 <NVIC_EncodePriority>
 80067f8:	4602      	mov	r2, r0
 80067fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fe:	4611      	mov	r1, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff ff5d 	bl	80066c0 <__NVIC_SetPriority>
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	4603      	mov	r3, r0
 8006816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ff31 	bl	8006684 <__NVIC_EnableIRQ>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff ffa2 	bl	800677c <SysTick_Config>
 8006838:	4603      	mov	r3, r0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e014      	b.n	800687e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	791b      	ldrb	r3, [r3, #4]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fe fe47 	bl	80054f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6819      	ldr	r1, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2201      	movs	r2, #1
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	43da      	mvns	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	400a      	ands	r2, r1
 80068aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	795b      	ldrb	r3, [r3, #5]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_DAC_Start_DMA+0x22>
 80068de:	2302      	movs	r3, #2
 80068e0:	e0ab      	b.n	8006a3a <HAL_DAC_Start_DMA+0x17a>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2202      	movs	r2, #2
 80068ec:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d12f      	bne.n	8006954 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	4a52      	ldr	r2, [pc, #328]	; (8006a44 <HAL_DAC_Start_DMA+0x184>)
 80068fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4a51      	ldr	r2, [pc, #324]	; (8006a48 <HAL_DAC_Start_DMA+0x188>)
 8006902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4a50      	ldr	r2, [pc, #320]	; (8006a4c <HAL_DAC_Start_DMA+0x18c>)
 800690a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800691a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	2b08      	cmp	r3, #8
 8006920:	d013      	beq.n	800694a <HAL_DAC_Start_DMA+0x8a>
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d845      	bhi.n	80069b4 <HAL_DAC_Start_DMA+0xf4>
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_DAC_Start_DMA+0x76>
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	2b04      	cmp	r3, #4
 8006932:	d005      	beq.n	8006940 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8006934:	e03e      	b.n	80069b4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	613b      	str	r3, [r7, #16]
        break;
 800693e:	e03c      	b.n	80069ba <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	613b      	str	r3, [r7, #16]
        break;
 8006948:	e037      	b.n	80069ba <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3310      	adds	r3, #16
 8006950:	613b      	str	r3, [r7, #16]
        break;
 8006952:	e032      	b.n	80069ba <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	4a3d      	ldr	r2, [pc, #244]	; (8006a50 <HAL_DAC_Start_DMA+0x190>)
 800695a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4a3c      	ldr	r2, [pc, #240]	; (8006a54 <HAL_DAC_Start_DMA+0x194>)
 8006962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	4a3b      	ldr	r2, [pc, #236]	; (8006a58 <HAL_DAC_Start_DMA+0x198>)
 800696a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800697a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2b08      	cmp	r3, #8
 8006980:	d013      	beq.n	80069aa <HAL_DAC_Start_DMA+0xea>
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2b08      	cmp	r3, #8
 8006986:	d817      	bhi.n	80069b8 <HAL_DAC_Start_DMA+0xf8>
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_DAC_Start_DMA+0xd6>
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	2b04      	cmp	r3, #4
 8006992:	d005      	beq.n	80069a0 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8006994:	e010      	b.n	80069b8 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3314      	adds	r3, #20
 800699c:	613b      	str	r3, [r7, #16]
        break;
 800699e:	e00c      	b.n	80069ba <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3318      	adds	r3, #24
 80069a6:	613b      	str	r3, [r7, #16]
        break;
 80069a8:	e007      	b.n	80069ba <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	331c      	adds	r3, #28
 80069b0:	613b      	str	r3, [r7, #16]
        break;
 80069b2:	e002      	b.n	80069ba <HAL_DAC_Start_DMA+0xfa>
        break;
 80069b4:	bf00      	nop
 80069b6:	e000      	b.n	80069ba <HAL_DAC_Start_DMA+0xfa>
        break;
 80069b8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d111      	bne.n	80069e4 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6898      	ldr	r0, [r3, #8]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	f000 fa53 	bl	8006e84 <HAL_DMA_Start_IT>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
 80069e2:	e010      	b.n	8006a06 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80069f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68d8      	ldr	r0, [r3, #12]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	f000 fa41 	bl	8006e84 <HAL_DMA_Start_IT>
 8006a02:	4603      	mov	r3, r0
 8006a04:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10c      	bne.n	8006a2c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2201      	movs	r2, #1
 8006a20:	409a      	lsls	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e005      	b.n	8006a38 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f043 0204 	orr.w	r2, r3, #4
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	08006bff 	.word	0x08006bff
 8006a48:	08006c21 	.word	0x08006c21
 8006a4c:	08006c3d 	.word	0x08006c3d
 8006a50:	08006cbb 	.word	0x08006cbb
 8006a54:	08006cdd 	.word	0x08006cdd
 8006a58:	08006cf9 	.word	0x08006cf9

08006a5c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a72:	d120      	bne.n	8006ab6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a82:	d118      	bne.n	8006ab6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2204      	movs	r2, #4
 8006a88:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f84b 	bl	8006b4c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac4:	d120      	bne.n	8006b08 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad4:	d118      	bne.n	8006b08 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2204      	movs	r2, #4
 8006ada:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f043 0202 	orr.w	r2, r3, #2
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006af0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b00:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8cf 	bl	8006ca6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	795b      	ldrb	r3, [r3, #5]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_DAC_ConfigChannel+0x18>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e03c      	b.n	8006bf2 <HAL_DAC_ConfigChannel+0x92>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2202      	movs	r2, #2
 8006b82:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6819      	ldr	r1, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	22c0      	movs	r2, #192	; 0xc0
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	400a      	ands	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff ff7f 	bl	8006b10 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	711a      	strb	r2, [r3, #4]
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ff78 	bl	8006b24 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f043 0204 	orr.w	r2, r3, #4
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff ff6e 	bl	8006b38 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	711a      	strb	r2, [r3, #4]
}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff ffce 	bl	8006c6a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	711a      	strb	r2, [r3, #4]
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff ffc7 	bl	8006c7e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f043 0204 	orr.w	r2, r3, #4
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff ffbd 	bl	8006c92 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	711a      	strb	r2, [r3, #4]
}
 8006d1e:	bf00      	nop
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d34:	f7ff fc44 	bl	80065c0 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e099      	b.n	8006e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0201 	bic.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d64:	e00f      	b.n	8006d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d66:	f7ff fc2b 	bl	80065c0 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b05      	cmp	r3, #5
 8006d72:	d908      	bls.n	8006d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2203      	movs	r2, #3
 8006d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e078      	b.n	8006e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e8      	bne.n	8006d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4b38      	ldr	r3, [pc, #224]	; (8006e80 <HAL_DMA_Init+0x158>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d107      	bne.n	8006df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de8:	4313      	orrs	r3, r2
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d117      	bne.n	8006e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00e      	beq.n	8006e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fb01 	bl	8007434 <DMA_CheckFifoParam>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d008      	beq.n	8006e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2240      	movs	r2, #64	; 0x40
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006e46:	2301      	movs	r3, #1
 8006e48:	e016      	b.n	8006e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fab8 	bl	80073c8 <DMA_CalcBaseAndBitshift>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e60:	223f      	movs	r2, #63	; 0x3f
 8006e62:	409a      	lsls	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	f010803f 	.word	0xf010803f

08006e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_DMA_Start_IT+0x26>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e040      	b.n	8006f2c <HAL_DMA_Start_IT+0xa8>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d12f      	bne.n	8006f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fa4a 	bl	800736c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006edc:	223f      	movs	r2, #63	; 0x3f
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0216 	orr.w	r2, r2, #22
 8006ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0208 	orr.w	r2, r2, #8
 8006f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	e005      	b.n	8006f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f42:	f7ff fb3d 	bl	80065c0 <HAL_GetTick>
 8006f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d008      	beq.n	8006f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2280      	movs	r2, #128	; 0x80
 8006f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e052      	b.n	800700c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0216 	bic.w	r2, r2, #22
 8006f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <HAL_DMA_Abort+0x62>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0208 	bic.w	r2, r2, #8
 8006fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fb6:	e013      	b.n	8006fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fb8:	f7ff fb02 	bl	80065c0 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d90c      	bls.n	8006fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e015      	b.n	800700c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e4      	bne.n	8006fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	223f      	movs	r2, #63	; 0x3f
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d004      	beq.n	8007032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e00c      	b.n	800704c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2205      	movs	r2, #5
 8007036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0201 	bic.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007064:	4b8e      	ldr	r3, [pc, #568]	; (80072a0 <HAL_DMA_IRQHandler+0x248>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a8e      	ldr	r2, [pc, #568]	; (80072a4 <HAL_DMA_IRQHandler+0x24c>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	0a9b      	lsrs	r3, r3, #10
 8007070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007082:	2208      	movs	r2, #8
 8007084:	409a      	lsls	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01a      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d013      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b0:	2208      	movs	r2, #8
 80070b2:	409a      	lsls	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	2201      	movs	r2, #1
 80070ca:	409a      	lsls	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d012      	beq.n	80070fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e6:	2201      	movs	r2, #1
 80070e8:	409a      	lsls	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	f043 0202 	orr.w	r2, r3, #2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fe:	2204      	movs	r2, #4
 8007100:	409a      	lsls	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d012      	beq.n	8007130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711c:	2204      	movs	r2, #4
 800711e:	409a      	lsls	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007128:	f043 0204 	orr.w	r2, r3, #4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007134:	2210      	movs	r2, #16
 8007136:	409a      	lsls	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d043      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d03c      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007152:	2210      	movs	r2, #16
 8007154:	409a      	lsls	r2, r3
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d018      	beq.n	800719a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d108      	bne.n	8007188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d024      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
 8007186:	e01f      	b.n	80071c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01b      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	e016      	b.n	80071c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0208 	bic.w	r2, r2, #8
 80071b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071cc:	2220      	movs	r2, #32
 80071ce:	409a      	lsls	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 808f 	beq.w	80072f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8087 	beq.w	80072f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ee:	2220      	movs	r2, #32
 80071f0:	409a      	lsls	r2, r3
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b05      	cmp	r3, #5
 8007200:	d136      	bne.n	8007270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0216 	bic.w	r2, r2, #22
 8007210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <HAL_DMA_IRQHandler+0x1da>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0208 	bic.w	r2, r2, #8
 8007240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	223f      	movs	r2, #63	; 0x3f
 8007248:	409a      	lsls	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	2b00      	cmp	r3, #0
 8007264:	d07e      	beq.n	8007364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
        }
        return;
 800726e:	e079      	b.n	8007364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01d      	beq.n	80072ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10d      	bne.n	80072a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007290:	2b00      	cmp	r3, #0
 8007292:	d031      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
 800729c:	e02c      	b.n	80072f8 <HAL_DMA_IRQHandler+0x2a0>
 800729e:	bf00      	nop
 80072a0:	20000070 	.word	0x20000070
 80072a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d023      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
 80072b8:	e01e      	b.n	80072f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10f      	bne.n	80072e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0210 	bic.w	r2, r2, #16
 80072d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d032      	beq.n	8007366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d022      	beq.n	8007352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2205      	movs	r2, #5
 8007310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0201 	bic.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	3301      	adds	r3, #1
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	429a      	cmp	r2, r3
 800732e:	d307      	bcc.n	8007340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f2      	bne.n	8007324 <HAL_DMA_IRQHandler+0x2cc>
 800733e:	e000      	b.n	8007342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
 8007362:	e000      	b.n	8007366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007364:	bf00      	nop
    }
  }
}
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d108      	bne.n	80073ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073aa:	e007      	b.n	80073bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	3b10      	subs	r3, #16
 80073d8:	4a14      	ldr	r2, [pc, #80]	; (800742c <DMA_CalcBaseAndBitshift+0x64>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	091b      	lsrs	r3, r3, #4
 80073e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80073e2:	4a13      	ldr	r2, [pc, #76]	; (8007430 <DMA_CalcBaseAndBitshift+0x68>)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d909      	bls.n	800740a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073fe:	f023 0303 	bic.w	r3, r3, #3
 8007402:	1d1a      	adds	r2, r3, #4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	659a      	str	r2, [r3, #88]	; 0x58
 8007408:	e007      	b.n	800741a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	aaaaaaab 	.word	0xaaaaaaab
 8007430:	08021930 	.word	0x08021930

08007434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d11f      	bne.n	800748e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b03      	cmp	r3, #3
 8007452:	d856      	bhi.n	8007502 <DMA_CheckFifoParam+0xce>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <DMA_CheckFifoParam+0x28>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	0800747f 	.word	0x0800747f
 8007464:	0800746d 	.word	0x0800746d
 8007468:	08007503 	.word	0x08007503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d046      	beq.n	8007506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800747c:	e043      	b.n	8007506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007486:	d140      	bne.n	800750a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800748c:	e03d      	b.n	800750a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007496:	d121      	bne.n	80074dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d837      	bhi.n	800750e <DMA_CheckFifoParam+0xda>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <DMA_CheckFifoParam+0x70>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074bb 	.word	0x080074bb
 80074ac:	080074b5 	.word	0x080074b5
 80074b0:	080074cd 	.word	0x080074cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e030      	b.n	800751c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d025      	beq.n	8007512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074ca:	e022      	b.n	8007512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074d4:	d11f      	bne.n	8007516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80074da:	e01c      	b.n	8007516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d903      	bls.n	80074ea <DMA_CheckFifoParam+0xb6>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d003      	beq.n	80074f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80074e8:	e018      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
      break;
 80074ee:	e015      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00e      	beq.n	800751a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007500:	e00b      	b.n	800751a <DMA_CheckFifoParam+0xe6>
      break;
 8007502:	bf00      	nop
 8007504:	e00a      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      break;
 8007506:	bf00      	nop
 8007508:	e008      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      break;
 800750a:	bf00      	nop
 800750c:	e006      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      break;
 800750e:	bf00      	nop
 8007510:	e004      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      break;
 8007512:	bf00      	nop
 8007514:	e002      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      break;   
 8007516:	bf00      	nop
 8007518:	e000      	b.n	800751c <DMA_CheckFifoParam+0xe8>
      break;
 800751a:	bf00      	nop
    }
  } 
  
  return status; 
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop

0800752c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800752c:	b480      	push	{r7}
 800752e:	b089      	sub	sp, #36	; 0x24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800753e:	2300      	movs	r3, #0
 8007540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	e16b      	b.n	8007820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007548:	2201      	movs	r2, #1
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	4013      	ands	r3, r2
 800755a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	429a      	cmp	r2, r3
 8007562:	f040 815a 	bne.w	800781a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d005      	beq.n	800757e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800757a:	2b02      	cmp	r3, #2
 800757c:	d130      	bne.n	80075e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	2203      	movs	r2, #3
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	43db      	mvns	r3, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075b4:	2201      	movs	r2, #1
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	43db      	mvns	r3, r3
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	4013      	ands	r3, r2
 80075c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	091b      	lsrs	r3, r3, #4
 80075ca:	f003 0201 	and.w	r2, r3, #1
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d017      	beq.n	800761c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	2203      	movs	r2, #3
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	43db      	mvns	r3, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	4013      	ands	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	4313      	orrs	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d123      	bne.n	8007670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	08da      	lsrs	r2, r3, #3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3208      	adds	r2, #8
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	220f      	movs	r2, #15
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	43db      	mvns	r3, r3
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	4013      	ands	r3, r2
 800764a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	4313      	orrs	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	08da      	lsrs	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3208      	adds	r2, #8
 800766a:	69b9      	ldr	r1, [r7, #24]
 800766c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	2203      	movs	r2, #3
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	43db      	mvns	r3, r3
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	4013      	ands	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f003 0203 	and.w	r2, r3, #3
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	4313      	orrs	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80b4 	beq.w	800781a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	4b60      	ldr	r3, [pc, #384]	; (8007838 <HAL_GPIO_Init+0x30c>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	4a5f      	ldr	r2, [pc, #380]	; (8007838 <HAL_GPIO_Init+0x30c>)
 80076bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076c0:	6453      	str	r3, [r2, #68]	; 0x44
 80076c2:	4b5d      	ldr	r3, [pc, #372]	; (8007838 <HAL_GPIO_Init+0x30c>)
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076ce:	4a5b      	ldr	r2, [pc, #364]	; (800783c <HAL_GPIO_Init+0x310>)
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	089b      	lsrs	r3, r3, #2
 80076d4:	3302      	adds	r3, #2
 80076d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	220f      	movs	r2, #15
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	43db      	mvns	r3, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4013      	ands	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a52      	ldr	r2, [pc, #328]	; (8007840 <HAL_GPIO_Init+0x314>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d02b      	beq.n	8007752 <HAL_GPIO_Init+0x226>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a51      	ldr	r2, [pc, #324]	; (8007844 <HAL_GPIO_Init+0x318>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d025      	beq.n	800774e <HAL_GPIO_Init+0x222>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a50      	ldr	r2, [pc, #320]	; (8007848 <HAL_GPIO_Init+0x31c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01f      	beq.n	800774a <HAL_GPIO_Init+0x21e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a4f      	ldr	r2, [pc, #316]	; (800784c <HAL_GPIO_Init+0x320>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d019      	beq.n	8007746 <HAL_GPIO_Init+0x21a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a4e      	ldr	r2, [pc, #312]	; (8007850 <HAL_GPIO_Init+0x324>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_GPIO_Init+0x216>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a4d      	ldr	r2, [pc, #308]	; (8007854 <HAL_GPIO_Init+0x328>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00d      	beq.n	800773e <HAL_GPIO_Init+0x212>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a4c      	ldr	r2, [pc, #304]	; (8007858 <HAL_GPIO_Init+0x32c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <HAL_GPIO_Init+0x20e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a4b      	ldr	r2, [pc, #300]	; (800785c <HAL_GPIO_Init+0x330>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d101      	bne.n	8007736 <HAL_GPIO_Init+0x20a>
 8007732:	2307      	movs	r3, #7
 8007734:	e00e      	b.n	8007754 <HAL_GPIO_Init+0x228>
 8007736:	2308      	movs	r3, #8
 8007738:	e00c      	b.n	8007754 <HAL_GPIO_Init+0x228>
 800773a:	2306      	movs	r3, #6
 800773c:	e00a      	b.n	8007754 <HAL_GPIO_Init+0x228>
 800773e:	2305      	movs	r3, #5
 8007740:	e008      	b.n	8007754 <HAL_GPIO_Init+0x228>
 8007742:	2304      	movs	r3, #4
 8007744:	e006      	b.n	8007754 <HAL_GPIO_Init+0x228>
 8007746:	2303      	movs	r3, #3
 8007748:	e004      	b.n	8007754 <HAL_GPIO_Init+0x228>
 800774a:	2302      	movs	r3, #2
 800774c:	e002      	b.n	8007754 <HAL_GPIO_Init+0x228>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <HAL_GPIO_Init+0x228>
 8007752:	2300      	movs	r3, #0
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	f002 0203 	and.w	r2, r2, #3
 800775a:	0092      	lsls	r2, r2, #2
 800775c:	4093      	lsls	r3, r2
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4313      	orrs	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007764:	4935      	ldr	r1, [pc, #212]	; (800783c <HAL_GPIO_Init+0x310>)
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	089b      	lsrs	r3, r3, #2
 800776a:	3302      	adds	r3, #2
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007772:	4b3b      	ldr	r3, [pc, #236]	; (8007860 <HAL_GPIO_Init+0x334>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	43db      	mvns	r3, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	4013      	ands	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007796:	4a32      	ldr	r2, [pc, #200]	; (8007860 <HAL_GPIO_Init+0x334>)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800779c:	4b30      	ldr	r3, [pc, #192]	; (8007860 <HAL_GPIO_Init+0x334>)
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	43db      	mvns	r3, r3
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	4013      	ands	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077c0:	4a27      	ldr	r2, [pc, #156]	; (8007860 <HAL_GPIO_Init+0x334>)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077c6:	4b26      	ldr	r3, [pc, #152]	; (8007860 <HAL_GPIO_Init+0x334>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	43db      	mvns	r3, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	4013      	ands	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077ea:	4a1d      	ldr	r2, [pc, #116]	; (8007860 <HAL_GPIO_Init+0x334>)
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077f0:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <HAL_GPIO_Init+0x334>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	43db      	mvns	r3, r3
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	4013      	ands	r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007814:	4a12      	ldr	r2, [pc, #72]	; (8007860 <HAL_GPIO_Init+0x334>)
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	3301      	adds	r3, #1
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	2b0f      	cmp	r3, #15
 8007824:	f67f ae90 	bls.w	8007548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	3724      	adds	r7, #36	; 0x24
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	40023800 	.word	0x40023800
 800783c:	40013800 	.word	0x40013800
 8007840:	40020000 	.word	0x40020000
 8007844:	40020400 	.word	0x40020400
 8007848:	40020800 	.word	0x40020800
 800784c:	40020c00 	.word	0x40020c00
 8007850:	40021000 	.word	0x40021000
 8007854:	40021400 	.word	0x40021400
 8007858:	40021800 	.word	0x40021800
 800785c:	40021c00 	.word	0x40021c00
 8007860:	40013c00 	.word	0x40013c00

08007864 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007872:	2300      	movs	r3, #0
 8007874:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007876:	2300      	movs	r3, #0
 8007878:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800787a:	2300      	movs	r3, #0
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e0cd      	b.n	8007a1c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007880:	2201      	movs	r2, #1
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	4013      	ands	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	429a      	cmp	r2, r3
 8007898:	f040 80bd 	bne.w	8007a16 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800789c:	4a65      	ldr	r2, [pc, #404]	; (8007a34 <HAL_GPIO_DeInit+0x1d0>)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	089b      	lsrs	r3, r3, #2
 80078a2:	3302      	adds	r3, #2
 80078a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f003 0303 	and.w	r3, r3, #3
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	220f      	movs	r2, #15
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	4013      	ands	r3, r2
 80078bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a5d      	ldr	r2, [pc, #372]	; (8007a38 <HAL_GPIO_DeInit+0x1d4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d02b      	beq.n	800791e <HAL_GPIO_DeInit+0xba>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a5c      	ldr	r2, [pc, #368]	; (8007a3c <HAL_GPIO_DeInit+0x1d8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d025      	beq.n	800791a <HAL_GPIO_DeInit+0xb6>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a5b      	ldr	r2, [pc, #364]	; (8007a40 <HAL_GPIO_DeInit+0x1dc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01f      	beq.n	8007916 <HAL_GPIO_DeInit+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a5a      	ldr	r2, [pc, #360]	; (8007a44 <HAL_GPIO_DeInit+0x1e0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d019      	beq.n	8007912 <HAL_GPIO_DeInit+0xae>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a59      	ldr	r2, [pc, #356]	; (8007a48 <HAL_GPIO_DeInit+0x1e4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <HAL_GPIO_DeInit+0xaa>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a58      	ldr	r2, [pc, #352]	; (8007a4c <HAL_GPIO_DeInit+0x1e8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00d      	beq.n	800790a <HAL_GPIO_DeInit+0xa6>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a57      	ldr	r2, [pc, #348]	; (8007a50 <HAL_GPIO_DeInit+0x1ec>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d007      	beq.n	8007906 <HAL_GPIO_DeInit+0xa2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a56      	ldr	r2, [pc, #344]	; (8007a54 <HAL_GPIO_DeInit+0x1f0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d101      	bne.n	8007902 <HAL_GPIO_DeInit+0x9e>
 80078fe:	2307      	movs	r3, #7
 8007900:	e00e      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 8007902:	2308      	movs	r3, #8
 8007904:	e00c      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 8007906:	2306      	movs	r3, #6
 8007908:	e00a      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 800790a:	2305      	movs	r3, #5
 800790c:	e008      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 800790e:	2304      	movs	r3, #4
 8007910:	e006      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 8007912:	2303      	movs	r3, #3
 8007914:	e004      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 8007916:	2302      	movs	r3, #2
 8007918:	e002      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <HAL_GPIO_DeInit+0xbc>
 800791e:	2300      	movs	r3, #0
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	f002 0203 	and.w	r2, r2, #3
 8007926:	0092      	lsls	r2, r2, #2
 8007928:	4093      	lsls	r3, r2
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	429a      	cmp	r2, r3
 800792e:	d132      	bne.n	8007996 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007930:	4b49      	ldr	r3, [pc, #292]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	43db      	mvns	r3, r3
 8007938:	4947      	ldr	r1, [pc, #284]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 800793a:	4013      	ands	r3, r2
 800793c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800793e:	4b46      	ldr	r3, [pc, #280]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	43db      	mvns	r3, r3
 8007946:	4944      	ldr	r1, [pc, #272]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 8007948:	4013      	ands	r3, r2
 800794a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800794c:	4b42      	ldr	r3, [pc, #264]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	43db      	mvns	r3, r3
 8007954:	4940      	ldr	r1, [pc, #256]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 8007956:	4013      	ands	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800795a:	4b3f      	ldr	r3, [pc, #252]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	43db      	mvns	r3, r3
 8007962:	493d      	ldr	r1, [pc, #244]	; (8007a58 <HAL_GPIO_DeInit+0x1f4>)
 8007964:	4013      	ands	r3, r2
 8007966:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	220f      	movs	r2, #15
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007978:	4a2e      	ldr	r2, [pc, #184]	; (8007a34 <HAL_GPIO_DeInit+0x1d0>)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	089b      	lsrs	r3, r3, #2
 800797e:	3302      	adds	r3, #2
 8007980:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	43da      	mvns	r2, r3
 8007988:	482a      	ldr	r0, [pc, #168]	; (8007a34 <HAL_GPIO_DeInit+0x1d0>)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	089b      	lsrs	r3, r3, #2
 800798e:	400a      	ands	r2, r1
 8007990:	3302      	adds	r3, #2
 8007992:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	2103      	movs	r1, #3
 80079a0:	fa01 f303 	lsl.w	r3, r1, r3
 80079a4:	43db      	mvns	r3, r3
 80079a6:	401a      	ands	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	08da      	lsrs	r2, r3, #3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3208      	adds	r2, #8
 80079b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	220f      	movs	r2, #15
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	43db      	mvns	r3, r3
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	08d2      	lsrs	r2, r2, #3
 80079cc:	4019      	ands	r1, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3208      	adds	r2, #8
 80079d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	2103      	movs	r1, #3
 80079e0:	fa01 f303 	lsl.w	r3, r1, r3
 80079e4:	43db      	mvns	r3, r3
 80079e6:	401a      	ands	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	2101      	movs	r1, #1
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	fa01 f303 	lsl.w	r3, r1, r3
 80079f8:	43db      	mvns	r3, r3
 80079fa:	401a      	ands	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	2103      	movs	r1, #3
 8007a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	401a      	ands	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b0f      	cmp	r3, #15
 8007a20:	f67f af2e 	bls.w	8007880 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40013800 	.word	0x40013800
 8007a38:	40020000 	.word	0x40020000
 8007a3c:	40020400 	.word	0x40020400
 8007a40:	40020800 	.word	0x40020800
 8007a44:	40020c00 	.word	0x40020c00
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	40021400 	.word	0x40021400
 8007a50:	40021800 	.word	0x40021800
 8007a54:	40021c00 	.word	0x40021c00
 8007a58:	40013c00 	.word	0x40013c00

08007a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e001      	b.n	8007a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a9c:	787b      	ldrb	r3, [r7, #1]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aa2:	887a      	ldrh	r2, [r7, #2]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007aa8:	e003      	b.n	8007ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007aaa:	887b      	ldrh	r3, [r7, #2]
 8007aac:	041a      	lsls	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	619a      	str	r2, [r3, #24]
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e12b      	b.n	8007d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fd fdbe 	bl	8005668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2224      	movs	r2, #36	; 0x24
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b24:	f002 fa20 	bl	8009f68 <HAL_RCC_GetPCLK1Freq>
 8007b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	4a81      	ldr	r2, [pc, #516]	; (8007d34 <HAL_I2C_Init+0x274>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d807      	bhi.n	8007b44 <HAL_I2C_Init+0x84>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4a80      	ldr	r2, [pc, #512]	; (8007d38 <HAL_I2C_Init+0x278>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	bf94      	ite	ls
 8007b3c:	2301      	movls	r3, #1
 8007b3e:	2300      	movhi	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	e006      	b.n	8007b52 <HAL_I2C_Init+0x92>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4a7d      	ldr	r2, [pc, #500]	; (8007d3c <HAL_I2C_Init+0x27c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	bf94      	ite	ls
 8007b4c:	2301      	movls	r3, #1
 8007b4e:	2300      	movhi	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e0e7      	b.n	8007d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4a78      	ldr	r2, [pc, #480]	; (8007d40 <HAL_I2C_Init+0x280>)
 8007b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b62:	0c9b      	lsrs	r3, r3, #18
 8007b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a6a      	ldr	r2, [pc, #424]	; (8007d34 <HAL_I2C_Init+0x274>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d802      	bhi.n	8007b94 <HAL_I2C_Init+0xd4>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	3301      	adds	r3, #1
 8007b92:	e009      	b.n	8007ba8 <HAL_I2C_Init+0xe8>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	4a69      	ldr	r2, [pc, #420]	; (8007d44 <HAL_I2C_Init+0x284>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	099b      	lsrs	r3, r3, #6
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6812      	ldr	r2, [r2, #0]
 8007bac:	430b      	orrs	r3, r1
 8007bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	495c      	ldr	r1, [pc, #368]	; (8007d34 <HAL_I2C_Init+0x274>)
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	d819      	bhi.n	8007bfc <HAL_I2C_Init+0x13c>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	1e59      	subs	r1, r3, #1
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bd6:	1c59      	adds	r1, r3, #1
 8007bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007bdc:	400b      	ands	r3, r1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_I2C_Init+0x138>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1e59      	subs	r1, r3, #1
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf6:	e051      	b.n	8007c9c <HAL_I2C_Init+0x1dc>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	e04f      	b.n	8007c9c <HAL_I2C_Init+0x1dc>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d111      	bne.n	8007c28 <HAL_I2C_Init+0x168>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	1e58      	subs	r0, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6859      	ldr	r1, [r3, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	440b      	add	r3, r1
 8007c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c16:	3301      	adds	r3, #1
 8007c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	e012      	b.n	8007c4e <HAL_I2C_Init+0x18e>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	1e58      	subs	r0, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6859      	ldr	r1, [r3, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	0099      	lsls	r1, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c3e:	3301      	adds	r3, #1
 8007c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bf0c      	ite	eq
 8007c48:	2301      	moveq	r3, #1
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_I2C_Init+0x196>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e022      	b.n	8007c9c <HAL_I2C_Init+0x1dc>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10e      	bne.n	8007c7c <HAL_I2C_Init+0x1bc>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1e58      	subs	r0, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6859      	ldr	r1, [r3, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	440b      	add	r3, r1
 8007c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c70:	3301      	adds	r3, #1
 8007c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7a:	e00f      	b.n	8007c9c <HAL_I2C_Init+0x1dc>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	1e58      	subs	r0, r3, #1
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6859      	ldr	r1, [r3, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	0099      	lsls	r1, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c92:	3301      	adds	r3, #1
 8007c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	6809      	ldr	r1, [r1, #0]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69da      	ldr	r2, [r3, #28]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6911      	ldr	r1, [r2, #16]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68d2      	ldr	r2, [r2, #12]
 8007cd6:	4311      	orrs	r1, r2
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0201 	orr.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	000186a0 	.word	0x000186a0
 8007d38:	001e847f 	.word	0x001e847f
 8007d3c:	003d08ff 	.word	0x003d08ff
 8007d40:	431bde83 	.word	0x431bde83
 8007d44:	10624dd3 	.word	0x10624dd3

08007d48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e021      	b.n	8007d9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2224      	movs	r2, #36	; 0x24
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0201 	bic.w	r2, r2, #1
 8007d70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fd fcc0 	bl	80056f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	461a      	mov	r2, r3
 8007db4:	460b      	mov	r3, r1
 8007db6:	817b      	strh	r3, [r7, #10]
 8007db8:	4613      	mov	r3, r2
 8007dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dbc:	f7fe fc00 	bl	80065c0 <HAL_GetTick>
 8007dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	f040 80e0 	bne.w	8007f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	2319      	movs	r3, #25
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	4970      	ldr	r1, [pc, #448]	; (8007f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f001 fa24 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0d3      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_I2C_Master_Transmit+0x50>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e0cc      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d007      	beq.n	8007e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0201 	orr.w	r2, r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2221      	movs	r2, #33	; 0x21
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	893a      	ldrh	r2, [r7, #8]
 8007e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a50      	ldr	r2, [pc, #320]	; (8007fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8007e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e60:	8979      	ldrh	r1, [r7, #10]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a3a      	ldr	r2, [r7, #32]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 ff10 	bl	8008c8c <I2C_MasterRequestWrite>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e08d      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007e8c:	e066      	b.n	8007f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	6a39      	ldr	r1, [r7, #32]
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 fa9e 	bl	80093d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00d      	beq.n	8007eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d107      	bne.n	8007eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e06b      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	781a      	ldrb	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d11b      	bne.n	8007f30 <HAL_I2C_Master_Transmit+0x188>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d017      	beq.n	8007f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	6a39      	ldr	r1, [r7, #32]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f001 fa8e 	bl	8009456 <I2C_WaitOnBTFFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d107      	bne.n	8007f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e01a      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d194      	bne.n	8007e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e000      	b.n	8007f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	00100002 	.word	0x00100002
 8007fa0:	ffff0000 	.word	0xffff0000

08007fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08c      	sub	sp, #48	; 0x30
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	817b      	strh	r3, [r7, #10]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fb8:	f7fe fb02 	bl	80065c0 <HAL_GetTick>
 8007fbc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	f040 820b 	bne.w	80083e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	2319      	movs	r3, #25
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	497c      	ldr	r1, [pc, #496]	; (80081c8 <HAL_I2C_Master_Receive+0x224>)
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f001 f926 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e1fe      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_I2C_Master_Receive+0x50>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e1f7      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b01      	cmp	r3, #1
 8008008:	d007      	beq.n	800801a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0201 	orr.w	r2, r2, #1
 8008018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008028:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2222      	movs	r2, #34	; 0x22
 800802e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2210      	movs	r2, #16
 8008036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	893a      	ldrh	r2, [r7, #8]
 800804a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4a5c      	ldr	r2, [pc, #368]	; (80081cc <HAL_I2C_Master_Receive+0x228>)
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800805c:	8979      	ldrh	r1, [r7, #10]
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fe94 	bl	8008d90 <I2C_MasterRequestRead>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e1b8      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d113      	bne.n	80080a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800807a:	2300      	movs	r3, #0
 800807c:	623b      	str	r3, [r7, #32]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	623b      	str	r3, [r7, #32]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	623b      	str	r3, [r7, #32]
 800808e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	e18c      	b.n	80083bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d11b      	bne.n	80080e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	61fb      	str	r3, [r7, #28]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	e16c      	b.n	80083bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d11b      	bne.n	8008122 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800810a:	2300      	movs	r3, #0
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	61bb      	str	r3, [r7, #24]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	61bb      	str	r3, [r7, #24]
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	e14c      	b.n	80083bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008148:	e138      	b.n	80083bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814e:	2b03      	cmp	r3, #3
 8008150:	f200 80f1 	bhi.w	8008336 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008158:	2b01      	cmp	r3, #1
 800815a:	d123      	bne.n	80081a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800815c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f001 f9b9 	bl	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e139      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081a2:	e10b      	b.n	80083bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d14e      	bne.n	800824a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	2200      	movs	r2, #0
 80081b4:	4906      	ldr	r1, [pc, #24]	; (80081d0 <HAL_I2C_Master_Receive+0x22c>)
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f001 f836 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e10e      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
 80081c6:	bf00      	nop
 80081c8:	00100002 	.word	0x00100002
 80081cc:	ffff0000 	.word	0xffff0000
 80081d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823e:	b29b      	uxth	r3, r3
 8008240:	3b01      	subs	r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008248:	e0b8      	b.n	80083bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	2200      	movs	r2, #0
 8008252:	4966      	ldr	r1, [pc, #408]	; (80083ec <HAL_I2C_Master_Receive+0x448>)
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 ffe7 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e0bf      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008290:	3b01      	subs	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	2200      	movs	r2, #0
 80082ae:	494f      	ldr	r1, [pc, #316]	; (80083ec <HAL_I2C_Master_Receive+0x448>)
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 ffb9 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e091      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691a      	ldr	r2, [r3, #16]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008334:	e042      	b.n	80083bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f001 f8cc 	bl	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e04c      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	b2d2      	uxtb	r2, r2
 8008356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f003 0304 	and.w	r3, r3, #4
 8008386:	2b04      	cmp	r3, #4
 8008388:	d118      	bne.n	80083bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691a      	ldr	r2, [r3, #16]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f aec2 	bne.w	800814a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	e000      	b.n	80083e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80083e2:	2302      	movs	r3, #2
  }
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3728      	adds	r7, #40	; 0x28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	00010004 	.word	0x00010004

080083f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	4603      	mov	r3, r0
 8008400:	817b      	strh	r3, [r7, #10]
 8008402:	460b      	mov	r3, r1
 8008404:	813b      	strh	r3, [r7, #8]
 8008406:	4613      	mov	r3, r2
 8008408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800840a:	f7fe f8d9 	bl	80065c0 <HAL_GetTick>
 800840e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b20      	cmp	r3, #32
 800841a:	f040 80d9 	bne.w	80085d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	2319      	movs	r3, #25
 8008424:	2201      	movs	r2, #1
 8008426:	496d      	ldr	r1, [pc, #436]	; (80085dc <HAL_I2C_Mem_Write+0x1ec>)
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fefd 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
 8008436:	e0cc      	b.n	80085d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_I2C_Mem_Write+0x56>
 8008442:	2302      	movs	r3, #2
 8008444:	e0c5      	b.n	80085d2 <HAL_I2C_Mem_Write+0x1e2>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b01      	cmp	r3, #1
 800845a:	d007      	beq.n	800846c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800847a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2221      	movs	r2, #33	; 0x21
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2240      	movs	r2, #64	; 0x40
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a3a      	ldr	r2, [r7, #32]
 8008496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800849c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4a4d      	ldr	r2, [pc, #308]	; (80085e0 <HAL_I2C_Mem_Write+0x1f0>)
 80084ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084ae:	88f8      	ldrh	r0, [r7, #6]
 80084b0:	893a      	ldrh	r2, [r7, #8]
 80084b2:	8979      	ldrh	r1, [r7, #10]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4603      	mov	r3, r0
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fd34 	bl	8008f2c <I2C_RequestMemoryWrite>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d052      	beq.n	8008570 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e081      	b.n	80085d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 ff7e 	bl	80093d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00d      	beq.n	80084fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d107      	bne.n	80084f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e06b      	b.n	80085d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	781a      	ldrb	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008520:	b29b      	uxth	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	b29a      	uxth	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b04      	cmp	r3, #4
 8008536:	d11b      	bne.n	8008570 <HAL_I2C_Mem_Write+0x180>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800853c:	2b00      	cmp	r3, #0
 800853e:	d017      	beq.n	8008570 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855a:	3b01      	subs	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1aa      	bne.n	80084ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 ff6a 	bl	8009456 <I2C_WaitOnBTFFlagUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	2b04      	cmp	r3, #4
 800858e:	d107      	bne.n	80085a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800859e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e016      	b.n	80085d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	e000      	b.n	80085d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80085d0:	2302      	movs	r3, #2
  }
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	00100002 	.word	0x00100002
 80085e0:	ffff0000 	.word	0xffff0000

080085e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08c      	sub	sp, #48	; 0x30
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	4608      	mov	r0, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	817b      	strh	r3, [r7, #10]
 80085f6:	460b      	mov	r3, r1
 80085f8:	813b      	strh	r3, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085fe:	f7fd ffdf 	bl	80065c0 <HAL_GetTick>
 8008602:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b20      	cmp	r3, #32
 800860e:	f040 8208 	bne.w	8008a22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	2319      	movs	r3, #25
 8008618:	2201      	movs	r2, #1
 800861a:	497b      	ldr	r1, [pc, #492]	; (8008808 <HAL_I2C_Mem_Read+0x224>)
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 fe03 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008628:	2302      	movs	r3, #2
 800862a:	e1fb      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_I2C_Mem_Read+0x56>
 8008636:	2302      	movs	r3, #2
 8008638:	e1f4      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b01      	cmp	r3, #1
 800864e:	d007      	beq.n	8008660 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800866e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2222      	movs	r2, #34	; 0x22
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2240      	movs	r2, #64	; 0x40
 800867c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a5b      	ldr	r2, [pc, #364]	; (800880c <HAL_I2C_Mem_Read+0x228>)
 80086a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086a2:	88f8      	ldrh	r0, [r7, #6]
 80086a4:	893a      	ldrh	r2, [r7, #8]
 80086a6:	8979      	ldrh	r1, [r7, #10]
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	4603      	mov	r3, r0
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fcd0 	bl	8009058 <I2C_RequestMemoryRead>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e1b0      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d113      	bne.n	80086f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ca:	2300      	movs	r3, #0
 80086cc:	623b      	str	r3, [r7, #32]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	623b      	str	r3, [r7, #32]
 80086de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e184      	b.n	80089fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d11b      	bne.n	8008732 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800870a:	2300      	movs	r3, #0
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	61fb      	str	r3, [r7, #28]
 800871e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e164      	b.n	80089fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008736:	2b02      	cmp	r3, #2
 8008738:	d11b      	bne.n	8008772 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008748:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800875a:	2300      	movs	r3, #0
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	e144      	b.n	80089fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008788:	e138      	b.n	80089fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800878e:	2b03      	cmp	r3, #3
 8008790:	f200 80f1 	bhi.w	8008976 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008798:	2b01      	cmp	r3, #1
 800879a:	d123      	bne.n	80087e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800879c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fe99 	bl	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e139      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087e2:	e10b      	b.n	80089fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d14e      	bne.n	800888a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	2200      	movs	r2, #0
 80087f4:	4906      	ldr	r1, [pc, #24]	; (8008810 <HAL_I2C_Mem_Read+0x22c>)
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 fd16 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d008      	beq.n	8008814 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e10e      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
 8008806:	bf00      	nop
 8008808:	00100002 	.word	0x00100002
 800880c:	ffff0000 	.word	0xffff0000
 8008810:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691a      	ldr	r2, [r3, #16]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691a      	ldr	r2, [r3, #16]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008888:	e0b8      	b.n	80089fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	2200      	movs	r2, #0
 8008892:	4966      	ldr	r1, [pc, #408]	; (8008a2c <HAL_I2C_Mem_Read+0x448>)
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fcc7 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e0bf      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d0:	3b01      	subs	r3, #1
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	2200      	movs	r2, #0
 80088ee:	494f      	ldr	r1, [pc, #316]	; (8008a2c <HAL_I2C_Mem_Read+0x448>)
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fc99 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e091      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800890e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	691a      	ldr	r2, [r3, #16]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008938:	b29b      	uxth	r3, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896a:	b29b      	uxth	r3, r3
 800896c:	3b01      	subs	r3, #1
 800896e:	b29a      	uxth	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008974:	e042      	b.n	80089fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008978:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fdac 	bl	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e04c      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d118      	bne.n	80089fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	691a      	ldr	r2, [r3, #16]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	b2d2      	uxtb	r2, r2
 80089d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f47f aec2 	bne.w	800878a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e000      	b.n	8008a24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008a22:	2302      	movs	r3, #2
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3728      	adds	r7, #40	; 0x28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	00010004 	.word	0x00010004

08008a30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08a      	sub	sp, #40	; 0x28
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008a40:	f7fd fdbe 	bl	80065c0 <HAL_GetTick>
 8008a44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8008a46:	2301      	movs	r3, #1
 8008a48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	f040 8111 	bne.w	8008c7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	2319      	movs	r3, #25
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4988      	ldr	r1, [pc, #544]	; (8008c84 <HAL_I2C_IsDeviceReady+0x254>)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 fbe0 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e104      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_I2C_IsDeviceReady+0x50>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e0fd      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x24c>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d007      	beq.n	8008aa6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f042 0201 	orr.w	r2, r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ab4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2224      	movs	r2, #36	; 0x24
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4a70      	ldr	r2, [pc, #448]	; (8008c88 <HAL_I2C_IsDeviceReady+0x258>)
 8008ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ad8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fb9e 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00d      	beq.n	8008b0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b00:	d103      	bne.n	8008b0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e0b6      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b0e:	897b      	ldrh	r3, [r7, #10]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008b1e:	f7fd fd4f 	bl	80065c0 <HAL_GetTick>
 8008b22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	bf0c      	ite	eq
 8008b32:	2301      	moveq	r3, #1
 8008b34:	2300      	movne	r3, #0
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b48:	bf0c      	ite	eq
 8008b4a:	2301      	moveq	r3, #1
 8008b4c:	2300      	movne	r3, #0
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008b52:	e025      	b.n	8008ba0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008b54:	f7fd fd34 	bl	80065c0 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d302      	bcc.n	8008b6a <HAL_I2C_IsDeviceReady+0x13a>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	22a0      	movs	r2, #160	; 0xa0
 8008b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	bf0c      	ite	eq
 8008b80:	2301      	moveq	r3, #1
 8008b82:	2300      	movne	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2ba0      	cmp	r3, #160	; 0xa0
 8008baa:	d005      	beq.n	8008bb8 <HAL_I2C_IsDeviceReady+0x188>
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <HAL_I2C_IsDeviceReady+0x188>
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0cd      	beq.n	8008b54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d129      	bne.n	8008c22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bdc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bde:	2300      	movs	r3, #0
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	2319      	movs	r3, #25
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	4921      	ldr	r1, [pc, #132]	; (8008c84 <HAL_I2C_IsDeviceReady+0x254>)
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 fb12 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e036      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e02c      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2319      	movs	r3, #25
 8008c42:	2201      	movs	r2, #1
 8008c44:	490f      	ldr	r1, [pc, #60]	; (8008c84 <HAL_I2C_IsDeviceReady+0x254>)
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 faee 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e012      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	f4ff af32 	bcc.w	8008aca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008c7a:	2302      	movs	r3, #2
  }
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	00100002 	.word	0x00100002
 8008c88:	ffff0000 	.word	0xffff0000

08008c8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d006      	beq.n	8008cb6 <I2C_MasterRequestWrite+0x2a>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d003      	beq.n	8008cb6 <I2C_MasterRequestWrite+0x2a>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cb4:	d108      	bne.n	8008cc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e00b      	b.n	8008ce0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	2b12      	cmp	r3, #18
 8008cce:	d107      	bne.n	8008ce0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 fa9b 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00d      	beq.n	8008d14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d06:	d103      	bne.n	8008d10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e035      	b.n	8008d80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d1c:	d108      	bne.n	8008d30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d1e:	897b      	ldrh	r3, [r7, #10]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	461a      	mov	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d2c:	611a      	str	r2, [r3, #16]
 8008d2e:	e01b      	b.n	8008d68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008d30:	897b      	ldrh	r3, [r7, #10]
 8008d32:	11db      	asrs	r3, r3, #7
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	f003 0306 	and.w	r3, r3, #6
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f063 030f 	orn	r3, r3, #15
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	490e      	ldr	r1, [pc, #56]	; (8008d88 <I2C_MasterRequestWrite+0xfc>)
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fac1 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e010      	b.n	8008d80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008d5e:	897b      	ldrh	r3, [r7, #10]
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	4907      	ldr	r1, [pc, #28]	; (8008d8c <I2C_MasterRequestWrite+0x100>)
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fab1 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e000      	b.n	8008d80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	00010008 	.word	0x00010008
 8008d8c:	00010002 	.word	0x00010002

08008d90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af02      	add	r7, sp, #8
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008db4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d006      	beq.n	8008dca <I2C_MasterRequestRead+0x3a>
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d003      	beq.n	8008dca <I2C_MasterRequestRead+0x3a>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dc8:	d108      	bne.n	8008ddc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	e00b      	b.n	8008df4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	2b11      	cmp	r3, #17
 8008de2:	d107      	bne.n	8008df4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fa11 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00d      	beq.n	8008e28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1a:	d103      	bne.n	8008e24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e079      	b.n	8008f1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e30:	d108      	bne.n	8008e44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008e32:	897b      	ldrh	r3, [r7, #10]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	611a      	str	r2, [r3, #16]
 8008e42:	e05f      	b.n	8008f04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008e44:	897b      	ldrh	r3, [r7, #10]
 8008e46:	11db      	asrs	r3, r3, #7
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f003 0306 	and.w	r3, r3, #6
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	f063 030f 	orn	r3, r3, #15
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4930      	ldr	r1, [pc, #192]	; (8008f24 <I2C_MasterRequestRead+0x194>)
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fa37 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e054      	b.n	8008f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008e72:	897b      	ldrh	r3, [r7, #10]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	4929      	ldr	r1, [pc, #164]	; (8008f28 <I2C_MasterRequestRead+0x198>)
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fa27 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e044      	b.n	8008f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	613b      	str	r3, [r7, #16]
 8008ea6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eb6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 f9af 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00d      	beq.n	8008eec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ede:	d103      	bne.n	8008ee8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e017      	b.n	8008f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008eec:	897b      	ldrh	r3, [r7, #10]
 8008eee:	11db      	asrs	r3, r3, #7
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f003 0306 	and.w	r3, r3, #6
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f063 030e 	orn	r3, r3, #14
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	4907      	ldr	r1, [pc, #28]	; (8008f28 <I2C_MasterRequestRead+0x198>)
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 f9e3 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e000      	b.n	8008f1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	00010008 	.word	0x00010008
 8008f28:	00010002 	.word	0x00010002

08008f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	4608      	mov	r0, r1
 8008f36:	4611      	mov	r1, r2
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	817b      	strh	r3, [r7, #10]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	813b      	strh	r3, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f960 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00d      	beq.n	8008f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f7c:	d103      	bne.n	8008f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e05f      	b.n	800904a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f8a:	897b      	ldrh	r3, [r7, #10]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	461a      	mov	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	6a3a      	ldr	r2, [r7, #32]
 8008f9e:	492d      	ldr	r1, [pc, #180]	; (8009054 <I2C_RequestMemoryWrite+0x128>)
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 f998 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e04c      	b.n	800904a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc8:	6a39      	ldr	r1, [r7, #32]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fa02 	bl	80093d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00d      	beq.n	8008ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d107      	bne.n	8008fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e02b      	b.n	800904a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d105      	bne.n	8009004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ff8:	893b      	ldrh	r3, [r7, #8]
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	611a      	str	r2, [r3, #16]
 8009002:	e021      	b.n	8009048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009004:	893b      	ldrh	r3, [r7, #8]
 8009006:	0a1b      	lsrs	r3, r3, #8
 8009008:	b29b      	uxth	r3, r3
 800900a:	b2da      	uxtb	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009014:	6a39      	ldr	r1, [r7, #32]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 f9dc 	bl	80093d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00d      	beq.n	800903e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	2b04      	cmp	r3, #4
 8009028:	d107      	bne.n	800903a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e005      	b.n	800904a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800903e:	893b      	ldrh	r3, [r7, #8]
 8009040:	b2da      	uxtb	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	00010002 	.word	0x00010002

08009058 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	461a      	mov	r2, r3
 8009066:	4603      	mov	r3, r0
 8009068:	817b      	strh	r3, [r7, #10]
 800906a:	460b      	mov	r3, r1
 800906c:	813b      	strh	r3, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009080:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	2200      	movs	r2, #0
 800909a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f8c2 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00d      	beq.n	80090c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b8:	d103      	bne.n	80090c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e0aa      	b.n	800921c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090c6:	897b      	ldrh	r3, [r7, #10]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	6a3a      	ldr	r2, [r7, #32]
 80090da:	4952      	ldr	r1, [pc, #328]	; (8009224 <I2C_RequestMemoryRead+0x1cc>)
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 f8fa 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e097      	b.n	800921c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	617b      	str	r3, [r7, #20]
 8009100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009104:	6a39      	ldr	r1, [r7, #32]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 f964 	bl	80093d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00d      	beq.n	800912e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	2b04      	cmp	r3, #4
 8009118:	d107      	bne.n	800912a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e076      	b.n	800921c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d105      	bne.n	8009140 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009134:	893b      	ldrh	r3, [r7, #8]
 8009136:	b2da      	uxtb	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	611a      	str	r2, [r3, #16]
 800913e:	e021      	b.n	8009184 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009140:	893b      	ldrh	r3, [r7, #8]
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	b29b      	uxth	r3, r3
 8009146:	b2da      	uxtb	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800914e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009150:	6a39      	ldr	r1, [r7, #32]
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f93e 	bl	80093d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00d      	beq.n	800917a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009162:	2b04      	cmp	r3, #4
 8009164:	d107      	bne.n	8009176 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e050      	b.n	800921c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800917a:	893b      	ldrh	r3, [r7, #8]
 800917c:	b2da      	uxtb	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009186:	6a39      	ldr	r1, [r7, #32]
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 f923 	bl	80093d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00d      	beq.n	80091b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	2b04      	cmp	r3, #4
 800919a:	d107      	bne.n	80091ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e035      	b.n	800921c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f82b 	bl	8009228 <I2C_WaitOnFlagUntilTimeout>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00d      	beq.n	80091f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e6:	d103      	bne.n	80091f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e013      	b.n	800921c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80091f4:	897b      	ldrh	r3, [r7, #10]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f043 0301 	orr.w	r3, r3, #1
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	6a3a      	ldr	r2, [r7, #32]
 8009208:	4906      	ldr	r1, [pc, #24]	; (8009224 <I2C_RequestMemoryRead+0x1cc>)
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 f863 	bl	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	00010002 	.word	0x00010002

08009228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009238:	e025      	b.n	8009286 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009240:	d021      	beq.n	8009286 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009242:	f7fd f9bd 	bl	80065c0 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d302      	bcc.n	8009258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d116      	bne.n	8009286 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2220      	movs	r2, #32
 8009262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	f043 0220 	orr.w	r2, r3, #32
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e023      	b.n	80092ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	0c1b      	lsrs	r3, r3, #16
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	d10d      	bne.n	80092ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	43da      	mvns	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	4013      	ands	r3, r2
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bf0c      	ite	eq
 80092a2:	2301      	moveq	r3, #1
 80092a4:	2300      	movne	r3, #0
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	e00c      	b.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	43da      	mvns	r2, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4013      	ands	r3, r2
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bf0c      	ite	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	2300      	movne	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d0b6      	beq.n	800923a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	607a      	str	r2, [r7, #4]
 80092e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092e4:	e051      	b.n	800938a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092f4:	d123      	bne.n	800933e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009304:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800930e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2220      	movs	r2, #32
 800931a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	f043 0204 	orr.w	r2, r3, #4
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e046      	b.n	80093cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009344:	d021      	beq.n	800938a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009346:	f7fd f93b 	bl	80065c0 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	d302      	bcc.n	800935c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d116      	bne.n	800938a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2220      	movs	r2, #32
 8009366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	f043 0220 	orr.w	r2, r3, #32
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e020      	b.n	80093cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	0c1b      	lsrs	r3, r3, #16
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b01      	cmp	r3, #1
 8009392:	d10c      	bne.n	80093ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	43da      	mvns	r2, r3
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	4013      	ands	r3, r2
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	bf14      	ite	ne
 80093a6:	2301      	movne	r3, #1
 80093a8:	2300      	moveq	r3, #0
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	e00b      	b.n	80093c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	43da      	mvns	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4013      	ands	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bf14      	ite	ne
 80093c0:	2301      	movne	r3, #1
 80093c2:	2300      	moveq	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d18d      	bne.n	80092e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093e0:	e02d      	b.n	800943e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f8ce 	bl	8009584 <I2C_IsAcknowledgeFailed>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e02d      	b.n	800944e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f8:	d021      	beq.n	800943e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fa:	f7fd f8e1 	bl	80065c0 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	429a      	cmp	r2, r3
 8009408:	d302      	bcc.n	8009410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d116      	bne.n	800943e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2220      	movs	r2, #32
 800941a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942a:	f043 0220 	orr.w	r2, r3, #32
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e007      	b.n	800944e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009448:	2b80      	cmp	r3, #128	; 0x80
 800944a:	d1ca      	bne.n	80093e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009462:	e02d      	b.n	80094c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 f88d 	bl	8009584 <I2C_IsAcknowledgeFailed>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e02d      	b.n	80094d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d021      	beq.n	80094c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800947c:	f7fd f8a0 	bl	80065c0 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	d302      	bcc.n	8009492 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d116      	bne.n	80094c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2220      	movs	r2, #32
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	f043 0220 	orr.w	r2, r3, #32
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e007      	b.n	80094d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	f003 0304 	and.w	r3, r3, #4
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d1ca      	bne.n	8009464 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094e4:	e042      	b.n	800956c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	f003 0310 	and.w	r3, r3, #16
 80094f0:	2b10      	cmp	r3, #16
 80094f2:	d119      	bne.n	8009528 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0210 	mvn.w	r2, #16
 80094fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2220      	movs	r2, #32
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e029      	b.n	800957c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009528:	f7fd f84a 	bl	80065c0 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	429a      	cmp	r2, r3
 8009536:	d302      	bcc.n	800953e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d116      	bne.n	800956c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2220      	movs	r2, #32
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009558:	f043 0220 	orr.w	r2, r3, #32
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e007      	b.n	800957c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b40      	cmp	r3, #64	; 0x40
 8009578:	d1b5      	bne.n	80094e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800959a:	d11b      	bne.n	80095d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c0:	f043 0204 	orr.w	r2, r3, #4
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e034      	b.n	800965e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80095fc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f245 5255 	movw	r2, #21845	; 0x5555
 8009606:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6852      	ldr	r2, [r2, #4]
 8009610:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	6892      	ldr	r2, [r2, #8]
 800961a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800961c:	f7fc ffd0 	bl	80065c0 <HAL_GetTick>
 8009620:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009622:	e00f      	b.n	8009644 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009624:	f7fc ffcc 	bl	80065c0 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	2b31      	cmp	r3, #49	; 0x31
 8009630:	d908      	bls.n	8009644 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f003 0303 	and.w	r3, r3, #3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e00c      	b.n	800965e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f003 0303 	and.w	r3, r3, #3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e8      	bne.n	8009624 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800965a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009676:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
	...

08009688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e267      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d075      	beq.n	8009792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096a6:	4b88      	ldr	r3, [pc, #544]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 030c 	and.w	r3, r3, #12
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d00c      	beq.n	80096cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096b2:	4b85      	ldr	r3, [pc, #532]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096ba:	2b08      	cmp	r3, #8
 80096bc:	d112      	bne.n	80096e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096be:	4b82      	ldr	r3, [pc, #520]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ca:	d10b      	bne.n	80096e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096cc:	4b7e      	ldr	r3, [pc, #504]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d05b      	beq.n	8009790 <HAL_RCC_OscConfig+0x108>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d157      	bne.n	8009790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e242      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ec:	d106      	bne.n	80096fc <HAL_RCC_OscConfig+0x74>
 80096ee:	4b76      	ldr	r3, [pc, #472]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a75      	ldr	r2, [pc, #468]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80096f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e01d      	b.n	8009738 <HAL_RCC_OscConfig+0xb0>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009704:	d10c      	bne.n	8009720 <HAL_RCC_OscConfig+0x98>
 8009706:	4b70      	ldr	r3, [pc, #448]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a6f      	ldr	r2, [pc, #444]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 800970c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	4b6d      	ldr	r3, [pc, #436]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a6c      	ldr	r2, [pc, #432]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	e00b      	b.n	8009738 <HAL_RCC_OscConfig+0xb0>
 8009720:	4b69      	ldr	r3, [pc, #420]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a68      	ldr	r2, [pc, #416]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	4b66      	ldr	r3, [pc, #408]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a65      	ldr	r2, [pc, #404]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d013      	beq.n	8009768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009740:	f7fc ff3e 	bl	80065c0 <HAL_GetTick>
 8009744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009746:	e008      	b.n	800975a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009748:	f7fc ff3a 	bl	80065c0 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2b64      	cmp	r3, #100	; 0x64
 8009754:	d901      	bls.n	800975a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e207      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800975a:	4b5b      	ldr	r3, [pc, #364]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0f0      	beq.n	8009748 <HAL_RCC_OscConfig+0xc0>
 8009766:	e014      	b.n	8009792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009768:	f7fc ff2a 	bl	80065c0 <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009770:	f7fc ff26 	bl	80065c0 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b64      	cmp	r3, #100	; 0x64
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e1f3      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009782:	4b51      	ldr	r3, [pc, #324]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1f0      	bne.n	8009770 <HAL_RCC_OscConfig+0xe8>
 800978e:	e000      	b.n	8009792 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d063      	beq.n	8009866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800979e:	4b4a      	ldr	r3, [pc, #296]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f003 030c 	and.w	r3, r3, #12
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00b      	beq.n	80097c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097aa:	4b47      	ldr	r3, [pc, #284]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d11c      	bne.n	80097f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097b6:	4b44      	ldr	r3, [pc, #272]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d116      	bne.n	80097f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097c2:	4b41      	ldr	r3, [pc, #260]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <HAL_RCC_OscConfig+0x152>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d001      	beq.n	80097da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e1c7      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097da:	4b3b      	ldr	r3, [pc, #236]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	4937      	ldr	r1, [pc, #220]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097ee:	e03a      	b.n	8009866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d020      	beq.n	800983a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097f8:	4b34      	ldr	r3, [pc, #208]	; (80098cc <HAL_RCC_OscConfig+0x244>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fe:	f7fc fedf 	bl	80065c0 <HAL_GetTick>
 8009802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009804:	e008      	b.n	8009818 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009806:	f7fc fedb 	bl	80065c0 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e1a8      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009818:	4b2b      	ldr	r3, [pc, #172]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0f0      	beq.n	8009806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009824:	4b28      	ldr	r3, [pc, #160]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	4925      	ldr	r1, [pc, #148]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 8009834:	4313      	orrs	r3, r2
 8009836:	600b      	str	r3, [r1, #0]
 8009838:	e015      	b.n	8009866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800983a:	4b24      	ldr	r3, [pc, #144]	; (80098cc <HAL_RCC_OscConfig+0x244>)
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009840:	f7fc febe 	bl	80065c0 <HAL_GetTick>
 8009844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009848:	f7fc feba 	bl	80065c0 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e187      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800985a:	4b1b      	ldr	r3, [pc, #108]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1f0      	bne.n	8009848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d036      	beq.n	80098e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d016      	beq.n	80098a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800987a:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <HAL_RCC_OscConfig+0x248>)
 800987c:	2201      	movs	r2, #1
 800987e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009880:	f7fc fe9e 	bl	80065c0 <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009886:	e008      	b.n	800989a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009888:	f7fc fe9a 	bl	80065c0 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e167      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800989a:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <HAL_RCC_OscConfig+0x240>)
 800989c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0f0      	beq.n	8009888 <HAL_RCC_OscConfig+0x200>
 80098a6:	e01b      	b.n	80098e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098a8:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <HAL_RCC_OscConfig+0x248>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098ae:	f7fc fe87 	bl	80065c0 <HAL_GetTick>
 80098b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098b4:	e00e      	b.n	80098d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098b6:	f7fc fe83 	bl	80065c0 <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d907      	bls.n	80098d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e150      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
 80098c8:	40023800 	.word	0x40023800
 80098cc:	42470000 	.word	0x42470000
 80098d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098d4:	4b88      	ldr	r3, [pc, #544]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 80098d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1ea      	bne.n	80098b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0304 	and.w	r3, r3, #4
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8097 	beq.w	8009a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098ee:	2300      	movs	r3, #0
 80098f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098f2:	4b81      	ldr	r3, [pc, #516]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10f      	bne.n	800991e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	4b7d      	ldr	r3, [pc, #500]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	4a7c      	ldr	r2, [pc, #496]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800990c:	6413      	str	r3, [r2, #64]	; 0x40
 800990e:	4b7a      	ldr	r3, [pc, #488]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009916:	60bb      	str	r3, [r7, #8]
 8009918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800991a:	2301      	movs	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800991e:	4b77      	ldr	r3, [pc, #476]	; (8009afc <HAL_RCC_OscConfig+0x474>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009926:	2b00      	cmp	r3, #0
 8009928:	d118      	bne.n	800995c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800992a:	4b74      	ldr	r3, [pc, #464]	; (8009afc <HAL_RCC_OscConfig+0x474>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a73      	ldr	r2, [pc, #460]	; (8009afc <HAL_RCC_OscConfig+0x474>)
 8009930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009936:	f7fc fe43 	bl	80065c0 <HAL_GetTick>
 800993a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800993c:	e008      	b.n	8009950 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800993e:	f7fc fe3f 	bl	80065c0 <HAL_GetTick>
 8009942:	4602      	mov	r2, r0
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d901      	bls.n	8009950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e10c      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009950:	4b6a      	ldr	r3, [pc, #424]	; (8009afc <HAL_RCC_OscConfig+0x474>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0f0      	beq.n	800993e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d106      	bne.n	8009972 <HAL_RCC_OscConfig+0x2ea>
 8009964:	4b64      	ldr	r3, [pc, #400]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009968:	4a63      	ldr	r2, [pc, #396]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 800996a:	f043 0301 	orr.w	r3, r3, #1
 800996e:	6713      	str	r3, [r2, #112]	; 0x70
 8009970:	e01c      	b.n	80099ac <HAL_RCC_OscConfig+0x324>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	2b05      	cmp	r3, #5
 8009978:	d10c      	bne.n	8009994 <HAL_RCC_OscConfig+0x30c>
 800997a:	4b5f      	ldr	r3, [pc, #380]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 800997c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997e:	4a5e      	ldr	r2, [pc, #376]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009980:	f043 0304 	orr.w	r3, r3, #4
 8009984:	6713      	str	r3, [r2, #112]	; 0x70
 8009986:	4b5c      	ldr	r3, [pc, #368]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	4a5b      	ldr	r2, [pc, #364]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 800998c:	f043 0301 	orr.w	r3, r3, #1
 8009990:	6713      	str	r3, [r2, #112]	; 0x70
 8009992:	e00b      	b.n	80099ac <HAL_RCC_OscConfig+0x324>
 8009994:	4b58      	ldr	r3, [pc, #352]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009998:	4a57      	ldr	r2, [pc, #348]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 800999a:	f023 0301 	bic.w	r3, r3, #1
 800999e:	6713      	str	r3, [r2, #112]	; 0x70
 80099a0:	4b55      	ldr	r3, [pc, #340]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 80099a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a4:	4a54      	ldr	r2, [pc, #336]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 80099a6:	f023 0304 	bic.w	r3, r3, #4
 80099aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d015      	beq.n	80099e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099b4:	f7fc fe04 	bl	80065c0 <HAL_GetTick>
 80099b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099ba:	e00a      	b.n	80099d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099bc:	f7fc fe00 	bl	80065c0 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d901      	bls.n	80099d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e0cb      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099d2:	4b49      	ldr	r3, [pc, #292]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 80099d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0ee      	beq.n	80099bc <HAL_RCC_OscConfig+0x334>
 80099de:	e014      	b.n	8009a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099e0:	f7fc fdee 	bl	80065c0 <HAL_GetTick>
 80099e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099e6:	e00a      	b.n	80099fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099e8:	f7fc fdea 	bl	80065c0 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d901      	bls.n	80099fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e0b5      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099fe:	4b3e      	ldr	r3, [pc, #248]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1ee      	bne.n	80099e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d105      	bne.n	8009a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a10:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	4a38      	ldr	r2, [pc, #224]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 80a1 	beq.w	8009b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a26:	4b34      	ldr	r3, [pc, #208]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f003 030c 	and.w	r3, r3, #12
 8009a2e:	2b08      	cmp	r3, #8
 8009a30:	d05c      	beq.n	8009aec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d141      	bne.n	8009abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a3a:	4b31      	ldr	r3, [pc, #196]	; (8009b00 <HAL_RCC_OscConfig+0x478>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a40:	f7fc fdbe 	bl	80065c0 <HAL_GetTick>
 8009a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a46:	e008      	b.n	8009a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a48:	f7fc fdba 	bl	80065c0 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d901      	bls.n	8009a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e087      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a5a:	4b27      	ldr	r3, [pc, #156]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1f0      	bne.n	8009a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69da      	ldr	r2, [r3, #28]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	431a      	orrs	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	019b      	lsls	r3, r3, #6
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	085b      	lsrs	r3, r3, #1
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	041b      	lsls	r3, r3, #16
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	061b      	lsls	r3, r3, #24
 8009a8a:	491b      	ldr	r1, [pc, #108]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a90:	4b1b      	ldr	r3, [pc, #108]	; (8009b00 <HAL_RCC_OscConfig+0x478>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a96:	f7fc fd93 	bl	80065c0 <HAL_GetTick>
 8009a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a9e:	f7fc fd8f 	bl	80065c0 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d901      	bls.n	8009ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e05c      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ab0:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0f0      	beq.n	8009a9e <HAL_RCC_OscConfig+0x416>
 8009abc:	e054      	b.n	8009b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009abe:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <HAL_RCC_OscConfig+0x478>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ac4:	f7fc fd7c 	bl	80065c0 <HAL_GetTick>
 8009ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009acc:	f7fc fd78 	bl	80065c0 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e045      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <HAL_RCC_OscConfig+0x470>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f0      	bne.n	8009acc <HAL_RCC_OscConfig+0x444>
 8009aea:	e03d      	b.n	8009b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d107      	bne.n	8009b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e038      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
 8009af8:	40023800 	.word	0x40023800
 8009afc:	40007000 	.word	0x40007000
 8009b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b04:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <HAL_RCC_OscConfig+0x4ec>)
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d028      	beq.n	8009b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d121      	bne.n	8009b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d11a      	bne.n	8009b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009b34:	4013      	ands	r3, r2
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d111      	bne.n	8009b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	085b      	lsrs	r3, r3, #1
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d107      	bne.n	8009b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d001      	beq.n	8009b68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e000      	b.n	8009b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	40023800 	.word	0x40023800

08009b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e0cc      	b.n	8009d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b8c:	4b68      	ldr	r3, [pc, #416]	; (8009d30 <HAL_RCC_ClockConfig+0x1b8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0307 	and.w	r3, r3, #7
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d90c      	bls.n	8009bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b9a:	4b65      	ldr	r3, [pc, #404]	; (8009d30 <HAL_RCC_ClockConfig+0x1b8>)
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ba2:	4b63      	ldr	r3, [pc, #396]	; (8009d30 <HAL_RCC_ClockConfig+0x1b8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d001      	beq.n	8009bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e0b8      	b.n	8009d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d020      	beq.n	8009c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d005      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bcc:	4b59      	ldr	r3, [pc, #356]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	4a58      	ldr	r2, [pc, #352]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d005      	beq.n	8009bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009be4:	4b53      	ldr	r3, [pc, #332]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	4a52      	ldr	r2, [pc, #328]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009bea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bf0:	4b50      	ldr	r3, [pc, #320]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	494d      	ldr	r1, [pc, #308]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d044      	beq.n	8009c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d107      	bne.n	8009c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c16:	4b47      	ldr	r3, [pc, #284]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d119      	bne.n	8009c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e07f      	b.n	8009d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d003      	beq.n	8009c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d107      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c36:	4b3f      	ldr	r3, [pc, #252]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d109      	bne.n	8009c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e06f      	b.n	8009d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c46:	4b3b      	ldr	r3, [pc, #236]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e067      	b.n	8009d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c56:	4b37      	ldr	r3, [pc, #220]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f023 0203 	bic.w	r2, r3, #3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	4934      	ldr	r1, [pc, #208]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c68:	f7fc fcaa 	bl	80065c0 <HAL_GetTick>
 8009c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c6e:	e00a      	b.n	8009c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c70:	f7fc fca6 	bl	80065c0 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e04f      	b.n	8009d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c86:	4b2b      	ldr	r3, [pc, #172]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f003 020c 	and.w	r2, r3, #12
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d1eb      	bne.n	8009c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c98:	4b25      	ldr	r3, [pc, #148]	; (8009d30 <HAL_RCC_ClockConfig+0x1b8>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0307 	and.w	r3, r3, #7
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d20c      	bcs.n	8009cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ca6:	4b22      	ldr	r3, [pc, #136]	; (8009d30 <HAL_RCC_ClockConfig+0x1b8>)
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cae:	4b20      	ldr	r3, [pc, #128]	; (8009d30 <HAL_RCC_ClockConfig+0x1b8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0307 	and.w	r3, r3, #7
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d001      	beq.n	8009cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e032      	b.n	8009d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0304 	and.w	r3, r3, #4
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d008      	beq.n	8009cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ccc:	4b19      	ldr	r3, [pc, #100]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4916      	ldr	r1, [pc, #88]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0308 	and.w	r3, r3, #8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d009      	beq.n	8009cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	490e      	ldr	r1, [pc, #56]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cfe:	f000 f821 	bl	8009d44 <HAL_RCC_GetSysClockFreq>
 8009d02:	4602      	mov	r2, r0
 8009d04:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <HAL_RCC_ClockConfig+0x1bc>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	091b      	lsrs	r3, r3, #4
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	490a      	ldr	r1, [pc, #40]	; (8009d38 <HAL_RCC_ClockConfig+0x1c0>)
 8009d10:	5ccb      	ldrb	r3, [r1, r3]
 8009d12:	fa22 f303 	lsr.w	r3, r2, r3
 8009d16:	4a09      	ldr	r2, [pc, #36]	; (8009d3c <HAL_RCC_ClockConfig+0x1c4>)
 8009d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009d1a:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <HAL_RCC_ClockConfig+0x1c8>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fc fc0a 	bl	8006538 <HAL_InitTick>

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	40023c00 	.word	0x40023c00
 8009d34:	40023800 	.word	0x40023800
 8009d38:	08021918 	.word	0x08021918
 8009d3c:	20000070 	.word	0x20000070
 8009d40:	20000074 	.word	0x20000074

08009d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d48:	b094      	sub	sp, #80	; 0x50
 8009d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d50:	2300      	movs	r3, #0
 8009d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d54:	2300      	movs	r3, #0
 8009d56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d5c:	4b79      	ldr	r3, [pc, #484]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 030c 	and.w	r3, r3, #12
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d00d      	beq.n	8009d84 <HAL_RCC_GetSysClockFreq+0x40>
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	f200 80e1 	bhi.w	8009f30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <HAL_RCC_GetSysClockFreq+0x34>
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d003      	beq.n	8009d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8009d76:	e0db      	b.n	8009f30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d78:	4b73      	ldr	r3, [pc, #460]	; (8009f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009d7c:	e0db      	b.n	8009f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d7e:	4b73      	ldr	r3, [pc, #460]	; (8009f4c <HAL_RCC_GetSysClockFreq+0x208>)
 8009d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d82:	e0d8      	b.n	8009f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d84:	4b6f      	ldr	r3, [pc, #444]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d8e:	4b6d      	ldr	r3, [pc, #436]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d063      	beq.n	8009e62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d9a:	4b6a      	ldr	r3, [pc, #424]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	099b      	lsrs	r3, r3, #6
 8009da0:	2200      	movs	r2, #0
 8009da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009da4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dac:	633b      	str	r3, [r7, #48]	; 0x30
 8009dae:	2300      	movs	r3, #0
 8009db0:	637b      	str	r3, [r7, #52]	; 0x34
 8009db2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009db6:	4622      	mov	r2, r4
 8009db8:	462b      	mov	r3, r5
 8009dba:	f04f 0000 	mov.w	r0, #0
 8009dbe:	f04f 0100 	mov.w	r1, #0
 8009dc2:	0159      	lsls	r1, r3, #5
 8009dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dc8:	0150      	lsls	r0, r2, #5
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4621      	mov	r1, r4
 8009dd0:	1a51      	subs	r1, r2, r1
 8009dd2:	6139      	str	r1, [r7, #16]
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009de8:	4659      	mov	r1, fp
 8009dea:	018b      	lsls	r3, r1, #6
 8009dec:	4651      	mov	r1, sl
 8009dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009df2:	4651      	mov	r1, sl
 8009df4:	018a      	lsls	r2, r1, #6
 8009df6:	4651      	mov	r1, sl
 8009df8:	ebb2 0801 	subs.w	r8, r2, r1
 8009dfc:	4659      	mov	r1, fp
 8009dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e16:	4690      	mov	r8, r2
 8009e18:	4699      	mov	r9, r3
 8009e1a:	4623      	mov	r3, r4
 8009e1c:	eb18 0303 	adds.w	r3, r8, r3
 8009e20:	60bb      	str	r3, [r7, #8]
 8009e22:	462b      	mov	r3, r5
 8009e24:	eb49 0303 	adc.w	r3, r9, r3
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	f04f 0200 	mov.w	r2, #0
 8009e2e:	f04f 0300 	mov.w	r3, #0
 8009e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009e36:	4629      	mov	r1, r5
 8009e38:	024b      	lsls	r3, r1, #9
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e40:	4621      	mov	r1, r4
 8009e42:	024a      	lsls	r2, r1, #9
 8009e44:	4610      	mov	r0, r2
 8009e46:	4619      	mov	r1, r3
 8009e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e54:	f7f6 ff18 	bl	8000c88 <__aeabi_uldivmod>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e60:	e058      	b.n	8009f14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e62:	4b38      	ldr	r3, [pc, #224]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	099b      	lsrs	r3, r3, #6
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e72:	623b      	str	r3, [r7, #32]
 8009e74:	2300      	movs	r3, #0
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
 8009e78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	464b      	mov	r3, r9
 8009e80:	f04f 0000 	mov.w	r0, #0
 8009e84:	f04f 0100 	mov.w	r1, #0
 8009e88:	0159      	lsls	r1, r3, #5
 8009e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e8e:	0150      	lsls	r0, r2, #5
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4641      	mov	r1, r8
 8009e96:	ebb2 0a01 	subs.w	sl, r2, r1
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ea0:	f04f 0200 	mov.w	r2, #0
 8009ea4:	f04f 0300 	mov.w	r3, #0
 8009ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8009eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	00eb      	lsls	r3, r5, #3
 8009ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eca:	00e2      	lsls	r2, r4, #3
 8009ecc:	4614      	mov	r4, r2
 8009ece:	461d      	mov	r5, r3
 8009ed0:	4643      	mov	r3, r8
 8009ed2:	18e3      	adds	r3, r4, r3
 8009ed4:	603b      	str	r3, [r7, #0]
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	eb45 0303 	adc.w	r3, r5, r3
 8009edc:	607b      	str	r3, [r7, #4]
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009eea:	4629      	mov	r1, r5
 8009eec:	028b      	lsls	r3, r1, #10
 8009eee:	4621      	mov	r1, r4
 8009ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	028a      	lsls	r2, r1, #10
 8009ef8:	4610      	mov	r0, r2
 8009efa:	4619      	mov	r1, r3
 8009efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009efe:	2200      	movs	r2, #0
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	61fa      	str	r2, [r7, #28]
 8009f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f08:	f7f6 febe 	bl	8000c88 <__aeabi_uldivmod>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4613      	mov	r3, r2
 8009f12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f14:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	0c1b      	lsrs	r3, r3, #16
 8009f1a:	f003 0303 	and.w	r3, r3, #3
 8009f1e:	3301      	adds	r3, #1
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f2e:	e002      	b.n	8009f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f30:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3750      	adds	r7, #80	; 0x50
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f42:	bf00      	nop
 8009f44:	40023800 	.word	0x40023800
 8009f48:	00f42400 	.word	0x00f42400
 8009f4c:	007a1200 	.word	0x007a1200

08009f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f54:	4b03      	ldr	r3, [pc, #12]	; (8009f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f56:	681b      	ldr	r3, [r3, #0]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000070 	.word	0x20000070

08009f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f6c:	f7ff fff0 	bl	8009f50 <HAL_RCC_GetHCLKFreq>
 8009f70:	4602      	mov	r2, r0
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	0a9b      	lsrs	r3, r3, #10
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	4903      	ldr	r1, [pc, #12]	; (8009f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f7e:	5ccb      	ldrb	r3, [r1, r3]
 8009f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	40023800 	.word	0x40023800
 8009f8c:	08021928 	.word	0x08021928

08009f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f94:	f7ff ffdc 	bl	8009f50 <HAL_RCC_GetHCLKFreq>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	0b5b      	lsrs	r3, r3, #13
 8009fa0:	f003 0307 	and.w	r3, r3, #7
 8009fa4:	4903      	ldr	r1, [pc, #12]	; (8009fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009fa6:	5ccb      	ldrb	r3, [r1, r3]
 8009fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	40023800 	.word	0x40023800
 8009fb4:	08021928 	.word	0x08021928

08009fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d105      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d035      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009fe0:	4b62      	ldr	r3, [pc, #392]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009fe6:	f7fc faeb 	bl	80065c0 <HAL_GetTick>
 8009fea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009fec:	e008      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009fee:	f7fc fae7 	bl	80065c0 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d901      	bls.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e0b0      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a000:	4b5b      	ldr	r3, [pc, #364]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1f0      	bne.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	019a      	lsls	r2, r3, #6
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	071b      	lsls	r3, r3, #28
 800a018:	4955      	ldr	r1, [pc, #340]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a020:	4b52      	ldr	r3, [pc, #328]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a022:	2201      	movs	r2, #1
 800a024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a026:	f7fc facb 	bl	80065c0 <HAL_GetTick>
 800a02a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a02c:	e008      	b.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a02e:	f7fc fac7 	bl	80065c0 <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d901      	bls.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e090      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a040:	4b4b      	ldr	r3, [pc, #300]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0f0      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0302 	and.w	r3, r3, #2
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 8083 	beq.w	800a160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	4b44      	ldr	r3, [pc, #272]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	4a43      	ldr	r2, [pc, #268]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a068:	6413      	str	r3, [r2, #64]	; 0x40
 800a06a:	4b41      	ldr	r3, [pc, #260]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a076:	4b3f      	ldr	r3, [pc, #252]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a3e      	ldr	r2, [pc, #248]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a07c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a080:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a082:	f7fc fa9d 	bl	80065c0 <HAL_GetTick>
 800a086:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a088:	e008      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a08a:	f7fc fa99 	bl	80065c0 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d901      	bls.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e062      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a09c:	4b35      	ldr	r3, [pc, #212]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0f0      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a0a8:	4b31      	ldr	r3, [pc, #196]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d02f      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d028      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a0c6:	4b2a      	ldr	r3, [pc, #168]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a0d0:	4b29      	ldr	r3, [pc, #164]	; (800a178 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a0d6:	4b28      	ldr	r3, [pc, #160]	; (800a178 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a0dc:	4a24      	ldr	r2, [pc, #144]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a0e2:	4b23      	ldr	r3, [pc, #140]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d114      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a0ee:	f7fc fa67 	bl	80065c0 <HAL_GetTick>
 800a0f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0f4:	e00a      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0f6:	f7fc fa63 	bl	80065c0 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	f241 3288 	movw	r2, #5000	; 0x1388
 800a104:	4293      	cmp	r3, r2
 800a106:	d901      	bls.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e02a      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a10c:	4b18      	ldr	r3, [pc, #96]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0ee      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a124:	d10d      	bne.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a126:	4b12      	ldr	r3, [pc, #72]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13a:	490d      	ldr	r1, [pc, #52]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	608b      	str	r3, [r1, #8]
 800a140:	e005      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a142:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	4a0a      	ldr	r2, [pc, #40]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a148:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a14c:	6093      	str	r3, [r2, #8]
 800a14e:	4b08      	ldr	r3, [pc, #32]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a150:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a15a:	4905      	ldr	r1, [pc, #20]	; (800a170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	42470068 	.word	0x42470068
 800a170:	40023800 	.word	0x40023800
 800a174:	40007000 	.word	0x40007000
 800a178:	42470e40 	.word	0x42470e40

0800a17c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e083      	b.n	800a296 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	7f5b      	ldrb	r3, [r3, #29]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d105      	bne.n	800a1a4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7fb facc 	bl	800573c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	22ca      	movs	r2, #202	; 0xca
 800a1b0:	625a      	str	r2, [r3, #36]	; 0x24
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2253      	movs	r2, #83	; 0x53
 800a1b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 faa8 	bl	800a710 <RTC_EnterInitMode>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d008      	beq.n	800a1d8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	22ff      	movs	r2, #255	; 0xff
 800a1cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2204      	movs	r2, #4
 800a1d2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e05e      	b.n	800a296 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6899      	ldr	r1, [r3, #8]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	68d2      	ldr	r2, [r2, #12]
 800a212:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6919      	ldr	r1, [r3, #16]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	041a      	lsls	r2, r3, #16
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a236:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10e      	bne.n	800a264 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa3a 	bl	800a6c0 <HAL_RTC_WaitForSynchro>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	22ff      	movs	r2, #255	; 0xff
 800a258:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2204      	movs	r2, #4
 800a25e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e018      	b.n	800a296 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a272:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	699a      	ldr	r2, [r3, #24]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	22ff      	movs	r2, #255	; 0xff
 800a28c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a294:	2300      	movs	r3, #0
  }
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a29e:	b590      	push	{r4, r7, lr}
 800a2a0:	b087      	sub	sp, #28
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	7f1b      	ldrb	r3, [r3, #28]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d101      	bne.n	800a2ba <HAL_RTC_SetTime+0x1c>
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	e0aa      	b.n	800a410 <HAL_RTC_SetTime+0x172>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d126      	bne.n	800a31a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d102      	bne.n	800a2e0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fa3f 	bl	800a768 <RTC_ByteToBcd2>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	785b      	ldrb	r3, [r3, #1]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fa38 	bl	800a768 <RTC_ByteToBcd2>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a2fc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	789b      	ldrb	r3, [r3, #2]
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fa30 	bl	800a768 <RTC_ByteToBcd2>
 800a308:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a30a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	78db      	ldrb	r3, [r3, #3]
 800a312:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a314:	4313      	orrs	r3, r2
 800a316:	617b      	str	r3, [r7, #20]
 800a318:	e018      	b.n	800a34c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a324:	2b00      	cmp	r3, #0
 800a326:	d102      	bne.n	800a32e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2200      	movs	r2, #0
 800a32c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a33a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a340:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	78db      	ldrb	r3, [r3, #3]
 800a346:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a348:	4313      	orrs	r3, r2
 800a34a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	22ca      	movs	r2, #202	; 0xca
 800a352:	625a      	str	r2, [r3, #36]	; 0x24
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2253      	movs	r2, #83	; 0x53
 800a35a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 f9d7 	bl	800a710 <RTC_EnterInitMode>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00b      	beq.n	800a380 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	22ff      	movs	r2, #255	; 0xff
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2204      	movs	r2, #4
 800a374:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e047      	b.n	800a410 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a38a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a38e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a39e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6899      	ldr	r1, [r3, #8]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	68da      	ldr	r2, [r3, #12]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d111      	bne.n	800a3fa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f972 	bl	800a6c0 <HAL_RTC_WaitForSynchro>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00b      	beq.n	800a3fa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	22ff      	movs	r2, #255	; 0xff
 800a3e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e00a      	b.n	800a410 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	22ff      	movs	r2, #255	; 0xff
 800a400:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a40e:	2300      	movs	r3, #0
  }
}
 800a410:	4618      	mov	r0, r3
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	bd90      	pop	{r4, r7, pc}

0800a418 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a44a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a44e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	b2db      	uxtb	r3, r3
 800a456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	0a1b      	lsrs	r3, r3, #8
 800a464:	b2db      	uxtb	r3, r3
 800a466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	0c1b      	lsrs	r3, r3, #16
 800a482:	b2db      	uxtb	r3, r3
 800a484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d11a      	bne.n	800a4ca <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 f983 	bl	800a7a4 <RTC_Bcd2ToByte>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f97a 	bl	800a7a4 <RTC_Bcd2ToByte>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	789b      	ldrb	r3, [r3, #2]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 f971 	bl	800a7a4 <RTC_Bcd2ToByte>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	7f1b      	ldrb	r3, [r3, #28]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d101      	bne.n	800a4f0 <HAL_RTC_SetDate+0x1c>
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	e094      	b.n	800a61a <HAL_RTC_SetDate+0x146>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10e      	bne.n	800a520 <HAL_RTC_SetDate+0x4c>
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	785b      	ldrb	r3, [r3, #1]
 800a506:	f003 0310 	and.w	r3, r3, #16
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d008      	beq.n	800a520 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	f023 0310 	bic.w	r3, r3, #16
 800a516:	b2db      	uxtb	r3, r3
 800a518:	330a      	adds	r3, #10
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d11c      	bne.n	800a560 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	78db      	ldrb	r3, [r3, #3]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f91c 	bl	800a768 <RTC_ByteToBcd2>
 800a530:	4603      	mov	r3, r0
 800a532:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	785b      	ldrb	r3, [r3, #1]
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 f915 	bl	800a768 <RTC_ByteToBcd2>
 800a53e:	4603      	mov	r3, r0
 800a540:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a542:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	789b      	ldrb	r3, [r3, #2]
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 f90d 	bl	800a768 <RTC_ByteToBcd2>
 800a54e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a550:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a55a:	4313      	orrs	r3, r2
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	e00e      	b.n	800a57e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	78db      	ldrb	r3, [r3, #3]
 800a564:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a56c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a572:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	22ca      	movs	r2, #202	; 0xca
 800a584:	625a      	str	r2, [r3, #36]	; 0x24
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2253      	movs	r2, #83	; 0x53
 800a58c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 f8be 	bl	800a710 <RTC_EnterInitMode>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00b      	beq.n	800a5b2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	22ff      	movs	r2, #255	; 0xff
 800a5a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2204      	movs	r2, #4
 800a5a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e033      	b.n	800a61a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d111      	bne.n	800a604 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f000 f86d 	bl	800a6c0 <HAL_RTC_WaitForSynchro>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00b      	beq.n	800a604 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	22ff      	movs	r2, #255	; 0xff
 800a5f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2204      	movs	r2, #4
 800a5f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e00a      	b.n	800a61a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	22ff      	movs	r2, #255	; 0xff
 800a60a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2201      	movs	r2, #1
 800a610:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a618:	2300      	movs	r3, #0
  }
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd90      	pop	{r4, r7, pc}

0800a622 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b086      	sub	sp, #24
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a63c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a640:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	0c1b      	lsrs	r3, r3, #16
 800a646:	b2da      	uxtb	r2, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	0a1b      	lsrs	r3, r3, #8
 800a650:	b2db      	uxtb	r3, r3
 800a652:	f003 031f 	and.w	r3, r3, #31
 800a656:	b2da      	uxtb	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a664:	b2da      	uxtb	r2, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	0b5b      	lsrs	r3, r3, #13
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	b2da      	uxtb	r2, r3
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d11a      	bne.n	800a6b6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	78db      	ldrb	r3, [r3, #3]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f88d 	bl	800a7a4 <RTC_Bcd2ToByte>
 800a68a:	4603      	mov	r3, r0
 800a68c:	461a      	mov	r2, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	4618      	mov	r0, r3
 800a698:	f000 f884 	bl	800a7a4 <RTC_Bcd2ToByte>
 800a69c:	4603      	mov	r3, r0
 800a69e:	461a      	mov	r2, r3
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	789b      	ldrb	r3, [r3, #2]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 f87b 	bl	800a7a4 <RTC_Bcd2ToByte>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6dc:	f7fb ff70 	bl	80065c0 <HAL_GetTick>
 800a6e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a6e2:	e009      	b.n	800a6f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6e4:	f7fb ff6c 	bl	80065c0 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6f2:	d901      	bls.n	800a6f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e007      	b.n	800a708 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0ee      	beq.n	800a6e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d119      	bne.n	800a75e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f04f 32ff 	mov.w	r2, #4294967295
 800a732:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a734:	f7fb ff44 	bl	80065c0 <HAL_GetTick>
 800a738:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a73a:	e009      	b.n	800a750 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a73c:	f7fb ff40 	bl	80065c0 <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a74a:	d901      	bls.n	800a750 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e007      	b.n	800a760 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0ee      	beq.n	800a73c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a772:	2300      	movs	r3, #0
 800a774:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800a776:	e005      	b.n	800a784 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	3b0a      	subs	r3, #10
 800a782:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	2b09      	cmp	r3, #9
 800a788:	d8f6      	bhi.n	800a778 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	011b      	lsls	r3, r3, #4
 800a790:	b2da      	uxtb	r2, r3
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	4313      	orrs	r3, r2
 800a796:	b2db      	uxtb	r3, r3
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	091b      	lsrs	r3, r3, #4
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	f003 030f 	and.w	r3, r3, #15
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	b2db      	uxtb	r3, r3
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e07b      	b.n	800a8ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d108      	bne.n	800a80c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a802:	d009      	beq.n	800a818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	61da      	str	r2, [r3, #28]
 800a80a:	e005      	b.n	800a818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d106      	bne.n	800a838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7fa ffac 	bl	8005790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a84e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a860:	431a      	orrs	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a86a:	431a      	orrs	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	431a      	orrs	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	431a      	orrs	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a892:	431a      	orrs	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a89c:	ea42 0103 	orr.w	r1, r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	0c1b      	lsrs	r3, r3, #16
 800a8b6:	f003 0104 	and.w	r1, r3, #4
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	f003 0210 	and.w	r2, r3, #16
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	69da      	ldr	r2, [r3, #28]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b088      	sub	sp, #32
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_SPI_Transmit+0x22>
 800a910:	2302      	movs	r3, #2
 800a912:	e126      	b.n	800ab62 <HAL_SPI_Transmit+0x270>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a91c:	f7fb fe50 	bl	80065c0 <HAL_GetTick>
 800a920:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a922:	88fb      	ldrh	r3, [r7, #6]
 800a924:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d002      	beq.n	800a938 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a932:	2302      	movs	r3, #2
 800a934:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a936:	e10b      	b.n	800ab50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <HAL_SPI_Transmit+0x52>
 800a93e:	88fb      	ldrh	r3, [r7, #6]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d102      	bne.n	800a94a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a948:	e102      	b.n	800ab50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2203      	movs	r2, #3
 800a94e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	88fa      	ldrh	r2, [r7, #6]
 800a962:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	88fa      	ldrh	r2, [r7, #6]
 800a968:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a990:	d10f      	bne.n	800a9b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9bc:	2b40      	cmp	r3, #64	; 0x40
 800a9be:	d007      	beq.n	800a9d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9d8:	d14b      	bne.n	800aa72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <HAL_SPI_Transmit+0xf6>
 800a9e2:	8afb      	ldrh	r3, [r7, #22]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d13e      	bne.n	800aa66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ec:	881a      	ldrh	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f8:	1c9a      	adds	r2, r3, #2
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	3b01      	subs	r3, #1
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa0c:	e02b      	b.n	800aa66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d112      	bne.n	800aa42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa20:	881a      	ldrh	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2c:	1c9a      	adds	r2, r3, #2
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	86da      	strh	r2, [r3, #54]	; 0x36
 800aa40:	e011      	b.n	800aa66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa42:	f7fb fdbd 	bl	80065c0 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d803      	bhi.n	800aa5a <HAL_SPI_Transmit+0x168>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa58:	d102      	bne.n	800aa60 <HAL_SPI_Transmit+0x16e>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aa64:	e074      	b.n	800ab50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1ce      	bne.n	800aa0e <HAL_SPI_Transmit+0x11c>
 800aa70:	e04c      	b.n	800ab0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d002      	beq.n	800aa80 <HAL_SPI_Transmit+0x18e>
 800aa7a:	8afb      	ldrh	r3, [r7, #22]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d140      	bne.n	800ab02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	330c      	adds	r3, #12
 800aa8a:	7812      	ldrb	r2, [r2, #0]
 800aa8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aaa6:	e02c      	b.n	800ab02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d113      	bne.n	800aade <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	330c      	adds	r3, #12
 800aac0:	7812      	ldrb	r2, [r2, #0]
 800aac2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	3b01      	subs	r3, #1
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	86da      	strh	r2, [r3, #54]	; 0x36
 800aadc:	e011      	b.n	800ab02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aade:	f7fb fd6f 	bl	80065c0 <HAL_GetTick>
 800aae2:	4602      	mov	r2, r0
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d803      	bhi.n	800aaf6 <HAL_SPI_Transmit+0x204>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf4:	d102      	bne.n	800aafc <HAL_SPI_Transmit+0x20a>
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab00:	e026      	b.n	800ab50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1cd      	bne.n	800aaa8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 fbcb 	bl	800b2ac <SPI_EndRxTxTransaction>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10a      	bne.n	800ab40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	613b      	str	r3, [r7, #16]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	613b      	str	r3, [r7, #16]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	613b      	str	r3, [r7, #16]
 800ab3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	77fb      	strb	r3, [r7, #31]
 800ab4c:	e000      	b.n	800ab50 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ab4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab60:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3720      	adds	r7, #32
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b088      	sub	sp, #32
 800ab6e:	af02      	add	r7, sp, #8
 800ab70:	60f8      	str	r0, [r7, #12]
 800ab72:	60b9      	str	r1, [r7, #8]
 800ab74:	603b      	str	r3, [r7, #0]
 800ab76:	4613      	mov	r3, r2
 800ab78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab86:	d112      	bne.n	800abae <HAL_SPI_Receive+0x44>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10e      	bne.n	800abae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2204      	movs	r2, #4
 800ab94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ab98:	88fa      	ldrh	r2, [r7, #6]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	68b9      	ldr	r1, [r7, #8]
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 f8f1 	bl	800ad8c <HAL_SPI_TransmitReceive>
 800abaa:	4603      	mov	r3, r0
 800abac:	e0ea      	b.n	800ad84 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d101      	bne.n	800abbc <HAL_SPI_Receive+0x52>
 800abb8:	2302      	movs	r3, #2
 800abba:	e0e3      	b.n	800ad84 <HAL_SPI_Receive+0x21a>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abc4:	f7fb fcfc 	bl	80065c0 <HAL_GetTick>
 800abc8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d002      	beq.n	800abdc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800abd6:	2302      	movs	r3, #2
 800abd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800abda:	e0ca      	b.n	800ad72 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d002      	beq.n	800abe8 <HAL_SPI_Receive+0x7e>
 800abe2:	88fb      	ldrh	r3, [r7, #6]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800abec:	e0c1      	b.n	800ad72 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2204      	movs	r2, #4
 800abf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	88fa      	ldrh	r2, [r7, #6]
 800ac06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	88fa      	ldrh	r2, [r7, #6]
 800ac0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac34:	d10f      	bne.n	800ac56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b40      	cmp	r3, #64	; 0x40
 800ac62:	d007      	beq.n	800ac74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d162      	bne.n	800ad42 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ac7c:	e02e      	b.n	800acdc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d115      	bne.n	800acb8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f103 020c 	add.w	r2, r3, #12
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac98:	7812      	ldrb	r2, [r2, #0]
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800acb6:	e011      	b.n	800acdc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acb8:	f7fb fc82 	bl	80065c0 <HAL_GetTick>
 800acbc:	4602      	mov	r2, r0
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d803      	bhi.n	800acd0 <HAL_SPI_Receive+0x166>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acce:	d102      	bne.n	800acd6 <HAL_SPI_Receive+0x16c>
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800acda:	e04a      	b.n	800ad72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1cb      	bne.n	800ac7e <HAL_SPI_Receive+0x114>
 800ace6:	e031      	b.n	800ad4c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d113      	bne.n	800ad1e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68da      	ldr	r2, [r3, #12]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad00:	b292      	uxth	r2, r2
 800ad02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	1c9a      	adds	r2, r3, #2
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	3b01      	subs	r3, #1
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad1c:	e011      	b.n	800ad42 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad1e:	f7fb fc4f 	bl	80065c0 <HAL_GetTick>
 800ad22:	4602      	mov	r2, r0
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d803      	bhi.n	800ad36 <HAL_SPI_Receive+0x1cc>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad34:	d102      	bne.n	800ad3c <HAL_SPI_Receive+0x1d2>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ad40:	e017      	b.n	800ad72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1cd      	bne.n	800ace8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 fa45 	bl	800b1e0 <SPI_EndRxTransaction>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d002      	beq.n	800ad62 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2220      	movs	r2, #32
 800ad60:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	75fb      	strb	r3, [r7, #23]
 800ad6e:	e000      	b.n	800ad72 <HAL_SPI_Receive+0x208>
  }

error :
 800ad70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08c      	sub	sp, #48	; 0x30
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d101      	bne.n	800adb2 <HAL_SPI_TransmitReceive+0x26>
 800adae:	2302      	movs	r3, #2
 800adb0:	e18a      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x33c>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adba:	f7fb fc01 	bl	80065c0 <HAL_GetTick>
 800adbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800adc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800add0:	887b      	ldrh	r3, [r7, #2]
 800add2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800add4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800add8:	2b01      	cmp	r3, #1
 800adda:	d00f      	beq.n	800adfc <HAL_SPI_TransmitReceive+0x70>
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ade2:	d107      	bne.n	800adf4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d103      	bne.n	800adf4 <HAL_SPI_TransmitReceive+0x68>
 800adec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d003      	beq.n	800adfc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800adf4:	2302      	movs	r3, #2
 800adf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800adfa:	e15b      	b.n	800b0b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d005      	beq.n	800ae0e <HAL_SPI_TransmitReceive+0x82>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <HAL_SPI_TransmitReceive+0x82>
 800ae08:	887b      	ldrh	r3, [r7, #2]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d103      	bne.n	800ae16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ae14:	e14e      	b.n	800b0b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d003      	beq.n	800ae2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2205      	movs	r2, #5
 800ae26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	887a      	ldrh	r2, [r7, #2]
 800ae3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	887a      	ldrh	r2, [r7, #2]
 800ae40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	887a      	ldrh	r2, [r7, #2]
 800ae4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	887a      	ldrh	r2, [r7, #2]
 800ae52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6a:	2b40      	cmp	r3, #64	; 0x40
 800ae6c:	d007      	beq.n	800ae7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae86:	d178      	bne.n	800af7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <HAL_SPI_TransmitReceive+0x10a>
 800ae90:	8b7b      	ldrh	r3, [r7, #26]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d166      	bne.n	800af64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9a:	881a      	ldrh	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea6:	1c9a      	adds	r2, r3, #2
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aeba:	e053      	b.n	800af64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f003 0302 	and.w	r3, r3, #2
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d11b      	bne.n	800af02 <HAL_SPI_TransmitReceive+0x176>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d016      	beq.n	800af02 <HAL_SPI_TransmitReceive+0x176>
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d113      	bne.n	800af02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aede:	881a      	ldrh	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	1c9a      	adds	r2, r3, #2
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	3b01      	subs	r3, #1
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d119      	bne.n	800af44 <HAL_SPI_TransmitReceive+0x1b8>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d014      	beq.n	800af44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	b292      	uxth	r2, r2
 800af26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2c:	1c9a      	adds	r2, r3, #2
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af36:	b29b      	uxth	r3, r3
 800af38:	3b01      	subs	r3, #1
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af40:	2301      	movs	r3, #1
 800af42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800af44:	f7fb fb3c 	bl	80065c0 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af50:	429a      	cmp	r2, r3
 800af52:	d807      	bhi.n	800af64 <HAL_SPI_TransmitReceive+0x1d8>
 800af54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5a:	d003      	beq.n	800af64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800af62:	e0a7      	b.n	800b0b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af68:	b29b      	uxth	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1a6      	bne.n	800aebc <HAL_SPI_TransmitReceive+0x130>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af72:	b29b      	uxth	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1a1      	bne.n	800aebc <HAL_SPI_TransmitReceive+0x130>
 800af78:	e07c      	b.n	800b074 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <HAL_SPI_TransmitReceive+0x1fc>
 800af82:	8b7b      	ldrh	r3, [r7, #26]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d16b      	bne.n	800b060 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	330c      	adds	r3, #12
 800af92:	7812      	ldrb	r2, [r2, #0]
 800af94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9a:	1c5a      	adds	r2, r3, #1
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	3b01      	subs	r3, #1
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afae:	e057      	b.n	800b060 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d11c      	bne.n	800aff8 <HAL_SPI_TransmitReceive+0x26c>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d017      	beq.n	800aff8 <HAL_SPI_TransmitReceive+0x26c>
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d114      	bne.n	800aff8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	330c      	adds	r3, #12
 800afd8:	7812      	ldrb	r2, [r2, #0]
 800afda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b01      	subs	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aff4:	2300      	movs	r3, #0
 800aff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b01      	cmp	r3, #1
 800b004:	d119      	bne.n	800b03a <HAL_SPI_TransmitReceive+0x2ae>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d014      	beq.n	800b03a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68da      	ldr	r2, [r3, #12]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	b2d2      	uxtb	r2, r2
 800b01c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	3b01      	subs	r3, #1
 800b030:	b29a      	uxth	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b036:	2301      	movs	r3, #1
 800b038:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b03a:	f7fb fac1 	bl	80065c0 <HAL_GetTick>
 800b03e:	4602      	mov	r2, r0
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b046:	429a      	cmp	r2, r3
 800b048:	d803      	bhi.n	800b052 <HAL_SPI_TransmitReceive+0x2c6>
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b050:	d102      	bne.n	800b058 <HAL_SPI_TransmitReceive+0x2cc>
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b05e:	e029      	b.n	800b0b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b064:	b29b      	uxth	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1a2      	bne.n	800afb0 <HAL_SPI_TransmitReceive+0x224>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b06e:	b29b      	uxth	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	d19d      	bne.n	800afb0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b076:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 f917 	bl	800b2ac <SPI_EndRxTxTransaction>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d006      	beq.n	800b092 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2220      	movs	r2, #32
 800b08e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b090:	e010      	b.n	800b0b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10b      	bne.n	800b0b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	617b      	str	r3, [r7, #20]
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	e000      	b.n	800b0b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b0b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b0c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3730      	adds	r7, #48	; 0x30
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	603b      	str	r3, [r7, #0]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b0e0:	f7fb fa6e 	bl	80065c0 <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	1a9b      	subs	r3, r3, r2
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b0f0:	f7fb fa66 	bl	80065c0 <HAL_GetTick>
 800b0f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b0f6:	4b39      	ldr	r3, [pc, #228]	; (800b1dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	015b      	lsls	r3, r3, #5
 800b0fc:	0d1b      	lsrs	r3, r3, #20
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	fb02 f303 	mul.w	r3, r2, r3
 800b104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b106:	e054      	b.n	800b1b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10e:	d050      	beq.n	800b1b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b110:	f7fb fa56 	bl	80065c0 <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d902      	bls.n	800b126 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d13d      	bne.n	800b1a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b13e:	d111      	bne.n	800b164 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b148:	d004      	beq.n	800b154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b152:	d107      	bne.n	800b164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b16c:	d10f      	bne.n	800b18e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b18c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e017      	b.n	800b1d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	bf0c      	ite	eq
 800b1c2:	2301      	moveq	r3, #1
 800b1c4:	2300      	movne	r3, #0
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d19b      	bne.n	800b108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3720      	adds	r7, #32
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000070 	.word	0x20000070

0800b1e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af02      	add	r7, sp, #8
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1f4:	d111      	bne.n	800b21a <SPI_EndRxTransaction+0x3a>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1fe:	d004      	beq.n	800b20a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b208:	d107      	bne.n	800b21a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b218:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b222:	d12a      	bne.n	800b27a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b22c:	d012      	beq.n	800b254 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2200      	movs	r2, #0
 800b236:	2180      	movs	r1, #128	; 0x80
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff ff49 	bl	800b0d0 <SPI_WaitFlagStateUntilTimeout>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d02d      	beq.n	800b2a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b248:	f043 0220 	orr.w	r2, r3, #32
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e026      	b.n	800b2a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2200      	movs	r2, #0
 800b25c:	2101      	movs	r1, #1
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f7ff ff36 	bl	800b0d0 <SPI_WaitFlagStateUntilTimeout>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d01a      	beq.n	800b2a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f043 0220 	orr.w	r2, r3, #32
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e013      	b.n	800b2a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2200      	movs	r2, #0
 800b282:	2101      	movs	r1, #1
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f7ff ff23 	bl	800b0d0 <SPI_WaitFlagStateUntilTimeout>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d007      	beq.n	800b2a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b294:	f043 0220 	orr.w	r2, r3, #32
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e000      	b.n	800b2a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
	...

0800b2ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b2b8:	4b1b      	ldr	r3, [pc, #108]	; (800b328 <SPI_EndRxTxTransaction+0x7c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a1b      	ldr	r2, [pc, #108]	; (800b32c <SPI_EndRxTxTransaction+0x80>)
 800b2be:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c2:	0d5b      	lsrs	r3, r3, #21
 800b2c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b2c8:	fb02 f303 	mul.w	r3, r2, r3
 800b2cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2d6:	d112      	bne.n	800b2fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2180      	movs	r1, #128	; 0x80
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f7ff fef4 	bl	800b0d0 <SPI_WaitFlagStateUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d016      	beq.n	800b31c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f2:	f043 0220 	orr.w	r2, r3, #32
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e00f      	b.n	800b31e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	3b01      	subs	r3, #1
 800b308:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b314:	2b80      	cmp	r3, #128	; 0x80
 800b316:	d0f2      	beq.n	800b2fe <SPI_EndRxTxTransaction+0x52>
 800b318:	e000      	b.n	800b31c <SPI_EndRxTxTransaction+0x70>
        break;
 800b31a:	bf00      	nop
  }

  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	20000070 	.word	0x20000070
 800b32c:	165e9f81 	.word	0x165e9f81

0800b330 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e034      	b.n	800b3b0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7fa fbce 	bl	8005afc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3308      	adds	r3, #8
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f001 fbba 	bl	800cae4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6818      	ldr	r0, [r3, #0]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	461a      	mov	r2, r3
 800b37a:	68b9      	ldr	r1, [r7, #8]
 800b37c:	f001 fc04 	bl	800cb88 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6858      	ldr	r0, [r3, #4]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	f001 fc39 	bl	800cc04 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	6892      	ldr	r2, [r2, #8]
 800b39a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	6892      	ldr	r2, [r2, #8]
 800b3a6:	f041 0101 	orr.w	r1, r1, #1
 800b3aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e041      	b.n	800b44e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d106      	bne.n	800b3e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7fa faaa 	bl	8005938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f000 f9d0 	bl	800b79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d001      	beq.n	800b470 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e046      	b.n	800b4fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a23      	ldr	r2, [pc, #140]	; (800b50c <HAL_TIM_Base_Start+0xb4>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d022      	beq.n	800b4c8 <HAL_TIM_Base_Start+0x70>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b48a:	d01d      	beq.n	800b4c8 <HAL_TIM_Base_Start+0x70>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a1f      	ldr	r2, [pc, #124]	; (800b510 <HAL_TIM_Base_Start+0xb8>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d018      	beq.n	800b4c8 <HAL_TIM_Base_Start+0x70>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a1e      	ldr	r2, [pc, #120]	; (800b514 <HAL_TIM_Base_Start+0xbc>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d013      	beq.n	800b4c8 <HAL_TIM_Base_Start+0x70>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a1c      	ldr	r2, [pc, #112]	; (800b518 <HAL_TIM_Base_Start+0xc0>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d00e      	beq.n	800b4c8 <HAL_TIM_Base_Start+0x70>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a1b      	ldr	r2, [pc, #108]	; (800b51c <HAL_TIM_Base_Start+0xc4>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d009      	beq.n	800b4c8 <HAL_TIM_Base_Start+0x70>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a19      	ldr	r2, [pc, #100]	; (800b520 <HAL_TIM_Base_Start+0xc8>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d004      	beq.n	800b4c8 <HAL_TIM_Base_Start+0x70>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a18      	ldr	r2, [pc, #96]	; (800b524 <HAL_TIM_Base_Start+0xcc>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d111      	bne.n	800b4ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b06      	cmp	r3, #6
 800b4d8:	d010      	beq.n	800b4fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f042 0201 	orr.w	r2, r2, #1
 800b4e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ea:	e007      	b.n	800b4fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f042 0201 	orr.w	r2, r2, #1
 800b4fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	40010000 	.word	0x40010000
 800b510:	40000400 	.word	0x40000400
 800b514:	40000800 	.word	0x40000800
 800b518:	40000c00 	.word	0x40000c00
 800b51c:	40010400 	.word	0x40010400
 800b520:	40014000 	.word	0x40014000
 800b524:	40001800 	.word	0x40001800

0800b528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	f003 0302 	and.w	r3, r3, #2
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d122      	bne.n	800b584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d11b      	bne.n	800b584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f06f 0202 	mvn.w	r2, #2
 800b554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f8f8 	bl	800b760 <HAL_TIM_IC_CaptureCallback>
 800b570:	e005      	b.n	800b57e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f8ea 	bl	800b74c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f8fb 	bl	800b774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	f003 0304 	and.w	r3, r3, #4
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d122      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	d11b      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f06f 0204 	mvn.w	r2, #4
 800b5a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2202      	movs	r2, #2
 800b5ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f8ce 	bl	800b760 <HAL_TIM_IC_CaptureCallback>
 800b5c4:	e005      	b.n	800b5d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f8c0 	bl	800b74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f8d1 	bl	800b774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	f003 0308 	and.w	r3, r3, #8
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d122      	bne.n	800b62c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	f003 0308 	and.w	r3, r3, #8
 800b5f0:	2b08      	cmp	r3, #8
 800b5f2:	d11b      	bne.n	800b62c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f06f 0208 	mvn.w	r2, #8
 800b5fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2204      	movs	r2, #4
 800b602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	f003 0303 	and.w	r3, r3, #3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f8a4 	bl	800b760 <HAL_TIM_IC_CaptureCallback>
 800b618:	e005      	b.n	800b626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f896 	bl	800b74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f8a7 	bl	800b774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	f003 0310 	and.w	r3, r3, #16
 800b636:	2b10      	cmp	r3, #16
 800b638:	d122      	bne.n	800b680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f003 0310 	and.w	r3, r3, #16
 800b644:	2b10      	cmp	r3, #16
 800b646:	d11b      	bne.n	800b680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f06f 0210 	mvn.w	r2, #16
 800b650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2208      	movs	r2, #8
 800b656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f87a 	bl	800b760 <HAL_TIM_IC_CaptureCallback>
 800b66c:	e005      	b.n	800b67a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f86c 	bl	800b74c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f87d 	bl	800b774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	f003 0301 	and.w	r3, r3, #1
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d10e      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d107      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f06f 0201 	mvn.w	r2, #1
 800b6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f846 	bl	800b738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b6:	2b80      	cmp	r3, #128	; 0x80
 800b6b8:	d10e      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c4:	2b80      	cmp	r3, #128	; 0x80
 800b6c6:	d107      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f988 	bl	800b9e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e2:	2b40      	cmp	r3, #64	; 0x40
 800b6e4:	d10e      	bne.n	800b704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f0:	2b40      	cmp	r3, #64	; 0x40
 800b6f2:	d107      	bne.n	800b704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f842 	bl	800b788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	f003 0320 	and.w	r3, r3, #32
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d10e      	bne.n	800b730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f003 0320 	and.w	r3, r3, #32
 800b71c:	2b20      	cmp	r3, #32
 800b71e:	d107      	bne.n	800b730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f06f 0220 	mvn.w	r2, #32
 800b728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f952 	bl	800b9d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a40      	ldr	r2, [pc, #256]	; (800b8b0 <TIM_Base_SetConfig+0x114>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d013      	beq.n	800b7dc <TIM_Base_SetConfig+0x40>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ba:	d00f      	beq.n	800b7dc <TIM_Base_SetConfig+0x40>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a3d      	ldr	r2, [pc, #244]	; (800b8b4 <TIM_Base_SetConfig+0x118>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d00b      	beq.n	800b7dc <TIM_Base_SetConfig+0x40>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a3c      	ldr	r2, [pc, #240]	; (800b8b8 <TIM_Base_SetConfig+0x11c>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d007      	beq.n	800b7dc <TIM_Base_SetConfig+0x40>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a3b      	ldr	r2, [pc, #236]	; (800b8bc <TIM_Base_SetConfig+0x120>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d003      	beq.n	800b7dc <TIM_Base_SetConfig+0x40>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a3a      	ldr	r2, [pc, #232]	; (800b8c0 <TIM_Base_SetConfig+0x124>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d108      	bne.n	800b7ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a2f      	ldr	r2, [pc, #188]	; (800b8b0 <TIM_Base_SetConfig+0x114>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d02b      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7fc:	d027      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a2c      	ldr	r2, [pc, #176]	; (800b8b4 <TIM_Base_SetConfig+0x118>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d023      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a2b      	ldr	r2, [pc, #172]	; (800b8b8 <TIM_Base_SetConfig+0x11c>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d01f      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a2a      	ldr	r2, [pc, #168]	; (800b8bc <TIM_Base_SetConfig+0x120>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d01b      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a29      	ldr	r2, [pc, #164]	; (800b8c0 <TIM_Base_SetConfig+0x124>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d017      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a28      	ldr	r2, [pc, #160]	; (800b8c4 <TIM_Base_SetConfig+0x128>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d013      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a27      	ldr	r2, [pc, #156]	; (800b8c8 <TIM_Base_SetConfig+0x12c>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d00f      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a26      	ldr	r2, [pc, #152]	; (800b8cc <TIM_Base_SetConfig+0x130>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d00b      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a25      	ldr	r2, [pc, #148]	; (800b8d0 <TIM_Base_SetConfig+0x134>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d007      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a24      	ldr	r2, [pc, #144]	; (800b8d4 <TIM_Base_SetConfig+0x138>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d003      	beq.n	800b84e <TIM_Base_SetConfig+0xb2>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a23      	ldr	r2, [pc, #140]	; (800b8d8 <TIM_Base_SetConfig+0x13c>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d108      	bne.n	800b860 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a0a      	ldr	r2, [pc, #40]	; (800b8b0 <TIM_Base_SetConfig+0x114>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d003      	beq.n	800b894 <TIM_Base_SetConfig+0xf8>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a0c      	ldr	r2, [pc, #48]	; (800b8c0 <TIM_Base_SetConfig+0x124>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d103      	bne.n	800b89c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	691a      	ldr	r2, [r3, #16]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	615a      	str	r2, [r3, #20]
}
 800b8a2:	bf00      	nop
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	40010000 	.word	0x40010000
 800b8b4:	40000400 	.word	0x40000400
 800b8b8:	40000800 	.word	0x40000800
 800b8bc:	40000c00 	.word	0x40000c00
 800b8c0:	40010400 	.word	0x40010400
 800b8c4:	40014000 	.word	0x40014000
 800b8c8:	40014400 	.word	0x40014400
 800b8cc:	40014800 	.word	0x40014800
 800b8d0:	40001800 	.word	0x40001800
 800b8d4:	40001c00 	.word	0x40001c00
 800b8d8:	40002000 	.word	0x40002000

0800b8dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d101      	bne.n	800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	e05a      	b.n	800b9aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2202      	movs	r2, #2
 800b900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b91a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	4313      	orrs	r3, r2
 800b924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a21      	ldr	r2, [pc, #132]	; (800b9b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d022      	beq.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b940:	d01d      	beq.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a1d      	ldr	r2, [pc, #116]	; (800b9bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d018      	beq.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a1b      	ldr	r2, [pc, #108]	; (800b9c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d013      	beq.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a1a      	ldr	r2, [pc, #104]	; (800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d00e      	beq.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a18      	ldr	r2, [pc, #96]	; (800b9c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d009      	beq.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a17      	ldr	r2, [pc, #92]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d004      	beq.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a15      	ldr	r2, [pc, #84]	; (800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d10c      	bne.n	800b998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	40010000 	.word	0x40010000
 800b9bc:	40000400 	.word	0x40000400
 800b9c0:	40000800 	.word	0x40000800
 800b9c4:	40000c00 	.word	0x40000c00
 800b9c8:	40010400 	.word	0x40010400
 800b9cc:	40014000 	.word	0x40014000
 800b9d0:	40001800 	.word	0x40001800

0800b9d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e03f      	b.n	800ba8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d106      	bne.n	800ba28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7f9 ffce 	bl	80059c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2224      	movs	r2, #36	; 0x24
 800ba2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fddb 	bl	800c5fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	691a      	ldr	r2, [r3, #16]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	695a      	ldr	r2, [r3, #20]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68da      	ldr	r2, [r3, #12]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b08a      	sub	sp, #40	; 0x28
 800ba9a:	af02      	add	r7, sp, #8
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	60b9      	str	r1, [r7, #8]
 800baa0:	603b      	str	r3, [r7, #0]
 800baa2:	4613      	mov	r3, r2
 800baa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b20      	cmp	r3, #32
 800bab4:	d17c      	bne.n	800bbb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <HAL_UART_Transmit+0x2c>
 800babc:	88fb      	ldrh	r3, [r7, #6]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e075      	b.n	800bbb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d101      	bne.n	800bad4 <HAL_UART_Transmit+0x3e>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e06e      	b.n	800bbb2 <HAL_UART_Transmit+0x11c>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2221      	movs	r2, #33	; 0x21
 800bae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800baea:	f7fa fd69 	bl	80065c0 <HAL_GetTick>
 800baee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	88fa      	ldrh	r2, [r7, #6]
 800baf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb04:	d108      	bne.n	800bb18 <HAL_UART_Transmit+0x82>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d104      	bne.n	800bb18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	61bb      	str	r3, [r7, #24]
 800bb16:	e003      	b.n	800bb20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bb28:	e02a      	b.n	800bb80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	2200      	movs	r2, #0
 800bb32:	2180      	movs	r1, #128	; 0x80
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 fb1f 	bl	800c178 <UART_WaitOnFlagUntilTimeout>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e036      	b.n	800bbb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10b      	bne.n	800bb62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	3302      	adds	r3, #2
 800bb5e:	61bb      	str	r3, [r7, #24]
 800bb60:	e007      	b.n	800bb72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	781a      	ldrb	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1cf      	bne.n	800bb2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2200      	movs	r2, #0
 800bb92:	2140      	movs	r1, #64	; 0x40
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 faef 	bl	800c178 <UART_WaitOnFlagUntilTimeout>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e006      	b.n	800bbb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2220      	movs	r2, #32
 800bba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	e000      	b.n	800bbb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bbb0:	2302      	movs	r3, #2
  }
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b084      	sub	sp, #16
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	d11d      	bne.n	800bc10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <HAL_UART_Receive_IT+0x26>
 800bbda:	88fb      	ldrh	r3, [r7, #6]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e016      	b.n	800bc12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <HAL_UART_Receive_IT+0x38>
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e00f      	b.n	800bc12 <HAL_UART_Receive_IT+0x58>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bc00:	88fb      	ldrh	r3, [r7, #6]
 800bc02:	461a      	mov	r2, r3
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 fb24 	bl	800c254 <UART_Start_Receive_IT>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	e000      	b.n	800bc12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bc10:	2302      	movs	r3, #2
  }
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b0ba      	sub	sp, #232	; 0xe8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc42:	2300      	movs	r3, #0
 800bc44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc52:	f003 030f 	and.w	r3, r3, #15
 800bc56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10f      	bne.n	800bc82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc66:	f003 0320 	and.w	r3, r3, #32
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d009      	beq.n	800bc82 <HAL_UART_IRQHandler+0x66>
 800bc6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d003      	beq.n	800bc82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fc03 	bl	800c486 <UART_Receive_IT>
      return;
 800bc80:	e256      	b.n	800c130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f000 80de 	beq.w	800be48 <HAL_UART_IRQHandler+0x22c>
 800bc8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 80d1 	beq.w	800be48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcaa:	f003 0301 	and.w	r3, r3, #1
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00b      	beq.n	800bcca <HAL_UART_IRQHandler+0xae>
 800bcb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d005      	beq.n	800bcca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc2:	f043 0201 	orr.w	r2, r3, #1
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcce:	f003 0304 	and.w	r3, r3, #4
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00b      	beq.n	800bcee <HAL_UART_IRQHandler+0xd2>
 800bcd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce6:	f043 0202 	orr.w	r2, r3, #2
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf2:	f003 0302 	and.w	r3, r3, #2
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00b      	beq.n	800bd12 <HAL_UART_IRQHandler+0xf6>
 800bcfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0a:	f043 0204 	orr.w	r2, r3, #4
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd16:	f003 0308 	and.w	r3, r3, #8
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d011      	beq.n	800bd42 <HAL_UART_IRQHandler+0x126>
 800bd1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd22:	f003 0320 	and.w	r3, r3, #32
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d105      	bne.n	800bd36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3a:	f043 0208 	orr.w	r2, r3, #8
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f000 81ed 	beq.w	800c126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd50:	f003 0320 	and.w	r3, r3, #32
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d008      	beq.n	800bd6a <HAL_UART_IRQHandler+0x14e>
 800bd58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd5c:	f003 0320 	and.w	r3, r3, #32
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fb8e 	bl	800c486 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd74:	2b40      	cmp	r3, #64	; 0x40
 800bd76:	bf0c      	ite	eq
 800bd78:	2301      	moveq	r3, #1
 800bd7a:	2300      	movne	r3, #0
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	f003 0308 	and.w	r3, r3, #8
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d103      	bne.n	800bd96 <HAL_UART_IRQHandler+0x17a>
 800bd8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d04f      	beq.n	800be36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa96 	bl	800c2c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda6:	2b40      	cmp	r3, #64	; 0x40
 800bda8:	d141      	bne.n	800be2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3314      	adds	r3, #20
 800bdb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bdb8:	e853 3f00 	ldrex	r3, [r3]
 800bdbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	3314      	adds	r3, #20
 800bdd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bde2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1d9      	bne.n	800bdaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d013      	beq.n	800be26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be02:	4a7d      	ldr	r2, [pc, #500]	; (800bff8 <HAL_UART_IRQHandler+0x3dc>)
 800be04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fb f902 	bl	8007014 <HAL_DMA_Abort_IT>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d016      	beq.n	800be44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be24:	e00e      	b.n	800be44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f990 	bl	800c14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be2c:	e00a      	b.n	800be44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f98c 	bl	800c14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be34:	e006      	b.n	800be44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f988 	bl	800c14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800be42:	e170      	b.n	800c126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be44:	bf00      	nop
    return;
 800be46:	e16e      	b.n	800c126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	f040 814a 	bne.w	800c0e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be56:	f003 0310 	and.w	r3, r3, #16
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 8143 	beq.w	800c0e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 813c 	beq.w	800c0e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be6e:	2300      	movs	r3, #0
 800be70:	60bb      	str	r3, [r7, #8]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	60bb      	str	r3, [r7, #8]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	60bb      	str	r3, [r7, #8]
 800be82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8e:	2b40      	cmp	r3, #64	; 0x40
 800be90:	f040 80b4 	bne.w	800bffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f000 8140 	beq.w	800c12a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800beae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800beb2:	429a      	cmp	r2, r3
 800beb4:	f080 8139 	bcs.w	800c12a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec4:	69db      	ldr	r3, [r3, #28]
 800bec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beca:	f000 8088 	beq.w	800bfde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	330c      	adds	r3, #12
 800bed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800beec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	330c      	adds	r3, #12
 800bef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800befa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800befe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf0a:	e841 2300 	strex	r3, r2, [r1]
 800bf0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1d9      	bne.n	800bece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3314      	adds	r3, #20
 800bf20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf24:	e853 3f00 	ldrex	r3, [r3]
 800bf28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf2c:	f023 0301 	bic.w	r3, r3, #1
 800bf30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3314      	adds	r3, #20
 800bf3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf4a:	e841 2300 	strex	r3, r2, [r1]
 800bf4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e1      	bne.n	800bf1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3314      	adds	r3, #20
 800bf5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3314      	adds	r3, #20
 800bf76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf82:	e841 2300 	strex	r3, r2, [r1]
 800bf86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1e3      	bne.n	800bf56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2220      	movs	r2, #32
 800bf92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa6:	e853 3f00 	ldrex	r3, [r3]
 800bfaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfae:	f023 0310 	bic.w	r3, r3, #16
 800bfb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	330c      	adds	r3, #12
 800bfbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bfc0:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfc8:	e841 2300 	strex	r3, r2, [r1]
 800bfcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e3      	bne.n	800bf9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fa ffab 	bl	8006f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f8b6 	bl	800c160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bff4:	e099      	b.n	800c12a <HAL_UART_IRQHandler+0x50e>
 800bff6:	bf00      	nop
 800bff8:	0800c38f 	.word	0x0800c38f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c004:	b29b      	uxth	r3, r3
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c010:	b29b      	uxth	r3, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 808b 	beq.w	800c12e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 8086 	beq.w	800c12e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	330c      	adds	r3, #12
 800c028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	e853 3f00 	ldrex	r3, [r3]
 800c030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	330c      	adds	r3, #12
 800c042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c046:	647a      	str	r2, [r7, #68]	; 0x44
 800c048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c04c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e3      	bne.n	800c022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3314      	adds	r3, #20
 800c060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	623b      	str	r3, [r7, #32]
   return(result);
 800c06a:	6a3b      	ldr	r3, [r7, #32]
 800c06c:	f023 0301 	bic.w	r3, r3, #1
 800c070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3314      	adds	r3, #20
 800c07a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c07e:	633a      	str	r2, [r7, #48]	; 0x30
 800c080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e3      	bne.n	800c05a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2220      	movs	r2, #32
 800c096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	330c      	adds	r3, #12
 800c0a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	e853 3f00 	ldrex	r3, [r3]
 800c0ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f023 0310 	bic.w	r3, r3, #16
 800c0b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	330c      	adds	r3, #12
 800c0c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c0c4:	61fa      	str	r2, [r7, #28]
 800c0c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c8:	69b9      	ldr	r1, [r7, #24]
 800c0ca:	69fa      	ldr	r2, [r7, #28]
 800c0cc:	e841 2300 	strex	r3, r2, [r1]
 800c0d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1e3      	bne.n	800c0a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f83e 	bl	800c160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0e4:	e023      	b.n	800c12e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d009      	beq.n	800c106 <HAL_UART_IRQHandler+0x4ea>
 800c0f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d003      	beq.n	800c106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f959 	bl	800c3b6 <UART_Transmit_IT>
    return;
 800c104:	e014      	b.n	800c130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00e      	beq.n	800c130 <HAL_UART_IRQHandler+0x514>
 800c112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d008      	beq.n	800c130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f999 	bl	800c456 <UART_EndTransmit_IT>
    return;
 800c124:	e004      	b.n	800c130 <HAL_UART_IRQHandler+0x514>
    return;
 800c126:	bf00      	nop
 800c128:	e002      	b.n	800c130 <HAL_UART_IRQHandler+0x514>
      return;
 800c12a:	bf00      	nop
 800c12c:	e000      	b.n	800c130 <HAL_UART_IRQHandler+0x514>
      return;
 800c12e:	bf00      	nop
  }
}
 800c130:	37e8      	adds	r7, #232	; 0xe8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop

0800c138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b090      	sub	sp, #64	; 0x40
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	4613      	mov	r3, r2
 800c186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c188:	e050      	b.n	800c22c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c190:	d04c      	beq.n	800c22c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c194:	2b00      	cmp	r3, #0
 800c196:	d007      	beq.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c198:	f7fa fa12 	bl	80065c0 <HAL_GetTick>
 800c19c:	4602      	mov	r2, r0
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d241      	bcs.n	800c22c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	330c      	adds	r3, #12
 800c1ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	e853 3f00 	ldrex	r3, [r3]
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	330c      	adds	r3, #12
 800c1c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1c8:	637a      	str	r2, [r7, #52]	; 0x34
 800c1ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1d0:	e841 2300 	strex	r3, r2, [r1]
 800c1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1e5      	bne.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	e853 3f00 	ldrex	r3, [r3]
 800c1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3314      	adds	r3, #20
 800c1fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1fc:	623a      	str	r2, [r7, #32]
 800c1fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c200:	69f9      	ldr	r1, [r7, #28]
 800c202:	6a3a      	ldr	r2, [r7, #32]
 800c204:	e841 2300 	strex	r3, r2, [r1]
 800c208:	61bb      	str	r3, [r7, #24]
   return(result);
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e5      	bne.n	800c1dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2220      	movs	r2, #32
 800c214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2220      	movs	r2, #32
 800c21c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e00f      	b.n	800c24c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	4013      	ands	r3, r2
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	429a      	cmp	r2, r3
 800c23a:	bf0c      	ite	eq
 800c23c:	2301      	moveq	r3, #1
 800c23e:	2300      	movne	r3, #0
 800c240:	b2db      	uxtb	r3, r3
 800c242:	461a      	mov	r2, r3
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	429a      	cmp	r2, r3
 800c248:	d09f      	beq.n	800c18a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3740      	adds	r7, #64	; 0x40
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	4613      	mov	r3, r2
 800c260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	88fa      	ldrh	r2, [r7, #6]
 800c26c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	88fa      	ldrh	r2, [r7, #6]
 800c272:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2222      	movs	r2, #34	; 0x22
 800c27e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c298:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	695a      	ldr	r2, [r3, #20]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0201 	orr.w	r2, r2, #1
 800c2a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 0220 	orr.w	r2, r2, #32
 800c2b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3714      	adds	r7, #20
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b095      	sub	sp, #84	; 0x54
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	330c      	adds	r3, #12
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2f0:	643a      	str	r2, [r7, #64]	; 0x40
 800c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e5      	bne.n	800c2d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3314      	adds	r3, #20
 800c30a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	e853 3f00 	ldrex	r3, [r3]
 800c312:	61fb      	str	r3, [r7, #28]
   return(result);
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	f023 0301 	bic.w	r3, r3, #1
 800c31a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3314      	adds	r3, #20
 800c322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c324:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c32c:	e841 2300 	strex	r3, r2, [r1]
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1e5      	bne.n	800c304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d119      	bne.n	800c374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	330c      	adds	r3, #12
 800c346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f023 0310 	bic.w	r3, r3, #16
 800c356:	647b      	str	r3, [r7, #68]	; 0x44
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	330c      	adds	r3, #12
 800c35e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c360:	61ba      	str	r2, [r7, #24]
 800c362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	6979      	ldr	r1, [r7, #20]
 800c366:	69ba      	ldr	r2, [r7, #24]
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	613b      	str	r3, [r7, #16]
   return(result);
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e5      	bne.n	800c340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2220      	movs	r2, #32
 800c378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c382:	bf00      	nop
 800c384:	3754      	adds	r7, #84	; 0x54
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7ff fecf 	bl	800c14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3ae:	bf00      	nop
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b21      	cmp	r3, #33	; 0x21
 800c3c8:	d13e      	bne.n	800c448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d2:	d114      	bne.n	800c3fe <UART_Transmit_IT+0x48>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d110      	bne.n	800c3fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	881b      	ldrh	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	1c9a      	adds	r2, r3, #2
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	621a      	str	r2, [r3, #32]
 800c3fc:	e008      	b.n	800c410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	1c59      	adds	r1, r3, #1
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6211      	str	r1, [r2, #32]
 800c408:	781a      	ldrb	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c414:	b29b      	uxth	r3, r3
 800c416:	3b01      	subs	r3, #1
 800c418:	b29b      	uxth	r3, r3
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	4619      	mov	r1, r3
 800c41e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10f      	bne.n	800c444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68da      	ldr	r2, [r3, #12]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	e000      	b.n	800c44a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c448:	2302      	movs	r3, #2
  }
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b082      	sub	sp, #8
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68da      	ldr	r2, [r3, #12]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c46c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2220      	movs	r2, #32
 800c472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff fe5e 	bl	800c138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b08c      	sub	sp, #48	; 0x30
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b22      	cmp	r3, #34	; 0x22
 800c498:	f040 80ab 	bne.w	800c5f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4a4:	d117      	bne.n	800c4d6 <UART_Receive_IT+0x50>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d113      	bne.n	800c4d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ce:	1c9a      	adds	r2, r3, #2
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	629a      	str	r2, [r3, #40]	; 0x28
 800c4d4:	e026      	b.n	800c524 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4e8:	d007      	beq.n	800c4fa <UART_Receive_IT+0x74>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10a      	bne.n	800c508 <UART_Receive_IT+0x82>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d106      	bne.n	800c508 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	b2da      	uxtb	r2, r3
 800c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	e008      	b.n	800c51a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c514:	b2da      	uxtb	r2, r3
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c528:	b29b      	uxth	r3, r3
 800c52a:	3b01      	subs	r3, #1
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	4619      	mov	r1, r3
 800c532:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c534:	2b00      	cmp	r3, #0
 800c536:	d15a      	bne.n	800c5ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68da      	ldr	r2, [r3, #12]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f022 0220 	bic.w	r2, r2, #32
 800c546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	695a      	ldr	r2, [r3, #20]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2220      	movs	r2, #32
 800c56c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c574:	2b01      	cmp	r3, #1
 800c576:	d135      	bne.n	800c5e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	330c      	adds	r3, #12
 800c584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	e853 3f00 	ldrex	r3, [r3]
 800c58c:	613b      	str	r3, [r7, #16]
   return(result);
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	f023 0310 	bic.w	r3, r3, #16
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	330c      	adds	r3, #12
 800c59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59e:	623a      	str	r2, [r7, #32]
 800c5a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a2:	69f9      	ldr	r1, [r7, #28]
 800c5a4:	6a3a      	ldr	r2, [r7, #32]
 800c5a6:	e841 2300 	strex	r3, r2, [r1]
 800c5aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1e5      	bne.n	800c57e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0310 	and.w	r3, r3, #16
 800c5bc:	2b10      	cmp	r3, #16
 800c5be:	d10a      	bne.n	800c5d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	60fb      	str	r3, [r7, #12]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	60fb      	str	r3, [r7, #12]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7ff fdbf 	bl	800c160 <HAL_UARTEx_RxEventCallback>
 800c5e2:	e002      	b.n	800c5ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7f5 fccb 	bl	8001f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e002      	b.n	800c5f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e000      	b.n	800c5f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c5f2:	2302      	movs	r3, #2
  }
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3730      	adds	r7, #48	; 0x30
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c600:	b0c0      	sub	sp, #256	; 0x100
 800c602:	af00      	add	r7, sp, #0
 800c604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c618:	68d9      	ldr	r1, [r3, #12]
 800c61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	ea40 0301 	orr.w	r3, r0, r1
 800c624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	431a      	orrs	r2, r3
 800c634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	4313      	orrs	r3, r2
 800c644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c654:	f021 010c 	bic.w	r1, r1, #12
 800c658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c662:	430b      	orrs	r3, r1
 800c664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c676:	6999      	ldr	r1, [r3, #24]
 800c678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	ea40 0301 	orr.w	r3, r0, r1
 800c682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b8f      	ldr	r3, [pc, #572]	; (800c8c8 <UART_SetConfig+0x2cc>)
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d005      	beq.n	800c69c <UART_SetConfig+0xa0>
 800c690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	4b8d      	ldr	r3, [pc, #564]	; (800c8cc <UART_SetConfig+0x2d0>)
 800c698:	429a      	cmp	r2, r3
 800c69a:	d104      	bne.n	800c6a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c69c:	f7fd fc78 	bl	8009f90 <HAL_RCC_GetPCLK2Freq>
 800c6a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c6a4:	e003      	b.n	800c6ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c6a6:	f7fd fc5f 	bl	8009f68 <HAL_RCC_GetPCLK1Freq>
 800c6aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6b8:	f040 810c 	bne.w	800c8d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c6bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c6c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c6ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c6ce:	4622      	mov	r2, r4
 800c6d0:	462b      	mov	r3, r5
 800c6d2:	1891      	adds	r1, r2, r2
 800c6d4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c6d6:	415b      	adcs	r3, r3
 800c6d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c6de:	4621      	mov	r1, r4
 800c6e0:	eb12 0801 	adds.w	r8, r2, r1
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	eb43 0901 	adc.w	r9, r3, r1
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	f04f 0300 	mov.w	r3, #0
 800c6f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c6f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c6fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c6fe:	4690      	mov	r8, r2
 800c700:	4699      	mov	r9, r3
 800c702:	4623      	mov	r3, r4
 800c704:	eb18 0303 	adds.w	r3, r8, r3
 800c708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c70c:	462b      	mov	r3, r5
 800c70e:	eb49 0303 	adc.w	r3, r9, r3
 800c712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c72a:	460b      	mov	r3, r1
 800c72c:	18db      	adds	r3, r3, r3
 800c72e:	653b      	str	r3, [r7, #80]	; 0x50
 800c730:	4613      	mov	r3, r2
 800c732:	eb42 0303 	adc.w	r3, r2, r3
 800c736:	657b      	str	r3, [r7, #84]	; 0x54
 800c738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c73c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c740:	f7f4 faa2 	bl	8000c88 <__aeabi_uldivmod>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	4b61      	ldr	r3, [pc, #388]	; (800c8d0 <UART_SetConfig+0x2d4>)
 800c74a:	fba3 2302 	umull	r2, r3, r3, r2
 800c74e:	095b      	lsrs	r3, r3, #5
 800c750:	011c      	lsls	r4, r3, #4
 800c752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c756:	2200      	movs	r2, #0
 800c758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c75c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c764:	4642      	mov	r2, r8
 800c766:	464b      	mov	r3, r9
 800c768:	1891      	adds	r1, r2, r2
 800c76a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c76c:	415b      	adcs	r3, r3
 800c76e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c774:	4641      	mov	r1, r8
 800c776:	eb12 0a01 	adds.w	sl, r2, r1
 800c77a:	4649      	mov	r1, r9
 800c77c:	eb43 0b01 	adc.w	fp, r3, r1
 800c780:	f04f 0200 	mov.w	r2, #0
 800c784:	f04f 0300 	mov.w	r3, #0
 800c788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c78c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c794:	4692      	mov	sl, r2
 800c796:	469b      	mov	fp, r3
 800c798:	4643      	mov	r3, r8
 800c79a:	eb1a 0303 	adds.w	r3, sl, r3
 800c79e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c7a2:	464b      	mov	r3, r9
 800c7a4:	eb4b 0303 	adc.w	r3, fp, r3
 800c7a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c7bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	18db      	adds	r3, r3, r3
 800c7c4:	643b      	str	r3, [r7, #64]	; 0x40
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	eb42 0303 	adc.w	r3, r2, r3
 800c7cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c7ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c7d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c7d6:	f7f4 fa57 	bl	8000c88 <__aeabi_uldivmod>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4b3b      	ldr	r3, [pc, #236]	; (800c8d0 <UART_SetConfig+0x2d4>)
 800c7e2:	fba3 2301 	umull	r2, r3, r3, r1
 800c7e6:	095b      	lsrs	r3, r3, #5
 800c7e8:	2264      	movs	r2, #100	; 0x64
 800c7ea:	fb02 f303 	mul.w	r3, r2, r3
 800c7ee:	1acb      	subs	r3, r1, r3
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c7f6:	4b36      	ldr	r3, [pc, #216]	; (800c8d0 <UART_SetConfig+0x2d4>)
 800c7f8:	fba3 2302 	umull	r2, r3, r3, r2
 800c7fc:	095b      	lsrs	r3, r3, #5
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c804:	441c      	add	r4, r3
 800c806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c80a:	2200      	movs	r2, #0
 800c80c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c810:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c818:	4642      	mov	r2, r8
 800c81a:	464b      	mov	r3, r9
 800c81c:	1891      	adds	r1, r2, r2
 800c81e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c820:	415b      	adcs	r3, r3
 800c822:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c828:	4641      	mov	r1, r8
 800c82a:	1851      	adds	r1, r2, r1
 800c82c:	6339      	str	r1, [r7, #48]	; 0x30
 800c82e:	4649      	mov	r1, r9
 800c830:	414b      	adcs	r3, r1
 800c832:	637b      	str	r3, [r7, #52]	; 0x34
 800c834:	f04f 0200 	mov.w	r2, #0
 800c838:	f04f 0300 	mov.w	r3, #0
 800c83c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c840:	4659      	mov	r1, fp
 800c842:	00cb      	lsls	r3, r1, #3
 800c844:	4651      	mov	r1, sl
 800c846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c84a:	4651      	mov	r1, sl
 800c84c:	00ca      	lsls	r2, r1, #3
 800c84e:	4610      	mov	r0, r2
 800c850:	4619      	mov	r1, r3
 800c852:	4603      	mov	r3, r0
 800c854:	4642      	mov	r2, r8
 800c856:	189b      	adds	r3, r3, r2
 800c858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c85c:	464b      	mov	r3, r9
 800c85e:	460a      	mov	r2, r1
 800c860:	eb42 0303 	adc.w	r3, r2, r3
 800c864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c87c:	460b      	mov	r3, r1
 800c87e:	18db      	adds	r3, r3, r3
 800c880:	62bb      	str	r3, [r7, #40]	; 0x28
 800c882:	4613      	mov	r3, r2
 800c884:	eb42 0303 	adc.w	r3, r2, r3
 800c888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c88a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c88e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c892:	f7f4 f9f9 	bl	8000c88 <__aeabi_uldivmod>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4b0d      	ldr	r3, [pc, #52]	; (800c8d0 <UART_SetConfig+0x2d4>)
 800c89c:	fba3 1302 	umull	r1, r3, r3, r2
 800c8a0:	095b      	lsrs	r3, r3, #5
 800c8a2:	2164      	movs	r1, #100	; 0x64
 800c8a4:	fb01 f303 	mul.w	r3, r1, r3
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	00db      	lsls	r3, r3, #3
 800c8ac:	3332      	adds	r3, #50	; 0x32
 800c8ae:	4a08      	ldr	r2, [pc, #32]	; (800c8d0 <UART_SetConfig+0x2d4>)
 800c8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b4:	095b      	lsrs	r3, r3, #5
 800c8b6:	f003 0207 	and.w	r2, r3, #7
 800c8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4422      	add	r2, r4
 800c8c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c8c4:	e105      	b.n	800cad2 <UART_SetConfig+0x4d6>
 800c8c6:	bf00      	nop
 800c8c8:	40011000 	.word	0x40011000
 800c8cc:	40011400 	.word	0x40011400
 800c8d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c8d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c8de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c8e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c8e6:	4642      	mov	r2, r8
 800c8e8:	464b      	mov	r3, r9
 800c8ea:	1891      	adds	r1, r2, r2
 800c8ec:	6239      	str	r1, [r7, #32]
 800c8ee:	415b      	adcs	r3, r3
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c8f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8f6:	4641      	mov	r1, r8
 800c8f8:	1854      	adds	r4, r2, r1
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	eb43 0501 	adc.w	r5, r3, r1
 800c900:	f04f 0200 	mov.w	r2, #0
 800c904:	f04f 0300 	mov.w	r3, #0
 800c908:	00eb      	lsls	r3, r5, #3
 800c90a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c90e:	00e2      	lsls	r2, r4, #3
 800c910:	4614      	mov	r4, r2
 800c912:	461d      	mov	r5, r3
 800c914:	4643      	mov	r3, r8
 800c916:	18e3      	adds	r3, r4, r3
 800c918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c91c:	464b      	mov	r3, r9
 800c91e:	eb45 0303 	adc.w	r3, r5, r3
 800c922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c932:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c936:	f04f 0200 	mov.w	r2, #0
 800c93a:	f04f 0300 	mov.w	r3, #0
 800c93e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c942:	4629      	mov	r1, r5
 800c944:	008b      	lsls	r3, r1, #2
 800c946:	4621      	mov	r1, r4
 800c948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c94c:	4621      	mov	r1, r4
 800c94e:	008a      	lsls	r2, r1, #2
 800c950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c954:	f7f4 f998 	bl	8000c88 <__aeabi_uldivmod>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	4b60      	ldr	r3, [pc, #384]	; (800cae0 <UART_SetConfig+0x4e4>)
 800c95e:	fba3 2302 	umull	r2, r3, r3, r2
 800c962:	095b      	lsrs	r3, r3, #5
 800c964:	011c      	lsls	r4, r3, #4
 800c966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c978:	4642      	mov	r2, r8
 800c97a:	464b      	mov	r3, r9
 800c97c:	1891      	adds	r1, r2, r2
 800c97e:	61b9      	str	r1, [r7, #24]
 800c980:	415b      	adcs	r3, r3
 800c982:	61fb      	str	r3, [r7, #28]
 800c984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c988:	4641      	mov	r1, r8
 800c98a:	1851      	adds	r1, r2, r1
 800c98c:	6139      	str	r1, [r7, #16]
 800c98e:	4649      	mov	r1, r9
 800c990:	414b      	adcs	r3, r1
 800c992:	617b      	str	r3, [r7, #20]
 800c994:	f04f 0200 	mov.w	r2, #0
 800c998:	f04f 0300 	mov.w	r3, #0
 800c99c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	00cb      	lsls	r3, r1, #3
 800c9a4:	4651      	mov	r1, sl
 800c9a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9aa:	4651      	mov	r1, sl
 800c9ac:	00ca      	lsls	r2, r1, #3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4642      	mov	r2, r8
 800c9b6:	189b      	adds	r3, r3, r2
 800c9b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9bc:	464b      	mov	r3, r9
 800c9be:	460a      	mov	r2, r1
 800c9c0:	eb42 0303 	adc.w	r3, r2, r3
 800c9c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c9d4:	f04f 0200 	mov.w	r2, #0
 800c9d8:	f04f 0300 	mov.w	r3, #0
 800c9dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	008b      	lsls	r3, r1, #2
 800c9e4:	4641      	mov	r1, r8
 800c9e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c9ea:	4641      	mov	r1, r8
 800c9ec:	008a      	lsls	r2, r1, #2
 800c9ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c9f2:	f7f4 f949 	bl	8000c88 <__aeabi_uldivmod>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4b39      	ldr	r3, [pc, #228]	; (800cae0 <UART_SetConfig+0x4e4>)
 800c9fc:	fba3 1302 	umull	r1, r3, r3, r2
 800ca00:	095b      	lsrs	r3, r3, #5
 800ca02:	2164      	movs	r1, #100	; 0x64
 800ca04:	fb01 f303 	mul.w	r3, r1, r3
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	011b      	lsls	r3, r3, #4
 800ca0c:	3332      	adds	r3, #50	; 0x32
 800ca0e:	4a34      	ldr	r2, [pc, #208]	; (800cae0 <UART_SetConfig+0x4e4>)
 800ca10:	fba2 2303 	umull	r2, r3, r2, r3
 800ca14:	095b      	lsrs	r3, r3, #5
 800ca16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca1a:	441c      	add	r4, r3
 800ca1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca20:	2200      	movs	r2, #0
 800ca22:	673b      	str	r3, [r7, #112]	; 0x70
 800ca24:	677a      	str	r2, [r7, #116]	; 0x74
 800ca26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ca2a:	4642      	mov	r2, r8
 800ca2c:	464b      	mov	r3, r9
 800ca2e:	1891      	adds	r1, r2, r2
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	415b      	adcs	r3, r3
 800ca34:	60fb      	str	r3, [r7, #12]
 800ca36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca3a:	4641      	mov	r1, r8
 800ca3c:	1851      	adds	r1, r2, r1
 800ca3e:	6039      	str	r1, [r7, #0]
 800ca40:	4649      	mov	r1, r9
 800ca42:	414b      	adcs	r3, r1
 800ca44:	607b      	str	r3, [r7, #4]
 800ca46:	f04f 0200 	mov.w	r2, #0
 800ca4a:	f04f 0300 	mov.w	r3, #0
 800ca4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ca52:	4659      	mov	r1, fp
 800ca54:	00cb      	lsls	r3, r1, #3
 800ca56:	4651      	mov	r1, sl
 800ca58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca5c:	4651      	mov	r1, sl
 800ca5e:	00ca      	lsls	r2, r1, #3
 800ca60:	4610      	mov	r0, r2
 800ca62:	4619      	mov	r1, r3
 800ca64:	4603      	mov	r3, r0
 800ca66:	4642      	mov	r2, r8
 800ca68:	189b      	adds	r3, r3, r2
 800ca6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	460a      	mov	r2, r1
 800ca70:	eb42 0303 	adc.w	r3, r2, r3
 800ca74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	663b      	str	r3, [r7, #96]	; 0x60
 800ca80:	667a      	str	r2, [r7, #100]	; 0x64
 800ca82:	f04f 0200 	mov.w	r2, #0
 800ca86:	f04f 0300 	mov.w	r3, #0
 800ca8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ca8e:	4649      	mov	r1, r9
 800ca90:	008b      	lsls	r3, r1, #2
 800ca92:	4641      	mov	r1, r8
 800ca94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca98:	4641      	mov	r1, r8
 800ca9a:	008a      	lsls	r2, r1, #2
 800ca9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800caa0:	f7f4 f8f2 	bl	8000c88 <__aeabi_uldivmod>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4b0d      	ldr	r3, [pc, #52]	; (800cae0 <UART_SetConfig+0x4e4>)
 800caaa:	fba3 1302 	umull	r1, r3, r3, r2
 800caae:	095b      	lsrs	r3, r3, #5
 800cab0:	2164      	movs	r1, #100	; 0x64
 800cab2:	fb01 f303 	mul.w	r3, r1, r3
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	011b      	lsls	r3, r3, #4
 800caba:	3332      	adds	r3, #50	; 0x32
 800cabc:	4a08      	ldr	r2, [pc, #32]	; (800cae0 <UART_SetConfig+0x4e4>)
 800cabe:	fba2 2303 	umull	r2, r3, r2, r3
 800cac2:	095b      	lsrs	r3, r3, #5
 800cac4:	f003 020f 	and.w	r2, r3, #15
 800cac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4422      	add	r2, r4
 800cad0:	609a      	str	r2, [r3, #8]
}
 800cad2:	bf00      	nop
 800cad4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cad8:	46bd      	mov	sp, r7
 800cada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cade:	bf00      	nop
 800cae0:	51eb851f 	.word	0x51eb851f

0800cae4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	4b20      	ldr	r3, [pc, #128]	; (800cb84 <FSMC_NORSRAM_Init+0xa0>)
 800cb02:	4013      	ands	r3, r2
 800cb04:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800cb0e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800cb14:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800cb1a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800cb20:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800cb26:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800cb2c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800cb32:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800cb38:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800cb3e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800cb44:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800cb4a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800cb50:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	2b08      	cmp	r3, #8
 800cb5e:	d103      	bne.n	800cb68 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb66:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	68f9      	ldr	r1, [r7, #12]
 800cb70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	fff00080 	.word	0xfff00080

0800cb88 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	1c5a      	adds	r2, r3, #1
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cbaa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800cbb6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800cbbe:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800cbc6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800cbd0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	3b02      	subs	r3, #2
 800cbd8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800cbda:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	1c5a      	adds	r2, r3, #1
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6979      	ldr	r1, [r7, #20]
 800cbf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	371c      	adds	r7, #28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
	...

0800cc04 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b087      	sub	sp, #28
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
 800cc10:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800cc12:	2300      	movs	r3, #0
 800cc14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc1c:	d122      	bne.n	800cc64 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc26:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800cc3a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800cc42:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800cc4a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800cc50:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6979      	ldr	r1, [r7, #20]
 800cc5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cc62:	e005      	b.n	800cc70 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800cc6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	cff00000 	.word	0xcff00000

0800cc84 <atoi>:
 800cc84:	220a      	movs	r2, #10
 800cc86:	2100      	movs	r1, #0
 800cc88:	f001 bdd2 	b.w	800e830 <strtol>

0800cc8c <__errno>:
 800cc8c:	4b01      	ldr	r3, [pc, #4]	; (800cc94 <__errno+0x8>)
 800cc8e:	6818      	ldr	r0, [r3, #0]
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	2000007c 	.word	0x2000007c

0800cc98 <__libc_init_array>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	4d0d      	ldr	r5, [pc, #52]	; (800ccd0 <__libc_init_array+0x38>)
 800cc9c:	4c0d      	ldr	r4, [pc, #52]	; (800ccd4 <__libc_init_array+0x3c>)
 800cc9e:	1b64      	subs	r4, r4, r5
 800cca0:	10a4      	asrs	r4, r4, #2
 800cca2:	2600      	movs	r6, #0
 800cca4:	42a6      	cmp	r6, r4
 800cca6:	d109      	bne.n	800ccbc <__libc_init_array+0x24>
 800cca8:	4d0b      	ldr	r5, [pc, #44]	; (800ccd8 <__libc_init_array+0x40>)
 800ccaa:	4c0c      	ldr	r4, [pc, #48]	; (800ccdc <__libc_init_array+0x44>)
 800ccac:	f006 fbba 	bl	8013424 <_init>
 800ccb0:	1b64      	subs	r4, r4, r5
 800ccb2:	10a4      	asrs	r4, r4, #2
 800ccb4:	2600      	movs	r6, #0
 800ccb6:	42a6      	cmp	r6, r4
 800ccb8:	d105      	bne.n	800ccc6 <__libc_init_array+0x2e>
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc0:	4798      	blx	r3
 800ccc2:	3601      	adds	r6, #1
 800ccc4:	e7ee      	b.n	800cca4 <__libc_init_array+0xc>
 800ccc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccca:	4798      	blx	r3
 800cccc:	3601      	adds	r6, #1
 800ccce:	e7f2      	b.n	800ccb6 <__libc_init_array+0x1e>
 800ccd0:	08021ff0 	.word	0x08021ff0
 800ccd4:	08021ff0 	.word	0x08021ff0
 800ccd8:	08021ff0 	.word	0x08021ff0
 800ccdc:	08021ff4 	.word	0x08021ff4

0800cce0 <memcmp>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	3901      	subs	r1, #1
 800cce4:	4402      	add	r2, r0
 800cce6:	4290      	cmp	r0, r2
 800cce8:	d101      	bne.n	800ccee <memcmp+0xe>
 800ccea:	2000      	movs	r0, #0
 800ccec:	e005      	b.n	800ccfa <memcmp+0x1a>
 800ccee:	7803      	ldrb	r3, [r0, #0]
 800ccf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	d001      	beq.n	800ccfc <memcmp+0x1c>
 800ccf8:	1b18      	subs	r0, r3, r4
 800ccfa:	bd10      	pop	{r4, pc}
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	e7f2      	b.n	800cce6 <memcmp+0x6>

0800cd00 <memcpy>:
 800cd00:	440a      	add	r2, r1
 800cd02:	4291      	cmp	r1, r2
 800cd04:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd08:	d100      	bne.n	800cd0c <memcpy+0xc>
 800cd0a:	4770      	bx	lr
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd16:	4291      	cmp	r1, r2
 800cd18:	d1f9      	bne.n	800cd0e <memcpy+0xe>
 800cd1a:	bd10      	pop	{r4, pc}

0800cd1c <memset>:
 800cd1c:	4402      	add	r2, r0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d100      	bne.n	800cd26 <memset+0xa>
 800cd24:	4770      	bx	lr
 800cd26:	f803 1b01 	strb.w	r1, [r3], #1
 800cd2a:	e7f9      	b.n	800cd20 <memset+0x4>

0800cd2c <__cvt>:
 800cd2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd30:	ec55 4b10 	vmov	r4, r5, d0
 800cd34:	2d00      	cmp	r5, #0
 800cd36:	460e      	mov	r6, r1
 800cd38:	4619      	mov	r1, r3
 800cd3a:	462b      	mov	r3, r5
 800cd3c:	bfbb      	ittet	lt
 800cd3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cd42:	461d      	movlt	r5, r3
 800cd44:	2300      	movge	r3, #0
 800cd46:	232d      	movlt	r3, #45	; 0x2d
 800cd48:	700b      	strb	r3, [r1, #0]
 800cd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cd50:	4691      	mov	r9, r2
 800cd52:	f023 0820 	bic.w	r8, r3, #32
 800cd56:	bfbc      	itt	lt
 800cd58:	4622      	movlt	r2, r4
 800cd5a:	4614      	movlt	r4, r2
 800cd5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd60:	d005      	beq.n	800cd6e <__cvt+0x42>
 800cd62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cd66:	d100      	bne.n	800cd6a <__cvt+0x3e>
 800cd68:	3601      	adds	r6, #1
 800cd6a:	2102      	movs	r1, #2
 800cd6c:	e000      	b.n	800cd70 <__cvt+0x44>
 800cd6e:	2103      	movs	r1, #3
 800cd70:	ab03      	add	r3, sp, #12
 800cd72:	9301      	str	r3, [sp, #4]
 800cd74:	ab02      	add	r3, sp, #8
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	ec45 4b10 	vmov	d0, r4, r5
 800cd7c:	4653      	mov	r3, sl
 800cd7e:	4632      	mov	r2, r6
 800cd80:	f001 fdee 	bl	800e960 <_dtoa_r>
 800cd84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd88:	4607      	mov	r7, r0
 800cd8a:	d102      	bne.n	800cd92 <__cvt+0x66>
 800cd8c:	f019 0f01 	tst.w	r9, #1
 800cd90:	d022      	beq.n	800cdd8 <__cvt+0xac>
 800cd92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd96:	eb07 0906 	add.w	r9, r7, r6
 800cd9a:	d110      	bne.n	800cdbe <__cvt+0x92>
 800cd9c:	783b      	ldrb	r3, [r7, #0]
 800cd9e:	2b30      	cmp	r3, #48	; 0x30
 800cda0:	d10a      	bne.n	800cdb8 <__cvt+0x8c>
 800cda2:	2200      	movs	r2, #0
 800cda4:	2300      	movs	r3, #0
 800cda6:	4620      	mov	r0, r4
 800cda8:	4629      	mov	r1, r5
 800cdaa:	f7f3 fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdae:	b918      	cbnz	r0, 800cdb8 <__cvt+0x8c>
 800cdb0:	f1c6 0601 	rsb	r6, r6, #1
 800cdb4:	f8ca 6000 	str.w	r6, [sl]
 800cdb8:	f8da 3000 	ldr.w	r3, [sl]
 800cdbc:	4499      	add	r9, r3
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	f7f3 fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdca:	b108      	cbz	r0, 800cdd0 <__cvt+0xa4>
 800cdcc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cdd0:	2230      	movs	r2, #48	; 0x30
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	454b      	cmp	r3, r9
 800cdd6:	d307      	bcc.n	800cde8 <__cvt+0xbc>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cddc:	1bdb      	subs	r3, r3, r7
 800cdde:	4638      	mov	r0, r7
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	b004      	add	sp, #16
 800cde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde8:	1c59      	adds	r1, r3, #1
 800cdea:	9103      	str	r1, [sp, #12]
 800cdec:	701a      	strb	r2, [r3, #0]
 800cdee:	e7f0      	b.n	800cdd2 <__cvt+0xa6>

0800cdf0 <__exponent>:
 800cdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	bfb8      	it	lt
 800cdf8:	4249      	neglt	r1, r1
 800cdfa:	f803 2b02 	strb.w	r2, [r3], #2
 800cdfe:	bfb4      	ite	lt
 800ce00:	222d      	movlt	r2, #45	; 0x2d
 800ce02:	222b      	movge	r2, #43	; 0x2b
 800ce04:	2909      	cmp	r1, #9
 800ce06:	7042      	strb	r2, [r0, #1]
 800ce08:	dd2a      	ble.n	800ce60 <__exponent+0x70>
 800ce0a:	f10d 0407 	add.w	r4, sp, #7
 800ce0e:	46a4      	mov	ip, r4
 800ce10:	270a      	movs	r7, #10
 800ce12:	46a6      	mov	lr, r4
 800ce14:	460a      	mov	r2, r1
 800ce16:	fb91 f6f7 	sdiv	r6, r1, r7
 800ce1a:	fb07 1516 	mls	r5, r7, r6, r1
 800ce1e:	3530      	adds	r5, #48	; 0x30
 800ce20:	2a63      	cmp	r2, #99	; 0x63
 800ce22:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	dcf1      	bgt.n	800ce12 <__exponent+0x22>
 800ce2e:	3130      	adds	r1, #48	; 0x30
 800ce30:	f1ae 0502 	sub.w	r5, lr, #2
 800ce34:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ce38:	1c44      	adds	r4, r0, #1
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	4561      	cmp	r1, ip
 800ce3e:	d30a      	bcc.n	800ce56 <__exponent+0x66>
 800ce40:	f10d 0209 	add.w	r2, sp, #9
 800ce44:	eba2 020e 	sub.w	r2, r2, lr
 800ce48:	4565      	cmp	r5, ip
 800ce4a:	bf88      	it	hi
 800ce4c:	2200      	movhi	r2, #0
 800ce4e:	4413      	add	r3, r2
 800ce50:	1a18      	subs	r0, r3, r0
 800ce52:	b003      	add	sp, #12
 800ce54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ce5e:	e7ed      	b.n	800ce3c <__exponent+0x4c>
 800ce60:	2330      	movs	r3, #48	; 0x30
 800ce62:	3130      	adds	r1, #48	; 0x30
 800ce64:	7083      	strb	r3, [r0, #2]
 800ce66:	70c1      	strb	r1, [r0, #3]
 800ce68:	1d03      	adds	r3, r0, #4
 800ce6a:	e7f1      	b.n	800ce50 <__exponent+0x60>

0800ce6c <_printf_float>:
 800ce6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce70:	ed2d 8b02 	vpush	{d8}
 800ce74:	b08d      	sub	sp, #52	; 0x34
 800ce76:	460c      	mov	r4, r1
 800ce78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce7c:	4616      	mov	r6, r2
 800ce7e:	461f      	mov	r7, r3
 800ce80:	4605      	mov	r5, r0
 800ce82:	f002 fecb 	bl	800fc1c <_localeconv_r>
 800ce86:	f8d0 a000 	ldr.w	sl, [r0]
 800ce8a:	4650      	mov	r0, sl
 800ce8c:	f7f3 f9a0 	bl	80001d0 <strlen>
 800ce90:	2300      	movs	r3, #0
 800ce92:	930a      	str	r3, [sp, #40]	; 0x28
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	9305      	str	r3, [sp, #20]
 800ce98:	f8d8 3000 	ldr.w	r3, [r8]
 800ce9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cea0:	3307      	adds	r3, #7
 800cea2:	f023 0307 	bic.w	r3, r3, #7
 800cea6:	f103 0208 	add.w	r2, r3, #8
 800ceaa:	f8c8 2000 	str.w	r2, [r8]
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ceb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ceba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cebe:	9307      	str	r3, [sp, #28]
 800cec0:	f8cd 8018 	str.w	r8, [sp, #24]
 800cec4:	ee08 0a10 	vmov	s16, r0
 800cec8:	4b9f      	ldr	r3, [pc, #636]	; (800d148 <_printf_float+0x2dc>)
 800ceca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cece:	f04f 32ff 	mov.w	r2, #4294967295
 800ced2:	f7f3 fe2b 	bl	8000b2c <__aeabi_dcmpun>
 800ced6:	bb88      	cbnz	r0, 800cf3c <_printf_float+0xd0>
 800ced8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cedc:	4b9a      	ldr	r3, [pc, #616]	; (800d148 <_printf_float+0x2dc>)
 800cede:	f04f 32ff 	mov.w	r2, #4294967295
 800cee2:	f7f3 fe05 	bl	8000af0 <__aeabi_dcmple>
 800cee6:	bb48      	cbnz	r0, 800cf3c <_printf_float+0xd0>
 800cee8:	2200      	movs	r2, #0
 800ceea:	2300      	movs	r3, #0
 800ceec:	4640      	mov	r0, r8
 800ceee:	4649      	mov	r1, r9
 800cef0:	f7f3 fdf4 	bl	8000adc <__aeabi_dcmplt>
 800cef4:	b110      	cbz	r0, 800cefc <_printf_float+0x90>
 800cef6:	232d      	movs	r3, #45	; 0x2d
 800cef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cefc:	4b93      	ldr	r3, [pc, #588]	; (800d14c <_printf_float+0x2e0>)
 800cefe:	4894      	ldr	r0, [pc, #592]	; (800d150 <_printf_float+0x2e4>)
 800cf00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cf04:	bf94      	ite	ls
 800cf06:	4698      	movls	r8, r3
 800cf08:	4680      	movhi	r8, r0
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	6123      	str	r3, [r4, #16]
 800cf0e:	9b05      	ldr	r3, [sp, #20]
 800cf10:	f023 0204 	bic.w	r2, r3, #4
 800cf14:	6022      	str	r2, [r4, #0]
 800cf16:	f04f 0900 	mov.w	r9, #0
 800cf1a:	9700      	str	r7, [sp, #0]
 800cf1c:	4633      	mov	r3, r6
 800cf1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cf20:	4621      	mov	r1, r4
 800cf22:	4628      	mov	r0, r5
 800cf24:	f000 f9d8 	bl	800d2d8 <_printf_common>
 800cf28:	3001      	adds	r0, #1
 800cf2a:	f040 8090 	bne.w	800d04e <_printf_float+0x1e2>
 800cf2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf32:	b00d      	add	sp, #52	; 0x34
 800cf34:	ecbd 8b02 	vpop	{d8}
 800cf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3c:	4642      	mov	r2, r8
 800cf3e:	464b      	mov	r3, r9
 800cf40:	4640      	mov	r0, r8
 800cf42:	4649      	mov	r1, r9
 800cf44:	f7f3 fdf2 	bl	8000b2c <__aeabi_dcmpun>
 800cf48:	b140      	cbz	r0, 800cf5c <_printf_float+0xf0>
 800cf4a:	464b      	mov	r3, r9
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bfbc      	itt	lt
 800cf50:	232d      	movlt	r3, #45	; 0x2d
 800cf52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cf56:	487f      	ldr	r0, [pc, #508]	; (800d154 <_printf_float+0x2e8>)
 800cf58:	4b7f      	ldr	r3, [pc, #508]	; (800d158 <_printf_float+0x2ec>)
 800cf5a:	e7d1      	b.n	800cf00 <_printf_float+0x94>
 800cf5c:	6863      	ldr	r3, [r4, #4]
 800cf5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cf62:	9206      	str	r2, [sp, #24]
 800cf64:	1c5a      	adds	r2, r3, #1
 800cf66:	d13f      	bne.n	800cfe8 <_printf_float+0x17c>
 800cf68:	2306      	movs	r3, #6
 800cf6a:	6063      	str	r3, [r4, #4]
 800cf6c:	9b05      	ldr	r3, [sp, #20]
 800cf6e:	6861      	ldr	r1, [r4, #4]
 800cf70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf74:	2300      	movs	r3, #0
 800cf76:	9303      	str	r3, [sp, #12]
 800cf78:	ab0a      	add	r3, sp, #40	; 0x28
 800cf7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf7e:	ab09      	add	r3, sp, #36	; 0x24
 800cf80:	ec49 8b10 	vmov	d0, r8, r9
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	6022      	str	r2, [r4, #0]
 800cf88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f7ff fecd 	bl	800cd2c <__cvt>
 800cf92:	9b06      	ldr	r3, [sp, #24]
 800cf94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf96:	2b47      	cmp	r3, #71	; 0x47
 800cf98:	4680      	mov	r8, r0
 800cf9a:	d108      	bne.n	800cfae <_printf_float+0x142>
 800cf9c:	1cc8      	adds	r0, r1, #3
 800cf9e:	db02      	blt.n	800cfa6 <_printf_float+0x13a>
 800cfa0:	6863      	ldr	r3, [r4, #4]
 800cfa2:	4299      	cmp	r1, r3
 800cfa4:	dd41      	ble.n	800d02a <_printf_float+0x1be>
 800cfa6:	f1ab 0b02 	sub.w	fp, fp, #2
 800cfaa:	fa5f fb8b 	uxtb.w	fp, fp
 800cfae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cfb2:	d820      	bhi.n	800cff6 <_printf_float+0x18a>
 800cfb4:	3901      	subs	r1, #1
 800cfb6:	465a      	mov	r2, fp
 800cfb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cfbc:	9109      	str	r1, [sp, #36]	; 0x24
 800cfbe:	f7ff ff17 	bl	800cdf0 <__exponent>
 800cfc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfc4:	1813      	adds	r3, r2, r0
 800cfc6:	2a01      	cmp	r2, #1
 800cfc8:	4681      	mov	r9, r0
 800cfca:	6123      	str	r3, [r4, #16]
 800cfcc:	dc02      	bgt.n	800cfd4 <_printf_float+0x168>
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	07d2      	lsls	r2, r2, #31
 800cfd2:	d501      	bpl.n	800cfd8 <_printf_float+0x16c>
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	6123      	str	r3, [r4, #16]
 800cfd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d09c      	beq.n	800cf1a <_printf_float+0xae>
 800cfe0:	232d      	movs	r3, #45	; 0x2d
 800cfe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe6:	e798      	b.n	800cf1a <_printf_float+0xae>
 800cfe8:	9a06      	ldr	r2, [sp, #24]
 800cfea:	2a47      	cmp	r2, #71	; 0x47
 800cfec:	d1be      	bne.n	800cf6c <_printf_float+0x100>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1bc      	bne.n	800cf6c <_printf_float+0x100>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e7b9      	b.n	800cf6a <_printf_float+0xfe>
 800cff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cffa:	d118      	bne.n	800d02e <_printf_float+0x1c2>
 800cffc:	2900      	cmp	r1, #0
 800cffe:	6863      	ldr	r3, [r4, #4]
 800d000:	dd0b      	ble.n	800d01a <_printf_float+0x1ae>
 800d002:	6121      	str	r1, [r4, #16]
 800d004:	b913      	cbnz	r3, 800d00c <_printf_float+0x1a0>
 800d006:	6822      	ldr	r2, [r4, #0]
 800d008:	07d0      	lsls	r0, r2, #31
 800d00a:	d502      	bpl.n	800d012 <_printf_float+0x1a6>
 800d00c:	3301      	adds	r3, #1
 800d00e:	440b      	add	r3, r1
 800d010:	6123      	str	r3, [r4, #16]
 800d012:	65a1      	str	r1, [r4, #88]	; 0x58
 800d014:	f04f 0900 	mov.w	r9, #0
 800d018:	e7de      	b.n	800cfd8 <_printf_float+0x16c>
 800d01a:	b913      	cbnz	r3, 800d022 <_printf_float+0x1b6>
 800d01c:	6822      	ldr	r2, [r4, #0]
 800d01e:	07d2      	lsls	r2, r2, #31
 800d020:	d501      	bpl.n	800d026 <_printf_float+0x1ba>
 800d022:	3302      	adds	r3, #2
 800d024:	e7f4      	b.n	800d010 <_printf_float+0x1a4>
 800d026:	2301      	movs	r3, #1
 800d028:	e7f2      	b.n	800d010 <_printf_float+0x1a4>
 800d02a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d030:	4299      	cmp	r1, r3
 800d032:	db05      	blt.n	800d040 <_printf_float+0x1d4>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	6121      	str	r1, [r4, #16]
 800d038:	07d8      	lsls	r0, r3, #31
 800d03a:	d5ea      	bpl.n	800d012 <_printf_float+0x1a6>
 800d03c:	1c4b      	adds	r3, r1, #1
 800d03e:	e7e7      	b.n	800d010 <_printf_float+0x1a4>
 800d040:	2900      	cmp	r1, #0
 800d042:	bfd4      	ite	le
 800d044:	f1c1 0202 	rsble	r2, r1, #2
 800d048:	2201      	movgt	r2, #1
 800d04a:	4413      	add	r3, r2
 800d04c:	e7e0      	b.n	800d010 <_printf_float+0x1a4>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	055a      	lsls	r2, r3, #21
 800d052:	d407      	bmi.n	800d064 <_printf_float+0x1f8>
 800d054:	6923      	ldr	r3, [r4, #16]
 800d056:	4642      	mov	r2, r8
 800d058:	4631      	mov	r1, r6
 800d05a:	4628      	mov	r0, r5
 800d05c:	47b8      	blx	r7
 800d05e:	3001      	adds	r0, #1
 800d060:	d12c      	bne.n	800d0bc <_printf_float+0x250>
 800d062:	e764      	b.n	800cf2e <_printf_float+0xc2>
 800d064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d068:	f240 80e0 	bls.w	800d22c <_printf_float+0x3c0>
 800d06c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d070:	2200      	movs	r2, #0
 800d072:	2300      	movs	r3, #0
 800d074:	f7f3 fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 800d078:	2800      	cmp	r0, #0
 800d07a:	d034      	beq.n	800d0e6 <_printf_float+0x27a>
 800d07c:	4a37      	ldr	r2, [pc, #220]	; (800d15c <_printf_float+0x2f0>)
 800d07e:	2301      	movs	r3, #1
 800d080:	4631      	mov	r1, r6
 800d082:	4628      	mov	r0, r5
 800d084:	47b8      	blx	r7
 800d086:	3001      	adds	r0, #1
 800d088:	f43f af51 	beq.w	800cf2e <_printf_float+0xc2>
 800d08c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d090:	429a      	cmp	r2, r3
 800d092:	db02      	blt.n	800d09a <_printf_float+0x22e>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	07d8      	lsls	r0, r3, #31
 800d098:	d510      	bpl.n	800d0bc <_printf_float+0x250>
 800d09a:	ee18 3a10 	vmov	r3, s16
 800d09e:	4652      	mov	r2, sl
 800d0a0:	4631      	mov	r1, r6
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	47b8      	blx	r7
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	f43f af41 	beq.w	800cf2e <_printf_float+0xc2>
 800d0ac:	f04f 0800 	mov.w	r8, #0
 800d0b0:	f104 091a 	add.w	r9, r4, #26
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	4543      	cmp	r3, r8
 800d0ba:	dc09      	bgt.n	800d0d0 <_printf_float+0x264>
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	079b      	lsls	r3, r3, #30
 800d0c0:	f100 8105 	bmi.w	800d2ce <_printf_float+0x462>
 800d0c4:	68e0      	ldr	r0, [r4, #12]
 800d0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0c8:	4298      	cmp	r0, r3
 800d0ca:	bfb8      	it	lt
 800d0cc:	4618      	movlt	r0, r3
 800d0ce:	e730      	b.n	800cf32 <_printf_float+0xc6>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	464a      	mov	r2, r9
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	47b8      	blx	r7
 800d0da:	3001      	adds	r0, #1
 800d0dc:	f43f af27 	beq.w	800cf2e <_printf_float+0xc2>
 800d0e0:	f108 0801 	add.w	r8, r8, #1
 800d0e4:	e7e6      	b.n	800d0b4 <_printf_float+0x248>
 800d0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	dc39      	bgt.n	800d160 <_printf_float+0x2f4>
 800d0ec:	4a1b      	ldr	r2, [pc, #108]	; (800d15c <_printf_float+0x2f0>)
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	47b8      	blx	r7
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	f43f af19 	beq.w	800cf2e <_printf_float+0xc2>
 800d0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d100:	4313      	orrs	r3, r2
 800d102:	d102      	bne.n	800d10a <_printf_float+0x29e>
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	07d9      	lsls	r1, r3, #31
 800d108:	d5d8      	bpl.n	800d0bc <_printf_float+0x250>
 800d10a:	ee18 3a10 	vmov	r3, s16
 800d10e:	4652      	mov	r2, sl
 800d110:	4631      	mov	r1, r6
 800d112:	4628      	mov	r0, r5
 800d114:	47b8      	blx	r7
 800d116:	3001      	adds	r0, #1
 800d118:	f43f af09 	beq.w	800cf2e <_printf_float+0xc2>
 800d11c:	f04f 0900 	mov.w	r9, #0
 800d120:	f104 0a1a 	add.w	sl, r4, #26
 800d124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d126:	425b      	negs	r3, r3
 800d128:	454b      	cmp	r3, r9
 800d12a:	dc01      	bgt.n	800d130 <_printf_float+0x2c4>
 800d12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d12e:	e792      	b.n	800d056 <_printf_float+0x1ea>
 800d130:	2301      	movs	r3, #1
 800d132:	4652      	mov	r2, sl
 800d134:	4631      	mov	r1, r6
 800d136:	4628      	mov	r0, r5
 800d138:	47b8      	blx	r7
 800d13a:	3001      	adds	r0, #1
 800d13c:	f43f aef7 	beq.w	800cf2e <_printf_float+0xc2>
 800d140:	f109 0901 	add.w	r9, r9, #1
 800d144:	e7ee      	b.n	800d124 <_printf_float+0x2b8>
 800d146:	bf00      	nop
 800d148:	7fefffff 	.word	0x7fefffff
 800d14c:	0802193c 	.word	0x0802193c
 800d150:	08021940 	.word	0x08021940
 800d154:	08021948 	.word	0x08021948
 800d158:	08021944 	.word	0x08021944
 800d15c:	0802194c 	.word	0x0802194c
 800d160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d164:	429a      	cmp	r2, r3
 800d166:	bfa8      	it	ge
 800d168:	461a      	movge	r2, r3
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	4691      	mov	r9, r2
 800d16e:	dc37      	bgt.n	800d1e0 <_printf_float+0x374>
 800d170:	f04f 0b00 	mov.w	fp, #0
 800d174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d178:	f104 021a 	add.w	r2, r4, #26
 800d17c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d17e:	9305      	str	r3, [sp, #20]
 800d180:	eba3 0309 	sub.w	r3, r3, r9
 800d184:	455b      	cmp	r3, fp
 800d186:	dc33      	bgt.n	800d1f0 <_printf_float+0x384>
 800d188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d18c:	429a      	cmp	r2, r3
 800d18e:	db3b      	blt.n	800d208 <_printf_float+0x39c>
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	07da      	lsls	r2, r3, #31
 800d194:	d438      	bmi.n	800d208 <_printf_float+0x39c>
 800d196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d198:	9a05      	ldr	r2, [sp, #20]
 800d19a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d19c:	1a9a      	subs	r2, r3, r2
 800d19e:	eba3 0901 	sub.w	r9, r3, r1
 800d1a2:	4591      	cmp	r9, r2
 800d1a4:	bfa8      	it	ge
 800d1a6:	4691      	movge	r9, r2
 800d1a8:	f1b9 0f00 	cmp.w	r9, #0
 800d1ac:	dc35      	bgt.n	800d21a <_printf_float+0x3ae>
 800d1ae:	f04f 0800 	mov.w	r8, #0
 800d1b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d1b6:	f104 0a1a 	add.w	sl, r4, #26
 800d1ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1be:	1a9b      	subs	r3, r3, r2
 800d1c0:	eba3 0309 	sub.w	r3, r3, r9
 800d1c4:	4543      	cmp	r3, r8
 800d1c6:	f77f af79 	ble.w	800d0bc <_printf_float+0x250>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4652      	mov	r2, sl
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	47b8      	blx	r7
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	f43f aeaa 	beq.w	800cf2e <_printf_float+0xc2>
 800d1da:	f108 0801 	add.w	r8, r8, #1
 800d1de:	e7ec      	b.n	800d1ba <_printf_float+0x34e>
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	4642      	mov	r2, r8
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	47b8      	blx	r7
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	d1c0      	bne.n	800d170 <_printf_float+0x304>
 800d1ee:	e69e      	b.n	800cf2e <_printf_float+0xc2>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	9205      	str	r2, [sp, #20]
 800d1f8:	47b8      	blx	r7
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	f43f ae97 	beq.w	800cf2e <_printf_float+0xc2>
 800d200:	9a05      	ldr	r2, [sp, #20]
 800d202:	f10b 0b01 	add.w	fp, fp, #1
 800d206:	e7b9      	b.n	800d17c <_printf_float+0x310>
 800d208:	ee18 3a10 	vmov	r3, s16
 800d20c:	4652      	mov	r2, sl
 800d20e:	4631      	mov	r1, r6
 800d210:	4628      	mov	r0, r5
 800d212:	47b8      	blx	r7
 800d214:	3001      	adds	r0, #1
 800d216:	d1be      	bne.n	800d196 <_printf_float+0x32a>
 800d218:	e689      	b.n	800cf2e <_printf_float+0xc2>
 800d21a:	9a05      	ldr	r2, [sp, #20]
 800d21c:	464b      	mov	r3, r9
 800d21e:	4442      	add	r2, r8
 800d220:	4631      	mov	r1, r6
 800d222:	4628      	mov	r0, r5
 800d224:	47b8      	blx	r7
 800d226:	3001      	adds	r0, #1
 800d228:	d1c1      	bne.n	800d1ae <_printf_float+0x342>
 800d22a:	e680      	b.n	800cf2e <_printf_float+0xc2>
 800d22c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d22e:	2a01      	cmp	r2, #1
 800d230:	dc01      	bgt.n	800d236 <_printf_float+0x3ca>
 800d232:	07db      	lsls	r3, r3, #31
 800d234:	d538      	bpl.n	800d2a8 <_printf_float+0x43c>
 800d236:	2301      	movs	r3, #1
 800d238:	4642      	mov	r2, r8
 800d23a:	4631      	mov	r1, r6
 800d23c:	4628      	mov	r0, r5
 800d23e:	47b8      	blx	r7
 800d240:	3001      	adds	r0, #1
 800d242:	f43f ae74 	beq.w	800cf2e <_printf_float+0xc2>
 800d246:	ee18 3a10 	vmov	r3, s16
 800d24a:	4652      	mov	r2, sl
 800d24c:	4631      	mov	r1, r6
 800d24e:	4628      	mov	r0, r5
 800d250:	47b8      	blx	r7
 800d252:	3001      	adds	r0, #1
 800d254:	f43f ae6b 	beq.w	800cf2e <_printf_float+0xc2>
 800d258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d25c:	2200      	movs	r2, #0
 800d25e:	2300      	movs	r3, #0
 800d260:	f7f3 fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 800d264:	b9d8      	cbnz	r0, 800d29e <_printf_float+0x432>
 800d266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d268:	f108 0201 	add.w	r2, r8, #1
 800d26c:	3b01      	subs	r3, #1
 800d26e:	4631      	mov	r1, r6
 800d270:	4628      	mov	r0, r5
 800d272:	47b8      	blx	r7
 800d274:	3001      	adds	r0, #1
 800d276:	d10e      	bne.n	800d296 <_printf_float+0x42a>
 800d278:	e659      	b.n	800cf2e <_printf_float+0xc2>
 800d27a:	2301      	movs	r3, #1
 800d27c:	4652      	mov	r2, sl
 800d27e:	4631      	mov	r1, r6
 800d280:	4628      	mov	r0, r5
 800d282:	47b8      	blx	r7
 800d284:	3001      	adds	r0, #1
 800d286:	f43f ae52 	beq.w	800cf2e <_printf_float+0xc2>
 800d28a:	f108 0801 	add.w	r8, r8, #1
 800d28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d290:	3b01      	subs	r3, #1
 800d292:	4543      	cmp	r3, r8
 800d294:	dcf1      	bgt.n	800d27a <_printf_float+0x40e>
 800d296:	464b      	mov	r3, r9
 800d298:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d29c:	e6dc      	b.n	800d058 <_printf_float+0x1ec>
 800d29e:	f04f 0800 	mov.w	r8, #0
 800d2a2:	f104 0a1a 	add.w	sl, r4, #26
 800d2a6:	e7f2      	b.n	800d28e <_printf_float+0x422>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	4642      	mov	r2, r8
 800d2ac:	e7df      	b.n	800d26e <_printf_float+0x402>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	464a      	mov	r2, r9
 800d2b2:	4631      	mov	r1, r6
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	47b8      	blx	r7
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	f43f ae38 	beq.w	800cf2e <_printf_float+0xc2>
 800d2be:	f108 0801 	add.w	r8, r8, #1
 800d2c2:	68e3      	ldr	r3, [r4, #12]
 800d2c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2c6:	1a5b      	subs	r3, r3, r1
 800d2c8:	4543      	cmp	r3, r8
 800d2ca:	dcf0      	bgt.n	800d2ae <_printf_float+0x442>
 800d2cc:	e6fa      	b.n	800d0c4 <_printf_float+0x258>
 800d2ce:	f04f 0800 	mov.w	r8, #0
 800d2d2:	f104 0919 	add.w	r9, r4, #25
 800d2d6:	e7f4      	b.n	800d2c2 <_printf_float+0x456>

0800d2d8 <_printf_common>:
 800d2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2dc:	4616      	mov	r6, r2
 800d2de:	4699      	mov	r9, r3
 800d2e0:	688a      	ldr	r2, [r1, #8]
 800d2e2:	690b      	ldr	r3, [r1, #16]
 800d2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	bfb8      	it	lt
 800d2ec:	4613      	movlt	r3, r2
 800d2ee:	6033      	str	r3, [r6, #0]
 800d2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2f4:	4607      	mov	r7, r0
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	b10a      	cbz	r2, 800d2fe <_printf_common+0x26>
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	6033      	str	r3, [r6, #0]
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	0699      	lsls	r1, r3, #26
 800d302:	bf42      	ittt	mi
 800d304:	6833      	ldrmi	r3, [r6, #0]
 800d306:	3302      	addmi	r3, #2
 800d308:	6033      	strmi	r3, [r6, #0]
 800d30a:	6825      	ldr	r5, [r4, #0]
 800d30c:	f015 0506 	ands.w	r5, r5, #6
 800d310:	d106      	bne.n	800d320 <_printf_common+0x48>
 800d312:	f104 0a19 	add.w	sl, r4, #25
 800d316:	68e3      	ldr	r3, [r4, #12]
 800d318:	6832      	ldr	r2, [r6, #0]
 800d31a:	1a9b      	subs	r3, r3, r2
 800d31c:	42ab      	cmp	r3, r5
 800d31e:	dc26      	bgt.n	800d36e <_printf_common+0x96>
 800d320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d324:	1e13      	subs	r3, r2, #0
 800d326:	6822      	ldr	r2, [r4, #0]
 800d328:	bf18      	it	ne
 800d32a:	2301      	movne	r3, #1
 800d32c:	0692      	lsls	r2, r2, #26
 800d32e:	d42b      	bmi.n	800d388 <_printf_common+0xb0>
 800d330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d334:	4649      	mov	r1, r9
 800d336:	4638      	mov	r0, r7
 800d338:	47c0      	blx	r8
 800d33a:	3001      	adds	r0, #1
 800d33c:	d01e      	beq.n	800d37c <_printf_common+0xa4>
 800d33e:	6823      	ldr	r3, [r4, #0]
 800d340:	68e5      	ldr	r5, [r4, #12]
 800d342:	6832      	ldr	r2, [r6, #0]
 800d344:	f003 0306 	and.w	r3, r3, #6
 800d348:	2b04      	cmp	r3, #4
 800d34a:	bf08      	it	eq
 800d34c:	1aad      	subeq	r5, r5, r2
 800d34e:	68a3      	ldr	r3, [r4, #8]
 800d350:	6922      	ldr	r2, [r4, #16]
 800d352:	bf0c      	ite	eq
 800d354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d358:	2500      	movne	r5, #0
 800d35a:	4293      	cmp	r3, r2
 800d35c:	bfc4      	itt	gt
 800d35e:	1a9b      	subgt	r3, r3, r2
 800d360:	18ed      	addgt	r5, r5, r3
 800d362:	2600      	movs	r6, #0
 800d364:	341a      	adds	r4, #26
 800d366:	42b5      	cmp	r5, r6
 800d368:	d11a      	bne.n	800d3a0 <_printf_common+0xc8>
 800d36a:	2000      	movs	r0, #0
 800d36c:	e008      	b.n	800d380 <_printf_common+0xa8>
 800d36e:	2301      	movs	r3, #1
 800d370:	4652      	mov	r2, sl
 800d372:	4649      	mov	r1, r9
 800d374:	4638      	mov	r0, r7
 800d376:	47c0      	blx	r8
 800d378:	3001      	adds	r0, #1
 800d37a:	d103      	bne.n	800d384 <_printf_common+0xac>
 800d37c:	f04f 30ff 	mov.w	r0, #4294967295
 800d380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d384:	3501      	adds	r5, #1
 800d386:	e7c6      	b.n	800d316 <_printf_common+0x3e>
 800d388:	18e1      	adds	r1, r4, r3
 800d38a:	1c5a      	adds	r2, r3, #1
 800d38c:	2030      	movs	r0, #48	; 0x30
 800d38e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d392:	4422      	add	r2, r4
 800d394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d39c:	3302      	adds	r3, #2
 800d39e:	e7c7      	b.n	800d330 <_printf_common+0x58>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	4649      	mov	r1, r9
 800d3a6:	4638      	mov	r0, r7
 800d3a8:	47c0      	blx	r8
 800d3aa:	3001      	adds	r0, #1
 800d3ac:	d0e6      	beq.n	800d37c <_printf_common+0xa4>
 800d3ae:	3601      	adds	r6, #1
 800d3b0:	e7d9      	b.n	800d366 <_printf_common+0x8e>
	...

0800d3b4 <_printf_i>:
 800d3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b8:	7e0f      	ldrb	r7, [r1, #24]
 800d3ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3bc:	2f78      	cmp	r7, #120	; 0x78
 800d3be:	4691      	mov	r9, r2
 800d3c0:	4680      	mov	r8, r0
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	469a      	mov	sl, r3
 800d3c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3ca:	d807      	bhi.n	800d3dc <_printf_i+0x28>
 800d3cc:	2f62      	cmp	r7, #98	; 0x62
 800d3ce:	d80a      	bhi.n	800d3e6 <_printf_i+0x32>
 800d3d0:	2f00      	cmp	r7, #0
 800d3d2:	f000 80d8 	beq.w	800d586 <_printf_i+0x1d2>
 800d3d6:	2f58      	cmp	r7, #88	; 0x58
 800d3d8:	f000 80a3 	beq.w	800d522 <_printf_i+0x16e>
 800d3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3e4:	e03a      	b.n	800d45c <_printf_i+0xa8>
 800d3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3ea:	2b15      	cmp	r3, #21
 800d3ec:	d8f6      	bhi.n	800d3dc <_printf_i+0x28>
 800d3ee:	a101      	add	r1, pc, #4	; (adr r1, 800d3f4 <_printf_i+0x40>)
 800d3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3f4:	0800d44d 	.word	0x0800d44d
 800d3f8:	0800d461 	.word	0x0800d461
 800d3fc:	0800d3dd 	.word	0x0800d3dd
 800d400:	0800d3dd 	.word	0x0800d3dd
 800d404:	0800d3dd 	.word	0x0800d3dd
 800d408:	0800d3dd 	.word	0x0800d3dd
 800d40c:	0800d461 	.word	0x0800d461
 800d410:	0800d3dd 	.word	0x0800d3dd
 800d414:	0800d3dd 	.word	0x0800d3dd
 800d418:	0800d3dd 	.word	0x0800d3dd
 800d41c:	0800d3dd 	.word	0x0800d3dd
 800d420:	0800d56d 	.word	0x0800d56d
 800d424:	0800d491 	.word	0x0800d491
 800d428:	0800d54f 	.word	0x0800d54f
 800d42c:	0800d3dd 	.word	0x0800d3dd
 800d430:	0800d3dd 	.word	0x0800d3dd
 800d434:	0800d58f 	.word	0x0800d58f
 800d438:	0800d3dd 	.word	0x0800d3dd
 800d43c:	0800d491 	.word	0x0800d491
 800d440:	0800d3dd 	.word	0x0800d3dd
 800d444:	0800d3dd 	.word	0x0800d3dd
 800d448:	0800d557 	.word	0x0800d557
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	1d1a      	adds	r2, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	602a      	str	r2, [r5, #0]
 800d454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d45c:	2301      	movs	r3, #1
 800d45e:	e0a3      	b.n	800d5a8 <_printf_i+0x1f4>
 800d460:	6820      	ldr	r0, [r4, #0]
 800d462:	6829      	ldr	r1, [r5, #0]
 800d464:	0606      	lsls	r6, r0, #24
 800d466:	f101 0304 	add.w	r3, r1, #4
 800d46a:	d50a      	bpl.n	800d482 <_printf_i+0xce>
 800d46c:	680e      	ldr	r6, [r1, #0]
 800d46e:	602b      	str	r3, [r5, #0]
 800d470:	2e00      	cmp	r6, #0
 800d472:	da03      	bge.n	800d47c <_printf_i+0xc8>
 800d474:	232d      	movs	r3, #45	; 0x2d
 800d476:	4276      	negs	r6, r6
 800d478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d47c:	485e      	ldr	r0, [pc, #376]	; (800d5f8 <_printf_i+0x244>)
 800d47e:	230a      	movs	r3, #10
 800d480:	e019      	b.n	800d4b6 <_printf_i+0x102>
 800d482:	680e      	ldr	r6, [r1, #0]
 800d484:	602b      	str	r3, [r5, #0]
 800d486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d48a:	bf18      	it	ne
 800d48c:	b236      	sxthne	r6, r6
 800d48e:	e7ef      	b.n	800d470 <_printf_i+0xbc>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	6820      	ldr	r0, [r4, #0]
 800d494:	1d19      	adds	r1, r3, #4
 800d496:	6029      	str	r1, [r5, #0]
 800d498:	0601      	lsls	r1, r0, #24
 800d49a:	d501      	bpl.n	800d4a0 <_printf_i+0xec>
 800d49c:	681e      	ldr	r6, [r3, #0]
 800d49e:	e002      	b.n	800d4a6 <_printf_i+0xf2>
 800d4a0:	0646      	lsls	r6, r0, #25
 800d4a2:	d5fb      	bpl.n	800d49c <_printf_i+0xe8>
 800d4a4:	881e      	ldrh	r6, [r3, #0]
 800d4a6:	4854      	ldr	r0, [pc, #336]	; (800d5f8 <_printf_i+0x244>)
 800d4a8:	2f6f      	cmp	r7, #111	; 0x6f
 800d4aa:	bf0c      	ite	eq
 800d4ac:	2308      	moveq	r3, #8
 800d4ae:	230a      	movne	r3, #10
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4b6:	6865      	ldr	r5, [r4, #4]
 800d4b8:	60a5      	str	r5, [r4, #8]
 800d4ba:	2d00      	cmp	r5, #0
 800d4bc:	bfa2      	ittt	ge
 800d4be:	6821      	ldrge	r1, [r4, #0]
 800d4c0:	f021 0104 	bicge.w	r1, r1, #4
 800d4c4:	6021      	strge	r1, [r4, #0]
 800d4c6:	b90e      	cbnz	r6, 800d4cc <_printf_i+0x118>
 800d4c8:	2d00      	cmp	r5, #0
 800d4ca:	d04d      	beq.n	800d568 <_printf_i+0x1b4>
 800d4cc:	4615      	mov	r5, r2
 800d4ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4d2:	fb03 6711 	mls	r7, r3, r1, r6
 800d4d6:	5dc7      	ldrb	r7, [r0, r7]
 800d4d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4dc:	4637      	mov	r7, r6
 800d4de:	42bb      	cmp	r3, r7
 800d4e0:	460e      	mov	r6, r1
 800d4e2:	d9f4      	bls.n	800d4ce <_printf_i+0x11a>
 800d4e4:	2b08      	cmp	r3, #8
 800d4e6:	d10b      	bne.n	800d500 <_printf_i+0x14c>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	07de      	lsls	r6, r3, #31
 800d4ec:	d508      	bpl.n	800d500 <_printf_i+0x14c>
 800d4ee:	6923      	ldr	r3, [r4, #16]
 800d4f0:	6861      	ldr	r1, [r4, #4]
 800d4f2:	4299      	cmp	r1, r3
 800d4f4:	bfde      	ittt	le
 800d4f6:	2330      	movle	r3, #48	; 0x30
 800d4f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d500:	1b52      	subs	r2, r2, r5
 800d502:	6122      	str	r2, [r4, #16]
 800d504:	f8cd a000 	str.w	sl, [sp]
 800d508:	464b      	mov	r3, r9
 800d50a:	aa03      	add	r2, sp, #12
 800d50c:	4621      	mov	r1, r4
 800d50e:	4640      	mov	r0, r8
 800d510:	f7ff fee2 	bl	800d2d8 <_printf_common>
 800d514:	3001      	adds	r0, #1
 800d516:	d14c      	bne.n	800d5b2 <_printf_i+0x1fe>
 800d518:	f04f 30ff 	mov.w	r0, #4294967295
 800d51c:	b004      	add	sp, #16
 800d51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d522:	4835      	ldr	r0, [pc, #212]	; (800d5f8 <_printf_i+0x244>)
 800d524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d528:	6829      	ldr	r1, [r5, #0]
 800d52a:	6823      	ldr	r3, [r4, #0]
 800d52c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d530:	6029      	str	r1, [r5, #0]
 800d532:	061d      	lsls	r5, r3, #24
 800d534:	d514      	bpl.n	800d560 <_printf_i+0x1ac>
 800d536:	07df      	lsls	r7, r3, #31
 800d538:	bf44      	itt	mi
 800d53a:	f043 0320 	orrmi.w	r3, r3, #32
 800d53e:	6023      	strmi	r3, [r4, #0]
 800d540:	b91e      	cbnz	r6, 800d54a <_printf_i+0x196>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	f023 0320 	bic.w	r3, r3, #32
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	2310      	movs	r3, #16
 800d54c:	e7b0      	b.n	800d4b0 <_printf_i+0xfc>
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	f043 0320 	orr.w	r3, r3, #32
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	2378      	movs	r3, #120	; 0x78
 800d558:	4828      	ldr	r0, [pc, #160]	; (800d5fc <_printf_i+0x248>)
 800d55a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d55e:	e7e3      	b.n	800d528 <_printf_i+0x174>
 800d560:	0659      	lsls	r1, r3, #25
 800d562:	bf48      	it	mi
 800d564:	b2b6      	uxthmi	r6, r6
 800d566:	e7e6      	b.n	800d536 <_printf_i+0x182>
 800d568:	4615      	mov	r5, r2
 800d56a:	e7bb      	b.n	800d4e4 <_printf_i+0x130>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	6826      	ldr	r6, [r4, #0]
 800d570:	6961      	ldr	r1, [r4, #20]
 800d572:	1d18      	adds	r0, r3, #4
 800d574:	6028      	str	r0, [r5, #0]
 800d576:	0635      	lsls	r5, r6, #24
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	d501      	bpl.n	800d580 <_printf_i+0x1cc>
 800d57c:	6019      	str	r1, [r3, #0]
 800d57e:	e002      	b.n	800d586 <_printf_i+0x1d2>
 800d580:	0670      	lsls	r0, r6, #25
 800d582:	d5fb      	bpl.n	800d57c <_printf_i+0x1c8>
 800d584:	8019      	strh	r1, [r3, #0]
 800d586:	2300      	movs	r3, #0
 800d588:	6123      	str	r3, [r4, #16]
 800d58a:	4615      	mov	r5, r2
 800d58c:	e7ba      	b.n	800d504 <_printf_i+0x150>
 800d58e:	682b      	ldr	r3, [r5, #0]
 800d590:	1d1a      	adds	r2, r3, #4
 800d592:	602a      	str	r2, [r5, #0]
 800d594:	681d      	ldr	r5, [r3, #0]
 800d596:	6862      	ldr	r2, [r4, #4]
 800d598:	2100      	movs	r1, #0
 800d59a:	4628      	mov	r0, r5
 800d59c:	f7f2 fe20 	bl	80001e0 <memchr>
 800d5a0:	b108      	cbz	r0, 800d5a6 <_printf_i+0x1f2>
 800d5a2:	1b40      	subs	r0, r0, r5
 800d5a4:	6060      	str	r0, [r4, #4]
 800d5a6:	6863      	ldr	r3, [r4, #4]
 800d5a8:	6123      	str	r3, [r4, #16]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5b0:	e7a8      	b.n	800d504 <_printf_i+0x150>
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	462a      	mov	r2, r5
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	4640      	mov	r0, r8
 800d5ba:	47d0      	blx	sl
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d0ab      	beq.n	800d518 <_printf_i+0x164>
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	079b      	lsls	r3, r3, #30
 800d5c4:	d413      	bmi.n	800d5ee <_printf_i+0x23a>
 800d5c6:	68e0      	ldr	r0, [r4, #12]
 800d5c8:	9b03      	ldr	r3, [sp, #12]
 800d5ca:	4298      	cmp	r0, r3
 800d5cc:	bfb8      	it	lt
 800d5ce:	4618      	movlt	r0, r3
 800d5d0:	e7a4      	b.n	800d51c <_printf_i+0x168>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	4640      	mov	r0, r8
 800d5da:	47d0      	blx	sl
 800d5dc:	3001      	adds	r0, #1
 800d5de:	d09b      	beq.n	800d518 <_printf_i+0x164>
 800d5e0:	3501      	adds	r5, #1
 800d5e2:	68e3      	ldr	r3, [r4, #12]
 800d5e4:	9903      	ldr	r1, [sp, #12]
 800d5e6:	1a5b      	subs	r3, r3, r1
 800d5e8:	42ab      	cmp	r3, r5
 800d5ea:	dcf2      	bgt.n	800d5d2 <_printf_i+0x21e>
 800d5ec:	e7eb      	b.n	800d5c6 <_printf_i+0x212>
 800d5ee:	2500      	movs	r5, #0
 800d5f0:	f104 0619 	add.w	r6, r4, #25
 800d5f4:	e7f5      	b.n	800d5e2 <_printf_i+0x22e>
 800d5f6:	bf00      	nop
 800d5f8:	0802194e 	.word	0x0802194e
 800d5fc:	0802195f 	.word	0x0802195f

0800d600 <_scanf_float>:
 800d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	b087      	sub	sp, #28
 800d606:	4617      	mov	r7, r2
 800d608:	9303      	str	r3, [sp, #12]
 800d60a:	688b      	ldr	r3, [r1, #8]
 800d60c:	1e5a      	subs	r2, r3, #1
 800d60e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d612:	bf83      	ittte	hi
 800d614:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d618:	195b      	addhi	r3, r3, r5
 800d61a:	9302      	strhi	r3, [sp, #8]
 800d61c:	2300      	movls	r3, #0
 800d61e:	bf86      	itte	hi
 800d620:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d624:	608b      	strhi	r3, [r1, #8]
 800d626:	9302      	strls	r3, [sp, #8]
 800d628:	680b      	ldr	r3, [r1, #0]
 800d62a:	468b      	mov	fp, r1
 800d62c:	2500      	movs	r5, #0
 800d62e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d632:	f84b 3b1c 	str.w	r3, [fp], #28
 800d636:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d63a:	4680      	mov	r8, r0
 800d63c:	460c      	mov	r4, r1
 800d63e:	465e      	mov	r6, fp
 800d640:	46aa      	mov	sl, r5
 800d642:	46a9      	mov	r9, r5
 800d644:	9501      	str	r5, [sp, #4]
 800d646:	68a2      	ldr	r2, [r4, #8]
 800d648:	b152      	cbz	r2, 800d660 <_scanf_float+0x60>
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	2b4e      	cmp	r3, #78	; 0x4e
 800d650:	d864      	bhi.n	800d71c <_scanf_float+0x11c>
 800d652:	2b40      	cmp	r3, #64	; 0x40
 800d654:	d83c      	bhi.n	800d6d0 <_scanf_float+0xd0>
 800d656:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d65a:	b2c8      	uxtb	r0, r1
 800d65c:	280e      	cmp	r0, #14
 800d65e:	d93a      	bls.n	800d6d6 <_scanf_float+0xd6>
 800d660:	f1b9 0f00 	cmp.w	r9, #0
 800d664:	d003      	beq.n	800d66e <_scanf_float+0x6e>
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d672:	f1ba 0f01 	cmp.w	sl, #1
 800d676:	f200 8113 	bhi.w	800d8a0 <_scanf_float+0x2a0>
 800d67a:	455e      	cmp	r6, fp
 800d67c:	f200 8105 	bhi.w	800d88a <_scanf_float+0x28a>
 800d680:	2501      	movs	r5, #1
 800d682:	4628      	mov	r0, r5
 800d684:	b007      	add	sp, #28
 800d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d68e:	2a0d      	cmp	r2, #13
 800d690:	d8e6      	bhi.n	800d660 <_scanf_float+0x60>
 800d692:	a101      	add	r1, pc, #4	; (adr r1, 800d698 <_scanf_float+0x98>)
 800d694:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d698:	0800d7d7 	.word	0x0800d7d7
 800d69c:	0800d661 	.word	0x0800d661
 800d6a0:	0800d661 	.word	0x0800d661
 800d6a4:	0800d661 	.word	0x0800d661
 800d6a8:	0800d837 	.word	0x0800d837
 800d6ac:	0800d80f 	.word	0x0800d80f
 800d6b0:	0800d661 	.word	0x0800d661
 800d6b4:	0800d661 	.word	0x0800d661
 800d6b8:	0800d7e5 	.word	0x0800d7e5
 800d6bc:	0800d661 	.word	0x0800d661
 800d6c0:	0800d661 	.word	0x0800d661
 800d6c4:	0800d661 	.word	0x0800d661
 800d6c8:	0800d661 	.word	0x0800d661
 800d6cc:	0800d79d 	.word	0x0800d79d
 800d6d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d6d4:	e7db      	b.n	800d68e <_scanf_float+0x8e>
 800d6d6:	290e      	cmp	r1, #14
 800d6d8:	d8c2      	bhi.n	800d660 <_scanf_float+0x60>
 800d6da:	a001      	add	r0, pc, #4	; (adr r0, 800d6e0 <_scanf_float+0xe0>)
 800d6dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d6e0:	0800d78f 	.word	0x0800d78f
 800d6e4:	0800d661 	.word	0x0800d661
 800d6e8:	0800d78f 	.word	0x0800d78f
 800d6ec:	0800d823 	.word	0x0800d823
 800d6f0:	0800d661 	.word	0x0800d661
 800d6f4:	0800d73d 	.word	0x0800d73d
 800d6f8:	0800d779 	.word	0x0800d779
 800d6fc:	0800d779 	.word	0x0800d779
 800d700:	0800d779 	.word	0x0800d779
 800d704:	0800d779 	.word	0x0800d779
 800d708:	0800d779 	.word	0x0800d779
 800d70c:	0800d779 	.word	0x0800d779
 800d710:	0800d779 	.word	0x0800d779
 800d714:	0800d779 	.word	0x0800d779
 800d718:	0800d779 	.word	0x0800d779
 800d71c:	2b6e      	cmp	r3, #110	; 0x6e
 800d71e:	d809      	bhi.n	800d734 <_scanf_float+0x134>
 800d720:	2b60      	cmp	r3, #96	; 0x60
 800d722:	d8b2      	bhi.n	800d68a <_scanf_float+0x8a>
 800d724:	2b54      	cmp	r3, #84	; 0x54
 800d726:	d077      	beq.n	800d818 <_scanf_float+0x218>
 800d728:	2b59      	cmp	r3, #89	; 0x59
 800d72a:	d199      	bne.n	800d660 <_scanf_float+0x60>
 800d72c:	2d07      	cmp	r5, #7
 800d72e:	d197      	bne.n	800d660 <_scanf_float+0x60>
 800d730:	2508      	movs	r5, #8
 800d732:	e029      	b.n	800d788 <_scanf_float+0x188>
 800d734:	2b74      	cmp	r3, #116	; 0x74
 800d736:	d06f      	beq.n	800d818 <_scanf_float+0x218>
 800d738:	2b79      	cmp	r3, #121	; 0x79
 800d73a:	e7f6      	b.n	800d72a <_scanf_float+0x12a>
 800d73c:	6821      	ldr	r1, [r4, #0]
 800d73e:	05c8      	lsls	r0, r1, #23
 800d740:	d51a      	bpl.n	800d778 <_scanf_float+0x178>
 800d742:	9b02      	ldr	r3, [sp, #8]
 800d744:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d748:	6021      	str	r1, [r4, #0]
 800d74a:	f109 0901 	add.w	r9, r9, #1
 800d74e:	b11b      	cbz	r3, 800d758 <_scanf_float+0x158>
 800d750:	3b01      	subs	r3, #1
 800d752:	3201      	adds	r2, #1
 800d754:	9302      	str	r3, [sp, #8]
 800d756:	60a2      	str	r2, [r4, #8]
 800d758:	68a3      	ldr	r3, [r4, #8]
 800d75a:	3b01      	subs	r3, #1
 800d75c:	60a3      	str	r3, [r4, #8]
 800d75e:	6923      	ldr	r3, [r4, #16]
 800d760:	3301      	adds	r3, #1
 800d762:	6123      	str	r3, [r4, #16]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3b01      	subs	r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	607b      	str	r3, [r7, #4]
 800d76c:	f340 8084 	ble.w	800d878 <_scanf_float+0x278>
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	3301      	adds	r3, #1
 800d774:	603b      	str	r3, [r7, #0]
 800d776:	e766      	b.n	800d646 <_scanf_float+0x46>
 800d778:	eb1a 0f05 	cmn.w	sl, r5
 800d77c:	f47f af70 	bne.w	800d660 <_scanf_float+0x60>
 800d780:	6822      	ldr	r2, [r4, #0]
 800d782:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d786:	6022      	str	r2, [r4, #0]
 800d788:	f806 3b01 	strb.w	r3, [r6], #1
 800d78c:	e7e4      	b.n	800d758 <_scanf_float+0x158>
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	0610      	lsls	r0, r2, #24
 800d792:	f57f af65 	bpl.w	800d660 <_scanf_float+0x60>
 800d796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d79a:	e7f4      	b.n	800d786 <_scanf_float+0x186>
 800d79c:	f1ba 0f00 	cmp.w	sl, #0
 800d7a0:	d10e      	bne.n	800d7c0 <_scanf_float+0x1c0>
 800d7a2:	f1b9 0f00 	cmp.w	r9, #0
 800d7a6:	d10e      	bne.n	800d7c6 <_scanf_float+0x1c6>
 800d7a8:	6822      	ldr	r2, [r4, #0]
 800d7aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d7ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d7b2:	d108      	bne.n	800d7c6 <_scanf_float+0x1c6>
 800d7b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d7b8:	6022      	str	r2, [r4, #0]
 800d7ba:	f04f 0a01 	mov.w	sl, #1
 800d7be:	e7e3      	b.n	800d788 <_scanf_float+0x188>
 800d7c0:	f1ba 0f02 	cmp.w	sl, #2
 800d7c4:	d055      	beq.n	800d872 <_scanf_float+0x272>
 800d7c6:	2d01      	cmp	r5, #1
 800d7c8:	d002      	beq.n	800d7d0 <_scanf_float+0x1d0>
 800d7ca:	2d04      	cmp	r5, #4
 800d7cc:	f47f af48 	bne.w	800d660 <_scanf_float+0x60>
 800d7d0:	3501      	adds	r5, #1
 800d7d2:	b2ed      	uxtb	r5, r5
 800d7d4:	e7d8      	b.n	800d788 <_scanf_float+0x188>
 800d7d6:	f1ba 0f01 	cmp.w	sl, #1
 800d7da:	f47f af41 	bne.w	800d660 <_scanf_float+0x60>
 800d7de:	f04f 0a02 	mov.w	sl, #2
 800d7e2:	e7d1      	b.n	800d788 <_scanf_float+0x188>
 800d7e4:	b97d      	cbnz	r5, 800d806 <_scanf_float+0x206>
 800d7e6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ea:	f47f af3c 	bne.w	800d666 <_scanf_float+0x66>
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d7f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d7f8:	f47f af39 	bne.w	800d66e <_scanf_float+0x6e>
 800d7fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d800:	6022      	str	r2, [r4, #0]
 800d802:	2501      	movs	r5, #1
 800d804:	e7c0      	b.n	800d788 <_scanf_float+0x188>
 800d806:	2d03      	cmp	r5, #3
 800d808:	d0e2      	beq.n	800d7d0 <_scanf_float+0x1d0>
 800d80a:	2d05      	cmp	r5, #5
 800d80c:	e7de      	b.n	800d7cc <_scanf_float+0x1cc>
 800d80e:	2d02      	cmp	r5, #2
 800d810:	f47f af26 	bne.w	800d660 <_scanf_float+0x60>
 800d814:	2503      	movs	r5, #3
 800d816:	e7b7      	b.n	800d788 <_scanf_float+0x188>
 800d818:	2d06      	cmp	r5, #6
 800d81a:	f47f af21 	bne.w	800d660 <_scanf_float+0x60>
 800d81e:	2507      	movs	r5, #7
 800d820:	e7b2      	b.n	800d788 <_scanf_float+0x188>
 800d822:	6822      	ldr	r2, [r4, #0]
 800d824:	0591      	lsls	r1, r2, #22
 800d826:	f57f af1b 	bpl.w	800d660 <_scanf_float+0x60>
 800d82a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d82e:	6022      	str	r2, [r4, #0]
 800d830:	f8cd 9004 	str.w	r9, [sp, #4]
 800d834:	e7a8      	b.n	800d788 <_scanf_float+0x188>
 800d836:	6822      	ldr	r2, [r4, #0]
 800d838:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d83c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d840:	d006      	beq.n	800d850 <_scanf_float+0x250>
 800d842:	0550      	lsls	r0, r2, #21
 800d844:	f57f af0c 	bpl.w	800d660 <_scanf_float+0x60>
 800d848:	f1b9 0f00 	cmp.w	r9, #0
 800d84c:	f43f af0f 	beq.w	800d66e <_scanf_float+0x6e>
 800d850:	0591      	lsls	r1, r2, #22
 800d852:	bf58      	it	pl
 800d854:	9901      	ldrpl	r1, [sp, #4]
 800d856:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d85a:	bf58      	it	pl
 800d85c:	eba9 0101 	subpl.w	r1, r9, r1
 800d860:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d864:	bf58      	it	pl
 800d866:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d86a:	6022      	str	r2, [r4, #0]
 800d86c:	f04f 0900 	mov.w	r9, #0
 800d870:	e78a      	b.n	800d788 <_scanf_float+0x188>
 800d872:	f04f 0a03 	mov.w	sl, #3
 800d876:	e787      	b.n	800d788 <_scanf_float+0x188>
 800d878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d87c:	4639      	mov	r1, r7
 800d87e:	4640      	mov	r0, r8
 800d880:	4798      	blx	r3
 800d882:	2800      	cmp	r0, #0
 800d884:	f43f aedf 	beq.w	800d646 <_scanf_float+0x46>
 800d888:	e6ea      	b.n	800d660 <_scanf_float+0x60>
 800d88a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d88e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d892:	463a      	mov	r2, r7
 800d894:	4640      	mov	r0, r8
 800d896:	4798      	blx	r3
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	3b01      	subs	r3, #1
 800d89c:	6123      	str	r3, [r4, #16]
 800d89e:	e6ec      	b.n	800d67a <_scanf_float+0x7a>
 800d8a0:	1e6b      	subs	r3, r5, #1
 800d8a2:	2b06      	cmp	r3, #6
 800d8a4:	d825      	bhi.n	800d8f2 <_scanf_float+0x2f2>
 800d8a6:	2d02      	cmp	r5, #2
 800d8a8:	d836      	bhi.n	800d918 <_scanf_float+0x318>
 800d8aa:	455e      	cmp	r6, fp
 800d8ac:	f67f aee8 	bls.w	800d680 <_scanf_float+0x80>
 800d8b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d8b8:	463a      	mov	r2, r7
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	4798      	blx	r3
 800d8be:	6923      	ldr	r3, [r4, #16]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	6123      	str	r3, [r4, #16]
 800d8c4:	e7f1      	b.n	800d8aa <_scanf_float+0x2aa>
 800d8c6:	9802      	ldr	r0, [sp, #8]
 800d8c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d8d0:	9002      	str	r0, [sp, #8]
 800d8d2:	463a      	mov	r2, r7
 800d8d4:	4640      	mov	r0, r8
 800d8d6:	4798      	blx	r3
 800d8d8:	6923      	ldr	r3, [r4, #16]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	6123      	str	r3, [r4, #16]
 800d8de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8e2:	fa5f fa8a 	uxtb.w	sl, sl
 800d8e6:	f1ba 0f02 	cmp.w	sl, #2
 800d8ea:	d1ec      	bne.n	800d8c6 <_scanf_float+0x2c6>
 800d8ec:	3d03      	subs	r5, #3
 800d8ee:	b2ed      	uxtb	r5, r5
 800d8f0:	1b76      	subs	r6, r6, r5
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	05da      	lsls	r2, r3, #23
 800d8f6:	d52f      	bpl.n	800d958 <_scanf_float+0x358>
 800d8f8:	055b      	lsls	r3, r3, #21
 800d8fa:	d510      	bpl.n	800d91e <_scanf_float+0x31e>
 800d8fc:	455e      	cmp	r6, fp
 800d8fe:	f67f aebf 	bls.w	800d680 <_scanf_float+0x80>
 800d902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d90a:	463a      	mov	r2, r7
 800d90c:	4640      	mov	r0, r8
 800d90e:	4798      	blx	r3
 800d910:	6923      	ldr	r3, [r4, #16]
 800d912:	3b01      	subs	r3, #1
 800d914:	6123      	str	r3, [r4, #16]
 800d916:	e7f1      	b.n	800d8fc <_scanf_float+0x2fc>
 800d918:	46aa      	mov	sl, r5
 800d91a:	9602      	str	r6, [sp, #8]
 800d91c:	e7df      	b.n	800d8de <_scanf_float+0x2de>
 800d91e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	2965      	cmp	r1, #101	; 0x65
 800d926:	f103 33ff 	add.w	r3, r3, #4294967295
 800d92a:	f106 35ff 	add.w	r5, r6, #4294967295
 800d92e:	6123      	str	r3, [r4, #16]
 800d930:	d00c      	beq.n	800d94c <_scanf_float+0x34c>
 800d932:	2945      	cmp	r1, #69	; 0x45
 800d934:	d00a      	beq.n	800d94c <_scanf_float+0x34c>
 800d936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d93a:	463a      	mov	r2, r7
 800d93c:	4640      	mov	r0, r8
 800d93e:	4798      	blx	r3
 800d940:	6923      	ldr	r3, [r4, #16]
 800d942:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d946:	3b01      	subs	r3, #1
 800d948:	1eb5      	subs	r5, r6, #2
 800d94a:	6123      	str	r3, [r4, #16]
 800d94c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d950:	463a      	mov	r2, r7
 800d952:	4640      	mov	r0, r8
 800d954:	4798      	blx	r3
 800d956:	462e      	mov	r6, r5
 800d958:	6825      	ldr	r5, [r4, #0]
 800d95a:	f015 0510 	ands.w	r5, r5, #16
 800d95e:	d159      	bne.n	800da14 <_scanf_float+0x414>
 800d960:	7035      	strb	r5, [r6, #0]
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d96c:	d11b      	bne.n	800d9a6 <_scanf_float+0x3a6>
 800d96e:	9b01      	ldr	r3, [sp, #4]
 800d970:	454b      	cmp	r3, r9
 800d972:	eba3 0209 	sub.w	r2, r3, r9
 800d976:	d123      	bne.n	800d9c0 <_scanf_float+0x3c0>
 800d978:	2200      	movs	r2, #0
 800d97a:	4659      	mov	r1, fp
 800d97c:	4640      	mov	r0, r8
 800d97e:	f000 fecd 	bl	800e71c <_strtod_r>
 800d982:	6822      	ldr	r2, [r4, #0]
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	f012 0f02 	tst.w	r2, #2
 800d98a:	ec57 6b10 	vmov	r6, r7, d0
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	d021      	beq.n	800d9d6 <_scanf_float+0x3d6>
 800d992:	9903      	ldr	r1, [sp, #12]
 800d994:	1d1a      	adds	r2, r3, #4
 800d996:	600a      	str	r2, [r1, #0]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	e9c3 6700 	strd	r6, r7, [r3]
 800d99e:	68e3      	ldr	r3, [r4, #12]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	60e3      	str	r3, [r4, #12]
 800d9a4:	e66d      	b.n	800d682 <_scanf_float+0x82>
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d0e5      	beq.n	800d978 <_scanf_float+0x378>
 800d9ac:	9905      	ldr	r1, [sp, #20]
 800d9ae:	230a      	movs	r3, #10
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	3101      	adds	r1, #1
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	f000 ff39 	bl	800e82c <_strtol_r>
 800d9ba:	9b04      	ldr	r3, [sp, #16]
 800d9bc:	9e05      	ldr	r6, [sp, #20]
 800d9be:	1ac2      	subs	r2, r0, r3
 800d9c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d9c4:	429e      	cmp	r6, r3
 800d9c6:	bf28      	it	cs
 800d9c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d9cc:	4912      	ldr	r1, [pc, #72]	; (800da18 <_scanf_float+0x418>)
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f000 f860 	bl	800da94 <siprintf>
 800d9d4:	e7d0      	b.n	800d978 <_scanf_float+0x378>
 800d9d6:	9903      	ldr	r1, [sp, #12]
 800d9d8:	f012 0f04 	tst.w	r2, #4
 800d9dc:	f103 0204 	add.w	r2, r3, #4
 800d9e0:	600a      	str	r2, [r1, #0]
 800d9e2:	d1d9      	bne.n	800d998 <_scanf_float+0x398>
 800d9e4:	f8d3 8000 	ldr.w	r8, [r3]
 800d9e8:	ee10 2a10 	vmov	r2, s0
 800d9ec:	ee10 0a10 	vmov	r0, s0
 800d9f0:	463b      	mov	r3, r7
 800d9f2:	4639      	mov	r1, r7
 800d9f4:	f7f3 f89a 	bl	8000b2c <__aeabi_dcmpun>
 800d9f8:	b128      	cbz	r0, 800da06 <_scanf_float+0x406>
 800d9fa:	4808      	ldr	r0, [pc, #32]	; (800da1c <_scanf_float+0x41c>)
 800d9fc:	f000 f810 	bl	800da20 <nanf>
 800da00:	ed88 0a00 	vstr	s0, [r8]
 800da04:	e7cb      	b.n	800d99e <_scanf_float+0x39e>
 800da06:	4630      	mov	r0, r6
 800da08:	4639      	mov	r1, r7
 800da0a:	f7f3 f8ed 	bl	8000be8 <__aeabi_d2f>
 800da0e:	f8c8 0000 	str.w	r0, [r8]
 800da12:	e7c4      	b.n	800d99e <_scanf_float+0x39e>
 800da14:	2500      	movs	r5, #0
 800da16:	e634      	b.n	800d682 <_scanf_float+0x82>
 800da18:	08021970 	.word	0x08021970
 800da1c:	08021d78 	.word	0x08021d78

0800da20 <nanf>:
 800da20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800da28 <nanf+0x8>
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	7fc00000 	.word	0x7fc00000

0800da2c <sniprintf>:
 800da2c:	b40c      	push	{r2, r3}
 800da2e:	b530      	push	{r4, r5, lr}
 800da30:	4b17      	ldr	r3, [pc, #92]	; (800da90 <sniprintf+0x64>)
 800da32:	1e0c      	subs	r4, r1, #0
 800da34:	681d      	ldr	r5, [r3, #0]
 800da36:	b09d      	sub	sp, #116	; 0x74
 800da38:	da08      	bge.n	800da4c <sniprintf+0x20>
 800da3a:	238b      	movs	r3, #139	; 0x8b
 800da3c:	602b      	str	r3, [r5, #0]
 800da3e:	f04f 30ff 	mov.w	r0, #4294967295
 800da42:	b01d      	add	sp, #116	; 0x74
 800da44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da48:	b002      	add	sp, #8
 800da4a:	4770      	bx	lr
 800da4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800da50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da54:	bf14      	ite	ne
 800da56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da5a:	4623      	moveq	r3, r4
 800da5c:	9304      	str	r3, [sp, #16]
 800da5e:	9307      	str	r3, [sp, #28]
 800da60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da64:	9002      	str	r0, [sp, #8]
 800da66:	9006      	str	r0, [sp, #24]
 800da68:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da6e:	ab21      	add	r3, sp, #132	; 0x84
 800da70:	a902      	add	r1, sp, #8
 800da72:	4628      	mov	r0, r5
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	f002 ff03 	bl	8010880 <_svfiprintf_r>
 800da7a:	1c43      	adds	r3, r0, #1
 800da7c:	bfbc      	itt	lt
 800da7e:	238b      	movlt	r3, #139	; 0x8b
 800da80:	602b      	strlt	r3, [r5, #0]
 800da82:	2c00      	cmp	r4, #0
 800da84:	d0dd      	beq.n	800da42 <sniprintf+0x16>
 800da86:	9b02      	ldr	r3, [sp, #8]
 800da88:	2200      	movs	r2, #0
 800da8a:	701a      	strb	r2, [r3, #0]
 800da8c:	e7d9      	b.n	800da42 <sniprintf+0x16>
 800da8e:	bf00      	nop
 800da90:	2000007c 	.word	0x2000007c

0800da94 <siprintf>:
 800da94:	b40e      	push	{r1, r2, r3}
 800da96:	b500      	push	{lr}
 800da98:	b09c      	sub	sp, #112	; 0x70
 800da9a:	ab1d      	add	r3, sp, #116	; 0x74
 800da9c:	9002      	str	r0, [sp, #8]
 800da9e:	9006      	str	r0, [sp, #24]
 800daa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800daa4:	4809      	ldr	r0, [pc, #36]	; (800dacc <siprintf+0x38>)
 800daa6:	9107      	str	r1, [sp, #28]
 800daa8:	9104      	str	r1, [sp, #16]
 800daaa:	4909      	ldr	r1, [pc, #36]	; (800dad0 <siprintf+0x3c>)
 800daac:	f853 2b04 	ldr.w	r2, [r3], #4
 800dab0:	9105      	str	r1, [sp, #20]
 800dab2:	6800      	ldr	r0, [r0, #0]
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	a902      	add	r1, sp, #8
 800dab8:	f002 fee2 	bl	8010880 <_svfiprintf_r>
 800dabc:	9b02      	ldr	r3, [sp, #8]
 800dabe:	2200      	movs	r2, #0
 800dac0:	701a      	strb	r2, [r3, #0]
 800dac2:	b01c      	add	sp, #112	; 0x70
 800dac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dac8:	b003      	add	sp, #12
 800daca:	4770      	bx	lr
 800dacc:	2000007c 	.word	0x2000007c
 800dad0:	ffff0208 	.word	0xffff0208

0800dad4 <sulp>:
 800dad4:	b570      	push	{r4, r5, r6, lr}
 800dad6:	4604      	mov	r4, r0
 800dad8:	460d      	mov	r5, r1
 800dada:	ec45 4b10 	vmov	d0, r4, r5
 800dade:	4616      	mov	r6, r2
 800dae0:	f002 fc2c 	bl	801033c <__ulp>
 800dae4:	ec51 0b10 	vmov	r0, r1, d0
 800dae8:	b17e      	cbz	r6, 800db0a <sulp+0x36>
 800daea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800daee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	dd09      	ble.n	800db0a <sulp+0x36>
 800daf6:	051b      	lsls	r3, r3, #20
 800daf8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dafc:	2400      	movs	r4, #0
 800dafe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800db02:	4622      	mov	r2, r4
 800db04:	462b      	mov	r3, r5
 800db06:	f7f2 fd77 	bl	80005f8 <__aeabi_dmul>
 800db0a:	bd70      	pop	{r4, r5, r6, pc}
 800db0c:	0000      	movs	r0, r0
	...

0800db10 <_strtod_l>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	ed2d 8b02 	vpush	{d8}
 800db18:	b09d      	sub	sp, #116	; 0x74
 800db1a:	461f      	mov	r7, r3
 800db1c:	2300      	movs	r3, #0
 800db1e:	9318      	str	r3, [sp, #96]	; 0x60
 800db20:	4ba2      	ldr	r3, [pc, #648]	; (800ddac <_strtod_l+0x29c>)
 800db22:	9213      	str	r2, [sp, #76]	; 0x4c
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	9305      	str	r3, [sp, #20]
 800db28:	4604      	mov	r4, r0
 800db2a:	4618      	mov	r0, r3
 800db2c:	4688      	mov	r8, r1
 800db2e:	f7f2 fb4f 	bl	80001d0 <strlen>
 800db32:	f04f 0a00 	mov.w	sl, #0
 800db36:	4605      	mov	r5, r0
 800db38:	f04f 0b00 	mov.w	fp, #0
 800db3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800db40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db42:	781a      	ldrb	r2, [r3, #0]
 800db44:	2a2b      	cmp	r2, #43	; 0x2b
 800db46:	d04e      	beq.n	800dbe6 <_strtod_l+0xd6>
 800db48:	d83b      	bhi.n	800dbc2 <_strtod_l+0xb2>
 800db4a:	2a0d      	cmp	r2, #13
 800db4c:	d834      	bhi.n	800dbb8 <_strtod_l+0xa8>
 800db4e:	2a08      	cmp	r2, #8
 800db50:	d834      	bhi.n	800dbbc <_strtod_l+0xac>
 800db52:	2a00      	cmp	r2, #0
 800db54:	d03e      	beq.n	800dbd4 <_strtod_l+0xc4>
 800db56:	2300      	movs	r3, #0
 800db58:	930a      	str	r3, [sp, #40]	; 0x28
 800db5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800db5c:	7833      	ldrb	r3, [r6, #0]
 800db5e:	2b30      	cmp	r3, #48	; 0x30
 800db60:	f040 80b0 	bne.w	800dcc4 <_strtod_l+0x1b4>
 800db64:	7873      	ldrb	r3, [r6, #1]
 800db66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db6a:	2b58      	cmp	r3, #88	; 0x58
 800db6c:	d168      	bne.n	800dc40 <_strtod_l+0x130>
 800db6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db70:	9301      	str	r3, [sp, #4]
 800db72:	ab18      	add	r3, sp, #96	; 0x60
 800db74:	9702      	str	r7, [sp, #8]
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	4a8d      	ldr	r2, [pc, #564]	; (800ddb0 <_strtod_l+0x2a0>)
 800db7a:	ab19      	add	r3, sp, #100	; 0x64
 800db7c:	a917      	add	r1, sp, #92	; 0x5c
 800db7e:	4620      	mov	r0, r4
 800db80:	f001 fd44 	bl	800f60c <__gethex>
 800db84:	f010 0707 	ands.w	r7, r0, #7
 800db88:	4605      	mov	r5, r0
 800db8a:	d005      	beq.n	800db98 <_strtod_l+0x88>
 800db8c:	2f06      	cmp	r7, #6
 800db8e:	d12c      	bne.n	800dbea <_strtod_l+0xda>
 800db90:	3601      	adds	r6, #1
 800db92:	2300      	movs	r3, #0
 800db94:	9617      	str	r6, [sp, #92]	; 0x5c
 800db96:	930a      	str	r3, [sp, #40]	; 0x28
 800db98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f040 8590 	bne.w	800e6c0 <_strtod_l+0xbb0>
 800dba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba2:	b1eb      	cbz	r3, 800dbe0 <_strtod_l+0xd0>
 800dba4:	4652      	mov	r2, sl
 800dba6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dbaa:	ec43 2b10 	vmov	d0, r2, r3
 800dbae:	b01d      	add	sp, #116	; 0x74
 800dbb0:	ecbd 8b02 	vpop	{d8}
 800dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb8:	2a20      	cmp	r2, #32
 800dbba:	d1cc      	bne.n	800db56 <_strtod_l+0x46>
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	9317      	str	r3, [sp, #92]	; 0x5c
 800dbc0:	e7be      	b.n	800db40 <_strtod_l+0x30>
 800dbc2:	2a2d      	cmp	r2, #45	; 0x2d
 800dbc4:	d1c7      	bne.n	800db56 <_strtod_l+0x46>
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	920a      	str	r2, [sp, #40]	; 0x28
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbce:	785b      	ldrb	r3, [r3, #1]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1c2      	bne.n	800db5a <_strtod_l+0x4a>
 800dbd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dbd6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f040 856e 	bne.w	800e6bc <_strtod_l+0xbac>
 800dbe0:	4652      	mov	r2, sl
 800dbe2:	465b      	mov	r3, fp
 800dbe4:	e7e1      	b.n	800dbaa <_strtod_l+0x9a>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	e7ee      	b.n	800dbc8 <_strtod_l+0xb8>
 800dbea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dbec:	b13a      	cbz	r2, 800dbfe <_strtod_l+0xee>
 800dbee:	2135      	movs	r1, #53	; 0x35
 800dbf0:	a81a      	add	r0, sp, #104	; 0x68
 800dbf2:	f002 fcae 	bl	8010552 <__copybits>
 800dbf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f002 f86d 	bl	800fcd8 <_Bfree>
 800dbfe:	3f01      	subs	r7, #1
 800dc00:	2f04      	cmp	r7, #4
 800dc02:	d806      	bhi.n	800dc12 <_strtod_l+0x102>
 800dc04:	e8df f007 	tbb	[pc, r7]
 800dc08:	1714030a 	.word	0x1714030a
 800dc0c:	0a          	.byte	0x0a
 800dc0d:	00          	.byte	0x00
 800dc0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800dc12:	0728      	lsls	r0, r5, #28
 800dc14:	d5c0      	bpl.n	800db98 <_strtod_l+0x88>
 800dc16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dc1a:	e7bd      	b.n	800db98 <_strtod_l+0x88>
 800dc1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800dc20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dc22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dc26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dc2e:	e7f0      	b.n	800dc12 <_strtod_l+0x102>
 800dc30:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ddb4 <_strtod_l+0x2a4>
 800dc34:	e7ed      	b.n	800dc12 <_strtod_l+0x102>
 800dc36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dc3a:	f04f 3aff 	mov.w	sl, #4294967295
 800dc3e:	e7e8      	b.n	800dc12 <_strtod_l+0x102>
 800dc40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc46:	785b      	ldrb	r3, [r3, #1]
 800dc48:	2b30      	cmp	r3, #48	; 0x30
 800dc4a:	d0f9      	beq.n	800dc40 <_strtod_l+0x130>
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0a3      	beq.n	800db98 <_strtod_l+0x88>
 800dc50:	2301      	movs	r3, #1
 800dc52:	f04f 0900 	mov.w	r9, #0
 800dc56:	9304      	str	r3, [sp, #16]
 800dc58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc5a:	9308      	str	r3, [sp, #32]
 800dc5c:	f8cd 901c 	str.w	r9, [sp, #28]
 800dc60:	464f      	mov	r7, r9
 800dc62:	220a      	movs	r2, #10
 800dc64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dc66:	7806      	ldrb	r6, [r0, #0]
 800dc68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dc6c:	b2d9      	uxtb	r1, r3
 800dc6e:	2909      	cmp	r1, #9
 800dc70:	d92a      	bls.n	800dcc8 <_strtod_l+0x1b8>
 800dc72:	9905      	ldr	r1, [sp, #20]
 800dc74:	462a      	mov	r2, r5
 800dc76:	f002 ff1b 	bl	8010ab0 <strncmp>
 800dc7a:	b398      	cbz	r0, 800dce4 <_strtod_l+0x1d4>
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	4632      	mov	r2, r6
 800dc80:	463d      	mov	r5, r7
 800dc82:	9005      	str	r0, [sp, #20]
 800dc84:	4603      	mov	r3, r0
 800dc86:	2a65      	cmp	r2, #101	; 0x65
 800dc88:	d001      	beq.n	800dc8e <_strtod_l+0x17e>
 800dc8a:	2a45      	cmp	r2, #69	; 0x45
 800dc8c:	d118      	bne.n	800dcc0 <_strtod_l+0x1b0>
 800dc8e:	b91d      	cbnz	r5, 800dc98 <_strtod_l+0x188>
 800dc90:	9a04      	ldr	r2, [sp, #16]
 800dc92:	4302      	orrs	r2, r0
 800dc94:	d09e      	beq.n	800dbd4 <_strtod_l+0xc4>
 800dc96:	2500      	movs	r5, #0
 800dc98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800dc9c:	f108 0201 	add.w	r2, r8, #1
 800dca0:	9217      	str	r2, [sp, #92]	; 0x5c
 800dca2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800dca6:	2a2b      	cmp	r2, #43	; 0x2b
 800dca8:	d075      	beq.n	800dd96 <_strtod_l+0x286>
 800dcaa:	2a2d      	cmp	r2, #45	; 0x2d
 800dcac:	d07b      	beq.n	800dda6 <_strtod_l+0x296>
 800dcae:	f04f 0c00 	mov.w	ip, #0
 800dcb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dcb6:	2909      	cmp	r1, #9
 800dcb8:	f240 8082 	bls.w	800ddc0 <_strtod_l+0x2b0>
 800dcbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dcc0:	2600      	movs	r6, #0
 800dcc2:	e09d      	b.n	800de00 <_strtod_l+0x2f0>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	e7c4      	b.n	800dc52 <_strtod_l+0x142>
 800dcc8:	2f08      	cmp	r7, #8
 800dcca:	bfd8      	it	le
 800dccc:	9907      	ldrle	r1, [sp, #28]
 800dcce:	f100 0001 	add.w	r0, r0, #1
 800dcd2:	bfda      	itte	le
 800dcd4:	fb02 3301 	mlale	r3, r2, r1, r3
 800dcd8:	9307      	strle	r3, [sp, #28]
 800dcda:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dcde:	3701      	adds	r7, #1
 800dce0:	9017      	str	r0, [sp, #92]	; 0x5c
 800dce2:	e7bf      	b.n	800dc64 <_strtod_l+0x154>
 800dce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dce6:	195a      	adds	r2, r3, r5
 800dce8:	9217      	str	r2, [sp, #92]	; 0x5c
 800dcea:	5d5a      	ldrb	r2, [r3, r5]
 800dcec:	2f00      	cmp	r7, #0
 800dcee:	d037      	beq.n	800dd60 <_strtod_l+0x250>
 800dcf0:	9005      	str	r0, [sp, #20]
 800dcf2:	463d      	mov	r5, r7
 800dcf4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dcf8:	2b09      	cmp	r3, #9
 800dcfa:	d912      	bls.n	800dd22 <_strtod_l+0x212>
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e7c2      	b.n	800dc86 <_strtod_l+0x176>
 800dd00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	9217      	str	r2, [sp, #92]	; 0x5c
 800dd06:	785a      	ldrb	r2, [r3, #1]
 800dd08:	3001      	adds	r0, #1
 800dd0a:	2a30      	cmp	r2, #48	; 0x30
 800dd0c:	d0f8      	beq.n	800dd00 <_strtod_l+0x1f0>
 800dd0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dd12:	2b08      	cmp	r3, #8
 800dd14:	f200 84d9 	bhi.w	800e6ca <_strtod_l+0xbba>
 800dd18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd1a:	9005      	str	r0, [sp, #20]
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	9308      	str	r3, [sp, #32]
 800dd20:	4605      	mov	r5, r0
 800dd22:	3a30      	subs	r2, #48	; 0x30
 800dd24:	f100 0301 	add.w	r3, r0, #1
 800dd28:	d014      	beq.n	800dd54 <_strtod_l+0x244>
 800dd2a:	9905      	ldr	r1, [sp, #20]
 800dd2c:	4419      	add	r1, r3
 800dd2e:	9105      	str	r1, [sp, #20]
 800dd30:	462b      	mov	r3, r5
 800dd32:	eb00 0e05 	add.w	lr, r0, r5
 800dd36:	210a      	movs	r1, #10
 800dd38:	4573      	cmp	r3, lr
 800dd3a:	d113      	bne.n	800dd64 <_strtod_l+0x254>
 800dd3c:	182b      	adds	r3, r5, r0
 800dd3e:	2b08      	cmp	r3, #8
 800dd40:	f105 0501 	add.w	r5, r5, #1
 800dd44:	4405      	add	r5, r0
 800dd46:	dc1c      	bgt.n	800dd82 <_strtod_l+0x272>
 800dd48:	9907      	ldr	r1, [sp, #28]
 800dd4a:	230a      	movs	r3, #10
 800dd4c:	fb03 2301 	mla	r3, r3, r1, r2
 800dd50:	9307      	str	r3, [sp, #28]
 800dd52:	2300      	movs	r3, #0
 800dd54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd56:	1c51      	adds	r1, r2, #1
 800dd58:	9117      	str	r1, [sp, #92]	; 0x5c
 800dd5a:	7852      	ldrb	r2, [r2, #1]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	e7c9      	b.n	800dcf4 <_strtod_l+0x1e4>
 800dd60:	4638      	mov	r0, r7
 800dd62:	e7d2      	b.n	800dd0a <_strtod_l+0x1fa>
 800dd64:	2b08      	cmp	r3, #8
 800dd66:	dc04      	bgt.n	800dd72 <_strtod_l+0x262>
 800dd68:	9e07      	ldr	r6, [sp, #28]
 800dd6a:	434e      	muls	r6, r1
 800dd6c:	9607      	str	r6, [sp, #28]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	e7e2      	b.n	800dd38 <_strtod_l+0x228>
 800dd72:	f103 0c01 	add.w	ip, r3, #1
 800dd76:	f1bc 0f10 	cmp.w	ip, #16
 800dd7a:	bfd8      	it	le
 800dd7c:	fb01 f909 	mulle.w	r9, r1, r9
 800dd80:	e7f5      	b.n	800dd6e <_strtod_l+0x25e>
 800dd82:	2d10      	cmp	r5, #16
 800dd84:	bfdc      	itt	le
 800dd86:	230a      	movle	r3, #10
 800dd88:	fb03 2909 	mlale	r9, r3, r9, r2
 800dd8c:	e7e1      	b.n	800dd52 <_strtod_l+0x242>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	9305      	str	r3, [sp, #20]
 800dd92:	2301      	movs	r3, #1
 800dd94:	e77c      	b.n	800dc90 <_strtod_l+0x180>
 800dd96:	f04f 0c00 	mov.w	ip, #0
 800dd9a:	f108 0202 	add.w	r2, r8, #2
 800dd9e:	9217      	str	r2, [sp, #92]	; 0x5c
 800dda0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dda4:	e785      	b.n	800dcb2 <_strtod_l+0x1a2>
 800dda6:	f04f 0c01 	mov.w	ip, #1
 800ddaa:	e7f6      	b.n	800dd9a <_strtod_l+0x28a>
 800ddac:	08021bc0 	.word	0x08021bc0
 800ddb0:	08021978 	.word	0x08021978
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ddba:	1c51      	adds	r1, r2, #1
 800ddbc:	9117      	str	r1, [sp, #92]	; 0x5c
 800ddbe:	7852      	ldrb	r2, [r2, #1]
 800ddc0:	2a30      	cmp	r2, #48	; 0x30
 800ddc2:	d0f9      	beq.n	800ddb8 <_strtod_l+0x2a8>
 800ddc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ddc8:	2908      	cmp	r1, #8
 800ddca:	f63f af79 	bhi.w	800dcc0 <_strtod_l+0x1b0>
 800ddce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ddd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ddd4:	9206      	str	r2, [sp, #24]
 800ddd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ddd8:	1c51      	adds	r1, r2, #1
 800ddda:	9117      	str	r1, [sp, #92]	; 0x5c
 800dddc:	7852      	ldrb	r2, [r2, #1]
 800ddde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800dde2:	2e09      	cmp	r6, #9
 800dde4:	d937      	bls.n	800de56 <_strtod_l+0x346>
 800dde6:	9e06      	ldr	r6, [sp, #24]
 800dde8:	1b89      	subs	r1, r1, r6
 800ddea:	2908      	cmp	r1, #8
 800ddec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ddf0:	dc02      	bgt.n	800ddf8 <_strtod_l+0x2e8>
 800ddf2:	4576      	cmp	r6, lr
 800ddf4:	bfa8      	it	ge
 800ddf6:	4676      	movge	r6, lr
 800ddf8:	f1bc 0f00 	cmp.w	ip, #0
 800ddfc:	d000      	beq.n	800de00 <_strtod_l+0x2f0>
 800ddfe:	4276      	negs	r6, r6
 800de00:	2d00      	cmp	r5, #0
 800de02:	d14d      	bne.n	800dea0 <_strtod_l+0x390>
 800de04:	9904      	ldr	r1, [sp, #16]
 800de06:	4301      	orrs	r1, r0
 800de08:	f47f aec6 	bne.w	800db98 <_strtod_l+0x88>
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f47f aee1 	bne.w	800dbd4 <_strtod_l+0xc4>
 800de12:	2a69      	cmp	r2, #105	; 0x69
 800de14:	d027      	beq.n	800de66 <_strtod_l+0x356>
 800de16:	dc24      	bgt.n	800de62 <_strtod_l+0x352>
 800de18:	2a49      	cmp	r2, #73	; 0x49
 800de1a:	d024      	beq.n	800de66 <_strtod_l+0x356>
 800de1c:	2a4e      	cmp	r2, #78	; 0x4e
 800de1e:	f47f aed9 	bne.w	800dbd4 <_strtod_l+0xc4>
 800de22:	499f      	ldr	r1, [pc, #636]	; (800e0a0 <_strtod_l+0x590>)
 800de24:	a817      	add	r0, sp, #92	; 0x5c
 800de26:	f001 fe49 	bl	800fabc <__match>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	f43f aed2 	beq.w	800dbd4 <_strtod_l+0xc4>
 800de30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b28      	cmp	r3, #40	; 0x28
 800de36:	d12d      	bne.n	800de94 <_strtod_l+0x384>
 800de38:	499a      	ldr	r1, [pc, #616]	; (800e0a4 <_strtod_l+0x594>)
 800de3a:	aa1a      	add	r2, sp, #104	; 0x68
 800de3c:	a817      	add	r0, sp, #92	; 0x5c
 800de3e:	f001 fe51 	bl	800fae4 <__hexnan>
 800de42:	2805      	cmp	r0, #5
 800de44:	d126      	bne.n	800de94 <_strtod_l+0x384>
 800de46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800de4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800de50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800de54:	e6a0      	b.n	800db98 <_strtod_l+0x88>
 800de56:	210a      	movs	r1, #10
 800de58:	fb01 2e0e 	mla	lr, r1, lr, r2
 800de5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800de60:	e7b9      	b.n	800ddd6 <_strtod_l+0x2c6>
 800de62:	2a6e      	cmp	r2, #110	; 0x6e
 800de64:	e7db      	b.n	800de1e <_strtod_l+0x30e>
 800de66:	4990      	ldr	r1, [pc, #576]	; (800e0a8 <_strtod_l+0x598>)
 800de68:	a817      	add	r0, sp, #92	; 0x5c
 800de6a:	f001 fe27 	bl	800fabc <__match>
 800de6e:	2800      	cmp	r0, #0
 800de70:	f43f aeb0 	beq.w	800dbd4 <_strtod_l+0xc4>
 800de74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de76:	498d      	ldr	r1, [pc, #564]	; (800e0ac <_strtod_l+0x59c>)
 800de78:	3b01      	subs	r3, #1
 800de7a:	a817      	add	r0, sp, #92	; 0x5c
 800de7c:	9317      	str	r3, [sp, #92]	; 0x5c
 800de7e:	f001 fe1d 	bl	800fabc <__match>
 800de82:	b910      	cbnz	r0, 800de8a <_strtod_l+0x37a>
 800de84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de86:	3301      	adds	r3, #1
 800de88:	9317      	str	r3, [sp, #92]	; 0x5c
 800de8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e0bc <_strtod_l+0x5ac>
 800de8e:	f04f 0a00 	mov.w	sl, #0
 800de92:	e681      	b.n	800db98 <_strtod_l+0x88>
 800de94:	4886      	ldr	r0, [pc, #536]	; (800e0b0 <_strtod_l+0x5a0>)
 800de96:	f002 fdf3 	bl	8010a80 <nan>
 800de9a:	ec5b ab10 	vmov	sl, fp, d0
 800de9e:	e67b      	b.n	800db98 <_strtod_l+0x88>
 800dea0:	9b05      	ldr	r3, [sp, #20]
 800dea2:	9807      	ldr	r0, [sp, #28]
 800dea4:	1af3      	subs	r3, r6, r3
 800dea6:	2f00      	cmp	r7, #0
 800dea8:	bf08      	it	eq
 800deaa:	462f      	moveq	r7, r5
 800deac:	2d10      	cmp	r5, #16
 800deae:	9306      	str	r3, [sp, #24]
 800deb0:	46a8      	mov	r8, r5
 800deb2:	bfa8      	it	ge
 800deb4:	f04f 0810 	movge.w	r8, #16
 800deb8:	f7f2 fb24 	bl	8000504 <__aeabi_ui2d>
 800debc:	2d09      	cmp	r5, #9
 800debe:	4682      	mov	sl, r0
 800dec0:	468b      	mov	fp, r1
 800dec2:	dd13      	ble.n	800deec <_strtod_l+0x3dc>
 800dec4:	4b7b      	ldr	r3, [pc, #492]	; (800e0b4 <_strtod_l+0x5a4>)
 800dec6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800deca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dece:	f7f2 fb93 	bl	80005f8 <__aeabi_dmul>
 800ded2:	4682      	mov	sl, r0
 800ded4:	4648      	mov	r0, r9
 800ded6:	468b      	mov	fp, r1
 800ded8:	f7f2 fb14 	bl	8000504 <__aeabi_ui2d>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4650      	mov	r0, sl
 800dee2:	4659      	mov	r1, fp
 800dee4:	f7f2 f9d2 	bl	800028c <__adddf3>
 800dee8:	4682      	mov	sl, r0
 800deea:	468b      	mov	fp, r1
 800deec:	2d0f      	cmp	r5, #15
 800deee:	dc38      	bgt.n	800df62 <_strtod_l+0x452>
 800def0:	9b06      	ldr	r3, [sp, #24]
 800def2:	2b00      	cmp	r3, #0
 800def4:	f43f ae50 	beq.w	800db98 <_strtod_l+0x88>
 800def8:	dd24      	ble.n	800df44 <_strtod_l+0x434>
 800defa:	2b16      	cmp	r3, #22
 800defc:	dc0b      	bgt.n	800df16 <_strtod_l+0x406>
 800defe:	496d      	ldr	r1, [pc, #436]	; (800e0b4 <_strtod_l+0x5a4>)
 800df00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df08:	4652      	mov	r2, sl
 800df0a:	465b      	mov	r3, fp
 800df0c:	f7f2 fb74 	bl	80005f8 <__aeabi_dmul>
 800df10:	4682      	mov	sl, r0
 800df12:	468b      	mov	fp, r1
 800df14:	e640      	b.n	800db98 <_strtod_l+0x88>
 800df16:	9a06      	ldr	r2, [sp, #24]
 800df18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800df1c:	4293      	cmp	r3, r2
 800df1e:	db20      	blt.n	800df62 <_strtod_l+0x452>
 800df20:	4c64      	ldr	r4, [pc, #400]	; (800e0b4 <_strtod_l+0x5a4>)
 800df22:	f1c5 050f 	rsb	r5, r5, #15
 800df26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df2a:	4652      	mov	r2, sl
 800df2c:	465b      	mov	r3, fp
 800df2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df32:	f7f2 fb61 	bl	80005f8 <__aeabi_dmul>
 800df36:	9b06      	ldr	r3, [sp, #24]
 800df38:	1b5d      	subs	r5, r3, r5
 800df3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df42:	e7e3      	b.n	800df0c <_strtod_l+0x3fc>
 800df44:	9b06      	ldr	r3, [sp, #24]
 800df46:	3316      	adds	r3, #22
 800df48:	db0b      	blt.n	800df62 <_strtod_l+0x452>
 800df4a:	9b05      	ldr	r3, [sp, #20]
 800df4c:	1b9e      	subs	r6, r3, r6
 800df4e:	4b59      	ldr	r3, [pc, #356]	; (800e0b4 <_strtod_l+0x5a4>)
 800df50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800df54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df58:	4650      	mov	r0, sl
 800df5a:	4659      	mov	r1, fp
 800df5c:	f7f2 fc76 	bl	800084c <__aeabi_ddiv>
 800df60:	e7d6      	b.n	800df10 <_strtod_l+0x400>
 800df62:	9b06      	ldr	r3, [sp, #24]
 800df64:	eba5 0808 	sub.w	r8, r5, r8
 800df68:	4498      	add	r8, r3
 800df6a:	f1b8 0f00 	cmp.w	r8, #0
 800df6e:	dd74      	ble.n	800e05a <_strtod_l+0x54a>
 800df70:	f018 030f 	ands.w	r3, r8, #15
 800df74:	d00a      	beq.n	800df8c <_strtod_l+0x47c>
 800df76:	494f      	ldr	r1, [pc, #316]	; (800e0b4 <_strtod_l+0x5a4>)
 800df78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df7c:	4652      	mov	r2, sl
 800df7e:	465b      	mov	r3, fp
 800df80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df84:	f7f2 fb38 	bl	80005f8 <__aeabi_dmul>
 800df88:	4682      	mov	sl, r0
 800df8a:	468b      	mov	fp, r1
 800df8c:	f038 080f 	bics.w	r8, r8, #15
 800df90:	d04f      	beq.n	800e032 <_strtod_l+0x522>
 800df92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800df96:	dd22      	ble.n	800dfde <_strtod_l+0x4ce>
 800df98:	2500      	movs	r5, #0
 800df9a:	462e      	mov	r6, r5
 800df9c:	9507      	str	r5, [sp, #28]
 800df9e:	9505      	str	r5, [sp, #20]
 800dfa0:	2322      	movs	r3, #34	; 0x22
 800dfa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e0bc <_strtod_l+0x5ac>
 800dfa6:	6023      	str	r3, [r4, #0]
 800dfa8:	f04f 0a00 	mov.w	sl, #0
 800dfac:	9b07      	ldr	r3, [sp, #28]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f43f adf2 	beq.w	800db98 <_strtod_l+0x88>
 800dfb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f001 fe8e 	bl	800fcd8 <_Bfree>
 800dfbc:	9905      	ldr	r1, [sp, #20]
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f001 fe8a 	bl	800fcd8 <_Bfree>
 800dfc4:	4631      	mov	r1, r6
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f001 fe86 	bl	800fcd8 <_Bfree>
 800dfcc:	9907      	ldr	r1, [sp, #28]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f001 fe82 	bl	800fcd8 <_Bfree>
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f001 fe7e 	bl	800fcd8 <_Bfree>
 800dfdc:	e5dc      	b.n	800db98 <_strtod_l+0x88>
 800dfde:	4b36      	ldr	r3, [pc, #216]	; (800e0b8 <_strtod_l+0x5a8>)
 800dfe0:	9304      	str	r3, [sp, #16]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dfe8:	4650      	mov	r0, sl
 800dfea:	4659      	mov	r1, fp
 800dfec:	4699      	mov	r9, r3
 800dfee:	f1b8 0f01 	cmp.w	r8, #1
 800dff2:	dc21      	bgt.n	800e038 <_strtod_l+0x528>
 800dff4:	b10b      	cbz	r3, 800dffa <_strtod_l+0x4ea>
 800dff6:	4682      	mov	sl, r0
 800dff8:	468b      	mov	fp, r1
 800dffa:	4b2f      	ldr	r3, [pc, #188]	; (800e0b8 <_strtod_l+0x5a8>)
 800dffc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e000:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e004:	4652      	mov	r2, sl
 800e006:	465b      	mov	r3, fp
 800e008:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e00c:	f7f2 faf4 	bl	80005f8 <__aeabi_dmul>
 800e010:	4b2a      	ldr	r3, [pc, #168]	; (800e0bc <_strtod_l+0x5ac>)
 800e012:	460a      	mov	r2, r1
 800e014:	400b      	ands	r3, r1
 800e016:	492a      	ldr	r1, [pc, #168]	; (800e0c0 <_strtod_l+0x5b0>)
 800e018:	428b      	cmp	r3, r1
 800e01a:	4682      	mov	sl, r0
 800e01c:	d8bc      	bhi.n	800df98 <_strtod_l+0x488>
 800e01e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e022:	428b      	cmp	r3, r1
 800e024:	bf86      	itte	hi
 800e026:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e0c4 <_strtod_l+0x5b4>
 800e02a:	f04f 3aff 	movhi.w	sl, #4294967295
 800e02e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e032:	2300      	movs	r3, #0
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	e084      	b.n	800e142 <_strtod_l+0x632>
 800e038:	f018 0f01 	tst.w	r8, #1
 800e03c:	d005      	beq.n	800e04a <_strtod_l+0x53a>
 800e03e:	9b04      	ldr	r3, [sp, #16]
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	f7f2 fad8 	bl	80005f8 <__aeabi_dmul>
 800e048:	2301      	movs	r3, #1
 800e04a:	9a04      	ldr	r2, [sp, #16]
 800e04c:	3208      	adds	r2, #8
 800e04e:	f109 0901 	add.w	r9, r9, #1
 800e052:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e056:	9204      	str	r2, [sp, #16]
 800e058:	e7c9      	b.n	800dfee <_strtod_l+0x4de>
 800e05a:	d0ea      	beq.n	800e032 <_strtod_l+0x522>
 800e05c:	f1c8 0800 	rsb	r8, r8, #0
 800e060:	f018 020f 	ands.w	r2, r8, #15
 800e064:	d00a      	beq.n	800e07c <_strtod_l+0x56c>
 800e066:	4b13      	ldr	r3, [pc, #76]	; (800e0b4 <_strtod_l+0x5a4>)
 800e068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e06c:	4650      	mov	r0, sl
 800e06e:	4659      	mov	r1, fp
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	f7f2 fbea 	bl	800084c <__aeabi_ddiv>
 800e078:	4682      	mov	sl, r0
 800e07a:	468b      	mov	fp, r1
 800e07c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e080:	d0d7      	beq.n	800e032 <_strtod_l+0x522>
 800e082:	f1b8 0f1f 	cmp.w	r8, #31
 800e086:	dd1f      	ble.n	800e0c8 <_strtod_l+0x5b8>
 800e088:	2500      	movs	r5, #0
 800e08a:	462e      	mov	r6, r5
 800e08c:	9507      	str	r5, [sp, #28]
 800e08e:	9505      	str	r5, [sp, #20]
 800e090:	2322      	movs	r3, #34	; 0x22
 800e092:	f04f 0a00 	mov.w	sl, #0
 800e096:	f04f 0b00 	mov.w	fp, #0
 800e09a:	6023      	str	r3, [r4, #0]
 800e09c:	e786      	b.n	800dfac <_strtod_l+0x49c>
 800e09e:	bf00      	nop
 800e0a0:	08021949 	.word	0x08021949
 800e0a4:	0802198c 	.word	0x0802198c
 800e0a8:	08021941 	.word	0x08021941
 800e0ac:	08021acc 	.word	0x08021acc
 800e0b0:	08021d78 	.word	0x08021d78
 800e0b4:	08021c58 	.word	0x08021c58
 800e0b8:	08021c30 	.word	0x08021c30
 800e0bc:	7ff00000 	.word	0x7ff00000
 800e0c0:	7ca00000 	.word	0x7ca00000
 800e0c4:	7fefffff 	.word	0x7fefffff
 800e0c8:	f018 0310 	ands.w	r3, r8, #16
 800e0cc:	bf18      	it	ne
 800e0ce:	236a      	movne	r3, #106	; 0x6a
 800e0d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e480 <_strtod_l+0x970>
 800e0d4:	9304      	str	r3, [sp, #16]
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	4659      	mov	r1, fp
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f018 0f01 	tst.w	r8, #1
 800e0e0:	d004      	beq.n	800e0ec <_strtod_l+0x5dc>
 800e0e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e0e6:	f7f2 fa87 	bl	80005f8 <__aeabi_dmul>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e0f0:	f109 0908 	add.w	r9, r9, #8
 800e0f4:	d1f2      	bne.n	800e0dc <_strtod_l+0x5cc>
 800e0f6:	b10b      	cbz	r3, 800e0fc <_strtod_l+0x5ec>
 800e0f8:	4682      	mov	sl, r0
 800e0fa:	468b      	mov	fp, r1
 800e0fc:	9b04      	ldr	r3, [sp, #16]
 800e0fe:	b1c3      	cbz	r3, 800e132 <_strtod_l+0x622>
 800e100:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e104:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e108:	2b00      	cmp	r3, #0
 800e10a:	4659      	mov	r1, fp
 800e10c:	dd11      	ble.n	800e132 <_strtod_l+0x622>
 800e10e:	2b1f      	cmp	r3, #31
 800e110:	f340 8124 	ble.w	800e35c <_strtod_l+0x84c>
 800e114:	2b34      	cmp	r3, #52	; 0x34
 800e116:	bfde      	ittt	le
 800e118:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e11c:	f04f 33ff 	movle.w	r3, #4294967295
 800e120:	fa03 f202 	lslle.w	r2, r3, r2
 800e124:	f04f 0a00 	mov.w	sl, #0
 800e128:	bfcc      	ite	gt
 800e12a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e12e:	ea02 0b01 	andle.w	fp, r2, r1
 800e132:	2200      	movs	r2, #0
 800e134:	2300      	movs	r3, #0
 800e136:	4650      	mov	r0, sl
 800e138:	4659      	mov	r1, fp
 800e13a:	f7f2 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d1a2      	bne.n	800e088 <_strtod_l+0x578>
 800e142:	9b07      	ldr	r3, [sp, #28]
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	9908      	ldr	r1, [sp, #32]
 800e148:	462b      	mov	r3, r5
 800e14a:	463a      	mov	r2, r7
 800e14c:	4620      	mov	r0, r4
 800e14e:	f001 fe2b 	bl	800fda8 <__s2b>
 800e152:	9007      	str	r0, [sp, #28]
 800e154:	2800      	cmp	r0, #0
 800e156:	f43f af1f 	beq.w	800df98 <_strtod_l+0x488>
 800e15a:	9b05      	ldr	r3, [sp, #20]
 800e15c:	1b9e      	subs	r6, r3, r6
 800e15e:	9b06      	ldr	r3, [sp, #24]
 800e160:	2b00      	cmp	r3, #0
 800e162:	bfb4      	ite	lt
 800e164:	4633      	movlt	r3, r6
 800e166:	2300      	movge	r3, #0
 800e168:	930c      	str	r3, [sp, #48]	; 0x30
 800e16a:	9b06      	ldr	r3, [sp, #24]
 800e16c:	2500      	movs	r5, #0
 800e16e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e172:	9312      	str	r3, [sp, #72]	; 0x48
 800e174:	462e      	mov	r6, r5
 800e176:	9b07      	ldr	r3, [sp, #28]
 800e178:	4620      	mov	r0, r4
 800e17a:	6859      	ldr	r1, [r3, #4]
 800e17c:	f001 fd6c 	bl	800fc58 <_Balloc>
 800e180:	9005      	str	r0, [sp, #20]
 800e182:	2800      	cmp	r0, #0
 800e184:	f43f af0c 	beq.w	800dfa0 <_strtod_l+0x490>
 800e188:	9b07      	ldr	r3, [sp, #28]
 800e18a:	691a      	ldr	r2, [r3, #16]
 800e18c:	3202      	adds	r2, #2
 800e18e:	f103 010c 	add.w	r1, r3, #12
 800e192:	0092      	lsls	r2, r2, #2
 800e194:	300c      	adds	r0, #12
 800e196:	f7fe fdb3 	bl	800cd00 <memcpy>
 800e19a:	ec4b ab10 	vmov	d0, sl, fp
 800e19e:	aa1a      	add	r2, sp, #104	; 0x68
 800e1a0:	a919      	add	r1, sp, #100	; 0x64
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f002 f946 	bl	8010434 <__d2b>
 800e1a8:	ec4b ab18 	vmov	d8, sl, fp
 800e1ac:	9018      	str	r0, [sp, #96]	; 0x60
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	f43f aef6 	beq.w	800dfa0 <_strtod_l+0x490>
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f001 fe90 	bl	800fedc <__i2b>
 800e1bc:	4606      	mov	r6, r0
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	f43f aeee 	beq.w	800dfa0 <_strtod_l+0x490>
 800e1c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1c6:	9904      	ldr	r1, [sp, #16]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	bfab      	itete	ge
 800e1cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e1ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e1d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e1d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e1d6:	bfac      	ite	ge
 800e1d8:	eb03 0902 	addge.w	r9, r3, r2
 800e1dc:	1ad7      	sublt	r7, r2, r3
 800e1de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e1e0:	eba3 0801 	sub.w	r8, r3, r1
 800e1e4:	4490      	add	r8, r2
 800e1e6:	4ba1      	ldr	r3, [pc, #644]	; (800e46c <_strtod_l+0x95c>)
 800e1e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1ec:	4598      	cmp	r8, r3
 800e1ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e1f2:	f280 80c7 	bge.w	800e384 <_strtod_l+0x874>
 800e1f6:	eba3 0308 	sub.w	r3, r3, r8
 800e1fa:	2b1f      	cmp	r3, #31
 800e1fc:	eba2 0203 	sub.w	r2, r2, r3
 800e200:	f04f 0101 	mov.w	r1, #1
 800e204:	f300 80b1 	bgt.w	800e36a <_strtod_l+0x85a>
 800e208:	fa01 f303 	lsl.w	r3, r1, r3
 800e20c:	930d      	str	r3, [sp, #52]	; 0x34
 800e20e:	2300      	movs	r3, #0
 800e210:	9308      	str	r3, [sp, #32]
 800e212:	eb09 0802 	add.w	r8, r9, r2
 800e216:	9b04      	ldr	r3, [sp, #16]
 800e218:	45c1      	cmp	r9, r8
 800e21a:	4417      	add	r7, r2
 800e21c:	441f      	add	r7, r3
 800e21e:	464b      	mov	r3, r9
 800e220:	bfa8      	it	ge
 800e222:	4643      	movge	r3, r8
 800e224:	42bb      	cmp	r3, r7
 800e226:	bfa8      	it	ge
 800e228:	463b      	movge	r3, r7
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	bfc2      	ittt	gt
 800e22e:	eba8 0803 	subgt.w	r8, r8, r3
 800e232:	1aff      	subgt	r7, r7, r3
 800e234:	eba9 0903 	subgt.w	r9, r9, r3
 800e238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	dd17      	ble.n	800e26e <_strtod_l+0x75e>
 800e23e:	4631      	mov	r1, r6
 800e240:	461a      	mov	r2, r3
 800e242:	4620      	mov	r0, r4
 800e244:	f001 ff0a 	bl	801005c <__pow5mult>
 800e248:	4606      	mov	r6, r0
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f43f aea8 	beq.w	800dfa0 <_strtod_l+0x490>
 800e250:	4601      	mov	r1, r0
 800e252:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e254:	4620      	mov	r0, r4
 800e256:	f001 fe57 	bl	800ff08 <__multiply>
 800e25a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e25c:	2800      	cmp	r0, #0
 800e25e:	f43f ae9f 	beq.w	800dfa0 <_strtod_l+0x490>
 800e262:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e264:	4620      	mov	r0, r4
 800e266:	f001 fd37 	bl	800fcd8 <_Bfree>
 800e26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e26c:	9318      	str	r3, [sp, #96]	; 0x60
 800e26e:	f1b8 0f00 	cmp.w	r8, #0
 800e272:	f300 808c 	bgt.w	800e38e <_strtod_l+0x87e>
 800e276:	9b06      	ldr	r3, [sp, #24]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	dd08      	ble.n	800e28e <_strtod_l+0x77e>
 800e27c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e27e:	9905      	ldr	r1, [sp, #20]
 800e280:	4620      	mov	r0, r4
 800e282:	f001 feeb 	bl	801005c <__pow5mult>
 800e286:	9005      	str	r0, [sp, #20]
 800e288:	2800      	cmp	r0, #0
 800e28a:	f43f ae89 	beq.w	800dfa0 <_strtod_l+0x490>
 800e28e:	2f00      	cmp	r7, #0
 800e290:	dd08      	ble.n	800e2a4 <_strtod_l+0x794>
 800e292:	9905      	ldr	r1, [sp, #20]
 800e294:	463a      	mov	r2, r7
 800e296:	4620      	mov	r0, r4
 800e298:	f001 ff3a 	bl	8010110 <__lshift>
 800e29c:	9005      	str	r0, [sp, #20]
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	f43f ae7e 	beq.w	800dfa0 <_strtod_l+0x490>
 800e2a4:	f1b9 0f00 	cmp.w	r9, #0
 800e2a8:	dd08      	ble.n	800e2bc <_strtod_l+0x7ac>
 800e2aa:	4631      	mov	r1, r6
 800e2ac:	464a      	mov	r2, r9
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f001 ff2e 	bl	8010110 <__lshift>
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	f43f ae72 	beq.w	800dfa0 <_strtod_l+0x490>
 800e2bc:	9a05      	ldr	r2, [sp, #20]
 800e2be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f001 ffb1 	bl	8010228 <__mdiff>
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	f43f ae69 	beq.w	800dfa0 <_strtod_l+0x490>
 800e2ce:	68c3      	ldr	r3, [r0, #12]
 800e2d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	60c3      	str	r3, [r0, #12]
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	f001 ff8a 	bl	80101f0 <__mcmp>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	da60      	bge.n	800e3a2 <_strtod_l+0x892>
 800e2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2e2:	ea53 030a 	orrs.w	r3, r3, sl
 800e2e6:	f040 8082 	bne.w	800e3ee <_strtod_l+0x8de>
 800e2ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d17d      	bne.n	800e3ee <_strtod_l+0x8de>
 800e2f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2f6:	0d1b      	lsrs	r3, r3, #20
 800e2f8:	051b      	lsls	r3, r3, #20
 800e2fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e2fe:	d976      	bls.n	800e3ee <_strtod_l+0x8de>
 800e300:	696b      	ldr	r3, [r5, #20]
 800e302:	b913      	cbnz	r3, 800e30a <_strtod_l+0x7fa>
 800e304:	692b      	ldr	r3, [r5, #16]
 800e306:	2b01      	cmp	r3, #1
 800e308:	dd71      	ble.n	800e3ee <_strtod_l+0x8de>
 800e30a:	4629      	mov	r1, r5
 800e30c:	2201      	movs	r2, #1
 800e30e:	4620      	mov	r0, r4
 800e310:	f001 fefe 	bl	8010110 <__lshift>
 800e314:	4631      	mov	r1, r6
 800e316:	4605      	mov	r5, r0
 800e318:	f001 ff6a 	bl	80101f0 <__mcmp>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	dd66      	ble.n	800e3ee <_strtod_l+0x8de>
 800e320:	9904      	ldr	r1, [sp, #16]
 800e322:	4a53      	ldr	r2, [pc, #332]	; (800e470 <_strtod_l+0x960>)
 800e324:	465b      	mov	r3, fp
 800e326:	2900      	cmp	r1, #0
 800e328:	f000 8081 	beq.w	800e42e <_strtod_l+0x91e>
 800e32c:	ea02 010b 	and.w	r1, r2, fp
 800e330:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e334:	dc7b      	bgt.n	800e42e <_strtod_l+0x91e>
 800e336:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e33a:	f77f aea9 	ble.w	800e090 <_strtod_l+0x580>
 800e33e:	4b4d      	ldr	r3, [pc, #308]	; (800e474 <_strtod_l+0x964>)
 800e340:	4650      	mov	r0, sl
 800e342:	4659      	mov	r1, fp
 800e344:	2200      	movs	r2, #0
 800e346:	f7f2 f957 	bl	80005f8 <__aeabi_dmul>
 800e34a:	460b      	mov	r3, r1
 800e34c:	4303      	orrs	r3, r0
 800e34e:	bf08      	it	eq
 800e350:	2322      	moveq	r3, #34	; 0x22
 800e352:	4682      	mov	sl, r0
 800e354:	468b      	mov	fp, r1
 800e356:	bf08      	it	eq
 800e358:	6023      	streq	r3, [r4, #0]
 800e35a:	e62b      	b.n	800dfb4 <_strtod_l+0x4a4>
 800e35c:	f04f 32ff 	mov.w	r2, #4294967295
 800e360:	fa02 f303 	lsl.w	r3, r2, r3
 800e364:	ea03 0a0a 	and.w	sl, r3, sl
 800e368:	e6e3      	b.n	800e132 <_strtod_l+0x622>
 800e36a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e36e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e372:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e376:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e37a:	fa01 f308 	lsl.w	r3, r1, r8
 800e37e:	9308      	str	r3, [sp, #32]
 800e380:	910d      	str	r1, [sp, #52]	; 0x34
 800e382:	e746      	b.n	800e212 <_strtod_l+0x702>
 800e384:	2300      	movs	r3, #0
 800e386:	9308      	str	r3, [sp, #32]
 800e388:	2301      	movs	r3, #1
 800e38a:	930d      	str	r3, [sp, #52]	; 0x34
 800e38c:	e741      	b.n	800e212 <_strtod_l+0x702>
 800e38e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e390:	4642      	mov	r2, r8
 800e392:	4620      	mov	r0, r4
 800e394:	f001 febc 	bl	8010110 <__lshift>
 800e398:	9018      	str	r0, [sp, #96]	; 0x60
 800e39a:	2800      	cmp	r0, #0
 800e39c:	f47f af6b 	bne.w	800e276 <_strtod_l+0x766>
 800e3a0:	e5fe      	b.n	800dfa0 <_strtod_l+0x490>
 800e3a2:	465f      	mov	r7, fp
 800e3a4:	d16e      	bne.n	800e484 <_strtod_l+0x974>
 800e3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3ac:	b342      	cbz	r2, 800e400 <_strtod_l+0x8f0>
 800e3ae:	4a32      	ldr	r2, [pc, #200]	; (800e478 <_strtod_l+0x968>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d128      	bne.n	800e406 <_strtod_l+0x8f6>
 800e3b4:	9b04      	ldr	r3, [sp, #16]
 800e3b6:	4651      	mov	r1, sl
 800e3b8:	b1eb      	cbz	r3, 800e3f6 <_strtod_l+0x8e6>
 800e3ba:	4b2d      	ldr	r3, [pc, #180]	; (800e470 <_strtod_l+0x960>)
 800e3bc:	403b      	ands	r3, r7
 800e3be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c6:	d819      	bhi.n	800e3fc <_strtod_l+0x8ec>
 800e3c8:	0d1b      	lsrs	r3, r3, #20
 800e3ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e3ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e3d2:	4299      	cmp	r1, r3
 800e3d4:	d117      	bne.n	800e406 <_strtod_l+0x8f6>
 800e3d6:	4b29      	ldr	r3, [pc, #164]	; (800e47c <_strtod_l+0x96c>)
 800e3d8:	429f      	cmp	r7, r3
 800e3da:	d102      	bne.n	800e3e2 <_strtod_l+0x8d2>
 800e3dc:	3101      	adds	r1, #1
 800e3de:	f43f addf 	beq.w	800dfa0 <_strtod_l+0x490>
 800e3e2:	4b23      	ldr	r3, [pc, #140]	; (800e470 <_strtod_l+0x960>)
 800e3e4:	403b      	ands	r3, r7
 800e3e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e3ea:	f04f 0a00 	mov.w	sl, #0
 800e3ee:	9b04      	ldr	r3, [sp, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d1a4      	bne.n	800e33e <_strtod_l+0x82e>
 800e3f4:	e5de      	b.n	800dfb4 <_strtod_l+0x4a4>
 800e3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fa:	e7ea      	b.n	800e3d2 <_strtod_l+0x8c2>
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	e7e8      	b.n	800e3d2 <_strtod_l+0x8c2>
 800e400:	ea53 030a 	orrs.w	r3, r3, sl
 800e404:	d08c      	beq.n	800e320 <_strtod_l+0x810>
 800e406:	9b08      	ldr	r3, [sp, #32]
 800e408:	b1db      	cbz	r3, 800e442 <_strtod_l+0x932>
 800e40a:	423b      	tst	r3, r7
 800e40c:	d0ef      	beq.n	800e3ee <_strtod_l+0x8de>
 800e40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e410:	9a04      	ldr	r2, [sp, #16]
 800e412:	4650      	mov	r0, sl
 800e414:	4659      	mov	r1, fp
 800e416:	b1c3      	cbz	r3, 800e44a <_strtod_l+0x93a>
 800e418:	f7ff fb5c 	bl	800dad4 <sulp>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	ec51 0b18 	vmov	r0, r1, d8
 800e424:	f7f1 ff32 	bl	800028c <__adddf3>
 800e428:	4682      	mov	sl, r0
 800e42a:	468b      	mov	fp, r1
 800e42c:	e7df      	b.n	800e3ee <_strtod_l+0x8de>
 800e42e:	4013      	ands	r3, r2
 800e430:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e434:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e438:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e43c:	f04f 3aff 	mov.w	sl, #4294967295
 800e440:	e7d5      	b.n	800e3ee <_strtod_l+0x8de>
 800e442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e444:	ea13 0f0a 	tst.w	r3, sl
 800e448:	e7e0      	b.n	800e40c <_strtod_l+0x8fc>
 800e44a:	f7ff fb43 	bl	800dad4 <sulp>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	ec51 0b18 	vmov	r0, r1, d8
 800e456:	f7f1 ff17 	bl	8000288 <__aeabi_dsub>
 800e45a:	2200      	movs	r2, #0
 800e45c:	2300      	movs	r3, #0
 800e45e:	4682      	mov	sl, r0
 800e460:	468b      	mov	fp, r1
 800e462:	f7f2 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 800e466:	2800      	cmp	r0, #0
 800e468:	d0c1      	beq.n	800e3ee <_strtod_l+0x8de>
 800e46a:	e611      	b.n	800e090 <_strtod_l+0x580>
 800e46c:	fffffc02 	.word	0xfffffc02
 800e470:	7ff00000 	.word	0x7ff00000
 800e474:	39500000 	.word	0x39500000
 800e478:	000fffff 	.word	0x000fffff
 800e47c:	7fefffff 	.word	0x7fefffff
 800e480:	080219a0 	.word	0x080219a0
 800e484:	4631      	mov	r1, r6
 800e486:	4628      	mov	r0, r5
 800e488:	f002 f830 	bl	80104ec <__ratio>
 800e48c:	ec59 8b10 	vmov	r8, r9, d0
 800e490:	ee10 0a10 	vmov	r0, s0
 800e494:	2200      	movs	r2, #0
 800e496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e49a:	4649      	mov	r1, r9
 800e49c:	f7f2 fb28 	bl	8000af0 <__aeabi_dcmple>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d07a      	beq.n	800e59a <_strtod_l+0xa8a>
 800e4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d04a      	beq.n	800e540 <_strtod_l+0xa30>
 800e4aa:	4b95      	ldr	r3, [pc, #596]	; (800e700 <_strtod_l+0xbf0>)
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e4b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e700 <_strtod_l+0xbf0>
 800e4b6:	f04f 0800 	mov.w	r8, #0
 800e4ba:	4b92      	ldr	r3, [pc, #584]	; (800e704 <_strtod_l+0xbf4>)
 800e4bc:	403b      	ands	r3, r7
 800e4be:	930d      	str	r3, [sp, #52]	; 0x34
 800e4c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4c2:	4b91      	ldr	r3, [pc, #580]	; (800e708 <_strtod_l+0xbf8>)
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	f040 80b0 	bne.w	800e62a <_strtod_l+0xb1a>
 800e4ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e4ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e4d2:	ec4b ab10 	vmov	d0, sl, fp
 800e4d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e4da:	f001 ff2f 	bl	801033c <__ulp>
 800e4de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e4e2:	ec53 2b10 	vmov	r2, r3, d0
 800e4e6:	f7f2 f887 	bl	80005f8 <__aeabi_dmul>
 800e4ea:	4652      	mov	r2, sl
 800e4ec:	465b      	mov	r3, fp
 800e4ee:	f7f1 fecd 	bl	800028c <__adddf3>
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4983      	ldr	r1, [pc, #524]	; (800e704 <_strtod_l+0xbf4>)
 800e4f6:	4a85      	ldr	r2, [pc, #532]	; (800e70c <_strtod_l+0xbfc>)
 800e4f8:	4019      	ands	r1, r3
 800e4fa:	4291      	cmp	r1, r2
 800e4fc:	4682      	mov	sl, r0
 800e4fe:	d960      	bls.n	800e5c2 <_strtod_l+0xab2>
 800e500:	ee18 3a90 	vmov	r3, s17
 800e504:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e508:	4293      	cmp	r3, r2
 800e50a:	d104      	bne.n	800e516 <_strtod_l+0xa06>
 800e50c:	ee18 3a10 	vmov	r3, s16
 800e510:	3301      	adds	r3, #1
 800e512:	f43f ad45 	beq.w	800dfa0 <_strtod_l+0x490>
 800e516:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e718 <_strtod_l+0xc08>
 800e51a:	f04f 3aff 	mov.w	sl, #4294967295
 800e51e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e520:	4620      	mov	r0, r4
 800e522:	f001 fbd9 	bl	800fcd8 <_Bfree>
 800e526:	9905      	ldr	r1, [sp, #20]
 800e528:	4620      	mov	r0, r4
 800e52a:	f001 fbd5 	bl	800fcd8 <_Bfree>
 800e52e:	4631      	mov	r1, r6
 800e530:	4620      	mov	r0, r4
 800e532:	f001 fbd1 	bl	800fcd8 <_Bfree>
 800e536:	4629      	mov	r1, r5
 800e538:	4620      	mov	r0, r4
 800e53a:	f001 fbcd 	bl	800fcd8 <_Bfree>
 800e53e:	e61a      	b.n	800e176 <_strtod_l+0x666>
 800e540:	f1ba 0f00 	cmp.w	sl, #0
 800e544:	d11b      	bne.n	800e57e <_strtod_l+0xa6e>
 800e546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e54a:	b9f3      	cbnz	r3, 800e58a <_strtod_l+0xa7a>
 800e54c:	4b6c      	ldr	r3, [pc, #432]	; (800e700 <_strtod_l+0xbf0>)
 800e54e:	2200      	movs	r2, #0
 800e550:	4640      	mov	r0, r8
 800e552:	4649      	mov	r1, r9
 800e554:	f7f2 fac2 	bl	8000adc <__aeabi_dcmplt>
 800e558:	b9d0      	cbnz	r0, 800e590 <_strtod_l+0xa80>
 800e55a:	4640      	mov	r0, r8
 800e55c:	4649      	mov	r1, r9
 800e55e:	4b6c      	ldr	r3, [pc, #432]	; (800e710 <_strtod_l+0xc00>)
 800e560:	2200      	movs	r2, #0
 800e562:	f7f2 f849 	bl	80005f8 <__aeabi_dmul>
 800e566:	4680      	mov	r8, r0
 800e568:	4689      	mov	r9, r1
 800e56a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e56e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e572:	9315      	str	r3, [sp, #84]	; 0x54
 800e574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e578:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e57c:	e79d      	b.n	800e4ba <_strtod_l+0x9aa>
 800e57e:	f1ba 0f01 	cmp.w	sl, #1
 800e582:	d102      	bne.n	800e58a <_strtod_l+0xa7a>
 800e584:	2f00      	cmp	r7, #0
 800e586:	f43f ad83 	beq.w	800e090 <_strtod_l+0x580>
 800e58a:	4b62      	ldr	r3, [pc, #392]	; (800e714 <_strtod_l+0xc04>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	e78e      	b.n	800e4ae <_strtod_l+0x99e>
 800e590:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e710 <_strtod_l+0xc00>
 800e594:	f04f 0800 	mov.w	r8, #0
 800e598:	e7e7      	b.n	800e56a <_strtod_l+0xa5a>
 800e59a:	4b5d      	ldr	r3, [pc, #372]	; (800e710 <_strtod_l+0xc00>)
 800e59c:	4640      	mov	r0, r8
 800e59e:	4649      	mov	r1, r9
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f7f2 f829 	bl	80005f8 <__aeabi_dmul>
 800e5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5a8:	4680      	mov	r8, r0
 800e5aa:	4689      	mov	r9, r1
 800e5ac:	b933      	cbnz	r3, 800e5bc <_strtod_l+0xaac>
 800e5ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5b2:	900e      	str	r0, [sp, #56]	; 0x38
 800e5b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e5ba:	e7dd      	b.n	800e578 <_strtod_l+0xa68>
 800e5bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e5c0:	e7f9      	b.n	800e5b6 <_strtod_l+0xaa6>
 800e5c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e5c6:	9b04      	ldr	r3, [sp, #16]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d1a8      	bne.n	800e51e <_strtod_l+0xa0e>
 800e5cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e5d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5d2:	0d1b      	lsrs	r3, r3, #20
 800e5d4:	051b      	lsls	r3, r3, #20
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d1a1      	bne.n	800e51e <_strtod_l+0xa0e>
 800e5da:	4640      	mov	r0, r8
 800e5dc:	4649      	mov	r1, r9
 800e5de:	f7f2 fb6b 	bl	8000cb8 <__aeabi_d2lz>
 800e5e2:	f7f1 ffdb 	bl	800059c <__aeabi_l2d>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	4640      	mov	r0, r8
 800e5ec:	4649      	mov	r1, r9
 800e5ee:	f7f1 fe4b 	bl	8000288 <__aeabi_dsub>
 800e5f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5f8:	ea43 030a 	orr.w	r3, r3, sl
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	4680      	mov	r8, r0
 800e600:	4689      	mov	r9, r1
 800e602:	d055      	beq.n	800e6b0 <_strtod_l+0xba0>
 800e604:	a336      	add	r3, pc, #216	; (adr r3, 800e6e0 <_strtod_l+0xbd0>)
 800e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60a:	f7f2 fa67 	bl	8000adc <__aeabi_dcmplt>
 800e60e:	2800      	cmp	r0, #0
 800e610:	f47f acd0 	bne.w	800dfb4 <_strtod_l+0x4a4>
 800e614:	a334      	add	r3, pc, #208	; (adr r3, 800e6e8 <_strtod_l+0xbd8>)
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	4640      	mov	r0, r8
 800e61c:	4649      	mov	r1, r9
 800e61e:	f7f2 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 800e622:	2800      	cmp	r0, #0
 800e624:	f43f af7b 	beq.w	800e51e <_strtod_l+0xa0e>
 800e628:	e4c4      	b.n	800dfb4 <_strtod_l+0x4a4>
 800e62a:	9b04      	ldr	r3, [sp, #16]
 800e62c:	b333      	cbz	r3, 800e67c <_strtod_l+0xb6c>
 800e62e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e630:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e634:	d822      	bhi.n	800e67c <_strtod_l+0xb6c>
 800e636:	a32e      	add	r3, pc, #184	; (adr r3, 800e6f0 <_strtod_l+0xbe0>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	4640      	mov	r0, r8
 800e63e:	4649      	mov	r1, r9
 800e640:	f7f2 fa56 	bl	8000af0 <__aeabi_dcmple>
 800e644:	b1a0      	cbz	r0, 800e670 <_strtod_l+0xb60>
 800e646:	4649      	mov	r1, r9
 800e648:	4640      	mov	r0, r8
 800e64a:	f7f2 faad 	bl	8000ba8 <__aeabi_d2uiz>
 800e64e:	2801      	cmp	r0, #1
 800e650:	bf38      	it	cc
 800e652:	2001      	movcc	r0, #1
 800e654:	f7f1 ff56 	bl	8000504 <__aeabi_ui2d>
 800e658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e65a:	4680      	mov	r8, r0
 800e65c:	4689      	mov	r9, r1
 800e65e:	bb23      	cbnz	r3, 800e6aa <_strtod_l+0xb9a>
 800e660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e664:	9010      	str	r0, [sp, #64]	; 0x40
 800e666:	9311      	str	r3, [sp, #68]	; 0x44
 800e668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e66c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e674:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e678:	1a9b      	subs	r3, r3, r2
 800e67a:	9309      	str	r3, [sp, #36]	; 0x24
 800e67c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e680:	eeb0 0a48 	vmov.f32	s0, s16
 800e684:	eef0 0a68 	vmov.f32	s1, s17
 800e688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e68c:	f001 fe56 	bl	801033c <__ulp>
 800e690:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e694:	ec53 2b10 	vmov	r2, r3, d0
 800e698:	f7f1 ffae 	bl	80005f8 <__aeabi_dmul>
 800e69c:	ec53 2b18 	vmov	r2, r3, d8
 800e6a0:	f7f1 fdf4 	bl	800028c <__adddf3>
 800e6a4:	4682      	mov	sl, r0
 800e6a6:	468b      	mov	fp, r1
 800e6a8:	e78d      	b.n	800e5c6 <_strtod_l+0xab6>
 800e6aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e6ae:	e7db      	b.n	800e668 <_strtod_l+0xb58>
 800e6b0:	a311      	add	r3, pc, #68	; (adr r3, 800e6f8 <_strtod_l+0xbe8>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	f7f2 fa11 	bl	8000adc <__aeabi_dcmplt>
 800e6ba:	e7b2      	b.n	800e622 <_strtod_l+0xb12>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	930a      	str	r3, [sp, #40]	; 0x28
 800e6c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e6c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6c4:	6013      	str	r3, [r2, #0]
 800e6c6:	f7ff ba6b 	b.w	800dba0 <_strtod_l+0x90>
 800e6ca:	2a65      	cmp	r2, #101	; 0x65
 800e6cc:	f43f ab5f 	beq.w	800dd8e <_strtod_l+0x27e>
 800e6d0:	2a45      	cmp	r2, #69	; 0x45
 800e6d2:	f43f ab5c 	beq.w	800dd8e <_strtod_l+0x27e>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	f7ff bb94 	b.w	800de04 <_strtod_l+0x2f4>
 800e6dc:	f3af 8000 	nop.w
 800e6e0:	94a03595 	.word	0x94a03595
 800e6e4:	3fdfffff 	.word	0x3fdfffff
 800e6e8:	35afe535 	.word	0x35afe535
 800e6ec:	3fe00000 	.word	0x3fe00000
 800e6f0:	ffc00000 	.word	0xffc00000
 800e6f4:	41dfffff 	.word	0x41dfffff
 800e6f8:	94a03595 	.word	0x94a03595
 800e6fc:	3fcfffff 	.word	0x3fcfffff
 800e700:	3ff00000 	.word	0x3ff00000
 800e704:	7ff00000 	.word	0x7ff00000
 800e708:	7fe00000 	.word	0x7fe00000
 800e70c:	7c9fffff 	.word	0x7c9fffff
 800e710:	3fe00000 	.word	0x3fe00000
 800e714:	bff00000 	.word	0xbff00000
 800e718:	7fefffff 	.word	0x7fefffff

0800e71c <_strtod_r>:
 800e71c:	4b01      	ldr	r3, [pc, #4]	; (800e724 <_strtod_r+0x8>)
 800e71e:	f7ff b9f7 	b.w	800db10 <_strtod_l>
 800e722:	bf00      	nop
 800e724:	200000e4 	.word	0x200000e4

0800e728 <_strtol_l.constprop.0>:
 800e728:	2b01      	cmp	r3, #1
 800e72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e72e:	d001      	beq.n	800e734 <_strtol_l.constprop.0+0xc>
 800e730:	2b24      	cmp	r3, #36	; 0x24
 800e732:	d906      	bls.n	800e742 <_strtol_l.constprop.0+0x1a>
 800e734:	f7fe faaa 	bl	800cc8c <__errno>
 800e738:	2316      	movs	r3, #22
 800e73a:	6003      	str	r3, [r0, #0]
 800e73c:	2000      	movs	r0, #0
 800e73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e742:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e828 <_strtol_l.constprop.0+0x100>
 800e746:	460d      	mov	r5, r1
 800e748:	462e      	mov	r6, r5
 800e74a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e74e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e752:	f017 0708 	ands.w	r7, r7, #8
 800e756:	d1f7      	bne.n	800e748 <_strtol_l.constprop.0+0x20>
 800e758:	2c2d      	cmp	r4, #45	; 0x2d
 800e75a:	d132      	bne.n	800e7c2 <_strtol_l.constprop.0+0x9a>
 800e75c:	782c      	ldrb	r4, [r5, #0]
 800e75e:	2701      	movs	r7, #1
 800e760:	1cb5      	adds	r5, r6, #2
 800e762:	2b00      	cmp	r3, #0
 800e764:	d05b      	beq.n	800e81e <_strtol_l.constprop.0+0xf6>
 800e766:	2b10      	cmp	r3, #16
 800e768:	d109      	bne.n	800e77e <_strtol_l.constprop.0+0x56>
 800e76a:	2c30      	cmp	r4, #48	; 0x30
 800e76c:	d107      	bne.n	800e77e <_strtol_l.constprop.0+0x56>
 800e76e:	782c      	ldrb	r4, [r5, #0]
 800e770:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e774:	2c58      	cmp	r4, #88	; 0x58
 800e776:	d14d      	bne.n	800e814 <_strtol_l.constprop.0+0xec>
 800e778:	786c      	ldrb	r4, [r5, #1]
 800e77a:	2310      	movs	r3, #16
 800e77c:	3502      	adds	r5, #2
 800e77e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e782:	f108 38ff 	add.w	r8, r8, #4294967295
 800e786:	f04f 0c00 	mov.w	ip, #0
 800e78a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e78e:	4666      	mov	r6, ip
 800e790:	fb03 8a19 	mls	sl, r3, r9, r8
 800e794:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e798:	f1be 0f09 	cmp.w	lr, #9
 800e79c:	d816      	bhi.n	800e7cc <_strtol_l.constprop.0+0xa4>
 800e79e:	4674      	mov	r4, lr
 800e7a0:	42a3      	cmp	r3, r4
 800e7a2:	dd24      	ble.n	800e7ee <_strtol_l.constprop.0+0xc6>
 800e7a4:	f1bc 0f00 	cmp.w	ip, #0
 800e7a8:	db1e      	blt.n	800e7e8 <_strtol_l.constprop.0+0xc0>
 800e7aa:	45b1      	cmp	r9, r6
 800e7ac:	d31c      	bcc.n	800e7e8 <_strtol_l.constprop.0+0xc0>
 800e7ae:	d101      	bne.n	800e7b4 <_strtol_l.constprop.0+0x8c>
 800e7b0:	45a2      	cmp	sl, r4
 800e7b2:	db19      	blt.n	800e7e8 <_strtol_l.constprop.0+0xc0>
 800e7b4:	fb06 4603 	mla	r6, r6, r3, r4
 800e7b8:	f04f 0c01 	mov.w	ip, #1
 800e7bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7c0:	e7e8      	b.n	800e794 <_strtol_l.constprop.0+0x6c>
 800e7c2:	2c2b      	cmp	r4, #43	; 0x2b
 800e7c4:	bf04      	itt	eq
 800e7c6:	782c      	ldrbeq	r4, [r5, #0]
 800e7c8:	1cb5      	addeq	r5, r6, #2
 800e7ca:	e7ca      	b.n	800e762 <_strtol_l.constprop.0+0x3a>
 800e7cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e7d0:	f1be 0f19 	cmp.w	lr, #25
 800e7d4:	d801      	bhi.n	800e7da <_strtol_l.constprop.0+0xb2>
 800e7d6:	3c37      	subs	r4, #55	; 0x37
 800e7d8:	e7e2      	b.n	800e7a0 <_strtol_l.constprop.0+0x78>
 800e7da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e7de:	f1be 0f19 	cmp.w	lr, #25
 800e7e2:	d804      	bhi.n	800e7ee <_strtol_l.constprop.0+0xc6>
 800e7e4:	3c57      	subs	r4, #87	; 0x57
 800e7e6:	e7db      	b.n	800e7a0 <_strtol_l.constprop.0+0x78>
 800e7e8:	f04f 3cff 	mov.w	ip, #4294967295
 800e7ec:	e7e6      	b.n	800e7bc <_strtol_l.constprop.0+0x94>
 800e7ee:	f1bc 0f00 	cmp.w	ip, #0
 800e7f2:	da05      	bge.n	800e800 <_strtol_l.constprop.0+0xd8>
 800e7f4:	2322      	movs	r3, #34	; 0x22
 800e7f6:	6003      	str	r3, [r0, #0]
 800e7f8:	4646      	mov	r6, r8
 800e7fa:	b942      	cbnz	r2, 800e80e <_strtol_l.constprop.0+0xe6>
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	e79e      	b.n	800e73e <_strtol_l.constprop.0+0x16>
 800e800:	b107      	cbz	r7, 800e804 <_strtol_l.constprop.0+0xdc>
 800e802:	4276      	negs	r6, r6
 800e804:	2a00      	cmp	r2, #0
 800e806:	d0f9      	beq.n	800e7fc <_strtol_l.constprop.0+0xd4>
 800e808:	f1bc 0f00 	cmp.w	ip, #0
 800e80c:	d000      	beq.n	800e810 <_strtol_l.constprop.0+0xe8>
 800e80e:	1e69      	subs	r1, r5, #1
 800e810:	6011      	str	r1, [r2, #0]
 800e812:	e7f3      	b.n	800e7fc <_strtol_l.constprop.0+0xd4>
 800e814:	2430      	movs	r4, #48	; 0x30
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1b1      	bne.n	800e77e <_strtol_l.constprop.0+0x56>
 800e81a:	2308      	movs	r3, #8
 800e81c:	e7af      	b.n	800e77e <_strtol_l.constprop.0+0x56>
 800e81e:	2c30      	cmp	r4, #48	; 0x30
 800e820:	d0a5      	beq.n	800e76e <_strtol_l.constprop.0+0x46>
 800e822:	230a      	movs	r3, #10
 800e824:	e7ab      	b.n	800e77e <_strtol_l.constprop.0+0x56>
 800e826:	bf00      	nop
 800e828:	080219c9 	.word	0x080219c9

0800e82c <_strtol_r>:
 800e82c:	f7ff bf7c 	b.w	800e728 <_strtol_l.constprop.0>

0800e830 <strtol>:
 800e830:	4613      	mov	r3, r2
 800e832:	460a      	mov	r2, r1
 800e834:	4601      	mov	r1, r0
 800e836:	4802      	ldr	r0, [pc, #8]	; (800e840 <strtol+0x10>)
 800e838:	6800      	ldr	r0, [r0, #0]
 800e83a:	f7ff bf75 	b.w	800e728 <_strtol_l.constprop.0>
 800e83e:	bf00      	nop
 800e840:	2000007c 	.word	0x2000007c

0800e844 <quorem>:
 800e844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	6903      	ldr	r3, [r0, #16]
 800e84a:	690c      	ldr	r4, [r1, #16]
 800e84c:	42a3      	cmp	r3, r4
 800e84e:	4607      	mov	r7, r0
 800e850:	f2c0 8081 	blt.w	800e956 <quorem+0x112>
 800e854:	3c01      	subs	r4, #1
 800e856:	f101 0814 	add.w	r8, r1, #20
 800e85a:	f100 0514 	add.w	r5, r0, #20
 800e85e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e86c:	3301      	adds	r3, #1
 800e86e:	429a      	cmp	r2, r3
 800e870:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e878:	fbb2 f6f3 	udiv	r6, r2, r3
 800e87c:	d331      	bcc.n	800e8e2 <quorem+0x9e>
 800e87e:	f04f 0e00 	mov.w	lr, #0
 800e882:	4640      	mov	r0, r8
 800e884:	46ac      	mov	ip, r5
 800e886:	46f2      	mov	sl, lr
 800e888:	f850 2b04 	ldr.w	r2, [r0], #4
 800e88c:	b293      	uxth	r3, r2
 800e88e:	fb06 e303 	mla	r3, r6, r3, lr
 800e892:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e896:	b29b      	uxth	r3, r3
 800e898:	ebaa 0303 	sub.w	r3, sl, r3
 800e89c:	f8dc a000 	ldr.w	sl, [ip]
 800e8a0:	0c12      	lsrs	r2, r2, #16
 800e8a2:	fa13 f38a 	uxtah	r3, r3, sl
 800e8a6:	fb06 e202 	mla	r2, r6, r2, lr
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	9b00      	ldr	r3, [sp, #0]
 800e8ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8b2:	b292      	uxth	r2, r2
 800e8b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e8b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8c0:	4581      	cmp	r9, r0
 800e8c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8c6:	f84c 3b04 	str.w	r3, [ip], #4
 800e8ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8ce:	d2db      	bcs.n	800e888 <quorem+0x44>
 800e8d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8d4:	b92b      	cbnz	r3, 800e8e2 <quorem+0x9e>
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	3b04      	subs	r3, #4
 800e8da:	429d      	cmp	r5, r3
 800e8dc:	461a      	mov	r2, r3
 800e8de:	d32e      	bcc.n	800e93e <quorem+0xfa>
 800e8e0:	613c      	str	r4, [r7, #16]
 800e8e2:	4638      	mov	r0, r7
 800e8e4:	f001 fc84 	bl	80101f0 <__mcmp>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	db24      	blt.n	800e936 <quorem+0xf2>
 800e8ec:	3601      	adds	r6, #1
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	f04f 0c00 	mov.w	ip, #0
 800e8f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8f8:	f8d0 e000 	ldr.w	lr, [r0]
 800e8fc:	b293      	uxth	r3, r2
 800e8fe:	ebac 0303 	sub.w	r3, ip, r3
 800e902:	0c12      	lsrs	r2, r2, #16
 800e904:	fa13 f38e 	uxtah	r3, r3, lr
 800e908:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e90c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e910:	b29b      	uxth	r3, r3
 800e912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e916:	45c1      	cmp	r9, r8
 800e918:	f840 3b04 	str.w	r3, [r0], #4
 800e91c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e920:	d2e8      	bcs.n	800e8f4 <quorem+0xb0>
 800e922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e92a:	b922      	cbnz	r2, 800e936 <quorem+0xf2>
 800e92c:	3b04      	subs	r3, #4
 800e92e:	429d      	cmp	r5, r3
 800e930:	461a      	mov	r2, r3
 800e932:	d30a      	bcc.n	800e94a <quorem+0x106>
 800e934:	613c      	str	r4, [r7, #16]
 800e936:	4630      	mov	r0, r6
 800e938:	b003      	add	sp, #12
 800e93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93e:	6812      	ldr	r2, [r2, #0]
 800e940:	3b04      	subs	r3, #4
 800e942:	2a00      	cmp	r2, #0
 800e944:	d1cc      	bne.n	800e8e0 <quorem+0x9c>
 800e946:	3c01      	subs	r4, #1
 800e948:	e7c7      	b.n	800e8da <quorem+0x96>
 800e94a:	6812      	ldr	r2, [r2, #0]
 800e94c:	3b04      	subs	r3, #4
 800e94e:	2a00      	cmp	r2, #0
 800e950:	d1f0      	bne.n	800e934 <quorem+0xf0>
 800e952:	3c01      	subs	r4, #1
 800e954:	e7eb      	b.n	800e92e <quorem+0xea>
 800e956:	2000      	movs	r0, #0
 800e958:	e7ee      	b.n	800e938 <quorem+0xf4>
 800e95a:	0000      	movs	r0, r0
 800e95c:	0000      	movs	r0, r0
	...

0800e960 <_dtoa_r>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	ed2d 8b04 	vpush	{d8-d9}
 800e968:	ec57 6b10 	vmov	r6, r7, d0
 800e96c:	b093      	sub	sp, #76	; 0x4c
 800e96e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e970:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e974:	9106      	str	r1, [sp, #24]
 800e976:	ee10 aa10 	vmov	sl, s0
 800e97a:	4604      	mov	r4, r0
 800e97c:	9209      	str	r2, [sp, #36]	; 0x24
 800e97e:	930c      	str	r3, [sp, #48]	; 0x30
 800e980:	46bb      	mov	fp, r7
 800e982:	b975      	cbnz	r5, 800e9a2 <_dtoa_r+0x42>
 800e984:	2010      	movs	r0, #16
 800e986:	f001 f94d 	bl	800fc24 <malloc>
 800e98a:	4602      	mov	r2, r0
 800e98c:	6260      	str	r0, [r4, #36]	; 0x24
 800e98e:	b920      	cbnz	r0, 800e99a <_dtoa_r+0x3a>
 800e990:	4ba7      	ldr	r3, [pc, #668]	; (800ec30 <_dtoa_r+0x2d0>)
 800e992:	21ea      	movs	r1, #234	; 0xea
 800e994:	48a7      	ldr	r0, [pc, #668]	; (800ec34 <_dtoa_r+0x2d4>)
 800e996:	f002 f8ad 	bl	8010af4 <__assert_func>
 800e99a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e99e:	6005      	str	r5, [r0, #0]
 800e9a0:	60c5      	str	r5, [r0, #12]
 800e9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9a4:	6819      	ldr	r1, [r3, #0]
 800e9a6:	b151      	cbz	r1, 800e9be <_dtoa_r+0x5e>
 800e9a8:	685a      	ldr	r2, [r3, #4]
 800e9aa:	604a      	str	r2, [r1, #4]
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	4093      	lsls	r3, r2
 800e9b0:	608b      	str	r3, [r1, #8]
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f001 f990 	bl	800fcd8 <_Bfree>
 800e9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	1e3b      	subs	r3, r7, #0
 800e9c0:	bfaa      	itet	ge
 800e9c2:	2300      	movge	r3, #0
 800e9c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e9c8:	f8c8 3000 	strge.w	r3, [r8]
 800e9cc:	4b9a      	ldr	r3, [pc, #616]	; (800ec38 <_dtoa_r+0x2d8>)
 800e9ce:	bfbc      	itt	lt
 800e9d0:	2201      	movlt	r2, #1
 800e9d2:	f8c8 2000 	strlt.w	r2, [r8]
 800e9d6:	ea33 030b 	bics.w	r3, r3, fp
 800e9da:	d11b      	bne.n	800ea14 <_dtoa_r+0xb4>
 800e9dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9de:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9e8:	4333      	orrs	r3, r6
 800e9ea:	f000 8592 	beq.w	800f512 <_dtoa_r+0xbb2>
 800e9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9f0:	b963      	cbnz	r3, 800ea0c <_dtoa_r+0xac>
 800e9f2:	4b92      	ldr	r3, [pc, #584]	; (800ec3c <_dtoa_r+0x2dc>)
 800e9f4:	e022      	b.n	800ea3c <_dtoa_r+0xdc>
 800e9f6:	4b92      	ldr	r3, [pc, #584]	; (800ec40 <_dtoa_r+0x2e0>)
 800e9f8:	9301      	str	r3, [sp, #4]
 800e9fa:	3308      	adds	r3, #8
 800e9fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9fe:	6013      	str	r3, [r2, #0]
 800ea00:	9801      	ldr	r0, [sp, #4]
 800ea02:	b013      	add	sp, #76	; 0x4c
 800ea04:	ecbd 8b04 	vpop	{d8-d9}
 800ea08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0c:	4b8b      	ldr	r3, [pc, #556]	; (800ec3c <_dtoa_r+0x2dc>)
 800ea0e:	9301      	str	r3, [sp, #4]
 800ea10:	3303      	adds	r3, #3
 800ea12:	e7f3      	b.n	800e9fc <_dtoa_r+0x9c>
 800ea14:	2200      	movs	r2, #0
 800ea16:	2300      	movs	r3, #0
 800ea18:	4650      	mov	r0, sl
 800ea1a:	4659      	mov	r1, fp
 800ea1c:	f7f2 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea20:	ec4b ab19 	vmov	d9, sl, fp
 800ea24:	4680      	mov	r8, r0
 800ea26:	b158      	cbz	r0, 800ea40 <_dtoa_r+0xe0>
 800ea28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	6013      	str	r3, [r2, #0]
 800ea2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f000 856b 	beq.w	800f50c <_dtoa_r+0xbac>
 800ea36:	4883      	ldr	r0, [pc, #524]	; (800ec44 <_dtoa_r+0x2e4>)
 800ea38:	6018      	str	r0, [r3, #0]
 800ea3a:	1e43      	subs	r3, r0, #1
 800ea3c:	9301      	str	r3, [sp, #4]
 800ea3e:	e7df      	b.n	800ea00 <_dtoa_r+0xa0>
 800ea40:	ec4b ab10 	vmov	d0, sl, fp
 800ea44:	aa10      	add	r2, sp, #64	; 0x40
 800ea46:	a911      	add	r1, sp, #68	; 0x44
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f001 fcf3 	bl	8010434 <__d2b>
 800ea4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ea52:	ee08 0a10 	vmov	s16, r0
 800ea56:	2d00      	cmp	r5, #0
 800ea58:	f000 8084 	beq.w	800eb64 <_dtoa_r+0x204>
 800ea5c:	ee19 3a90 	vmov	r3, s19
 800ea60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea68:	4656      	mov	r6, sl
 800ea6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ea76:	4b74      	ldr	r3, [pc, #464]	; (800ec48 <_dtoa_r+0x2e8>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	f7f1 fc03 	bl	8000288 <__aeabi_dsub>
 800ea82:	a365      	add	r3, pc, #404	; (adr r3, 800ec18 <_dtoa_r+0x2b8>)
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	f7f1 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ea8c:	a364      	add	r3, pc, #400	; (adr r3, 800ec20 <_dtoa_r+0x2c0>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	f7f1 fbfb 	bl	800028c <__adddf3>
 800ea96:	4606      	mov	r6, r0
 800ea98:	4628      	mov	r0, r5
 800ea9a:	460f      	mov	r7, r1
 800ea9c:	f7f1 fd42 	bl	8000524 <__aeabi_i2d>
 800eaa0:	a361      	add	r3, pc, #388	; (adr r3, 800ec28 <_dtoa_r+0x2c8>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fda7 	bl	80005f8 <__aeabi_dmul>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4630      	mov	r0, r6
 800eab0:	4639      	mov	r1, r7
 800eab2:	f7f1 fbeb 	bl	800028c <__adddf3>
 800eab6:	4606      	mov	r6, r0
 800eab8:	460f      	mov	r7, r1
 800eaba:	f7f2 f84d 	bl	8000b58 <__aeabi_d2iz>
 800eabe:	2200      	movs	r2, #0
 800eac0:	9000      	str	r0, [sp, #0]
 800eac2:	2300      	movs	r3, #0
 800eac4:	4630      	mov	r0, r6
 800eac6:	4639      	mov	r1, r7
 800eac8:	f7f2 f808 	bl	8000adc <__aeabi_dcmplt>
 800eacc:	b150      	cbz	r0, 800eae4 <_dtoa_r+0x184>
 800eace:	9800      	ldr	r0, [sp, #0]
 800ead0:	f7f1 fd28 	bl	8000524 <__aeabi_i2d>
 800ead4:	4632      	mov	r2, r6
 800ead6:	463b      	mov	r3, r7
 800ead8:	f7f1 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 800eadc:	b910      	cbnz	r0, 800eae4 <_dtoa_r+0x184>
 800eade:	9b00      	ldr	r3, [sp, #0]
 800eae0:	3b01      	subs	r3, #1
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	9b00      	ldr	r3, [sp, #0]
 800eae6:	2b16      	cmp	r3, #22
 800eae8:	d85a      	bhi.n	800eba0 <_dtoa_r+0x240>
 800eaea:	9a00      	ldr	r2, [sp, #0]
 800eaec:	4b57      	ldr	r3, [pc, #348]	; (800ec4c <_dtoa_r+0x2ec>)
 800eaee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	ec51 0b19 	vmov	r0, r1, d9
 800eafa:	f7f1 ffef 	bl	8000adc <__aeabi_dcmplt>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d050      	beq.n	800eba4 <_dtoa_r+0x244>
 800eb02:	9b00      	ldr	r3, [sp, #0]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb0e:	1b5d      	subs	r5, r3, r5
 800eb10:	1e6b      	subs	r3, r5, #1
 800eb12:	9305      	str	r3, [sp, #20]
 800eb14:	bf45      	ittet	mi
 800eb16:	f1c5 0301 	rsbmi	r3, r5, #1
 800eb1a:	9304      	strmi	r3, [sp, #16]
 800eb1c:	2300      	movpl	r3, #0
 800eb1e:	2300      	movmi	r3, #0
 800eb20:	bf4c      	ite	mi
 800eb22:	9305      	strmi	r3, [sp, #20]
 800eb24:	9304      	strpl	r3, [sp, #16]
 800eb26:	9b00      	ldr	r3, [sp, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	db3d      	blt.n	800eba8 <_dtoa_r+0x248>
 800eb2c:	9b05      	ldr	r3, [sp, #20]
 800eb2e:	9a00      	ldr	r2, [sp, #0]
 800eb30:	920a      	str	r2, [sp, #40]	; 0x28
 800eb32:	4413      	add	r3, r2
 800eb34:	9305      	str	r3, [sp, #20]
 800eb36:	2300      	movs	r3, #0
 800eb38:	9307      	str	r3, [sp, #28]
 800eb3a:	9b06      	ldr	r3, [sp, #24]
 800eb3c:	2b09      	cmp	r3, #9
 800eb3e:	f200 8089 	bhi.w	800ec54 <_dtoa_r+0x2f4>
 800eb42:	2b05      	cmp	r3, #5
 800eb44:	bfc4      	itt	gt
 800eb46:	3b04      	subgt	r3, #4
 800eb48:	9306      	strgt	r3, [sp, #24]
 800eb4a:	9b06      	ldr	r3, [sp, #24]
 800eb4c:	f1a3 0302 	sub.w	r3, r3, #2
 800eb50:	bfcc      	ite	gt
 800eb52:	2500      	movgt	r5, #0
 800eb54:	2501      	movle	r5, #1
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	f200 8087 	bhi.w	800ec6a <_dtoa_r+0x30a>
 800eb5c:	e8df f003 	tbb	[pc, r3]
 800eb60:	59383a2d 	.word	0x59383a2d
 800eb64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb68:	441d      	add	r5, r3
 800eb6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb6e:	2b20      	cmp	r3, #32
 800eb70:	bfc1      	itttt	gt
 800eb72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb7a:	fa0b f303 	lslgt.w	r3, fp, r3
 800eb7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb82:	bfda      	itte	le
 800eb84:	f1c3 0320 	rsble	r3, r3, #32
 800eb88:	fa06 f003 	lslle.w	r0, r6, r3
 800eb8c:	4318      	orrgt	r0, r3
 800eb8e:	f7f1 fcb9 	bl	8000504 <__aeabi_ui2d>
 800eb92:	2301      	movs	r3, #1
 800eb94:	4606      	mov	r6, r0
 800eb96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb9a:	3d01      	subs	r5, #1
 800eb9c:	930e      	str	r3, [sp, #56]	; 0x38
 800eb9e:	e76a      	b.n	800ea76 <_dtoa_r+0x116>
 800eba0:	2301      	movs	r3, #1
 800eba2:	e7b2      	b.n	800eb0a <_dtoa_r+0x1aa>
 800eba4:	900b      	str	r0, [sp, #44]	; 0x2c
 800eba6:	e7b1      	b.n	800eb0c <_dtoa_r+0x1ac>
 800eba8:	9b04      	ldr	r3, [sp, #16]
 800ebaa:	9a00      	ldr	r2, [sp, #0]
 800ebac:	1a9b      	subs	r3, r3, r2
 800ebae:	9304      	str	r3, [sp, #16]
 800ebb0:	4253      	negs	r3, r2
 800ebb2:	9307      	str	r3, [sp, #28]
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	930a      	str	r3, [sp, #40]	; 0x28
 800ebb8:	e7bf      	b.n	800eb3a <_dtoa_r+0x1da>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	9308      	str	r3, [sp, #32]
 800ebbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	dc55      	bgt.n	800ec70 <_dtoa_r+0x310>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	9209      	str	r2, [sp, #36]	; 0x24
 800ebce:	e00c      	b.n	800ebea <_dtoa_r+0x28a>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e7f3      	b.n	800ebbc <_dtoa_r+0x25c>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebd8:	9308      	str	r3, [sp, #32]
 800ebda:	9b00      	ldr	r3, [sp, #0]
 800ebdc:	4413      	add	r3, r2
 800ebde:	9302      	str	r3, [sp, #8]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	9303      	str	r3, [sp, #12]
 800ebe6:	bfb8      	it	lt
 800ebe8:	2301      	movlt	r3, #1
 800ebea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebec:	2200      	movs	r2, #0
 800ebee:	6042      	str	r2, [r0, #4]
 800ebf0:	2204      	movs	r2, #4
 800ebf2:	f102 0614 	add.w	r6, r2, #20
 800ebf6:	429e      	cmp	r6, r3
 800ebf8:	6841      	ldr	r1, [r0, #4]
 800ebfa:	d93d      	bls.n	800ec78 <_dtoa_r+0x318>
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f001 f82b 	bl	800fc58 <_Balloc>
 800ec02:	9001      	str	r0, [sp, #4]
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d13b      	bne.n	800ec80 <_dtoa_r+0x320>
 800ec08:	4b11      	ldr	r3, [pc, #68]	; (800ec50 <_dtoa_r+0x2f0>)
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ec10:	e6c0      	b.n	800e994 <_dtoa_r+0x34>
 800ec12:	2301      	movs	r3, #1
 800ec14:	e7df      	b.n	800ebd6 <_dtoa_r+0x276>
 800ec16:	bf00      	nop
 800ec18:	636f4361 	.word	0x636f4361
 800ec1c:	3fd287a7 	.word	0x3fd287a7
 800ec20:	8b60c8b3 	.word	0x8b60c8b3
 800ec24:	3fc68a28 	.word	0x3fc68a28
 800ec28:	509f79fb 	.word	0x509f79fb
 800ec2c:	3fd34413 	.word	0x3fd34413
 800ec30:	08021ad6 	.word	0x08021ad6
 800ec34:	08021aed 	.word	0x08021aed
 800ec38:	7ff00000 	.word	0x7ff00000
 800ec3c:	08021ad2 	.word	0x08021ad2
 800ec40:	08021ac9 	.word	0x08021ac9
 800ec44:	0802194d 	.word	0x0802194d
 800ec48:	3ff80000 	.word	0x3ff80000
 800ec4c:	08021c58 	.word	0x08021c58
 800ec50:	08021b48 	.word	0x08021b48
 800ec54:	2501      	movs	r5, #1
 800ec56:	2300      	movs	r3, #0
 800ec58:	9306      	str	r3, [sp, #24]
 800ec5a:	9508      	str	r5, [sp, #32]
 800ec5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec64:	2200      	movs	r2, #0
 800ec66:	2312      	movs	r3, #18
 800ec68:	e7b0      	b.n	800ebcc <_dtoa_r+0x26c>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	9308      	str	r3, [sp, #32]
 800ec6e:	e7f5      	b.n	800ec5c <_dtoa_r+0x2fc>
 800ec70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec76:	e7b8      	b.n	800ebea <_dtoa_r+0x28a>
 800ec78:	3101      	adds	r1, #1
 800ec7a:	6041      	str	r1, [r0, #4]
 800ec7c:	0052      	lsls	r2, r2, #1
 800ec7e:	e7b8      	b.n	800ebf2 <_dtoa_r+0x292>
 800ec80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec82:	9a01      	ldr	r2, [sp, #4]
 800ec84:	601a      	str	r2, [r3, #0]
 800ec86:	9b03      	ldr	r3, [sp, #12]
 800ec88:	2b0e      	cmp	r3, #14
 800ec8a:	f200 809d 	bhi.w	800edc8 <_dtoa_r+0x468>
 800ec8e:	2d00      	cmp	r5, #0
 800ec90:	f000 809a 	beq.w	800edc8 <_dtoa_r+0x468>
 800ec94:	9b00      	ldr	r3, [sp, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	dd32      	ble.n	800ed00 <_dtoa_r+0x3a0>
 800ec9a:	4ab7      	ldr	r2, [pc, #732]	; (800ef78 <_dtoa_r+0x618>)
 800ec9c:	f003 030f 	and.w	r3, r3, #15
 800eca0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eca8:	9b00      	ldr	r3, [sp, #0]
 800ecaa:	05d8      	lsls	r0, r3, #23
 800ecac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ecb0:	d516      	bpl.n	800ece0 <_dtoa_r+0x380>
 800ecb2:	4bb2      	ldr	r3, [pc, #712]	; (800ef7c <_dtoa_r+0x61c>)
 800ecb4:	ec51 0b19 	vmov	r0, r1, d9
 800ecb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ecbc:	f7f1 fdc6 	bl	800084c <__aeabi_ddiv>
 800ecc0:	f007 070f 	and.w	r7, r7, #15
 800ecc4:	4682      	mov	sl, r0
 800ecc6:	468b      	mov	fp, r1
 800ecc8:	2503      	movs	r5, #3
 800ecca:	4eac      	ldr	r6, [pc, #688]	; (800ef7c <_dtoa_r+0x61c>)
 800eccc:	b957      	cbnz	r7, 800ece4 <_dtoa_r+0x384>
 800ecce:	4642      	mov	r2, r8
 800ecd0:	464b      	mov	r3, r9
 800ecd2:	4650      	mov	r0, sl
 800ecd4:	4659      	mov	r1, fp
 800ecd6:	f7f1 fdb9 	bl	800084c <__aeabi_ddiv>
 800ecda:	4682      	mov	sl, r0
 800ecdc:	468b      	mov	fp, r1
 800ecde:	e028      	b.n	800ed32 <_dtoa_r+0x3d2>
 800ece0:	2502      	movs	r5, #2
 800ece2:	e7f2      	b.n	800ecca <_dtoa_r+0x36a>
 800ece4:	07f9      	lsls	r1, r7, #31
 800ece6:	d508      	bpl.n	800ecfa <_dtoa_r+0x39a>
 800ece8:	4640      	mov	r0, r8
 800ecea:	4649      	mov	r1, r9
 800ecec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecf0:	f7f1 fc82 	bl	80005f8 <__aeabi_dmul>
 800ecf4:	3501      	adds	r5, #1
 800ecf6:	4680      	mov	r8, r0
 800ecf8:	4689      	mov	r9, r1
 800ecfa:	107f      	asrs	r7, r7, #1
 800ecfc:	3608      	adds	r6, #8
 800ecfe:	e7e5      	b.n	800eccc <_dtoa_r+0x36c>
 800ed00:	f000 809b 	beq.w	800ee3a <_dtoa_r+0x4da>
 800ed04:	9b00      	ldr	r3, [sp, #0]
 800ed06:	4f9d      	ldr	r7, [pc, #628]	; (800ef7c <_dtoa_r+0x61c>)
 800ed08:	425e      	negs	r6, r3
 800ed0a:	4b9b      	ldr	r3, [pc, #620]	; (800ef78 <_dtoa_r+0x618>)
 800ed0c:	f006 020f 	and.w	r2, r6, #15
 800ed10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	ec51 0b19 	vmov	r0, r1, d9
 800ed1c:	f7f1 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ed20:	1136      	asrs	r6, r6, #4
 800ed22:	4682      	mov	sl, r0
 800ed24:	468b      	mov	fp, r1
 800ed26:	2300      	movs	r3, #0
 800ed28:	2502      	movs	r5, #2
 800ed2a:	2e00      	cmp	r6, #0
 800ed2c:	d17a      	bne.n	800ee24 <_dtoa_r+0x4c4>
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1d3      	bne.n	800ecda <_dtoa_r+0x37a>
 800ed32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 8082 	beq.w	800ee3e <_dtoa_r+0x4de>
 800ed3a:	4b91      	ldr	r3, [pc, #580]	; (800ef80 <_dtoa_r+0x620>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4650      	mov	r0, sl
 800ed40:	4659      	mov	r1, fp
 800ed42:	f7f1 fecb 	bl	8000adc <__aeabi_dcmplt>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d079      	beq.n	800ee3e <_dtoa_r+0x4de>
 800ed4a:	9b03      	ldr	r3, [sp, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d076      	beq.n	800ee3e <_dtoa_r+0x4de>
 800ed50:	9b02      	ldr	r3, [sp, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	dd36      	ble.n	800edc4 <_dtoa_r+0x464>
 800ed56:	9b00      	ldr	r3, [sp, #0]
 800ed58:	4650      	mov	r0, sl
 800ed5a:	4659      	mov	r1, fp
 800ed5c:	1e5f      	subs	r7, r3, #1
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4b88      	ldr	r3, [pc, #544]	; (800ef84 <_dtoa_r+0x624>)
 800ed62:	f7f1 fc49 	bl	80005f8 <__aeabi_dmul>
 800ed66:	9e02      	ldr	r6, [sp, #8]
 800ed68:	4682      	mov	sl, r0
 800ed6a:	468b      	mov	fp, r1
 800ed6c:	3501      	adds	r5, #1
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f7f1 fbd8 	bl	8000524 <__aeabi_i2d>
 800ed74:	4652      	mov	r2, sl
 800ed76:	465b      	mov	r3, fp
 800ed78:	f7f1 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ed7c:	4b82      	ldr	r3, [pc, #520]	; (800ef88 <_dtoa_r+0x628>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f7f1 fa84 	bl	800028c <__adddf3>
 800ed84:	46d0      	mov	r8, sl
 800ed86:	46d9      	mov	r9, fp
 800ed88:	4682      	mov	sl, r0
 800ed8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ed8e:	2e00      	cmp	r6, #0
 800ed90:	d158      	bne.n	800ee44 <_dtoa_r+0x4e4>
 800ed92:	4b7e      	ldr	r3, [pc, #504]	; (800ef8c <_dtoa_r+0x62c>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	4640      	mov	r0, r8
 800ed98:	4649      	mov	r1, r9
 800ed9a:	f7f1 fa75 	bl	8000288 <__aeabi_dsub>
 800ed9e:	4652      	mov	r2, sl
 800eda0:	465b      	mov	r3, fp
 800eda2:	4680      	mov	r8, r0
 800eda4:	4689      	mov	r9, r1
 800eda6:	f7f1 feb7 	bl	8000b18 <__aeabi_dcmpgt>
 800edaa:	2800      	cmp	r0, #0
 800edac:	f040 8295 	bne.w	800f2da <_dtoa_r+0x97a>
 800edb0:	4652      	mov	r2, sl
 800edb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800edb6:	4640      	mov	r0, r8
 800edb8:	4649      	mov	r1, r9
 800edba:	f7f1 fe8f 	bl	8000adc <__aeabi_dcmplt>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	f040 8289 	bne.w	800f2d6 <_dtoa_r+0x976>
 800edc4:	ec5b ab19 	vmov	sl, fp, d9
 800edc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f2c0 8148 	blt.w	800f060 <_dtoa_r+0x700>
 800edd0:	9a00      	ldr	r2, [sp, #0]
 800edd2:	2a0e      	cmp	r2, #14
 800edd4:	f300 8144 	bgt.w	800f060 <_dtoa_r+0x700>
 800edd8:	4b67      	ldr	r3, [pc, #412]	; (800ef78 <_dtoa_r+0x618>)
 800edda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ede2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f280 80d5 	bge.w	800ef94 <_dtoa_r+0x634>
 800edea:	9b03      	ldr	r3, [sp, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	f300 80d1 	bgt.w	800ef94 <_dtoa_r+0x634>
 800edf2:	f040 826f 	bne.w	800f2d4 <_dtoa_r+0x974>
 800edf6:	4b65      	ldr	r3, [pc, #404]	; (800ef8c <_dtoa_r+0x62c>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	4640      	mov	r0, r8
 800edfc:	4649      	mov	r1, r9
 800edfe:	f7f1 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ee02:	4652      	mov	r2, sl
 800ee04:	465b      	mov	r3, fp
 800ee06:	f7f1 fe7d 	bl	8000b04 <__aeabi_dcmpge>
 800ee0a:	9e03      	ldr	r6, [sp, #12]
 800ee0c:	4637      	mov	r7, r6
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	f040 8245 	bne.w	800f29e <_dtoa_r+0x93e>
 800ee14:	9d01      	ldr	r5, [sp, #4]
 800ee16:	2331      	movs	r3, #49	; 0x31
 800ee18:	f805 3b01 	strb.w	r3, [r5], #1
 800ee1c:	9b00      	ldr	r3, [sp, #0]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	e240      	b.n	800f2a6 <_dtoa_r+0x946>
 800ee24:	07f2      	lsls	r2, r6, #31
 800ee26:	d505      	bpl.n	800ee34 <_dtoa_r+0x4d4>
 800ee28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee2c:	f7f1 fbe4 	bl	80005f8 <__aeabi_dmul>
 800ee30:	3501      	adds	r5, #1
 800ee32:	2301      	movs	r3, #1
 800ee34:	1076      	asrs	r6, r6, #1
 800ee36:	3708      	adds	r7, #8
 800ee38:	e777      	b.n	800ed2a <_dtoa_r+0x3ca>
 800ee3a:	2502      	movs	r5, #2
 800ee3c:	e779      	b.n	800ed32 <_dtoa_r+0x3d2>
 800ee3e:	9f00      	ldr	r7, [sp, #0]
 800ee40:	9e03      	ldr	r6, [sp, #12]
 800ee42:	e794      	b.n	800ed6e <_dtoa_r+0x40e>
 800ee44:	9901      	ldr	r1, [sp, #4]
 800ee46:	4b4c      	ldr	r3, [pc, #304]	; (800ef78 <_dtoa_r+0x618>)
 800ee48:	4431      	add	r1, r6
 800ee4a:	910d      	str	r1, [sp, #52]	; 0x34
 800ee4c:	9908      	ldr	r1, [sp, #32]
 800ee4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee56:	2900      	cmp	r1, #0
 800ee58:	d043      	beq.n	800eee2 <_dtoa_r+0x582>
 800ee5a:	494d      	ldr	r1, [pc, #308]	; (800ef90 <_dtoa_r+0x630>)
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	f7f1 fcf5 	bl	800084c <__aeabi_ddiv>
 800ee62:	4652      	mov	r2, sl
 800ee64:	465b      	mov	r3, fp
 800ee66:	f7f1 fa0f 	bl	8000288 <__aeabi_dsub>
 800ee6a:	9d01      	ldr	r5, [sp, #4]
 800ee6c:	4682      	mov	sl, r0
 800ee6e:	468b      	mov	fp, r1
 800ee70:	4649      	mov	r1, r9
 800ee72:	4640      	mov	r0, r8
 800ee74:	f7f1 fe70 	bl	8000b58 <__aeabi_d2iz>
 800ee78:	4606      	mov	r6, r0
 800ee7a:	f7f1 fb53 	bl	8000524 <__aeabi_i2d>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	4640      	mov	r0, r8
 800ee84:	4649      	mov	r1, r9
 800ee86:	f7f1 f9ff 	bl	8000288 <__aeabi_dsub>
 800ee8a:	3630      	adds	r6, #48	; 0x30
 800ee8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ee90:	4652      	mov	r2, sl
 800ee92:	465b      	mov	r3, fp
 800ee94:	4680      	mov	r8, r0
 800ee96:	4689      	mov	r9, r1
 800ee98:	f7f1 fe20 	bl	8000adc <__aeabi_dcmplt>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d163      	bne.n	800ef68 <_dtoa_r+0x608>
 800eea0:	4642      	mov	r2, r8
 800eea2:	464b      	mov	r3, r9
 800eea4:	4936      	ldr	r1, [pc, #216]	; (800ef80 <_dtoa_r+0x620>)
 800eea6:	2000      	movs	r0, #0
 800eea8:	f7f1 f9ee 	bl	8000288 <__aeabi_dsub>
 800eeac:	4652      	mov	r2, sl
 800eeae:	465b      	mov	r3, fp
 800eeb0:	f7f1 fe14 	bl	8000adc <__aeabi_dcmplt>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	f040 80b5 	bne.w	800f024 <_dtoa_r+0x6c4>
 800eeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eebc:	429d      	cmp	r5, r3
 800eebe:	d081      	beq.n	800edc4 <_dtoa_r+0x464>
 800eec0:	4b30      	ldr	r3, [pc, #192]	; (800ef84 <_dtoa_r+0x624>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	4650      	mov	r0, sl
 800eec6:	4659      	mov	r1, fp
 800eec8:	f7f1 fb96 	bl	80005f8 <__aeabi_dmul>
 800eecc:	4b2d      	ldr	r3, [pc, #180]	; (800ef84 <_dtoa_r+0x624>)
 800eece:	4682      	mov	sl, r0
 800eed0:	468b      	mov	fp, r1
 800eed2:	4640      	mov	r0, r8
 800eed4:	4649      	mov	r1, r9
 800eed6:	2200      	movs	r2, #0
 800eed8:	f7f1 fb8e 	bl	80005f8 <__aeabi_dmul>
 800eedc:	4680      	mov	r8, r0
 800eede:	4689      	mov	r9, r1
 800eee0:	e7c6      	b.n	800ee70 <_dtoa_r+0x510>
 800eee2:	4650      	mov	r0, sl
 800eee4:	4659      	mov	r1, fp
 800eee6:	f7f1 fb87 	bl	80005f8 <__aeabi_dmul>
 800eeea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eeec:	9d01      	ldr	r5, [sp, #4]
 800eeee:	930f      	str	r3, [sp, #60]	; 0x3c
 800eef0:	4682      	mov	sl, r0
 800eef2:	468b      	mov	fp, r1
 800eef4:	4649      	mov	r1, r9
 800eef6:	4640      	mov	r0, r8
 800eef8:	f7f1 fe2e 	bl	8000b58 <__aeabi_d2iz>
 800eefc:	4606      	mov	r6, r0
 800eefe:	f7f1 fb11 	bl	8000524 <__aeabi_i2d>
 800ef02:	3630      	adds	r6, #48	; 0x30
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	4640      	mov	r0, r8
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	f7f1 f9bc 	bl	8000288 <__aeabi_dsub>
 800ef10:	f805 6b01 	strb.w	r6, [r5], #1
 800ef14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef16:	429d      	cmp	r5, r3
 800ef18:	4680      	mov	r8, r0
 800ef1a:	4689      	mov	r9, r1
 800ef1c:	f04f 0200 	mov.w	r2, #0
 800ef20:	d124      	bne.n	800ef6c <_dtoa_r+0x60c>
 800ef22:	4b1b      	ldr	r3, [pc, #108]	; (800ef90 <_dtoa_r+0x630>)
 800ef24:	4650      	mov	r0, sl
 800ef26:	4659      	mov	r1, fp
 800ef28:	f7f1 f9b0 	bl	800028c <__adddf3>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4640      	mov	r0, r8
 800ef32:	4649      	mov	r1, r9
 800ef34:	f7f1 fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d173      	bne.n	800f024 <_dtoa_r+0x6c4>
 800ef3c:	4652      	mov	r2, sl
 800ef3e:	465b      	mov	r3, fp
 800ef40:	4913      	ldr	r1, [pc, #76]	; (800ef90 <_dtoa_r+0x630>)
 800ef42:	2000      	movs	r0, #0
 800ef44:	f7f1 f9a0 	bl	8000288 <__aeabi_dsub>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4640      	mov	r0, r8
 800ef4e:	4649      	mov	r1, r9
 800ef50:	f7f1 fdc4 	bl	8000adc <__aeabi_dcmplt>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	f43f af35 	beq.w	800edc4 <_dtoa_r+0x464>
 800ef5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef5c:	1e6b      	subs	r3, r5, #1
 800ef5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef64:	2b30      	cmp	r3, #48	; 0x30
 800ef66:	d0f8      	beq.n	800ef5a <_dtoa_r+0x5fa>
 800ef68:	9700      	str	r7, [sp, #0]
 800ef6a:	e049      	b.n	800f000 <_dtoa_r+0x6a0>
 800ef6c:	4b05      	ldr	r3, [pc, #20]	; (800ef84 <_dtoa_r+0x624>)
 800ef6e:	f7f1 fb43 	bl	80005f8 <__aeabi_dmul>
 800ef72:	4680      	mov	r8, r0
 800ef74:	4689      	mov	r9, r1
 800ef76:	e7bd      	b.n	800eef4 <_dtoa_r+0x594>
 800ef78:	08021c58 	.word	0x08021c58
 800ef7c:	08021c30 	.word	0x08021c30
 800ef80:	3ff00000 	.word	0x3ff00000
 800ef84:	40240000 	.word	0x40240000
 800ef88:	401c0000 	.word	0x401c0000
 800ef8c:	40140000 	.word	0x40140000
 800ef90:	3fe00000 	.word	0x3fe00000
 800ef94:	9d01      	ldr	r5, [sp, #4]
 800ef96:	4656      	mov	r6, sl
 800ef98:	465f      	mov	r7, fp
 800ef9a:	4642      	mov	r2, r8
 800ef9c:	464b      	mov	r3, r9
 800ef9e:	4630      	mov	r0, r6
 800efa0:	4639      	mov	r1, r7
 800efa2:	f7f1 fc53 	bl	800084c <__aeabi_ddiv>
 800efa6:	f7f1 fdd7 	bl	8000b58 <__aeabi_d2iz>
 800efaa:	4682      	mov	sl, r0
 800efac:	f7f1 faba 	bl	8000524 <__aeabi_i2d>
 800efb0:	4642      	mov	r2, r8
 800efb2:	464b      	mov	r3, r9
 800efb4:	f7f1 fb20 	bl	80005f8 <__aeabi_dmul>
 800efb8:	4602      	mov	r2, r0
 800efba:	460b      	mov	r3, r1
 800efbc:	4630      	mov	r0, r6
 800efbe:	4639      	mov	r1, r7
 800efc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800efc4:	f7f1 f960 	bl	8000288 <__aeabi_dsub>
 800efc8:	f805 6b01 	strb.w	r6, [r5], #1
 800efcc:	9e01      	ldr	r6, [sp, #4]
 800efce:	9f03      	ldr	r7, [sp, #12]
 800efd0:	1bae      	subs	r6, r5, r6
 800efd2:	42b7      	cmp	r7, r6
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	d135      	bne.n	800f046 <_dtoa_r+0x6e6>
 800efda:	f7f1 f957 	bl	800028c <__adddf3>
 800efde:	4642      	mov	r2, r8
 800efe0:	464b      	mov	r3, r9
 800efe2:	4606      	mov	r6, r0
 800efe4:	460f      	mov	r7, r1
 800efe6:	f7f1 fd97 	bl	8000b18 <__aeabi_dcmpgt>
 800efea:	b9d0      	cbnz	r0, 800f022 <_dtoa_r+0x6c2>
 800efec:	4642      	mov	r2, r8
 800efee:	464b      	mov	r3, r9
 800eff0:	4630      	mov	r0, r6
 800eff2:	4639      	mov	r1, r7
 800eff4:	f7f1 fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 800eff8:	b110      	cbz	r0, 800f000 <_dtoa_r+0x6a0>
 800effa:	f01a 0f01 	tst.w	sl, #1
 800effe:	d110      	bne.n	800f022 <_dtoa_r+0x6c2>
 800f000:	4620      	mov	r0, r4
 800f002:	ee18 1a10 	vmov	r1, s16
 800f006:	f000 fe67 	bl	800fcd8 <_Bfree>
 800f00a:	2300      	movs	r3, #0
 800f00c:	9800      	ldr	r0, [sp, #0]
 800f00e:	702b      	strb	r3, [r5, #0]
 800f010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f012:	3001      	adds	r0, #1
 800f014:	6018      	str	r0, [r3, #0]
 800f016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f43f acf1 	beq.w	800ea00 <_dtoa_r+0xa0>
 800f01e:	601d      	str	r5, [r3, #0]
 800f020:	e4ee      	b.n	800ea00 <_dtoa_r+0xa0>
 800f022:	9f00      	ldr	r7, [sp, #0]
 800f024:	462b      	mov	r3, r5
 800f026:	461d      	mov	r5, r3
 800f028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f02c:	2a39      	cmp	r2, #57	; 0x39
 800f02e:	d106      	bne.n	800f03e <_dtoa_r+0x6de>
 800f030:	9a01      	ldr	r2, [sp, #4]
 800f032:	429a      	cmp	r2, r3
 800f034:	d1f7      	bne.n	800f026 <_dtoa_r+0x6c6>
 800f036:	9901      	ldr	r1, [sp, #4]
 800f038:	2230      	movs	r2, #48	; 0x30
 800f03a:	3701      	adds	r7, #1
 800f03c:	700a      	strb	r2, [r1, #0]
 800f03e:	781a      	ldrb	r2, [r3, #0]
 800f040:	3201      	adds	r2, #1
 800f042:	701a      	strb	r2, [r3, #0]
 800f044:	e790      	b.n	800ef68 <_dtoa_r+0x608>
 800f046:	4ba6      	ldr	r3, [pc, #664]	; (800f2e0 <_dtoa_r+0x980>)
 800f048:	2200      	movs	r2, #0
 800f04a:	f7f1 fad5 	bl	80005f8 <__aeabi_dmul>
 800f04e:	2200      	movs	r2, #0
 800f050:	2300      	movs	r3, #0
 800f052:	4606      	mov	r6, r0
 800f054:	460f      	mov	r7, r1
 800f056:	f7f1 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d09d      	beq.n	800ef9a <_dtoa_r+0x63a>
 800f05e:	e7cf      	b.n	800f000 <_dtoa_r+0x6a0>
 800f060:	9a08      	ldr	r2, [sp, #32]
 800f062:	2a00      	cmp	r2, #0
 800f064:	f000 80d7 	beq.w	800f216 <_dtoa_r+0x8b6>
 800f068:	9a06      	ldr	r2, [sp, #24]
 800f06a:	2a01      	cmp	r2, #1
 800f06c:	f300 80ba 	bgt.w	800f1e4 <_dtoa_r+0x884>
 800f070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f072:	2a00      	cmp	r2, #0
 800f074:	f000 80b2 	beq.w	800f1dc <_dtoa_r+0x87c>
 800f078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f07c:	9e07      	ldr	r6, [sp, #28]
 800f07e:	9d04      	ldr	r5, [sp, #16]
 800f080:	9a04      	ldr	r2, [sp, #16]
 800f082:	441a      	add	r2, r3
 800f084:	9204      	str	r2, [sp, #16]
 800f086:	9a05      	ldr	r2, [sp, #20]
 800f088:	2101      	movs	r1, #1
 800f08a:	441a      	add	r2, r3
 800f08c:	4620      	mov	r0, r4
 800f08e:	9205      	str	r2, [sp, #20]
 800f090:	f000 ff24 	bl	800fedc <__i2b>
 800f094:	4607      	mov	r7, r0
 800f096:	2d00      	cmp	r5, #0
 800f098:	dd0c      	ble.n	800f0b4 <_dtoa_r+0x754>
 800f09a:	9b05      	ldr	r3, [sp, #20]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	dd09      	ble.n	800f0b4 <_dtoa_r+0x754>
 800f0a0:	42ab      	cmp	r3, r5
 800f0a2:	9a04      	ldr	r2, [sp, #16]
 800f0a4:	bfa8      	it	ge
 800f0a6:	462b      	movge	r3, r5
 800f0a8:	1ad2      	subs	r2, r2, r3
 800f0aa:	9204      	str	r2, [sp, #16]
 800f0ac:	9a05      	ldr	r2, [sp, #20]
 800f0ae:	1aed      	subs	r5, r5, r3
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	9305      	str	r3, [sp, #20]
 800f0b4:	9b07      	ldr	r3, [sp, #28]
 800f0b6:	b31b      	cbz	r3, 800f100 <_dtoa_r+0x7a0>
 800f0b8:	9b08      	ldr	r3, [sp, #32]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f000 80af 	beq.w	800f21e <_dtoa_r+0x8be>
 800f0c0:	2e00      	cmp	r6, #0
 800f0c2:	dd13      	ble.n	800f0ec <_dtoa_r+0x78c>
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	4632      	mov	r2, r6
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f000 ffc7 	bl	801005c <__pow5mult>
 800f0ce:	ee18 2a10 	vmov	r2, s16
 800f0d2:	4601      	mov	r1, r0
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 ff16 	bl	800ff08 <__multiply>
 800f0dc:	ee18 1a10 	vmov	r1, s16
 800f0e0:	4680      	mov	r8, r0
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f000 fdf8 	bl	800fcd8 <_Bfree>
 800f0e8:	ee08 8a10 	vmov	s16, r8
 800f0ec:	9b07      	ldr	r3, [sp, #28]
 800f0ee:	1b9a      	subs	r2, r3, r6
 800f0f0:	d006      	beq.n	800f100 <_dtoa_r+0x7a0>
 800f0f2:	ee18 1a10 	vmov	r1, s16
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f000 ffb0 	bl	801005c <__pow5mult>
 800f0fc:	ee08 0a10 	vmov	s16, r0
 800f100:	2101      	movs	r1, #1
 800f102:	4620      	mov	r0, r4
 800f104:	f000 feea 	bl	800fedc <__i2b>
 800f108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	4606      	mov	r6, r0
 800f10e:	f340 8088 	ble.w	800f222 <_dtoa_r+0x8c2>
 800f112:	461a      	mov	r2, r3
 800f114:	4601      	mov	r1, r0
 800f116:	4620      	mov	r0, r4
 800f118:	f000 ffa0 	bl	801005c <__pow5mult>
 800f11c:	9b06      	ldr	r3, [sp, #24]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	4606      	mov	r6, r0
 800f122:	f340 8081 	ble.w	800f228 <_dtoa_r+0x8c8>
 800f126:	f04f 0800 	mov.w	r8, #0
 800f12a:	6933      	ldr	r3, [r6, #16]
 800f12c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f130:	6918      	ldr	r0, [r3, #16]
 800f132:	f000 fe83 	bl	800fe3c <__hi0bits>
 800f136:	f1c0 0020 	rsb	r0, r0, #32
 800f13a:	9b05      	ldr	r3, [sp, #20]
 800f13c:	4418      	add	r0, r3
 800f13e:	f010 001f 	ands.w	r0, r0, #31
 800f142:	f000 8092 	beq.w	800f26a <_dtoa_r+0x90a>
 800f146:	f1c0 0320 	rsb	r3, r0, #32
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	f340 808a 	ble.w	800f264 <_dtoa_r+0x904>
 800f150:	f1c0 001c 	rsb	r0, r0, #28
 800f154:	9b04      	ldr	r3, [sp, #16]
 800f156:	4403      	add	r3, r0
 800f158:	9304      	str	r3, [sp, #16]
 800f15a:	9b05      	ldr	r3, [sp, #20]
 800f15c:	4403      	add	r3, r0
 800f15e:	4405      	add	r5, r0
 800f160:	9305      	str	r3, [sp, #20]
 800f162:	9b04      	ldr	r3, [sp, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	dd07      	ble.n	800f178 <_dtoa_r+0x818>
 800f168:	ee18 1a10 	vmov	r1, s16
 800f16c:	461a      	mov	r2, r3
 800f16e:	4620      	mov	r0, r4
 800f170:	f000 ffce 	bl	8010110 <__lshift>
 800f174:	ee08 0a10 	vmov	s16, r0
 800f178:	9b05      	ldr	r3, [sp, #20]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	dd05      	ble.n	800f18a <_dtoa_r+0x82a>
 800f17e:	4631      	mov	r1, r6
 800f180:	461a      	mov	r2, r3
 800f182:	4620      	mov	r0, r4
 800f184:	f000 ffc4 	bl	8010110 <__lshift>
 800f188:	4606      	mov	r6, r0
 800f18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d06e      	beq.n	800f26e <_dtoa_r+0x90e>
 800f190:	ee18 0a10 	vmov	r0, s16
 800f194:	4631      	mov	r1, r6
 800f196:	f001 f82b 	bl	80101f0 <__mcmp>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	da67      	bge.n	800f26e <_dtoa_r+0x90e>
 800f19e:	9b00      	ldr	r3, [sp, #0]
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	ee18 1a10 	vmov	r1, s16
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	220a      	movs	r2, #10
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f000 fdb5 	bl	800fd1c <__multadd>
 800f1b2:	9b08      	ldr	r3, [sp, #32]
 800f1b4:	ee08 0a10 	vmov	s16, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f000 81b1 	beq.w	800f520 <_dtoa_r+0xbc0>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	4639      	mov	r1, r7
 800f1c2:	220a      	movs	r2, #10
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f000 fda9 	bl	800fd1c <__multadd>
 800f1ca:	9b02      	ldr	r3, [sp, #8]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	4607      	mov	r7, r0
 800f1d0:	f300 808e 	bgt.w	800f2f0 <_dtoa_r+0x990>
 800f1d4:	9b06      	ldr	r3, [sp, #24]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	dc51      	bgt.n	800f27e <_dtoa_r+0x91e>
 800f1da:	e089      	b.n	800f2f0 <_dtoa_r+0x990>
 800f1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1e2:	e74b      	b.n	800f07c <_dtoa_r+0x71c>
 800f1e4:	9b03      	ldr	r3, [sp, #12]
 800f1e6:	1e5e      	subs	r6, r3, #1
 800f1e8:	9b07      	ldr	r3, [sp, #28]
 800f1ea:	42b3      	cmp	r3, r6
 800f1ec:	bfbf      	itttt	lt
 800f1ee:	9b07      	ldrlt	r3, [sp, #28]
 800f1f0:	9607      	strlt	r6, [sp, #28]
 800f1f2:	1af2      	sublt	r2, r6, r3
 800f1f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f1f6:	bfb6      	itet	lt
 800f1f8:	189b      	addlt	r3, r3, r2
 800f1fa:	1b9e      	subge	r6, r3, r6
 800f1fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f1fe:	9b03      	ldr	r3, [sp, #12]
 800f200:	bfb8      	it	lt
 800f202:	2600      	movlt	r6, #0
 800f204:	2b00      	cmp	r3, #0
 800f206:	bfb7      	itett	lt
 800f208:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f20c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f210:	1a9d      	sublt	r5, r3, r2
 800f212:	2300      	movlt	r3, #0
 800f214:	e734      	b.n	800f080 <_dtoa_r+0x720>
 800f216:	9e07      	ldr	r6, [sp, #28]
 800f218:	9d04      	ldr	r5, [sp, #16]
 800f21a:	9f08      	ldr	r7, [sp, #32]
 800f21c:	e73b      	b.n	800f096 <_dtoa_r+0x736>
 800f21e:	9a07      	ldr	r2, [sp, #28]
 800f220:	e767      	b.n	800f0f2 <_dtoa_r+0x792>
 800f222:	9b06      	ldr	r3, [sp, #24]
 800f224:	2b01      	cmp	r3, #1
 800f226:	dc18      	bgt.n	800f25a <_dtoa_r+0x8fa>
 800f228:	f1ba 0f00 	cmp.w	sl, #0
 800f22c:	d115      	bne.n	800f25a <_dtoa_r+0x8fa>
 800f22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f232:	b993      	cbnz	r3, 800f25a <_dtoa_r+0x8fa>
 800f234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f238:	0d1b      	lsrs	r3, r3, #20
 800f23a:	051b      	lsls	r3, r3, #20
 800f23c:	b183      	cbz	r3, 800f260 <_dtoa_r+0x900>
 800f23e:	9b04      	ldr	r3, [sp, #16]
 800f240:	3301      	adds	r3, #1
 800f242:	9304      	str	r3, [sp, #16]
 800f244:	9b05      	ldr	r3, [sp, #20]
 800f246:	3301      	adds	r3, #1
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	f04f 0801 	mov.w	r8, #1
 800f24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f250:	2b00      	cmp	r3, #0
 800f252:	f47f af6a 	bne.w	800f12a <_dtoa_r+0x7ca>
 800f256:	2001      	movs	r0, #1
 800f258:	e76f      	b.n	800f13a <_dtoa_r+0x7da>
 800f25a:	f04f 0800 	mov.w	r8, #0
 800f25e:	e7f6      	b.n	800f24e <_dtoa_r+0x8ee>
 800f260:	4698      	mov	r8, r3
 800f262:	e7f4      	b.n	800f24e <_dtoa_r+0x8ee>
 800f264:	f43f af7d 	beq.w	800f162 <_dtoa_r+0x802>
 800f268:	4618      	mov	r0, r3
 800f26a:	301c      	adds	r0, #28
 800f26c:	e772      	b.n	800f154 <_dtoa_r+0x7f4>
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	2b00      	cmp	r3, #0
 800f272:	dc37      	bgt.n	800f2e4 <_dtoa_r+0x984>
 800f274:	9b06      	ldr	r3, [sp, #24]
 800f276:	2b02      	cmp	r3, #2
 800f278:	dd34      	ble.n	800f2e4 <_dtoa_r+0x984>
 800f27a:	9b03      	ldr	r3, [sp, #12]
 800f27c:	9302      	str	r3, [sp, #8]
 800f27e:	9b02      	ldr	r3, [sp, #8]
 800f280:	b96b      	cbnz	r3, 800f29e <_dtoa_r+0x93e>
 800f282:	4631      	mov	r1, r6
 800f284:	2205      	movs	r2, #5
 800f286:	4620      	mov	r0, r4
 800f288:	f000 fd48 	bl	800fd1c <__multadd>
 800f28c:	4601      	mov	r1, r0
 800f28e:	4606      	mov	r6, r0
 800f290:	ee18 0a10 	vmov	r0, s16
 800f294:	f000 ffac 	bl	80101f0 <__mcmp>
 800f298:	2800      	cmp	r0, #0
 800f29a:	f73f adbb 	bgt.w	800ee14 <_dtoa_r+0x4b4>
 800f29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a0:	9d01      	ldr	r5, [sp, #4]
 800f2a2:	43db      	mvns	r3, r3
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	f04f 0800 	mov.w	r8, #0
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f000 fd13 	bl	800fcd8 <_Bfree>
 800f2b2:	2f00      	cmp	r7, #0
 800f2b4:	f43f aea4 	beq.w	800f000 <_dtoa_r+0x6a0>
 800f2b8:	f1b8 0f00 	cmp.w	r8, #0
 800f2bc:	d005      	beq.n	800f2ca <_dtoa_r+0x96a>
 800f2be:	45b8      	cmp	r8, r7
 800f2c0:	d003      	beq.n	800f2ca <_dtoa_r+0x96a>
 800f2c2:	4641      	mov	r1, r8
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f000 fd07 	bl	800fcd8 <_Bfree>
 800f2ca:	4639      	mov	r1, r7
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f000 fd03 	bl	800fcd8 <_Bfree>
 800f2d2:	e695      	b.n	800f000 <_dtoa_r+0x6a0>
 800f2d4:	2600      	movs	r6, #0
 800f2d6:	4637      	mov	r7, r6
 800f2d8:	e7e1      	b.n	800f29e <_dtoa_r+0x93e>
 800f2da:	9700      	str	r7, [sp, #0]
 800f2dc:	4637      	mov	r7, r6
 800f2de:	e599      	b.n	800ee14 <_dtoa_r+0x4b4>
 800f2e0:	40240000 	.word	0x40240000
 800f2e4:	9b08      	ldr	r3, [sp, #32]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f000 80ca 	beq.w	800f480 <_dtoa_r+0xb20>
 800f2ec:	9b03      	ldr	r3, [sp, #12]
 800f2ee:	9302      	str	r3, [sp, #8]
 800f2f0:	2d00      	cmp	r5, #0
 800f2f2:	dd05      	ble.n	800f300 <_dtoa_r+0x9a0>
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	462a      	mov	r2, r5
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f000 ff09 	bl	8010110 <__lshift>
 800f2fe:	4607      	mov	r7, r0
 800f300:	f1b8 0f00 	cmp.w	r8, #0
 800f304:	d05b      	beq.n	800f3be <_dtoa_r+0xa5e>
 800f306:	6879      	ldr	r1, [r7, #4]
 800f308:	4620      	mov	r0, r4
 800f30a:	f000 fca5 	bl	800fc58 <_Balloc>
 800f30e:	4605      	mov	r5, r0
 800f310:	b928      	cbnz	r0, 800f31e <_dtoa_r+0x9be>
 800f312:	4b87      	ldr	r3, [pc, #540]	; (800f530 <_dtoa_r+0xbd0>)
 800f314:	4602      	mov	r2, r0
 800f316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f31a:	f7ff bb3b 	b.w	800e994 <_dtoa_r+0x34>
 800f31e:	693a      	ldr	r2, [r7, #16]
 800f320:	3202      	adds	r2, #2
 800f322:	0092      	lsls	r2, r2, #2
 800f324:	f107 010c 	add.w	r1, r7, #12
 800f328:	300c      	adds	r0, #12
 800f32a:	f7fd fce9 	bl	800cd00 <memcpy>
 800f32e:	2201      	movs	r2, #1
 800f330:	4629      	mov	r1, r5
 800f332:	4620      	mov	r0, r4
 800f334:	f000 feec 	bl	8010110 <__lshift>
 800f338:	9b01      	ldr	r3, [sp, #4]
 800f33a:	f103 0901 	add.w	r9, r3, #1
 800f33e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f342:	4413      	add	r3, r2
 800f344:	9305      	str	r3, [sp, #20]
 800f346:	f00a 0301 	and.w	r3, sl, #1
 800f34a:	46b8      	mov	r8, r7
 800f34c:	9304      	str	r3, [sp, #16]
 800f34e:	4607      	mov	r7, r0
 800f350:	4631      	mov	r1, r6
 800f352:	ee18 0a10 	vmov	r0, s16
 800f356:	f7ff fa75 	bl	800e844 <quorem>
 800f35a:	4641      	mov	r1, r8
 800f35c:	9002      	str	r0, [sp, #8]
 800f35e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f362:	ee18 0a10 	vmov	r0, s16
 800f366:	f000 ff43 	bl	80101f0 <__mcmp>
 800f36a:	463a      	mov	r2, r7
 800f36c:	9003      	str	r0, [sp, #12]
 800f36e:	4631      	mov	r1, r6
 800f370:	4620      	mov	r0, r4
 800f372:	f000 ff59 	bl	8010228 <__mdiff>
 800f376:	68c2      	ldr	r2, [r0, #12]
 800f378:	f109 3bff 	add.w	fp, r9, #4294967295
 800f37c:	4605      	mov	r5, r0
 800f37e:	bb02      	cbnz	r2, 800f3c2 <_dtoa_r+0xa62>
 800f380:	4601      	mov	r1, r0
 800f382:	ee18 0a10 	vmov	r0, s16
 800f386:	f000 ff33 	bl	80101f0 <__mcmp>
 800f38a:	4602      	mov	r2, r0
 800f38c:	4629      	mov	r1, r5
 800f38e:	4620      	mov	r0, r4
 800f390:	9207      	str	r2, [sp, #28]
 800f392:	f000 fca1 	bl	800fcd8 <_Bfree>
 800f396:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f39a:	ea43 0102 	orr.w	r1, r3, r2
 800f39e:	9b04      	ldr	r3, [sp, #16]
 800f3a0:	430b      	orrs	r3, r1
 800f3a2:	464d      	mov	r5, r9
 800f3a4:	d10f      	bne.n	800f3c6 <_dtoa_r+0xa66>
 800f3a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3aa:	d02a      	beq.n	800f402 <_dtoa_r+0xaa2>
 800f3ac:	9b03      	ldr	r3, [sp, #12]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	dd02      	ble.n	800f3b8 <_dtoa_r+0xa58>
 800f3b2:	9b02      	ldr	r3, [sp, #8]
 800f3b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f3b8:	f88b a000 	strb.w	sl, [fp]
 800f3bc:	e775      	b.n	800f2aa <_dtoa_r+0x94a>
 800f3be:	4638      	mov	r0, r7
 800f3c0:	e7ba      	b.n	800f338 <_dtoa_r+0x9d8>
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	e7e2      	b.n	800f38c <_dtoa_r+0xa2c>
 800f3c6:	9b03      	ldr	r3, [sp, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	db04      	blt.n	800f3d6 <_dtoa_r+0xa76>
 800f3cc:	9906      	ldr	r1, [sp, #24]
 800f3ce:	430b      	orrs	r3, r1
 800f3d0:	9904      	ldr	r1, [sp, #16]
 800f3d2:	430b      	orrs	r3, r1
 800f3d4:	d122      	bne.n	800f41c <_dtoa_r+0xabc>
 800f3d6:	2a00      	cmp	r2, #0
 800f3d8:	ddee      	ble.n	800f3b8 <_dtoa_r+0xa58>
 800f3da:	ee18 1a10 	vmov	r1, s16
 800f3de:	2201      	movs	r2, #1
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f000 fe95 	bl	8010110 <__lshift>
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	ee08 0a10 	vmov	s16, r0
 800f3ec:	f000 ff00 	bl	80101f0 <__mcmp>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	dc03      	bgt.n	800f3fc <_dtoa_r+0xa9c>
 800f3f4:	d1e0      	bne.n	800f3b8 <_dtoa_r+0xa58>
 800f3f6:	f01a 0f01 	tst.w	sl, #1
 800f3fa:	d0dd      	beq.n	800f3b8 <_dtoa_r+0xa58>
 800f3fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f400:	d1d7      	bne.n	800f3b2 <_dtoa_r+0xa52>
 800f402:	2339      	movs	r3, #57	; 0x39
 800f404:	f88b 3000 	strb.w	r3, [fp]
 800f408:	462b      	mov	r3, r5
 800f40a:	461d      	mov	r5, r3
 800f40c:	3b01      	subs	r3, #1
 800f40e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f412:	2a39      	cmp	r2, #57	; 0x39
 800f414:	d071      	beq.n	800f4fa <_dtoa_r+0xb9a>
 800f416:	3201      	adds	r2, #1
 800f418:	701a      	strb	r2, [r3, #0]
 800f41a:	e746      	b.n	800f2aa <_dtoa_r+0x94a>
 800f41c:	2a00      	cmp	r2, #0
 800f41e:	dd07      	ble.n	800f430 <_dtoa_r+0xad0>
 800f420:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f424:	d0ed      	beq.n	800f402 <_dtoa_r+0xaa2>
 800f426:	f10a 0301 	add.w	r3, sl, #1
 800f42a:	f88b 3000 	strb.w	r3, [fp]
 800f42e:	e73c      	b.n	800f2aa <_dtoa_r+0x94a>
 800f430:	9b05      	ldr	r3, [sp, #20]
 800f432:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f436:	4599      	cmp	r9, r3
 800f438:	d047      	beq.n	800f4ca <_dtoa_r+0xb6a>
 800f43a:	ee18 1a10 	vmov	r1, s16
 800f43e:	2300      	movs	r3, #0
 800f440:	220a      	movs	r2, #10
 800f442:	4620      	mov	r0, r4
 800f444:	f000 fc6a 	bl	800fd1c <__multadd>
 800f448:	45b8      	cmp	r8, r7
 800f44a:	ee08 0a10 	vmov	s16, r0
 800f44e:	f04f 0300 	mov.w	r3, #0
 800f452:	f04f 020a 	mov.w	r2, #10
 800f456:	4641      	mov	r1, r8
 800f458:	4620      	mov	r0, r4
 800f45a:	d106      	bne.n	800f46a <_dtoa_r+0xb0a>
 800f45c:	f000 fc5e 	bl	800fd1c <__multadd>
 800f460:	4680      	mov	r8, r0
 800f462:	4607      	mov	r7, r0
 800f464:	f109 0901 	add.w	r9, r9, #1
 800f468:	e772      	b.n	800f350 <_dtoa_r+0x9f0>
 800f46a:	f000 fc57 	bl	800fd1c <__multadd>
 800f46e:	4639      	mov	r1, r7
 800f470:	4680      	mov	r8, r0
 800f472:	2300      	movs	r3, #0
 800f474:	220a      	movs	r2, #10
 800f476:	4620      	mov	r0, r4
 800f478:	f000 fc50 	bl	800fd1c <__multadd>
 800f47c:	4607      	mov	r7, r0
 800f47e:	e7f1      	b.n	800f464 <_dtoa_r+0xb04>
 800f480:	9b03      	ldr	r3, [sp, #12]
 800f482:	9302      	str	r3, [sp, #8]
 800f484:	9d01      	ldr	r5, [sp, #4]
 800f486:	ee18 0a10 	vmov	r0, s16
 800f48a:	4631      	mov	r1, r6
 800f48c:	f7ff f9da 	bl	800e844 <quorem>
 800f490:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f494:	9b01      	ldr	r3, [sp, #4]
 800f496:	f805 ab01 	strb.w	sl, [r5], #1
 800f49a:	1aea      	subs	r2, r5, r3
 800f49c:	9b02      	ldr	r3, [sp, #8]
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	dd09      	ble.n	800f4b6 <_dtoa_r+0xb56>
 800f4a2:	ee18 1a10 	vmov	r1, s16
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f000 fc36 	bl	800fd1c <__multadd>
 800f4b0:	ee08 0a10 	vmov	s16, r0
 800f4b4:	e7e7      	b.n	800f486 <_dtoa_r+0xb26>
 800f4b6:	9b02      	ldr	r3, [sp, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	bfc8      	it	gt
 800f4bc:	461d      	movgt	r5, r3
 800f4be:	9b01      	ldr	r3, [sp, #4]
 800f4c0:	bfd8      	it	le
 800f4c2:	2501      	movle	r5, #1
 800f4c4:	441d      	add	r5, r3
 800f4c6:	f04f 0800 	mov.w	r8, #0
 800f4ca:	ee18 1a10 	vmov	r1, s16
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f000 fe1d 	bl	8010110 <__lshift>
 800f4d6:	4631      	mov	r1, r6
 800f4d8:	ee08 0a10 	vmov	s16, r0
 800f4dc:	f000 fe88 	bl	80101f0 <__mcmp>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	dc91      	bgt.n	800f408 <_dtoa_r+0xaa8>
 800f4e4:	d102      	bne.n	800f4ec <_dtoa_r+0xb8c>
 800f4e6:	f01a 0f01 	tst.w	sl, #1
 800f4ea:	d18d      	bne.n	800f408 <_dtoa_r+0xaa8>
 800f4ec:	462b      	mov	r3, r5
 800f4ee:	461d      	mov	r5, r3
 800f4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4f4:	2a30      	cmp	r2, #48	; 0x30
 800f4f6:	d0fa      	beq.n	800f4ee <_dtoa_r+0xb8e>
 800f4f8:	e6d7      	b.n	800f2aa <_dtoa_r+0x94a>
 800f4fa:	9a01      	ldr	r2, [sp, #4]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d184      	bne.n	800f40a <_dtoa_r+0xaaa>
 800f500:	9b00      	ldr	r3, [sp, #0]
 800f502:	3301      	adds	r3, #1
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	2331      	movs	r3, #49	; 0x31
 800f508:	7013      	strb	r3, [r2, #0]
 800f50a:	e6ce      	b.n	800f2aa <_dtoa_r+0x94a>
 800f50c:	4b09      	ldr	r3, [pc, #36]	; (800f534 <_dtoa_r+0xbd4>)
 800f50e:	f7ff ba95 	b.w	800ea3c <_dtoa_r+0xdc>
 800f512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f514:	2b00      	cmp	r3, #0
 800f516:	f47f aa6e 	bne.w	800e9f6 <_dtoa_r+0x96>
 800f51a:	4b07      	ldr	r3, [pc, #28]	; (800f538 <_dtoa_r+0xbd8>)
 800f51c:	f7ff ba8e 	b.w	800ea3c <_dtoa_r+0xdc>
 800f520:	9b02      	ldr	r3, [sp, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	dcae      	bgt.n	800f484 <_dtoa_r+0xb24>
 800f526:	9b06      	ldr	r3, [sp, #24]
 800f528:	2b02      	cmp	r3, #2
 800f52a:	f73f aea8 	bgt.w	800f27e <_dtoa_r+0x91e>
 800f52e:	e7a9      	b.n	800f484 <_dtoa_r+0xb24>
 800f530:	08021b48 	.word	0x08021b48
 800f534:	0802194c 	.word	0x0802194c
 800f538:	08021ac9 	.word	0x08021ac9

0800f53c <rshift>:
 800f53c:	6903      	ldr	r3, [r0, #16]
 800f53e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f546:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f54a:	f100 0414 	add.w	r4, r0, #20
 800f54e:	dd45      	ble.n	800f5dc <rshift+0xa0>
 800f550:	f011 011f 	ands.w	r1, r1, #31
 800f554:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f558:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f55c:	d10c      	bne.n	800f578 <rshift+0x3c>
 800f55e:	f100 0710 	add.w	r7, r0, #16
 800f562:	4629      	mov	r1, r5
 800f564:	42b1      	cmp	r1, r6
 800f566:	d334      	bcc.n	800f5d2 <rshift+0x96>
 800f568:	1a9b      	subs	r3, r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	1eea      	subs	r2, r5, #3
 800f56e:	4296      	cmp	r6, r2
 800f570:	bf38      	it	cc
 800f572:	2300      	movcc	r3, #0
 800f574:	4423      	add	r3, r4
 800f576:	e015      	b.n	800f5a4 <rshift+0x68>
 800f578:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f57c:	f1c1 0820 	rsb	r8, r1, #32
 800f580:	40cf      	lsrs	r7, r1
 800f582:	f105 0e04 	add.w	lr, r5, #4
 800f586:	46a1      	mov	r9, r4
 800f588:	4576      	cmp	r6, lr
 800f58a:	46f4      	mov	ip, lr
 800f58c:	d815      	bhi.n	800f5ba <rshift+0x7e>
 800f58e:	1a9a      	subs	r2, r3, r2
 800f590:	0092      	lsls	r2, r2, #2
 800f592:	3a04      	subs	r2, #4
 800f594:	3501      	adds	r5, #1
 800f596:	42ae      	cmp	r6, r5
 800f598:	bf38      	it	cc
 800f59a:	2200      	movcc	r2, #0
 800f59c:	18a3      	adds	r3, r4, r2
 800f59e:	50a7      	str	r7, [r4, r2]
 800f5a0:	b107      	cbz	r7, 800f5a4 <rshift+0x68>
 800f5a2:	3304      	adds	r3, #4
 800f5a4:	1b1a      	subs	r2, r3, r4
 800f5a6:	42a3      	cmp	r3, r4
 800f5a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f5ac:	bf08      	it	eq
 800f5ae:	2300      	moveq	r3, #0
 800f5b0:	6102      	str	r2, [r0, #16]
 800f5b2:	bf08      	it	eq
 800f5b4:	6143      	streq	r3, [r0, #20]
 800f5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5ba:	f8dc c000 	ldr.w	ip, [ip]
 800f5be:	fa0c fc08 	lsl.w	ip, ip, r8
 800f5c2:	ea4c 0707 	orr.w	r7, ip, r7
 800f5c6:	f849 7b04 	str.w	r7, [r9], #4
 800f5ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f5ce:	40cf      	lsrs	r7, r1
 800f5d0:	e7da      	b.n	800f588 <rshift+0x4c>
 800f5d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f5d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f5da:	e7c3      	b.n	800f564 <rshift+0x28>
 800f5dc:	4623      	mov	r3, r4
 800f5de:	e7e1      	b.n	800f5a4 <rshift+0x68>

0800f5e0 <__hexdig_fun>:
 800f5e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f5e4:	2b09      	cmp	r3, #9
 800f5e6:	d802      	bhi.n	800f5ee <__hexdig_fun+0xe>
 800f5e8:	3820      	subs	r0, #32
 800f5ea:	b2c0      	uxtb	r0, r0
 800f5ec:	4770      	bx	lr
 800f5ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f5f2:	2b05      	cmp	r3, #5
 800f5f4:	d801      	bhi.n	800f5fa <__hexdig_fun+0x1a>
 800f5f6:	3847      	subs	r0, #71	; 0x47
 800f5f8:	e7f7      	b.n	800f5ea <__hexdig_fun+0xa>
 800f5fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f5fe:	2b05      	cmp	r3, #5
 800f600:	d801      	bhi.n	800f606 <__hexdig_fun+0x26>
 800f602:	3827      	subs	r0, #39	; 0x27
 800f604:	e7f1      	b.n	800f5ea <__hexdig_fun+0xa>
 800f606:	2000      	movs	r0, #0
 800f608:	4770      	bx	lr
	...

0800f60c <__gethex>:
 800f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f610:	ed2d 8b02 	vpush	{d8}
 800f614:	b089      	sub	sp, #36	; 0x24
 800f616:	ee08 0a10 	vmov	s16, r0
 800f61a:	9304      	str	r3, [sp, #16]
 800f61c:	4bb4      	ldr	r3, [pc, #720]	; (800f8f0 <__gethex+0x2e4>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	9301      	str	r3, [sp, #4]
 800f622:	4618      	mov	r0, r3
 800f624:	468b      	mov	fp, r1
 800f626:	4690      	mov	r8, r2
 800f628:	f7f0 fdd2 	bl	80001d0 <strlen>
 800f62c:	9b01      	ldr	r3, [sp, #4]
 800f62e:	f8db 2000 	ldr.w	r2, [fp]
 800f632:	4403      	add	r3, r0
 800f634:	4682      	mov	sl, r0
 800f636:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f63a:	9305      	str	r3, [sp, #20]
 800f63c:	1c93      	adds	r3, r2, #2
 800f63e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f642:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f646:	32fe      	adds	r2, #254	; 0xfe
 800f648:	18d1      	adds	r1, r2, r3
 800f64a:	461f      	mov	r7, r3
 800f64c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f650:	9100      	str	r1, [sp, #0]
 800f652:	2830      	cmp	r0, #48	; 0x30
 800f654:	d0f8      	beq.n	800f648 <__gethex+0x3c>
 800f656:	f7ff ffc3 	bl	800f5e0 <__hexdig_fun>
 800f65a:	4604      	mov	r4, r0
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d13a      	bne.n	800f6d6 <__gethex+0xca>
 800f660:	9901      	ldr	r1, [sp, #4]
 800f662:	4652      	mov	r2, sl
 800f664:	4638      	mov	r0, r7
 800f666:	f001 fa23 	bl	8010ab0 <strncmp>
 800f66a:	4605      	mov	r5, r0
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d168      	bne.n	800f742 <__gethex+0x136>
 800f670:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f674:	eb07 060a 	add.w	r6, r7, sl
 800f678:	f7ff ffb2 	bl	800f5e0 <__hexdig_fun>
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d062      	beq.n	800f746 <__gethex+0x13a>
 800f680:	4633      	mov	r3, r6
 800f682:	7818      	ldrb	r0, [r3, #0]
 800f684:	2830      	cmp	r0, #48	; 0x30
 800f686:	461f      	mov	r7, r3
 800f688:	f103 0301 	add.w	r3, r3, #1
 800f68c:	d0f9      	beq.n	800f682 <__gethex+0x76>
 800f68e:	f7ff ffa7 	bl	800f5e0 <__hexdig_fun>
 800f692:	2301      	movs	r3, #1
 800f694:	fab0 f480 	clz	r4, r0
 800f698:	0964      	lsrs	r4, r4, #5
 800f69a:	4635      	mov	r5, r6
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	463a      	mov	r2, r7
 800f6a0:	4616      	mov	r6, r2
 800f6a2:	3201      	adds	r2, #1
 800f6a4:	7830      	ldrb	r0, [r6, #0]
 800f6a6:	f7ff ff9b 	bl	800f5e0 <__hexdig_fun>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d1f8      	bne.n	800f6a0 <__gethex+0x94>
 800f6ae:	9901      	ldr	r1, [sp, #4]
 800f6b0:	4652      	mov	r2, sl
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f001 f9fc 	bl	8010ab0 <strncmp>
 800f6b8:	b980      	cbnz	r0, 800f6dc <__gethex+0xd0>
 800f6ba:	b94d      	cbnz	r5, 800f6d0 <__gethex+0xc4>
 800f6bc:	eb06 050a 	add.w	r5, r6, sl
 800f6c0:	462a      	mov	r2, r5
 800f6c2:	4616      	mov	r6, r2
 800f6c4:	3201      	adds	r2, #1
 800f6c6:	7830      	ldrb	r0, [r6, #0]
 800f6c8:	f7ff ff8a 	bl	800f5e0 <__hexdig_fun>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d1f8      	bne.n	800f6c2 <__gethex+0xb6>
 800f6d0:	1bad      	subs	r5, r5, r6
 800f6d2:	00ad      	lsls	r5, r5, #2
 800f6d4:	e004      	b.n	800f6e0 <__gethex+0xd4>
 800f6d6:	2400      	movs	r4, #0
 800f6d8:	4625      	mov	r5, r4
 800f6da:	e7e0      	b.n	800f69e <__gethex+0x92>
 800f6dc:	2d00      	cmp	r5, #0
 800f6de:	d1f7      	bne.n	800f6d0 <__gethex+0xc4>
 800f6e0:	7833      	ldrb	r3, [r6, #0]
 800f6e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f6e6:	2b50      	cmp	r3, #80	; 0x50
 800f6e8:	d13b      	bne.n	800f762 <__gethex+0x156>
 800f6ea:	7873      	ldrb	r3, [r6, #1]
 800f6ec:	2b2b      	cmp	r3, #43	; 0x2b
 800f6ee:	d02c      	beq.n	800f74a <__gethex+0x13e>
 800f6f0:	2b2d      	cmp	r3, #45	; 0x2d
 800f6f2:	d02e      	beq.n	800f752 <__gethex+0x146>
 800f6f4:	1c71      	adds	r1, r6, #1
 800f6f6:	f04f 0900 	mov.w	r9, #0
 800f6fa:	7808      	ldrb	r0, [r1, #0]
 800f6fc:	f7ff ff70 	bl	800f5e0 <__hexdig_fun>
 800f700:	1e43      	subs	r3, r0, #1
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b18      	cmp	r3, #24
 800f706:	d82c      	bhi.n	800f762 <__gethex+0x156>
 800f708:	f1a0 0210 	sub.w	r2, r0, #16
 800f70c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f710:	f7ff ff66 	bl	800f5e0 <__hexdig_fun>
 800f714:	1e43      	subs	r3, r0, #1
 800f716:	b2db      	uxtb	r3, r3
 800f718:	2b18      	cmp	r3, #24
 800f71a:	d91d      	bls.n	800f758 <__gethex+0x14c>
 800f71c:	f1b9 0f00 	cmp.w	r9, #0
 800f720:	d000      	beq.n	800f724 <__gethex+0x118>
 800f722:	4252      	negs	r2, r2
 800f724:	4415      	add	r5, r2
 800f726:	f8cb 1000 	str.w	r1, [fp]
 800f72a:	b1e4      	cbz	r4, 800f766 <__gethex+0x15a>
 800f72c:	9b00      	ldr	r3, [sp, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	bf14      	ite	ne
 800f732:	2700      	movne	r7, #0
 800f734:	2706      	moveq	r7, #6
 800f736:	4638      	mov	r0, r7
 800f738:	b009      	add	sp, #36	; 0x24
 800f73a:	ecbd 8b02 	vpop	{d8}
 800f73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f742:	463e      	mov	r6, r7
 800f744:	4625      	mov	r5, r4
 800f746:	2401      	movs	r4, #1
 800f748:	e7ca      	b.n	800f6e0 <__gethex+0xd4>
 800f74a:	f04f 0900 	mov.w	r9, #0
 800f74e:	1cb1      	adds	r1, r6, #2
 800f750:	e7d3      	b.n	800f6fa <__gethex+0xee>
 800f752:	f04f 0901 	mov.w	r9, #1
 800f756:	e7fa      	b.n	800f74e <__gethex+0x142>
 800f758:	230a      	movs	r3, #10
 800f75a:	fb03 0202 	mla	r2, r3, r2, r0
 800f75e:	3a10      	subs	r2, #16
 800f760:	e7d4      	b.n	800f70c <__gethex+0x100>
 800f762:	4631      	mov	r1, r6
 800f764:	e7df      	b.n	800f726 <__gethex+0x11a>
 800f766:	1bf3      	subs	r3, r6, r7
 800f768:	3b01      	subs	r3, #1
 800f76a:	4621      	mov	r1, r4
 800f76c:	2b07      	cmp	r3, #7
 800f76e:	dc0b      	bgt.n	800f788 <__gethex+0x17c>
 800f770:	ee18 0a10 	vmov	r0, s16
 800f774:	f000 fa70 	bl	800fc58 <_Balloc>
 800f778:	4604      	mov	r4, r0
 800f77a:	b940      	cbnz	r0, 800f78e <__gethex+0x182>
 800f77c:	4b5d      	ldr	r3, [pc, #372]	; (800f8f4 <__gethex+0x2e8>)
 800f77e:	4602      	mov	r2, r0
 800f780:	21de      	movs	r1, #222	; 0xde
 800f782:	485d      	ldr	r0, [pc, #372]	; (800f8f8 <__gethex+0x2ec>)
 800f784:	f001 f9b6 	bl	8010af4 <__assert_func>
 800f788:	3101      	adds	r1, #1
 800f78a:	105b      	asrs	r3, r3, #1
 800f78c:	e7ee      	b.n	800f76c <__gethex+0x160>
 800f78e:	f100 0914 	add.w	r9, r0, #20
 800f792:	f04f 0b00 	mov.w	fp, #0
 800f796:	f1ca 0301 	rsb	r3, sl, #1
 800f79a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f79e:	f8cd b000 	str.w	fp, [sp]
 800f7a2:	9306      	str	r3, [sp, #24]
 800f7a4:	42b7      	cmp	r7, r6
 800f7a6:	d340      	bcc.n	800f82a <__gethex+0x21e>
 800f7a8:	9802      	ldr	r0, [sp, #8]
 800f7aa:	9b00      	ldr	r3, [sp, #0]
 800f7ac:	f840 3b04 	str.w	r3, [r0], #4
 800f7b0:	eba0 0009 	sub.w	r0, r0, r9
 800f7b4:	1080      	asrs	r0, r0, #2
 800f7b6:	0146      	lsls	r6, r0, #5
 800f7b8:	6120      	str	r0, [r4, #16]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 fb3e 	bl	800fe3c <__hi0bits>
 800f7c0:	1a30      	subs	r0, r6, r0
 800f7c2:	f8d8 6000 	ldr.w	r6, [r8]
 800f7c6:	42b0      	cmp	r0, r6
 800f7c8:	dd63      	ble.n	800f892 <__gethex+0x286>
 800f7ca:	1b87      	subs	r7, r0, r6
 800f7cc:	4639      	mov	r1, r7
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f000 fee2 	bl	8010598 <__any_on>
 800f7d4:	4682      	mov	sl, r0
 800f7d6:	b1a8      	cbz	r0, 800f804 <__gethex+0x1f8>
 800f7d8:	1e7b      	subs	r3, r7, #1
 800f7da:	1159      	asrs	r1, r3, #5
 800f7dc:	f003 021f 	and.w	r2, r3, #31
 800f7e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f7e4:	f04f 0a01 	mov.w	sl, #1
 800f7e8:	fa0a f202 	lsl.w	r2, sl, r2
 800f7ec:	420a      	tst	r2, r1
 800f7ee:	d009      	beq.n	800f804 <__gethex+0x1f8>
 800f7f0:	4553      	cmp	r3, sl
 800f7f2:	dd05      	ble.n	800f800 <__gethex+0x1f4>
 800f7f4:	1eb9      	subs	r1, r7, #2
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f000 fece 	bl	8010598 <__any_on>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	d145      	bne.n	800f88c <__gethex+0x280>
 800f800:	f04f 0a02 	mov.w	sl, #2
 800f804:	4639      	mov	r1, r7
 800f806:	4620      	mov	r0, r4
 800f808:	f7ff fe98 	bl	800f53c <rshift>
 800f80c:	443d      	add	r5, r7
 800f80e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f812:	42ab      	cmp	r3, r5
 800f814:	da4c      	bge.n	800f8b0 <__gethex+0x2a4>
 800f816:	ee18 0a10 	vmov	r0, s16
 800f81a:	4621      	mov	r1, r4
 800f81c:	f000 fa5c 	bl	800fcd8 <_Bfree>
 800f820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f822:	2300      	movs	r3, #0
 800f824:	6013      	str	r3, [r2, #0]
 800f826:	27a3      	movs	r7, #163	; 0xa3
 800f828:	e785      	b.n	800f736 <__gethex+0x12a>
 800f82a:	1e73      	subs	r3, r6, #1
 800f82c:	9a05      	ldr	r2, [sp, #20]
 800f82e:	9303      	str	r3, [sp, #12]
 800f830:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f834:	4293      	cmp	r3, r2
 800f836:	d019      	beq.n	800f86c <__gethex+0x260>
 800f838:	f1bb 0f20 	cmp.w	fp, #32
 800f83c:	d107      	bne.n	800f84e <__gethex+0x242>
 800f83e:	9b02      	ldr	r3, [sp, #8]
 800f840:	9a00      	ldr	r2, [sp, #0]
 800f842:	f843 2b04 	str.w	r2, [r3], #4
 800f846:	9302      	str	r3, [sp, #8]
 800f848:	2300      	movs	r3, #0
 800f84a:	9300      	str	r3, [sp, #0]
 800f84c:	469b      	mov	fp, r3
 800f84e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f852:	f7ff fec5 	bl	800f5e0 <__hexdig_fun>
 800f856:	9b00      	ldr	r3, [sp, #0]
 800f858:	f000 000f 	and.w	r0, r0, #15
 800f85c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f860:	4303      	orrs	r3, r0
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	f10b 0b04 	add.w	fp, fp, #4
 800f868:	9b03      	ldr	r3, [sp, #12]
 800f86a:	e00d      	b.n	800f888 <__gethex+0x27c>
 800f86c:	9b03      	ldr	r3, [sp, #12]
 800f86e:	9a06      	ldr	r2, [sp, #24]
 800f870:	4413      	add	r3, r2
 800f872:	42bb      	cmp	r3, r7
 800f874:	d3e0      	bcc.n	800f838 <__gethex+0x22c>
 800f876:	4618      	mov	r0, r3
 800f878:	9901      	ldr	r1, [sp, #4]
 800f87a:	9307      	str	r3, [sp, #28]
 800f87c:	4652      	mov	r2, sl
 800f87e:	f001 f917 	bl	8010ab0 <strncmp>
 800f882:	9b07      	ldr	r3, [sp, #28]
 800f884:	2800      	cmp	r0, #0
 800f886:	d1d7      	bne.n	800f838 <__gethex+0x22c>
 800f888:	461e      	mov	r6, r3
 800f88a:	e78b      	b.n	800f7a4 <__gethex+0x198>
 800f88c:	f04f 0a03 	mov.w	sl, #3
 800f890:	e7b8      	b.n	800f804 <__gethex+0x1f8>
 800f892:	da0a      	bge.n	800f8aa <__gethex+0x29e>
 800f894:	1a37      	subs	r7, r6, r0
 800f896:	4621      	mov	r1, r4
 800f898:	ee18 0a10 	vmov	r0, s16
 800f89c:	463a      	mov	r2, r7
 800f89e:	f000 fc37 	bl	8010110 <__lshift>
 800f8a2:	1bed      	subs	r5, r5, r7
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	f100 0914 	add.w	r9, r0, #20
 800f8aa:	f04f 0a00 	mov.w	sl, #0
 800f8ae:	e7ae      	b.n	800f80e <__gethex+0x202>
 800f8b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f8b4:	42a8      	cmp	r0, r5
 800f8b6:	dd72      	ble.n	800f99e <__gethex+0x392>
 800f8b8:	1b45      	subs	r5, r0, r5
 800f8ba:	42ae      	cmp	r6, r5
 800f8bc:	dc36      	bgt.n	800f92c <__gethex+0x320>
 800f8be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8c2:	2b02      	cmp	r3, #2
 800f8c4:	d02a      	beq.n	800f91c <__gethex+0x310>
 800f8c6:	2b03      	cmp	r3, #3
 800f8c8:	d02c      	beq.n	800f924 <__gethex+0x318>
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d11c      	bne.n	800f908 <__gethex+0x2fc>
 800f8ce:	42ae      	cmp	r6, r5
 800f8d0:	d11a      	bne.n	800f908 <__gethex+0x2fc>
 800f8d2:	2e01      	cmp	r6, #1
 800f8d4:	d112      	bne.n	800f8fc <__gethex+0x2f0>
 800f8d6:	9a04      	ldr	r2, [sp, #16]
 800f8d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f8dc:	6013      	str	r3, [r2, #0]
 800f8de:	2301      	movs	r3, #1
 800f8e0:	6123      	str	r3, [r4, #16]
 800f8e2:	f8c9 3000 	str.w	r3, [r9]
 800f8e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8e8:	2762      	movs	r7, #98	; 0x62
 800f8ea:	601c      	str	r4, [r3, #0]
 800f8ec:	e723      	b.n	800f736 <__gethex+0x12a>
 800f8ee:	bf00      	nop
 800f8f0:	08021bc0 	.word	0x08021bc0
 800f8f4:	08021b48 	.word	0x08021b48
 800f8f8:	08021b59 	.word	0x08021b59
 800f8fc:	1e71      	subs	r1, r6, #1
 800f8fe:	4620      	mov	r0, r4
 800f900:	f000 fe4a 	bl	8010598 <__any_on>
 800f904:	2800      	cmp	r0, #0
 800f906:	d1e6      	bne.n	800f8d6 <__gethex+0x2ca>
 800f908:	ee18 0a10 	vmov	r0, s16
 800f90c:	4621      	mov	r1, r4
 800f90e:	f000 f9e3 	bl	800fcd8 <_Bfree>
 800f912:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f914:	2300      	movs	r3, #0
 800f916:	6013      	str	r3, [r2, #0]
 800f918:	2750      	movs	r7, #80	; 0x50
 800f91a:	e70c      	b.n	800f736 <__gethex+0x12a>
 800f91c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1f2      	bne.n	800f908 <__gethex+0x2fc>
 800f922:	e7d8      	b.n	800f8d6 <__gethex+0x2ca>
 800f924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1d5      	bne.n	800f8d6 <__gethex+0x2ca>
 800f92a:	e7ed      	b.n	800f908 <__gethex+0x2fc>
 800f92c:	1e6f      	subs	r7, r5, #1
 800f92e:	f1ba 0f00 	cmp.w	sl, #0
 800f932:	d131      	bne.n	800f998 <__gethex+0x38c>
 800f934:	b127      	cbz	r7, 800f940 <__gethex+0x334>
 800f936:	4639      	mov	r1, r7
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 fe2d 	bl	8010598 <__any_on>
 800f93e:	4682      	mov	sl, r0
 800f940:	117b      	asrs	r3, r7, #5
 800f942:	2101      	movs	r1, #1
 800f944:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f948:	f007 071f 	and.w	r7, r7, #31
 800f94c:	fa01 f707 	lsl.w	r7, r1, r7
 800f950:	421f      	tst	r7, r3
 800f952:	4629      	mov	r1, r5
 800f954:	4620      	mov	r0, r4
 800f956:	bf18      	it	ne
 800f958:	f04a 0a02 	orrne.w	sl, sl, #2
 800f95c:	1b76      	subs	r6, r6, r5
 800f95e:	f7ff fded 	bl	800f53c <rshift>
 800f962:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f966:	2702      	movs	r7, #2
 800f968:	f1ba 0f00 	cmp.w	sl, #0
 800f96c:	d048      	beq.n	800fa00 <__gethex+0x3f4>
 800f96e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f972:	2b02      	cmp	r3, #2
 800f974:	d015      	beq.n	800f9a2 <__gethex+0x396>
 800f976:	2b03      	cmp	r3, #3
 800f978:	d017      	beq.n	800f9aa <__gethex+0x39e>
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d109      	bne.n	800f992 <__gethex+0x386>
 800f97e:	f01a 0f02 	tst.w	sl, #2
 800f982:	d006      	beq.n	800f992 <__gethex+0x386>
 800f984:	f8d9 0000 	ldr.w	r0, [r9]
 800f988:	ea4a 0a00 	orr.w	sl, sl, r0
 800f98c:	f01a 0f01 	tst.w	sl, #1
 800f990:	d10e      	bne.n	800f9b0 <__gethex+0x3a4>
 800f992:	f047 0710 	orr.w	r7, r7, #16
 800f996:	e033      	b.n	800fa00 <__gethex+0x3f4>
 800f998:	f04f 0a01 	mov.w	sl, #1
 800f99c:	e7d0      	b.n	800f940 <__gethex+0x334>
 800f99e:	2701      	movs	r7, #1
 800f9a0:	e7e2      	b.n	800f968 <__gethex+0x35c>
 800f9a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9a4:	f1c3 0301 	rsb	r3, r3, #1
 800f9a8:	9315      	str	r3, [sp, #84]	; 0x54
 800f9aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d0f0      	beq.n	800f992 <__gethex+0x386>
 800f9b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f9b4:	f104 0314 	add.w	r3, r4, #20
 800f9b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f9bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f9c0:	f04f 0c00 	mov.w	ip, #0
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f9ce:	d01c      	beq.n	800fa0a <__gethex+0x3fe>
 800f9d0:	3201      	adds	r2, #1
 800f9d2:	6002      	str	r2, [r0, #0]
 800f9d4:	2f02      	cmp	r7, #2
 800f9d6:	f104 0314 	add.w	r3, r4, #20
 800f9da:	d13f      	bne.n	800fa5c <__gethex+0x450>
 800f9dc:	f8d8 2000 	ldr.w	r2, [r8]
 800f9e0:	3a01      	subs	r2, #1
 800f9e2:	42b2      	cmp	r2, r6
 800f9e4:	d10a      	bne.n	800f9fc <__gethex+0x3f0>
 800f9e6:	1171      	asrs	r1, r6, #5
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f9ee:	f006 061f 	and.w	r6, r6, #31
 800f9f2:	fa02 f606 	lsl.w	r6, r2, r6
 800f9f6:	421e      	tst	r6, r3
 800f9f8:	bf18      	it	ne
 800f9fa:	4617      	movne	r7, r2
 800f9fc:	f047 0720 	orr.w	r7, r7, #32
 800fa00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa02:	601c      	str	r4, [r3, #0]
 800fa04:	9b04      	ldr	r3, [sp, #16]
 800fa06:	601d      	str	r5, [r3, #0]
 800fa08:	e695      	b.n	800f736 <__gethex+0x12a>
 800fa0a:	4299      	cmp	r1, r3
 800fa0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fa10:	d8d8      	bhi.n	800f9c4 <__gethex+0x3b8>
 800fa12:	68a3      	ldr	r3, [r4, #8]
 800fa14:	459b      	cmp	fp, r3
 800fa16:	db19      	blt.n	800fa4c <__gethex+0x440>
 800fa18:	6861      	ldr	r1, [r4, #4]
 800fa1a:	ee18 0a10 	vmov	r0, s16
 800fa1e:	3101      	adds	r1, #1
 800fa20:	f000 f91a 	bl	800fc58 <_Balloc>
 800fa24:	4681      	mov	r9, r0
 800fa26:	b918      	cbnz	r0, 800fa30 <__gethex+0x424>
 800fa28:	4b1a      	ldr	r3, [pc, #104]	; (800fa94 <__gethex+0x488>)
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	2184      	movs	r1, #132	; 0x84
 800fa2e:	e6a8      	b.n	800f782 <__gethex+0x176>
 800fa30:	6922      	ldr	r2, [r4, #16]
 800fa32:	3202      	adds	r2, #2
 800fa34:	f104 010c 	add.w	r1, r4, #12
 800fa38:	0092      	lsls	r2, r2, #2
 800fa3a:	300c      	adds	r0, #12
 800fa3c:	f7fd f960 	bl	800cd00 <memcpy>
 800fa40:	4621      	mov	r1, r4
 800fa42:	ee18 0a10 	vmov	r0, s16
 800fa46:	f000 f947 	bl	800fcd8 <_Bfree>
 800fa4a:	464c      	mov	r4, r9
 800fa4c:	6923      	ldr	r3, [r4, #16]
 800fa4e:	1c5a      	adds	r2, r3, #1
 800fa50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa54:	6122      	str	r2, [r4, #16]
 800fa56:	2201      	movs	r2, #1
 800fa58:	615a      	str	r2, [r3, #20]
 800fa5a:	e7bb      	b.n	800f9d4 <__gethex+0x3c8>
 800fa5c:	6922      	ldr	r2, [r4, #16]
 800fa5e:	455a      	cmp	r2, fp
 800fa60:	dd0b      	ble.n	800fa7a <__gethex+0x46e>
 800fa62:	2101      	movs	r1, #1
 800fa64:	4620      	mov	r0, r4
 800fa66:	f7ff fd69 	bl	800f53c <rshift>
 800fa6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa6e:	3501      	adds	r5, #1
 800fa70:	42ab      	cmp	r3, r5
 800fa72:	f6ff aed0 	blt.w	800f816 <__gethex+0x20a>
 800fa76:	2701      	movs	r7, #1
 800fa78:	e7c0      	b.n	800f9fc <__gethex+0x3f0>
 800fa7a:	f016 061f 	ands.w	r6, r6, #31
 800fa7e:	d0fa      	beq.n	800fa76 <__gethex+0x46a>
 800fa80:	4453      	add	r3, sl
 800fa82:	f1c6 0620 	rsb	r6, r6, #32
 800fa86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fa8a:	f000 f9d7 	bl	800fe3c <__hi0bits>
 800fa8e:	42b0      	cmp	r0, r6
 800fa90:	dbe7      	blt.n	800fa62 <__gethex+0x456>
 800fa92:	e7f0      	b.n	800fa76 <__gethex+0x46a>
 800fa94:	08021b48 	.word	0x08021b48

0800fa98 <L_shift>:
 800fa98:	f1c2 0208 	rsb	r2, r2, #8
 800fa9c:	0092      	lsls	r2, r2, #2
 800fa9e:	b570      	push	{r4, r5, r6, lr}
 800faa0:	f1c2 0620 	rsb	r6, r2, #32
 800faa4:	6843      	ldr	r3, [r0, #4]
 800faa6:	6804      	ldr	r4, [r0, #0]
 800faa8:	fa03 f506 	lsl.w	r5, r3, r6
 800faac:	432c      	orrs	r4, r5
 800faae:	40d3      	lsrs	r3, r2
 800fab0:	6004      	str	r4, [r0, #0]
 800fab2:	f840 3f04 	str.w	r3, [r0, #4]!
 800fab6:	4288      	cmp	r0, r1
 800fab8:	d3f4      	bcc.n	800faa4 <L_shift+0xc>
 800faba:	bd70      	pop	{r4, r5, r6, pc}

0800fabc <__match>:
 800fabc:	b530      	push	{r4, r5, lr}
 800fabe:	6803      	ldr	r3, [r0, #0]
 800fac0:	3301      	adds	r3, #1
 800fac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fac6:	b914      	cbnz	r4, 800face <__match+0x12>
 800fac8:	6003      	str	r3, [r0, #0]
 800faca:	2001      	movs	r0, #1
 800facc:	bd30      	pop	{r4, r5, pc}
 800face:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fad2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fad6:	2d19      	cmp	r5, #25
 800fad8:	bf98      	it	ls
 800fada:	3220      	addls	r2, #32
 800fadc:	42a2      	cmp	r2, r4
 800fade:	d0f0      	beq.n	800fac2 <__match+0x6>
 800fae0:	2000      	movs	r0, #0
 800fae2:	e7f3      	b.n	800facc <__match+0x10>

0800fae4 <__hexnan>:
 800fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	680b      	ldr	r3, [r1, #0]
 800faea:	115e      	asrs	r6, r3, #5
 800faec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800faf0:	f013 031f 	ands.w	r3, r3, #31
 800faf4:	b087      	sub	sp, #28
 800faf6:	bf18      	it	ne
 800faf8:	3604      	addne	r6, #4
 800fafa:	2500      	movs	r5, #0
 800fafc:	1f37      	subs	r7, r6, #4
 800fafe:	4690      	mov	r8, r2
 800fb00:	6802      	ldr	r2, [r0, #0]
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	4682      	mov	sl, r0
 800fb06:	f846 5c04 	str.w	r5, [r6, #-4]
 800fb0a:	46b9      	mov	r9, r7
 800fb0c:	463c      	mov	r4, r7
 800fb0e:	9502      	str	r5, [sp, #8]
 800fb10:	46ab      	mov	fp, r5
 800fb12:	7851      	ldrb	r1, [r2, #1]
 800fb14:	1c53      	adds	r3, r2, #1
 800fb16:	9303      	str	r3, [sp, #12]
 800fb18:	b341      	cbz	r1, 800fb6c <__hexnan+0x88>
 800fb1a:	4608      	mov	r0, r1
 800fb1c:	9205      	str	r2, [sp, #20]
 800fb1e:	9104      	str	r1, [sp, #16]
 800fb20:	f7ff fd5e 	bl	800f5e0 <__hexdig_fun>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d14f      	bne.n	800fbc8 <__hexnan+0xe4>
 800fb28:	9904      	ldr	r1, [sp, #16]
 800fb2a:	9a05      	ldr	r2, [sp, #20]
 800fb2c:	2920      	cmp	r1, #32
 800fb2e:	d818      	bhi.n	800fb62 <__hexnan+0x7e>
 800fb30:	9b02      	ldr	r3, [sp, #8]
 800fb32:	459b      	cmp	fp, r3
 800fb34:	dd13      	ble.n	800fb5e <__hexnan+0x7a>
 800fb36:	454c      	cmp	r4, r9
 800fb38:	d206      	bcs.n	800fb48 <__hexnan+0x64>
 800fb3a:	2d07      	cmp	r5, #7
 800fb3c:	dc04      	bgt.n	800fb48 <__hexnan+0x64>
 800fb3e:	462a      	mov	r2, r5
 800fb40:	4649      	mov	r1, r9
 800fb42:	4620      	mov	r0, r4
 800fb44:	f7ff ffa8 	bl	800fa98 <L_shift>
 800fb48:	4544      	cmp	r4, r8
 800fb4a:	d950      	bls.n	800fbee <__hexnan+0x10a>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f1a4 0904 	sub.w	r9, r4, #4
 800fb52:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb56:	f8cd b008 	str.w	fp, [sp, #8]
 800fb5a:	464c      	mov	r4, r9
 800fb5c:	461d      	mov	r5, r3
 800fb5e:	9a03      	ldr	r2, [sp, #12]
 800fb60:	e7d7      	b.n	800fb12 <__hexnan+0x2e>
 800fb62:	2929      	cmp	r1, #41	; 0x29
 800fb64:	d156      	bne.n	800fc14 <__hexnan+0x130>
 800fb66:	3202      	adds	r2, #2
 800fb68:	f8ca 2000 	str.w	r2, [sl]
 800fb6c:	f1bb 0f00 	cmp.w	fp, #0
 800fb70:	d050      	beq.n	800fc14 <__hexnan+0x130>
 800fb72:	454c      	cmp	r4, r9
 800fb74:	d206      	bcs.n	800fb84 <__hexnan+0xa0>
 800fb76:	2d07      	cmp	r5, #7
 800fb78:	dc04      	bgt.n	800fb84 <__hexnan+0xa0>
 800fb7a:	462a      	mov	r2, r5
 800fb7c:	4649      	mov	r1, r9
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f7ff ff8a 	bl	800fa98 <L_shift>
 800fb84:	4544      	cmp	r4, r8
 800fb86:	d934      	bls.n	800fbf2 <__hexnan+0x10e>
 800fb88:	f1a8 0204 	sub.w	r2, r8, #4
 800fb8c:	4623      	mov	r3, r4
 800fb8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800fb92:	f842 1f04 	str.w	r1, [r2, #4]!
 800fb96:	429f      	cmp	r7, r3
 800fb98:	d2f9      	bcs.n	800fb8e <__hexnan+0xaa>
 800fb9a:	1b3b      	subs	r3, r7, r4
 800fb9c:	f023 0303 	bic.w	r3, r3, #3
 800fba0:	3304      	adds	r3, #4
 800fba2:	3401      	adds	r4, #1
 800fba4:	3e03      	subs	r6, #3
 800fba6:	42b4      	cmp	r4, r6
 800fba8:	bf88      	it	hi
 800fbaa:	2304      	movhi	r3, #4
 800fbac:	4443      	add	r3, r8
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f843 2b04 	str.w	r2, [r3], #4
 800fbb4:	429f      	cmp	r7, r3
 800fbb6:	d2fb      	bcs.n	800fbb0 <__hexnan+0xcc>
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	b91b      	cbnz	r3, 800fbc4 <__hexnan+0xe0>
 800fbbc:	4547      	cmp	r7, r8
 800fbbe:	d127      	bne.n	800fc10 <__hexnan+0x12c>
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	603b      	str	r3, [r7, #0]
 800fbc4:	2005      	movs	r0, #5
 800fbc6:	e026      	b.n	800fc16 <__hexnan+0x132>
 800fbc8:	3501      	adds	r5, #1
 800fbca:	2d08      	cmp	r5, #8
 800fbcc:	f10b 0b01 	add.w	fp, fp, #1
 800fbd0:	dd06      	ble.n	800fbe0 <__hexnan+0xfc>
 800fbd2:	4544      	cmp	r4, r8
 800fbd4:	d9c3      	bls.n	800fb5e <__hexnan+0x7a>
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbdc:	2501      	movs	r5, #1
 800fbde:	3c04      	subs	r4, #4
 800fbe0:	6822      	ldr	r2, [r4, #0]
 800fbe2:	f000 000f 	and.w	r0, r0, #15
 800fbe6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fbea:	6022      	str	r2, [r4, #0]
 800fbec:	e7b7      	b.n	800fb5e <__hexnan+0x7a>
 800fbee:	2508      	movs	r5, #8
 800fbf0:	e7b5      	b.n	800fb5e <__hexnan+0x7a>
 800fbf2:	9b01      	ldr	r3, [sp, #4]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d0df      	beq.n	800fbb8 <__hexnan+0xd4>
 800fbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbfc:	f1c3 0320 	rsb	r3, r3, #32
 800fc00:	fa22 f303 	lsr.w	r3, r2, r3
 800fc04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fc08:	401a      	ands	r2, r3
 800fc0a:	f846 2c04 	str.w	r2, [r6, #-4]
 800fc0e:	e7d3      	b.n	800fbb8 <__hexnan+0xd4>
 800fc10:	3f04      	subs	r7, #4
 800fc12:	e7d1      	b.n	800fbb8 <__hexnan+0xd4>
 800fc14:	2004      	movs	r0, #4
 800fc16:	b007      	add	sp, #28
 800fc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc1c <_localeconv_r>:
 800fc1c:	4800      	ldr	r0, [pc, #0]	; (800fc20 <_localeconv_r+0x4>)
 800fc1e:	4770      	bx	lr
 800fc20:	200001d4 	.word	0x200001d4

0800fc24 <malloc>:
 800fc24:	4b02      	ldr	r3, [pc, #8]	; (800fc30 <malloc+0xc>)
 800fc26:	4601      	mov	r1, r0
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	f000 bd59 	b.w	80106e0 <_malloc_r>
 800fc2e:	bf00      	nop
 800fc30:	2000007c 	.word	0x2000007c

0800fc34 <__ascii_mbtowc>:
 800fc34:	b082      	sub	sp, #8
 800fc36:	b901      	cbnz	r1, 800fc3a <__ascii_mbtowc+0x6>
 800fc38:	a901      	add	r1, sp, #4
 800fc3a:	b142      	cbz	r2, 800fc4e <__ascii_mbtowc+0x1a>
 800fc3c:	b14b      	cbz	r3, 800fc52 <__ascii_mbtowc+0x1e>
 800fc3e:	7813      	ldrb	r3, [r2, #0]
 800fc40:	600b      	str	r3, [r1, #0]
 800fc42:	7812      	ldrb	r2, [r2, #0]
 800fc44:	1e10      	subs	r0, r2, #0
 800fc46:	bf18      	it	ne
 800fc48:	2001      	movne	r0, #1
 800fc4a:	b002      	add	sp, #8
 800fc4c:	4770      	bx	lr
 800fc4e:	4610      	mov	r0, r2
 800fc50:	e7fb      	b.n	800fc4a <__ascii_mbtowc+0x16>
 800fc52:	f06f 0001 	mvn.w	r0, #1
 800fc56:	e7f8      	b.n	800fc4a <__ascii_mbtowc+0x16>

0800fc58 <_Balloc>:
 800fc58:	b570      	push	{r4, r5, r6, lr}
 800fc5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc5c:	4604      	mov	r4, r0
 800fc5e:	460d      	mov	r5, r1
 800fc60:	b976      	cbnz	r6, 800fc80 <_Balloc+0x28>
 800fc62:	2010      	movs	r0, #16
 800fc64:	f7ff ffde 	bl	800fc24 <malloc>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	6260      	str	r0, [r4, #36]	; 0x24
 800fc6c:	b920      	cbnz	r0, 800fc78 <_Balloc+0x20>
 800fc6e:	4b18      	ldr	r3, [pc, #96]	; (800fcd0 <_Balloc+0x78>)
 800fc70:	4818      	ldr	r0, [pc, #96]	; (800fcd4 <_Balloc+0x7c>)
 800fc72:	2166      	movs	r1, #102	; 0x66
 800fc74:	f000 ff3e 	bl	8010af4 <__assert_func>
 800fc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc7c:	6006      	str	r6, [r0, #0]
 800fc7e:	60c6      	str	r6, [r0, #12]
 800fc80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc82:	68f3      	ldr	r3, [r6, #12]
 800fc84:	b183      	cbz	r3, 800fca8 <_Balloc+0x50>
 800fc86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc8e:	b9b8      	cbnz	r0, 800fcc0 <_Balloc+0x68>
 800fc90:	2101      	movs	r1, #1
 800fc92:	fa01 f605 	lsl.w	r6, r1, r5
 800fc96:	1d72      	adds	r2, r6, #5
 800fc98:	0092      	lsls	r2, r2, #2
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f000 fc9d 	bl	80105da <_calloc_r>
 800fca0:	b160      	cbz	r0, 800fcbc <_Balloc+0x64>
 800fca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fca6:	e00e      	b.n	800fcc6 <_Balloc+0x6e>
 800fca8:	2221      	movs	r2, #33	; 0x21
 800fcaa:	2104      	movs	r1, #4
 800fcac:	4620      	mov	r0, r4
 800fcae:	f000 fc94 	bl	80105da <_calloc_r>
 800fcb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcb4:	60f0      	str	r0, [r6, #12]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1e4      	bne.n	800fc86 <_Balloc+0x2e>
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	bd70      	pop	{r4, r5, r6, pc}
 800fcc0:	6802      	ldr	r2, [r0, #0]
 800fcc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fccc:	e7f7      	b.n	800fcbe <_Balloc+0x66>
 800fcce:	bf00      	nop
 800fcd0:	08021ad6 	.word	0x08021ad6
 800fcd4:	08021bd4 	.word	0x08021bd4

0800fcd8 <_Bfree>:
 800fcd8:	b570      	push	{r4, r5, r6, lr}
 800fcda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fcdc:	4605      	mov	r5, r0
 800fcde:	460c      	mov	r4, r1
 800fce0:	b976      	cbnz	r6, 800fd00 <_Bfree+0x28>
 800fce2:	2010      	movs	r0, #16
 800fce4:	f7ff ff9e 	bl	800fc24 <malloc>
 800fce8:	4602      	mov	r2, r0
 800fcea:	6268      	str	r0, [r5, #36]	; 0x24
 800fcec:	b920      	cbnz	r0, 800fcf8 <_Bfree+0x20>
 800fcee:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <_Bfree+0x3c>)
 800fcf0:	4809      	ldr	r0, [pc, #36]	; (800fd18 <_Bfree+0x40>)
 800fcf2:	218a      	movs	r1, #138	; 0x8a
 800fcf4:	f000 fefe 	bl	8010af4 <__assert_func>
 800fcf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcfc:	6006      	str	r6, [r0, #0]
 800fcfe:	60c6      	str	r6, [r0, #12]
 800fd00:	b13c      	cbz	r4, 800fd12 <_Bfree+0x3a>
 800fd02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd04:	6862      	ldr	r2, [r4, #4]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd0c:	6021      	str	r1, [r4, #0]
 800fd0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
 800fd14:	08021ad6 	.word	0x08021ad6
 800fd18:	08021bd4 	.word	0x08021bd4

0800fd1c <__multadd>:
 800fd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd20:	690d      	ldr	r5, [r1, #16]
 800fd22:	4607      	mov	r7, r0
 800fd24:	460c      	mov	r4, r1
 800fd26:	461e      	mov	r6, r3
 800fd28:	f101 0c14 	add.w	ip, r1, #20
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	f8dc 3000 	ldr.w	r3, [ip]
 800fd32:	b299      	uxth	r1, r3
 800fd34:	fb02 6101 	mla	r1, r2, r1, r6
 800fd38:	0c1e      	lsrs	r6, r3, #16
 800fd3a:	0c0b      	lsrs	r3, r1, #16
 800fd3c:	fb02 3306 	mla	r3, r2, r6, r3
 800fd40:	b289      	uxth	r1, r1
 800fd42:	3001      	adds	r0, #1
 800fd44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd48:	4285      	cmp	r5, r0
 800fd4a:	f84c 1b04 	str.w	r1, [ip], #4
 800fd4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd52:	dcec      	bgt.n	800fd2e <__multadd+0x12>
 800fd54:	b30e      	cbz	r6, 800fd9a <__multadd+0x7e>
 800fd56:	68a3      	ldr	r3, [r4, #8]
 800fd58:	42ab      	cmp	r3, r5
 800fd5a:	dc19      	bgt.n	800fd90 <__multadd+0x74>
 800fd5c:	6861      	ldr	r1, [r4, #4]
 800fd5e:	4638      	mov	r0, r7
 800fd60:	3101      	adds	r1, #1
 800fd62:	f7ff ff79 	bl	800fc58 <_Balloc>
 800fd66:	4680      	mov	r8, r0
 800fd68:	b928      	cbnz	r0, 800fd76 <__multadd+0x5a>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	4b0c      	ldr	r3, [pc, #48]	; (800fda0 <__multadd+0x84>)
 800fd6e:	480d      	ldr	r0, [pc, #52]	; (800fda4 <__multadd+0x88>)
 800fd70:	21b5      	movs	r1, #181	; 0xb5
 800fd72:	f000 febf 	bl	8010af4 <__assert_func>
 800fd76:	6922      	ldr	r2, [r4, #16]
 800fd78:	3202      	adds	r2, #2
 800fd7a:	f104 010c 	add.w	r1, r4, #12
 800fd7e:	0092      	lsls	r2, r2, #2
 800fd80:	300c      	adds	r0, #12
 800fd82:	f7fc ffbd 	bl	800cd00 <memcpy>
 800fd86:	4621      	mov	r1, r4
 800fd88:	4638      	mov	r0, r7
 800fd8a:	f7ff ffa5 	bl	800fcd8 <_Bfree>
 800fd8e:	4644      	mov	r4, r8
 800fd90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd94:	3501      	adds	r5, #1
 800fd96:	615e      	str	r6, [r3, #20]
 800fd98:	6125      	str	r5, [r4, #16]
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda0:	08021b48 	.word	0x08021b48
 800fda4:	08021bd4 	.word	0x08021bd4

0800fda8 <__s2b>:
 800fda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdac:	460c      	mov	r4, r1
 800fdae:	4615      	mov	r5, r2
 800fdb0:	461f      	mov	r7, r3
 800fdb2:	2209      	movs	r2, #9
 800fdb4:	3308      	adds	r3, #8
 800fdb6:	4606      	mov	r6, r0
 800fdb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	db09      	blt.n	800fdd8 <__s2b+0x30>
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7ff ff47 	bl	800fc58 <_Balloc>
 800fdca:	b940      	cbnz	r0, 800fdde <__s2b+0x36>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	4b19      	ldr	r3, [pc, #100]	; (800fe34 <__s2b+0x8c>)
 800fdd0:	4819      	ldr	r0, [pc, #100]	; (800fe38 <__s2b+0x90>)
 800fdd2:	21ce      	movs	r1, #206	; 0xce
 800fdd4:	f000 fe8e 	bl	8010af4 <__assert_func>
 800fdd8:	0052      	lsls	r2, r2, #1
 800fdda:	3101      	adds	r1, #1
 800fddc:	e7f0      	b.n	800fdc0 <__s2b+0x18>
 800fdde:	9b08      	ldr	r3, [sp, #32]
 800fde0:	6143      	str	r3, [r0, #20]
 800fde2:	2d09      	cmp	r5, #9
 800fde4:	f04f 0301 	mov.w	r3, #1
 800fde8:	6103      	str	r3, [r0, #16]
 800fdea:	dd16      	ble.n	800fe1a <__s2b+0x72>
 800fdec:	f104 0909 	add.w	r9, r4, #9
 800fdf0:	46c8      	mov	r8, r9
 800fdf2:	442c      	add	r4, r5
 800fdf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fdf8:	4601      	mov	r1, r0
 800fdfa:	3b30      	subs	r3, #48	; 0x30
 800fdfc:	220a      	movs	r2, #10
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f7ff ff8c 	bl	800fd1c <__multadd>
 800fe04:	45a0      	cmp	r8, r4
 800fe06:	d1f5      	bne.n	800fdf4 <__s2b+0x4c>
 800fe08:	f1a5 0408 	sub.w	r4, r5, #8
 800fe0c:	444c      	add	r4, r9
 800fe0e:	1b2d      	subs	r5, r5, r4
 800fe10:	1963      	adds	r3, r4, r5
 800fe12:	42bb      	cmp	r3, r7
 800fe14:	db04      	blt.n	800fe20 <__s2b+0x78>
 800fe16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1a:	340a      	adds	r4, #10
 800fe1c:	2509      	movs	r5, #9
 800fe1e:	e7f6      	b.n	800fe0e <__s2b+0x66>
 800fe20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe24:	4601      	mov	r1, r0
 800fe26:	3b30      	subs	r3, #48	; 0x30
 800fe28:	220a      	movs	r2, #10
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	f7ff ff76 	bl	800fd1c <__multadd>
 800fe30:	e7ee      	b.n	800fe10 <__s2b+0x68>
 800fe32:	bf00      	nop
 800fe34:	08021b48 	.word	0x08021b48
 800fe38:	08021bd4 	.word	0x08021bd4

0800fe3c <__hi0bits>:
 800fe3c:	0c03      	lsrs	r3, r0, #16
 800fe3e:	041b      	lsls	r3, r3, #16
 800fe40:	b9d3      	cbnz	r3, 800fe78 <__hi0bits+0x3c>
 800fe42:	0400      	lsls	r0, r0, #16
 800fe44:	2310      	movs	r3, #16
 800fe46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe4a:	bf04      	itt	eq
 800fe4c:	0200      	lsleq	r0, r0, #8
 800fe4e:	3308      	addeq	r3, #8
 800fe50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe54:	bf04      	itt	eq
 800fe56:	0100      	lsleq	r0, r0, #4
 800fe58:	3304      	addeq	r3, #4
 800fe5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe5e:	bf04      	itt	eq
 800fe60:	0080      	lsleq	r0, r0, #2
 800fe62:	3302      	addeq	r3, #2
 800fe64:	2800      	cmp	r0, #0
 800fe66:	db05      	blt.n	800fe74 <__hi0bits+0x38>
 800fe68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe6c:	f103 0301 	add.w	r3, r3, #1
 800fe70:	bf08      	it	eq
 800fe72:	2320      	moveq	r3, #32
 800fe74:	4618      	mov	r0, r3
 800fe76:	4770      	bx	lr
 800fe78:	2300      	movs	r3, #0
 800fe7a:	e7e4      	b.n	800fe46 <__hi0bits+0xa>

0800fe7c <__lo0bits>:
 800fe7c:	6803      	ldr	r3, [r0, #0]
 800fe7e:	f013 0207 	ands.w	r2, r3, #7
 800fe82:	4601      	mov	r1, r0
 800fe84:	d00b      	beq.n	800fe9e <__lo0bits+0x22>
 800fe86:	07da      	lsls	r2, r3, #31
 800fe88:	d423      	bmi.n	800fed2 <__lo0bits+0x56>
 800fe8a:	0798      	lsls	r0, r3, #30
 800fe8c:	bf49      	itett	mi
 800fe8e:	085b      	lsrmi	r3, r3, #1
 800fe90:	089b      	lsrpl	r3, r3, #2
 800fe92:	2001      	movmi	r0, #1
 800fe94:	600b      	strmi	r3, [r1, #0]
 800fe96:	bf5c      	itt	pl
 800fe98:	600b      	strpl	r3, [r1, #0]
 800fe9a:	2002      	movpl	r0, #2
 800fe9c:	4770      	bx	lr
 800fe9e:	b298      	uxth	r0, r3
 800fea0:	b9a8      	cbnz	r0, 800fece <__lo0bits+0x52>
 800fea2:	0c1b      	lsrs	r3, r3, #16
 800fea4:	2010      	movs	r0, #16
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	b90a      	cbnz	r2, 800feae <__lo0bits+0x32>
 800feaa:	3008      	adds	r0, #8
 800feac:	0a1b      	lsrs	r3, r3, #8
 800feae:	071a      	lsls	r2, r3, #28
 800feb0:	bf04      	itt	eq
 800feb2:	091b      	lsreq	r3, r3, #4
 800feb4:	3004      	addeq	r0, #4
 800feb6:	079a      	lsls	r2, r3, #30
 800feb8:	bf04      	itt	eq
 800feba:	089b      	lsreq	r3, r3, #2
 800febc:	3002      	addeq	r0, #2
 800febe:	07da      	lsls	r2, r3, #31
 800fec0:	d403      	bmi.n	800feca <__lo0bits+0x4e>
 800fec2:	085b      	lsrs	r3, r3, #1
 800fec4:	f100 0001 	add.w	r0, r0, #1
 800fec8:	d005      	beq.n	800fed6 <__lo0bits+0x5a>
 800feca:	600b      	str	r3, [r1, #0]
 800fecc:	4770      	bx	lr
 800fece:	4610      	mov	r0, r2
 800fed0:	e7e9      	b.n	800fea6 <__lo0bits+0x2a>
 800fed2:	2000      	movs	r0, #0
 800fed4:	4770      	bx	lr
 800fed6:	2020      	movs	r0, #32
 800fed8:	4770      	bx	lr
	...

0800fedc <__i2b>:
 800fedc:	b510      	push	{r4, lr}
 800fede:	460c      	mov	r4, r1
 800fee0:	2101      	movs	r1, #1
 800fee2:	f7ff feb9 	bl	800fc58 <_Balloc>
 800fee6:	4602      	mov	r2, r0
 800fee8:	b928      	cbnz	r0, 800fef6 <__i2b+0x1a>
 800feea:	4b05      	ldr	r3, [pc, #20]	; (800ff00 <__i2b+0x24>)
 800feec:	4805      	ldr	r0, [pc, #20]	; (800ff04 <__i2b+0x28>)
 800feee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fef2:	f000 fdff 	bl	8010af4 <__assert_func>
 800fef6:	2301      	movs	r3, #1
 800fef8:	6144      	str	r4, [r0, #20]
 800fefa:	6103      	str	r3, [r0, #16]
 800fefc:	bd10      	pop	{r4, pc}
 800fefe:	bf00      	nop
 800ff00:	08021b48 	.word	0x08021b48
 800ff04:	08021bd4 	.word	0x08021bd4

0800ff08 <__multiply>:
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	4691      	mov	r9, r2
 800ff0e:	690a      	ldr	r2, [r1, #16]
 800ff10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	bfb8      	it	lt
 800ff18:	460b      	movlt	r3, r1
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	bfbc      	itt	lt
 800ff1e:	464c      	movlt	r4, r9
 800ff20:	4699      	movlt	r9, r3
 800ff22:	6927      	ldr	r7, [r4, #16]
 800ff24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff28:	68a3      	ldr	r3, [r4, #8]
 800ff2a:	6861      	ldr	r1, [r4, #4]
 800ff2c:	eb07 060a 	add.w	r6, r7, sl
 800ff30:	42b3      	cmp	r3, r6
 800ff32:	b085      	sub	sp, #20
 800ff34:	bfb8      	it	lt
 800ff36:	3101      	addlt	r1, #1
 800ff38:	f7ff fe8e 	bl	800fc58 <_Balloc>
 800ff3c:	b930      	cbnz	r0, 800ff4c <__multiply+0x44>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	4b44      	ldr	r3, [pc, #272]	; (8010054 <__multiply+0x14c>)
 800ff42:	4845      	ldr	r0, [pc, #276]	; (8010058 <__multiply+0x150>)
 800ff44:	f240 115d 	movw	r1, #349	; 0x15d
 800ff48:	f000 fdd4 	bl	8010af4 <__assert_func>
 800ff4c:	f100 0514 	add.w	r5, r0, #20
 800ff50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff54:	462b      	mov	r3, r5
 800ff56:	2200      	movs	r2, #0
 800ff58:	4543      	cmp	r3, r8
 800ff5a:	d321      	bcc.n	800ffa0 <__multiply+0x98>
 800ff5c:	f104 0314 	add.w	r3, r4, #20
 800ff60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff64:	f109 0314 	add.w	r3, r9, #20
 800ff68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff6c:	9202      	str	r2, [sp, #8]
 800ff6e:	1b3a      	subs	r2, r7, r4
 800ff70:	3a15      	subs	r2, #21
 800ff72:	f022 0203 	bic.w	r2, r2, #3
 800ff76:	3204      	adds	r2, #4
 800ff78:	f104 0115 	add.w	r1, r4, #21
 800ff7c:	428f      	cmp	r7, r1
 800ff7e:	bf38      	it	cc
 800ff80:	2204      	movcc	r2, #4
 800ff82:	9201      	str	r2, [sp, #4]
 800ff84:	9a02      	ldr	r2, [sp, #8]
 800ff86:	9303      	str	r3, [sp, #12]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d80c      	bhi.n	800ffa6 <__multiply+0x9e>
 800ff8c:	2e00      	cmp	r6, #0
 800ff8e:	dd03      	ble.n	800ff98 <__multiply+0x90>
 800ff90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d05a      	beq.n	801004e <__multiply+0x146>
 800ff98:	6106      	str	r6, [r0, #16]
 800ff9a:	b005      	add	sp, #20
 800ff9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa0:	f843 2b04 	str.w	r2, [r3], #4
 800ffa4:	e7d8      	b.n	800ff58 <__multiply+0x50>
 800ffa6:	f8b3 a000 	ldrh.w	sl, [r3]
 800ffaa:	f1ba 0f00 	cmp.w	sl, #0
 800ffae:	d024      	beq.n	800fffa <__multiply+0xf2>
 800ffb0:	f104 0e14 	add.w	lr, r4, #20
 800ffb4:	46a9      	mov	r9, r5
 800ffb6:	f04f 0c00 	mov.w	ip, #0
 800ffba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ffbe:	f8d9 1000 	ldr.w	r1, [r9]
 800ffc2:	fa1f fb82 	uxth.w	fp, r2
 800ffc6:	b289      	uxth	r1, r1
 800ffc8:	fb0a 110b 	mla	r1, sl, fp, r1
 800ffcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ffd0:	f8d9 2000 	ldr.w	r2, [r9]
 800ffd4:	4461      	add	r1, ip
 800ffd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ffda:	fb0a c20b 	mla	r2, sl, fp, ip
 800ffde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ffe2:	b289      	uxth	r1, r1
 800ffe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ffe8:	4577      	cmp	r7, lr
 800ffea:	f849 1b04 	str.w	r1, [r9], #4
 800ffee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fff2:	d8e2      	bhi.n	800ffba <__multiply+0xb2>
 800fff4:	9a01      	ldr	r2, [sp, #4]
 800fff6:	f845 c002 	str.w	ip, [r5, r2]
 800fffa:	9a03      	ldr	r2, [sp, #12]
 800fffc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010000:	3304      	adds	r3, #4
 8010002:	f1b9 0f00 	cmp.w	r9, #0
 8010006:	d020      	beq.n	801004a <__multiply+0x142>
 8010008:	6829      	ldr	r1, [r5, #0]
 801000a:	f104 0c14 	add.w	ip, r4, #20
 801000e:	46ae      	mov	lr, r5
 8010010:	f04f 0a00 	mov.w	sl, #0
 8010014:	f8bc b000 	ldrh.w	fp, [ip]
 8010018:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801001c:	fb09 220b 	mla	r2, r9, fp, r2
 8010020:	4492      	add	sl, r2
 8010022:	b289      	uxth	r1, r1
 8010024:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010028:	f84e 1b04 	str.w	r1, [lr], #4
 801002c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010030:	f8be 1000 	ldrh.w	r1, [lr]
 8010034:	0c12      	lsrs	r2, r2, #16
 8010036:	fb09 1102 	mla	r1, r9, r2, r1
 801003a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801003e:	4567      	cmp	r7, ip
 8010040:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010044:	d8e6      	bhi.n	8010014 <__multiply+0x10c>
 8010046:	9a01      	ldr	r2, [sp, #4]
 8010048:	50a9      	str	r1, [r5, r2]
 801004a:	3504      	adds	r5, #4
 801004c:	e79a      	b.n	800ff84 <__multiply+0x7c>
 801004e:	3e01      	subs	r6, #1
 8010050:	e79c      	b.n	800ff8c <__multiply+0x84>
 8010052:	bf00      	nop
 8010054:	08021b48 	.word	0x08021b48
 8010058:	08021bd4 	.word	0x08021bd4

0801005c <__pow5mult>:
 801005c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010060:	4615      	mov	r5, r2
 8010062:	f012 0203 	ands.w	r2, r2, #3
 8010066:	4606      	mov	r6, r0
 8010068:	460f      	mov	r7, r1
 801006a:	d007      	beq.n	801007c <__pow5mult+0x20>
 801006c:	4c25      	ldr	r4, [pc, #148]	; (8010104 <__pow5mult+0xa8>)
 801006e:	3a01      	subs	r2, #1
 8010070:	2300      	movs	r3, #0
 8010072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010076:	f7ff fe51 	bl	800fd1c <__multadd>
 801007a:	4607      	mov	r7, r0
 801007c:	10ad      	asrs	r5, r5, #2
 801007e:	d03d      	beq.n	80100fc <__pow5mult+0xa0>
 8010080:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010082:	b97c      	cbnz	r4, 80100a4 <__pow5mult+0x48>
 8010084:	2010      	movs	r0, #16
 8010086:	f7ff fdcd 	bl	800fc24 <malloc>
 801008a:	4602      	mov	r2, r0
 801008c:	6270      	str	r0, [r6, #36]	; 0x24
 801008e:	b928      	cbnz	r0, 801009c <__pow5mult+0x40>
 8010090:	4b1d      	ldr	r3, [pc, #116]	; (8010108 <__pow5mult+0xac>)
 8010092:	481e      	ldr	r0, [pc, #120]	; (801010c <__pow5mult+0xb0>)
 8010094:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010098:	f000 fd2c 	bl	8010af4 <__assert_func>
 801009c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100a0:	6004      	str	r4, [r0, #0]
 80100a2:	60c4      	str	r4, [r0, #12]
 80100a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80100a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100ac:	b94c      	cbnz	r4, 80100c2 <__pow5mult+0x66>
 80100ae:	f240 2171 	movw	r1, #625	; 0x271
 80100b2:	4630      	mov	r0, r6
 80100b4:	f7ff ff12 	bl	800fedc <__i2b>
 80100b8:	2300      	movs	r3, #0
 80100ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80100be:	4604      	mov	r4, r0
 80100c0:	6003      	str	r3, [r0, #0]
 80100c2:	f04f 0900 	mov.w	r9, #0
 80100c6:	07eb      	lsls	r3, r5, #31
 80100c8:	d50a      	bpl.n	80100e0 <__pow5mult+0x84>
 80100ca:	4639      	mov	r1, r7
 80100cc:	4622      	mov	r2, r4
 80100ce:	4630      	mov	r0, r6
 80100d0:	f7ff ff1a 	bl	800ff08 <__multiply>
 80100d4:	4639      	mov	r1, r7
 80100d6:	4680      	mov	r8, r0
 80100d8:	4630      	mov	r0, r6
 80100da:	f7ff fdfd 	bl	800fcd8 <_Bfree>
 80100de:	4647      	mov	r7, r8
 80100e0:	106d      	asrs	r5, r5, #1
 80100e2:	d00b      	beq.n	80100fc <__pow5mult+0xa0>
 80100e4:	6820      	ldr	r0, [r4, #0]
 80100e6:	b938      	cbnz	r0, 80100f8 <__pow5mult+0x9c>
 80100e8:	4622      	mov	r2, r4
 80100ea:	4621      	mov	r1, r4
 80100ec:	4630      	mov	r0, r6
 80100ee:	f7ff ff0b 	bl	800ff08 <__multiply>
 80100f2:	6020      	str	r0, [r4, #0]
 80100f4:	f8c0 9000 	str.w	r9, [r0]
 80100f8:	4604      	mov	r4, r0
 80100fa:	e7e4      	b.n	80100c6 <__pow5mult+0x6a>
 80100fc:	4638      	mov	r0, r7
 80100fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010102:	bf00      	nop
 8010104:	08021d20 	.word	0x08021d20
 8010108:	08021ad6 	.word	0x08021ad6
 801010c:	08021bd4 	.word	0x08021bd4

08010110 <__lshift>:
 8010110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010114:	460c      	mov	r4, r1
 8010116:	6849      	ldr	r1, [r1, #4]
 8010118:	6923      	ldr	r3, [r4, #16]
 801011a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	4607      	mov	r7, r0
 8010122:	4691      	mov	r9, r2
 8010124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010128:	f108 0601 	add.w	r6, r8, #1
 801012c:	42b3      	cmp	r3, r6
 801012e:	db0b      	blt.n	8010148 <__lshift+0x38>
 8010130:	4638      	mov	r0, r7
 8010132:	f7ff fd91 	bl	800fc58 <_Balloc>
 8010136:	4605      	mov	r5, r0
 8010138:	b948      	cbnz	r0, 801014e <__lshift+0x3e>
 801013a:	4602      	mov	r2, r0
 801013c:	4b2a      	ldr	r3, [pc, #168]	; (80101e8 <__lshift+0xd8>)
 801013e:	482b      	ldr	r0, [pc, #172]	; (80101ec <__lshift+0xdc>)
 8010140:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010144:	f000 fcd6 	bl	8010af4 <__assert_func>
 8010148:	3101      	adds	r1, #1
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	e7ee      	b.n	801012c <__lshift+0x1c>
 801014e:	2300      	movs	r3, #0
 8010150:	f100 0114 	add.w	r1, r0, #20
 8010154:	f100 0210 	add.w	r2, r0, #16
 8010158:	4618      	mov	r0, r3
 801015a:	4553      	cmp	r3, sl
 801015c:	db37      	blt.n	80101ce <__lshift+0xbe>
 801015e:	6920      	ldr	r0, [r4, #16]
 8010160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010164:	f104 0314 	add.w	r3, r4, #20
 8010168:	f019 091f 	ands.w	r9, r9, #31
 801016c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010170:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010174:	d02f      	beq.n	80101d6 <__lshift+0xc6>
 8010176:	f1c9 0e20 	rsb	lr, r9, #32
 801017a:	468a      	mov	sl, r1
 801017c:	f04f 0c00 	mov.w	ip, #0
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	fa02 f209 	lsl.w	r2, r2, r9
 8010186:	ea42 020c 	orr.w	r2, r2, ip
 801018a:	f84a 2b04 	str.w	r2, [sl], #4
 801018e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010192:	4298      	cmp	r0, r3
 8010194:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010198:	d8f2      	bhi.n	8010180 <__lshift+0x70>
 801019a:	1b03      	subs	r3, r0, r4
 801019c:	3b15      	subs	r3, #21
 801019e:	f023 0303 	bic.w	r3, r3, #3
 80101a2:	3304      	adds	r3, #4
 80101a4:	f104 0215 	add.w	r2, r4, #21
 80101a8:	4290      	cmp	r0, r2
 80101aa:	bf38      	it	cc
 80101ac:	2304      	movcc	r3, #4
 80101ae:	f841 c003 	str.w	ip, [r1, r3]
 80101b2:	f1bc 0f00 	cmp.w	ip, #0
 80101b6:	d001      	beq.n	80101bc <__lshift+0xac>
 80101b8:	f108 0602 	add.w	r6, r8, #2
 80101bc:	3e01      	subs	r6, #1
 80101be:	4638      	mov	r0, r7
 80101c0:	612e      	str	r6, [r5, #16]
 80101c2:	4621      	mov	r1, r4
 80101c4:	f7ff fd88 	bl	800fcd8 <_Bfree>
 80101c8:	4628      	mov	r0, r5
 80101ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80101d2:	3301      	adds	r3, #1
 80101d4:	e7c1      	b.n	801015a <__lshift+0x4a>
 80101d6:	3904      	subs	r1, #4
 80101d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80101dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80101e0:	4298      	cmp	r0, r3
 80101e2:	d8f9      	bhi.n	80101d8 <__lshift+0xc8>
 80101e4:	e7ea      	b.n	80101bc <__lshift+0xac>
 80101e6:	bf00      	nop
 80101e8:	08021b48 	.word	0x08021b48
 80101ec:	08021bd4 	.word	0x08021bd4

080101f0 <__mcmp>:
 80101f0:	b530      	push	{r4, r5, lr}
 80101f2:	6902      	ldr	r2, [r0, #16]
 80101f4:	690c      	ldr	r4, [r1, #16]
 80101f6:	1b12      	subs	r2, r2, r4
 80101f8:	d10e      	bne.n	8010218 <__mcmp+0x28>
 80101fa:	f100 0314 	add.w	r3, r0, #20
 80101fe:	3114      	adds	r1, #20
 8010200:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010204:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010208:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801020c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010210:	42a5      	cmp	r5, r4
 8010212:	d003      	beq.n	801021c <__mcmp+0x2c>
 8010214:	d305      	bcc.n	8010222 <__mcmp+0x32>
 8010216:	2201      	movs	r2, #1
 8010218:	4610      	mov	r0, r2
 801021a:	bd30      	pop	{r4, r5, pc}
 801021c:	4283      	cmp	r3, r0
 801021e:	d3f3      	bcc.n	8010208 <__mcmp+0x18>
 8010220:	e7fa      	b.n	8010218 <__mcmp+0x28>
 8010222:	f04f 32ff 	mov.w	r2, #4294967295
 8010226:	e7f7      	b.n	8010218 <__mcmp+0x28>

08010228 <__mdiff>:
 8010228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	460c      	mov	r4, r1
 801022e:	4606      	mov	r6, r0
 8010230:	4611      	mov	r1, r2
 8010232:	4620      	mov	r0, r4
 8010234:	4690      	mov	r8, r2
 8010236:	f7ff ffdb 	bl	80101f0 <__mcmp>
 801023a:	1e05      	subs	r5, r0, #0
 801023c:	d110      	bne.n	8010260 <__mdiff+0x38>
 801023e:	4629      	mov	r1, r5
 8010240:	4630      	mov	r0, r6
 8010242:	f7ff fd09 	bl	800fc58 <_Balloc>
 8010246:	b930      	cbnz	r0, 8010256 <__mdiff+0x2e>
 8010248:	4b3a      	ldr	r3, [pc, #232]	; (8010334 <__mdiff+0x10c>)
 801024a:	4602      	mov	r2, r0
 801024c:	f240 2132 	movw	r1, #562	; 0x232
 8010250:	4839      	ldr	r0, [pc, #228]	; (8010338 <__mdiff+0x110>)
 8010252:	f000 fc4f 	bl	8010af4 <__assert_func>
 8010256:	2301      	movs	r3, #1
 8010258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801025c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010260:	bfa4      	itt	ge
 8010262:	4643      	movge	r3, r8
 8010264:	46a0      	movge	r8, r4
 8010266:	4630      	mov	r0, r6
 8010268:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801026c:	bfa6      	itte	ge
 801026e:	461c      	movge	r4, r3
 8010270:	2500      	movge	r5, #0
 8010272:	2501      	movlt	r5, #1
 8010274:	f7ff fcf0 	bl	800fc58 <_Balloc>
 8010278:	b920      	cbnz	r0, 8010284 <__mdiff+0x5c>
 801027a:	4b2e      	ldr	r3, [pc, #184]	; (8010334 <__mdiff+0x10c>)
 801027c:	4602      	mov	r2, r0
 801027e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010282:	e7e5      	b.n	8010250 <__mdiff+0x28>
 8010284:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010288:	6926      	ldr	r6, [r4, #16]
 801028a:	60c5      	str	r5, [r0, #12]
 801028c:	f104 0914 	add.w	r9, r4, #20
 8010290:	f108 0514 	add.w	r5, r8, #20
 8010294:	f100 0e14 	add.w	lr, r0, #20
 8010298:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801029c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80102a0:	f108 0210 	add.w	r2, r8, #16
 80102a4:	46f2      	mov	sl, lr
 80102a6:	2100      	movs	r1, #0
 80102a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80102ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80102b0:	fa1f f883 	uxth.w	r8, r3
 80102b4:	fa11 f18b 	uxtah	r1, r1, fp
 80102b8:	0c1b      	lsrs	r3, r3, #16
 80102ba:	eba1 0808 	sub.w	r8, r1, r8
 80102be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80102c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102c6:	fa1f f888 	uxth.w	r8, r8
 80102ca:	1419      	asrs	r1, r3, #16
 80102cc:	454e      	cmp	r6, r9
 80102ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80102d2:	f84a 3b04 	str.w	r3, [sl], #4
 80102d6:	d8e7      	bhi.n	80102a8 <__mdiff+0x80>
 80102d8:	1b33      	subs	r3, r6, r4
 80102da:	3b15      	subs	r3, #21
 80102dc:	f023 0303 	bic.w	r3, r3, #3
 80102e0:	3304      	adds	r3, #4
 80102e2:	3415      	adds	r4, #21
 80102e4:	42a6      	cmp	r6, r4
 80102e6:	bf38      	it	cc
 80102e8:	2304      	movcc	r3, #4
 80102ea:	441d      	add	r5, r3
 80102ec:	4473      	add	r3, lr
 80102ee:	469e      	mov	lr, r3
 80102f0:	462e      	mov	r6, r5
 80102f2:	4566      	cmp	r6, ip
 80102f4:	d30e      	bcc.n	8010314 <__mdiff+0xec>
 80102f6:	f10c 0203 	add.w	r2, ip, #3
 80102fa:	1b52      	subs	r2, r2, r5
 80102fc:	f022 0203 	bic.w	r2, r2, #3
 8010300:	3d03      	subs	r5, #3
 8010302:	45ac      	cmp	ip, r5
 8010304:	bf38      	it	cc
 8010306:	2200      	movcc	r2, #0
 8010308:	441a      	add	r2, r3
 801030a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801030e:	b17b      	cbz	r3, 8010330 <__mdiff+0x108>
 8010310:	6107      	str	r7, [r0, #16]
 8010312:	e7a3      	b.n	801025c <__mdiff+0x34>
 8010314:	f856 8b04 	ldr.w	r8, [r6], #4
 8010318:	fa11 f288 	uxtah	r2, r1, r8
 801031c:	1414      	asrs	r4, r2, #16
 801031e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010322:	b292      	uxth	r2, r2
 8010324:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010328:	f84e 2b04 	str.w	r2, [lr], #4
 801032c:	1421      	asrs	r1, r4, #16
 801032e:	e7e0      	b.n	80102f2 <__mdiff+0xca>
 8010330:	3f01      	subs	r7, #1
 8010332:	e7ea      	b.n	801030a <__mdiff+0xe2>
 8010334:	08021b48 	.word	0x08021b48
 8010338:	08021bd4 	.word	0x08021bd4

0801033c <__ulp>:
 801033c:	b082      	sub	sp, #8
 801033e:	ed8d 0b00 	vstr	d0, [sp]
 8010342:	9b01      	ldr	r3, [sp, #4]
 8010344:	4912      	ldr	r1, [pc, #72]	; (8010390 <__ulp+0x54>)
 8010346:	4019      	ands	r1, r3
 8010348:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801034c:	2900      	cmp	r1, #0
 801034e:	dd05      	ble.n	801035c <__ulp+0x20>
 8010350:	2200      	movs	r2, #0
 8010352:	460b      	mov	r3, r1
 8010354:	ec43 2b10 	vmov	d0, r2, r3
 8010358:	b002      	add	sp, #8
 801035a:	4770      	bx	lr
 801035c:	4249      	negs	r1, r1
 801035e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010362:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010366:	f04f 0200 	mov.w	r2, #0
 801036a:	f04f 0300 	mov.w	r3, #0
 801036e:	da04      	bge.n	801037a <__ulp+0x3e>
 8010370:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010374:	fa41 f300 	asr.w	r3, r1, r0
 8010378:	e7ec      	b.n	8010354 <__ulp+0x18>
 801037a:	f1a0 0114 	sub.w	r1, r0, #20
 801037e:	291e      	cmp	r1, #30
 8010380:	bfda      	itte	le
 8010382:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010386:	fa20 f101 	lsrle.w	r1, r0, r1
 801038a:	2101      	movgt	r1, #1
 801038c:	460a      	mov	r2, r1
 801038e:	e7e1      	b.n	8010354 <__ulp+0x18>
 8010390:	7ff00000 	.word	0x7ff00000

08010394 <__b2d>:
 8010394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010396:	6905      	ldr	r5, [r0, #16]
 8010398:	f100 0714 	add.w	r7, r0, #20
 801039c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80103a0:	1f2e      	subs	r6, r5, #4
 80103a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80103a6:	4620      	mov	r0, r4
 80103a8:	f7ff fd48 	bl	800fe3c <__hi0bits>
 80103ac:	f1c0 0320 	rsb	r3, r0, #32
 80103b0:	280a      	cmp	r0, #10
 80103b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010430 <__b2d+0x9c>
 80103b6:	600b      	str	r3, [r1, #0]
 80103b8:	dc14      	bgt.n	80103e4 <__b2d+0x50>
 80103ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80103be:	fa24 f10e 	lsr.w	r1, r4, lr
 80103c2:	42b7      	cmp	r7, r6
 80103c4:	ea41 030c 	orr.w	r3, r1, ip
 80103c8:	bf34      	ite	cc
 80103ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80103ce:	2100      	movcs	r1, #0
 80103d0:	3015      	adds	r0, #21
 80103d2:	fa04 f000 	lsl.w	r0, r4, r0
 80103d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80103da:	ea40 0201 	orr.w	r2, r0, r1
 80103de:	ec43 2b10 	vmov	d0, r2, r3
 80103e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e4:	42b7      	cmp	r7, r6
 80103e6:	bf3a      	itte	cc
 80103e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80103ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80103f0:	2100      	movcs	r1, #0
 80103f2:	380b      	subs	r0, #11
 80103f4:	d017      	beq.n	8010426 <__b2d+0x92>
 80103f6:	f1c0 0c20 	rsb	ip, r0, #32
 80103fa:	fa04 f500 	lsl.w	r5, r4, r0
 80103fe:	42be      	cmp	r6, r7
 8010400:	fa21 f40c 	lsr.w	r4, r1, ip
 8010404:	ea45 0504 	orr.w	r5, r5, r4
 8010408:	bf8c      	ite	hi
 801040a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801040e:	2400      	movls	r4, #0
 8010410:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010414:	fa01 f000 	lsl.w	r0, r1, r0
 8010418:	fa24 f40c 	lsr.w	r4, r4, ip
 801041c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010420:	ea40 0204 	orr.w	r2, r0, r4
 8010424:	e7db      	b.n	80103de <__b2d+0x4a>
 8010426:	ea44 030c 	orr.w	r3, r4, ip
 801042a:	460a      	mov	r2, r1
 801042c:	e7d7      	b.n	80103de <__b2d+0x4a>
 801042e:	bf00      	nop
 8010430:	3ff00000 	.word	0x3ff00000

08010434 <__d2b>:
 8010434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010438:	4689      	mov	r9, r1
 801043a:	2101      	movs	r1, #1
 801043c:	ec57 6b10 	vmov	r6, r7, d0
 8010440:	4690      	mov	r8, r2
 8010442:	f7ff fc09 	bl	800fc58 <_Balloc>
 8010446:	4604      	mov	r4, r0
 8010448:	b930      	cbnz	r0, 8010458 <__d2b+0x24>
 801044a:	4602      	mov	r2, r0
 801044c:	4b25      	ldr	r3, [pc, #148]	; (80104e4 <__d2b+0xb0>)
 801044e:	4826      	ldr	r0, [pc, #152]	; (80104e8 <__d2b+0xb4>)
 8010450:	f240 310a 	movw	r1, #778	; 0x30a
 8010454:	f000 fb4e 	bl	8010af4 <__assert_func>
 8010458:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801045c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010460:	bb35      	cbnz	r5, 80104b0 <__d2b+0x7c>
 8010462:	2e00      	cmp	r6, #0
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	d028      	beq.n	80104ba <__d2b+0x86>
 8010468:	4668      	mov	r0, sp
 801046a:	9600      	str	r6, [sp, #0]
 801046c:	f7ff fd06 	bl	800fe7c <__lo0bits>
 8010470:	9900      	ldr	r1, [sp, #0]
 8010472:	b300      	cbz	r0, 80104b6 <__d2b+0x82>
 8010474:	9a01      	ldr	r2, [sp, #4]
 8010476:	f1c0 0320 	rsb	r3, r0, #32
 801047a:	fa02 f303 	lsl.w	r3, r2, r3
 801047e:	430b      	orrs	r3, r1
 8010480:	40c2      	lsrs	r2, r0
 8010482:	6163      	str	r3, [r4, #20]
 8010484:	9201      	str	r2, [sp, #4]
 8010486:	9b01      	ldr	r3, [sp, #4]
 8010488:	61a3      	str	r3, [r4, #24]
 801048a:	2b00      	cmp	r3, #0
 801048c:	bf14      	ite	ne
 801048e:	2202      	movne	r2, #2
 8010490:	2201      	moveq	r2, #1
 8010492:	6122      	str	r2, [r4, #16]
 8010494:	b1d5      	cbz	r5, 80104cc <__d2b+0x98>
 8010496:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801049a:	4405      	add	r5, r0
 801049c:	f8c9 5000 	str.w	r5, [r9]
 80104a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80104a4:	f8c8 0000 	str.w	r0, [r8]
 80104a8:	4620      	mov	r0, r4
 80104aa:	b003      	add	sp, #12
 80104ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104b4:	e7d5      	b.n	8010462 <__d2b+0x2e>
 80104b6:	6161      	str	r1, [r4, #20]
 80104b8:	e7e5      	b.n	8010486 <__d2b+0x52>
 80104ba:	a801      	add	r0, sp, #4
 80104bc:	f7ff fcde 	bl	800fe7c <__lo0bits>
 80104c0:	9b01      	ldr	r3, [sp, #4]
 80104c2:	6163      	str	r3, [r4, #20]
 80104c4:	2201      	movs	r2, #1
 80104c6:	6122      	str	r2, [r4, #16]
 80104c8:	3020      	adds	r0, #32
 80104ca:	e7e3      	b.n	8010494 <__d2b+0x60>
 80104cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80104d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80104d4:	f8c9 0000 	str.w	r0, [r9]
 80104d8:	6918      	ldr	r0, [r3, #16]
 80104da:	f7ff fcaf 	bl	800fe3c <__hi0bits>
 80104de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80104e2:	e7df      	b.n	80104a4 <__d2b+0x70>
 80104e4:	08021b48 	.word	0x08021b48
 80104e8:	08021bd4 	.word	0x08021bd4

080104ec <__ratio>:
 80104ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f0:	4688      	mov	r8, r1
 80104f2:	4669      	mov	r1, sp
 80104f4:	4681      	mov	r9, r0
 80104f6:	f7ff ff4d 	bl	8010394 <__b2d>
 80104fa:	a901      	add	r1, sp, #4
 80104fc:	4640      	mov	r0, r8
 80104fe:	ec55 4b10 	vmov	r4, r5, d0
 8010502:	f7ff ff47 	bl	8010394 <__b2d>
 8010506:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801050a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801050e:	eba3 0c02 	sub.w	ip, r3, r2
 8010512:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010516:	1a9b      	subs	r3, r3, r2
 8010518:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801051c:	ec51 0b10 	vmov	r0, r1, d0
 8010520:	2b00      	cmp	r3, #0
 8010522:	bfd6      	itet	le
 8010524:	460a      	movle	r2, r1
 8010526:	462a      	movgt	r2, r5
 8010528:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801052c:	468b      	mov	fp, r1
 801052e:	462f      	mov	r7, r5
 8010530:	bfd4      	ite	le
 8010532:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010536:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801053a:	4620      	mov	r0, r4
 801053c:	ee10 2a10 	vmov	r2, s0
 8010540:	465b      	mov	r3, fp
 8010542:	4639      	mov	r1, r7
 8010544:	f7f0 f982 	bl	800084c <__aeabi_ddiv>
 8010548:	ec41 0b10 	vmov	d0, r0, r1
 801054c:	b003      	add	sp, #12
 801054e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010552 <__copybits>:
 8010552:	3901      	subs	r1, #1
 8010554:	b570      	push	{r4, r5, r6, lr}
 8010556:	1149      	asrs	r1, r1, #5
 8010558:	6914      	ldr	r4, [r2, #16]
 801055a:	3101      	adds	r1, #1
 801055c:	f102 0314 	add.w	r3, r2, #20
 8010560:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010564:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010568:	1f05      	subs	r5, r0, #4
 801056a:	42a3      	cmp	r3, r4
 801056c:	d30c      	bcc.n	8010588 <__copybits+0x36>
 801056e:	1aa3      	subs	r3, r4, r2
 8010570:	3b11      	subs	r3, #17
 8010572:	f023 0303 	bic.w	r3, r3, #3
 8010576:	3211      	adds	r2, #17
 8010578:	42a2      	cmp	r2, r4
 801057a:	bf88      	it	hi
 801057c:	2300      	movhi	r3, #0
 801057e:	4418      	add	r0, r3
 8010580:	2300      	movs	r3, #0
 8010582:	4288      	cmp	r0, r1
 8010584:	d305      	bcc.n	8010592 <__copybits+0x40>
 8010586:	bd70      	pop	{r4, r5, r6, pc}
 8010588:	f853 6b04 	ldr.w	r6, [r3], #4
 801058c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010590:	e7eb      	b.n	801056a <__copybits+0x18>
 8010592:	f840 3b04 	str.w	r3, [r0], #4
 8010596:	e7f4      	b.n	8010582 <__copybits+0x30>

08010598 <__any_on>:
 8010598:	f100 0214 	add.w	r2, r0, #20
 801059c:	6900      	ldr	r0, [r0, #16]
 801059e:	114b      	asrs	r3, r1, #5
 80105a0:	4298      	cmp	r0, r3
 80105a2:	b510      	push	{r4, lr}
 80105a4:	db11      	blt.n	80105ca <__any_on+0x32>
 80105a6:	dd0a      	ble.n	80105be <__any_on+0x26>
 80105a8:	f011 011f 	ands.w	r1, r1, #31
 80105ac:	d007      	beq.n	80105be <__any_on+0x26>
 80105ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80105b2:	fa24 f001 	lsr.w	r0, r4, r1
 80105b6:	fa00 f101 	lsl.w	r1, r0, r1
 80105ba:	428c      	cmp	r4, r1
 80105bc:	d10b      	bne.n	80105d6 <__any_on+0x3e>
 80105be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d803      	bhi.n	80105ce <__any_on+0x36>
 80105c6:	2000      	movs	r0, #0
 80105c8:	bd10      	pop	{r4, pc}
 80105ca:	4603      	mov	r3, r0
 80105cc:	e7f7      	b.n	80105be <__any_on+0x26>
 80105ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80105d2:	2900      	cmp	r1, #0
 80105d4:	d0f5      	beq.n	80105c2 <__any_on+0x2a>
 80105d6:	2001      	movs	r0, #1
 80105d8:	e7f6      	b.n	80105c8 <__any_on+0x30>

080105da <_calloc_r>:
 80105da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105dc:	fba1 2402 	umull	r2, r4, r1, r2
 80105e0:	b94c      	cbnz	r4, 80105f6 <_calloc_r+0x1c>
 80105e2:	4611      	mov	r1, r2
 80105e4:	9201      	str	r2, [sp, #4]
 80105e6:	f000 f87b 	bl	80106e0 <_malloc_r>
 80105ea:	9a01      	ldr	r2, [sp, #4]
 80105ec:	4605      	mov	r5, r0
 80105ee:	b930      	cbnz	r0, 80105fe <_calloc_r+0x24>
 80105f0:	4628      	mov	r0, r5
 80105f2:	b003      	add	sp, #12
 80105f4:	bd30      	pop	{r4, r5, pc}
 80105f6:	220c      	movs	r2, #12
 80105f8:	6002      	str	r2, [r0, #0]
 80105fa:	2500      	movs	r5, #0
 80105fc:	e7f8      	b.n	80105f0 <_calloc_r+0x16>
 80105fe:	4621      	mov	r1, r4
 8010600:	f7fc fb8c 	bl	800cd1c <memset>
 8010604:	e7f4      	b.n	80105f0 <_calloc_r+0x16>
	...

08010608 <_free_r>:
 8010608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801060a:	2900      	cmp	r1, #0
 801060c:	d044      	beq.n	8010698 <_free_r+0x90>
 801060e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010612:	9001      	str	r0, [sp, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	f1a1 0404 	sub.w	r4, r1, #4
 801061a:	bfb8      	it	lt
 801061c:	18e4      	addlt	r4, r4, r3
 801061e:	f000 fab3 	bl	8010b88 <__malloc_lock>
 8010622:	4a1e      	ldr	r2, [pc, #120]	; (801069c <_free_r+0x94>)
 8010624:	9801      	ldr	r0, [sp, #4]
 8010626:	6813      	ldr	r3, [r2, #0]
 8010628:	b933      	cbnz	r3, 8010638 <_free_r+0x30>
 801062a:	6063      	str	r3, [r4, #4]
 801062c:	6014      	str	r4, [r2, #0]
 801062e:	b003      	add	sp, #12
 8010630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010634:	f000 baae 	b.w	8010b94 <__malloc_unlock>
 8010638:	42a3      	cmp	r3, r4
 801063a:	d908      	bls.n	801064e <_free_r+0x46>
 801063c:	6825      	ldr	r5, [r4, #0]
 801063e:	1961      	adds	r1, r4, r5
 8010640:	428b      	cmp	r3, r1
 8010642:	bf01      	itttt	eq
 8010644:	6819      	ldreq	r1, [r3, #0]
 8010646:	685b      	ldreq	r3, [r3, #4]
 8010648:	1949      	addeq	r1, r1, r5
 801064a:	6021      	streq	r1, [r4, #0]
 801064c:	e7ed      	b.n	801062a <_free_r+0x22>
 801064e:	461a      	mov	r2, r3
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	b10b      	cbz	r3, 8010658 <_free_r+0x50>
 8010654:	42a3      	cmp	r3, r4
 8010656:	d9fa      	bls.n	801064e <_free_r+0x46>
 8010658:	6811      	ldr	r1, [r2, #0]
 801065a:	1855      	adds	r5, r2, r1
 801065c:	42a5      	cmp	r5, r4
 801065e:	d10b      	bne.n	8010678 <_free_r+0x70>
 8010660:	6824      	ldr	r4, [r4, #0]
 8010662:	4421      	add	r1, r4
 8010664:	1854      	adds	r4, r2, r1
 8010666:	42a3      	cmp	r3, r4
 8010668:	6011      	str	r1, [r2, #0]
 801066a:	d1e0      	bne.n	801062e <_free_r+0x26>
 801066c:	681c      	ldr	r4, [r3, #0]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	6053      	str	r3, [r2, #4]
 8010672:	4421      	add	r1, r4
 8010674:	6011      	str	r1, [r2, #0]
 8010676:	e7da      	b.n	801062e <_free_r+0x26>
 8010678:	d902      	bls.n	8010680 <_free_r+0x78>
 801067a:	230c      	movs	r3, #12
 801067c:	6003      	str	r3, [r0, #0]
 801067e:	e7d6      	b.n	801062e <_free_r+0x26>
 8010680:	6825      	ldr	r5, [r4, #0]
 8010682:	1961      	adds	r1, r4, r5
 8010684:	428b      	cmp	r3, r1
 8010686:	bf04      	itt	eq
 8010688:	6819      	ldreq	r1, [r3, #0]
 801068a:	685b      	ldreq	r3, [r3, #4]
 801068c:	6063      	str	r3, [r4, #4]
 801068e:	bf04      	itt	eq
 8010690:	1949      	addeq	r1, r1, r5
 8010692:	6021      	streq	r1, [r4, #0]
 8010694:	6054      	str	r4, [r2, #4]
 8010696:	e7ca      	b.n	801062e <_free_r+0x26>
 8010698:	b003      	add	sp, #12
 801069a:	bd30      	pop	{r4, r5, pc}
 801069c:	20001470 	.word	0x20001470

080106a0 <sbrk_aligned>:
 80106a0:	b570      	push	{r4, r5, r6, lr}
 80106a2:	4e0e      	ldr	r6, [pc, #56]	; (80106dc <sbrk_aligned+0x3c>)
 80106a4:	460c      	mov	r4, r1
 80106a6:	6831      	ldr	r1, [r6, #0]
 80106a8:	4605      	mov	r5, r0
 80106aa:	b911      	cbnz	r1, 80106b2 <sbrk_aligned+0x12>
 80106ac:	f000 f9f0 	bl	8010a90 <_sbrk_r>
 80106b0:	6030      	str	r0, [r6, #0]
 80106b2:	4621      	mov	r1, r4
 80106b4:	4628      	mov	r0, r5
 80106b6:	f000 f9eb 	bl	8010a90 <_sbrk_r>
 80106ba:	1c43      	adds	r3, r0, #1
 80106bc:	d00a      	beq.n	80106d4 <sbrk_aligned+0x34>
 80106be:	1cc4      	adds	r4, r0, #3
 80106c0:	f024 0403 	bic.w	r4, r4, #3
 80106c4:	42a0      	cmp	r0, r4
 80106c6:	d007      	beq.n	80106d8 <sbrk_aligned+0x38>
 80106c8:	1a21      	subs	r1, r4, r0
 80106ca:	4628      	mov	r0, r5
 80106cc:	f000 f9e0 	bl	8010a90 <_sbrk_r>
 80106d0:	3001      	adds	r0, #1
 80106d2:	d101      	bne.n	80106d8 <sbrk_aligned+0x38>
 80106d4:	f04f 34ff 	mov.w	r4, #4294967295
 80106d8:	4620      	mov	r0, r4
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	20001474 	.word	0x20001474

080106e0 <_malloc_r>:
 80106e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e4:	1ccd      	adds	r5, r1, #3
 80106e6:	f025 0503 	bic.w	r5, r5, #3
 80106ea:	3508      	adds	r5, #8
 80106ec:	2d0c      	cmp	r5, #12
 80106ee:	bf38      	it	cc
 80106f0:	250c      	movcc	r5, #12
 80106f2:	2d00      	cmp	r5, #0
 80106f4:	4607      	mov	r7, r0
 80106f6:	db01      	blt.n	80106fc <_malloc_r+0x1c>
 80106f8:	42a9      	cmp	r1, r5
 80106fa:	d905      	bls.n	8010708 <_malloc_r+0x28>
 80106fc:	230c      	movs	r3, #12
 80106fe:	603b      	str	r3, [r7, #0]
 8010700:	2600      	movs	r6, #0
 8010702:	4630      	mov	r0, r6
 8010704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010708:	4e2e      	ldr	r6, [pc, #184]	; (80107c4 <_malloc_r+0xe4>)
 801070a:	f000 fa3d 	bl	8010b88 <__malloc_lock>
 801070e:	6833      	ldr	r3, [r6, #0]
 8010710:	461c      	mov	r4, r3
 8010712:	bb34      	cbnz	r4, 8010762 <_malloc_r+0x82>
 8010714:	4629      	mov	r1, r5
 8010716:	4638      	mov	r0, r7
 8010718:	f7ff ffc2 	bl	80106a0 <sbrk_aligned>
 801071c:	1c43      	adds	r3, r0, #1
 801071e:	4604      	mov	r4, r0
 8010720:	d14d      	bne.n	80107be <_malloc_r+0xde>
 8010722:	6834      	ldr	r4, [r6, #0]
 8010724:	4626      	mov	r6, r4
 8010726:	2e00      	cmp	r6, #0
 8010728:	d140      	bne.n	80107ac <_malloc_r+0xcc>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	4631      	mov	r1, r6
 801072e:	4638      	mov	r0, r7
 8010730:	eb04 0803 	add.w	r8, r4, r3
 8010734:	f000 f9ac 	bl	8010a90 <_sbrk_r>
 8010738:	4580      	cmp	r8, r0
 801073a:	d13a      	bne.n	80107b2 <_malloc_r+0xd2>
 801073c:	6821      	ldr	r1, [r4, #0]
 801073e:	3503      	adds	r5, #3
 8010740:	1a6d      	subs	r5, r5, r1
 8010742:	f025 0503 	bic.w	r5, r5, #3
 8010746:	3508      	adds	r5, #8
 8010748:	2d0c      	cmp	r5, #12
 801074a:	bf38      	it	cc
 801074c:	250c      	movcc	r5, #12
 801074e:	4629      	mov	r1, r5
 8010750:	4638      	mov	r0, r7
 8010752:	f7ff ffa5 	bl	80106a0 <sbrk_aligned>
 8010756:	3001      	adds	r0, #1
 8010758:	d02b      	beq.n	80107b2 <_malloc_r+0xd2>
 801075a:	6823      	ldr	r3, [r4, #0]
 801075c:	442b      	add	r3, r5
 801075e:	6023      	str	r3, [r4, #0]
 8010760:	e00e      	b.n	8010780 <_malloc_r+0xa0>
 8010762:	6822      	ldr	r2, [r4, #0]
 8010764:	1b52      	subs	r2, r2, r5
 8010766:	d41e      	bmi.n	80107a6 <_malloc_r+0xc6>
 8010768:	2a0b      	cmp	r2, #11
 801076a:	d916      	bls.n	801079a <_malloc_r+0xba>
 801076c:	1961      	adds	r1, r4, r5
 801076e:	42a3      	cmp	r3, r4
 8010770:	6025      	str	r5, [r4, #0]
 8010772:	bf18      	it	ne
 8010774:	6059      	strne	r1, [r3, #4]
 8010776:	6863      	ldr	r3, [r4, #4]
 8010778:	bf08      	it	eq
 801077a:	6031      	streq	r1, [r6, #0]
 801077c:	5162      	str	r2, [r4, r5]
 801077e:	604b      	str	r3, [r1, #4]
 8010780:	4638      	mov	r0, r7
 8010782:	f104 060b 	add.w	r6, r4, #11
 8010786:	f000 fa05 	bl	8010b94 <__malloc_unlock>
 801078a:	f026 0607 	bic.w	r6, r6, #7
 801078e:	1d23      	adds	r3, r4, #4
 8010790:	1af2      	subs	r2, r6, r3
 8010792:	d0b6      	beq.n	8010702 <_malloc_r+0x22>
 8010794:	1b9b      	subs	r3, r3, r6
 8010796:	50a3      	str	r3, [r4, r2]
 8010798:	e7b3      	b.n	8010702 <_malloc_r+0x22>
 801079a:	6862      	ldr	r2, [r4, #4]
 801079c:	42a3      	cmp	r3, r4
 801079e:	bf0c      	ite	eq
 80107a0:	6032      	streq	r2, [r6, #0]
 80107a2:	605a      	strne	r2, [r3, #4]
 80107a4:	e7ec      	b.n	8010780 <_malloc_r+0xa0>
 80107a6:	4623      	mov	r3, r4
 80107a8:	6864      	ldr	r4, [r4, #4]
 80107aa:	e7b2      	b.n	8010712 <_malloc_r+0x32>
 80107ac:	4634      	mov	r4, r6
 80107ae:	6876      	ldr	r6, [r6, #4]
 80107b0:	e7b9      	b.n	8010726 <_malloc_r+0x46>
 80107b2:	230c      	movs	r3, #12
 80107b4:	603b      	str	r3, [r7, #0]
 80107b6:	4638      	mov	r0, r7
 80107b8:	f000 f9ec 	bl	8010b94 <__malloc_unlock>
 80107bc:	e7a1      	b.n	8010702 <_malloc_r+0x22>
 80107be:	6025      	str	r5, [r4, #0]
 80107c0:	e7de      	b.n	8010780 <_malloc_r+0xa0>
 80107c2:	bf00      	nop
 80107c4:	20001470 	.word	0x20001470

080107c8 <__ssputs_r>:
 80107c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107cc:	688e      	ldr	r6, [r1, #8]
 80107ce:	429e      	cmp	r6, r3
 80107d0:	4682      	mov	sl, r0
 80107d2:	460c      	mov	r4, r1
 80107d4:	4690      	mov	r8, r2
 80107d6:	461f      	mov	r7, r3
 80107d8:	d838      	bhi.n	801084c <__ssputs_r+0x84>
 80107da:	898a      	ldrh	r2, [r1, #12]
 80107dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80107e0:	d032      	beq.n	8010848 <__ssputs_r+0x80>
 80107e2:	6825      	ldr	r5, [r4, #0]
 80107e4:	6909      	ldr	r1, [r1, #16]
 80107e6:	eba5 0901 	sub.w	r9, r5, r1
 80107ea:	6965      	ldr	r5, [r4, #20]
 80107ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107f4:	3301      	adds	r3, #1
 80107f6:	444b      	add	r3, r9
 80107f8:	106d      	asrs	r5, r5, #1
 80107fa:	429d      	cmp	r5, r3
 80107fc:	bf38      	it	cc
 80107fe:	461d      	movcc	r5, r3
 8010800:	0553      	lsls	r3, r2, #21
 8010802:	d531      	bpl.n	8010868 <__ssputs_r+0xa0>
 8010804:	4629      	mov	r1, r5
 8010806:	f7ff ff6b 	bl	80106e0 <_malloc_r>
 801080a:	4606      	mov	r6, r0
 801080c:	b950      	cbnz	r0, 8010824 <__ssputs_r+0x5c>
 801080e:	230c      	movs	r3, #12
 8010810:	f8ca 3000 	str.w	r3, [sl]
 8010814:	89a3      	ldrh	r3, [r4, #12]
 8010816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801081a:	81a3      	strh	r3, [r4, #12]
 801081c:	f04f 30ff 	mov.w	r0, #4294967295
 8010820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010824:	6921      	ldr	r1, [r4, #16]
 8010826:	464a      	mov	r2, r9
 8010828:	f7fc fa6a 	bl	800cd00 <memcpy>
 801082c:	89a3      	ldrh	r3, [r4, #12]
 801082e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010836:	81a3      	strh	r3, [r4, #12]
 8010838:	6126      	str	r6, [r4, #16]
 801083a:	6165      	str	r5, [r4, #20]
 801083c:	444e      	add	r6, r9
 801083e:	eba5 0509 	sub.w	r5, r5, r9
 8010842:	6026      	str	r6, [r4, #0]
 8010844:	60a5      	str	r5, [r4, #8]
 8010846:	463e      	mov	r6, r7
 8010848:	42be      	cmp	r6, r7
 801084a:	d900      	bls.n	801084e <__ssputs_r+0x86>
 801084c:	463e      	mov	r6, r7
 801084e:	6820      	ldr	r0, [r4, #0]
 8010850:	4632      	mov	r2, r6
 8010852:	4641      	mov	r1, r8
 8010854:	f000 f97e 	bl	8010b54 <memmove>
 8010858:	68a3      	ldr	r3, [r4, #8]
 801085a:	1b9b      	subs	r3, r3, r6
 801085c:	60a3      	str	r3, [r4, #8]
 801085e:	6823      	ldr	r3, [r4, #0]
 8010860:	4433      	add	r3, r6
 8010862:	6023      	str	r3, [r4, #0]
 8010864:	2000      	movs	r0, #0
 8010866:	e7db      	b.n	8010820 <__ssputs_r+0x58>
 8010868:	462a      	mov	r2, r5
 801086a:	f000 f999 	bl	8010ba0 <_realloc_r>
 801086e:	4606      	mov	r6, r0
 8010870:	2800      	cmp	r0, #0
 8010872:	d1e1      	bne.n	8010838 <__ssputs_r+0x70>
 8010874:	6921      	ldr	r1, [r4, #16]
 8010876:	4650      	mov	r0, sl
 8010878:	f7ff fec6 	bl	8010608 <_free_r>
 801087c:	e7c7      	b.n	801080e <__ssputs_r+0x46>
	...

08010880 <_svfiprintf_r>:
 8010880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	4698      	mov	r8, r3
 8010886:	898b      	ldrh	r3, [r1, #12]
 8010888:	061b      	lsls	r3, r3, #24
 801088a:	b09d      	sub	sp, #116	; 0x74
 801088c:	4607      	mov	r7, r0
 801088e:	460d      	mov	r5, r1
 8010890:	4614      	mov	r4, r2
 8010892:	d50e      	bpl.n	80108b2 <_svfiprintf_r+0x32>
 8010894:	690b      	ldr	r3, [r1, #16]
 8010896:	b963      	cbnz	r3, 80108b2 <_svfiprintf_r+0x32>
 8010898:	2140      	movs	r1, #64	; 0x40
 801089a:	f7ff ff21 	bl	80106e0 <_malloc_r>
 801089e:	6028      	str	r0, [r5, #0]
 80108a0:	6128      	str	r0, [r5, #16]
 80108a2:	b920      	cbnz	r0, 80108ae <_svfiprintf_r+0x2e>
 80108a4:	230c      	movs	r3, #12
 80108a6:	603b      	str	r3, [r7, #0]
 80108a8:	f04f 30ff 	mov.w	r0, #4294967295
 80108ac:	e0d1      	b.n	8010a52 <_svfiprintf_r+0x1d2>
 80108ae:	2340      	movs	r3, #64	; 0x40
 80108b0:	616b      	str	r3, [r5, #20]
 80108b2:	2300      	movs	r3, #0
 80108b4:	9309      	str	r3, [sp, #36]	; 0x24
 80108b6:	2320      	movs	r3, #32
 80108b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80108c0:	2330      	movs	r3, #48	; 0x30
 80108c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010a6c <_svfiprintf_r+0x1ec>
 80108c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108ca:	f04f 0901 	mov.w	r9, #1
 80108ce:	4623      	mov	r3, r4
 80108d0:	469a      	mov	sl, r3
 80108d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108d6:	b10a      	cbz	r2, 80108dc <_svfiprintf_r+0x5c>
 80108d8:	2a25      	cmp	r2, #37	; 0x25
 80108da:	d1f9      	bne.n	80108d0 <_svfiprintf_r+0x50>
 80108dc:	ebba 0b04 	subs.w	fp, sl, r4
 80108e0:	d00b      	beq.n	80108fa <_svfiprintf_r+0x7a>
 80108e2:	465b      	mov	r3, fp
 80108e4:	4622      	mov	r2, r4
 80108e6:	4629      	mov	r1, r5
 80108e8:	4638      	mov	r0, r7
 80108ea:	f7ff ff6d 	bl	80107c8 <__ssputs_r>
 80108ee:	3001      	adds	r0, #1
 80108f0:	f000 80aa 	beq.w	8010a48 <_svfiprintf_r+0x1c8>
 80108f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108f6:	445a      	add	r2, fp
 80108f8:	9209      	str	r2, [sp, #36]	; 0x24
 80108fa:	f89a 3000 	ldrb.w	r3, [sl]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 80a2 	beq.w	8010a48 <_svfiprintf_r+0x1c8>
 8010904:	2300      	movs	r3, #0
 8010906:	f04f 32ff 	mov.w	r2, #4294967295
 801090a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801090e:	f10a 0a01 	add.w	sl, sl, #1
 8010912:	9304      	str	r3, [sp, #16]
 8010914:	9307      	str	r3, [sp, #28]
 8010916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801091a:	931a      	str	r3, [sp, #104]	; 0x68
 801091c:	4654      	mov	r4, sl
 801091e:	2205      	movs	r2, #5
 8010920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010924:	4851      	ldr	r0, [pc, #324]	; (8010a6c <_svfiprintf_r+0x1ec>)
 8010926:	f7ef fc5b 	bl	80001e0 <memchr>
 801092a:	9a04      	ldr	r2, [sp, #16]
 801092c:	b9d8      	cbnz	r0, 8010966 <_svfiprintf_r+0xe6>
 801092e:	06d0      	lsls	r0, r2, #27
 8010930:	bf44      	itt	mi
 8010932:	2320      	movmi	r3, #32
 8010934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010938:	0711      	lsls	r1, r2, #28
 801093a:	bf44      	itt	mi
 801093c:	232b      	movmi	r3, #43	; 0x2b
 801093e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010942:	f89a 3000 	ldrb.w	r3, [sl]
 8010946:	2b2a      	cmp	r3, #42	; 0x2a
 8010948:	d015      	beq.n	8010976 <_svfiprintf_r+0xf6>
 801094a:	9a07      	ldr	r2, [sp, #28]
 801094c:	4654      	mov	r4, sl
 801094e:	2000      	movs	r0, #0
 8010950:	f04f 0c0a 	mov.w	ip, #10
 8010954:	4621      	mov	r1, r4
 8010956:	f811 3b01 	ldrb.w	r3, [r1], #1
 801095a:	3b30      	subs	r3, #48	; 0x30
 801095c:	2b09      	cmp	r3, #9
 801095e:	d94e      	bls.n	80109fe <_svfiprintf_r+0x17e>
 8010960:	b1b0      	cbz	r0, 8010990 <_svfiprintf_r+0x110>
 8010962:	9207      	str	r2, [sp, #28]
 8010964:	e014      	b.n	8010990 <_svfiprintf_r+0x110>
 8010966:	eba0 0308 	sub.w	r3, r0, r8
 801096a:	fa09 f303 	lsl.w	r3, r9, r3
 801096e:	4313      	orrs	r3, r2
 8010970:	9304      	str	r3, [sp, #16]
 8010972:	46a2      	mov	sl, r4
 8010974:	e7d2      	b.n	801091c <_svfiprintf_r+0x9c>
 8010976:	9b03      	ldr	r3, [sp, #12]
 8010978:	1d19      	adds	r1, r3, #4
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	9103      	str	r1, [sp, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	bfbb      	ittet	lt
 8010982:	425b      	neglt	r3, r3
 8010984:	f042 0202 	orrlt.w	r2, r2, #2
 8010988:	9307      	strge	r3, [sp, #28]
 801098a:	9307      	strlt	r3, [sp, #28]
 801098c:	bfb8      	it	lt
 801098e:	9204      	strlt	r2, [sp, #16]
 8010990:	7823      	ldrb	r3, [r4, #0]
 8010992:	2b2e      	cmp	r3, #46	; 0x2e
 8010994:	d10c      	bne.n	80109b0 <_svfiprintf_r+0x130>
 8010996:	7863      	ldrb	r3, [r4, #1]
 8010998:	2b2a      	cmp	r3, #42	; 0x2a
 801099a:	d135      	bne.n	8010a08 <_svfiprintf_r+0x188>
 801099c:	9b03      	ldr	r3, [sp, #12]
 801099e:	1d1a      	adds	r2, r3, #4
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	9203      	str	r2, [sp, #12]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	bfb8      	it	lt
 80109a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80109ac:	3402      	adds	r4, #2
 80109ae:	9305      	str	r3, [sp, #20]
 80109b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010a7c <_svfiprintf_r+0x1fc>
 80109b4:	7821      	ldrb	r1, [r4, #0]
 80109b6:	2203      	movs	r2, #3
 80109b8:	4650      	mov	r0, sl
 80109ba:	f7ef fc11 	bl	80001e0 <memchr>
 80109be:	b140      	cbz	r0, 80109d2 <_svfiprintf_r+0x152>
 80109c0:	2340      	movs	r3, #64	; 0x40
 80109c2:	eba0 000a 	sub.w	r0, r0, sl
 80109c6:	fa03 f000 	lsl.w	r0, r3, r0
 80109ca:	9b04      	ldr	r3, [sp, #16]
 80109cc:	4303      	orrs	r3, r0
 80109ce:	3401      	adds	r4, #1
 80109d0:	9304      	str	r3, [sp, #16]
 80109d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d6:	4826      	ldr	r0, [pc, #152]	; (8010a70 <_svfiprintf_r+0x1f0>)
 80109d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109dc:	2206      	movs	r2, #6
 80109de:	f7ef fbff 	bl	80001e0 <memchr>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d038      	beq.n	8010a58 <_svfiprintf_r+0x1d8>
 80109e6:	4b23      	ldr	r3, [pc, #140]	; (8010a74 <_svfiprintf_r+0x1f4>)
 80109e8:	bb1b      	cbnz	r3, 8010a32 <_svfiprintf_r+0x1b2>
 80109ea:	9b03      	ldr	r3, [sp, #12]
 80109ec:	3307      	adds	r3, #7
 80109ee:	f023 0307 	bic.w	r3, r3, #7
 80109f2:	3308      	adds	r3, #8
 80109f4:	9303      	str	r3, [sp, #12]
 80109f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f8:	4433      	add	r3, r6
 80109fa:	9309      	str	r3, [sp, #36]	; 0x24
 80109fc:	e767      	b.n	80108ce <_svfiprintf_r+0x4e>
 80109fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a02:	460c      	mov	r4, r1
 8010a04:	2001      	movs	r0, #1
 8010a06:	e7a5      	b.n	8010954 <_svfiprintf_r+0xd4>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	3401      	adds	r4, #1
 8010a0c:	9305      	str	r3, [sp, #20]
 8010a0e:	4619      	mov	r1, r3
 8010a10:	f04f 0c0a 	mov.w	ip, #10
 8010a14:	4620      	mov	r0, r4
 8010a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a1a:	3a30      	subs	r2, #48	; 0x30
 8010a1c:	2a09      	cmp	r2, #9
 8010a1e:	d903      	bls.n	8010a28 <_svfiprintf_r+0x1a8>
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d0c5      	beq.n	80109b0 <_svfiprintf_r+0x130>
 8010a24:	9105      	str	r1, [sp, #20]
 8010a26:	e7c3      	b.n	80109b0 <_svfiprintf_r+0x130>
 8010a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	2301      	movs	r3, #1
 8010a30:	e7f0      	b.n	8010a14 <_svfiprintf_r+0x194>
 8010a32:	ab03      	add	r3, sp, #12
 8010a34:	9300      	str	r3, [sp, #0]
 8010a36:	462a      	mov	r2, r5
 8010a38:	4b0f      	ldr	r3, [pc, #60]	; (8010a78 <_svfiprintf_r+0x1f8>)
 8010a3a:	a904      	add	r1, sp, #16
 8010a3c:	4638      	mov	r0, r7
 8010a3e:	f7fc fa15 	bl	800ce6c <_printf_float>
 8010a42:	1c42      	adds	r2, r0, #1
 8010a44:	4606      	mov	r6, r0
 8010a46:	d1d6      	bne.n	80109f6 <_svfiprintf_r+0x176>
 8010a48:	89ab      	ldrh	r3, [r5, #12]
 8010a4a:	065b      	lsls	r3, r3, #25
 8010a4c:	f53f af2c 	bmi.w	80108a8 <_svfiprintf_r+0x28>
 8010a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a52:	b01d      	add	sp, #116	; 0x74
 8010a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a58:	ab03      	add	r3, sp, #12
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	462a      	mov	r2, r5
 8010a5e:	4b06      	ldr	r3, [pc, #24]	; (8010a78 <_svfiprintf_r+0x1f8>)
 8010a60:	a904      	add	r1, sp, #16
 8010a62:	4638      	mov	r0, r7
 8010a64:	f7fc fca6 	bl	800d3b4 <_printf_i>
 8010a68:	e7eb      	b.n	8010a42 <_svfiprintf_r+0x1c2>
 8010a6a:	bf00      	nop
 8010a6c:	08021d2c 	.word	0x08021d2c
 8010a70:	08021d36 	.word	0x08021d36
 8010a74:	0800ce6d 	.word	0x0800ce6d
 8010a78:	080107c9 	.word	0x080107c9
 8010a7c:	08021d32 	.word	0x08021d32

08010a80 <nan>:
 8010a80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010a88 <nan+0x8>
 8010a84:	4770      	bx	lr
 8010a86:	bf00      	nop
 8010a88:	00000000 	.word	0x00000000
 8010a8c:	7ff80000 	.word	0x7ff80000

08010a90 <_sbrk_r>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	4d06      	ldr	r5, [pc, #24]	; (8010aac <_sbrk_r+0x1c>)
 8010a94:	2300      	movs	r3, #0
 8010a96:	4604      	mov	r4, r0
 8010a98:	4608      	mov	r0, r1
 8010a9a:	602b      	str	r3, [r5, #0]
 8010a9c:	f7f5 f928 	bl	8005cf0 <_sbrk>
 8010aa0:	1c43      	adds	r3, r0, #1
 8010aa2:	d102      	bne.n	8010aaa <_sbrk_r+0x1a>
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	b103      	cbz	r3, 8010aaa <_sbrk_r+0x1a>
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	bd38      	pop	{r3, r4, r5, pc}
 8010aac:	20001478 	.word	0x20001478

08010ab0 <strncmp>:
 8010ab0:	b510      	push	{r4, lr}
 8010ab2:	b17a      	cbz	r2, 8010ad4 <strncmp+0x24>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	3901      	subs	r1, #1
 8010ab8:	1884      	adds	r4, r0, r2
 8010aba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010abe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010ac2:	4290      	cmp	r0, r2
 8010ac4:	d101      	bne.n	8010aca <strncmp+0x1a>
 8010ac6:	42a3      	cmp	r3, r4
 8010ac8:	d101      	bne.n	8010ace <strncmp+0x1e>
 8010aca:	1a80      	subs	r0, r0, r2
 8010acc:	bd10      	pop	{r4, pc}
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d1f3      	bne.n	8010aba <strncmp+0xa>
 8010ad2:	e7fa      	b.n	8010aca <strncmp+0x1a>
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	e7f9      	b.n	8010acc <strncmp+0x1c>

08010ad8 <__ascii_wctomb>:
 8010ad8:	b149      	cbz	r1, 8010aee <__ascii_wctomb+0x16>
 8010ada:	2aff      	cmp	r2, #255	; 0xff
 8010adc:	bf85      	ittet	hi
 8010ade:	238a      	movhi	r3, #138	; 0x8a
 8010ae0:	6003      	strhi	r3, [r0, #0]
 8010ae2:	700a      	strbls	r2, [r1, #0]
 8010ae4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ae8:	bf98      	it	ls
 8010aea:	2001      	movls	r0, #1
 8010aec:	4770      	bx	lr
 8010aee:	4608      	mov	r0, r1
 8010af0:	4770      	bx	lr
	...

08010af4 <__assert_func>:
 8010af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010af6:	4614      	mov	r4, r2
 8010af8:	461a      	mov	r2, r3
 8010afa:	4b09      	ldr	r3, [pc, #36]	; (8010b20 <__assert_func+0x2c>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	4605      	mov	r5, r0
 8010b00:	68d8      	ldr	r0, [r3, #12]
 8010b02:	b14c      	cbz	r4, 8010b18 <__assert_func+0x24>
 8010b04:	4b07      	ldr	r3, [pc, #28]	; (8010b24 <__assert_func+0x30>)
 8010b06:	9100      	str	r1, [sp, #0]
 8010b08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b0c:	4906      	ldr	r1, [pc, #24]	; (8010b28 <__assert_func+0x34>)
 8010b0e:	462b      	mov	r3, r5
 8010b10:	f000 f80e 	bl	8010b30 <fiprintf>
 8010b14:	f000 fa8c 	bl	8011030 <abort>
 8010b18:	4b04      	ldr	r3, [pc, #16]	; (8010b2c <__assert_func+0x38>)
 8010b1a:	461c      	mov	r4, r3
 8010b1c:	e7f3      	b.n	8010b06 <__assert_func+0x12>
 8010b1e:	bf00      	nop
 8010b20:	2000007c 	.word	0x2000007c
 8010b24:	08021d3d 	.word	0x08021d3d
 8010b28:	08021d4a 	.word	0x08021d4a
 8010b2c:	08021d78 	.word	0x08021d78

08010b30 <fiprintf>:
 8010b30:	b40e      	push	{r1, r2, r3}
 8010b32:	b503      	push	{r0, r1, lr}
 8010b34:	4601      	mov	r1, r0
 8010b36:	ab03      	add	r3, sp, #12
 8010b38:	4805      	ldr	r0, [pc, #20]	; (8010b50 <fiprintf+0x20>)
 8010b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b3e:	6800      	ldr	r0, [r0, #0]
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	f000 f885 	bl	8010c50 <_vfiprintf_r>
 8010b46:	b002      	add	sp, #8
 8010b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b4c:	b003      	add	sp, #12
 8010b4e:	4770      	bx	lr
 8010b50:	2000007c 	.word	0x2000007c

08010b54 <memmove>:
 8010b54:	4288      	cmp	r0, r1
 8010b56:	b510      	push	{r4, lr}
 8010b58:	eb01 0402 	add.w	r4, r1, r2
 8010b5c:	d902      	bls.n	8010b64 <memmove+0x10>
 8010b5e:	4284      	cmp	r4, r0
 8010b60:	4623      	mov	r3, r4
 8010b62:	d807      	bhi.n	8010b74 <memmove+0x20>
 8010b64:	1e43      	subs	r3, r0, #1
 8010b66:	42a1      	cmp	r1, r4
 8010b68:	d008      	beq.n	8010b7c <memmove+0x28>
 8010b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b72:	e7f8      	b.n	8010b66 <memmove+0x12>
 8010b74:	4402      	add	r2, r0
 8010b76:	4601      	mov	r1, r0
 8010b78:	428a      	cmp	r2, r1
 8010b7a:	d100      	bne.n	8010b7e <memmove+0x2a>
 8010b7c:	bd10      	pop	{r4, pc}
 8010b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b86:	e7f7      	b.n	8010b78 <memmove+0x24>

08010b88 <__malloc_lock>:
 8010b88:	4801      	ldr	r0, [pc, #4]	; (8010b90 <__malloc_lock+0x8>)
 8010b8a:	f000 bc11 	b.w	80113b0 <__retarget_lock_acquire_recursive>
 8010b8e:	bf00      	nop
 8010b90:	2000147c 	.word	0x2000147c

08010b94 <__malloc_unlock>:
 8010b94:	4801      	ldr	r0, [pc, #4]	; (8010b9c <__malloc_unlock+0x8>)
 8010b96:	f000 bc0c 	b.w	80113b2 <__retarget_lock_release_recursive>
 8010b9a:	bf00      	nop
 8010b9c:	2000147c 	.word	0x2000147c

08010ba0 <_realloc_r>:
 8010ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba4:	4680      	mov	r8, r0
 8010ba6:	4614      	mov	r4, r2
 8010ba8:	460e      	mov	r6, r1
 8010baa:	b921      	cbnz	r1, 8010bb6 <_realloc_r+0x16>
 8010bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	f7ff bd95 	b.w	80106e0 <_malloc_r>
 8010bb6:	b92a      	cbnz	r2, 8010bc4 <_realloc_r+0x24>
 8010bb8:	f7ff fd26 	bl	8010608 <_free_r>
 8010bbc:	4625      	mov	r5, r4
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc4:	f000 fc5c 	bl	8011480 <_malloc_usable_size_r>
 8010bc8:	4284      	cmp	r4, r0
 8010bca:	4607      	mov	r7, r0
 8010bcc:	d802      	bhi.n	8010bd4 <_realloc_r+0x34>
 8010bce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010bd2:	d812      	bhi.n	8010bfa <_realloc_r+0x5a>
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	4640      	mov	r0, r8
 8010bd8:	f7ff fd82 	bl	80106e0 <_malloc_r>
 8010bdc:	4605      	mov	r5, r0
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d0ed      	beq.n	8010bbe <_realloc_r+0x1e>
 8010be2:	42bc      	cmp	r4, r7
 8010be4:	4622      	mov	r2, r4
 8010be6:	4631      	mov	r1, r6
 8010be8:	bf28      	it	cs
 8010bea:	463a      	movcs	r2, r7
 8010bec:	f7fc f888 	bl	800cd00 <memcpy>
 8010bf0:	4631      	mov	r1, r6
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	f7ff fd08 	bl	8010608 <_free_r>
 8010bf8:	e7e1      	b.n	8010bbe <_realloc_r+0x1e>
 8010bfa:	4635      	mov	r5, r6
 8010bfc:	e7df      	b.n	8010bbe <_realloc_r+0x1e>

08010bfe <__sfputc_r>:
 8010bfe:	6893      	ldr	r3, [r2, #8]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	b410      	push	{r4}
 8010c06:	6093      	str	r3, [r2, #8]
 8010c08:	da08      	bge.n	8010c1c <__sfputc_r+0x1e>
 8010c0a:	6994      	ldr	r4, [r2, #24]
 8010c0c:	42a3      	cmp	r3, r4
 8010c0e:	db01      	blt.n	8010c14 <__sfputc_r+0x16>
 8010c10:	290a      	cmp	r1, #10
 8010c12:	d103      	bne.n	8010c1c <__sfputc_r+0x1e>
 8010c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c18:	f000 b94a 	b.w	8010eb0 <__swbuf_r>
 8010c1c:	6813      	ldr	r3, [r2, #0]
 8010c1e:	1c58      	adds	r0, r3, #1
 8010c20:	6010      	str	r0, [r2, #0]
 8010c22:	7019      	strb	r1, [r3, #0]
 8010c24:	4608      	mov	r0, r1
 8010c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c2a:	4770      	bx	lr

08010c2c <__sfputs_r>:
 8010c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2e:	4606      	mov	r6, r0
 8010c30:	460f      	mov	r7, r1
 8010c32:	4614      	mov	r4, r2
 8010c34:	18d5      	adds	r5, r2, r3
 8010c36:	42ac      	cmp	r4, r5
 8010c38:	d101      	bne.n	8010c3e <__sfputs_r+0x12>
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	e007      	b.n	8010c4e <__sfputs_r+0x22>
 8010c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c42:	463a      	mov	r2, r7
 8010c44:	4630      	mov	r0, r6
 8010c46:	f7ff ffda 	bl	8010bfe <__sfputc_r>
 8010c4a:	1c43      	adds	r3, r0, #1
 8010c4c:	d1f3      	bne.n	8010c36 <__sfputs_r+0xa>
 8010c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c50 <_vfiprintf_r>:
 8010c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c54:	460d      	mov	r5, r1
 8010c56:	b09d      	sub	sp, #116	; 0x74
 8010c58:	4614      	mov	r4, r2
 8010c5a:	4698      	mov	r8, r3
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	b118      	cbz	r0, 8010c68 <_vfiprintf_r+0x18>
 8010c60:	6983      	ldr	r3, [r0, #24]
 8010c62:	b90b      	cbnz	r3, 8010c68 <_vfiprintf_r+0x18>
 8010c64:	f000 fb06 	bl	8011274 <__sinit>
 8010c68:	4b89      	ldr	r3, [pc, #548]	; (8010e90 <_vfiprintf_r+0x240>)
 8010c6a:	429d      	cmp	r5, r3
 8010c6c:	d11b      	bne.n	8010ca6 <_vfiprintf_r+0x56>
 8010c6e:	6875      	ldr	r5, [r6, #4]
 8010c70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c72:	07d9      	lsls	r1, r3, #31
 8010c74:	d405      	bmi.n	8010c82 <_vfiprintf_r+0x32>
 8010c76:	89ab      	ldrh	r3, [r5, #12]
 8010c78:	059a      	lsls	r2, r3, #22
 8010c7a:	d402      	bmi.n	8010c82 <_vfiprintf_r+0x32>
 8010c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c7e:	f000 fb97 	bl	80113b0 <__retarget_lock_acquire_recursive>
 8010c82:	89ab      	ldrh	r3, [r5, #12]
 8010c84:	071b      	lsls	r3, r3, #28
 8010c86:	d501      	bpl.n	8010c8c <_vfiprintf_r+0x3c>
 8010c88:	692b      	ldr	r3, [r5, #16]
 8010c8a:	b9eb      	cbnz	r3, 8010cc8 <_vfiprintf_r+0x78>
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f000 f960 	bl	8010f54 <__swsetup_r>
 8010c94:	b1c0      	cbz	r0, 8010cc8 <_vfiprintf_r+0x78>
 8010c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c98:	07dc      	lsls	r4, r3, #31
 8010c9a:	d50e      	bpl.n	8010cba <_vfiprintf_r+0x6a>
 8010c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca0:	b01d      	add	sp, #116	; 0x74
 8010ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca6:	4b7b      	ldr	r3, [pc, #492]	; (8010e94 <_vfiprintf_r+0x244>)
 8010ca8:	429d      	cmp	r5, r3
 8010caa:	d101      	bne.n	8010cb0 <_vfiprintf_r+0x60>
 8010cac:	68b5      	ldr	r5, [r6, #8]
 8010cae:	e7df      	b.n	8010c70 <_vfiprintf_r+0x20>
 8010cb0:	4b79      	ldr	r3, [pc, #484]	; (8010e98 <_vfiprintf_r+0x248>)
 8010cb2:	429d      	cmp	r5, r3
 8010cb4:	bf08      	it	eq
 8010cb6:	68f5      	ldreq	r5, [r6, #12]
 8010cb8:	e7da      	b.n	8010c70 <_vfiprintf_r+0x20>
 8010cba:	89ab      	ldrh	r3, [r5, #12]
 8010cbc:	0598      	lsls	r0, r3, #22
 8010cbe:	d4ed      	bmi.n	8010c9c <_vfiprintf_r+0x4c>
 8010cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cc2:	f000 fb76 	bl	80113b2 <__retarget_lock_release_recursive>
 8010cc6:	e7e9      	b.n	8010c9c <_vfiprintf_r+0x4c>
 8010cc8:	2300      	movs	r3, #0
 8010cca:	9309      	str	r3, [sp, #36]	; 0x24
 8010ccc:	2320      	movs	r3, #32
 8010cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cd6:	2330      	movs	r3, #48	; 0x30
 8010cd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e9c <_vfiprintf_r+0x24c>
 8010cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ce0:	f04f 0901 	mov.w	r9, #1
 8010ce4:	4623      	mov	r3, r4
 8010ce6:	469a      	mov	sl, r3
 8010ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cec:	b10a      	cbz	r2, 8010cf2 <_vfiprintf_r+0xa2>
 8010cee:	2a25      	cmp	r2, #37	; 0x25
 8010cf0:	d1f9      	bne.n	8010ce6 <_vfiprintf_r+0x96>
 8010cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8010cf6:	d00b      	beq.n	8010d10 <_vfiprintf_r+0xc0>
 8010cf8:	465b      	mov	r3, fp
 8010cfa:	4622      	mov	r2, r4
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f7ff ff94 	bl	8010c2c <__sfputs_r>
 8010d04:	3001      	adds	r0, #1
 8010d06:	f000 80aa 	beq.w	8010e5e <_vfiprintf_r+0x20e>
 8010d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d0c:	445a      	add	r2, fp
 8010d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d10:	f89a 3000 	ldrb.w	r3, [sl]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f000 80a2 	beq.w	8010e5e <_vfiprintf_r+0x20e>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d24:	f10a 0a01 	add.w	sl, sl, #1
 8010d28:	9304      	str	r3, [sp, #16]
 8010d2a:	9307      	str	r3, [sp, #28]
 8010d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d30:	931a      	str	r3, [sp, #104]	; 0x68
 8010d32:	4654      	mov	r4, sl
 8010d34:	2205      	movs	r2, #5
 8010d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d3a:	4858      	ldr	r0, [pc, #352]	; (8010e9c <_vfiprintf_r+0x24c>)
 8010d3c:	f7ef fa50 	bl	80001e0 <memchr>
 8010d40:	9a04      	ldr	r2, [sp, #16]
 8010d42:	b9d8      	cbnz	r0, 8010d7c <_vfiprintf_r+0x12c>
 8010d44:	06d1      	lsls	r1, r2, #27
 8010d46:	bf44      	itt	mi
 8010d48:	2320      	movmi	r3, #32
 8010d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d4e:	0713      	lsls	r3, r2, #28
 8010d50:	bf44      	itt	mi
 8010d52:	232b      	movmi	r3, #43	; 0x2b
 8010d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d58:	f89a 3000 	ldrb.w	r3, [sl]
 8010d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d5e:	d015      	beq.n	8010d8c <_vfiprintf_r+0x13c>
 8010d60:	9a07      	ldr	r2, [sp, #28]
 8010d62:	4654      	mov	r4, sl
 8010d64:	2000      	movs	r0, #0
 8010d66:	f04f 0c0a 	mov.w	ip, #10
 8010d6a:	4621      	mov	r1, r4
 8010d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d70:	3b30      	subs	r3, #48	; 0x30
 8010d72:	2b09      	cmp	r3, #9
 8010d74:	d94e      	bls.n	8010e14 <_vfiprintf_r+0x1c4>
 8010d76:	b1b0      	cbz	r0, 8010da6 <_vfiprintf_r+0x156>
 8010d78:	9207      	str	r2, [sp, #28]
 8010d7a:	e014      	b.n	8010da6 <_vfiprintf_r+0x156>
 8010d7c:	eba0 0308 	sub.w	r3, r0, r8
 8010d80:	fa09 f303 	lsl.w	r3, r9, r3
 8010d84:	4313      	orrs	r3, r2
 8010d86:	9304      	str	r3, [sp, #16]
 8010d88:	46a2      	mov	sl, r4
 8010d8a:	e7d2      	b.n	8010d32 <_vfiprintf_r+0xe2>
 8010d8c:	9b03      	ldr	r3, [sp, #12]
 8010d8e:	1d19      	adds	r1, r3, #4
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	9103      	str	r1, [sp, #12]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	bfbb      	ittet	lt
 8010d98:	425b      	neglt	r3, r3
 8010d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8010d9e:	9307      	strge	r3, [sp, #28]
 8010da0:	9307      	strlt	r3, [sp, #28]
 8010da2:	bfb8      	it	lt
 8010da4:	9204      	strlt	r2, [sp, #16]
 8010da6:	7823      	ldrb	r3, [r4, #0]
 8010da8:	2b2e      	cmp	r3, #46	; 0x2e
 8010daa:	d10c      	bne.n	8010dc6 <_vfiprintf_r+0x176>
 8010dac:	7863      	ldrb	r3, [r4, #1]
 8010dae:	2b2a      	cmp	r3, #42	; 0x2a
 8010db0:	d135      	bne.n	8010e1e <_vfiprintf_r+0x1ce>
 8010db2:	9b03      	ldr	r3, [sp, #12]
 8010db4:	1d1a      	adds	r2, r3, #4
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	9203      	str	r2, [sp, #12]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	bfb8      	it	lt
 8010dbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dc2:	3402      	adds	r4, #2
 8010dc4:	9305      	str	r3, [sp, #20]
 8010dc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010eac <_vfiprintf_r+0x25c>
 8010dca:	7821      	ldrb	r1, [r4, #0]
 8010dcc:	2203      	movs	r2, #3
 8010dce:	4650      	mov	r0, sl
 8010dd0:	f7ef fa06 	bl	80001e0 <memchr>
 8010dd4:	b140      	cbz	r0, 8010de8 <_vfiprintf_r+0x198>
 8010dd6:	2340      	movs	r3, #64	; 0x40
 8010dd8:	eba0 000a 	sub.w	r0, r0, sl
 8010ddc:	fa03 f000 	lsl.w	r0, r3, r0
 8010de0:	9b04      	ldr	r3, [sp, #16]
 8010de2:	4303      	orrs	r3, r0
 8010de4:	3401      	adds	r4, #1
 8010de6:	9304      	str	r3, [sp, #16]
 8010de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dec:	482c      	ldr	r0, [pc, #176]	; (8010ea0 <_vfiprintf_r+0x250>)
 8010dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010df2:	2206      	movs	r2, #6
 8010df4:	f7ef f9f4 	bl	80001e0 <memchr>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d03f      	beq.n	8010e7c <_vfiprintf_r+0x22c>
 8010dfc:	4b29      	ldr	r3, [pc, #164]	; (8010ea4 <_vfiprintf_r+0x254>)
 8010dfe:	bb1b      	cbnz	r3, 8010e48 <_vfiprintf_r+0x1f8>
 8010e00:	9b03      	ldr	r3, [sp, #12]
 8010e02:	3307      	adds	r3, #7
 8010e04:	f023 0307 	bic.w	r3, r3, #7
 8010e08:	3308      	adds	r3, #8
 8010e0a:	9303      	str	r3, [sp, #12]
 8010e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e0e:	443b      	add	r3, r7
 8010e10:	9309      	str	r3, [sp, #36]	; 0x24
 8010e12:	e767      	b.n	8010ce4 <_vfiprintf_r+0x94>
 8010e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e18:	460c      	mov	r4, r1
 8010e1a:	2001      	movs	r0, #1
 8010e1c:	e7a5      	b.n	8010d6a <_vfiprintf_r+0x11a>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	3401      	adds	r4, #1
 8010e22:	9305      	str	r3, [sp, #20]
 8010e24:	4619      	mov	r1, r3
 8010e26:	f04f 0c0a 	mov.w	ip, #10
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e30:	3a30      	subs	r2, #48	; 0x30
 8010e32:	2a09      	cmp	r2, #9
 8010e34:	d903      	bls.n	8010e3e <_vfiprintf_r+0x1ee>
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d0c5      	beq.n	8010dc6 <_vfiprintf_r+0x176>
 8010e3a:	9105      	str	r1, [sp, #20]
 8010e3c:	e7c3      	b.n	8010dc6 <_vfiprintf_r+0x176>
 8010e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e42:	4604      	mov	r4, r0
 8010e44:	2301      	movs	r3, #1
 8010e46:	e7f0      	b.n	8010e2a <_vfiprintf_r+0x1da>
 8010e48:	ab03      	add	r3, sp, #12
 8010e4a:	9300      	str	r3, [sp, #0]
 8010e4c:	462a      	mov	r2, r5
 8010e4e:	4b16      	ldr	r3, [pc, #88]	; (8010ea8 <_vfiprintf_r+0x258>)
 8010e50:	a904      	add	r1, sp, #16
 8010e52:	4630      	mov	r0, r6
 8010e54:	f7fc f80a 	bl	800ce6c <_printf_float>
 8010e58:	4607      	mov	r7, r0
 8010e5a:	1c78      	adds	r0, r7, #1
 8010e5c:	d1d6      	bne.n	8010e0c <_vfiprintf_r+0x1bc>
 8010e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e60:	07d9      	lsls	r1, r3, #31
 8010e62:	d405      	bmi.n	8010e70 <_vfiprintf_r+0x220>
 8010e64:	89ab      	ldrh	r3, [r5, #12]
 8010e66:	059a      	lsls	r2, r3, #22
 8010e68:	d402      	bmi.n	8010e70 <_vfiprintf_r+0x220>
 8010e6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e6c:	f000 faa1 	bl	80113b2 <__retarget_lock_release_recursive>
 8010e70:	89ab      	ldrh	r3, [r5, #12]
 8010e72:	065b      	lsls	r3, r3, #25
 8010e74:	f53f af12 	bmi.w	8010c9c <_vfiprintf_r+0x4c>
 8010e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e7a:	e711      	b.n	8010ca0 <_vfiprintf_r+0x50>
 8010e7c:	ab03      	add	r3, sp, #12
 8010e7e:	9300      	str	r3, [sp, #0]
 8010e80:	462a      	mov	r2, r5
 8010e82:	4b09      	ldr	r3, [pc, #36]	; (8010ea8 <_vfiprintf_r+0x258>)
 8010e84:	a904      	add	r1, sp, #16
 8010e86:	4630      	mov	r0, r6
 8010e88:	f7fc fa94 	bl	800d3b4 <_printf_i>
 8010e8c:	e7e4      	b.n	8010e58 <_vfiprintf_r+0x208>
 8010e8e:	bf00      	nop
 8010e90:	08021d9c 	.word	0x08021d9c
 8010e94:	08021dbc 	.word	0x08021dbc
 8010e98:	08021d7c 	.word	0x08021d7c
 8010e9c:	08021d2c 	.word	0x08021d2c
 8010ea0:	08021d36 	.word	0x08021d36
 8010ea4:	0800ce6d 	.word	0x0800ce6d
 8010ea8:	08010c2d 	.word	0x08010c2d
 8010eac:	08021d32 	.word	0x08021d32

08010eb0 <__swbuf_r>:
 8010eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb2:	460e      	mov	r6, r1
 8010eb4:	4614      	mov	r4, r2
 8010eb6:	4605      	mov	r5, r0
 8010eb8:	b118      	cbz	r0, 8010ec2 <__swbuf_r+0x12>
 8010eba:	6983      	ldr	r3, [r0, #24]
 8010ebc:	b90b      	cbnz	r3, 8010ec2 <__swbuf_r+0x12>
 8010ebe:	f000 f9d9 	bl	8011274 <__sinit>
 8010ec2:	4b21      	ldr	r3, [pc, #132]	; (8010f48 <__swbuf_r+0x98>)
 8010ec4:	429c      	cmp	r4, r3
 8010ec6:	d12b      	bne.n	8010f20 <__swbuf_r+0x70>
 8010ec8:	686c      	ldr	r4, [r5, #4]
 8010eca:	69a3      	ldr	r3, [r4, #24]
 8010ecc:	60a3      	str	r3, [r4, #8]
 8010ece:	89a3      	ldrh	r3, [r4, #12]
 8010ed0:	071a      	lsls	r2, r3, #28
 8010ed2:	d52f      	bpl.n	8010f34 <__swbuf_r+0x84>
 8010ed4:	6923      	ldr	r3, [r4, #16]
 8010ed6:	b36b      	cbz	r3, 8010f34 <__swbuf_r+0x84>
 8010ed8:	6923      	ldr	r3, [r4, #16]
 8010eda:	6820      	ldr	r0, [r4, #0]
 8010edc:	1ac0      	subs	r0, r0, r3
 8010ede:	6963      	ldr	r3, [r4, #20]
 8010ee0:	b2f6      	uxtb	r6, r6
 8010ee2:	4283      	cmp	r3, r0
 8010ee4:	4637      	mov	r7, r6
 8010ee6:	dc04      	bgt.n	8010ef2 <__swbuf_r+0x42>
 8010ee8:	4621      	mov	r1, r4
 8010eea:	4628      	mov	r0, r5
 8010eec:	f000 f92e 	bl	801114c <_fflush_r>
 8010ef0:	bb30      	cbnz	r0, 8010f40 <__swbuf_r+0x90>
 8010ef2:	68a3      	ldr	r3, [r4, #8]
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	60a3      	str	r3, [r4, #8]
 8010ef8:	6823      	ldr	r3, [r4, #0]
 8010efa:	1c5a      	adds	r2, r3, #1
 8010efc:	6022      	str	r2, [r4, #0]
 8010efe:	701e      	strb	r6, [r3, #0]
 8010f00:	6963      	ldr	r3, [r4, #20]
 8010f02:	3001      	adds	r0, #1
 8010f04:	4283      	cmp	r3, r0
 8010f06:	d004      	beq.n	8010f12 <__swbuf_r+0x62>
 8010f08:	89a3      	ldrh	r3, [r4, #12]
 8010f0a:	07db      	lsls	r3, r3, #31
 8010f0c:	d506      	bpl.n	8010f1c <__swbuf_r+0x6c>
 8010f0e:	2e0a      	cmp	r6, #10
 8010f10:	d104      	bne.n	8010f1c <__swbuf_r+0x6c>
 8010f12:	4621      	mov	r1, r4
 8010f14:	4628      	mov	r0, r5
 8010f16:	f000 f919 	bl	801114c <_fflush_r>
 8010f1a:	b988      	cbnz	r0, 8010f40 <__swbuf_r+0x90>
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f20:	4b0a      	ldr	r3, [pc, #40]	; (8010f4c <__swbuf_r+0x9c>)
 8010f22:	429c      	cmp	r4, r3
 8010f24:	d101      	bne.n	8010f2a <__swbuf_r+0x7a>
 8010f26:	68ac      	ldr	r4, [r5, #8]
 8010f28:	e7cf      	b.n	8010eca <__swbuf_r+0x1a>
 8010f2a:	4b09      	ldr	r3, [pc, #36]	; (8010f50 <__swbuf_r+0xa0>)
 8010f2c:	429c      	cmp	r4, r3
 8010f2e:	bf08      	it	eq
 8010f30:	68ec      	ldreq	r4, [r5, #12]
 8010f32:	e7ca      	b.n	8010eca <__swbuf_r+0x1a>
 8010f34:	4621      	mov	r1, r4
 8010f36:	4628      	mov	r0, r5
 8010f38:	f000 f80c 	bl	8010f54 <__swsetup_r>
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	d0cb      	beq.n	8010ed8 <__swbuf_r+0x28>
 8010f40:	f04f 37ff 	mov.w	r7, #4294967295
 8010f44:	e7ea      	b.n	8010f1c <__swbuf_r+0x6c>
 8010f46:	bf00      	nop
 8010f48:	08021d9c 	.word	0x08021d9c
 8010f4c:	08021dbc 	.word	0x08021dbc
 8010f50:	08021d7c 	.word	0x08021d7c

08010f54 <__swsetup_r>:
 8010f54:	4b32      	ldr	r3, [pc, #200]	; (8011020 <__swsetup_r+0xcc>)
 8010f56:	b570      	push	{r4, r5, r6, lr}
 8010f58:	681d      	ldr	r5, [r3, #0]
 8010f5a:	4606      	mov	r6, r0
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	b125      	cbz	r5, 8010f6a <__swsetup_r+0x16>
 8010f60:	69ab      	ldr	r3, [r5, #24]
 8010f62:	b913      	cbnz	r3, 8010f6a <__swsetup_r+0x16>
 8010f64:	4628      	mov	r0, r5
 8010f66:	f000 f985 	bl	8011274 <__sinit>
 8010f6a:	4b2e      	ldr	r3, [pc, #184]	; (8011024 <__swsetup_r+0xd0>)
 8010f6c:	429c      	cmp	r4, r3
 8010f6e:	d10f      	bne.n	8010f90 <__swsetup_r+0x3c>
 8010f70:	686c      	ldr	r4, [r5, #4]
 8010f72:	89a3      	ldrh	r3, [r4, #12]
 8010f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f78:	0719      	lsls	r1, r3, #28
 8010f7a:	d42c      	bmi.n	8010fd6 <__swsetup_r+0x82>
 8010f7c:	06dd      	lsls	r5, r3, #27
 8010f7e:	d411      	bmi.n	8010fa4 <__swsetup_r+0x50>
 8010f80:	2309      	movs	r3, #9
 8010f82:	6033      	str	r3, [r6, #0]
 8010f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f88:	81a3      	strh	r3, [r4, #12]
 8010f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8e:	e03e      	b.n	801100e <__swsetup_r+0xba>
 8010f90:	4b25      	ldr	r3, [pc, #148]	; (8011028 <__swsetup_r+0xd4>)
 8010f92:	429c      	cmp	r4, r3
 8010f94:	d101      	bne.n	8010f9a <__swsetup_r+0x46>
 8010f96:	68ac      	ldr	r4, [r5, #8]
 8010f98:	e7eb      	b.n	8010f72 <__swsetup_r+0x1e>
 8010f9a:	4b24      	ldr	r3, [pc, #144]	; (801102c <__swsetup_r+0xd8>)
 8010f9c:	429c      	cmp	r4, r3
 8010f9e:	bf08      	it	eq
 8010fa0:	68ec      	ldreq	r4, [r5, #12]
 8010fa2:	e7e6      	b.n	8010f72 <__swsetup_r+0x1e>
 8010fa4:	0758      	lsls	r0, r3, #29
 8010fa6:	d512      	bpl.n	8010fce <__swsetup_r+0x7a>
 8010fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010faa:	b141      	cbz	r1, 8010fbe <__swsetup_r+0x6a>
 8010fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fb0:	4299      	cmp	r1, r3
 8010fb2:	d002      	beq.n	8010fba <__swsetup_r+0x66>
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	f7ff fb27 	bl	8010608 <_free_r>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8010fbe:	89a3      	ldrh	r3, [r4, #12]
 8010fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fc4:	81a3      	strh	r3, [r4, #12]
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	6063      	str	r3, [r4, #4]
 8010fca:	6923      	ldr	r3, [r4, #16]
 8010fcc:	6023      	str	r3, [r4, #0]
 8010fce:	89a3      	ldrh	r3, [r4, #12]
 8010fd0:	f043 0308 	orr.w	r3, r3, #8
 8010fd4:	81a3      	strh	r3, [r4, #12]
 8010fd6:	6923      	ldr	r3, [r4, #16]
 8010fd8:	b94b      	cbnz	r3, 8010fee <__swsetup_r+0x9a>
 8010fda:	89a3      	ldrh	r3, [r4, #12]
 8010fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fe4:	d003      	beq.n	8010fee <__swsetup_r+0x9a>
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f000 fa09 	bl	8011400 <__smakebuf_r>
 8010fee:	89a0      	ldrh	r0, [r4, #12]
 8010ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ff4:	f010 0301 	ands.w	r3, r0, #1
 8010ff8:	d00a      	beq.n	8011010 <__swsetup_r+0xbc>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	60a3      	str	r3, [r4, #8]
 8010ffe:	6963      	ldr	r3, [r4, #20]
 8011000:	425b      	negs	r3, r3
 8011002:	61a3      	str	r3, [r4, #24]
 8011004:	6923      	ldr	r3, [r4, #16]
 8011006:	b943      	cbnz	r3, 801101a <__swsetup_r+0xc6>
 8011008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801100c:	d1ba      	bne.n	8010f84 <__swsetup_r+0x30>
 801100e:	bd70      	pop	{r4, r5, r6, pc}
 8011010:	0781      	lsls	r1, r0, #30
 8011012:	bf58      	it	pl
 8011014:	6963      	ldrpl	r3, [r4, #20]
 8011016:	60a3      	str	r3, [r4, #8]
 8011018:	e7f4      	b.n	8011004 <__swsetup_r+0xb0>
 801101a:	2000      	movs	r0, #0
 801101c:	e7f7      	b.n	801100e <__swsetup_r+0xba>
 801101e:	bf00      	nop
 8011020:	2000007c 	.word	0x2000007c
 8011024:	08021d9c 	.word	0x08021d9c
 8011028:	08021dbc 	.word	0x08021dbc
 801102c:	08021d7c 	.word	0x08021d7c

08011030 <abort>:
 8011030:	b508      	push	{r3, lr}
 8011032:	2006      	movs	r0, #6
 8011034:	f000 fa54 	bl	80114e0 <raise>
 8011038:	2001      	movs	r0, #1
 801103a:	f7f4 fde1 	bl	8005c00 <_exit>
	...

08011040 <__sflush_r>:
 8011040:	898a      	ldrh	r2, [r1, #12]
 8011042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011046:	4605      	mov	r5, r0
 8011048:	0710      	lsls	r0, r2, #28
 801104a:	460c      	mov	r4, r1
 801104c:	d458      	bmi.n	8011100 <__sflush_r+0xc0>
 801104e:	684b      	ldr	r3, [r1, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	dc05      	bgt.n	8011060 <__sflush_r+0x20>
 8011054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011056:	2b00      	cmp	r3, #0
 8011058:	dc02      	bgt.n	8011060 <__sflush_r+0x20>
 801105a:	2000      	movs	r0, #0
 801105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011062:	2e00      	cmp	r6, #0
 8011064:	d0f9      	beq.n	801105a <__sflush_r+0x1a>
 8011066:	2300      	movs	r3, #0
 8011068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801106c:	682f      	ldr	r7, [r5, #0]
 801106e:	602b      	str	r3, [r5, #0]
 8011070:	d032      	beq.n	80110d8 <__sflush_r+0x98>
 8011072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011074:	89a3      	ldrh	r3, [r4, #12]
 8011076:	075a      	lsls	r2, r3, #29
 8011078:	d505      	bpl.n	8011086 <__sflush_r+0x46>
 801107a:	6863      	ldr	r3, [r4, #4]
 801107c:	1ac0      	subs	r0, r0, r3
 801107e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011080:	b10b      	cbz	r3, 8011086 <__sflush_r+0x46>
 8011082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011084:	1ac0      	subs	r0, r0, r3
 8011086:	2300      	movs	r3, #0
 8011088:	4602      	mov	r2, r0
 801108a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801108c:	6a21      	ldr	r1, [r4, #32]
 801108e:	4628      	mov	r0, r5
 8011090:	47b0      	blx	r6
 8011092:	1c43      	adds	r3, r0, #1
 8011094:	89a3      	ldrh	r3, [r4, #12]
 8011096:	d106      	bne.n	80110a6 <__sflush_r+0x66>
 8011098:	6829      	ldr	r1, [r5, #0]
 801109a:	291d      	cmp	r1, #29
 801109c:	d82c      	bhi.n	80110f8 <__sflush_r+0xb8>
 801109e:	4a2a      	ldr	r2, [pc, #168]	; (8011148 <__sflush_r+0x108>)
 80110a0:	40ca      	lsrs	r2, r1
 80110a2:	07d6      	lsls	r6, r2, #31
 80110a4:	d528      	bpl.n	80110f8 <__sflush_r+0xb8>
 80110a6:	2200      	movs	r2, #0
 80110a8:	6062      	str	r2, [r4, #4]
 80110aa:	04d9      	lsls	r1, r3, #19
 80110ac:	6922      	ldr	r2, [r4, #16]
 80110ae:	6022      	str	r2, [r4, #0]
 80110b0:	d504      	bpl.n	80110bc <__sflush_r+0x7c>
 80110b2:	1c42      	adds	r2, r0, #1
 80110b4:	d101      	bne.n	80110ba <__sflush_r+0x7a>
 80110b6:	682b      	ldr	r3, [r5, #0]
 80110b8:	b903      	cbnz	r3, 80110bc <__sflush_r+0x7c>
 80110ba:	6560      	str	r0, [r4, #84]	; 0x54
 80110bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110be:	602f      	str	r7, [r5, #0]
 80110c0:	2900      	cmp	r1, #0
 80110c2:	d0ca      	beq.n	801105a <__sflush_r+0x1a>
 80110c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110c8:	4299      	cmp	r1, r3
 80110ca:	d002      	beq.n	80110d2 <__sflush_r+0x92>
 80110cc:	4628      	mov	r0, r5
 80110ce:	f7ff fa9b 	bl	8010608 <_free_r>
 80110d2:	2000      	movs	r0, #0
 80110d4:	6360      	str	r0, [r4, #52]	; 0x34
 80110d6:	e7c1      	b.n	801105c <__sflush_r+0x1c>
 80110d8:	6a21      	ldr	r1, [r4, #32]
 80110da:	2301      	movs	r3, #1
 80110dc:	4628      	mov	r0, r5
 80110de:	47b0      	blx	r6
 80110e0:	1c41      	adds	r1, r0, #1
 80110e2:	d1c7      	bne.n	8011074 <__sflush_r+0x34>
 80110e4:	682b      	ldr	r3, [r5, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d0c4      	beq.n	8011074 <__sflush_r+0x34>
 80110ea:	2b1d      	cmp	r3, #29
 80110ec:	d001      	beq.n	80110f2 <__sflush_r+0xb2>
 80110ee:	2b16      	cmp	r3, #22
 80110f0:	d101      	bne.n	80110f6 <__sflush_r+0xb6>
 80110f2:	602f      	str	r7, [r5, #0]
 80110f4:	e7b1      	b.n	801105a <__sflush_r+0x1a>
 80110f6:	89a3      	ldrh	r3, [r4, #12]
 80110f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110fc:	81a3      	strh	r3, [r4, #12]
 80110fe:	e7ad      	b.n	801105c <__sflush_r+0x1c>
 8011100:	690f      	ldr	r7, [r1, #16]
 8011102:	2f00      	cmp	r7, #0
 8011104:	d0a9      	beq.n	801105a <__sflush_r+0x1a>
 8011106:	0793      	lsls	r3, r2, #30
 8011108:	680e      	ldr	r6, [r1, #0]
 801110a:	bf08      	it	eq
 801110c:	694b      	ldreq	r3, [r1, #20]
 801110e:	600f      	str	r7, [r1, #0]
 8011110:	bf18      	it	ne
 8011112:	2300      	movne	r3, #0
 8011114:	eba6 0807 	sub.w	r8, r6, r7
 8011118:	608b      	str	r3, [r1, #8]
 801111a:	f1b8 0f00 	cmp.w	r8, #0
 801111e:	dd9c      	ble.n	801105a <__sflush_r+0x1a>
 8011120:	6a21      	ldr	r1, [r4, #32]
 8011122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011124:	4643      	mov	r3, r8
 8011126:	463a      	mov	r2, r7
 8011128:	4628      	mov	r0, r5
 801112a:	47b0      	blx	r6
 801112c:	2800      	cmp	r0, #0
 801112e:	dc06      	bgt.n	801113e <__sflush_r+0xfe>
 8011130:	89a3      	ldrh	r3, [r4, #12]
 8011132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011136:	81a3      	strh	r3, [r4, #12]
 8011138:	f04f 30ff 	mov.w	r0, #4294967295
 801113c:	e78e      	b.n	801105c <__sflush_r+0x1c>
 801113e:	4407      	add	r7, r0
 8011140:	eba8 0800 	sub.w	r8, r8, r0
 8011144:	e7e9      	b.n	801111a <__sflush_r+0xda>
 8011146:	bf00      	nop
 8011148:	20400001 	.word	0x20400001

0801114c <_fflush_r>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	690b      	ldr	r3, [r1, #16]
 8011150:	4605      	mov	r5, r0
 8011152:	460c      	mov	r4, r1
 8011154:	b913      	cbnz	r3, 801115c <_fflush_r+0x10>
 8011156:	2500      	movs	r5, #0
 8011158:	4628      	mov	r0, r5
 801115a:	bd38      	pop	{r3, r4, r5, pc}
 801115c:	b118      	cbz	r0, 8011166 <_fflush_r+0x1a>
 801115e:	6983      	ldr	r3, [r0, #24]
 8011160:	b90b      	cbnz	r3, 8011166 <_fflush_r+0x1a>
 8011162:	f000 f887 	bl	8011274 <__sinit>
 8011166:	4b14      	ldr	r3, [pc, #80]	; (80111b8 <_fflush_r+0x6c>)
 8011168:	429c      	cmp	r4, r3
 801116a:	d11b      	bne.n	80111a4 <_fflush_r+0x58>
 801116c:	686c      	ldr	r4, [r5, #4]
 801116e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d0ef      	beq.n	8011156 <_fflush_r+0xa>
 8011176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011178:	07d0      	lsls	r0, r2, #31
 801117a:	d404      	bmi.n	8011186 <_fflush_r+0x3a>
 801117c:	0599      	lsls	r1, r3, #22
 801117e:	d402      	bmi.n	8011186 <_fflush_r+0x3a>
 8011180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011182:	f000 f915 	bl	80113b0 <__retarget_lock_acquire_recursive>
 8011186:	4628      	mov	r0, r5
 8011188:	4621      	mov	r1, r4
 801118a:	f7ff ff59 	bl	8011040 <__sflush_r>
 801118e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011190:	07da      	lsls	r2, r3, #31
 8011192:	4605      	mov	r5, r0
 8011194:	d4e0      	bmi.n	8011158 <_fflush_r+0xc>
 8011196:	89a3      	ldrh	r3, [r4, #12]
 8011198:	059b      	lsls	r3, r3, #22
 801119a:	d4dd      	bmi.n	8011158 <_fflush_r+0xc>
 801119c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801119e:	f000 f908 	bl	80113b2 <__retarget_lock_release_recursive>
 80111a2:	e7d9      	b.n	8011158 <_fflush_r+0xc>
 80111a4:	4b05      	ldr	r3, [pc, #20]	; (80111bc <_fflush_r+0x70>)
 80111a6:	429c      	cmp	r4, r3
 80111a8:	d101      	bne.n	80111ae <_fflush_r+0x62>
 80111aa:	68ac      	ldr	r4, [r5, #8]
 80111ac:	e7df      	b.n	801116e <_fflush_r+0x22>
 80111ae:	4b04      	ldr	r3, [pc, #16]	; (80111c0 <_fflush_r+0x74>)
 80111b0:	429c      	cmp	r4, r3
 80111b2:	bf08      	it	eq
 80111b4:	68ec      	ldreq	r4, [r5, #12]
 80111b6:	e7da      	b.n	801116e <_fflush_r+0x22>
 80111b8:	08021d9c 	.word	0x08021d9c
 80111bc:	08021dbc 	.word	0x08021dbc
 80111c0:	08021d7c 	.word	0x08021d7c

080111c4 <std>:
 80111c4:	2300      	movs	r3, #0
 80111c6:	b510      	push	{r4, lr}
 80111c8:	4604      	mov	r4, r0
 80111ca:	e9c0 3300 	strd	r3, r3, [r0]
 80111ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111d2:	6083      	str	r3, [r0, #8]
 80111d4:	8181      	strh	r1, [r0, #12]
 80111d6:	6643      	str	r3, [r0, #100]	; 0x64
 80111d8:	81c2      	strh	r2, [r0, #14]
 80111da:	6183      	str	r3, [r0, #24]
 80111dc:	4619      	mov	r1, r3
 80111de:	2208      	movs	r2, #8
 80111e0:	305c      	adds	r0, #92	; 0x5c
 80111e2:	f7fb fd9b 	bl	800cd1c <memset>
 80111e6:	4b05      	ldr	r3, [pc, #20]	; (80111fc <std+0x38>)
 80111e8:	6263      	str	r3, [r4, #36]	; 0x24
 80111ea:	4b05      	ldr	r3, [pc, #20]	; (8011200 <std+0x3c>)
 80111ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80111ee:	4b05      	ldr	r3, [pc, #20]	; (8011204 <std+0x40>)
 80111f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111f2:	4b05      	ldr	r3, [pc, #20]	; (8011208 <std+0x44>)
 80111f4:	6224      	str	r4, [r4, #32]
 80111f6:	6323      	str	r3, [r4, #48]	; 0x30
 80111f8:	bd10      	pop	{r4, pc}
 80111fa:	bf00      	nop
 80111fc:	08011519 	.word	0x08011519
 8011200:	0801153b 	.word	0x0801153b
 8011204:	08011573 	.word	0x08011573
 8011208:	08011597 	.word	0x08011597

0801120c <_cleanup_r>:
 801120c:	4901      	ldr	r1, [pc, #4]	; (8011214 <_cleanup_r+0x8>)
 801120e:	f000 b8af 	b.w	8011370 <_fwalk_reent>
 8011212:	bf00      	nop
 8011214:	0801114d 	.word	0x0801114d

08011218 <__sfmoreglue>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	2268      	movs	r2, #104	; 0x68
 801121c:	1e4d      	subs	r5, r1, #1
 801121e:	4355      	muls	r5, r2
 8011220:	460e      	mov	r6, r1
 8011222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011226:	f7ff fa5b 	bl	80106e0 <_malloc_r>
 801122a:	4604      	mov	r4, r0
 801122c:	b140      	cbz	r0, 8011240 <__sfmoreglue+0x28>
 801122e:	2100      	movs	r1, #0
 8011230:	e9c0 1600 	strd	r1, r6, [r0]
 8011234:	300c      	adds	r0, #12
 8011236:	60a0      	str	r0, [r4, #8]
 8011238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801123c:	f7fb fd6e 	bl	800cd1c <memset>
 8011240:	4620      	mov	r0, r4
 8011242:	bd70      	pop	{r4, r5, r6, pc}

08011244 <__sfp_lock_acquire>:
 8011244:	4801      	ldr	r0, [pc, #4]	; (801124c <__sfp_lock_acquire+0x8>)
 8011246:	f000 b8b3 	b.w	80113b0 <__retarget_lock_acquire_recursive>
 801124a:	bf00      	nop
 801124c:	2000147d 	.word	0x2000147d

08011250 <__sfp_lock_release>:
 8011250:	4801      	ldr	r0, [pc, #4]	; (8011258 <__sfp_lock_release+0x8>)
 8011252:	f000 b8ae 	b.w	80113b2 <__retarget_lock_release_recursive>
 8011256:	bf00      	nop
 8011258:	2000147d 	.word	0x2000147d

0801125c <__sinit_lock_acquire>:
 801125c:	4801      	ldr	r0, [pc, #4]	; (8011264 <__sinit_lock_acquire+0x8>)
 801125e:	f000 b8a7 	b.w	80113b0 <__retarget_lock_acquire_recursive>
 8011262:	bf00      	nop
 8011264:	2000147e 	.word	0x2000147e

08011268 <__sinit_lock_release>:
 8011268:	4801      	ldr	r0, [pc, #4]	; (8011270 <__sinit_lock_release+0x8>)
 801126a:	f000 b8a2 	b.w	80113b2 <__retarget_lock_release_recursive>
 801126e:	bf00      	nop
 8011270:	2000147e 	.word	0x2000147e

08011274 <__sinit>:
 8011274:	b510      	push	{r4, lr}
 8011276:	4604      	mov	r4, r0
 8011278:	f7ff fff0 	bl	801125c <__sinit_lock_acquire>
 801127c:	69a3      	ldr	r3, [r4, #24]
 801127e:	b11b      	cbz	r3, 8011288 <__sinit+0x14>
 8011280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011284:	f7ff bff0 	b.w	8011268 <__sinit_lock_release>
 8011288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801128c:	6523      	str	r3, [r4, #80]	; 0x50
 801128e:	4b13      	ldr	r3, [pc, #76]	; (80112dc <__sinit+0x68>)
 8011290:	4a13      	ldr	r2, [pc, #76]	; (80112e0 <__sinit+0x6c>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	62a2      	str	r2, [r4, #40]	; 0x28
 8011296:	42a3      	cmp	r3, r4
 8011298:	bf04      	itt	eq
 801129a:	2301      	moveq	r3, #1
 801129c:	61a3      	streq	r3, [r4, #24]
 801129e:	4620      	mov	r0, r4
 80112a0:	f000 f820 	bl	80112e4 <__sfp>
 80112a4:	6060      	str	r0, [r4, #4]
 80112a6:	4620      	mov	r0, r4
 80112a8:	f000 f81c 	bl	80112e4 <__sfp>
 80112ac:	60a0      	str	r0, [r4, #8]
 80112ae:	4620      	mov	r0, r4
 80112b0:	f000 f818 	bl	80112e4 <__sfp>
 80112b4:	2200      	movs	r2, #0
 80112b6:	60e0      	str	r0, [r4, #12]
 80112b8:	2104      	movs	r1, #4
 80112ba:	6860      	ldr	r0, [r4, #4]
 80112bc:	f7ff ff82 	bl	80111c4 <std>
 80112c0:	68a0      	ldr	r0, [r4, #8]
 80112c2:	2201      	movs	r2, #1
 80112c4:	2109      	movs	r1, #9
 80112c6:	f7ff ff7d 	bl	80111c4 <std>
 80112ca:	68e0      	ldr	r0, [r4, #12]
 80112cc:	2202      	movs	r2, #2
 80112ce:	2112      	movs	r1, #18
 80112d0:	f7ff ff78 	bl	80111c4 <std>
 80112d4:	2301      	movs	r3, #1
 80112d6:	61a3      	str	r3, [r4, #24]
 80112d8:	e7d2      	b.n	8011280 <__sinit+0xc>
 80112da:	bf00      	nop
 80112dc:	08021938 	.word	0x08021938
 80112e0:	0801120d 	.word	0x0801120d

080112e4 <__sfp>:
 80112e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e6:	4607      	mov	r7, r0
 80112e8:	f7ff ffac 	bl	8011244 <__sfp_lock_acquire>
 80112ec:	4b1e      	ldr	r3, [pc, #120]	; (8011368 <__sfp+0x84>)
 80112ee:	681e      	ldr	r6, [r3, #0]
 80112f0:	69b3      	ldr	r3, [r6, #24]
 80112f2:	b913      	cbnz	r3, 80112fa <__sfp+0x16>
 80112f4:	4630      	mov	r0, r6
 80112f6:	f7ff ffbd 	bl	8011274 <__sinit>
 80112fa:	3648      	adds	r6, #72	; 0x48
 80112fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011300:	3b01      	subs	r3, #1
 8011302:	d503      	bpl.n	801130c <__sfp+0x28>
 8011304:	6833      	ldr	r3, [r6, #0]
 8011306:	b30b      	cbz	r3, 801134c <__sfp+0x68>
 8011308:	6836      	ldr	r6, [r6, #0]
 801130a:	e7f7      	b.n	80112fc <__sfp+0x18>
 801130c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011310:	b9d5      	cbnz	r5, 8011348 <__sfp+0x64>
 8011312:	4b16      	ldr	r3, [pc, #88]	; (801136c <__sfp+0x88>)
 8011314:	60e3      	str	r3, [r4, #12]
 8011316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801131a:	6665      	str	r5, [r4, #100]	; 0x64
 801131c:	f000 f847 	bl	80113ae <__retarget_lock_init_recursive>
 8011320:	f7ff ff96 	bl	8011250 <__sfp_lock_release>
 8011324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801132c:	6025      	str	r5, [r4, #0]
 801132e:	61a5      	str	r5, [r4, #24]
 8011330:	2208      	movs	r2, #8
 8011332:	4629      	mov	r1, r5
 8011334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011338:	f7fb fcf0 	bl	800cd1c <memset>
 801133c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011344:	4620      	mov	r0, r4
 8011346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011348:	3468      	adds	r4, #104	; 0x68
 801134a:	e7d9      	b.n	8011300 <__sfp+0x1c>
 801134c:	2104      	movs	r1, #4
 801134e:	4638      	mov	r0, r7
 8011350:	f7ff ff62 	bl	8011218 <__sfmoreglue>
 8011354:	4604      	mov	r4, r0
 8011356:	6030      	str	r0, [r6, #0]
 8011358:	2800      	cmp	r0, #0
 801135a:	d1d5      	bne.n	8011308 <__sfp+0x24>
 801135c:	f7ff ff78 	bl	8011250 <__sfp_lock_release>
 8011360:	230c      	movs	r3, #12
 8011362:	603b      	str	r3, [r7, #0]
 8011364:	e7ee      	b.n	8011344 <__sfp+0x60>
 8011366:	bf00      	nop
 8011368:	08021938 	.word	0x08021938
 801136c:	ffff0001 	.word	0xffff0001

08011370 <_fwalk_reent>:
 8011370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011374:	4606      	mov	r6, r0
 8011376:	4688      	mov	r8, r1
 8011378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801137c:	2700      	movs	r7, #0
 801137e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011382:	f1b9 0901 	subs.w	r9, r9, #1
 8011386:	d505      	bpl.n	8011394 <_fwalk_reent+0x24>
 8011388:	6824      	ldr	r4, [r4, #0]
 801138a:	2c00      	cmp	r4, #0
 801138c:	d1f7      	bne.n	801137e <_fwalk_reent+0xe>
 801138e:	4638      	mov	r0, r7
 8011390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011394:	89ab      	ldrh	r3, [r5, #12]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d907      	bls.n	80113aa <_fwalk_reent+0x3a>
 801139a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801139e:	3301      	adds	r3, #1
 80113a0:	d003      	beq.n	80113aa <_fwalk_reent+0x3a>
 80113a2:	4629      	mov	r1, r5
 80113a4:	4630      	mov	r0, r6
 80113a6:	47c0      	blx	r8
 80113a8:	4307      	orrs	r7, r0
 80113aa:	3568      	adds	r5, #104	; 0x68
 80113ac:	e7e9      	b.n	8011382 <_fwalk_reent+0x12>

080113ae <__retarget_lock_init_recursive>:
 80113ae:	4770      	bx	lr

080113b0 <__retarget_lock_acquire_recursive>:
 80113b0:	4770      	bx	lr

080113b2 <__retarget_lock_release_recursive>:
 80113b2:	4770      	bx	lr

080113b4 <__swhatbuf_r>:
 80113b4:	b570      	push	{r4, r5, r6, lr}
 80113b6:	460e      	mov	r6, r1
 80113b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113bc:	2900      	cmp	r1, #0
 80113be:	b096      	sub	sp, #88	; 0x58
 80113c0:	4614      	mov	r4, r2
 80113c2:	461d      	mov	r5, r3
 80113c4:	da08      	bge.n	80113d8 <__swhatbuf_r+0x24>
 80113c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113ca:	2200      	movs	r2, #0
 80113cc:	602a      	str	r2, [r5, #0]
 80113ce:	061a      	lsls	r2, r3, #24
 80113d0:	d410      	bmi.n	80113f4 <__swhatbuf_r+0x40>
 80113d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113d6:	e00e      	b.n	80113f6 <__swhatbuf_r+0x42>
 80113d8:	466a      	mov	r2, sp
 80113da:	f000 f903 	bl	80115e4 <_fstat_r>
 80113de:	2800      	cmp	r0, #0
 80113e0:	dbf1      	blt.n	80113c6 <__swhatbuf_r+0x12>
 80113e2:	9a01      	ldr	r2, [sp, #4]
 80113e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113ec:	425a      	negs	r2, r3
 80113ee:	415a      	adcs	r2, r3
 80113f0:	602a      	str	r2, [r5, #0]
 80113f2:	e7ee      	b.n	80113d2 <__swhatbuf_r+0x1e>
 80113f4:	2340      	movs	r3, #64	; 0x40
 80113f6:	2000      	movs	r0, #0
 80113f8:	6023      	str	r3, [r4, #0]
 80113fa:	b016      	add	sp, #88	; 0x58
 80113fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08011400 <__smakebuf_r>:
 8011400:	898b      	ldrh	r3, [r1, #12]
 8011402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011404:	079d      	lsls	r5, r3, #30
 8011406:	4606      	mov	r6, r0
 8011408:	460c      	mov	r4, r1
 801140a:	d507      	bpl.n	801141c <__smakebuf_r+0x1c>
 801140c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011410:	6023      	str	r3, [r4, #0]
 8011412:	6123      	str	r3, [r4, #16]
 8011414:	2301      	movs	r3, #1
 8011416:	6163      	str	r3, [r4, #20]
 8011418:	b002      	add	sp, #8
 801141a:	bd70      	pop	{r4, r5, r6, pc}
 801141c:	ab01      	add	r3, sp, #4
 801141e:	466a      	mov	r2, sp
 8011420:	f7ff ffc8 	bl	80113b4 <__swhatbuf_r>
 8011424:	9900      	ldr	r1, [sp, #0]
 8011426:	4605      	mov	r5, r0
 8011428:	4630      	mov	r0, r6
 801142a:	f7ff f959 	bl	80106e0 <_malloc_r>
 801142e:	b948      	cbnz	r0, 8011444 <__smakebuf_r+0x44>
 8011430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011434:	059a      	lsls	r2, r3, #22
 8011436:	d4ef      	bmi.n	8011418 <__smakebuf_r+0x18>
 8011438:	f023 0303 	bic.w	r3, r3, #3
 801143c:	f043 0302 	orr.w	r3, r3, #2
 8011440:	81a3      	strh	r3, [r4, #12]
 8011442:	e7e3      	b.n	801140c <__smakebuf_r+0xc>
 8011444:	4b0d      	ldr	r3, [pc, #52]	; (801147c <__smakebuf_r+0x7c>)
 8011446:	62b3      	str	r3, [r6, #40]	; 0x28
 8011448:	89a3      	ldrh	r3, [r4, #12]
 801144a:	6020      	str	r0, [r4, #0]
 801144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011450:	81a3      	strh	r3, [r4, #12]
 8011452:	9b00      	ldr	r3, [sp, #0]
 8011454:	6163      	str	r3, [r4, #20]
 8011456:	9b01      	ldr	r3, [sp, #4]
 8011458:	6120      	str	r0, [r4, #16]
 801145a:	b15b      	cbz	r3, 8011474 <__smakebuf_r+0x74>
 801145c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011460:	4630      	mov	r0, r6
 8011462:	f000 f8d1 	bl	8011608 <_isatty_r>
 8011466:	b128      	cbz	r0, 8011474 <__smakebuf_r+0x74>
 8011468:	89a3      	ldrh	r3, [r4, #12]
 801146a:	f023 0303 	bic.w	r3, r3, #3
 801146e:	f043 0301 	orr.w	r3, r3, #1
 8011472:	81a3      	strh	r3, [r4, #12]
 8011474:	89a0      	ldrh	r0, [r4, #12]
 8011476:	4305      	orrs	r5, r0
 8011478:	81a5      	strh	r5, [r4, #12]
 801147a:	e7cd      	b.n	8011418 <__smakebuf_r+0x18>
 801147c:	0801120d 	.word	0x0801120d

08011480 <_malloc_usable_size_r>:
 8011480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011484:	1f18      	subs	r0, r3, #4
 8011486:	2b00      	cmp	r3, #0
 8011488:	bfbc      	itt	lt
 801148a:	580b      	ldrlt	r3, [r1, r0]
 801148c:	18c0      	addlt	r0, r0, r3
 801148e:	4770      	bx	lr

08011490 <_raise_r>:
 8011490:	291f      	cmp	r1, #31
 8011492:	b538      	push	{r3, r4, r5, lr}
 8011494:	4604      	mov	r4, r0
 8011496:	460d      	mov	r5, r1
 8011498:	d904      	bls.n	80114a4 <_raise_r+0x14>
 801149a:	2316      	movs	r3, #22
 801149c:	6003      	str	r3, [r0, #0]
 801149e:	f04f 30ff 	mov.w	r0, #4294967295
 80114a2:	bd38      	pop	{r3, r4, r5, pc}
 80114a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114a6:	b112      	cbz	r2, 80114ae <_raise_r+0x1e>
 80114a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114ac:	b94b      	cbnz	r3, 80114c2 <_raise_r+0x32>
 80114ae:	4620      	mov	r0, r4
 80114b0:	f000 f830 	bl	8011514 <_getpid_r>
 80114b4:	462a      	mov	r2, r5
 80114b6:	4601      	mov	r1, r0
 80114b8:	4620      	mov	r0, r4
 80114ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114be:	f000 b817 	b.w	80114f0 <_kill_r>
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d00a      	beq.n	80114dc <_raise_r+0x4c>
 80114c6:	1c59      	adds	r1, r3, #1
 80114c8:	d103      	bne.n	80114d2 <_raise_r+0x42>
 80114ca:	2316      	movs	r3, #22
 80114cc:	6003      	str	r3, [r0, #0]
 80114ce:	2001      	movs	r0, #1
 80114d0:	e7e7      	b.n	80114a2 <_raise_r+0x12>
 80114d2:	2400      	movs	r4, #0
 80114d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114d8:	4628      	mov	r0, r5
 80114da:	4798      	blx	r3
 80114dc:	2000      	movs	r0, #0
 80114de:	e7e0      	b.n	80114a2 <_raise_r+0x12>

080114e0 <raise>:
 80114e0:	4b02      	ldr	r3, [pc, #8]	; (80114ec <raise+0xc>)
 80114e2:	4601      	mov	r1, r0
 80114e4:	6818      	ldr	r0, [r3, #0]
 80114e6:	f7ff bfd3 	b.w	8011490 <_raise_r>
 80114ea:	bf00      	nop
 80114ec:	2000007c 	.word	0x2000007c

080114f0 <_kill_r>:
 80114f0:	b538      	push	{r3, r4, r5, lr}
 80114f2:	4d07      	ldr	r5, [pc, #28]	; (8011510 <_kill_r+0x20>)
 80114f4:	2300      	movs	r3, #0
 80114f6:	4604      	mov	r4, r0
 80114f8:	4608      	mov	r0, r1
 80114fa:	4611      	mov	r1, r2
 80114fc:	602b      	str	r3, [r5, #0]
 80114fe:	f7f4 fb6f 	bl	8005be0 <_kill>
 8011502:	1c43      	adds	r3, r0, #1
 8011504:	d102      	bne.n	801150c <_kill_r+0x1c>
 8011506:	682b      	ldr	r3, [r5, #0]
 8011508:	b103      	cbz	r3, 801150c <_kill_r+0x1c>
 801150a:	6023      	str	r3, [r4, #0]
 801150c:	bd38      	pop	{r3, r4, r5, pc}
 801150e:	bf00      	nop
 8011510:	20001478 	.word	0x20001478

08011514 <_getpid_r>:
 8011514:	f7f4 bb5c 	b.w	8005bd0 <_getpid>

08011518 <__sread>:
 8011518:	b510      	push	{r4, lr}
 801151a:	460c      	mov	r4, r1
 801151c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011520:	f000 f894 	bl	801164c <_read_r>
 8011524:	2800      	cmp	r0, #0
 8011526:	bfab      	itete	ge
 8011528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801152a:	89a3      	ldrhlt	r3, [r4, #12]
 801152c:	181b      	addge	r3, r3, r0
 801152e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011532:	bfac      	ite	ge
 8011534:	6563      	strge	r3, [r4, #84]	; 0x54
 8011536:	81a3      	strhlt	r3, [r4, #12]
 8011538:	bd10      	pop	{r4, pc}

0801153a <__swrite>:
 801153a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153e:	461f      	mov	r7, r3
 8011540:	898b      	ldrh	r3, [r1, #12]
 8011542:	05db      	lsls	r3, r3, #23
 8011544:	4605      	mov	r5, r0
 8011546:	460c      	mov	r4, r1
 8011548:	4616      	mov	r6, r2
 801154a:	d505      	bpl.n	8011558 <__swrite+0x1e>
 801154c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011550:	2302      	movs	r3, #2
 8011552:	2200      	movs	r2, #0
 8011554:	f000 f868 	bl	8011628 <_lseek_r>
 8011558:	89a3      	ldrh	r3, [r4, #12]
 801155a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801155e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011562:	81a3      	strh	r3, [r4, #12]
 8011564:	4632      	mov	r2, r6
 8011566:	463b      	mov	r3, r7
 8011568:	4628      	mov	r0, r5
 801156a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801156e:	f000 b817 	b.w	80115a0 <_write_r>

08011572 <__sseek>:
 8011572:	b510      	push	{r4, lr}
 8011574:	460c      	mov	r4, r1
 8011576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157a:	f000 f855 	bl	8011628 <_lseek_r>
 801157e:	1c43      	adds	r3, r0, #1
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	bf15      	itete	ne
 8011584:	6560      	strne	r0, [r4, #84]	; 0x54
 8011586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801158a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801158e:	81a3      	strheq	r3, [r4, #12]
 8011590:	bf18      	it	ne
 8011592:	81a3      	strhne	r3, [r4, #12]
 8011594:	bd10      	pop	{r4, pc}

08011596 <__sclose>:
 8011596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801159a:	f000 b813 	b.w	80115c4 <_close_r>
	...

080115a0 <_write_r>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4d07      	ldr	r5, [pc, #28]	; (80115c0 <_write_r+0x20>)
 80115a4:	4604      	mov	r4, r0
 80115a6:	4608      	mov	r0, r1
 80115a8:	4611      	mov	r1, r2
 80115aa:	2200      	movs	r2, #0
 80115ac:	602a      	str	r2, [r5, #0]
 80115ae:	461a      	mov	r2, r3
 80115b0:	f7f4 fb4d 	bl	8005c4e <_write>
 80115b4:	1c43      	adds	r3, r0, #1
 80115b6:	d102      	bne.n	80115be <_write_r+0x1e>
 80115b8:	682b      	ldr	r3, [r5, #0]
 80115ba:	b103      	cbz	r3, 80115be <_write_r+0x1e>
 80115bc:	6023      	str	r3, [r4, #0]
 80115be:	bd38      	pop	{r3, r4, r5, pc}
 80115c0:	20001478 	.word	0x20001478

080115c4 <_close_r>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	4d06      	ldr	r5, [pc, #24]	; (80115e0 <_close_r+0x1c>)
 80115c8:	2300      	movs	r3, #0
 80115ca:	4604      	mov	r4, r0
 80115cc:	4608      	mov	r0, r1
 80115ce:	602b      	str	r3, [r5, #0]
 80115d0:	f7f4 fb59 	bl	8005c86 <_close>
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	d102      	bne.n	80115de <_close_r+0x1a>
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	b103      	cbz	r3, 80115de <_close_r+0x1a>
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	bd38      	pop	{r3, r4, r5, pc}
 80115e0:	20001478 	.word	0x20001478

080115e4 <_fstat_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	4d07      	ldr	r5, [pc, #28]	; (8011604 <_fstat_r+0x20>)
 80115e8:	2300      	movs	r3, #0
 80115ea:	4604      	mov	r4, r0
 80115ec:	4608      	mov	r0, r1
 80115ee:	4611      	mov	r1, r2
 80115f0:	602b      	str	r3, [r5, #0]
 80115f2:	f7f4 fb54 	bl	8005c9e <_fstat>
 80115f6:	1c43      	adds	r3, r0, #1
 80115f8:	d102      	bne.n	8011600 <_fstat_r+0x1c>
 80115fa:	682b      	ldr	r3, [r5, #0]
 80115fc:	b103      	cbz	r3, 8011600 <_fstat_r+0x1c>
 80115fe:	6023      	str	r3, [r4, #0]
 8011600:	bd38      	pop	{r3, r4, r5, pc}
 8011602:	bf00      	nop
 8011604:	20001478 	.word	0x20001478

08011608 <_isatty_r>:
 8011608:	b538      	push	{r3, r4, r5, lr}
 801160a:	4d06      	ldr	r5, [pc, #24]	; (8011624 <_isatty_r+0x1c>)
 801160c:	2300      	movs	r3, #0
 801160e:	4604      	mov	r4, r0
 8011610:	4608      	mov	r0, r1
 8011612:	602b      	str	r3, [r5, #0]
 8011614:	f7f4 fb53 	bl	8005cbe <_isatty>
 8011618:	1c43      	adds	r3, r0, #1
 801161a:	d102      	bne.n	8011622 <_isatty_r+0x1a>
 801161c:	682b      	ldr	r3, [r5, #0]
 801161e:	b103      	cbz	r3, 8011622 <_isatty_r+0x1a>
 8011620:	6023      	str	r3, [r4, #0]
 8011622:	bd38      	pop	{r3, r4, r5, pc}
 8011624:	20001478 	.word	0x20001478

08011628 <_lseek_r>:
 8011628:	b538      	push	{r3, r4, r5, lr}
 801162a:	4d07      	ldr	r5, [pc, #28]	; (8011648 <_lseek_r+0x20>)
 801162c:	4604      	mov	r4, r0
 801162e:	4608      	mov	r0, r1
 8011630:	4611      	mov	r1, r2
 8011632:	2200      	movs	r2, #0
 8011634:	602a      	str	r2, [r5, #0]
 8011636:	461a      	mov	r2, r3
 8011638:	f7f4 fb4c 	bl	8005cd4 <_lseek>
 801163c:	1c43      	adds	r3, r0, #1
 801163e:	d102      	bne.n	8011646 <_lseek_r+0x1e>
 8011640:	682b      	ldr	r3, [r5, #0]
 8011642:	b103      	cbz	r3, 8011646 <_lseek_r+0x1e>
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	20001478 	.word	0x20001478

0801164c <_read_r>:
 801164c:	b538      	push	{r3, r4, r5, lr}
 801164e:	4d07      	ldr	r5, [pc, #28]	; (801166c <_read_r+0x20>)
 8011650:	4604      	mov	r4, r0
 8011652:	4608      	mov	r0, r1
 8011654:	4611      	mov	r1, r2
 8011656:	2200      	movs	r2, #0
 8011658:	602a      	str	r2, [r5, #0]
 801165a:	461a      	mov	r2, r3
 801165c:	f7f4 fada 	bl	8005c14 <_read>
 8011660:	1c43      	adds	r3, r0, #1
 8011662:	d102      	bne.n	801166a <_read_r+0x1e>
 8011664:	682b      	ldr	r3, [r5, #0]
 8011666:	b103      	cbz	r3, 801166a <_read_r+0x1e>
 8011668:	6023      	str	r3, [r4, #0]
 801166a:	bd38      	pop	{r3, r4, r5, pc}
 801166c:	20001478 	.word	0x20001478

08011670 <floor>:
 8011670:	ec51 0b10 	vmov	r0, r1, d0
 8011674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011678:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801167c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011680:	2e13      	cmp	r6, #19
 8011682:	ee10 5a10 	vmov	r5, s0
 8011686:	ee10 8a10 	vmov	r8, s0
 801168a:	460c      	mov	r4, r1
 801168c:	dc32      	bgt.n	80116f4 <floor+0x84>
 801168e:	2e00      	cmp	r6, #0
 8011690:	da14      	bge.n	80116bc <floor+0x4c>
 8011692:	a333      	add	r3, pc, #204	; (adr r3, 8011760 <floor+0xf0>)
 8011694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011698:	f7ee fdf8 	bl	800028c <__adddf3>
 801169c:	2200      	movs	r2, #0
 801169e:	2300      	movs	r3, #0
 80116a0:	f7ef fa3a 	bl	8000b18 <__aeabi_dcmpgt>
 80116a4:	b138      	cbz	r0, 80116b6 <floor+0x46>
 80116a6:	2c00      	cmp	r4, #0
 80116a8:	da57      	bge.n	801175a <floor+0xea>
 80116aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80116ae:	431d      	orrs	r5, r3
 80116b0:	d001      	beq.n	80116b6 <floor+0x46>
 80116b2:	4c2d      	ldr	r4, [pc, #180]	; (8011768 <floor+0xf8>)
 80116b4:	2500      	movs	r5, #0
 80116b6:	4621      	mov	r1, r4
 80116b8:	4628      	mov	r0, r5
 80116ba:	e025      	b.n	8011708 <floor+0x98>
 80116bc:	4f2b      	ldr	r7, [pc, #172]	; (801176c <floor+0xfc>)
 80116be:	4137      	asrs	r7, r6
 80116c0:	ea01 0307 	and.w	r3, r1, r7
 80116c4:	4303      	orrs	r3, r0
 80116c6:	d01f      	beq.n	8011708 <floor+0x98>
 80116c8:	a325      	add	r3, pc, #148	; (adr r3, 8011760 <floor+0xf0>)
 80116ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ce:	f7ee fddd 	bl	800028c <__adddf3>
 80116d2:	2200      	movs	r2, #0
 80116d4:	2300      	movs	r3, #0
 80116d6:	f7ef fa1f 	bl	8000b18 <__aeabi_dcmpgt>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d0eb      	beq.n	80116b6 <floor+0x46>
 80116de:	2c00      	cmp	r4, #0
 80116e0:	bfbe      	ittt	lt
 80116e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80116e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80116ea:	19a4      	addlt	r4, r4, r6
 80116ec:	ea24 0407 	bic.w	r4, r4, r7
 80116f0:	2500      	movs	r5, #0
 80116f2:	e7e0      	b.n	80116b6 <floor+0x46>
 80116f4:	2e33      	cmp	r6, #51	; 0x33
 80116f6:	dd0b      	ble.n	8011710 <floor+0xa0>
 80116f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80116fc:	d104      	bne.n	8011708 <floor+0x98>
 80116fe:	ee10 2a10 	vmov	r2, s0
 8011702:	460b      	mov	r3, r1
 8011704:	f7ee fdc2 	bl	800028c <__adddf3>
 8011708:	ec41 0b10 	vmov	d0, r0, r1
 801170c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011710:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011714:	f04f 33ff 	mov.w	r3, #4294967295
 8011718:	fa23 f707 	lsr.w	r7, r3, r7
 801171c:	4207      	tst	r7, r0
 801171e:	d0f3      	beq.n	8011708 <floor+0x98>
 8011720:	a30f      	add	r3, pc, #60	; (adr r3, 8011760 <floor+0xf0>)
 8011722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011726:	f7ee fdb1 	bl	800028c <__adddf3>
 801172a:	2200      	movs	r2, #0
 801172c:	2300      	movs	r3, #0
 801172e:	f7ef f9f3 	bl	8000b18 <__aeabi_dcmpgt>
 8011732:	2800      	cmp	r0, #0
 8011734:	d0bf      	beq.n	80116b6 <floor+0x46>
 8011736:	2c00      	cmp	r4, #0
 8011738:	da02      	bge.n	8011740 <floor+0xd0>
 801173a:	2e14      	cmp	r6, #20
 801173c:	d103      	bne.n	8011746 <floor+0xd6>
 801173e:	3401      	adds	r4, #1
 8011740:	ea25 0507 	bic.w	r5, r5, r7
 8011744:	e7b7      	b.n	80116b6 <floor+0x46>
 8011746:	2301      	movs	r3, #1
 8011748:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801174c:	fa03 f606 	lsl.w	r6, r3, r6
 8011750:	4435      	add	r5, r6
 8011752:	4545      	cmp	r5, r8
 8011754:	bf38      	it	cc
 8011756:	18e4      	addcc	r4, r4, r3
 8011758:	e7f2      	b.n	8011740 <floor+0xd0>
 801175a:	2500      	movs	r5, #0
 801175c:	462c      	mov	r4, r5
 801175e:	e7aa      	b.n	80116b6 <floor+0x46>
 8011760:	8800759c 	.word	0x8800759c
 8011764:	7e37e43c 	.word	0x7e37e43c
 8011768:	bff00000 	.word	0xbff00000
 801176c:	000fffff 	.word	0x000fffff

08011770 <sin>:
 8011770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011772:	ec53 2b10 	vmov	r2, r3, d0
 8011776:	4828      	ldr	r0, [pc, #160]	; (8011818 <sin+0xa8>)
 8011778:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801177c:	4281      	cmp	r1, r0
 801177e:	dc07      	bgt.n	8011790 <sin+0x20>
 8011780:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011810 <sin+0xa0>
 8011784:	2000      	movs	r0, #0
 8011786:	b005      	add	sp, #20
 8011788:	f85d eb04 	ldr.w	lr, [sp], #4
 801178c:	f001 bcc0 	b.w	8013110 <__kernel_sin>
 8011790:	4822      	ldr	r0, [pc, #136]	; (801181c <sin+0xac>)
 8011792:	4281      	cmp	r1, r0
 8011794:	dd09      	ble.n	80117aa <sin+0x3a>
 8011796:	ee10 0a10 	vmov	r0, s0
 801179a:	4619      	mov	r1, r3
 801179c:	f7ee fd74 	bl	8000288 <__aeabi_dsub>
 80117a0:	ec41 0b10 	vmov	d0, r0, r1
 80117a4:	b005      	add	sp, #20
 80117a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80117aa:	4668      	mov	r0, sp
 80117ac:	f000 fdd8 	bl	8012360 <__ieee754_rem_pio2>
 80117b0:	f000 0003 	and.w	r0, r0, #3
 80117b4:	2801      	cmp	r0, #1
 80117b6:	d00c      	beq.n	80117d2 <sin+0x62>
 80117b8:	2802      	cmp	r0, #2
 80117ba:	d011      	beq.n	80117e0 <sin+0x70>
 80117bc:	b9f0      	cbnz	r0, 80117fc <sin+0x8c>
 80117be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117c2:	ed9d 0b00 	vldr	d0, [sp]
 80117c6:	2001      	movs	r0, #1
 80117c8:	f001 fca2 	bl	8013110 <__kernel_sin>
 80117cc:	ec51 0b10 	vmov	r0, r1, d0
 80117d0:	e7e6      	b.n	80117a0 <sin+0x30>
 80117d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117d6:	ed9d 0b00 	vldr	d0, [sp]
 80117da:	f001 f881 	bl	80128e0 <__kernel_cos>
 80117de:	e7f5      	b.n	80117cc <sin+0x5c>
 80117e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117e4:	ed9d 0b00 	vldr	d0, [sp]
 80117e8:	2001      	movs	r0, #1
 80117ea:	f001 fc91 	bl	8013110 <__kernel_sin>
 80117ee:	ec53 2b10 	vmov	r2, r3, d0
 80117f2:	ee10 0a10 	vmov	r0, s0
 80117f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80117fa:	e7d1      	b.n	80117a0 <sin+0x30>
 80117fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011800:	ed9d 0b00 	vldr	d0, [sp]
 8011804:	f001 f86c 	bl	80128e0 <__kernel_cos>
 8011808:	e7f1      	b.n	80117ee <sin+0x7e>
 801180a:	bf00      	nop
 801180c:	f3af 8000 	nop.w
	...
 8011818:	3fe921fb 	.word	0x3fe921fb
 801181c:	7fefffff 	.word	0x7fefffff

08011820 <pow>:
 8011820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011822:	ed2d 8b02 	vpush	{d8}
 8011826:	eeb0 8a40 	vmov.f32	s16, s0
 801182a:	eef0 8a60 	vmov.f32	s17, s1
 801182e:	ec55 4b11 	vmov	r4, r5, d1
 8011832:	f000 f865 	bl	8011900 <__ieee754_pow>
 8011836:	4622      	mov	r2, r4
 8011838:	462b      	mov	r3, r5
 801183a:	4620      	mov	r0, r4
 801183c:	4629      	mov	r1, r5
 801183e:	ec57 6b10 	vmov	r6, r7, d0
 8011842:	f7ef f973 	bl	8000b2c <__aeabi_dcmpun>
 8011846:	2800      	cmp	r0, #0
 8011848:	d13b      	bne.n	80118c2 <pow+0xa2>
 801184a:	ec51 0b18 	vmov	r0, r1, d8
 801184e:	2200      	movs	r2, #0
 8011850:	2300      	movs	r3, #0
 8011852:	f7ef f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8011856:	b1b8      	cbz	r0, 8011888 <pow+0x68>
 8011858:	2200      	movs	r2, #0
 801185a:	2300      	movs	r3, #0
 801185c:	4620      	mov	r0, r4
 801185e:	4629      	mov	r1, r5
 8011860:	f7ef f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8011864:	2800      	cmp	r0, #0
 8011866:	d146      	bne.n	80118f6 <pow+0xd6>
 8011868:	ec45 4b10 	vmov	d0, r4, r5
 801186c:	f001 fd47 	bl	80132fe <finite>
 8011870:	b338      	cbz	r0, 80118c2 <pow+0xa2>
 8011872:	2200      	movs	r2, #0
 8011874:	2300      	movs	r3, #0
 8011876:	4620      	mov	r0, r4
 8011878:	4629      	mov	r1, r5
 801187a:	f7ef f92f 	bl	8000adc <__aeabi_dcmplt>
 801187e:	b300      	cbz	r0, 80118c2 <pow+0xa2>
 8011880:	f7fb fa04 	bl	800cc8c <__errno>
 8011884:	2322      	movs	r3, #34	; 0x22
 8011886:	e01b      	b.n	80118c0 <pow+0xa0>
 8011888:	ec47 6b10 	vmov	d0, r6, r7
 801188c:	f001 fd37 	bl	80132fe <finite>
 8011890:	b9e0      	cbnz	r0, 80118cc <pow+0xac>
 8011892:	eeb0 0a48 	vmov.f32	s0, s16
 8011896:	eef0 0a68 	vmov.f32	s1, s17
 801189a:	f001 fd30 	bl	80132fe <finite>
 801189e:	b1a8      	cbz	r0, 80118cc <pow+0xac>
 80118a0:	ec45 4b10 	vmov	d0, r4, r5
 80118a4:	f001 fd2b 	bl	80132fe <finite>
 80118a8:	b180      	cbz	r0, 80118cc <pow+0xac>
 80118aa:	4632      	mov	r2, r6
 80118ac:	463b      	mov	r3, r7
 80118ae:	4630      	mov	r0, r6
 80118b0:	4639      	mov	r1, r7
 80118b2:	f7ef f93b 	bl	8000b2c <__aeabi_dcmpun>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	d0e2      	beq.n	8011880 <pow+0x60>
 80118ba:	f7fb f9e7 	bl	800cc8c <__errno>
 80118be:	2321      	movs	r3, #33	; 0x21
 80118c0:	6003      	str	r3, [r0, #0]
 80118c2:	ecbd 8b02 	vpop	{d8}
 80118c6:	ec47 6b10 	vmov	d0, r6, r7
 80118ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118cc:	2200      	movs	r2, #0
 80118ce:	2300      	movs	r3, #0
 80118d0:	4630      	mov	r0, r6
 80118d2:	4639      	mov	r1, r7
 80118d4:	f7ef f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80118d8:	2800      	cmp	r0, #0
 80118da:	d0f2      	beq.n	80118c2 <pow+0xa2>
 80118dc:	eeb0 0a48 	vmov.f32	s0, s16
 80118e0:	eef0 0a68 	vmov.f32	s1, s17
 80118e4:	f001 fd0b 	bl	80132fe <finite>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d0ea      	beq.n	80118c2 <pow+0xa2>
 80118ec:	ec45 4b10 	vmov	d0, r4, r5
 80118f0:	f001 fd05 	bl	80132fe <finite>
 80118f4:	e7c3      	b.n	801187e <pow+0x5e>
 80118f6:	4f01      	ldr	r7, [pc, #4]	; (80118fc <pow+0xdc>)
 80118f8:	2600      	movs	r6, #0
 80118fa:	e7e2      	b.n	80118c2 <pow+0xa2>
 80118fc:	3ff00000 	.word	0x3ff00000

08011900 <__ieee754_pow>:
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	ed2d 8b06 	vpush	{d8-d10}
 8011908:	b089      	sub	sp, #36	; 0x24
 801190a:	ed8d 1b00 	vstr	d1, [sp]
 801190e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011912:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011916:	ea58 0102 	orrs.w	r1, r8, r2
 801191a:	ec57 6b10 	vmov	r6, r7, d0
 801191e:	d115      	bne.n	801194c <__ieee754_pow+0x4c>
 8011920:	19b3      	adds	r3, r6, r6
 8011922:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011926:	4152      	adcs	r2, r2
 8011928:	4299      	cmp	r1, r3
 801192a:	4b89      	ldr	r3, [pc, #548]	; (8011b50 <__ieee754_pow+0x250>)
 801192c:	4193      	sbcs	r3, r2
 801192e:	f080 84d2 	bcs.w	80122d6 <__ieee754_pow+0x9d6>
 8011932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011936:	4630      	mov	r0, r6
 8011938:	4639      	mov	r1, r7
 801193a:	f7ee fca7 	bl	800028c <__adddf3>
 801193e:	ec41 0b10 	vmov	d0, r0, r1
 8011942:	b009      	add	sp, #36	; 0x24
 8011944:	ecbd 8b06 	vpop	{d8-d10}
 8011948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194c:	4b81      	ldr	r3, [pc, #516]	; (8011b54 <__ieee754_pow+0x254>)
 801194e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011952:	429c      	cmp	r4, r3
 8011954:	ee10 aa10 	vmov	sl, s0
 8011958:	463d      	mov	r5, r7
 801195a:	dc06      	bgt.n	801196a <__ieee754_pow+0x6a>
 801195c:	d101      	bne.n	8011962 <__ieee754_pow+0x62>
 801195e:	2e00      	cmp	r6, #0
 8011960:	d1e7      	bne.n	8011932 <__ieee754_pow+0x32>
 8011962:	4598      	cmp	r8, r3
 8011964:	dc01      	bgt.n	801196a <__ieee754_pow+0x6a>
 8011966:	d10f      	bne.n	8011988 <__ieee754_pow+0x88>
 8011968:	b172      	cbz	r2, 8011988 <__ieee754_pow+0x88>
 801196a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801196e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011972:	ea55 050a 	orrs.w	r5, r5, sl
 8011976:	d1dc      	bne.n	8011932 <__ieee754_pow+0x32>
 8011978:	e9dd 3200 	ldrd	r3, r2, [sp]
 801197c:	18db      	adds	r3, r3, r3
 801197e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011982:	4152      	adcs	r2, r2
 8011984:	429d      	cmp	r5, r3
 8011986:	e7d0      	b.n	801192a <__ieee754_pow+0x2a>
 8011988:	2d00      	cmp	r5, #0
 801198a:	da3b      	bge.n	8011a04 <__ieee754_pow+0x104>
 801198c:	4b72      	ldr	r3, [pc, #456]	; (8011b58 <__ieee754_pow+0x258>)
 801198e:	4598      	cmp	r8, r3
 8011990:	dc51      	bgt.n	8011a36 <__ieee754_pow+0x136>
 8011992:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011996:	4598      	cmp	r8, r3
 8011998:	f340 84ac 	ble.w	80122f4 <__ieee754_pow+0x9f4>
 801199c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80119a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80119a4:	2b14      	cmp	r3, #20
 80119a6:	dd0f      	ble.n	80119c8 <__ieee754_pow+0xc8>
 80119a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80119ac:	fa22 f103 	lsr.w	r1, r2, r3
 80119b0:	fa01 f303 	lsl.w	r3, r1, r3
 80119b4:	4293      	cmp	r3, r2
 80119b6:	f040 849d 	bne.w	80122f4 <__ieee754_pow+0x9f4>
 80119ba:	f001 0101 	and.w	r1, r1, #1
 80119be:	f1c1 0302 	rsb	r3, r1, #2
 80119c2:	9304      	str	r3, [sp, #16]
 80119c4:	b182      	cbz	r2, 80119e8 <__ieee754_pow+0xe8>
 80119c6:	e05f      	b.n	8011a88 <__ieee754_pow+0x188>
 80119c8:	2a00      	cmp	r2, #0
 80119ca:	d15b      	bne.n	8011a84 <__ieee754_pow+0x184>
 80119cc:	f1c3 0314 	rsb	r3, r3, #20
 80119d0:	fa48 f103 	asr.w	r1, r8, r3
 80119d4:	fa01 f303 	lsl.w	r3, r1, r3
 80119d8:	4543      	cmp	r3, r8
 80119da:	f040 8488 	bne.w	80122ee <__ieee754_pow+0x9ee>
 80119de:	f001 0101 	and.w	r1, r1, #1
 80119e2:	f1c1 0302 	rsb	r3, r1, #2
 80119e6:	9304      	str	r3, [sp, #16]
 80119e8:	4b5c      	ldr	r3, [pc, #368]	; (8011b5c <__ieee754_pow+0x25c>)
 80119ea:	4598      	cmp	r8, r3
 80119ec:	d132      	bne.n	8011a54 <__ieee754_pow+0x154>
 80119ee:	f1b9 0f00 	cmp.w	r9, #0
 80119f2:	f280 8478 	bge.w	80122e6 <__ieee754_pow+0x9e6>
 80119f6:	4959      	ldr	r1, [pc, #356]	; (8011b5c <__ieee754_pow+0x25c>)
 80119f8:	4632      	mov	r2, r6
 80119fa:	463b      	mov	r3, r7
 80119fc:	2000      	movs	r0, #0
 80119fe:	f7ee ff25 	bl	800084c <__aeabi_ddiv>
 8011a02:	e79c      	b.n	801193e <__ieee754_pow+0x3e>
 8011a04:	2300      	movs	r3, #0
 8011a06:	9304      	str	r3, [sp, #16]
 8011a08:	2a00      	cmp	r2, #0
 8011a0a:	d13d      	bne.n	8011a88 <__ieee754_pow+0x188>
 8011a0c:	4b51      	ldr	r3, [pc, #324]	; (8011b54 <__ieee754_pow+0x254>)
 8011a0e:	4598      	cmp	r8, r3
 8011a10:	d1ea      	bne.n	80119e8 <__ieee754_pow+0xe8>
 8011a12:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011a16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011a1a:	ea53 030a 	orrs.w	r3, r3, sl
 8011a1e:	f000 845a 	beq.w	80122d6 <__ieee754_pow+0x9d6>
 8011a22:	4b4f      	ldr	r3, [pc, #316]	; (8011b60 <__ieee754_pow+0x260>)
 8011a24:	429c      	cmp	r4, r3
 8011a26:	dd08      	ble.n	8011a3a <__ieee754_pow+0x13a>
 8011a28:	f1b9 0f00 	cmp.w	r9, #0
 8011a2c:	f2c0 8457 	blt.w	80122de <__ieee754_pow+0x9de>
 8011a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a34:	e783      	b.n	801193e <__ieee754_pow+0x3e>
 8011a36:	2302      	movs	r3, #2
 8011a38:	e7e5      	b.n	8011a06 <__ieee754_pow+0x106>
 8011a3a:	f1b9 0f00 	cmp.w	r9, #0
 8011a3e:	f04f 0000 	mov.w	r0, #0
 8011a42:	f04f 0100 	mov.w	r1, #0
 8011a46:	f6bf af7a 	bge.w	801193e <__ieee754_pow+0x3e>
 8011a4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011a4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011a52:	e774      	b.n	801193e <__ieee754_pow+0x3e>
 8011a54:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011a58:	d106      	bne.n	8011a68 <__ieee754_pow+0x168>
 8011a5a:	4632      	mov	r2, r6
 8011a5c:	463b      	mov	r3, r7
 8011a5e:	4630      	mov	r0, r6
 8011a60:	4639      	mov	r1, r7
 8011a62:	f7ee fdc9 	bl	80005f8 <__aeabi_dmul>
 8011a66:	e76a      	b.n	801193e <__ieee754_pow+0x3e>
 8011a68:	4b3e      	ldr	r3, [pc, #248]	; (8011b64 <__ieee754_pow+0x264>)
 8011a6a:	4599      	cmp	r9, r3
 8011a6c:	d10c      	bne.n	8011a88 <__ieee754_pow+0x188>
 8011a6e:	2d00      	cmp	r5, #0
 8011a70:	db0a      	blt.n	8011a88 <__ieee754_pow+0x188>
 8011a72:	ec47 6b10 	vmov	d0, r6, r7
 8011a76:	b009      	add	sp, #36	; 0x24
 8011a78:	ecbd 8b06 	vpop	{d8-d10}
 8011a7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a80:	f000 be7a 	b.w	8012778 <__ieee754_sqrt>
 8011a84:	2300      	movs	r3, #0
 8011a86:	9304      	str	r3, [sp, #16]
 8011a88:	ec47 6b10 	vmov	d0, r6, r7
 8011a8c:	f001 fc2e 	bl	80132ec <fabs>
 8011a90:	ec51 0b10 	vmov	r0, r1, d0
 8011a94:	f1ba 0f00 	cmp.w	sl, #0
 8011a98:	d129      	bne.n	8011aee <__ieee754_pow+0x1ee>
 8011a9a:	b124      	cbz	r4, 8011aa6 <__ieee754_pow+0x1a6>
 8011a9c:	4b2f      	ldr	r3, [pc, #188]	; (8011b5c <__ieee754_pow+0x25c>)
 8011a9e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d123      	bne.n	8011aee <__ieee754_pow+0x1ee>
 8011aa6:	f1b9 0f00 	cmp.w	r9, #0
 8011aaa:	da05      	bge.n	8011ab8 <__ieee754_pow+0x1b8>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	492a      	ldr	r1, [pc, #168]	; (8011b5c <__ieee754_pow+0x25c>)
 8011ab4:	f7ee feca 	bl	800084c <__aeabi_ddiv>
 8011ab8:	2d00      	cmp	r5, #0
 8011aba:	f6bf af40 	bge.w	801193e <__ieee754_pow+0x3e>
 8011abe:	9b04      	ldr	r3, [sp, #16]
 8011ac0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011ac4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ac8:	4323      	orrs	r3, r4
 8011aca:	d108      	bne.n	8011ade <__ieee754_pow+0x1de>
 8011acc:	4602      	mov	r2, r0
 8011ace:	460b      	mov	r3, r1
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	f7ee fbd8 	bl	8000288 <__aeabi_dsub>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	460b      	mov	r3, r1
 8011adc:	e78f      	b.n	80119fe <__ieee754_pow+0xfe>
 8011ade:	9b04      	ldr	r3, [sp, #16]
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	f47f af2c 	bne.w	801193e <__ieee754_pow+0x3e>
 8011ae6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011aea:	4619      	mov	r1, r3
 8011aec:	e727      	b.n	801193e <__ieee754_pow+0x3e>
 8011aee:	0feb      	lsrs	r3, r5, #31
 8011af0:	3b01      	subs	r3, #1
 8011af2:	9306      	str	r3, [sp, #24]
 8011af4:	9a06      	ldr	r2, [sp, #24]
 8011af6:	9b04      	ldr	r3, [sp, #16]
 8011af8:	4313      	orrs	r3, r2
 8011afa:	d102      	bne.n	8011b02 <__ieee754_pow+0x202>
 8011afc:	4632      	mov	r2, r6
 8011afe:	463b      	mov	r3, r7
 8011b00:	e7e6      	b.n	8011ad0 <__ieee754_pow+0x1d0>
 8011b02:	4b19      	ldr	r3, [pc, #100]	; (8011b68 <__ieee754_pow+0x268>)
 8011b04:	4598      	cmp	r8, r3
 8011b06:	f340 80fb 	ble.w	8011d00 <__ieee754_pow+0x400>
 8011b0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011b0e:	4598      	cmp	r8, r3
 8011b10:	4b13      	ldr	r3, [pc, #76]	; (8011b60 <__ieee754_pow+0x260>)
 8011b12:	dd0c      	ble.n	8011b2e <__ieee754_pow+0x22e>
 8011b14:	429c      	cmp	r4, r3
 8011b16:	dc0f      	bgt.n	8011b38 <__ieee754_pow+0x238>
 8011b18:	f1b9 0f00 	cmp.w	r9, #0
 8011b1c:	da0f      	bge.n	8011b3e <__ieee754_pow+0x23e>
 8011b1e:	2000      	movs	r0, #0
 8011b20:	b009      	add	sp, #36	; 0x24
 8011b22:	ecbd 8b06 	vpop	{d8-d10}
 8011b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b2a:	f001 bbd6 	b.w	80132da <__math_oflow>
 8011b2e:	429c      	cmp	r4, r3
 8011b30:	dbf2      	blt.n	8011b18 <__ieee754_pow+0x218>
 8011b32:	4b0a      	ldr	r3, [pc, #40]	; (8011b5c <__ieee754_pow+0x25c>)
 8011b34:	429c      	cmp	r4, r3
 8011b36:	dd19      	ble.n	8011b6c <__ieee754_pow+0x26c>
 8011b38:	f1b9 0f00 	cmp.w	r9, #0
 8011b3c:	dcef      	bgt.n	8011b1e <__ieee754_pow+0x21e>
 8011b3e:	2000      	movs	r0, #0
 8011b40:	b009      	add	sp, #36	; 0x24
 8011b42:	ecbd 8b06 	vpop	{d8-d10}
 8011b46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4a:	f001 bbbd 	b.w	80132c8 <__math_uflow>
 8011b4e:	bf00      	nop
 8011b50:	fff00000 	.word	0xfff00000
 8011b54:	7ff00000 	.word	0x7ff00000
 8011b58:	433fffff 	.word	0x433fffff
 8011b5c:	3ff00000 	.word	0x3ff00000
 8011b60:	3fefffff 	.word	0x3fefffff
 8011b64:	3fe00000 	.word	0x3fe00000
 8011b68:	41e00000 	.word	0x41e00000
 8011b6c:	4b60      	ldr	r3, [pc, #384]	; (8011cf0 <__ieee754_pow+0x3f0>)
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f7ee fb8a 	bl	8000288 <__aeabi_dsub>
 8011b74:	a354      	add	r3, pc, #336	; (adr r3, 8011cc8 <__ieee754_pow+0x3c8>)
 8011b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	460d      	mov	r5, r1
 8011b7e:	f7ee fd3b 	bl	80005f8 <__aeabi_dmul>
 8011b82:	a353      	add	r3, pc, #332	; (adr r3, 8011cd0 <__ieee754_pow+0x3d0>)
 8011b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b88:	4606      	mov	r6, r0
 8011b8a:	460f      	mov	r7, r1
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	4629      	mov	r1, r5
 8011b90:	f7ee fd32 	bl	80005f8 <__aeabi_dmul>
 8011b94:	4b57      	ldr	r3, [pc, #348]	; (8011cf4 <__ieee754_pow+0x3f4>)
 8011b96:	4682      	mov	sl, r0
 8011b98:	468b      	mov	fp, r1
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	4629      	mov	r1, r5
 8011ba0:	f7ee fd2a 	bl	80005f8 <__aeabi_dmul>
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	a14b      	add	r1, pc, #300	; (adr r1, 8011cd8 <__ieee754_pow+0x3d8>)
 8011baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bae:	f7ee fb6b 	bl	8000288 <__aeabi_dsub>
 8011bb2:	4622      	mov	r2, r4
 8011bb4:	462b      	mov	r3, r5
 8011bb6:	f7ee fd1f 	bl	80005f8 <__aeabi_dmul>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	494d      	ldr	r1, [pc, #308]	; (8011cf8 <__ieee754_pow+0x3f8>)
 8011bc2:	f7ee fb61 	bl	8000288 <__aeabi_dsub>
 8011bc6:	4622      	mov	r2, r4
 8011bc8:	4680      	mov	r8, r0
 8011bca:	4689      	mov	r9, r1
 8011bcc:	462b      	mov	r3, r5
 8011bce:	4620      	mov	r0, r4
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	f7ee fd11 	bl	80005f8 <__aeabi_dmul>
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	460b      	mov	r3, r1
 8011bda:	4640      	mov	r0, r8
 8011bdc:	4649      	mov	r1, r9
 8011bde:	f7ee fd0b 	bl	80005f8 <__aeabi_dmul>
 8011be2:	a33f      	add	r3, pc, #252	; (adr r3, 8011ce0 <__ieee754_pow+0x3e0>)
 8011be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be8:	f7ee fd06 	bl	80005f8 <__aeabi_dmul>
 8011bec:	4602      	mov	r2, r0
 8011bee:	460b      	mov	r3, r1
 8011bf0:	4650      	mov	r0, sl
 8011bf2:	4659      	mov	r1, fp
 8011bf4:	f7ee fb48 	bl	8000288 <__aeabi_dsub>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	4680      	mov	r8, r0
 8011bfe:	4689      	mov	r9, r1
 8011c00:	4630      	mov	r0, r6
 8011c02:	4639      	mov	r1, r7
 8011c04:	f7ee fb42 	bl	800028c <__adddf3>
 8011c08:	2000      	movs	r0, #0
 8011c0a:	4632      	mov	r2, r6
 8011c0c:	463b      	mov	r3, r7
 8011c0e:	4604      	mov	r4, r0
 8011c10:	460d      	mov	r5, r1
 8011c12:	f7ee fb39 	bl	8000288 <__aeabi_dsub>
 8011c16:	4602      	mov	r2, r0
 8011c18:	460b      	mov	r3, r1
 8011c1a:	4640      	mov	r0, r8
 8011c1c:	4649      	mov	r1, r9
 8011c1e:	f7ee fb33 	bl	8000288 <__aeabi_dsub>
 8011c22:	9b04      	ldr	r3, [sp, #16]
 8011c24:	9a06      	ldr	r2, [sp, #24]
 8011c26:	3b01      	subs	r3, #1
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	4682      	mov	sl, r0
 8011c2c:	468b      	mov	fp, r1
 8011c2e:	f040 81e7 	bne.w	8012000 <__ieee754_pow+0x700>
 8011c32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011ce8 <__ieee754_pow+0x3e8>
 8011c36:	eeb0 8a47 	vmov.f32	s16, s14
 8011c3a:	eef0 8a67 	vmov.f32	s17, s15
 8011c3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011c42:	2600      	movs	r6, #0
 8011c44:	4632      	mov	r2, r6
 8011c46:	463b      	mov	r3, r7
 8011c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c4c:	f7ee fb1c 	bl	8000288 <__aeabi_dsub>
 8011c50:	4622      	mov	r2, r4
 8011c52:	462b      	mov	r3, r5
 8011c54:	f7ee fcd0 	bl	80005f8 <__aeabi_dmul>
 8011c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c5c:	4680      	mov	r8, r0
 8011c5e:	4689      	mov	r9, r1
 8011c60:	4650      	mov	r0, sl
 8011c62:	4659      	mov	r1, fp
 8011c64:	f7ee fcc8 	bl	80005f8 <__aeabi_dmul>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	4640      	mov	r0, r8
 8011c6e:	4649      	mov	r1, r9
 8011c70:	f7ee fb0c 	bl	800028c <__adddf3>
 8011c74:	4632      	mov	r2, r6
 8011c76:	463b      	mov	r3, r7
 8011c78:	4680      	mov	r8, r0
 8011c7a:	4689      	mov	r9, r1
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	4629      	mov	r1, r5
 8011c80:	f7ee fcba 	bl	80005f8 <__aeabi_dmul>
 8011c84:	460b      	mov	r3, r1
 8011c86:	4604      	mov	r4, r0
 8011c88:	460d      	mov	r5, r1
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	4649      	mov	r1, r9
 8011c8e:	4640      	mov	r0, r8
 8011c90:	f7ee fafc 	bl	800028c <__adddf3>
 8011c94:	4b19      	ldr	r3, [pc, #100]	; (8011cfc <__ieee754_pow+0x3fc>)
 8011c96:	4299      	cmp	r1, r3
 8011c98:	ec45 4b19 	vmov	d9, r4, r5
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	460f      	mov	r7, r1
 8011ca0:	468b      	mov	fp, r1
 8011ca2:	f340 82f1 	ble.w	8012288 <__ieee754_pow+0x988>
 8011ca6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011caa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011cae:	4303      	orrs	r3, r0
 8011cb0:	f000 81e4 	beq.w	801207c <__ieee754_pow+0x77c>
 8011cb4:	ec51 0b18 	vmov	r0, r1, d8
 8011cb8:	2200      	movs	r2, #0
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f7ee ff0e 	bl	8000adc <__aeabi_dcmplt>
 8011cc0:	3800      	subs	r0, #0
 8011cc2:	bf18      	it	ne
 8011cc4:	2001      	movne	r0, #1
 8011cc6:	e72b      	b.n	8011b20 <__ieee754_pow+0x220>
 8011cc8:	60000000 	.word	0x60000000
 8011ccc:	3ff71547 	.word	0x3ff71547
 8011cd0:	f85ddf44 	.word	0xf85ddf44
 8011cd4:	3e54ae0b 	.word	0x3e54ae0b
 8011cd8:	55555555 	.word	0x55555555
 8011cdc:	3fd55555 	.word	0x3fd55555
 8011ce0:	652b82fe 	.word	0x652b82fe
 8011ce4:	3ff71547 	.word	0x3ff71547
 8011ce8:	00000000 	.word	0x00000000
 8011cec:	bff00000 	.word	0xbff00000
 8011cf0:	3ff00000 	.word	0x3ff00000
 8011cf4:	3fd00000 	.word	0x3fd00000
 8011cf8:	3fe00000 	.word	0x3fe00000
 8011cfc:	408fffff 	.word	0x408fffff
 8011d00:	4bd5      	ldr	r3, [pc, #852]	; (8012058 <__ieee754_pow+0x758>)
 8011d02:	402b      	ands	r3, r5
 8011d04:	2200      	movs	r2, #0
 8011d06:	b92b      	cbnz	r3, 8011d14 <__ieee754_pow+0x414>
 8011d08:	4bd4      	ldr	r3, [pc, #848]	; (801205c <__ieee754_pow+0x75c>)
 8011d0a:	f7ee fc75 	bl	80005f8 <__aeabi_dmul>
 8011d0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011d12:	460c      	mov	r4, r1
 8011d14:	1523      	asrs	r3, r4, #20
 8011d16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011d1a:	4413      	add	r3, r2
 8011d1c:	9305      	str	r3, [sp, #20]
 8011d1e:	4bd0      	ldr	r3, [pc, #832]	; (8012060 <__ieee754_pow+0x760>)
 8011d20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011d24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011d28:	429c      	cmp	r4, r3
 8011d2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011d2e:	dd08      	ble.n	8011d42 <__ieee754_pow+0x442>
 8011d30:	4bcc      	ldr	r3, [pc, #816]	; (8012064 <__ieee754_pow+0x764>)
 8011d32:	429c      	cmp	r4, r3
 8011d34:	f340 8162 	ble.w	8011ffc <__ieee754_pow+0x6fc>
 8011d38:	9b05      	ldr	r3, [sp, #20]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	9305      	str	r3, [sp, #20]
 8011d3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011d42:	2400      	movs	r4, #0
 8011d44:	00e3      	lsls	r3, r4, #3
 8011d46:	9307      	str	r3, [sp, #28]
 8011d48:	4bc7      	ldr	r3, [pc, #796]	; (8012068 <__ieee754_pow+0x768>)
 8011d4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d4e:	ed93 7b00 	vldr	d7, [r3]
 8011d52:	4629      	mov	r1, r5
 8011d54:	ec53 2b17 	vmov	r2, r3, d7
 8011d58:	eeb0 9a47 	vmov.f32	s18, s14
 8011d5c:	eef0 9a67 	vmov.f32	s19, s15
 8011d60:	4682      	mov	sl, r0
 8011d62:	f7ee fa91 	bl	8000288 <__aeabi_dsub>
 8011d66:	4652      	mov	r2, sl
 8011d68:	4606      	mov	r6, r0
 8011d6a:	460f      	mov	r7, r1
 8011d6c:	462b      	mov	r3, r5
 8011d6e:	ec51 0b19 	vmov	r0, r1, d9
 8011d72:	f7ee fa8b 	bl	800028c <__adddf3>
 8011d76:	4602      	mov	r2, r0
 8011d78:	460b      	mov	r3, r1
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	49bb      	ldr	r1, [pc, #748]	; (801206c <__ieee754_pow+0x76c>)
 8011d7e:	f7ee fd65 	bl	800084c <__aeabi_ddiv>
 8011d82:	ec41 0b1a 	vmov	d10, r0, r1
 8011d86:	4602      	mov	r2, r0
 8011d88:	460b      	mov	r3, r1
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	4639      	mov	r1, r7
 8011d8e:	f7ee fc33 	bl	80005f8 <__aeabi_dmul>
 8011d92:	2300      	movs	r3, #0
 8011d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d98:	9302      	str	r3, [sp, #8]
 8011d9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011d9e:	46ab      	mov	fp, r5
 8011da0:	106d      	asrs	r5, r5, #1
 8011da2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011da6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011daa:	ec41 0b18 	vmov	d8, r0, r1
 8011dae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011db2:	2200      	movs	r2, #0
 8011db4:	4640      	mov	r0, r8
 8011db6:	4649      	mov	r1, r9
 8011db8:	4614      	mov	r4, r2
 8011dba:	461d      	mov	r5, r3
 8011dbc:	f7ee fc1c 	bl	80005f8 <__aeabi_dmul>
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	460b      	mov	r3, r1
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	4639      	mov	r1, r7
 8011dc8:	f7ee fa5e 	bl	8000288 <__aeabi_dsub>
 8011dcc:	ec53 2b19 	vmov	r2, r3, d9
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	460f      	mov	r7, r1
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	4629      	mov	r1, r5
 8011dd8:	f7ee fa56 	bl	8000288 <__aeabi_dsub>
 8011ddc:	4602      	mov	r2, r0
 8011dde:	460b      	mov	r3, r1
 8011de0:	4650      	mov	r0, sl
 8011de2:	4659      	mov	r1, fp
 8011de4:	f7ee fa50 	bl	8000288 <__aeabi_dsub>
 8011de8:	4642      	mov	r2, r8
 8011dea:	464b      	mov	r3, r9
 8011dec:	f7ee fc04 	bl	80005f8 <__aeabi_dmul>
 8011df0:	4602      	mov	r2, r0
 8011df2:	460b      	mov	r3, r1
 8011df4:	4630      	mov	r0, r6
 8011df6:	4639      	mov	r1, r7
 8011df8:	f7ee fa46 	bl	8000288 <__aeabi_dsub>
 8011dfc:	ec53 2b1a 	vmov	r2, r3, d10
 8011e00:	f7ee fbfa 	bl	80005f8 <__aeabi_dmul>
 8011e04:	ec53 2b18 	vmov	r2, r3, d8
 8011e08:	ec41 0b19 	vmov	d9, r0, r1
 8011e0c:	ec51 0b18 	vmov	r0, r1, d8
 8011e10:	f7ee fbf2 	bl	80005f8 <__aeabi_dmul>
 8011e14:	a37c      	add	r3, pc, #496	; (adr r3, 8012008 <__ieee754_pow+0x708>)
 8011e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	460d      	mov	r5, r1
 8011e1e:	f7ee fbeb 	bl	80005f8 <__aeabi_dmul>
 8011e22:	a37b      	add	r3, pc, #492	; (adr r3, 8012010 <__ieee754_pow+0x710>)
 8011e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e28:	f7ee fa30 	bl	800028c <__adddf3>
 8011e2c:	4622      	mov	r2, r4
 8011e2e:	462b      	mov	r3, r5
 8011e30:	f7ee fbe2 	bl	80005f8 <__aeabi_dmul>
 8011e34:	a378      	add	r3, pc, #480	; (adr r3, 8012018 <__ieee754_pow+0x718>)
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	f7ee fa27 	bl	800028c <__adddf3>
 8011e3e:	4622      	mov	r2, r4
 8011e40:	462b      	mov	r3, r5
 8011e42:	f7ee fbd9 	bl	80005f8 <__aeabi_dmul>
 8011e46:	a376      	add	r3, pc, #472	; (adr r3, 8012020 <__ieee754_pow+0x720>)
 8011e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4c:	f7ee fa1e 	bl	800028c <__adddf3>
 8011e50:	4622      	mov	r2, r4
 8011e52:	462b      	mov	r3, r5
 8011e54:	f7ee fbd0 	bl	80005f8 <__aeabi_dmul>
 8011e58:	a373      	add	r3, pc, #460	; (adr r3, 8012028 <__ieee754_pow+0x728>)
 8011e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5e:	f7ee fa15 	bl	800028c <__adddf3>
 8011e62:	4622      	mov	r2, r4
 8011e64:	462b      	mov	r3, r5
 8011e66:	f7ee fbc7 	bl	80005f8 <__aeabi_dmul>
 8011e6a:	a371      	add	r3, pc, #452	; (adr r3, 8012030 <__ieee754_pow+0x730>)
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	f7ee fa0c 	bl	800028c <__adddf3>
 8011e74:	4622      	mov	r2, r4
 8011e76:	4606      	mov	r6, r0
 8011e78:	460f      	mov	r7, r1
 8011e7a:	462b      	mov	r3, r5
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	4629      	mov	r1, r5
 8011e80:	f7ee fbba 	bl	80005f8 <__aeabi_dmul>
 8011e84:	4602      	mov	r2, r0
 8011e86:	460b      	mov	r3, r1
 8011e88:	4630      	mov	r0, r6
 8011e8a:	4639      	mov	r1, r7
 8011e8c:	f7ee fbb4 	bl	80005f8 <__aeabi_dmul>
 8011e90:	4642      	mov	r2, r8
 8011e92:	4604      	mov	r4, r0
 8011e94:	460d      	mov	r5, r1
 8011e96:	464b      	mov	r3, r9
 8011e98:	ec51 0b18 	vmov	r0, r1, d8
 8011e9c:	f7ee f9f6 	bl	800028c <__adddf3>
 8011ea0:	ec53 2b19 	vmov	r2, r3, d9
 8011ea4:	f7ee fba8 	bl	80005f8 <__aeabi_dmul>
 8011ea8:	4622      	mov	r2, r4
 8011eaa:	462b      	mov	r3, r5
 8011eac:	f7ee f9ee 	bl	800028c <__adddf3>
 8011eb0:	4642      	mov	r2, r8
 8011eb2:	4682      	mov	sl, r0
 8011eb4:	468b      	mov	fp, r1
 8011eb6:	464b      	mov	r3, r9
 8011eb8:	4640      	mov	r0, r8
 8011eba:	4649      	mov	r1, r9
 8011ebc:	f7ee fb9c 	bl	80005f8 <__aeabi_dmul>
 8011ec0:	4b6b      	ldr	r3, [pc, #428]	; (8012070 <__ieee754_pow+0x770>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	460f      	mov	r7, r1
 8011ec8:	f7ee f9e0 	bl	800028c <__adddf3>
 8011ecc:	4652      	mov	r2, sl
 8011ece:	465b      	mov	r3, fp
 8011ed0:	f7ee f9dc 	bl	800028c <__adddf3>
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	460d      	mov	r5, r1
 8011eda:	4602      	mov	r2, r0
 8011edc:	460b      	mov	r3, r1
 8011ede:	4640      	mov	r0, r8
 8011ee0:	4649      	mov	r1, r9
 8011ee2:	f7ee fb89 	bl	80005f8 <__aeabi_dmul>
 8011ee6:	4b62      	ldr	r3, [pc, #392]	; (8012070 <__ieee754_pow+0x770>)
 8011ee8:	4680      	mov	r8, r0
 8011eea:	4689      	mov	r9, r1
 8011eec:	2200      	movs	r2, #0
 8011eee:	4620      	mov	r0, r4
 8011ef0:	4629      	mov	r1, r5
 8011ef2:	f7ee f9c9 	bl	8000288 <__aeabi_dsub>
 8011ef6:	4632      	mov	r2, r6
 8011ef8:	463b      	mov	r3, r7
 8011efa:	f7ee f9c5 	bl	8000288 <__aeabi_dsub>
 8011efe:	4602      	mov	r2, r0
 8011f00:	460b      	mov	r3, r1
 8011f02:	4650      	mov	r0, sl
 8011f04:	4659      	mov	r1, fp
 8011f06:	f7ee f9bf 	bl	8000288 <__aeabi_dsub>
 8011f0a:	ec53 2b18 	vmov	r2, r3, d8
 8011f0e:	f7ee fb73 	bl	80005f8 <__aeabi_dmul>
 8011f12:	4622      	mov	r2, r4
 8011f14:	4606      	mov	r6, r0
 8011f16:	460f      	mov	r7, r1
 8011f18:	462b      	mov	r3, r5
 8011f1a:	ec51 0b19 	vmov	r0, r1, d9
 8011f1e:	f7ee fb6b 	bl	80005f8 <__aeabi_dmul>
 8011f22:	4602      	mov	r2, r0
 8011f24:	460b      	mov	r3, r1
 8011f26:	4630      	mov	r0, r6
 8011f28:	4639      	mov	r1, r7
 8011f2a:	f7ee f9af 	bl	800028c <__adddf3>
 8011f2e:	4606      	mov	r6, r0
 8011f30:	460f      	mov	r7, r1
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	4640      	mov	r0, r8
 8011f38:	4649      	mov	r1, r9
 8011f3a:	f7ee f9a7 	bl	800028c <__adddf3>
 8011f3e:	a33e      	add	r3, pc, #248	; (adr r3, 8012038 <__ieee754_pow+0x738>)
 8011f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f44:	2000      	movs	r0, #0
 8011f46:	4604      	mov	r4, r0
 8011f48:	460d      	mov	r5, r1
 8011f4a:	f7ee fb55 	bl	80005f8 <__aeabi_dmul>
 8011f4e:	4642      	mov	r2, r8
 8011f50:	ec41 0b18 	vmov	d8, r0, r1
 8011f54:	464b      	mov	r3, r9
 8011f56:	4620      	mov	r0, r4
 8011f58:	4629      	mov	r1, r5
 8011f5a:	f7ee f995 	bl	8000288 <__aeabi_dsub>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	460b      	mov	r3, r1
 8011f62:	4630      	mov	r0, r6
 8011f64:	4639      	mov	r1, r7
 8011f66:	f7ee f98f 	bl	8000288 <__aeabi_dsub>
 8011f6a:	a335      	add	r3, pc, #212	; (adr r3, 8012040 <__ieee754_pow+0x740>)
 8011f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f70:	f7ee fb42 	bl	80005f8 <__aeabi_dmul>
 8011f74:	a334      	add	r3, pc, #208	; (adr r3, 8012048 <__ieee754_pow+0x748>)
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	460f      	mov	r7, r1
 8011f7e:	4620      	mov	r0, r4
 8011f80:	4629      	mov	r1, r5
 8011f82:	f7ee fb39 	bl	80005f8 <__aeabi_dmul>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	4639      	mov	r1, r7
 8011f8e:	f7ee f97d 	bl	800028c <__adddf3>
 8011f92:	9a07      	ldr	r2, [sp, #28]
 8011f94:	4b37      	ldr	r3, [pc, #220]	; (8012074 <__ieee754_pow+0x774>)
 8011f96:	4413      	add	r3, r2
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	f7ee f976 	bl	800028c <__adddf3>
 8011fa0:	4682      	mov	sl, r0
 8011fa2:	9805      	ldr	r0, [sp, #20]
 8011fa4:	468b      	mov	fp, r1
 8011fa6:	f7ee fabd 	bl	8000524 <__aeabi_i2d>
 8011faa:	9a07      	ldr	r2, [sp, #28]
 8011fac:	4b32      	ldr	r3, [pc, #200]	; (8012078 <__ieee754_pow+0x778>)
 8011fae:	4413      	add	r3, r2
 8011fb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011fb4:	4606      	mov	r6, r0
 8011fb6:	460f      	mov	r7, r1
 8011fb8:	4652      	mov	r2, sl
 8011fba:	465b      	mov	r3, fp
 8011fbc:	ec51 0b18 	vmov	r0, r1, d8
 8011fc0:	f7ee f964 	bl	800028c <__adddf3>
 8011fc4:	4642      	mov	r2, r8
 8011fc6:	464b      	mov	r3, r9
 8011fc8:	f7ee f960 	bl	800028c <__adddf3>
 8011fcc:	4632      	mov	r2, r6
 8011fce:	463b      	mov	r3, r7
 8011fd0:	f7ee f95c 	bl	800028c <__adddf3>
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	4632      	mov	r2, r6
 8011fd8:	463b      	mov	r3, r7
 8011fda:	4604      	mov	r4, r0
 8011fdc:	460d      	mov	r5, r1
 8011fde:	f7ee f953 	bl	8000288 <__aeabi_dsub>
 8011fe2:	4642      	mov	r2, r8
 8011fe4:	464b      	mov	r3, r9
 8011fe6:	f7ee f94f 	bl	8000288 <__aeabi_dsub>
 8011fea:	ec53 2b18 	vmov	r2, r3, d8
 8011fee:	f7ee f94b 	bl	8000288 <__aeabi_dsub>
 8011ff2:	4602      	mov	r2, r0
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	4650      	mov	r0, sl
 8011ff8:	4659      	mov	r1, fp
 8011ffa:	e610      	b.n	8011c1e <__ieee754_pow+0x31e>
 8011ffc:	2401      	movs	r4, #1
 8011ffe:	e6a1      	b.n	8011d44 <__ieee754_pow+0x444>
 8012000:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012050 <__ieee754_pow+0x750>
 8012004:	e617      	b.n	8011c36 <__ieee754_pow+0x336>
 8012006:	bf00      	nop
 8012008:	4a454eef 	.word	0x4a454eef
 801200c:	3fca7e28 	.word	0x3fca7e28
 8012010:	93c9db65 	.word	0x93c9db65
 8012014:	3fcd864a 	.word	0x3fcd864a
 8012018:	a91d4101 	.word	0xa91d4101
 801201c:	3fd17460 	.word	0x3fd17460
 8012020:	518f264d 	.word	0x518f264d
 8012024:	3fd55555 	.word	0x3fd55555
 8012028:	db6fabff 	.word	0xdb6fabff
 801202c:	3fdb6db6 	.word	0x3fdb6db6
 8012030:	33333303 	.word	0x33333303
 8012034:	3fe33333 	.word	0x3fe33333
 8012038:	e0000000 	.word	0xe0000000
 801203c:	3feec709 	.word	0x3feec709
 8012040:	dc3a03fd 	.word	0xdc3a03fd
 8012044:	3feec709 	.word	0x3feec709
 8012048:	145b01f5 	.word	0x145b01f5
 801204c:	be3e2fe0 	.word	0xbe3e2fe0
 8012050:	00000000 	.word	0x00000000
 8012054:	3ff00000 	.word	0x3ff00000
 8012058:	7ff00000 	.word	0x7ff00000
 801205c:	43400000 	.word	0x43400000
 8012060:	0003988e 	.word	0x0003988e
 8012064:	000bb679 	.word	0x000bb679
 8012068:	08021de0 	.word	0x08021de0
 801206c:	3ff00000 	.word	0x3ff00000
 8012070:	40080000 	.word	0x40080000
 8012074:	08021e00 	.word	0x08021e00
 8012078:	08021df0 	.word	0x08021df0
 801207c:	a3b5      	add	r3, pc, #724	; (adr r3, 8012354 <__ieee754_pow+0xa54>)
 801207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012082:	4640      	mov	r0, r8
 8012084:	4649      	mov	r1, r9
 8012086:	f7ee f901 	bl	800028c <__adddf3>
 801208a:	4622      	mov	r2, r4
 801208c:	ec41 0b1a 	vmov	d10, r0, r1
 8012090:	462b      	mov	r3, r5
 8012092:	4630      	mov	r0, r6
 8012094:	4639      	mov	r1, r7
 8012096:	f7ee f8f7 	bl	8000288 <__aeabi_dsub>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	ec51 0b1a 	vmov	r0, r1, d10
 80120a2:	f7ee fd39 	bl	8000b18 <__aeabi_dcmpgt>
 80120a6:	2800      	cmp	r0, #0
 80120a8:	f47f ae04 	bne.w	8011cb4 <__ieee754_pow+0x3b4>
 80120ac:	4aa4      	ldr	r2, [pc, #656]	; (8012340 <__ieee754_pow+0xa40>)
 80120ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80120b2:	4293      	cmp	r3, r2
 80120b4:	f340 8108 	ble.w	80122c8 <__ieee754_pow+0x9c8>
 80120b8:	151b      	asrs	r3, r3, #20
 80120ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80120be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80120c2:	fa4a f303 	asr.w	r3, sl, r3
 80120c6:	445b      	add	r3, fp
 80120c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80120cc:	4e9d      	ldr	r6, [pc, #628]	; (8012344 <__ieee754_pow+0xa44>)
 80120ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80120d2:	4116      	asrs	r6, r2
 80120d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80120d8:	2000      	movs	r0, #0
 80120da:	ea23 0106 	bic.w	r1, r3, r6
 80120de:	f1c2 0214 	rsb	r2, r2, #20
 80120e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80120e6:	fa4a fa02 	asr.w	sl, sl, r2
 80120ea:	f1bb 0f00 	cmp.w	fp, #0
 80120ee:	4602      	mov	r2, r0
 80120f0:	460b      	mov	r3, r1
 80120f2:	4620      	mov	r0, r4
 80120f4:	4629      	mov	r1, r5
 80120f6:	bfb8      	it	lt
 80120f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80120fc:	f7ee f8c4 	bl	8000288 <__aeabi_dsub>
 8012100:	ec41 0b19 	vmov	d9, r0, r1
 8012104:	4642      	mov	r2, r8
 8012106:	464b      	mov	r3, r9
 8012108:	ec51 0b19 	vmov	r0, r1, d9
 801210c:	f7ee f8be 	bl	800028c <__adddf3>
 8012110:	a37b      	add	r3, pc, #492	; (adr r3, 8012300 <__ieee754_pow+0xa00>)
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	2000      	movs	r0, #0
 8012118:	4604      	mov	r4, r0
 801211a:	460d      	mov	r5, r1
 801211c:	f7ee fa6c 	bl	80005f8 <__aeabi_dmul>
 8012120:	ec53 2b19 	vmov	r2, r3, d9
 8012124:	4606      	mov	r6, r0
 8012126:	460f      	mov	r7, r1
 8012128:	4620      	mov	r0, r4
 801212a:	4629      	mov	r1, r5
 801212c:	f7ee f8ac 	bl	8000288 <__aeabi_dsub>
 8012130:	4602      	mov	r2, r0
 8012132:	460b      	mov	r3, r1
 8012134:	4640      	mov	r0, r8
 8012136:	4649      	mov	r1, r9
 8012138:	f7ee f8a6 	bl	8000288 <__aeabi_dsub>
 801213c:	a372      	add	r3, pc, #456	; (adr r3, 8012308 <__ieee754_pow+0xa08>)
 801213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012142:	f7ee fa59 	bl	80005f8 <__aeabi_dmul>
 8012146:	a372      	add	r3, pc, #456	; (adr r3, 8012310 <__ieee754_pow+0xa10>)
 8012148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214c:	4680      	mov	r8, r0
 801214e:	4689      	mov	r9, r1
 8012150:	4620      	mov	r0, r4
 8012152:	4629      	mov	r1, r5
 8012154:	f7ee fa50 	bl	80005f8 <__aeabi_dmul>
 8012158:	4602      	mov	r2, r0
 801215a:	460b      	mov	r3, r1
 801215c:	4640      	mov	r0, r8
 801215e:	4649      	mov	r1, r9
 8012160:	f7ee f894 	bl	800028c <__adddf3>
 8012164:	4604      	mov	r4, r0
 8012166:	460d      	mov	r5, r1
 8012168:	4602      	mov	r2, r0
 801216a:	460b      	mov	r3, r1
 801216c:	4630      	mov	r0, r6
 801216e:	4639      	mov	r1, r7
 8012170:	f7ee f88c 	bl	800028c <__adddf3>
 8012174:	4632      	mov	r2, r6
 8012176:	463b      	mov	r3, r7
 8012178:	4680      	mov	r8, r0
 801217a:	4689      	mov	r9, r1
 801217c:	f7ee f884 	bl	8000288 <__aeabi_dsub>
 8012180:	4602      	mov	r2, r0
 8012182:	460b      	mov	r3, r1
 8012184:	4620      	mov	r0, r4
 8012186:	4629      	mov	r1, r5
 8012188:	f7ee f87e 	bl	8000288 <__aeabi_dsub>
 801218c:	4642      	mov	r2, r8
 801218e:	4606      	mov	r6, r0
 8012190:	460f      	mov	r7, r1
 8012192:	464b      	mov	r3, r9
 8012194:	4640      	mov	r0, r8
 8012196:	4649      	mov	r1, r9
 8012198:	f7ee fa2e 	bl	80005f8 <__aeabi_dmul>
 801219c:	a35e      	add	r3, pc, #376	; (adr r3, 8012318 <__ieee754_pow+0xa18>)
 801219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a2:	4604      	mov	r4, r0
 80121a4:	460d      	mov	r5, r1
 80121a6:	f7ee fa27 	bl	80005f8 <__aeabi_dmul>
 80121aa:	a35d      	add	r3, pc, #372	; (adr r3, 8012320 <__ieee754_pow+0xa20>)
 80121ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b0:	f7ee f86a 	bl	8000288 <__aeabi_dsub>
 80121b4:	4622      	mov	r2, r4
 80121b6:	462b      	mov	r3, r5
 80121b8:	f7ee fa1e 	bl	80005f8 <__aeabi_dmul>
 80121bc:	a35a      	add	r3, pc, #360	; (adr r3, 8012328 <__ieee754_pow+0xa28>)
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	f7ee f863 	bl	800028c <__adddf3>
 80121c6:	4622      	mov	r2, r4
 80121c8:	462b      	mov	r3, r5
 80121ca:	f7ee fa15 	bl	80005f8 <__aeabi_dmul>
 80121ce:	a358      	add	r3, pc, #352	; (adr r3, 8012330 <__ieee754_pow+0xa30>)
 80121d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d4:	f7ee f858 	bl	8000288 <__aeabi_dsub>
 80121d8:	4622      	mov	r2, r4
 80121da:	462b      	mov	r3, r5
 80121dc:	f7ee fa0c 	bl	80005f8 <__aeabi_dmul>
 80121e0:	a355      	add	r3, pc, #340	; (adr r3, 8012338 <__ieee754_pow+0xa38>)
 80121e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e6:	f7ee f851 	bl	800028c <__adddf3>
 80121ea:	4622      	mov	r2, r4
 80121ec:	462b      	mov	r3, r5
 80121ee:	f7ee fa03 	bl	80005f8 <__aeabi_dmul>
 80121f2:	4602      	mov	r2, r0
 80121f4:	460b      	mov	r3, r1
 80121f6:	4640      	mov	r0, r8
 80121f8:	4649      	mov	r1, r9
 80121fa:	f7ee f845 	bl	8000288 <__aeabi_dsub>
 80121fe:	4604      	mov	r4, r0
 8012200:	460d      	mov	r5, r1
 8012202:	4602      	mov	r2, r0
 8012204:	460b      	mov	r3, r1
 8012206:	4640      	mov	r0, r8
 8012208:	4649      	mov	r1, r9
 801220a:	f7ee f9f5 	bl	80005f8 <__aeabi_dmul>
 801220e:	2200      	movs	r2, #0
 8012210:	ec41 0b19 	vmov	d9, r0, r1
 8012214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012218:	4620      	mov	r0, r4
 801221a:	4629      	mov	r1, r5
 801221c:	f7ee f834 	bl	8000288 <__aeabi_dsub>
 8012220:	4602      	mov	r2, r0
 8012222:	460b      	mov	r3, r1
 8012224:	ec51 0b19 	vmov	r0, r1, d9
 8012228:	f7ee fb10 	bl	800084c <__aeabi_ddiv>
 801222c:	4632      	mov	r2, r6
 801222e:	4604      	mov	r4, r0
 8012230:	460d      	mov	r5, r1
 8012232:	463b      	mov	r3, r7
 8012234:	4640      	mov	r0, r8
 8012236:	4649      	mov	r1, r9
 8012238:	f7ee f9de 	bl	80005f8 <__aeabi_dmul>
 801223c:	4632      	mov	r2, r6
 801223e:	463b      	mov	r3, r7
 8012240:	f7ee f824 	bl	800028c <__adddf3>
 8012244:	4602      	mov	r2, r0
 8012246:	460b      	mov	r3, r1
 8012248:	4620      	mov	r0, r4
 801224a:	4629      	mov	r1, r5
 801224c:	f7ee f81c 	bl	8000288 <__aeabi_dsub>
 8012250:	4642      	mov	r2, r8
 8012252:	464b      	mov	r3, r9
 8012254:	f7ee f818 	bl	8000288 <__aeabi_dsub>
 8012258:	460b      	mov	r3, r1
 801225a:	4602      	mov	r2, r0
 801225c:	493a      	ldr	r1, [pc, #232]	; (8012348 <__ieee754_pow+0xa48>)
 801225e:	2000      	movs	r0, #0
 8012260:	f7ee f812 	bl	8000288 <__aeabi_dsub>
 8012264:	ec41 0b10 	vmov	d0, r0, r1
 8012268:	ee10 3a90 	vmov	r3, s1
 801226c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012274:	da2b      	bge.n	80122ce <__ieee754_pow+0x9ce>
 8012276:	4650      	mov	r0, sl
 8012278:	f001 f84e 	bl	8013318 <scalbn>
 801227c:	ec51 0b10 	vmov	r0, r1, d0
 8012280:	ec53 2b18 	vmov	r2, r3, d8
 8012284:	f7ff bbed 	b.w	8011a62 <__ieee754_pow+0x162>
 8012288:	4b30      	ldr	r3, [pc, #192]	; (801234c <__ieee754_pow+0xa4c>)
 801228a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801228e:	429e      	cmp	r6, r3
 8012290:	f77f af0c 	ble.w	80120ac <__ieee754_pow+0x7ac>
 8012294:	4b2e      	ldr	r3, [pc, #184]	; (8012350 <__ieee754_pow+0xa50>)
 8012296:	440b      	add	r3, r1
 8012298:	4303      	orrs	r3, r0
 801229a:	d009      	beq.n	80122b0 <__ieee754_pow+0x9b0>
 801229c:	ec51 0b18 	vmov	r0, r1, d8
 80122a0:	2200      	movs	r2, #0
 80122a2:	2300      	movs	r3, #0
 80122a4:	f7ee fc1a 	bl	8000adc <__aeabi_dcmplt>
 80122a8:	3800      	subs	r0, #0
 80122aa:	bf18      	it	ne
 80122ac:	2001      	movne	r0, #1
 80122ae:	e447      	b.n	8011b40 <__ieee754_pow+0x240>
 80122b0:	4622      	mov	r2, r4
 80122b2:	462b      	mov	r3, r5
 80122b4:	f7ed ffe8 	bl	8000288 <__aeabi_dsub>
 80122b8:	4642      	mov	r2, r8
 80122ba:	464b      	mov	r3, r9
 80122bc:	f7ee fc22 	bl	8000b04 <__aeabi_dcmpge>
 80122c0:	2800      	cmp	r0, #0
 80122c2:	f43f aef3 	beq.w	80120ac <__ieee754_pow+0x7ac>
 80122c6:	e7e9      	b.n	801229c <__ieee754_pow+0x99c>
 80122c8:	f04f 0a00 	mov.w	sl, #0
 80122cc:	e71a      	b.n	8012104 <__ieee754_pow+0x804>
 80122ce:	ec51 0b10 	vmov	r0, r1, d0
 80122d2:	4619      	mov	r1, r3
 80122d4:	e7d4      	b.n	8012280 <__ieee754_pow+0x980>
 80122d6:	491c      	ldr	r1, [pc, #112]	; (8012348 <__ieee754_pow+0xa48>)
 80122d8:	2000      	movs	r0, #0
 80122da:	f7ff bb30 	b.w	801193e <__ieee754_pow+0x3e>
 80122de:	2000      	movs	r0, #0
 80122e0:	2100      	movs	r1, #0
 80122e2:	f7ff bb2c 	b.w	801193e <__ieee754_pow+0x3e>
 80122e6:	4630      	mov	r0, r6
 80122e8:	4639      	mov	r1, r7
 80122ea:	f7ff bb28 	b.w	801193e <__ieee754_pow+0x3e>
 80122ee:	9204      	str	r2, [sp, #16]
 80122f0:	f7ff bb7a 	b.w	80119e8 <__ieee754_pow+0xe8>
 80122f4:	2300      	movs	r3, #0
 80122f6:	f7ff bb64 	b.w	80119c2 <__ieee754_pow+0xc2>
 80122fa:	bf00      	nop
 80122fc:	f3af 8000 	nop.w
 8012300:	00000000 	.word	0x00000000
 8012304:	3fe62e43 	.word	0x3fe62e43
 8012308:	fefa39ef 	.word	0xfefa39ef
 801230c:	3fe62e42 	.word	0x3fe62e42
 8012310:	0ca86c39 	.word	0x0ca86c39
 8012314:	be205c61 	.word	0xbe205c61
 8012318:	72bea4d0 	.word	0x72bea4d0
 801231c:	3e663769 	.word	0x3e663769
 8012320:	c5d26bf1 	.word	0xc5d26bf1
 8012324:	3ebbbd41 	.word	0x3ebbbd41
 8012328:	af25de2c 	.word	0xaf25de2c
 801232c:	3f11566a 	.word	0x3f11566a
 8012330:	16bebd93 	.word	0x16bebd93
 8012334:	3f66c16c 	.word	0x3f66c16c
 8012338:	5555553e 	.word	0x5555553e
 801233c:	3fc55555 	.word	0x3fc55555
 8012340:	3fe00000 	.word	0x3fe00000
 8012344:	000fffff 	.word	0x000fffff
 8012348:	3ff00000 	.word	0x3ff00000
 801234c:	4090cbff 	.word	0x4090cbff
 8012350:	3f6f3400 	.word	0x3f6f3400
 8012354:	652b82fe 	.word	0x652b82fe
 8012358:	3c971547 	.word	0x3c971547
 801235c:	00000000 	.word	0x00000000

08012360 <__ieee754_rem_pio2>:
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	ed2d 8b02 	vpush	{d8}
 8012368:	ec55 4b10 	vmov	r4, r5, d0
 801236c:	4bca      	ldr	r3, [pc, #808]	; (8012698 <__ieee754_rem_pio2+0x338>)
 801236e:	b08b      	sub	sp, #44	; 0x2c
 8012370:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012374:	4598      	cmp	r8, r3
 8012376:	4682      	mov	sl, r0
 8012378:	9502      	str	r5, [sp, #8]
 801237a:	dc08      	bgt.n	801238e <__ieee754_rem_pio2+0x2e>
 801237c:	2200      	movs	r2, #0
 801237e:	2300      	movs	r3, #0
 8012380:	ed80 0b00 	vstr	d0, [r0]
 8012384:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012388:	f04f 0b00 	mov.w	fp, #0
 801238c:	e028      	b.n	80123e0 <__ieee754_rem_pio2+0x80>
 801238e:	4bc3      	ldr	r3, [pc, #780]	; (801269c <__ieee754_rem_pio2+0x33c>)
 8012390:	4598      	cmp	r8, r3
 8012392:	dc78      	bgt.n	8012486 <__ieee754_rem_pio2+0x126>
 8012394:	9b02      	ldr	r3, [sp, #8]
 8012396:	4ec2      	ldr	r6, [pc, #776]	; (80126a0 <__ieee754_rem_pio2+0x340>)
 8012398:	2b00      	cmp	r3, #0
 801239a:	ee10 0a10 	vmov	r0, s0
 801239e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012660 <__ieee754_rem_pio2+0x300>)
 80123a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a4:	4629      	mov	r1, r5
 80123a6:	dd39      	ble.n	801241c <__ieee754_rem_pio2+0xbc>
 80123a8:	f7ed ff6e 	bl	8000288 <__aeabi_dsub>
 80123ac:	45b0      	cmp	r8, r6
 80123ae:	4604      	mov	r4, r0
 80123b0:	460d      	mov	r5, r1
 80123b2:	d01b      	beq.n	80123ec <__ieee754_rem_pio2+0x8c>
 80123b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8012668 <__ieee754_rem_pio2+0x308>)
 80123b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ba:	f7ed ff65 	bl	8000288 <__aeabi_dsub>
 80123be:	4602      	mov	r2, r0
 80123c0:	460b      	mov	r3, r1
 80123c2:	e9ca 2300 	strd	r2, r3, [sl]
 80123c6:	4620      	mov	r0, r4
 80123c8:	4629      	mov	r1, r5
 80123ca:	f7ed ff5d 	bl	8000288 <__aeabi_dsub>
 80123ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8012668 <__ieee754_rem_pio2+0x308>)
 80123d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d4:	f7ed ff58 	bl	8000288 <__aeabi_dsub>
 80123d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80123dc:	f04f 0b01 	mov.w	fp, #1
 80123e0:	4658      	mov	r0, fp
 80123e2:	b00b      	add	sp, #44	; 0x2c
 80123e4:	ecbd 8b02 	vpop	{d8}
 80123e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8012670 <__ieee754_rem_pio2+0x310>)
 80123ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f2:	f7ed ff49 	bl	8000288 <__aeabi_dsub>
 80123f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8012678 <__ieee754_rem_pio2+0x318>)
 80123f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fc:	4604      	mov	r4, r0
 80123fe:	460d      	mov	r5, r1
 8012400:	f7ed ff42 	bl	8000288 <__aeabi_dsub>
 8012404:	4602      	mov	r2, r0
 8012406:	460b      	mov	r3, r1
 8012408:	e9ca 2300 	strd	r2, r3, [sl]
 801240c:	4620      	mov	r0, r4
 801240e:	4629      	mov	r1, r5
 8012410:	f7ed ff3a 	bl	8000288 <__aeabi_dsub>
 8012414:	a398      	add	r3, pc, #608	; (adr r3, 8012678 <__ieee754_rem_pio2+0x318>)
 8012416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241a:	e7db      	b.n	80123d4 <__ieee754_rem_pio2+0x74>
 801241c:	f7ed ff36 	bl	800028c <__adddf3>
 8012420:	45b0      	cmp	r8, r6
 8012422:	4604      	mov	r4, r0
 8012424:	460d      	mov	r5, r1
 8012426:	d016      	beq.n	8012456 <__ieee754_rem_pio2+0xf6>
 8012428:	a38f      	add	r3, pc, #572	; (adr r3, 8012668 <__ieee754_rem_pio2+0x308>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	f7ed ff2d 	bl	800028c <__adddf3>
 8012432:	4602      	mov	r2, r0
 8012434:	460b      	mov	r3, r1
 8012436:	e9ca 2300 	strd	r2, r3, [sl]
 801243a:	4620      	mov	r0, r4
 801243c:	4629      	mov	r1, r5
 801243e:	f7ed ff23 	bl	8000288 <__aeabi_dsub>
 8012442:	a389      	add	r3, pc, #548	; (adr r3, 8012668 <__ieee754_rem_pio2+0x308>)
 8012444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012448:	f7ed ff20 	bl	800028c <__adddf3>
 801244c:	f04f 3bff 	mov.w	fp, #4294967295
 8012450:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012454:	e7c4      	b.n	80123e0 <__ieee754_rem_pio2+0x80>
 8012456:	a386      	add	r3, pc, #536	; (adr r3, 8012670 <__ieee754_rem_pio2+0x310>)
 8012458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245c:	f7ed ff16 	bl	800028c <__adddf3>
 8012460:	a385      	add	r3, pc, #532	; (adr r3, 8012678 <__ieee754_rem_pio2+0x318>)
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	4604      	mov	r4, r0
 8012468:	460d      	mov	r5, r1
 801246a:	f7ed ff0f 	bl	800028c <__adddf3>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	e9ca 2300 	strd	r2, r3, [sl]
 8012476:	4620      	mov	r0, r4
 8012478:	4629      	mov	r1, r5
 801247a:	f7ed ff05 	bl	8000288 <__aeabi_dsub>
 801247e:	a37e      	add	r3, pc, #504	; (adr r3, 8012678 <__ieee754_rem_pio2+0x318>)
 8012480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012484:	e7e0      	b.n	8012448 <__ieee754_rem_pio2+0xe8>
 8012486:	4b87      	ldr	r3, [pc, #540]	; (80126a4 <__ieee754_rem_pio2+0x344>)
 8012488:	4598      	cmp	r8, r3
 801248a:	f300 80d9 	bgt.w	8012640 <__ieee754_rem_pio2+0x2e0>
 801248e:	f000 ff2d 	bl	80132ec <fabs>
 8012492:	ec55 4b10 	vmov	r4, r5, d0
 8012496:	ee10 0a10 	vmov	r0, s0
 801249a:	a379      	add	r3, pc, #484	; (adr r3, 8012680 <__ieee754_rem_pio2+0x320>)
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	4629      	mov	r1, r5
 80124a2:	f7ee f8a9 	bl	80005f8 <__aeabi_dmul>
 80124a6:	4b80      	ldr	r3, [pc, #512]	; (80126a8 <__ieee754_rem_pio2+0x348>)
 80124a8:	2200      	movs	r2, #0
 80124aa:	f7ed feef 	bl	800028c <__adddf3>
 80124ae:	f7ee fb53 	bl	8000b58 <__aeabi_d2iz>
 80124b2:	4683      	mov	fp, r0
 80124b4:	f7ee f836 	bl	8000524 <__aeabi_i2d>
 80124b8:	4602      	mov	r2, r0
 80124ba:	460b      	mov	r3, r1
 80124bc:	ec43 2b18 	vmov	d8, r2, r3
 80124c0:	a367      	add	r3, pc, #412	; (adr r3, 8012660 <__ieee754_rem_pio2+0x300>)
 80124c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c6:	f7ee f897 	bl	80005f8 <__aeabi_dmul>
 80124ca:	4602      	mov	r2, r0
 80124cc:	460b      	mov	r3, r1
 80124ce:	4620      	mov	r0, r4
 80124d0:	4629      	mov	r1, r5
 80124d2:	f7ed fed9 	bl	8000288 <__aeabi_dsub>
 80124d6:	a364      	add	r3, pc, #400	; (adr r3, 8012668 <__ieee754_rem_pio2+0x308>)
 80124d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124dc:	4606      	mov	r6, r0
 80124de:	460f      	mov	r7, r1
 80124e0:	ec51 0b18 	vmov	r0, r1, d8
 80124e4:	f7ee f888 	bl	80005f8 <__aeabi_dmul>
 80124e8:	f1bb 0f1f 	cmp.w	fp, #31
 80124ec:	4604      	mov	r4, r0
 80124ee:	460d      	mov	r5, r1
 80124f0:	dc0d      	bgt.n	801250e <__ieee754_rem_pio2+0x1ae>
 80124f2:	4b6e      	ldr	r3, [pc, #440]	; (80126ac <__ieee754_rem_pio2+0x34c>)
 80124f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80124f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124fc:	4543      	cmp	r3, r8
 80124fe:	d006      	beq.n	801250e <__ieee754_rem_pio2+0x1ae>
 8012500:	4622      	mov	r2, r4
 8012502:	462b      	mov	r3, r5
 8012504:	4630      	mov	r0, r6
 8012506:	4639      	mov	r1, r7
 8012508:	f7ed febe 	bl	8000288 <__aeabi_dsub>
 801250c:	e00f      	b.n	801252e <__ieee754_rem_pio2+0x1ce>
 801250e:	462b      	mov	r3, r5
 8012510:	4622      	mov	r2, r4
 8012512:	4630      	mov	r0, r6
 8012514:	4639      	mov	r1, r7
 8012516:	f7ed feb7 	bl	8000288 <__aeabi_dsub>
 801251a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801251e:	9303      	str	r3, [sp, #12]
 8012520:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012524:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012528:	f1b8 0f10 	cmp.w	r8, #16
 801252c:	dc02      	bgt.n	8012534 <__ieee754_rem_pio2+0x1d4>
 801252e:	e9ca 0100 	strd	r0, r1, [sl]
 8012532:	e039      	b.n	80125a8 <__ieee754_rem_pio2+0x248>
 8012534:	a34e      	add	r3, pc, #312	; (adr r3, 8012670 <__ieee754_rem_pio2+0x310>)
 8012536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253a:	ec51 0b18 	vmov	r0, r1, d8
 801253e:	f7ee f85b 	bl	80005f8 <__aeabi_dmul>
 8012542:	4604      	mov	r4, r0
 8012544:	460d      	mov	r5, r1
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	4630      	mov	r0, r6
 801254c:	4639      	mov	r1, r7
 801254e:	f7ed fe9b 	bl	8000288 <__aeabi_dsub>
 8012552:	4602      	mov	r2, r0
 8012554:	460b      	mov	r3, r1
 8012556:	4680      	mov	r8, r0
 8012558:	4689      	mov	r9, r1
 801255a:	4630      	mov	r0, r6
 801255c:	4639      	mov	r1, r7
 801255e:	f7ed fe93 	bl	8000288 <__aeabi_dsub>
 8012562:	4622      	mov	r2, r4
 8012564:	462b      	mov	r3, r5
 8012566:	f7ed fe8f 	bl	8000288 <__aeabi_dsub>
 801256a:	a343      	add	r3, pc, #268	; (adr r3, 8012678 <__ieee754_rem_pio2+0x318>)
 801256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012570:	4604      	mov	r4, r0
 8012572:	460d      	mov	r5, r1
 8012574:	ec51 0b18 	vmov	r0, r1, d8
 8012578:	f7ee f83e 	bl	80005f8 <__aeabi_dmul>
 801257c:	4622      	mov	r2, r4
 801257e:	462b      	mov	r3, r5
 8012580:	f7ed fe82 	bl	8000288 <__aeabi_dsub>
 8012584:	4602      	mov	r2, r0
 8012586:	460b      	mov	r3, r1
 8012588:	4604      	mov	r4, r0
 801258a:	460d      	mov	r5, r1
 801258c:	4640      	mov	r0, r8
 801258e:	4649      	mov	r1, r9
 8012590:	f7ed fe7a 	bl	8000288 <__aeabi_dsub>
 8012594:	9a03      	ldr	r2, [sp, #12]
 8012596:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801259a:	1ad3      	subs	r3, r2, r3
 801259c:	2b31      	cmp	r3, #49	; 0x31
 801259e:	dc24      	bgt.n	80125ea <__ieee754_rem_pio2+0x28a>
 80125a0:	e9ca 0100 	strd	r0, r1, [sl]
 80125a4:	4646      	mov	r6, r8
 80125a6:	464f      	mov	r7, r9
 80125a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80125ac:	4630      	mov	r0, r6
 80125ae:	4642      	mov	r2, r8
 80125b0:	464b      	mov	r3, r9
 80125b2:	4639      	mov	r1, r7
 80125b4:	f7ed fe68 	bl	8000288 <__aeabi_dsub>
 80125b8:	462b      	mov	r3, r5
 80125ba:	4622      	mov	r2, r4
 80125bc:	f7ed fe64 	bl	8000288 <__aeabi_dsub>
 80125c0:	9b02      	ldr	r3, [sp, #8]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80125c8:	f6bf af0a 	bge.w	80123e0 <__ieee754_rem_pio2+0x80>
 80125cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80125d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80125d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125d8:	f8ca 8000 	str.w	r8, [sl]
 80125dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80125e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80125e4:	f1cb 0b00 	rsb	fp, fp, #0
 80125e8:	e6fa      	b.n	80123e0 <__ieee754_rem_pio2+0x80>
 80125ea:	a327      	add	r3, pc, #156	; (adr r3, 8012688 <__ieee754_rem_pio2+0x328>)
 80125ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f0:	ec51 0b18 	vmov	r0, r1, d8
 80125f4:	f7ee f800 	bl	80005f8 <__aeabi_dmul>
 80125f8:	4604      	mov	r4, r0
 80125fa:	460d      	mov	r5, r1
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	4640      	mov	r0, r8
 8012602:	4649      	mov	r1, r9
 8012604:	f7ed fe40 	bl	8000288 <__aeabi_dsub>
 8012608:	4602      	mov	r2, r0
 801260a:	460b      	mov	r3, r1
 801260c:	4606      	mov	r6, r0
 801260e:	460f      	mov	r7, r1
 8012610:	4640      	mov	r0, r8
 8012612:	4649      	mov	r1, r9
 8012614:	f7ed fe38 	bl	8000288 <__aeabi_dsub>
 8012618:	4622      	mov	r2, r4
 801261a:	462b      	mov	r3, r5
 801261c:	f7ed fe34 	bl	8000288 <__aeabi_dsub>
 8012620:	a31b      	add	r3, pc, #108	; (adr r3, 8012690 <__ieee754_rem_pio2+0x330>)
 8012622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012626:	4604      	mov	r4, r0
 8012628:	460d      	mov	r5, r1
 801262a:	ec51 0b18 	vmov	r0, r1, d8
 801262e:	f7ed ffe3 	bl	80005f8 <__aeabi_dmul>
 8012632:	4622      	mov	r2, r4
 8012634:	462b      	mov	r3, r5
 8012636:	f7ed fe27 	bl	8000288 <__aeabi_dsub>
 801263a:	4604      	mov	r4, r0
 801263c:	460d      	mov	r5, r1
 801263e:	e75f      	b.n	8012500 <__ieee754_rem_pio2+0x1a0>
 8012640:	4b1b      	ldr	r3, [pc, #108]	; (80126b0 <__ieee754_rem_pio2+0x350>)
 8012642:	4598      	cmp	r8, r3
 8012644:	dd36      	ble.n	80126b4 <__ieee754_rem_pio2+0x354>
 8012646:	ee10 2a10 	vmov	r2, s0
 801264a:	462b      	mov	r3, r5
 801264c:	4620      	mov	r0, r4
 801264e:	4629      	mov	r1, r5
 8012650:	f7ed fe1a 	bl	8000288 <__aeabi_dsub>
 8012654:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012658:	e9ca 0100 	strd	r0, r1, [sl]
 801265c:	e694      	b.n	8012388 <__ieee754_rem_pio2+0x28>
 801265e:	bf00      	nop
 8012660:	54400000 	.word	0x54400000
 8012664:	3ff921fb 	.word	0x3ff921fb
 8012668:	1a626331 	.word	0x1a626331
 801266c:	3dd0b461 	.word	0x3dd0b461
 8012670:	1a600000 	.word	0x1a600000
 8012674:	3dd0b461 	.word	0x3dd0b461
 8012678:	2e037073 	.word	0x2e037073
 801267c:	3ba3198a 	.word	0x3ba3198a
 8012680:	6dc9c883 	.word	0x6dc9c883
 8012684:	3fe45f30 	.word	0x3fe45f30
 8012688:	2e000000 	.word	0x2e000000
 801268c:	3ba3198a 	.word	0x3ba3198a
 8012690:	252049c1 	.word	0x252049c1
 8012694:	397b839a 	.word	0x397b839a
 8012698:	3fe921fb 	.word	0x3fe921fb
 801269c:	4002d97b 	.word	0x4002d97b
 80126a0:	3ff921fb 	.word	0x3ff921fb
 80126a4:	413921fb 	.word	0x413921fb
 80126a8:	3fe00000 	.word	0x3fe00000
 80126ac:	08021e10 	.word	0x08021e10
 80126b0:	7fefffff 	.word	0x7fefffff
 80126b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80126b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80126bc:	ee10 0a10 	vmov	r0, s0
 80126c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80126c4:	ee10 6a10 	vmov	r6, s0
 80126c8:	460f      	mov	r7, r1
 80126ca:	f7ee fa45 	bl	8000b58 <__aeabi_d2iz>
 80126ce:	f7ed ff29 	bl	8000524 <__aeabi_i2d>
 80126d2:	4602      	mov	r2, r0
 80126d4:	460b      	mov	r3, r1
 80126d6:	4630      	mov	r0, r6
 80126d8:	4639      	mov	r1, r7
 80126da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80126de:	f7ed fdd3 	bl	8000288 <__aeabi_dsub>
 80126e2:	4b23      	ldr	r3, [pc, #140]	; (8012770 <__ieee754_rem_pio2+0x410>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	f7ed ff87 	bl	80005f8 <__aeabi_dmul>
 80126ea:	460f      	mov	r7, r1
 80126ec:	4606      	mov	r6, r0
 80126ee:	f7ee fa33 	bl	8000b58 <__aeabi_d2iz>
 80126f2:	f7ed ff17 	bl	8000524 <__aeabi_i2d>
 80126f6:	4602      	mov	r2, r0
 80126f8:	460b      	mov	r3, r1
 80126fa:	4630      	mov	r0, r6
 80126fc:	4639      	mov	r1, r7
 80126fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012702:	f7ed fdc1 	bl	8000288 <__aeabi_dsub>
 8012706:	4b1a      	ldr	r3, [pc, #104]	; (8012770 <__ieee754_rem_pio2+0x410>)
 8012708:	2200      	movs	r2, #0
 801270a:	f7ed ff75 	bl	80005f8 <__aeabi_dmul>
 801270e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012712:	ad04      	add	r5, sp, #16
 8012714:	f04f 0803 	mov.w	r8, #3
 8012718:	46a9      	mov	r9, r5
 801271a:	2600      	movs	r6, #0
 801271c:	2700      	movs	r7, #0
 801271e:	4632      	mov	r2, r6
 8012720:	463b      	mov	r3, r7
 8012722:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012726:	46c3      	mov	fp, r8
 8012728:	3d08      	subs	r5, #8
 801272a:	f108 38ff 	add.w	r8, r8, #4294967295
 801272e:	f7ee f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8012732:	2800      	cmp	r0, #0
 8012734:	d1f3      	bne.n	801271e <__ieee754_rem_pio2+0x3be>
 8012736:	4b0f      	ldr	r3, [pc, #60]	; (8012774 <__ieee754_rem_pio2+0x414>)
 8012738:	9301      	str	r3, [sp, #4]
 801273a:	2302      	movs	r3, #2
 801273c:	9300      	str	r3, [sp, #0]
 801273e:	4622      	mov	r2, r4
 8012740:	465b      	mov	r3, fp
 8012742:	4651      	mov	r1, sl
 8012744:	4648      	mov	r0, r9
 8012746:	f000 f993 	bl	8012a70 <__kernel_rem_pio2>
 801274a:	9b02      	ldr	r3, [sp, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	4683      	mov	fp, r0
 8012750:	f6bf ae46 	bge.w	80123e0 <__ieee754_rem_pio2+0x80>
 8012754:	e9da 2100 	ldrd	r2, r1, [sl]
 8012758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801275c:	e9ca 2300 	strd	r2, r3, [sl]
 8012760:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012768:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801276c:	e73a      	b.n	80125e4 <__ieee754_rem_pio2+0x284>
 801276e:	bf00      	nop
 8012770:	41700000 	.word	0x41700000
 8012774:	08021e90 	.word	0x08021e90

08012778 <__ieee754_sqrt>:
 8012778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801277c:	ec55 4b10 	vmov	r4, r5, d0
 8012780:	4e55      	ldr	r6, [pc, #340]	; (80128d8 <__ieee754_sqrt+0x160>)
 8012782:	43ae      	bics	r6, r5
 8012784:	ee10 0a10 	vmov	r0, s0
 8012788:	ee10 3a10 	vmov	r3, s0
 801278c:	462a      	mov	r2, r5
 801278e:	4629      	mov	r1, r5
 8012790:	d110      	bne.n	80127b4 <__ieee754_sqrt+0x3c>
 8012792:	ee10 2a10 	vmov	r2, s0
 8012796:	462b      	mov	r3, r5
 8012798:	f7ed ff2e 	bl	80005f8 <__aeabi_dmul>
 801279c:	4602      	mov	r2, r0
 801279e:	460b      	mov	r3, r1
 80127a0:	4620      	mov	r0, r4
 80127a2:	4629      	mov	r1, r5
 80127a4:	f7ed fd72 	bl	800028c <__adddf3>
 80127a8:	4604      	mov	r4, r0
 80127aa:	460d      	mov	r5, r1
 80127ac:	ec45 4b10 	vmov	d0, r4, r5
 80127b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b4:	2d00      	cmp	r5, #0
 80127b6:	dc10      	bgt.n	80127da <__ieee754_sqrt+0x62>
 80127b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80127bc:	4330      	orrs	r0, r6
 80127be:	d0f5      	beq.n	80127ac <__ieee754_sqrt+0x34>
 80127c0:	b15d      	cbz	r5, 80127da <__ieee754_sqrt+0x62>
 80127c2:	ee10 2a10 	vmov	r2, s0
 80127c6:	462b      	mov	r3, r5
 80127c8:	ee10 0a10 	vmov	r0, s0
 80127cc:	f7ed fd5c 	bl	8000288 <__aeabi_dsub>
 80127d0:	4602      	mov	r2, r0
 80127d2:	460b      	mov	r3, r1
 80127d4:	f7ee f83a 	bl	800084c <__aeabi_ddiv>
 80127d8:	e7e6      	b.n	80127a8 <__ieee754_sqrt+0x30>
 80127da:	1512      	asrs	r2, r2, #20
 80127dc:	d074      	beq.n	80128c8 <__ieee754_sqrt+0x150>
 80127de:	07d4      	lsls	r4, r2, #31
 80127e0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80127e4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80127e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80127ec:	bf5e      	ittt	pl
 80127ee:	0fda      	lsrpl	r2, r3, #31
 80127f0:	005b      	lslpl	r3, r3, #1
 80127f2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80127f6:	2400      	movs	r4, #0
 80127f8:	0fda      	lsrs	r2, r3, #31
 80127fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80127fe:	107f      	asrs	r7, r7, #1
 8012800:	005b      	lsls	r3, r3, #1
 8012802:	2516      	movs	r5, #22
 8012804:	4620      	mov	r0, r4
 8012806:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801280a:	1886      	adds	r6, r0, r2
 801280c:	428e      	cmp	r6, r1
 801280e:	bfde      	ittt	le
 8012810:	1b89      	suble	r1, r1, r6
 8012812:	18b0      	addle	r0, r6, r2
 8012814:	18a4      	addle	r4, r4, r2
 8012816:	0049      	lsls	r1, r1, #1
 8012818:	3d01      	subs	r5, #1
 801281a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801281e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012822:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012826:	d1f0      	bne.n	801280a <__ieee754_sqrt+0x92>
 8012828:	462a      	mov	r2, r5
 801282a:	f04f 0e20 	mov.w	lr, #32
 801282e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012832:	4281      	cmp	r1, r0
 8012834:	eb06 0c05 	add.w	ip, r6, r5
 8012838:	dc02      	bgt.n	8012840 <__ieee754_sqrt+0xc8>
 801283a:	d113      	bne.n	8012864 <__ieee754_sqrt+0xec>
 801283c:	459c      	cmp	ip, r3
 801283e:	d811      	bhi.n	8012864 <__ieee754_sqrt+0xec>
 8012840:	f1bc 0f00 	cmp.w	ip, #0
 8012844:	eb0c 0506 	add.w	r5, ip, r6
 8012848:	da43      	bge.n	80128d2 <__ieee754_sqrt+0x15a>
 801284a:	2d00      	cmp	r5, #0
 801284c:	db41      	blt.n	80128d2 <__ieee754_sqrt+0x15a>
 801284e:	f100 0801 	add.w	r8, r0, #1
 8012852:	1a09      	subs	r1, r1, r0
 8012854:	459c      	cmp	ip, r3
 8012856:	bf88      	it	hi
 8012858:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801285c:	eba3 030c 	sub.w	r3, r3, ip
 8012860:	4432      	add	r2, r6
 8012862:	4640      	mov	r0, r8
 8012864:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012868:	f1be 0e01 	subs.w	lr, lr, #1
 801286c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012874:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012878:	d1db      	bne.n	8012832 <__ieee754_sqrt+0xba>
 801287a:	430b      	orrs	r3, r1
 801287c:	d006      	beq.n	801288c <__ieee754_sqrt+0x114>
 801287e:	1c50      	adds	r0, r2, #1
 8012880:	bf13      	iteet	ne
 8012882:	3201      	addne	r2, #1
 8012884:	3401      	addeq	r4, #1
 8012886:	4672      	moveq	r2, lr
 8012888:	f022 0201 	bicne.w	r2, r2, #1
 801288c:	1063      	asrs	r3, r4, #1
 801288e:	0852      	lsrs	r2, r2, #1
 8012890:	07e1      	lsls	r1, r4, #31
 8012892:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012896:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801289a:	bf48      	it	mi
 801289c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80128a0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80128a4:	4614      	mov	r4, r2
 80128a6:	e781      	b.n	80127ac <__ieee754_sqrt+0x34>
 80128a8:	0ad9      	lsrs	r1, r3, #11
 80128aa:	3815      	subs	r0, #21
 80128ac:	055b      	lsls	r3, r3, #21
 80128ae:	2900      	cmp	r1, #0
 80128b0:	d0fa      	beq.n	80128a8 <__ieee754_sqrt+0x130>
 80128b2:	02cd      	lsls	r5, r1, #11
 80128b4:	d50a      	bpl.n	80128cc <__ieee754_sqrt+0x154>
 80128b6:	f1c2 0420 	rsb	r4, r2, #32
 80128ba:	fa23 f404 	lsr.w	r4, r3, r4
 80128be:	1e55      	subs	r5, r2, #1
 80128c0:	4093      	lsls	r3, r2
 80128c2:	4321      	orrs	r1, r4
 80128c4:	1b42      	subs	r2, r0, r5
 80128c6:	e78a      	b.n	80127de <__ieee754_sqrt+0x66>
 80128c8:	4610      	mov	r0, r2
 80128ca:	e7f0      	b.n	80128ae <__ieee754_sqrt+0x136>
 80128cc:	0049      	lsls	r1, r1, #1
 80128ce:	3201      	adds	r2, #1
 80128d0:	e7ef      	b.n	80128b2 <__ieee754_sqrt+0x13a>
 80128d2:	4680      	mov	r8, r0
 80128d4:	e7bd      	b.n	8012852 <__ieee754_sqrt+0xda>
 80128d6:	bf00      	nop
 80128d8:	7ff00000 	.word	0x7ff00000
 80128dc:	00000000 	.word	0x00000000

080128e0 <__kernel_cos>:
 80128e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e4:	ec57 6b10 	vmov	r6, r7, d0
 80128e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80128ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80128f0:	ed8d 1b00 	vstr	d1, [sp]
 80128f4:	da07      	bge.n	8012906 <__kernel_cos+0x26>
 80128f6:	ee10 0a10 	vmov	r0, s0
 80128fa:	4639      	mov	r1, r7
 80128fc:	f7ee f92c 	bl	8000b58 <__aeabi_d2iz>
 8012900:	2800      	cmp	r0, #0
 8012902:	f000 8088 	beq.w	8012a16 <__kernel_cos+0x136>
 8012906:	4632      	mov	r2, r6
 8012908:	463b      	mov	r3, r7
 801290a:	4630      	mov	r0, r6
 801290c:	4639      	mov	r1, r7
 801290e:	f7ed fe73 	bl	80005f8 <__aeabi_dmul>
 8012912:	4b51      	ldr	r3, [pc, #324]	; (8012a58 <__kernel_cos+0x178>)
 8012914:	2200      	movs	r2, #0
 8012916:	4604      	mov	r4, r0
 8012918:	460d      	mov	r5, r1
 801291a:	f7ed fe6d 	bl	80005f8 <__aeabi_dmul>
 801291e:	a340      	add	r3, pc, #256	; (adr r3, 8012a20 <__kernel_cos+0x140>)
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	4682      	mov	sl, r0
 8012926:	468b      	mov	fp, r1
 8012928:	4620      	mov	r0, r4
 801292a:	4629      	mov	r1, r5
 801292c:	f7ed fe64 	bl	80005f8 <__aeabi_dmul>
 8012930:	a33d      	add	r3, pc, #244	; (adr r3, 8012a28 <__kernel_cos+0x148>)
 8012932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012936:	f7ed fca9 	bl	800028c <__adddf3>
 801293a:	4622      	mov	r2, r4
 801293c:	462b      	mov	r3, r5
 801293e:	f7ed fe5b 	bl	80005f8 <__aeabi_dmul>
 8012942:	a33b      	add	r3, pc, #236	; (adr r3, 8012a30 <__kernel_cos+0x150>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	f7ed fc9e 	bl	8000288 <__aeabi_dsub>
 801294c:	4622      	mov	r2, r4
 801294e:	462b      	mov	r3, r5
 8012950:	f7ed fe52 	bl	80005f8 <__aeabi_dmul>
 8012954:	a338      	add	r3, pc, #224	; (adr r3, 8012a38 <__kernel_cos+0x158>)
 8012956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295a:	f7ed fc97 	bl	800028c <__adddf3>
 801295e:	4622      	mov	r2, r4
 8012960:	462b      	mov	r3, r5
 8012962:	f7ed fe49 	bl	80005f8 <__aeabi_dmul>
 8012966:	a336      	add	r3, pc, #216	; (adr r3, 8012a40 <__kernel_cos+0x160>)
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	f7ed fc8c 	bl	8000288 <__aeabi_dsub>
 8012970:	4622      	mov	r2, r4
 8012972:	462b      	mov	r3, r5
 8012974:	f7ed fe40 	bl	80005f8 <__aeabi_dmul>
 8012978:	a333      	add	r3, pc, #204	; (adr r3, 8012a48 <__kernel_cos+0x168>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	f7ed fc85 	bl	800028c <__adddf3>
 8012982:	4622      	mov	r2, r4
 8012984:	462b      	mov	r3, r5
 8012986:	f7ed fe37 	bl	80005f8 <__aeabi_dmul>
 801298a:	4622      	mov	r2, r4
 801298c:	462b      	mov	r3, r5
 801298e:	f7ed fe33 	bl	80005f8 <__aeabi_dmul>
 8012992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012996:	4604      	mov	r4, r0
 8012998:	460d      	mov	r5, r1
 801299a:	4630      	mov	r0, r6
 801299c:	4639      	mov	r1, r7
 801299e:	f7ed fe2b 	bl	80005f8 <__aeabi_dmul>
 80129a2:	460b      	mov	r3, r1
 80129a4:	4602      	mov	r2, r0
 80129a6:	4629      	mov	r1, r5
 80129a8:	4620      	mov	r0, r4
 80129aa:	f7ed fc6d 	bl	8000288 <__aeabi_dsub>
 80129ae:	4b2b      	ldr	r3, [pc, #172]	; (8012a5c <__kernel_cos+0x17c>)
 80129b0:	4598      	cmp	r8, r3
 80129b2:	4606      	mov	r6, r0
 80129b4:	460f      	mov	r7, r1
 80129b6:	dc10      	bgt.n	80129da <__kernel_cos+0xfa>
 80129b8:	4602      	mov	r2, r0
 80129ba:	460b      	mov	r3, r1
 80129bc:	4650      	mov	r0, sl
 80129be:	4659      	mov	r1, fp
 80129c0:	f7ed fc62 	bl	8000288 <__aeabi_dsub>
 80129c4:	460b      	mov	r3, r1
 80129c6:	4926      	ldr	r1, [pc, #152]	; (8012a60 <__kernel_cos+0x180>)
 80129c8:	4602      	mov	r2, r0
 80129ca:	2000      	movs	r0, #0
 80129cc:	f7ed fc5c 	bl	8000288 <__aeabi_dsub>
 80129d0:	ec41 0b10 	vmov	d0, r0, r1
 80129d4:	b003      	add	sp, #12
 80129d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129da:	4b22      	ldr	r3, [pc, #136]	; (8012a64 <__kernel_cos+0x184>)
 80129dc:	4920      	ldr	r1, [pc, #128]	; (8012a60 <__kernel_cos+0x180>)
 80129de:	4598      	cmp	r8, r3
 80129e0:	bfcc      	ite	gt
 80129e2:	4d21      	ldrgt	r5, [pc, #132]	; (8012a68 <__kernel_cos+0x188>)
 80129e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80129e8:	2400      	movs	r4, #0
 80129ea:	4622      	mov	r2, r4
 80129ec:	462b      	mov	r3, r5
 80129ee:	2000      	movs	r0, #0
 80129f0:	f7ed fc4a 	bl	8000288 <__aeabi_dsub>
 80129f4:	4622      	mov	r2, r4
 80129f6:	4680      	mov	r8, r0
 80129f8:	4689      	mov	r9, r1
 80129fa:	462b      	mov	r3, r5
 80129fc:	4650      	mov	r0, sl
 80129fe:	4659      	mov	r1, fp
 8012a00:	f7ed fc42 	bl	8000288 <__aeabi_dsub>
 8012a04:	4632      	mov	r2, r6
 8012a06:	463b      	mov	r3, r7
 8012a08:	f7ed fc3e 	bl	8000288 <__aeabi_dsub>
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	460b      	mov	r3, r1
 8012a10:	4640      	mov	r0, r8
 8012a12:	4649      	mov	r1, r9
 8012a14:	e7da      	b.n	80129cc <__kernel_cos+0xec>
 8012a16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012a50 <__kernel_cos+0x170>
 8012a1a:	e7db      	b.n	80129d4 <__kernel_cos+0xf4>
 8012a1c:	f3af 8000 	nop.w
 8012a20:	be8838d4 	.word	0xbe8838d4
 8012a24:	bda8fae9 	.word	0xbda8fae9
 8012a28:	bdb4b1c4 	.word	0xbdb4b1c4
 8012a2c:	3e21ee9e 	.word	0x3e21ee9e
 8012a30:	809c52ad 	.word	0x809c52ad
 8012a34:	3e927e4f 	.word	0x3e927e4f
 8012a38:	19cb1590 	.word	0x19cb1590
 8012a3c:	3efa01a0 	.word	0x3efa01a0
 8012a40:	16c15177 	.word	0x16c15177
 8012a44:	3f56c16c 	.word	0x3f56c16c
 8012a48:	5555554c 	.word	0x5555554c
 8012a4c:	3fa55555 	.word	0x3fa55555
 8012a50:	00000000 	.word	0x00000000
 8012a54:	3ff00000 	.word	0x3ff00000
 8012a58:	3fe00000 	.word	0x3fe00000
 8012a5c:	3fd33332 	.word	0x3fd33332
 8012a60:	3ff00000 	.word	0x3ff00000
 8012a64:	3fe90000 	.word	0x3fe90000
 8012a68:	3fd20000 	.word	0x3fd20000
 8012a6c:	00000000 	.word	0x00000000

08012a70 <__kernel_rem_pio2>:
 8012a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a74:	ed2d 8b02 	vpush	{d8}
 8012a78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012a7c:	f112 0f14 	cmn.w	r2, #20
 8012a80:	9308      	str	r3, [sp, #32]
 8012a82:	9101      	str	r1, [sp, #4]
 8012a84:	4bc4      	ldr	r3, [pc, #784]	; (8012d98 <__kernel_rem_pio2+0x328>)
 8012a86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012a88:	900b      	str	r0, [sp, #44]	; 0x2c
 8012a8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a8e:	9302      	str	r3, [sp, #8]
 8012a90:	9b08      	ldr	r3, [sp, #32]
 8012a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a96:	bfa8      	it	ge
 8012a98:	1ed4      	subge	r4, r2, #3
 8012a9a:	9306      	str	r3, [sp, #24]
 8012a9c:	bfb2      	itee	lt
 8012a9e:	2400      	movlt	r4, #0
 8012aa0:	2318      	movge	r3, #24
 8012aa2:	fb94 f4f3 	sdivge	r4, r4, r3
 8012aa6:	f06f 0317 	mvn.w	r3, #23
 8012aaa:	fb04 3303 	mla	r3, r4, r3, r3
 8012aae:	eb03 0a02 	add.w	sl, r3, r2
 8012ab2:	9b02      	ldr	r3, [sp, #8]
 8012ab4:	9a06      	ldr	r2, [sp, #24]
 8012ab6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012d88 <__kernel_rem_pio2+0x318>
 8012aba:	eb03 0802 	add.w	r8, r3, r2
 8012abe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012ac0:	1aa7      	subs	r7, r4, r2
 8012ac2:	ae22      	add	r6, sp, #136	; 0x88
 8012ac4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012ac8:	2500      	movs	r5, #0
 8012aca:	4545      	cmp	r5, r8
 8012acc:	dd13      	ble.n	8012af6 <__kernel_rem_pio2+0x86>
 8012ace:	9b08      	ldr	r3, [sp, #32]
 8012ad0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012d88 <__kernel_rem_pio2+0x318>
 8012ad4:	aa22      	add	r2, sp, #136	; 0x88
 8012ad6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012ada:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012ade:	f04f 0800 	mov.w	r8, #0
 8012ae2:	9b02      	ldr	r3, [sp, #8]
 8012ae4:	4598      	cmp	r8, r3
 8012ae6:	dc2f      	bgt.n	8012b48 <__kernel_rem_pio2+0xd8>
 8012ae8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012aec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012af0:	462f      	mov	r7, r5
 8012af2:	2600      	movs	r6, #0
 8012af4:	e01b      	b.n	8012b2e <__kernel_rem_pio2+0xbe>
 8012af6:	42ef      	cmn	r7, r5
 8012af8:	d407      	bmi.n	8012b0a <__kernel_rem_pio2+0x9a>
 8012afa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012afe:	f7ed fd11 	bl	8000524 <__aeabi_i2d>
 8012b02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012b06:	3501      	adds	r5, #1
 8012b08:	e7df      	b.n	8012aca <__kernel_rem_pio2+0x5a>
 8012b0a:	ec51 0b18 	vmov	r0, r1, d8
 8012b0e:	e7f8      	b.n	8012b02 <__kernel_rem_pio2+0x92>
 8012b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012b18:	f7ed fd6e 	bl	80005f8 <__aeabi_dmul>
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	460b      	mov	r3, r1
 8012b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b24:	f7ed fbb2 	bl	800028c <__adddf3>
 8012b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b2c:	3601      	adds	r6, #1
 8012b2e:	9b06      	ldr	r3, [sp, #24]
 8012b30:	429e      	cmp	r6, r3
 8012b32:	f1a7 0708 	sub.w	r7, r7, #8
 8012b36:	ddeb      	ble.n	8012b10 <__kernel_rem_pio2+0xa0>
 8012b38:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012b3c:	f108 0801 	add.w	r8, r8, #1
 8012b40:	ecab 7b02 	vstmia	fp!, {d7}
 8012b44:	3508      	adds	r5, #8
 8012b46:	e7cc      	b.n	8012ae2 <__kernel_rem_pio2+0x72>
 8012b48:	9b02      	ldr	r3, [sp, #8]
 8012b4a:	aa0e      	add	r2, sp, #56	; 0x38
 8012b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b50:	930d      	str	r3, [sp, #52]	; 0x34
 8012b52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012b54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012b58:	9c02      	ldr	r4, [sp, #8]
 8012b5a:	930c      	str	r3, [sp, #48]	; 0x30
 8012b5c:	00e3      	lsls	r3, r4, #3
 8012b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8012b60:	ab9a      	add	r3, sp, #616	; 0x268
 8012b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012b6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012b6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012b70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8012b74:	46c3      	mov	fp, r8
 8012b76:	46a1      	mov	r9, r4
 8012b78:	f1b9 0f00 	cmp.w	r9, #0
 8012b7c:	f1a5 0508 	sub.w	r5, r5, #8
 8012b80:	dc77      	bgt.n	8012c72 <__kernel_rem_pio2+0x202>
 8012b82:	ec47 6b10 	vmov	d0, r6, r7
 8012b86:	4650      	mov	r0, sl
 8012b88:	f000 fbc6 	bl	8013318 <scalbn>
 8012b8c:	ec57 6b10 	vmov	r6, r7, d0
 8012b90:	2200      	movs	r2, #0
 8012b92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012b96:	ee10 0a10 	vmov	r0, s0
 8012b9a:	4639      	mov	r1, r7
 8012b9c:	f7ed fd2c 	bl	80005f8 <__aeabi_dmul>
 8012ba0:	ec41 0b10 	vmov	d0, r0, r1
 8012ba4:	f7fe fd64 	bl	8011670 <floor>
 8012ba8:	4b7c      	ldr	r3, [pc, #496]	; (8012d9c <__kernel_rem_pio2+0x32c>)
 8012baa:	ec51 0b10 	vmov	r0, r1, d0
 8012bae:	2200      	movs	r2, #0
 8012bb0:	f7ed fd22 	bl	80005f8 <__aeabi_dmul>
 8012bb4:	4602      	mov	r2, r0
 8012bb6:	460b      	mov	r3, r1
 8012bb8:	4630      	mov	r0, r6
 8012bba:	4639      	mov	r1, r7
 8012bbc:	f7ed fb64 	bl	8000288 <__aeabi_dsub>
 8012bc0:	460f      	mov	r7, r1
 8012bc2:	4606      	mov	r6, r0
 8012bc4:	f7ed ffc8 	bl	8000b58 <__aeabi_d2iz>
 8012bc8:	9004      	str	r0, [sp, #16]
 8012bca:	f7ed fcab 	bl	8000524 <__aeabi_i2d>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	4639      	mov	r1, r7
 8012bd6:	f7ed fb57 	bl	8000288 <__aeabi_dsub>
 8012bda:	f1ba 0f00 	cmp.w	sl, #0
 8012bde:	4606      	mov	r6, r0
 8012be0:	460f      	mov	r7, r1
 8012be2:	dd6d      	ble.n	8012cc0 <__kernel_rem_pio2+0x250>
 8012be4:	1e62      	subs	r2, r4, #1
 8012be6:	ab0e      	add	r3, sp, #56	; 0x38
 8012be8:	9d04      	ldr	r5, [sp, #16]
 8012bea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012bee:	f1ca 0118 	rsb	r1, sl, #24
 8012bf2:	fa40 f301 	asr.w	r3, r0, r1
 8012bf6:	441d      	add	r5, r3
 8012bf8:	408b      	lsls	r3, r1
 8012bfa:	1ac0      	subs	r0, r0, r3
 8012bfc:	ab0e      	add	r3, sp, #56	; 0x38
 8012bfe:	9504      	str	r5, [sp, #16]
 8012c00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012c04:	f1ca 0317 	rsb	r3, sl, #23
 8012c08:	fa40 fb03 	asr.w	fp, r0, r3
 8012c0c:	f1bb 0f00 	cmp.w	fp, #0
 8012c10:	dd65      	ble.n	8012cde <__kernel_rem_pio2+0x26e>
 8012c12:	9b04      	ldr	r3, [sp, #16]
 8012c14:	2200      	movs	r2, #0
 8012c16:	3301      	adds	r3, #1
 8012c18:	9304      	str	r3, [sp, #16]
 8012c1a:	4615      	mov	r5, r2
 8012c1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012c20:	4294      	cmp	r4, r2
 8012c22:	f300 809c 	bgt.w	8012d5e <__kernel_rem_pio2+0x2ee>
 8012c26:	f1ba 0f00 	cmp.w	sl, #0
 8012c2a:	dd07      	ble.n	8012c3c <__kernel_rem_pio2+0x1cc>
 8012c2c:	f1ba 0f01 	cmp.w	sl, #1
 8012c30:	f000 80c0 	beq.w	8012db4 <__kernel_rem_pio2+0x344>
 8012c34:	f1ba 0f02 	cmp.w	sl, #2
 8012c38:	f000 80c6 	beq.w	8012dc8 <__kernel_rem_pio2+0x358>
 8012c3c:	f1bb 0f02 	cmp.w	fp, #2
 8012c40:	d14d      	bne.n	8012cde <__kernel_rem_pio2+0x26e>
 8012c42:	4632      	mov	r2, r6
 8012c44:	463b      	mov	r3, r7
 8012c46:	4956      	ldr	r1, [pc, #344]	; (8012da0 <__kernel_rem_pio2+0x330>)
 8012c48:	2000      	movs	r0, #0
 8012c4a:	f7ed fb1d 	bl	8000288 <__aeabi_dsub>
 8012c4e:	4606      	mov	r6, r0
 8012c50:	460f      	mov	r7, r1
 8012c52:	2d00      	cmp	r5, #0
 8012c54:	d043      	beq.n	8012cde <__kernel_rem_pio2+0x26e>
 8012c56:	4650      	mov	r0, sl
 8012c58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012d90 <__kernel_rem_pio2+0x320>
 8012c5c:	f000 fb5c 	bl	8013318 <scalbn>
 8012c60:	4630      	mov	r0, r6
 8012c62:	4639      	mov	r1, r7
 8012c64:	ec53 2b10 	vmov	r2, r3, d0
 8012c68:	f7ed fb0e 	bl	8000288 <__aeabi_dsub>
 8012c6c:	4606      	mov	r6, r0
 8012c6e:	460f      	mov	r7, r1
 8012c70:	e035      	b.n	8012cde <__kernel_rem_pio2+0x26e>
 8012c72:	4b4c      	ldr	r3, [pc, #304]	; (8012da4 <__kernel_rem_pio2+0x334>)
 8012c74:	2200      	movs	r2, #0
 8012c76:	4630      	mov	r0, r6
 8012c78:	4639      	mov	r1, r7
 8012c7a:	f7ed fcbd 	bl	80005f8 <__aeabi_dmul>
 8012c7e:	f7ed ff6b 	bl	8000b58 <__aeabi_d2iz>
 8012c82:	f7ed fc4f 	bl	8000524 <__aeabi_i2d>
 8012c86:	4602      	mov	r2, r0
 8012c88:	460b      	mov	r3, r1
 8012c8a:	ec43 2b18 	vmov	d8, r2, r3
 8012c8e:	4b46      	ldr	r3, [pc, #280]	; (8012da8 <__kernel_rem_pio2+0x338>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	f7ed fcb1 	bl	80005f8 <__aeabi_dmul>
 8012c96:	4602      	mov	r2, r0
 8012c98:	460b      	mov	r3, r1
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	4639      	mov	r1, r7
 8012c9e:	f7ed faf3 	bl	8000288 <__aeabi_dsub>
 8012ca2:	f7ed ff59 	bl	8000b58 <__aeabi_d2iz>
 8012ca6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012caa:	f84b 0b04 	str.w	r0, [fp], #4
 8012cae:	ec51 0b18 	vmov	r0, r1, d8
 8012cb2:	f7ed faeb 	bl	800028c <__adddf3>
 8012cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8012cba:	4606      	mov	r6, r0
 8012cbc:	460f      	mov	r7, r1
 8012cbe:	e75b      	b.n	8012b78 <__kernel_rem_pio2+0x108>
 8012cc0:	d106      	bne.n	8012cd0 <__kernel_rem_pio2+0x260>
 8012cc2:	1e63      	subs	r3, r4, #1
 8012cc4:	aa0e      	add	r2, sp, #56	; 0x38
 8012cc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012cca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8012cce:	e79d      	b.n	8012c0c <__kernel_rem_pio2+0x19c>
 8012cd0:	4b36      	ldr	r3, [pc, #216]	; (8012dac <__kernel_rem_pio2+0x33c>)
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f7ed ff16 	bl	8000b04 <__aeabi_dcmpge>
 8012cd8:	2800      	cmp	r0, #0
 8012cda:	d13d      	bne.n	8012d58 <__kernel_rem_pio2+0x2e8>
 8012cdc:	4683      	mov	fp, r0
 8012cde:	2200      	movs	r2, #0
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	f7ed feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	f000 80c0 	beq.w	8012e70 <__kernel_rem_pio2+0x400>
 8012cf0:	1e65      	subs	r5, r4, #1
 8012cf2:	462b      	mov	r3, r5
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	9902      	ldr	r1, [sp, #8]
 8012cf8:	428b      	cmp	r3, r1
 8012cfa:	da6c      	bge.n	8012dd6 <__kernel_rem_pio2+0x366>
 8012cfc:	2a00      	cmp	r2, #0
 8012cfe:	f000 8089 	beq.w	8012e14 <__kernel_rem_pio2+0x3a4>
 8012d02:	ab0e      	add	r3, sp, #56	; 0x38
 8012d04:	f1aa 0a18 	sub.w	sl, sl, #24
 8012d08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	f000 80ad 	beq.w	8012e6c <__kernel_rem_pio2+0x3fc>
 8012d12:	4650      	mov	r0, sl
 8012d14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012d90 <__kernel_rem_pio2+0x320>
 8012d18:	f000 fafe 	bl	8013318 <scalbn>
 8012d1c:	ab9a      	add	r3, sp, #616	; 0x268
 8012d1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012d22:	ec57 6b10 	vmov	r6, r7, d0
 8012d26:	00ec      	lsls	r4, r5, #3
 8012d28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8012d2c:	46aa      	mov	sl, r5
 8012d2e:	f1ba 0f00 	cmp.w	sl, #0
 8012d32:	f280 80d6 	bge.w	8012ee2 <__kernel_rem_pio2+0x472>
 8012d36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012d88 <__kernel_rem_pio2+0x318>
 8012d3a:	462e      	mov	r6, r5
 8012d3c:	2e00      	cmp	r6, #0
 8012d3e:	f2c0 8104 	blt.w	8012f4a <__kernel_rem_pio2+0x4da>
 8012d42:	ab72      	add	r3, sp, #456	; 0x1c8
 8012d44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012d48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012db0 <__kernel_rem_pio2+0x340>
 8012d4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012d50:	f04f 0800 	mov.w	r8, #0
 8012d54:	1baf      	subs	r7, r5, r6
 8012d56:	e0ea      	b.n	8012f2e <__kernel_rem_pio2+0x4be>
 8012d58:	f04f 0b02 	mov.w	fp, #2
 8012d5c:	e759      	b.n	8012c12 <__kernel_rem_pio2+0x1a2>
 8012d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8012d62:	b955      	cbnz	r5, 8012d7a <__kernel_rem_pio2+0x30a>
 8012d64:	b123      	cbz	r3, 8012d70 <__kernel_rem_pio2+0x300>
 8012d66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012d6a:	f8c8 3000 	str.w	r3, [r8]
 8012d6e:	2301      	movs	r3, #1
 8012d70:	3201      	adds	r2, #1
 8012d72:	f108 0804 	add.w	r8, r8, #4
 8012d76:	461d      	mov	r5, r3
 8012d78:	e752      	b.n	8012c20 <__kernel_rem_pio2+0x1b0>
 8012d7a:	1acb      	subs	r3, r1, r3
 8012d7c:	f8c8 3000 	str.w	r3, [r8]
 8012d80:	462b      	mov	r3, r5
 8012d82:	e7f5      	b.n	8012d70 <__kernel_rem_pio2+0x300>
 8012d84:	f3af 8000 	nop.w
	...
 8012d94:	3ff00000 	.word	0x3ff00000
 8012d98:	08021fd8 	.word	0x08021fd8
 8012d9c:	40200000 	.word	0x40200000
 8012da0:	3ff00000 	.word	0x3ff00000
 8012da4:	3e700000 	.word	0x3e700000
 8012da8:	41700000 	.word	0x41700000
 8012dac:	3fe00000 	.word	0x3fe00000
 8012db0:	08021f98 	.word	0x08021f98
 8012db4:	1e62      	subs	r2, r4, #1
 8012db6:	ab0e      	add	r3, sp, #56	; 0x38
 8012db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012dc0:	a90e      	add	r1, sp, #56	; 0x38
 8012dc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012dc6:	e739      	b.n	8012c3c <__kernel_rem_pio2+0x1cc>
 8012dc8:	1e62      	subs	r2, r4, #1
 8012dca:	ab0e      	add	r3, sp, #56	; 0x38
 8012dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012dd4:	e7f4      	b.n	8012dc0 <__kernel_rem_pio2+0x350>
 8012dd6:	a90e      	add	r1, sp, #56	; 0x38
 8012dd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012ddc:	3b01      	subs	r3, #1
 8012dde:	430a      	orrs	r2, r1
 8012de0:	e789      	b.n	8012cf6 <__kernel_rem_pio2+0x286>
 8012de2:	3301      	adds	r3, #1
 8012de4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012de8:	2900      	cmp	r1, #0
 8012dea:	d0fa      	beq.n	8012de2 <__kernel_rem_pio2+0x372>
 8012dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012dee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8012df2:	446a      	add	r2, sp
 8012df4:	3a98      	subs	r2, #152	; 0x98
 8012df6:	920a      	str	r2, [sp, #40]	; 0x28
 8012df8:	9a08      	ldr	r2, [sp, #32]
 8012dfa:	18e3      	adds	r3, r4, r3
 8012dfc:	18a5      	adds	r5, r4, r2
 8012dfe:	aa22      	add	r2, sp, #136	; 0x88
 8012e00:	f104 0801 	add.w	r8, r4, #1
 8012e04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012e08:	9304      	str	r3, [sp, #16]
 8012e0a:	9b04      	ldr	r3, [sp, #16]
 8012e0c:	4543      	cmp	r3, r8
 8012e0e:	da04      	bge.n	8012e1a <__kernel_rem_pio2+0x3aa>
 8012e10:	461c      	mov	r4, r3
 8012e12:	e6a3      	b.n	8012b5c <__kernel_rem_pio2+0xec>
 8012e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e16:	2301      	movs	r3, #1
 8012e18:	e7e4      	b.n	8012de4 <__kernel_rem_pio2+0x374>
 8012e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012e20:	f7ed fb80 	bl	8000524 <__aeabi_i2d>
 8012e24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e2a:	46ab      	mov	fp, r5
 8012e2c:	461c      	mov	r4, r3
 8012e2e:	f04f 0900 	mov.w	r9, #0
 8012e32:	2600      	movs	r6, #0
 8012e34:	2700      	movs	r7, #0
 8012e36:	9b06      	ldr	r3, [sp, #24]
 8012e38:	4599      	cmp	r9, r3
 8012e3a:	dd06      	ble.n	8012e4a <__kernel_rem_pio2+0x3da>
 8012e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012e42:	f108 0801 	add.w	r8, r8, #1
 8012e46:	930a      	str	r3, [sp, #40]	; 0x28
 8012e48:	e7df      	b.n	8012e0a <__kernel_rem_pio2+0x39a>
 8012e4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012e4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012e52:	f7ed fbd1 	bl	80005f8 <__aeabi_dmul>
 8012e56:	4602      	mov	r2, r0
 8012e58:	460b      	mov	r3, r1
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	4639      	mov	r1, r7
 8012e5e:	f7ed fa15 	bl	800028c <__adddf3>
 8012e62:	f109 0901 	add.w	r9, r9, #1
 8012e66:	4606      	mov	r6, r0
 8012e68:	460f      	mov	r7, r1
 8012e6a:	e7e4      	b.n	8012e36 <__kernel_rem_pio2+0x3c6>
 8012e6c:	3d01      	subs	r5, #1
 8012e6e:	e748      	b.n	8012d02 <__kernel_rem_pio2+0x292>
 8012e70:	ec47 6b10 	vmov	d0, r6, r7
 8012e74:	f1ca 0000 	rsb	r0, sl, #0
 8012e78:	f000 fa4e 	bl	8013318 <scalbn>
 8012e7c:	ec57 6b10 	vmov	r6, r7, d0
 8012e80:	4ba0      	ldr	r3, [pc, #640]	; (8013104 <__kernel_rem_pio2+0x694>)
 8012e82:	ee10 0a10 	vmov	r0, s0
 8012e86:	2200      	movs	r2, #0
 8012e88:	4639      	mov	r1, r7
 8012e8a:	f7ed fe3b 	bl	8000b04 <__aeabi_dcmpge>
 8012e8e:	b1f8      	cbz	r0, 8012ed0 <__kernel_rem_pio2+0x460>
 8012e90:	4b9d      	ldr	r3, [pc, #628]	; (8013108 <__kernel_rem_pio2+0x698>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	4630      	mov	r0, r6
 8012e96:	4639      	mov	r1, r7
 8012e98:	f7ed fbae 	bl	80005f8 <__aeabi_dmul>
 8012e9c:	f7ed fe5c 	bl	8000b58 <__aeabi_d2iz>
 8012ea0:	4680      	mov	r8, r0
 8012ea2:	f7ed fb3f 	bl	8000524 <__aeabi_i2d>
 8012ea6:	4b97      	ldr	r3, [pc, #604]	; (8013104 <__kernel_rem_pio2+0x694>)
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	f7ed fba5 	bl	80005f8 <__aeabi_dmul>
 8012eae:	460b      	mov	r3, r1
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	4639      	mov	r1, r7
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	f7ed f9e7 	bl	8000288 <__aeabi_dsub>
 8012eba:	f7ed fe4d 	bl	8000b58 <__aeabi_d2iz>
 8012ebe:	1c65      	adds	r5, r4, #1
 8012ec0:	ab0e      	add	r3, sp, #56	; 0x38
 8012ec2:	f10a 0a18 	add.w	sl, sl, #24
 8012ec6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012eca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012ece:	e720      	b.n	8012d12 <__kernel_rem_pio2+0x2a2>
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	f7ed fe40 	bl	8000b58 <__aeabi_d2iz>
 8012ed8:	ab0e      	add	r3, sp, #56	; 0x38
 8012eda:	4625      	mov	r5, r4
 8012edc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012ee0:	e717      	b.n	8012d12 <__kernel_rem_pio2+0x2a2>
 8012ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8012ee4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012ee8:	f7ed fb1c 	bl	8000524 <__aeabi_i2d>
 8012eec:	4632      	mov	r2, r6
 8012eee:	463b      	mov	r3, r7
 8012ef0:	f7ed fb82 	bl	80005f8 <__aeabi_dmul>
 8012ef4:	4b84      	ldr	r3, [pc, #528]	; (8013108 <__kernel_rem_pio2+0x698>)
 8012ef6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8012efa:	2200      	movs	r2, #0
 8012efc:	4630      	mov	r0, r6
 8012efe:	4639      	mov	r1, r7
 8012f00:	f7ed fb7a 	bl	80005f8 <__aeabi_dmul>
 8012f04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f08:	4606      	mov	r6, r0
 8012f0a:	460f      	mov	r7, r1
 8012f0c:	e70f      	b.n	8012d2e <__kernel_rem_pio2+0x2be>
 8012f0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012f12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012f16:	f7ed fb6f 	bl	80005f8 <__aeabi_dmul>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f22:	f7ed f9b3 	bl	800028c <__adddf3>
 8012f26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012f2a:	f108 0801 	add.w	r8, r8, #1
 8012f2e:	9b02      	ldr	r3, [sp, #8]
 8012f30:	4598      	cmp	r8, r3
 8012f32:	dc01      	bgt.n	8012f38 <__kernel_rem_pio2+0x4c8>
 8012f34:	45b8      	cmp	r8, r7
 8012f36:	ddea      	ble.n	8012f0e <__kernel_rem_pio2+0x49e>
 8012f38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012f3c:	ab4a      	add	r3, sp, #296	; 0x128
 8012f3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012f42:	ed87 7b00 	vstr	d7, [r7]
 8012f46:	3e01      	subs	r6, #1
 8012f48:	e6f8      	b.n	8012d3c <__kernel_rem_pio2+0x2cc>
 8012f4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012f4c:	2b02      	cmp	r3, #2
 8012f4e:	dc0b      	bgt.n	8012f68 <__kernel_rem_pio2+0x4f8>
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	dc35      	bgt.n	8012fc0 <__kernel_rem_pio2+0x550>
 8012f54:	d059      	beq.n	801300a <__kernel_rem_pio2+0x59a>
 8012f56:	9b04      	ldr	r3, [sp, #16]
 8012f58:	f003 0007 	and.w	r0, r3, #7
 8012f5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012f60:	ecbd 8b02 	vpop	{d8}
 8012f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012f6a:	2b03      	cmp	r3, #3
 8012f6c:	d1f3      	bne.n	8012f56 <__kernel_rem_pio2+0x4e6>
 8012f6e:	ab4a      	add	r3, sp, #296	; 0x128
 8012f70:	4423      	add	r3, r4
 8012f72:	9306      	str	r3, [sp, #24]
 8012f74:	461c      	mov	r4, r3
 8012f76:	469a      	mov	sl, r3
 8012f78:	9502      	str	r5, [sp, #8]
 8012f7a:	9b02      	ldr	r3, [sp, #8]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8012f82:	dc6b      	bgt.n	801305c <__kernel_rem_pio2+0x5ec>
 8012f84:	46aa      	mov	sl, r5
 8012f86:	f1ba 0f01 	cmp.w	sl, #1
 8012f8a:	f1a4 0408 	sub.w	r4, r4, #8
 8012f8e:	f300 8085 	bgt.w	801309c <__kernel_rem_pio2+0x62c>
 8012f92:	9c06      	ldr	r4, [sp, #24]
 8012f94:	2000      	movs	r0, #0
 8012f96:	3408      	adds	r4, #8
 8012f98:	2100      	movs	r1, #0
 8012f9a:	2d01      	cmp	r5, #1
 8012f9c:	f300 809d 	bgt.w	80130da <__kernel_rem_pio2+0x66a>
 8012fa0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012fa4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012fa8:	f1bb 0f00 	cmp.w	fp, #0
 8012fac:	f040 809b 	bne.w	80130e6 <__kernel_rem_pio2+0x676>
 8012fb0:	9b01      	ldr	r3, [sp, #4]
 8012fb2:	e9c3 5600 	strd	r5, r6, [r3]
 8012fb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012fba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012fbe:	e7ca      	b.n	8012f56 <__kernel_rem_pio2+0x4e6>
 8012fc0:	3408      	adds	r4, #8
 8012fc2:	ab4a      	add	r3, sp, #296	; 0x128
 8012fc4:	441c      	add	r4, r3
 8012fc6:	462e      	mov	r6, r5
 8012fc8:	2000      	movs	r0, #0
 8012fca:	2100      	movs	r1, #0
 8012fcc:	2e00      	cmp	r6, #0
 8012fce:	da36      	bge.n	801303e <__kernel_rem_pio2+0x5ce>
 8012fd0:	f1bb 0f00 	cmp.w	fp, #0
 8012fd4:	d039      	beq.n	801304a <__kernel_rem_pio2+0x5da>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fdc:	9c01      	ldr	r4, [sp, #4]
 8012fde:	e9c4 2300 	strd	r2, r3, [r4]
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012fea:	f7ed f94d 	bl	8000288 <__aeabi_dsub>
 8012fee:	ae4c      	add	r6, sp, #304	; 0x130
 8012ff0:	2401      	movs	r4, #1
 8012ff2:	42a5      	cmp	r5, r4
 8012ff4:	da2c      	bge.n	8013050 <__kernel_rem_pio2+0x5e0>
 8012ff6:	f1bb 0f00 	cmp.w	fp, #0
 8012ffa:	d002      	beq.n	8013002 <__kernel_rem_pio2+0x592>
 8012ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013000:	4619      	mov	r1, r3
 8013002:	9b01      	ldr	r3, [sp, #4]
 8013004:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013008:	e7a5      	b.n	8012f56 <__kernel_rem_pio2+0x4e6>
 801300a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801300e:	eb0d 0403 	add.w	r4, sp, r3
 8013012:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013016:	2000      	movs	r0, #0
 8013018:	2100      	movs	r1, #0
 801301a:	2d00      	cmp	r5, #0
 801301c:	da09      	bge.n	8013032 <__kernel_rem_pio2+0x5c2>
 801301e:	f1bb 0f00 	cmp.w	fp, #0
 8013022:	d002      	beq.n	801302a <__kernel_rem_pio2+0x5ba>
 8013024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013028:	4619      	mov	r1, r3
 801302a:	9b01      	ldr	r3, [sp, #4]
 801302c:	e9c3 0100 	strd	r0, r1, [r3]
 8013030:	e791      	b.n	8012f56 <__kernel_rem_pio2+0x4e6>
 8013032:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013036:	f7ed f929 	bl	800028c <__adddf3>
 801303a:	3d01      	subs	r5, #1
 801303c:	e7ed      	b.n	801301a <__kernel_rem_pio2+0x5aa>
 801303e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013042:	f7ed f923 	bl	800028c <__adddf3>
 8013046:	3e01      	subs	r6, #1
 8013048:	e7c0      	b.n	8012fcc <__kernel_rem_pio2+0x55c>
 801304a:	4602      	mov	r2, r0
 801304c:	460b      	mov	r3, r1
 801304e:	e7c5      	b.n	8012fdc <__kernel_rem_pio2+0x56c>
 8013050:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013054:	f7ed f91a 	bl	800028c <__adddf3>
 8013058:	3401      	adds	r4, #1
 801305a:	e7ca      	b.n	8012ff2 <__kernel_rem_pio2+0x582>
 801305c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013060:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013064:	9b02      	ldr	r3, [sp, #8]
 8013066:	3b01      	subs	r3, #1
 8013068:	9302      	str	r3, [sp, #8]
 801306a:	4632      	mov	r2, r6
 801306c:	463b      	mov	r3, r7
 801306e:	4640      	mov	r0, r8
 8013070:	4649      	mov	r1, r9
 8013072:	f7ed f90b 	bl	800028c <__adddf3>
 8013076:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801307a:	4602      	mov	r2, r0
 801307c:	460b      	mov	r3, r1
 801307e:	4640      	mov	r0, r8
 8013080:	4649      	mov	r1, r9
 8013082:	f7ed f901 	bl	8000288 <__aeabi_dsub>
 8013086:	4632      	mov	r2, r6
 8013088:	463b      	mov	r3, r7
 801308a:	f7ed f8ff 	bl	800028c <__adddf3>
 801308e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013092:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013096:	ed8a 7b00 	vstr	d7, [sl]
 801309a:	e76e      	b.n	8012f7a <__kernel_rem_pio2+0x50a>
 801309c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80130a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80130a4:	4640      	mov	r0, r8
 80130a6:	4632      	mov	r2, r6
 80130a8:	463b      	mov	r3, r7
 80130aa:	4649      	mov	r1, r9
 80130ac:	f7ed f8ee 	bl	800028c <__adddf3>
 80130b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130b4:	4602      	mov	r2, r0
 80130b6:	460b      	mov	r3, r1
 80130b8:	4640      	mov	r0, r8
 80130ba:	4649      	mov	r1, r9
 80130bc:	f7ed f8e4 	bl	8000288 <__aeabi_dsub>
 80130c0:	4632      	mov	r2, r6
 80130c2:	463b      	mov	r3, r7
 80130c4:	f7ed f8e2 	bl	800028c <__adddf3>
 80130c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80130d0:	ed84 7b00 	vstr	d7, [r4]
 80130d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130d8:	e755      	b.n	8012f86 <__kernel_rem_pio2+0x516>
 80130da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80130de:	f7ed f8d5 	bl	800028c <__adddf3>
 80130e2:	3d01      	subs	r5, #1
 80130e4:	e759      	b.n	8012f9a <__kernel_rem_pio2+0x52a>
 80130e6:	9b01      	ldr	r3, [sp, #4]
 80130e8:	9a01      	ldr	r2, [sp, #4]
 80130ea:	601d      	str	r5, [r3, #0]
 80130ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80130f0:	605c      	str	r4, [r3, #4]
 80130f2:	609f      	str	r7, [r3, #8]
 80130f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80130f8:	60d3      	str	r3, [r2, #12]
 80130fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130fe:	6110      	str	r0, [r2, #16]
 8013100:	6153      	str	r3, [r2, #20]
 8013102:	e728      	b.n	8012f56 <__kernel_rem_pio2+0x4e6>
 8013104:	41700000 	.word	0x41700000
 8013108:	3e700000 	.word	0x3e700000
 801310c:	00000000 	.word	0x00000000

08013110 <__kernel_sin>:
 8013110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013114:	ed2d 8b04 	vpush	{d8-d9}
 8013118:	eeb0 8a41 	vmov.f32	s16, s2
 801311c:	eef0 8a61 	vmov.f32	s17, s3
 8013120:	ec55 4b10 	vmov	r4, r5, d0
 8013124:	b083      	sub	sp, #12
 8013126:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801312a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801312e:	9001      	str	r0, [sp, #4]
 8013130:	da06      	bge.n	8013140 <__kernel_sin+0x30>
 8013132:	ee10 0a10 	vmov	r0, s0
 8013136:	4629      	mov	r1, r5
 8013138:	f7ed fd0e 	bl	8000b58 <__aeabi_d2iz>
 801313c:	2800      	cmp	r0, #0
 801313e:	d051      	beq.n	80131e4 <__kernel_sin+0xd4>
 8013140:	4622      	mov	r2, r4
 8013142:	462b      	mov	r3, r5
 8013144:	4620      	mov	r0, r4
 8013146:	4629      	mov	r1, r5
 8013148:	f7ed fa56 	bl	80005f8 <__aeabi_dmul>
 801314c:	4682      	mov	sl, r0
 801314e:	468b      	mov	fp, r1
 8013150:	4602      	mov	r2, r0
 8013152:	460b      	mov	r3, r1
 8013154:	4620      	mov	r0, r4
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed fa4e 	bl	80005f8 <__aeabi_dmul>
 801315c:	a341      	add	r3, pc, #260	; (adr r3, 8013264 <__kernel_sin+0x154>)
 801315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013162:	4680      	mov	r8, r0
 8013164:	4689      	mov	r9, r1
 8013166:	4650      	mov	r0, sl
 8013168:	4659      	mov	r1, fp
 801316a:	f7ed fa45 	bl	80005f8 <__aeabi_dmul>
 801316e:	a33f      	add	r3, pc, #252	; (adr r3, 801326c <__kernel_sin+0x15c>)
 8013170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013174:	f7ed f888 	bl	8000288 <__aeabi_dsub>
 8013178:	4652      	mov	r2, sl
 801317a:	465b      	mov	r3, fp
 801317c:	f7ed fa3c 	bl	80005f8 <__aeabi_dmul>
 8013180:	a33c      	add	r3, pc, #240	; (adr r3, 8013274 <__kernel_sin+0x164>)
 8013182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013186:	f7ed f881 	bl	800028c <__adddf3>
 801318a:	4652      	mov	r2, sl
 801318c:	465b      	mov	r3, fp
 801318e:	f7ed fa33 	bl	80005f8 <__aeabi_dmul>
 8013192:	a33a      	add	r3, pc, #232	; (adr r3, 801327c <__kernel_sin+0x16c>)
 8013194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013198:	f7ed f876 	bl	8000288 <__aeabi_dsub>
 801319c:	4652      	mov	r2, sl
 801319e:	465b      	mov	r3, fp
 80131a0:	f7ed fa2a 	bl	80005f8 <__aeabi_dmul>
 80131a4:	a337      	add	r3, pc, #220	; (adr r3, 8013284 <__kernel_sin+0x174>)
 80131a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131aa:	f7ed f86f 	bl	800028c <__adddf3>
 80131ae:	9b01      	ldr	r3, [sp, #4]
 80131b0:	4606      	mov	r6, r0
 80131b2:	460f      	mov	r7, r1
 80131b4:	b9eb      	cbnz	r3, 80131f2 <__kernel_sin+0xe2>
 80131b6:	4602      	mov	r2, r0
 80131b8:	460b      	mov	r3, r1
 80131ba:	4650      	mov	r0, sl
 80131bc:	4659      	mov	r1, fp
 80131be:	f7ed fa1b 	bl	80005f8 <__aeabi_dmul>
 80131c2:	a325      	add	r3, pc, #148	; (adr r3, 8013258 <__kernel_sin+0x148>)
 80131c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c8:	f7ed f85e 	bl	8000288 <__aeabi_dsub>
 80131cc:	4642      	mov	r2, r8
 80131ce:	464b      	mov	r3, r9
 80131d0:	f7ed fa12 	bl	80005f8 <__aeabi_dmul>
 80131d4:	4602      	mov	r2, r0
 80131d6:	460b      	mov	r3, r1
 80131d8:	4620      	mov	r0, r4
 80131da:	4629      	mov	r1, r5
 80131dc:	f7ed f856 	bl	800028c <__adddf3>
 80131e0:	4604      	mov	r4, r0
 80131e2:	460d      	mov	r5, r1
 80131e4:	ec45 4b10 	vmov	d0, r4, r5
 80131e8:	b003      	add	sp, #12
 80131ea:	ecbd 8b04 	vpop	{d8-d9}
 80131ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f2:	4b1b      	ldr	r3, [pc, #108]	; (8013260 <__kernel_sin+0x150>)
 80131f4:	ec51 0b18 	vmov	r0, r1, d8
 80131f8:	2200      	movs	r2, #0
 80131fa:	f7ed f9fd 	bl	80005f8 <__aeabi_dmul>
 80131fe:	4632      	mov	r2, r6
 8013200:	ec41 0b19 	vmov	d9, r0, r1
 8013204:	463b      	mov	r3, r7
 8013206:	4640      	mov	r0, r8
 8013208:	4649      	mov	r1, r9
 801320a:	f7ed f9f5 	bl	80005f8 <__aeabi_dmul>
 801320e:	4602      	mov	r2, r0
 8013210:	460b      	mov	r3, r1
 8013212:	ec51 0b19 	vmov	r0, r1, d9
 8013216:	f7ed f837 	bl	8000288 <__aeabi_dsub>
 801321a:	4652      	mov	r2, sl
 801321c:	465b      	mov	r3, fp
 801321e:	f7ed f9eb 	bl	80005f8 <__aeabi_dmul>
 8013222:	ec53 2b18 	vmov	r2, r3, d8
 8013226:	f7ed f82f 	bl	8000288 <__aeabi_dsub>
 801322a:	a30b      	add	r3, pc, #44	; (adr r3, 8013258 <__kernel_sin+0x148>)
 801322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013230:	4606      	mov	r6, r0
 8013232:	460f      	mov	r7, r1
 8013234:	4640      	mov	r0, r8
 8013236:	4649      	mov	r1, r9
 8013238:	f7ed f9de 	bl	80005f8 <__aeabi_dmul>
 801323c:	4602      	mov	r2, r0
 801323e:	460b      	mov	r3, r1
 8013240:	4630      	mov	r0, r6
 8013242:	4639      	mov	r1, r7
 8013244:	f7ed f822 	bl	800028c <__adddf3>
 8013248:	4602      	mov	r2, r0
 801324a:	460b      	mov	r3, r1
 801324c:	4620      	mov	r0, r4
 801324e:	4629      	mov	r1, r5
 8013250:	f7ed f81a 	bl	8000288 <__aeabi_dsub>
 8013254:	e7c4      	b.n	80131e0 <__kernel_sin+0xd0>
 8013256:	bf00      	nop
 8013258:	55555549 	.word	0x55555549
 801325c:	3fc55555 	.word	0x3fc55555
 8013260:	3fe00000 	.word	0x3fe00000
 8013264:	5acfd57c 	.word	0x5acfd57c
 8013268:	3de5d93a 	.word	0x3de5d93a
 801326c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013270:	3e5ae5e6 	.word	0x3e5ae5e6
 8013274:	57b1fe7d 	.word	0x57b1fe7d
 8013278:	3ec71de3 	.word	0x3ec71de3
 801327c:	19c161d5 	.word	0x19c161d5
 8013280:	3f2a01a0 	.word	0x3f2a01a0
 8013284:	1110f8a6 	.word	0x1110f8a6
 8013288:	3f811111 	.word	0x3f811111

0801328c <with_errno>:
 801328c:	b570      	push	{r4, r5, r6, lr}
 801328e:	4604      	mov	r4, r0
 8013290:	460d      	mov	r5, r1
 8013292:	4616      	mov	r6, r2
 8013294:	f7f9 fcfa 	bl	800cc8c <__errno>
 8013298:	4629      	mov	r1, r5
 801329a:	6006      	str	r6, [r0, #0]
 801329c:	4620      	mov	r0, r4
 801329e:	bd70      	pop	{r4, r5, r6, pc}

080132a0 <xflow>:
 80132a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132a2:	4614      	mov	r4, r2
 80132a4:	461d      	mov	r5, r3
 80132a6:	b108      	cbz	r0, 80132ac <xflow+0xc>
 80132a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80132ac:	e9cd 2300 	strd	r2, r3, [sp]
 80132b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132b4:	4620      	mov	r0, r4
 80132b6:	4629      	mov	r1, r5
 80132b8:	f7ed f99e 	bl	80005f8 <__aeabi_dmul>
 80132bc:	2222      	movs	r2, #34	; 0x22
 80132be:	b003      	add	sp, #12
 80132c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132c4:	f7ff bfe2 	b.w	801328c <with_errno>

080132c8 <__math_uflow>:
 80132c8:	b508      	push	{r3, lr}
 80132ca:	2200      	movs	r2, #0
 80132cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80132d0:	f7ff ffe6 	bl	80132a0 <xflow>
 80132d4:	ec41 0b10 	vmov	d0, r0, r1
 80132d8:	bd08      	pop	{r3, pc}

080132da <__math_oflow>:
 80132da:	b508      	push	{r3, lr}
 80132dc:	2200      	movs	r2, #0
 80132de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80132e2:	f7ff ffdd 	bl	80132a0 <xflow>
 80132e6:	ec41 0b10 	vmov	d0, r0, r1
 80132ea:	bd08      	pop	{r3, pc}

080132ec <fabs>:
 80132ec:	ec51 0b10 	vmov	r0, r1, d0
 80132f0:	ee10 2a10 	vmov	r2, s0
 80132f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80132f8:	ec43 2b10 	vmov	d0, r2, r3
 80132fc:	4770      	bx	lr

080132fe <finite>:
 80132fe:	b082      	sub	sp, #8
 8013300:	ed8d 0b00 	vstr	d0, [sp]
 8013304:	9801      	ldr	r0, [sp, #4]
 8013306:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801330a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801330e:	0fc0      	lsrs	r0, r0, #31
 8013310:	b002      	add	sp, #8
 8013312:	4770      	bx	lr
 8013314:	0000      	movs	r0, r0
	...

08013318 <scalbn>:
 8013318:	b570      	push	{r4, r5, r6, lr}
 801331a:	ec55 4b10 	vmov	r4, r5, d0
 801331e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013322:	4606      	mov	r6, r0
 8013324:	462b      	mov	r3, r5
 8013326:	b99a      	cbnz	r2, 8013350 <scalbn+0x38>
 8013328:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801332c:	4323      	orrs	r3, r4
 801332e:	d036      	beq.n	801339e <scalbn+0x86>
 8013330:	4b39      	ldr	r3, [pc, #228]	; (8013418 <scalbn+0x100>)
 8013332:	4629      	mov	r1, r5
 8013334:	ee10 0a10 	vmov	r0, s0
 8013338:	2200      	movs	r2, #0
 801333a:	f7ed f95d 	bl	80005f8 <__aeabi_dmul>
 801333e:	4b37      	ldr	r3, [pc, #220]	; (801341c <scalbn+0x104>)
 8013340:	429e      	cmp	r6, r3
 8013342:	4604      	mov	r4, r0
 8013344:	460d      	mov	r5, r1
 8013346:	da10      	bge.n	801336a <scalbn+0x52>
 8013348:	a32b      	add	r3, pc, #172	; (adr r3, 80133f8 <scalbn+0xe0>)
 801334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334e:	e03a      	b.n	80133c6 <scalbn+0xae>
 8013350:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013354:	428a      	cmp	r2, r1
 8013356:	d10c      	bne.n	8013372 <scalbn+0x5a>
 8013358:	ee10 2a10 	vmov	r2, s0
 801335c:	4620      	mov	r0, r4
 801335e:	4629      	mov	r1, r5
 8013360:	f7ec ff94 	bl	800028c <__adddf3>
 8013364:	4604      	mov	r4, r0
 8013366:	460d      	mov	r5, r1
 8013368:	e019      	b.n	801339e <scalbn+0x86>
 801336a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801336e:	460b      	mov	r3, r1
 8013370:	3a36      	subs	r2, #54	; 0x36
 8013372:	4432      	add	r2, r6
 8013374:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013378:	428a      	cmp	r2, r1
 801337a:	dd08      	ble.n	801338e <scalbn+0x76>
 801337c:	2d00      	cmp	r5, #0
 801337e:	a120      	add	r1, pc, #128	; (adr r1, 8013400 <scalbn+0xe8>)
 8013380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013384:	da1c      	bge.n	80133c0 <scalbn+0xa8>
 8013386:	a120      	add	r1, pc, #128	; (adr r1, 8013408 <scalbn+0xf0>)
 8013388:	e9d1 0100 	ldrd	r0, r1, [r1]
 801338c:	e018      	b.n	80133c0 <scalbn+0xa8>
 801338e:	2a00      	cmp	r2, #0
 8013390:	dd08      	ble.n	80133a4 <scalbn+0x8c>
 8013392:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801339a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801339e:	ec45 4b10 	vmov	d0, r4, r5
 80133a2:	bd70      	pop	{r4, r5, r6, pc}
 80133a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80133a8:	da19      	bge.n	80133de <scalbn+0xc6>
 80133aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80133ae:	429e      	cmp	r6, r3
 80133b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80133b4:	dd0a      	ble.n	80133cc <scalbn+0xb4>
 80133b6:	a112      	add	r1, pc, #72	; (adr r1, 8013400 <scalbn+0xe8>)
 80133b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d1e2      	bne.n	8013386 <scalbn+0x6e>
 80133c0:	a30f      	add	r3, pc, #60	; (adr r3, 8013400 <scalbn+0xe8>)
 80133c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c6:	f7ed f917 	bl	80005f8 <__aeabi_dmul>
 80133ca:	e7cb      	b.n	8013364 <scalbn+0x4c>
 80133cc:	a10a      	add	r1, pc, #40	; (adr r1, 80133f8 <scalbn+0xe0>)
 80133ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d0b8      	beq.n	8013348 <scalbn+0x30>
 80133d6:	a10e      	add	r1, pc, #56	; (adr r1, 8013410 <scalbn+0xf8>)
 80133d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133dc:	e7b4      	b.n	8013348 <scalbn+0x30>
 80133de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80133e2:	3236      	adds	r2, #54	; 0x36
 80133e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80133e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80133ec:	4620      	mov	r0, r4
 80133ee:	4b0c      	ldr	r3, [pc, #48]	; (8013420 <scalbn+0x108>)
 80133f0:	2200      	movs	r2, #0
 80133f2:	e7e8      	b.n	80133c6 <scalbn+0xae>
 80133f4:	f3af 8000 	nop.w
 80133f8:	c2f8f359 	.word	0xc2f8f359
 80133fc:	01a56e1f 	.word	0x01a56e1f
 8013400:	8800759c 	.word	0x8800759c
 8013404:	7e37e43c 	.word	0x7e37e43c
 8013408:	8800759c 	.word	0x8800759c
 801340c:	fe37e43c 	.word	0xfe37e43c
 8013410:	c2f8f359 	.word	0xc2f8f359
 8013414:	81a56e1f 	.word	0x81a56e1f
 8013418:	43500000 	.word	0x43500000
 801341c:	ffff3cb0 	.word	0xffff3cb0
 8013420:	3c900000 	.word	0x3c900000

08013424 <_init>:
 8013424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013426:	bf00      	nop
 8013428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801342a:	bc08      	pop	{r3}
 801342c:	469e      	mov	lr, r3
 801342e:	4770      	bx	lr

08013430 <_fini>:
 8013430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013432:	bf00      	nop
 8013434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013436:	bc08      	pop	{r3}
 8013438:	469e      	mov	lr, r3
 801343a:	4770      	bx	lr
