
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001efdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033568  0801f170  0801f170  0002f170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080526d8  080526d8  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  080526d8  080526d8  000626d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080526e0  080526e0  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080526e0  080526e0  000626e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080526e4  080526e4  000626e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080526e8  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          00000b94  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000dcc  20000dcc  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c91e  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003465  00000000  00000000  0008cb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  0008fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00090038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1fd  00000000  00000000  000900b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb34  00000000  00000000  000aa2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179de1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb0  00000000  00000000  00179e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024f6c  00000000  00000000  00180ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f154 	.word	0x0801f154

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801f154 	.word	0x0801f154

080001d0 <AT24XX_IsConnected>:
#include "at24xx.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d fc4f 	bl	800da80 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00c fca4 	bl	800cb74 <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 fb66 	bl	8006904 <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00c fd79 	bl	800cd68 <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f018 feb4 	bl	801909c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 fbcb 	bl	8018adc <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01d ff63 	bl	801e220 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 fd71 	bl	8018e48 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f019 f863 	bl	8019438 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 fcfe 	bl	8018d98 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 fce5 	bl	8018d74 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01d ffb3 	bl	801e320 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00b f83b 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b f92e 	bl	800b678 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00a ffc3 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00b f8b6 	bl	800b678 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00a ff26 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00b f81a 	bl	800b678 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00a fe42 	bl	800b47e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00a fe36 	bl	800b47e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00a fe2a 	bl	800b47e <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fe20 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00a ff15 	bl	800b678 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a fdf2 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00a fee7 	bl	800b678 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a fd8e 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00a fe83 	bl	800b678 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a fd7b 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00a fe6f 	bl	800b678 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 f9d4 	bl	8018e48 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f018 f813 	bl	8018adc <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 faed 	bl	801909c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d fc23 	bl	801e320 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 f9b0 	bl	8018e48 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 f9a8 	bl	8018e48 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 fac9 	bl	801909c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f017 ffdc 	bl	8018ad8 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 f98b 	bl	8018e48 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f017 ffcf 	bl	8018adc <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 f950 	bl	8018e48 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f017 ff8f 	bl	8018adc <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 fa69 	bl	801909c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 f937 	bl	8018e48 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 f92e 	bl	8018e48 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d fb8e 	bl	801e320 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f018 f91b 	bl	8018e48 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f017 ff5a 	bl	8018adc <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 fa34 	bl	801909c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a fbb6 	bl	800b47e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00a fcaa 	bl	800b678 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002bc 	.word	0x200002bc
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f017 fed2 	bl	8018d54 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f017 ff41 	bl	8018e48 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f017 fecf 	bl	8018d74 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f017 fd7d 	bl	8018adc <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a fa23 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	200002bc 	.word	0x200002bc

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a fa03 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	200002bc 	.word	0x200002bc

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a f9e3 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a f9c3 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	200002bc 	.word	0x200002bc

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a f9a3 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	200002bc 	.word	0x200002bc

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a f983 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	200002bc 	.word	0x200002bc

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a f963 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	200002bc 	.word	0x200002bc

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a f943 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	200002bc 	.word	0x200002bc

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a f923 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	200002bc 	.word	0x200002bc

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f00a f903 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	200002bc 	.word	0x200002bc

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f00a f8e3 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002bc 	.word	0x200002bc

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f00a f8c3 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	200002bc 	.word	0x200002bc

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f00a f8a3 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	200002bc 	.word	0x200002bc

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f00a f883 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	200002bc 	.word	0x200002bc

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f00a f863 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	200002bc 	.word	0x200002bc

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f00a f843 	bl	800b47e <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	200002bc 	.word	0x200002bc

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	08051f6c 	.word	0x08051f6c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01c fe75 	bl	801e220 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 facb 	bl	8018ad8 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f017 fee9 	bl	801932c <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 fab7 	bl	8018adc <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 fbd7 	bl	8018d74 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 fbc8 	bl	8018d74 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 fa74 	bl	8018ad8 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f017 ff86 	bl	8019508 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 fbc3 	bl	8018ddc <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 fbf4 	bl	8018e48 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01c fdd6 	bl	801e220 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f017 ff44 	bl	8019508 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 fba6 	bl	8018ddc <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 fbd7 	bl	8018e48 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 fa18 	bl	8018adc <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01c fdb0 	bl	801e220 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f017 ff1e 	bl	8019508 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f017 ff30 	bl	8019544 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 fb70 	bl	8018ddc <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 fba1 	bl	8018e48 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01c fd83 	bl	801e220 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 f9d8 	bl	8018ad8 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f017 feea 	bl	8019508 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 fb19 	bl	8018ddc <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 f992 	bl	8018ad8 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f017 fc6b 	bl	801909c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fb2e 	bl	8018e48 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f017 fe20 	bl	8019438 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f017 fa73 	bl	8018d74 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f014 f923 	bl	8015b80 <HAL_UART_Receive_IT>
//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	20000974 	.word	0x20000974
 800194c:	20000975 	.word	0x20000975
 8001950:	20000964 	.word	0x20000964
 8001954:	200004d8 	.word	0x200004d8

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0c3      	sub	sp, #268	; 0x10c
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f004 feeb 	bl	8006738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f002 f8eb 	bl	8003b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 faa9 	bl	8003ebc <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 fb81 	bl	8004070 <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f002 f983 	bl	8003c78 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 fa51 	bl	8003e18 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 fa19 	bl	8003dac <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f002 f9e1 	bl	8003d40 <MX_SPI2_Init>
  MX_DMA_Init();
 800197e:	f002 fa75 	bl	8003e6c <MX_DMA_Init>
  MX_DAC_Init();
 8001982:	f002 f945 	bl	8003c10 <MX_DAC_Init>
  MX_SPI1_Init();
 8001986:	f002 f9a5 	bl	8003cd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800198a:	f003 fe8d 	bl	80056a8 <LCD_Init>
	XPT2046_Init();
 800198e:	f004 fddd 	bl	800654c <XPT2046_Init>
	BME280_Init();
 8001992:	f7fe ff23 	bl	80007dc <BME280_Init>
	W25QXX_Init();
 8001996:	f004 fd9f 	bl	80064d8 <W25QXX_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 fca9 	bl	8004300 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019b6:	f240 321e 	movw	r2, #798	; 0x31e
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f002 fc9f 	bl	8004300 <LCD_Rect_Fill>


	unsigned int id = W25QXX_Read_ID();
 80019c2:	f004 fd5f 	bl	8006484 <W25QXX_Read_ID>
 80019c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	2202      	movs	r2, #2
 80019d0:	49c6      	ldr	r1, [pc, #792]	; (8001cec <main+0x394>)
 80019d2:	48c7      	ldr	r0, [pc, #796]	; (8001cf0 <main+0x398>)
 80019d4:	f013 ff5b 	bl	801588e <HAL_UART_Transmit>

	char str1[30];

	sprintf(str1,"ID:0x%X\r\n",id);
 80019d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019dc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019e0:	49c4      	ldr	r1, [pc, #784]	; (8001cf4 <main+0x39c>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f018 fe10 	bl	801a608 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80019e8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019ec:	4618      	mov	r0, r3
 80019ee:	f017 f815 	bl	8018a1c <strlen>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	48bc      	ldr	r0, [pc, #752]	; (8001cf0 <main+0x398>)
 8001a00:	f013 ff45 	bl	801588e <HAL_UART_Transmit>
		uint8_t   SR3;
	} w25_info_t;

	w25_info_t  w25_info;

	id &= 0x0000ffff;
 8001a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	switch(id)
 8001a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001a16:	3b11      	subs	r3, #17
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d87e      	bhi.n	8001b1a <main+0x1c2>
 8001a1c:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <main+0xcc>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001b07 	.word	0x08001b07
 8001a28:	08001af3 	.word	0x08001af3
 8001a2c:	08001adf 	.word	0x08001adf
 8001a30:	08001acb 	.word	0x08001acb
 8001a34:	08001ab7 	.word	0x08001ab7
 8001a38:	08001aa3 	.word	0x08001aa3
 8001a3c:	08001a8f 	.word	0x08001a8f
 8001a40:	08001a79 	.word	0x08001a79
 8001a44:	08001a63 	.word	0x08001a63
 8001a48:	08001a4d 	.word	0x08001a4d
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8001a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q512\r\n");
 8001a54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a58:	49a7      	ldr	r1, [pc, #668]	; (8001cf8 <main+0x3a0>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f018 fdd4 	bl	801a608 <siprintf>
		break;
 8001a60:	e070      	b.n	8001b44 <main+0x1ec>
	case 0x4019:
		w25_info.BlockCount=512;
 8001a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q256\r\n");
 8001a6a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a6e:	49a3      	ldr	r1, [pc, #652]	; (8001cfc <main+0x3a4>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f018 fdc9 	bl	801a608 <siprintf>
		break;
 8001a76:	e065      	b.n	8001b44 <main+0x1ec>
	case 0x4018:
		w25_info.BlockCount=256;
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q128\r\n");
 8001a80:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a84:	499e      	ldr	r1, [pc, #632]	; (8001d00 <main+0x3a8>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f018 fdbe 	bl	801a608 <siprintf>
		break;
 8001a8c:	e05a      	b.n	8001b44 <main+0x1ec>
	case 0x4017:
		w25_info.BlockCount=128;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q64\r\n");
 8001a94:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a98:	499a      	ldr	r1, [pc, #616]	; (8001d04 <main+0x3ac>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f018 fdb4 	bl	801a608 <siprintf>
		break;
 8001aa0:	e050      	b.n	8001b44 <main+0x1ec>
	case 0x4016:
		w25_info.BlockCount=64;
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q32\r\n");
 8001aa8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001aac:	4996      	ldr	r1, [pc, #600]	; (8001d08 <main+0x3b0>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f018 fdaa 	bl	801a608 <siprintf>
		break;
 8001ab4:	e046      	b.n	8001b44 <main+0x1ec>
	case 0x4015:
		w25_info.BlockCount=32;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q16\r\n");
 8001abc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ac0:	4992      	ldr	r1, [pc, #584]	; (8001d0c <main+0x3b4>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f018 fda0 	bl	801a608 <siprintf>
		break;
 8001ac8:	e03c      	b.n	8001b44 <main+0x1ec>
	case 0x4014:
		w25_info.BlockCount=16;
 8001aca:	2310      	movs	r3, #16
 8001acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q80\r\n");
 8001ad0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ad4:	498e      	ldr	r1, [pc, #568]	; (8001d10 <main+0x3b8>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f018 fd96 	bl	801a608 <siprintf>
		break;
 8001adc:	e032      	b.n	8001b44 <main+0x1ec>
	case 0x4013:
		w25_info.BlockCount=8;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q40\r\n");
 8001ae4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ae8:	498a      	ldr	r1, [pc, #552]	; (8001d14 <main+0x3bc>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f018 fd8c 	bl	801a608 <siprintf>
		break;
 8001af0:	e028      	b.n	8001b44 <main+0x1ec>
	case 0x4012:
		w25_info.BlockCount=4;
 8001af2:	2304      	movs	r3, #4
 8001af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q20\r\n");
 8001af8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001afc:	4986      	ldr	r1, [pc, #536]	; (8001d18 <main+0x3c0>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f018 fd82 	bl	801a608 <siprintf>
		break;
 8001b04:	e01e      	b.n	8001b44 <main+0x1ec>
	case 0x4011:
		w25_info.BlockCount=2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		sprintf(str1,"w25qxx Chip: w25q10\r\n");
 8001b0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b10:	4982      	ldr	r1, [pc, #520]	; (8001d1c <main+0x3c4>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f018 fd78 	bl	801a608 <siprintf>
		break;
 8001b18:	e014      	b.n	8001b44 <main+0x1ec>
	default:
		sprintf(str1,"w25qxx Unknown ID\r\n");
 8001b1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b1e:	4980      	ldr	r1, [pc, #512]	; (8001d20 <main+0x3c8>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f018 fd71 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f016 ff76 	bl	8018a1c <strlen>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3c:	486c      	ldr	r0, [pc, #432]	; (8001cf0 <main+0x398>)
 8001b3e:	f013 fea6 	bl	801588e <HAL_UART_Transmit>
		break;
 8001b42:	bf00      	nop
	}

		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001b44:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f016 ff67 	bl	8018a1c <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	4865      	ldr	r0, [pc, #404]	; (8001cf0 <main+0x398>)
 8001b5c:	f013 fe97 	bl	801588e <HAL_UART_Transmit>
		w25_info.PageSize=256;
 8001b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b64:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		w25_info.SectorSize=0x1000;
 8001b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		w25_info.SectorCount=w25_info.BlockCount*16;
 8001b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8001b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b7e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8001b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		w25_info.BlockSize=w25_info.SectorSize*16;
 8001b92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8001b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ba0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	0a9b      	lsrs	r3, r3, #10
 8001baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sprintf(str1,"Page Size: %d Bytes\r\n",(unsigned int)w25_info.PageSize);
 8001bae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bb8:	495a      	ldr	r1, [pc, #360]	; (8001d24 <main+0x3cc>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f018 fd24 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bc0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f016 ff29 	bl	8018a1c <strlen>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	4846      	ldr	r0, [pc, #280]	; (8001cf0 <main+0x398>)
 8001bd8:	f013 fe59 	bl	801588e <HAL_UART_Transmit>
		sprintf(str1,"Page Count: %u\r\n",(unsigned int)w25_info.PageCount);
 8001bdc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001be0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001be4:	4950      	ldr	r1, [pc, #320]	; (8001d28 <main+0x3d0>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f018 fd0e 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001bec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f016 ff13 	bl	8018a1c <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c02:	483b      	ldr	r0, [pc, #236]	; (8001cf0 <main+0x398>)
 8001c04:	f013 fe43 	bl	801588e <HAL_UART_Transmit>
		sprintf(str1,"Sector Size: %u Bytes\r\n",(unsigned int)w25_info.SectorSize);
 8001c08:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c10:	4946      	ldr	r1, [pc, #280]	; (8001d2c <main+0x3d4>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f018 fcf8 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c18:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f016 fefd 	bl	8018a1c <strlen>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	4830      	ldr	r0, [pc, #192]	; (8001cf0 <main+0x398>)
 8001c30:	f013 fe2d 	bl	801588e <HAL_UART_Transmit>
		sprintf(str1,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 8001c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c38:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c3c:	493c      	ldr	r1, [pc, #240]	; (8001d30 <main+0x3d8>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f018 fce2 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c44:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f016 fee7 	bl	8018a1c <strlen>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	4825      	ldr	r0, [pc, #148]	; (8001cf0 <main+0x398>)
 8001c5c:	f013 fe17 	bl	801588e <HAL_UART_Transmit>
		sprintf(str1,"Block Size: %u Bytes\r\n",(unsigned int)w25_info.BlockSize);
 8001c60:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c64:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c68:	4932      	ldr	r1, [pc, #200]	; (8001d34 <main+0x3dc>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f018 fccc 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c70:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c74:	4618      	mov	r0, r3
 8001c76:	f016 fed1 	bl	8018a1c <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c86:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <main+0x398>)
 8001c88:	f013 fe01 	bl	801588e <HAL_UART_Transmit>
		sprintf(str1,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
 8001c8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c90:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c94:	4928      	ldr	r1, [pc, #160]	; (8001d38 <main+0x3e0>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f018 fcb6 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001c9c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f016 febb 	bl	8018a1c <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	480f      	ldr	r0, [pc, #60]	; (8001cf0 <main+0x398>)
 8001cb4:	f013 fdeb 	bl	801588e <HAL_UART_Transmit>
		sprintf(str1,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
 8001cb8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001cbc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cc0:	491e      	ldr	r1, [pc, #120]	; (8001d3c <main+0x3e4>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f018 fca0 	bl	801a608 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001cc8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f016 fea5 	bl	8018a1c <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <main+0x398>)
 8001ce0:	f013 fdd5 	bl	801588e <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001cea:	e051      	b.n	8001d90 <main+0x438>
 8001cec:	08051f9c 	.word	0x08051f9c
 8001cf0:	200004d8 	.word	0x200004d8
 8001cf4:	08051f7c 	.word	0x08051f7c
 8001cf8:	08051f88 	.word	0x08051f88
 8001cfc:	08051fa0 	.word	0x08051fa0
 8001d00:	08051fb8 	.word	0x08051fb8
 8001d04:	08051fd0 	.word	0x08051fd0
 8001d08:	08051fe8 	.word	0x08051fe8
 8001d0c:	08052000 	.word	0x08052000
 8001d10:	08052018 	.word	0x08052018
 8001d14:	08052030 	.word	0x08052030
 8001d18:	08052048 	.word	0x08052048
 8001d1c:	08052060 	.word	0x08052060
 8001d20:	08052078 	.word	0x08052078
 8001d24:	0805208c 	.word	0x0805208c
 8001d28:	080520a4 	.word	0x080520a4
 8001d2c:	080520b8 	.word	0x080520b8
 8001d30:	080520d0 	.word	0x080520d0
 8001d34:	080520e4 	.word	0x080520e4
 8001d38:	080520fc 	.word	0x080520fc
 8001d3c:	08052110 	.word	0x08052110
 8001d40:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fa9e 	bl	8000290 <AT24XX_Read>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461c      	mov	r4, r3
 8001d58:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fa92 	bl	8000290 <AT24XX_Read>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4620      	mov	r0, r4
 8001d72:	f7ff fdb3 	bl	80018dc <byteS>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d7e:	b211      	sxth	r1, r2
 8001d80:	4a86      	ldr	r2, [pc, #536]	; (8001f9c <main+0x644>)
 8001d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d86:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8001d90:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8001d94:	2b9a      	cmp	r3, #154	; 0x9a
 8001d96:	d9d3      	bls.n	8001d40 <main+0x3e8>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001d9e:	e027      	b.n	8001df0 <main+0x498>
 8001da0:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001da4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fa6e 	bl	8000290 <AT24XX_Read>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461c      	mov	r4, r3
 8001db8:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa62 	bl	8000290 <AT24XX_Read>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff fd83 	bl	80018dc <byteS>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dde:	b211      	sxth	r1, r2
 8001de0:	4a6f      	ldr	r2, [pc, #444]	; (8001fa0 <main+0x648>)
 8001de2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001de6:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001dea:	3301      	adds	r3, #1
 8001dec:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8001df0:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001df4:	2b9a      	cmp	r3, #154	; 0x9a
 8001df6:	d9d3      	bls.n	8001da0 <main+0x448>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001dfe:	e027      	b.n	8001e50 <main+0x4f8>
 8001e00:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e04:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fa3e 	bl	8000290 <AT24XX_Read>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461c      	mov	r4, r3
 8001e18:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fa32 	bl	8000290 <AT24XX_Read>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff fd53 	bl	80018dc <byteS>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e3e:	b211      	sxth	r1, r2
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <main+0x64c>)
 8001e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001e46:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
 8001e50:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8001e54:	2b9a      	cmp	r3, #154	; 0x9a
 8001e56:	d9d3      	bls.n	8001e00 <main+0x4a8>


//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001e58:	4a53      	ldr	r2, [pc, #332]	; (8001fa8 <main+0x650>)
 8001e5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e60:	c303      	stmia	r3!, {r0, r1}
 8001e62:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001e64:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001e68:	2364      	movs	r3, #100	; 0x64
 8001e6a:	220a      	movs	r2, #10
 8001e6c:	484f      	ldr	r0, [pc, #316]	; (8001fac <main+0x654>)
 8001e6e:	f013 fd0e 	bl	801588e <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <main+0x658>)
 8001e74:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001e78:	461d      	mov	r5, r3
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	682b      	ldr	r3, [r5, #0]
 8001e80:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001e82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e86:	2214      	movs	r2, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4848      	ldr	r0, [pc, #288]	; (8001fac <main+0x654>)
 8001e8c:	f013 fe33 	bl	8015af6 <HAL_UART_Transmit_IT>

//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001e90:	2210      	movs	r2, #16
 8001e92:	4948      	ldr	r1, [pc, #288]	; (8001fb4 <main+0x65c>)
 8001e94:	4845      	ldr	r0, [pc, #276]	; (8001fac <main+0x654>)
 8001e96:	f013 fe73 	bl	8015b80 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4846      	ldr	r0, [pc, #280]	; (8001fb8 <main+0x660>)
 8001e9e:	f009 f8e5 	bl	800b06c <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d12c      	bne.n	8001f02 <main+0x5aa>

			uint16_t touchX = getX();
 8001ea8:	f004 fc12 	bl	80066d0 <getX>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			uint16_t touchY = getY();
 8001eb2:	f004 fc27 	bl	8006704 <getY>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
			if (touchX && touchY && touchX != 0x0DB)
 8001ebc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d012      	beq.n	8001eea <main+0x592>
 8001ec4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00e      	beq.n	8001eea <main+0x592>
 8001ecc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001ed0:	2bdb      	cmp	r3, #219	; 0xdb
 8001ed2:	d00a      	beq.n	8001eea <main+0x592>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001ed4:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001ed8:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001edc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f002 fa0b 	bl	8004300 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	4833      	ldr	r0, [pc, #204]	; (8001fbc <main+0x664>)
 8001ef0:	f009 f8d4 	bl	800b09c <HAL_GPIO_WritePin>
			touchX = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			touchY = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8001f00:	e004      	b.n	8001f0c <main+0x5b4>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	482d      	ldr	r0, [pc, #180]	; (8001fbc <main+0x664>)
 8001f08:	f009 f8c8 	bl	800b09c <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001f0c:	f7fe ff54 	bl	8000db8 <DS3231_getSec>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <main+0x668>)
 8001f16:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <main+0x66c>)
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <main+0x668>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d0ba      	beq.n	8001e9a <main+0x542>

			rtcMin = DS3231_getMin();
 8001f24:	f7fe ff56 	bl	8000dd4 <DS3231_getMin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <main+0x670>)
 8001f2e:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <main+0x674>)
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2301      	movs	r3, #1
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	2123      	movs	r1, #35	; 0x23
 8001f3e:	20aa      	movs	r0, #170	; 0xaa
 8001f40:	f002 fe22 	bl	8004b88 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <main+0x674>)
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2208      	movs	r2, #8
 8001f50:	214b      	movs	r1, #75	; 0x4b
 8001f52:	20aa      	movs	r0, #170	; 0xaa
 8001f54:	f002 fe18 	bl	8004b88 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <main+0x668>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d034      	beq.n	8001fd0 <main+0x678>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <main+0x674>)
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	2207      	movs	r2, #7
 8001f72:	2123      	movs	r1, #35	; 0x23
 8001f74:	20aa      	movs	r0, #170	; 0xaa
 8001f76:	f002 fe07 	bl	8004b88 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <main+0x674>)
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	2207      	movs	r2, #7
 8001f86:	214b      	movs	r1, #75	; 0x4b
 8001f88:	20aa      	movs	r0, #170	; 0xaa
 8001f8a:	f002 fdfd 	bl	8004b88 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <main+0x660>)
 8001f96:	f009 f881 	bl	800b09c <HAL_GPIO_WritePin>
 8001f9a:	e033      	b.n	8002004 <main+0x6ac>
 8001f9c:	200005bc 	.word	0x200005bc
 8001fa0:	200006f4 	.word	0x200006f4
 8001fa4:	2000082c 	.word	0x2000082c
 8001fa8:	08052180 	.word	0x08052180
 8001fac:	200004d8 	.word	0x200004d8
 8001fb0:	0805218c 	.word	0x0805218c
 8001fb4:	20000975 	.word	0x20000975
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	2000056d 	.word	0x2000056d
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	2000056e 	.word	0x2000056e
 8001fcc:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	2207      	movs	r2, #7
 8001fdc:	2123      	movs	r1, #35	; 0x23
 8001fde:	20aa      	movs	r0, #170	; 0xaa
 8001fe0:	f002 fdd2 	bl	8004b88 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2301      	movs	r3, #1
 8001fee:	2207      	movs	r2, #7
 8001ff0:	214b      	movs	r1, #75	; 0x4b
 8001ff2:	20aa      	movs	r0, #170	; 0xaa
 8001ff4:	f002 fdc8 	bl	8004b88 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffe:	48bb      	ldr	r0, [pc, #748]	; (80022ec <main+0x994>)
 8002000:	f009 f84c 	bl	800b09c <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8002004:	4bba      	ldr	r3, [pc, #744]	; (80022f0 <main+0x998>)
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	4bba      	ldr	r3, [pc, #744]	; (80022f4 <main+0x99c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	f001 8098 	beq.w	8003142 <main+0x17ea>

				rtcHrs = DS3231_getHrs();
 8002012:	f7fe feed 	bl	8000df0 <DS3231_getHrs>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4bb7      	ldr	r3, [pc, #732]	; (80022f8 <main+0x9a0>)
 800201c:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 800201e:	4bb4      	ldr	r3, [pc, #720]	; (80022f0 <main+0x998>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002028:	49b4      	ldr	r1, [pc, #720]	; (80022fc <main+0x9a4>)
 800202a:	4618      	mov	r0, r3
 800202c:	f018 faec 	bl	801a608 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8002030:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002034:	2300      	movs	r3, #0
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	2301      	movs	r3, #1
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4bb0      	ldr	r3, [pc, #704]	; (8002300 <main+0x9a8>)
 800203e:	2164      	movs	r1, #100	; 0x64
 8002040:	20b2      	movs	r0, #178	; 0xb2
 8002042:	f003 fab7 	bl	80055b4 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8002046:	4bab      	ldr	r3, [pc, #684]	; (80022f4 <main+0x99c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002050:	49aa      	ldr	r1, [pc, #680]	; (80022fc <main+0x9a4>)
 8002052:	4618      	mov	r0, r3
 8002054:	f018 fad8 	bl	801a608 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8002058:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800205c:	4ba9      	ldr	r3, [pc, #676]	; (8002304 <main+0x9ac>)
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2301      	movs	r3, #1
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4ba6      	ldr	r3, [pc, #664]	; (8002300 <main+0x9a8>)
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	20b2      	movs	r0, #178	; 0xb2
 800206a:	f003 faa3 	bl	80055b4 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 800206e:	4ba6      	ldr	r3, [pc, #664]	; (8002308 <main+0x9b0>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4ba1      	ldr	r3, [pc, #644]	; (80022f8 <main+0x9a0>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	f000 80fb 	beq.w	8002272 <main+0x91a>

					rtcDay = DS3231_getDay();
 800207c:	f7fe fec6 	bl	8000e0c <DS3231_getDay>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4ba1      	ldr	r3, [pc, #644]	; (800230c <main+0x9b4>)
 8002086:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8002088:	f7fe fece 	bl	8000e28 <DS3231_getDate>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	4b9f      	ldr	r3, [pc, #636]	; (8002310 <main+0x9b8>)
 8002092:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8002094:	f7fe fed6 	bl	8000e44 <DS3231_getMonth>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b9d      	ldr	r3, [pc, #628]	; (8002314 <main+0x9bc>)
 800209e:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 80020a0:	f7fe fede 	bl	8000e60 <DS3231_getYear>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b9b      	ldr	r3, [pc, #620]	; (8002318 <main+0x9c0>)
 80020aa:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 80020ac:	4b96      	ldr	r3, [pc, #600]	; (8002308 <main+0x9b0>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b6:	4991      	ldr	r1, [pc, #580]	; (80022fc <main+0x9a4>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f018 faa5 	bl	801a608 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80020be:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020c2:	2300      	movs	r3, #0
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	2301      	movs	r3, #1
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	4b8d      	ldr	r3, [pc, #564]	; (8002300 <main+0x9a8>)
 80020cc:	2164      	movs	r1, #100	; 0x64
 80020ce:	2000      	movs	r0, #0
 80020d0:	f003 fa70 	bl	80055b4 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 80020d4:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <main+0x9a0>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020de:	4987      	ldr	r1, [pc, #540]	; (80022fc <main+0x9a4>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f018 fa91 	bl	801a608 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80020e6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020ea:	4b86      	ldr	r3, [pc, #536]	; (8002304 <main+0x9ac>)
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2301      	movs	r3, #1
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4b83      	ldr	r3, [pc, #524]	; (8002300 <main+0x9a8>)
 80020f4:	2164      	movs	r1, #100	; 0x64
 80020f6:	2000      	movs	r0, #0
 80020f8:	f003 fa5c 	bl	80055b4 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 80020fc:	4b87      	ldr	r3, [pc, #540]	; (800231c <main+0x9c4>)
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	4b82      	ldr	r3, [pc, #520]	; (800230c <main+0x9b4>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	f000 80a8 	beq.w	800225a <main+0x902>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 800210a:	4b80      	ldr	r3, [pc, #512]	; (800230c <main+0x9b4>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	1d5a      	adds	r2, r3, #5
 8002110:	4b83      	ldr	r3, [pc, #524]	; (8002320 <main+0x9c8>)
 8002112:	fb83 1302 	smull	r1, r3, r3, r2
 8002116:	4413      	add	r3, r2
 8002118:	1099      	asrs	r1, r3, #2
 800211a:	17d3      	asrs	r3, r2, #31
 800211c:	1ac9      	subs	r1, r1, r3
 800211e:	460b      	mov	r3, r1
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	1a5b      	subs	r3, r3, r1
 8002124:	1ad1      	subs	r1, r2, r3
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <main+0x9cc>)
 8002128:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2301      	movs	r3, #1
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4b7c      	ldr	r3, [pc, #496]	; (8002328 <main+0x9d0>)
 8002136:	218c      	movs	r1, #140	; 0x8c
 8002138:	2005      	movs	r0, #5
 800213a:	f003 fa3b 	bl	80055b4 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 800213e:	4b73      	ldr	r3, [pc, #460]	; (800230c <main+0x9b4>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	1d9a      	adds	r2, r3, #6
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <main+0x9c8>)
 8002146:	fb83 1302 	smull	r1, r3, r3, r2
 800214a:	4413      	add	r3, r2
 800214c:	1099      	asrs	r1, r3, #2
 800214e:	17d3      	asrs	r3, r2, #31
 8002150:	1ac9      	subs	r1, r1, r3
 8002152:	460b      	mov	r3, r1
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a5b      	subs	r3, r3, r1
 8002158:	1ad1      	subs	r1, r2, r3
 800215a:	4b72      	ldr	r3, [pc, #456]	; (8002324 <main+0x9cc>)
 800215c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002160:	23ff      	movs	r3, #255	; 0xff
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2301      	movs	r3, #1
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <main+0x9d0>)
 800216a:	218c      	movs	r1, #140	; 0x8c
 800216c:	2005      	movs	r0, #5
 800216e:	f003 fa21 	bl	80055b4 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8002172:	4b68      	ldr	r3, [pc, #416]	; (8002314 <main+0x9bc>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	f103 010a 	add.w	r1, r3, #10
 800217a:	4b6c      	ldr	r3, [pc, #432]	; (800232c <main+0x9d4>)
 800217c:	fb83 2301 	smull	r2, r3, r3, r1
 8002180:	105a      	asrs	r2, r3, #1
 8002182:	17cb      	asrs	r3, r1, #31
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	1aca      	subs	r2, r1, r3
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <main+0x9d8>)
 8002192:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002196:	2300      	movs	r3, #0
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	2301      	movs	r3, #1
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4b62      	ldr	r3, [pc, #392]	; (8002328 <main+0x9d0>)
 80021a0:	218c      	movs	r1, #140	; 0x8c
 80021a2:	2096      	movs	r0, #150	; 0x96
 80021a4:	f003 fa06 	bl	80055b4 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 80021a8:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <main+0x9bc>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f103 010b 	add.w	r1, r3, #11
 80021b0:	4b5e      	ldr	r3, [pc, #376]	; (800232c <main+0x9d4>)
 80021b2:	fb83 2301 	smull	r2, r3, r3, r1
 80021b6:	105a      	asrs	r2, r3, #1
 80021b8:	17cb      	asrs	r3, r1, #31
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	1aca      	subs	r2, r1, r3
 80021c6:	4b5a      	ldr	r3, [pc, #360]	; (8002330 <main+0x9d8>)
 80021c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2301      	movs	r3, #1
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4b54      	ldr	r3, [pc, #336]	; (8002328 <main+0x9d0>)
 80021d8:	218c      	movs	r1, #140	; 0x8c
 80021da:	2096      	movs	r0, #150	; 0x96
 80021dc:	f003 f9ea 	bl	80055b4 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80021e0:	4b54      	ldr	r3, [pc, #336]	; (8002334 <main+0x9dc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <main+0x9e0>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <main+0x9e4>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	460b      	mov	r3, r1
 80021f8:	4951      	ldr	r1, [pc, #324]	; (8002340 <main+0x9e8>)
 80021fa:	f018 fa05 	bl	801a608 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80021fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002202:	2300      	movs	r3, #0
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2301      	movs	r3, #1
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <main+0x9d0>)
 800220c:	218c      	movs	r1, #140	; 0x8c
 800220e:	20fa      	movs	r0, #250	; 0xfa
 8002210:	f003 f9d0 	bl	80055b4 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8002214:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <main+0x9b8>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <main+0x9bc>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <main+0x9c0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	460b      	mov	r3, r1
 800222c:	4944      	ldr	r1, [pc, #272]	; (8002340 <main+0x9e8>)
 800222e:	f018 f9eb 	bl	801a608 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8002232:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2301      	movs	r3, #1
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4b39      	ldr	r3, [pc, #228]	; (8002328 <main+0x9d0>)
 8002242:	218c      	movs	r1, #140	; 0x8c
 8002244:	20fa      	movs	r0, #250	; 0xfa
 8002246:	f003 f9b5 	bl	80055b4 <LCD_Font>

						rtcDayLast = rtcDay;
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <main+0x9b4>)
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <main+0x9c4>)
 8002250:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <main+0x9b8>)
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <main+0x9dc>)
 8002258:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <main+0x9bc>)
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <main+0x9e0>)
 8002260:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <main+0x9c0>)
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <main+0x9e4>)
 8002268:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <main+0x9a0>)
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <main+0x9b0>)
 8002270:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <main+0x99c>)
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <main+0x998>)
 8002278:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 800227a:	f04f 30ff 	mov.w	r0, #4294967295
 800227e:	f7fe f8b3 	bl	80003e8 <BME280_getTemperature>
 8002282:	ee10 3a10 	vmov	r3, s0
 8002286:	4618      	mov	r0, r3
 8002288:	f016 fd86 	bl	8018d98 <__aeabi_f2d>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	492c      	ldr	r1, [pc, #176]	; (8002344 <main+0x9ec>)
 8002292:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8002296:	f04f 30ff 	mov.w	r0, #4294967295
 800229a:	f7fe f91d 	bl	80004d8 <BME280_getHumidity>
 800229e:	ee10 3a10 	vmov	r3, s0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f016 fd78 	bl	8018d98 <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4926      	ldr	r1, [pc, #152]	; (8002348 <main+0x9f0>)
 80022ae:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 80022b2:	f7fe f9b1 	bl	8000618 <BME280_getPressure>
 80022b6:	eef0 7a40 	vmov.f32	s15, s0
 80022ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022be:	ee17 3a90 	vmov	r3, s15
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <main+0x9f4>)
 80022c6:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <main+0x9f4>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022d0:	f240 8737 	bls.w	8003142 <main+0x17ea>
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <main+0x9f4>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f240 424b 	movw	r2, #1099	; 0x44b
 80022dc:	4293      	cmp	r3, r2
 80022de:	f200 8730 	bhi.w	8003142 <main+0x17ea>
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <main+0x9ec>)
 80022e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e8:	e032      	b.n	8002350 <main+0x9f8>
 80022ea:	bf00      	nop
 80022ec:	40020800 	.word	0x40020800
 80022f0:	20000001 	.word	0x20000001
 80022f4:	2000056e 	.word	0x2000056e
 80022f8:	2000056f 	.word	0x2000056f
 80022fc:	08052124 	.word	0x08052124
 8002300:	08051f38 	.word	0x08051f38
 8002304:	00ffa500 	.word	0x00ffa500
 8002308:	20000002 	.word	0x20000002
 800230c:	20000570 	.word	0x20000570
 8002310:	20000571 	.word	0x20000571
 8002314:	20000572 	.word	0x20000572
 8002318:	20000573 	.word	0x20000573
 800231c:	20000574 	.word	0x20000574
 8002320:	92492493 	.word	0x92492493
 8002324:	20000008 	.word	0x20000008
 8002328:	080298a0 	.word	0x080298a0
 800232c:	2aaaaaab 	.word	0x2aaaaaab
 8002330:	20000024 	.word	0x20000024
 8002334:	20000575 	.word	0x20000575
 8002338:	20000576 	.word	0x20000576
 800233c:	20000577 	.word	0x20000577
 8002340:	0805212c 	.word	0x0805212c
 8002344:	20000578 	.word	0x20000578
 8002348:	20000588 	.word	0x20000588
 800234c:	200005b8 	.word	0x200005b8
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	4b8a      	ldr	r3, [pc, #552]	; (8002580 <main+0xc28>)
 8002356:	f016 ffe9 	bl	801932c <__aeabi_dcmplt>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 86f0 	beq.w	8003142 <main+0x17ea>
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <main+0xc2c>)
 8002364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	4b86      	ldr	r3, [pc, #536]	; (8002588 <main+0xc30>)
 800236e:	f016 fffb 	bl	8019368 <__aeabi_dcmpgt>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 86e4 	beq.w	8003142 <main+0x17ea>
 800237a:	4b84      	ldr	r3, [pc, #528]	; (800258c <main+0xc34>)
 800237c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f016 ffee 	bl	8019368 <__aeabi_dcmpgt>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 86d7 	beq.w	8003142 <main+0x17ea>
 8002394:	4b7d      	ldr	r3, [pc, #500]	; (800258c <main+0xc34>)
 8002396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <main+0xc38>)
 80023a0:	f016 ffc4 	bl	801932c <__aeabi_dcmplt>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 86cb 	beq.w	8003142 <main+0x17ea>

					if (temperature != temperatureLast) {
 80023ac:	4b75      	ldr	r3, [pc, #468]	; (8002584 <main+0xc2c>)
 80023ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b2:	4b78      	ldr	r3, [pc, #480]	; (8002594 <main+0xc3c>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f016 ffae 	bl	8019318 <__aeabi_dcmpeq>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 8120 	bne.w	8002604 <main+0xcac>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80023c4:	4b73      	ldr	r3, [pc, #460]	; (8002594 <main+0xc3c>)
 80023c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	4b72      	ldr	r3, [pc, #456]	; (8002598 <main+0xc40>)
 80023d0:	f016 ffc0 	bl	8019354 <__aeabi_dcmpge>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <main+0xab0>
 80023da:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <main+0xc3c>)
 80023dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	f016 ffa0 	bl	801932c <__aeabi_dcmplt>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01c      	beq.n	800242c <main+0xad4>
 80023f2:	4b68      	ldr	r3, [pc, #416]	; (8002594 <main+0xc3c>)
 80023f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b67      	ldr	r3, [pc, #412]	; (800259c <main+0xc44>)
 80023fe:	f016 ffb3 	bl	8019368 <__aeabi_dcmpgt>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d011      	beq.n	800242c <main+0xad4>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002408:	4b62      	ldr	r3, [pc, #392]	; (8002594 <main+0xc3c>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	1d38      	adds	r0, r7, #4
 8002410:	4963      	ldr	r1, [pc, #396]	; (80025a0 <main+0xc48>)
 8002412:	f018 f8f9 	bl	801a608 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002416:	1d3a      	adds	r2, r7, #4
 8002418:	2300      	movs	r3, #0
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2301      	movs	r3, #1
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <main+0xc4c>)
 8002422:	21bb      	movs	r1, #187	; 0xbb
 8002424:	2001      	movs	r0, #1
 8002426:	f003 f8c5 	bl	80055b4 <LCD_Font>
 800242a:	e04c      	b.n	80024c6 <main+0xb6e>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <main+0xc3c>)
 800242e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b58      	ldr	r3, [pc, #352]	; (8002598 <main+0xc40>)
 8002438:	f016 ff78 	bl	801932c <__aeabi_dcmplt>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01d      	beq.n	800247e <main+0xb26>
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <main+0xc3c>)
 8002444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	f016 ff8a 	bl	8019368 <__aeabi_dcmpgt>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d011      	beq.n	800247e <main+0xb26>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <main+0xc3c>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	1d38      	adds	r0, r7, #4
 8002462:	494f      	ldr	r1, [pc, #316]	; (80025a0 <main+0xc48>)
 8002464:	f018 f8d0 	bl	801a608 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002468:	1d3a      	adds	r2, r7, #4
 800246a:	2300      	movs	r3, #0
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2301      	movs	r3, #1
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4b4c      	ldr	r3, [pc, #304]	; (80025a4 <main+0xc4c>)
 8002474:	21bb      	movs	r1, #187	; 0xbb
 8002476:	201b      	movs	r0, #27
 8002478:	f003 f89c 	bl	80055b4 <LCD_Font>
 800247c:	e023      	b.n	80024c6 <main+0xb6e>
						}
						else if (temperatureLast <= -10) {
 800247e:	4b45      	ldr	r3, [pc, #276]	; (8002594 <main+0xc3c>)
 8002480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <main+0xc44>)
 800248a:	f016 ff59 	bl	8019340 <__aeabi_dcmple>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d018      	beq.n	80024c6 <main+0xb6e>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <main+0xc3c>)
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f016 ff83 	bl	80193a8 <__aeabi_d2iz>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	493f      	ldr	r1, [pc, #252]	; (80025a8 <main+0xc50>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f018 f8ab 	bl	801a608 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80024b2:	1d3a      	adds	r2, r7, #4
 80024b4:	2300      	movs	r3, #0
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2301      	movs	r3, #1
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <main+0xc4c>)
 80024be:	21bb      	movs	r1, #187	; 0xbb
 80024c0:	2001      	movs	r0, #1
 80024c2:	f003 f877 	bl	80055b4 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <main+0xc2c>)
 80024c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b31      	ldr	r3, [pc, #196]	; (8002598 <main+0xc40>)
 80024d2:	f016 ff3f 	bl	8019354 <__aeabi_dcmpge>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d116      	bne.n	800250a <main+0xbb2>
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <main+0xc2c>)
 80024de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	f016 ff1f 	bl	801932c <__aeabi_dcmplt>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01c      	beq.n	800252e <main+0xbd6>
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <main+0xc2c>)
 80024f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <main+0xc44>)
 8002500:	f016 ff32 	bl	8019368 <__aeabi_dcmpgt>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d011      	beq.n	800252e <main+0xbd6>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <main+0xc2c>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	1d38      	adds	r0, r7, #4
 8002512:	4923      	ldr	r1, [pc, #140]	; (80025a0 <main+0xc48>)
 8002514:	f018 f878 	bl	801a608 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002518:	1d3a      	adds	r2, r7, #4
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <main+0xc54>)
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	2301      	movs	r3, #1
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <main+0xc4c>)
 8002524:	21bb      	movs	r1, #187	; 0xbb
 8002526:	2001      	movs	r0, #1
 8002528:	f003 f844 	bl	80055b4 <LCD_Font>
 800252c:	e064      	b.n	80025f8 <main+0xca0>
						}
						else if (temperature < 10 && temperature > 0) {
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <main+0xc2c>)
 8002530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <main+0xc40>)
 800253a:	f016 fef7 	bl	801932c <__aeabi_dcmplt>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d035      	beq.n	80025b0 <main+0xc58>
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <main+0xc2c>)
 8002546:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	f016 ff09 	bl	8019368 <__aeabi_dcmpgt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d029      	beq.n	80025b0 <main+0xc58>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <main+0xc2c>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	1d38      	adds	r0, r7, #4
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <main+0xc48>)
 8002566:	f018 f84f 	bl	801a608 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800256a:	1d3a      	adds	r2, r7, #4
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <main+0xc54>)
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	2301      	movs	r3, #1
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <main+0xc4c>)
 8002576:	21bb      	movs	r1, #187	; 0xbb
 8002578:	201b      	movs	r0, #27
 800257a:	f003 f81b 	bl	80055b4 <LCD_Font>
 800257e:	e03b      	b.n	80025f8 <main+0xca0>
 8002580:	40554000 	.word	0x40554000
 8002584:	20000578 	.word	0x20000578
 8002588:	c0440000 	.word	0xc0440000
 800258c:	20000588 	.word	0x20000588
 8002590:	40590000 	.word	0x40590000
 8002594:	20000580 	.word	0x20000580
 8002598:	40240000 	.word	0x40240000
 800259c:	c0240000 	.word	0xc0240000
 80025a0:	0805213c 	.word	0x0805213c
 80025a4:	080298a0 	.word	0x080298a0
 80025a8:	08052144 	.word	0x08052144
 80025ac:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 80025b0:	4ba4      	ldr	r3, [pc, #656]	; (8002844 <main+0xeec>)
 80025b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4ba3      	ldr	r3, [pc, #652]	; (8002848 <main+0xef0>)
 80025bc:	f016 fec0 	bl	8019340 <__aeabi_dcmple>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d018      	beq.n	80025f8 <main+0xca0>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80025c6:	4b9f      	ldr	r3, [pc, #636]	; (8002844 <main+0xeec>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f016 feea 	bl	80193a8 <__aeabi_d2iz>
 80025d4:	4603      	mov	r3, r0
 80025d6:	b25b      	sxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	499b      	ldr	r1, [pc, #620]	; (800284c <main+0xef4>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f018 f812 	bl	801a608 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80025e4:	1d3a      	adds	r2, r7, #4
 80025e6:	4b9a      	ldr	r3, [pc, #616]	; (8002850 <main+0xef8>)
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	4b99      	ldr	r3, [pc, #612]	; (8002854 <main+0xefc>)
 80025f0:	21bb      	movs	r1, #187	; 0xbb
 80025f2:	2001      	movs	r0, #1
 80025f4:	f002 ffde 	bl	80055b4 <LCD_Font>
						}

						temperatureLast = temperature;
 80025f8:	4b92      	ldr	r3, [pc, #584]	; (8002844 <main+0xeec>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	4996      	ldr	r1, [pc, #600]	; (8002858 <main+0xf00>)
 8002600:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 8002604:	4b95      	ldr	r3, [pc, #596]	; (800285c <main+0xf04>)
 8002606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260a:	4b95      	ldr	r3, [pc, #596]	; (8002860 <main+0xf08>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f016 fe82 	bl	8019318 <__aeabi_dcmpeq>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d15b      	bne.n	80026d2 <main+0xd7a>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 800261a:	4b91      	ldr	r3, [pc, #580]	; (8002860 <main+0xf08>)
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	f107 000c 	add.w	r0, r7, #12
 8002624:	498f      	ldr	r1, [pc, #572]	; (8002864 <main+0xf0c>)
 8002626:	f017 ffef 	bl	801a608 <siprintf>
						if (humidityLast >= 10)
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <main+0xf08>)
 800262c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <main+0xf10>)
 8002636:	f016 fe8d 	bl	8019354 <__aeabi_dcmpge>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <main+0xd00>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	2300      	movs	r3, #0
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	2301      	movs	r3, #1
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4b81      	ldr	r3, [pc, #516]	; (8002854 <main+0xefc>)
 800264e:	21bb      	movs	r1, #187	; 0xbb
 8002650:	20a0      	movs	r0, #160	; 0xa0
 8002652:	f002 ffaf 	bl	80055b4 <LCD_Font>
 8002656:	e00a      	b.n	800266e <main+0xd16>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002658:	f107 020c 	add.w	r2, r7, #12
 800265c:	2300      	movs	r3, #0
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	2301      	movs	r3, #1
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <main+0xefc>)
 8002666:	21bb      	movs	r1, #187	; 0xbb
 8002668:	20ba      	movs	r0, #186	; 0xba
 800266a:	f002 ffa3 	bl	80055b4 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 800266e:	4b7b      	ldr	r3, [pc, #492]	; (800285c <main+0xf04>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	f107 000c 	add.w	r0, r7, #12
 8002678:	497a      	ldr	r1, [pc, #488]	; (8002864 <main+0xf0c>)
 800267a:	f017 ffc5 	bl	801a608 <siprintf>
						if (humidity >= 10)
 800267e:	4b77      	ldr	r3, [pc, #476]	; (800285c <main+0xf04>)
 8002680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	4b77      	ldr	r3, [pc, #476]	; (8002868 <main+0xf10>)
 800268a:	f016 fe63 	bl	8019354 <__aeabi_dcmpge>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00c      	beq.n	80026ae <main+0xd56>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002694:	f107 020c 	add.w	r2, r7, #12
 8002698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	2301      	movs	r3, #1
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <main+0xefc>)
 80026a4:	21bb      	movs	r1, #187	; 0xbb
 80026a6:	20a0      	movs	r0, #160	; 0xa0
 80026a8:	f002 ff84 	bl	80055b4 <LCD_Font>
 80026ac:	e00b      	b.n	80026c6 <main+0xd6e>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80026ae:	f107 020c 	add.w	r2, r7, #12
 80026b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	2301      	movs	r3, #1
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4b65      	ldr	r3, [pc, #404]	; (8002854 <main+0xefc>)
 80026be:	21bb      	movs	r1, #187	; 0xbb
 80026c0:	20ba      	movs	r0, #186	; 0xba
 80026c2:	f002 ff77 	bl	80055b4 <LCD_Font>

						humidityLast = humidity;
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <main+0xf04>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	4964      	ldr	r1, [pc, #400]	; (8002860 <main+0xf08>)
 80026ce:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80026d2:	4b66      	ldr	r3, [pc, #408]	; (800286c <main+0xf14>)
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <main+0xf18>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d06d      	beq.n	80027ba <main+0xe62>

						char weatherPrintP[11];

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 80026de:	4b63      	ldr	r3, [pc, #396]	; (800286c <main+0xf14>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e6:	d308      	bcc.n	80026fa <main+0xda2>
 80026e8:	4b60      	ldr	r3, [pc, #384]	; (800286c <main+0xf14>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4960      	ldr	r1, [pc, #384]	; (8002874 <main+0xf1c>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f017 ff87 	bl	801a608 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80026fa:	f107 0214 	add.w	r2, r7, #20
 80026fe:	2300      	movs	r3, #0
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2301      	movs	r3, #1
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4b53      	ldr	r3, [pc, #332]	; (8002854 <main+0xefc>)
 8002708:	21bb      	movs	r1, #187	; 0xbb
 800270a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800270e:	f002 ff51 	bl	80055b4 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 8002712:	4b56      	ldr	r3, [pc, #344]	; (800286c <main+0xf14>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800271a:	d208      	bcs.n	800272e <main+0xdd6>
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <main+0xf14>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4954      	ldr	r1, [pc, #336]	; (8002878 <main+0xf20>)
 8002728:	4618      	mov	r0, r3
 800272a:	f017 ff6d 	bl	801a608 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 800272e:	f107 0214 	add.w	r2, r7, #20
 8002732:	2300      	movs	r3, #0
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	2301      	movs	r3, #1
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	4b46      	ldr	r3, [pc, #280]	; (8002854 <main+0xefc>)
 800273c:	21bb      	movs	r1, #187	; 0xbb
 800273e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002742:	f002 ff37 	bl	80055b4 <LCD_Font>

						pressureLast = pressure;
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <main+0xf18>)
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	4b48      	ldr	r3, [pc, #288]	; (800286c <main+0xf14>)
 800274c:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <main+0xf14>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002756:	d308      	bcc.n	800276a <main+0xe12>
 8002758:	4b44      	ldr	r3, [pc, #272]	; (800286c <main+0xf14>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4944      	ldr	r1, [pc, #272]	; (8002874 <main+0xf1c>)
 8002764:	4618      	mov	r0, r3
 8002766:	f017 ff4f 	bl	801a608 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800276a:	f107 0214 	add.w	r2, r7, #20
 800276e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2301      	movs	r3, #1
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <main+0xefc>)
 800277a:	21bb      	movs	r1, #187	; 0xbb
 800277c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002780:	f002 ff18 	bl	80055b4 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 8002784:	4b39      	ldr	r3, [pc, #228]	; (800286c <main+0xf14>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278c:	d208      	bcs.n	80027a0 <main+0xe48>
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <main+0xf14>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4937      	ldr	r1, [pc, #220]	; (8002878 <main+0xf20>)
 800279a:	4618      	mov	r0, r3
 800279c:	f017 ff34 	bl	801a608 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 80027a0:	f107 0214 	add.w	r2, r7, #20
 80027a4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	2301      	movs	r3, #1
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <main+0xefc>)
 80027b0:	21bb      	movs	r1, #187	; 0xbb
 80027b2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80027b6:	f002 fefd 	bl	80055b4 <LCD_Font>
					}

					if (AT24XX_Read(0) != rtcHrs) {
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fd fd68 	bl	8000290 <AT24XX_Read>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b2d      	ldr	r3, [pc, #180]	; (800287c <main+0xf24>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f000 81e1 	beq.w	8002b90 <main+0x1238>

						AT24XX_Update(0, rtcHrs);
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <main+0xf24>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fd fd85 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80027da:	2300      	movs	r3, #0
 80027dc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80027e0:	e027      	b.n	8002832 <main+0xeda>
 80027e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fd4d 	bl	8000290 <AT24XX_Read>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461c      	mov	r4, r3
 80027fa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fd41 	bl	8000290 <AT24XX_Read>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff f862 	bl	80018dc <byteS>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002820:	b211      	sxth	r1, r2
 8002822:	4a17      	ldr	r2, [pc, #92]	; (8002880 <main+0xf28>)
 8002824:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002828:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800282c:	3301      	adds	r3, #1
 800282e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8002832:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8002836:	2b9a      	cmp	r3, #154	; 0x9a
 8002838:	d9d3      	bls.n	80027e2 <main+0xe8a>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 800283a:	239a      	movs	r3, #154	; 0x9a
 800283c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8002840:	e030      	b.n	80028a4 <main+0xf4c>
 8002842:	bf00      	nop
 8002844:	20000578 	.word	0x20000578
 8002848:	c0240000 	.word	0xc0240000
 800284c:	08052144 	.word	0x08052144
 8002850:	00ffa500 	.word	0x00ffa500
 8002854:	080298a0 	.word	0x080298a0
 8002858:	20000580 	.word	0x20000580
 800285c:	20000588 	.word	0x20000588
 8002860:	20000590 	.word	0x20000590
 8002864:	0805214c 	.word	0x0805214c
 8002868:	40240000 	.word	0x40240000
 800286c:	200005ba 	.word	0x200005ba
 8002870:	200005b8 	.word	0x200005b8
 8002874:	08052154 	.word	0x08052154
 8002878:	0805215c 	.word	0x0805215c
 800287c:	2000056f 	.word	0x2000056f
 8002880:	200005bc 	.word	0x200005bc
 8002884:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800288e:	499e      	ldr	r1, [pc, #632]	; (8002b08 <main+0x11b0>)
 8002890:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002894:	4a9c      	ldr	r2, [pc, #624]	; (8002b08 <main+0x11b0>)
 8002896:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800289a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800289e:	3b01      	subs	r3, #1
 80028a0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 80028a4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1eb      	bne.n	8002884 <main+0xf2c>
						hT[0] = (uint16_t) (temperature * 10);
 80028ac:	4b97      	ldr	r3, [pc, #604]	; (8002b0c <main+0x11b4>)
 80028ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b96      	ldr	r3, [pc, #600]	; (8002b10 <main+0x11b8>)
 80028b8:	f016 fac6 	bl	8018e48 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f016 fd98 	bl	80193f8 <__aeabi_d2uiz>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	b21a      	sxth	r2, r3
 80028ce:	4b8e      	ldr	r3, [pc, #568]	; (8002b08 <main+0x11b0>)
 80028d0:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80028d8:	e02e      	b.n	8002938 <main+0xfe0>
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80028da:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	b29c      	uxth	r4, r3
 80028e8:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80028ec:	4a86      	ldr	r2, [pc, #536]	; (8002b08 <main+0x11b0>)
 80028ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe ffd5 	bl	80018a4 <byteL>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fd fcf0 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8002904:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	b29b      	uxth	r3, r3
 800290c:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002910:	b29c      	uxth	r4, r3
 8002912:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002916:	4a7c      	ldr	r2, [pc, #496]	; (8002b08 <main+0x11b0>)
 8002918:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800291c:	b29b      	uxth	r3, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe ffcd 	bl	80018be <byteH>
 8002924:	4603      	mov	r3, r0
 8002926:	4619      	mov	r1, r3
 8002928:	4620      	mov	r0, r4
 800292a:	f7fd fcdb 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800292e:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8002932:	3301      	adds	r3, #1
 8002934:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8002938:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800293c:	2b9a      	cmp	r3, #154	; 0x9a
 800293e:	d9cc      	bls.n	80028da <main+0xf82>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8002940:	2300      	movs	r3, #0
 8002942:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8002946:	e027      	b.n	8002998 <main+0x1040>
 8002948:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 800294c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002950:	b29b      	uxth	r3, r3
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	b29b      	uxth	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fc9a 	bl	8000290 <AT24XX_Read>
 800295c:	4603      	mov	r3, r0
 800295e:	461c      	mov	r4, r3
 8002960:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	b29b      	uxth	r3, r3
 8002968:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 800296c:	b29b      	uxth	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fc8e 	bl	8000290 <AT24XX_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	4619      	mov	r1, r3
 8002978:	4620      	mov	r0, r4
 800297a:	f7fe ffaf 	bl	80018dc <byteS>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002986:	b211      	sxth	r1, r2
 8002988:	4a62      	ldr	r2, [pc, #392]	; (8002b14 <main+0x11bc>)
 800298a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800298e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002992:	3301      	adds	r3, #1
 8002994:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8002998:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 800299c:	2b9a      	cmp	r3, #154	; 0x9a
 800299e:	d9d3      	bls.n	8002948 <main+0xff0>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 80029a0:	239a      	movs	r3, #154	; 0x9a
 80029a2:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80029a6:	e00f      	b.n	80029c8 <main+0x1070>
 80029a8:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029b2:	4958      	ldr	r1, [pc, #352]	; (8002b14 <main+0x11bc>)
 80029b4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80029b8:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <main+0x11bc>)
 80029ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80029be:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80029c8:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1eb      	bne.n	80029a8 <main+0x1050>
						hH[0] = (uint16_t) (humidity * 10);
 80029d0:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <main+0x11c0>)
 80029d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <main+0x11b8>)
 80029dc:	f016 fa34 	bl	8018e48 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f016 fd06 	bl	80193f8 <__aeabi_d2uiz>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <main+0x11bc>)
 80029f4:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80029f6:	2300      	movs	r3, #0
 80029f8:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80029fc:	e02e      	b.n	8002a5c <main+0x1104>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80029fe:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a02:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	b29c      	uxth	r4, r3
 8002a0c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a10:	4a40      	ldr	r2, [pc, #256]	; (8002b14 <main+0x11bc>)
 8002a12:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe ff43 	bl	80018a4 <byteL>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4619      	mov	r1, r3
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7fd fc5e 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8002a28:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002a34:	b29c      	uxth	r4, r3
 8002a36:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a3a:	4a36      	ldr	r2, [pc, #216]	; (8002b14 <main+0x11bc>)
 8002a3c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe ff3b 	bl	80018be <byteH>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fd fc49 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002a52:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a56:	3301      	adds	r3, #1
 8002a58:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8002a5c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002a60:	2b9a      	cmp	r3, #154	; 0x9a
 8002a62:	d9cc      	bls.n	80029fe <main+0x10a6>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002a6a:	e027      	b.n	8002abc <main+0x1164>
 8002a6c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a70:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fc08 	bl	8000290 <AT24XX_Read>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461c      	mov	r4, r3
 8002a84:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fbfc 	bl	8000290 <AT24XX_Read>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe ff1d 	bl	80018dc <byteS>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002aaa:	b211      	sxth	r1, r2
 8002aac:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <main+0x11c4>)
 8002aae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ab2:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8002abc:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002ac0:	2b9a      	cmp	r3, #154	; 0x9a
 8002ac2:	d9d3      	bls.n	8002a6c <main+0x1114>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8002ac4:	239a      	movs	r3, #154	; 0x9a
 8002ac6:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002aca:	e00f      	b.n	8002aec <main+0x1194>
 8002acc:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ad0:	1e5a      	subs	r2, r3, #1
 8002ad2:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ad6:	4911      	ldr	r1, [pc, #68]	; (8002b1c <main+0x11c4>)
 8002ad8:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002adc:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <main+0x11c4>)
 8002ade:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ae2:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002aec:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1eb      	bne.n	8002acc <main+0x1174>
						hP[0] = (uint16_t)pressure;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <main+0x11c8>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <main+0x11c4>)
 8002afc:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002b04:	e03d      	b.n	8002b82 <main+0x122a>
 8002b06:	bf00      	nop
 8002b08:	200005bc 	.word	0x200005bc
 8002b0c:	20000578 	.word	0x20000578
 8002b10:	40240000 	.word	0x40240000
 8002b14:	200006f4 	.word	0x200006f4
 8002b18:	20000588 	.word	0x20000588
 8002b1c:	2000082c 	.word	0x2000082c
 8002b20:	200005b8 	.word	0x200005b8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8002b24:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b28:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	b29c      	uxth	r4, r3
 8002b32:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b36:	4abc      	ldr	r2, [pc, #752]	; (8002e28 <main+0x14d0>)
 8002b38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe feb0 	bl	80018a4 <byteL>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4619      	mov	r1, r3
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7fd fbcb 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002b4e:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002b5a:	b29c      	uxth	r4, r3
 8002b5c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b60:	4ab1      	ldr	r2, [pc, #708]	; (8002e28 <main+0x14d0>)
 8002b62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fea8 	bl	80018be <byteH>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7fd fbb6 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002b78:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 8002b82:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002b86:	2b9a      	cmp	r3, #154	; 0x9a
 8002b88:	d9cc      	bls.n	8002b24 <main+0x11cc>
						}

						viewGraphs = 0;
 8002b8a:	4ba8      	ldr	r3, [pc, #672]	; (8002e2c <main+0x14d4>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002b90:	23ff      	movs	r3, #255	; 0xff
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2301      	movs	r3, #1
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2381      	movs	r3, #129	; 0x81
 8002b9a:	229d      	movs	r2, #157	; 0x9d
 8002b9c:	21bd      	movs	r1, #189	; 0xbd
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f001 fd54 	bl	800464c <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002ba4:	4ba2      	ldr	r3, [pc, #648]	; (8002e30 <main+0x14d8>)
 8002ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	4ba1      	ldr	r3, [pc, #644]	; (8002e34 <main+0x14dc>)
 8002bb0:	f016 f94a 	bl	8018e48 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f016 fbf4 	bl	80193a8 <__aeabi_d2iz>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	b298      	uxth	r0, r3
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002bd0:	21e2      	movs	r1, #226	; 0xe2
 8002bd2:	f7fe fe3b 	bl	800184c <map>
 8002bd6:	ec53 2b10 	vmov	r2, r3, d0
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f016 fbe3 	bl	80193a8 <__aeabi_d2iz>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002be8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da02      	bge.n	8002bf6 <main+0x129e>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002bf6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8002bfc:	dd02      	ble.n	8002c04 <main+0x12ac>
 8002bfe:	237f      	movs	r3, #127	; 0x7f
 8002c00:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8002c04:	2300      	movs	r3, #0
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	f240 133d 	movw	r3, #317	; 0x13d
 8002c10:	229e      	movs	r2, #158	; 0x9e
 8002c12:	21bf      	movs	r1, #191	; 0xbf
 8002c14:	209e      	movs	r0, #158	; 0x9e
 8002c16:	f001 fbb1 	bl	800437c <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c1a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d023      	beq.n	8002c6a <main+0x1312>
 8002c22:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002c26:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c2a:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c2c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c30:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c3e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002c42:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f001 fa73 	bl	800413a <RGB>
 8002c54:	4603      	mov	r3, r0
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f240 133d 	movw	r3, #317	; 0x13d
 8002c60:	229e      	movs	r2, #158	; 0x9e
 8002c62:	4621      	mov	r1, r4
 8002c64:	209e      	movs	r0, #158	; 0x9e
 8002c66:	f001 fb89 	bl	800437c <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8002c6a:	23ff      	movs	r3, #255	; 0xff
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2381      	movs	r3, #129	; 0x81
 8002c74:	229d      	movs	r2, #157	; 0x9d
 8002c76:	21bd      	movs	r1, #189	; 0xbd
 8002c78:	20a1      	movs	r0, #161	; 0xa1
 8002c7a:	f001 fce7 	bl	800464c <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002c7e:	4b6e      	ldr	r3, [pc, #440]	; (8002e38 <main+0x14e0>)
 8002c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <main+0x14dc>)
 8002c8a:	f016 f8dd 	bl	8018e48 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f016 fb87 	bl	80193a8 <__aeabi_d2iz>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	b21b      	sxth	r3, r3
 8002c9e:	b298      	uxth	r0, r3
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002caa:	2150      	movs	r1, #80	; 0x50
 8002cac:	f7fe fdce 	bl	800184c <map>
 8002cb0:	ec53 2b10 	vmov	r2, r3, d0
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f016 fb76 	bl	80193a8 <__aeabi_d2iz>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002cc2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da02      	bge.n	8002cd0 <main+0x1378>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002cd0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd6:	dd02      	ble.n	8002cde <main+0x1386>
 8002cd8:	237f      	movs	r3, #127	; 0x7f
 8002cda:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f240 133d 	movw	r3, #317	; 0x13d
 8002cea:	f240 123d 	movw	r2, #317	; 0x13d
 8002cee:	21bf      	movs	r1, #191	; 0xbf
 8002cf0:	f240 103d 	movw	r0, #317	; 0x13d
 8002cf4:	f001 fb42 	bl	800437c <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002cf8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d025      	beq.n	8002d4c <main+0x13f4>
 8002d00:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002d04:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d08:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d0a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d1c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d20:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f001 fa04 	bl	800413a <RGB>
 8002d32:	4603      	mov	r3, r0
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	2301      	movs	r3, #1
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f240 133d 	movw	r3, #317	; 0x13d
 8002d3e:	f240 123d 	movw	r2, #317	; 0x13d
 8002d42:	4621      	mov	r1, r4
 8002d44:	f240 103d 	movw	r0, #317	; 0x13d
 8002d48:	f001 fb18 	bl	800437c <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8002d4c:	23ff      	movs	r3, #255	; 0xff
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	2301      	movs	r3, #1
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2381      	movs	r3, #129	; 0x81
 8002d56:	229d      	movs	r2, #157	; 0x9d
 8002d58:	21bd      	movs	r1, #189	; 0xbd
 8002d5a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002d5e:	f001 fc75 	bl	800464c <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <main+0x14e4>)
 8002d64:	8818      	ldrh	r0, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f240 4229 	movw	r2, #1065	; 0x429
 8002d70:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002d74:	f7fe fd6a 	bl	800184c <map>
 8002d78:	ec53 2b10 	vmov	r2, r3, d0
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f016 fb12 	bl	80193a8 <__aeabi_d2iz>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap < 0) valMap = 0;
 8002d8a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	da02      	bge.n	8002d98 <main+0x1440>
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					if (valMap > 127) valMap = 127;
 8002d98:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	dd02      	ble.n	8002da6 <main+0x144e>
 8002da0:	237f      	movs	r3, #127	; 0x7f
 8002da2:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002da6:	2300      	movs	r3, #0
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2301      	movs	r3, #1
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f240 133d 	movw	r3, #317	; 0x13d
 8002db2:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002db6:	21bf      	movs	r1, #191	; 0xbf
 8002db8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002dbc:	f001 fade 	bl	800437c <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dc0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d025      	beq.n	8002e14 <main+0x14bc>
 8002dc8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002dcc:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002dd0:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002dd2:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002dd6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002de4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002de8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	2100      	movs	r1, #0
 8002df6:	f001 f9a0 	bl	800413a <RGB>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	f240 133d 	movw	r3, #317	; 0x13d
 8002e06:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002e10:	f001 fab4 	bl	800437c <LCD_Line>

					if (!viewGraphs) {
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <main+0x14d4>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 8192 	bne.w	8003142 <main+0x17ea>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002e24:	e07b      	b.n	8002f1e <main+0x15c6>
 8002e26:	bf00      	nop
 8002e28:	2000082c 	.word	0x2000082c
 8002e2c:	2000056c 	.word	0x2000056c
 8002e30:	20000578 	.word	0x20000578
 8002e34:	40240000 	.word	0x40240000
 8002e38:	20000588 	.word	0x20000588
 8002e3c:	200005b8 	.word	0x200005b8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002e40:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e44:	4ab3      	ldr	r2, [pc, #716]	; (8003114 <main+0x17bc>)
 8002e46:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e4a:	b298      	uxth	r0, r3
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2300      	movs	r3, #0
 8002e52:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002e56:	21e2      	movs	r1, #226	; 0xe2
 8002e58:	f7fe fcf8 	bl	800184c <map>
 8002e5c:	ec53 2b10 	vmov	r2, r3, d0
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	f016 faa0 	bl	80193a8 <__aeabi_d2iz>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002e6e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	da02      	bge.n	8002e7c <main+0x1524>
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002e7c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002e80:	2b7f      	cmp	r3, #127	; 0x7f
 8002e82:	dd02      	ble.n	8002e8a <main+0x1532>
 8002e84:	237f      	movs	r3, #127	; 0x7f
 8002e86:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002e8a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e92:	b298      	uxth	r0, r3
 8002e94:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002e98:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f240 133d 	movw	r3, #317	; 0x13d
 8002eaa:	21bf      	movs	r1, #191	; 0xbf
 8002eac:	f001 fa66 	bl	800437c <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002eb0:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02d      	beq.n	8002f14 <main+0x15bc>
 8002eb8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ebc:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002ec6:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002eca:	b29d      	uxth	r5, r3
 8002ecc:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002ed0:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ed4:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ed6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002eda:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ee8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002eec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2100      	movs	r1, #0
 8002efa:	f001 f91e 	bl	800413a <RGB>
 8002efe:	4603      	mov	r3, r0
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2301      	movs	r3, #1
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	f240 133d 	movw	r3, #317	; 0x13d
 8002f0a:	4632      	mov	r2, r6
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f001 fa34 	bl	800437c <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002f14:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002f1e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002f22:	2b9a      	cmp	r3, #154	; 0x9a
 8002f24:	d98c      	bls.n	8002e40 <main+0x14e8>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8002f2c:	e06e      	b.n	800300c <main+0x16b4>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002f2e:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f32:	4a79      	ldr	r2, [pc, #484]	; (8003118 <main+0x17c0>)
 8002f34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002f38:	b298      	uxth	r0, r3
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002f44:	2150      	movs	r1, #80	; 0x50
 8002f46:	f7fe fc81 	bl	800184c <map>
 8002f4a:	ec53 2b10 	vmov	r2, r3, d0
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f016 fa29 	bl	80193a8 <__aeabi_d2iz>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 8002f5c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	da02      	bge.n	8002f6a <main+0x1612>
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 8002f6a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f70:	dd02      	ble.n	8002f78 <main+0x1620>
 8002f72:	237f      	movs	r3, #127	; 0x7f
 8002f74:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002f78:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f7c:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f80:	b298      	uxth	r0, r3
 8002f82:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002f86:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2301      	movs	r3, #1
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f240 133d 	movw	r3, #317	; 0x13d
 8002f98:	21bf      	movs	r1, #191	; 0xbf
 8002f9a:	f001 f9ef 	bl	800437c <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002f9e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02d      	beq.n	8003002 <main+0x16aa>
 8002fa6:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002faa:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002fae:	b29c      	uxth	r4, r3
 8002fb0:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002fb4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002fb8:	b29d      	uxth	r5, r3
 8002fba:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002fbe:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002fc2:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fc4:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fc8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fd6:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8002fda:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	f001 f8a7 	bl	800413a <RGB>
 8002fec:	4603      	mov	r3, r0
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f240 133d 	movw	r3, #317	; 0x13d
 8002ff8:	4632      	mov	r2, r6
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f001 f9bd 	bl	800437c <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8003002:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8003006:	3301      	adds	r3, #1
 8003008:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 800300c:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8003010:	2b9a      	cmp	r3, #154	; 0x9a
 8003012:	d98c      	bls.n	8002f2e <main+0x15d6>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8003014:	2300      	movs	r3, #0
 8003016:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 800301a:	e073      	b.n	8003104 <main+0x17ac>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 800301c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003020:	4a3e      	ldr	r2, [pc, #248]	; (800311c <main+0x17c4>)
 8003022:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003026:	b298      	uxth	r0, r3
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2300      	movs	r3, #0
 800302e:	f240 4229 	movw	r2, #1065	; 0x429
 8003032:	f240 31a9 	movw	r1, #937	; 0x3a9
 8003036:	f7fe fc09 	bl	800184c <map>
 800303a:	ec53 2b10 	vmov	r2, r3, d0
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f016 f9b1 	bl	80193a8 <__aeabi_d2iz>
 8003046:	4603      	mov	r3, r0
 8003048:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap < 0) valMap = 0;
 800304c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003050:	2b00      	cmp	r3, #0
 8003052:	da02      	bge.n	800305a <main+0x1702>
 8003054:	2300      	movs	r3, #0
 8003056:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							if (valMap > 127) valMap = 127;
 800305a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 800305e:	2b7f      	cmp	r3, #127	; 0x7f
 8003060:	dd02      	ble.n	8003068 <main+0x1710>
 8003062:	237f      	movs	r3, #127	; 0x7f
 8003064:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8003068:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800306c:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8003070:	3301      	adds	r3, #1
 8003072:	b298      	uxth	r0, r3
 8003074:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003078:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 800307c:	3301      	adds	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	2300      	movs	r3, #0
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	2301      	movs	r3, #1
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f240 133d 	movw	r3, #317	; 0x13d
 800308c:	21bf      	movs	r1, #191	; 0xbf
 800308e:	f001 f975 	bl	800437c <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8003092:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02f      	beq.n	80030fa <main+0x17a2>
 800309a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800309e:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 80030a2:	3301      	adds	r3, #1
 80030a4:	b29c      	uxth	r4, r3
 80030a6:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 80030aa:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80030ae:	b29d      	uxth	r5, r3
 80030b0:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030b4:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 80030b8:	3301      	adds	r3, #1
 80030ba:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030bc:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80030c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030ce:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 80030d2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	2100      	movs	r1, #0
 80030e0:	f001 f82b 	bl	800413a <RGB>
 80030e4:	4603      	mov	r3, r0
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	2301      	movs	r3, #1
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f240 133d 	movw	r3, #317	; 0x13d
 80030f0:	4632      	mov	r2, r6
 80030f2:	4629      	mov	r1, r5
 80030f4:	4620      	mov	r0, r4
 80030f6:	f001 f941 	bl	800437c <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 80030fa:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80030fe:	3301      	adds	r3, #1
 8003100:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 8003104:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003108:	2b9a      	cmp	r3, #154	; 0x9a
 800310a:	d987      	bls.n	800301c <main+0x16c4>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003112:	e00e      	b.n	8003132 <main+0x17da>
 8003114:	200005bc 	.word	0x200005bc
 8003118:	200006f4 	.word	0x200006f4
 800311c:	2000082c 	.word	0x2000082c
 8003120:	4a8e      	ldr	r2, [pc, #568]	; (800335c <main+0x1a04>)
 8003122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003126:	6353      	str	r3, [r2, #52]	; 0x34
 8003128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312c:	3301      	adds	r3, #1
 800312e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313a:	d9f1      	bls.n	8003120 <main+0x17c8>
						viewGraphs = 1;
 800313c:	4b88      	ldr	r3, [pc, #544]	; (8003360 <main+0x1a08>)
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8003142:	4b88      	ldr	r3, [pc, #544]	; (8003364 <main+0x1a0c>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8393 	beq.w	8003872 <main+0x1f1a>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 800314c:	2202      	movs	r2, #2
 800314e:	4986      	ldr	r1, [pc, #536]	; (8003368 <main+0x1a10>)
 8003150:	4886      	ldr	r0, [pc, #536]	; (800336c <main+0x1a14>)
 8003152:	f01b f855 	bl	801e200 <memcmp>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f040 808a 	bne.w	8003272 <main+0x191a>

					char val[2];

					val[0] = rx_buffer[2];
 800315e:	4b83      	ldr	r3, [pc, #524]	; (800336c <main+0x1a14>)
 8003160:	789b      	ldrb	r3, [r3, #2]
 8003162:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[3];
 8003166:	4b81      	ldr	r3, [pc, #516]	; (800336c <main+0x1a14>)
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setHrs(atoi(val));
 800316e:	f107 0320 	add.w	r3, r7, #32
 8003172:	4618      	mov	r0, r3
 8003174:	f016 fb91 	bl	801989a <atoi>
 8003178:	4603      	mov	r3, r0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd ff83 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8003182:	4b7a      	ldr	r3, [pc, #488]	; (800336c <main+0x1a14>)
 8003184:	791b      	ldrb	r3, [r3, #4]
 8003186:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[5];
 800318a:	4b78      	ldr	r3, [pc, #480]	; (800336c <main+0x1a14>)
 800318c:	795b      	ldrb	r3, [r3, #5]
 800318e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMin(atoi(val));
 8003192:	f107 0320 	add.w	r3, r7, #32
 8003196:	4618      	mov	r0, r3
 8003198:	f016 fb7f 	bl	801989a <atoi>
 800319c:	4603      	mov	r3, r0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd ff51 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setSec(atoi(val));
 80031b2:	f107 0320 	add.w	r3, r7, #32
 80031b6:	4618      	mov	r0, r3
 80031b8:	f016 fb6f 	bl	801989a <atoi>
 80031bc:	4603      	mov	r3, r0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd ff21 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 80031c6:	4b69      	ldr	r3, [pc, #420]	; (800336c <main+0x1a14>)
 80031c8:	799b      	ldrb	r3, [r3, #6]
 80031ca:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[7];
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <main+0x1a14>)
 80031d0:	79db      	ldrb	r3, [r3, #7]
 80031d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDate(atoi(val));
 80031d6:	f107 0320 	add.w	r3, r7, #32
 80031da:	4618      	mov	r0, r3
 80031dc:	f016 fb5d 	bl	801989a <atoi>
 80031e0:	4603      	mov	r3, r0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd ff8f 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 80031ea:	4b60      	ldr	r3, [pc, #384]	; (800336c <main+0x1a14>)
 80031ec:	7a1b      	ldrb	r3, [r3, #8]
 80031ee:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[9];
 80031f2:	4b5e      	ldr	r3, [pc, #376]	; (800336c <main+0x1a14>)
 80031f4:	7a5b      	ldrb	r3, [r3, #9]
 80031f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMonth(atoi(val));
 80031fa:	f107 0320 	add.w	r3, r7, #32
 80031fe:	4618      	mov	r0, r3
 8003200:	f016 fb4b 	bl	801989a <atoi>
 8003204:	4603      	mov	r3, r0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd ff9d 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 800320e:	4b57      	ldr	r3, [pc, #348]	; (800336c <main+0x1a14>)
 8003210:	7a9b      	ldrb	r3, [r3, #10]
 8003212:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[11];
 8003216:	4b55      	ldr	r3, [pc, #340]	; (800336c <main+0x1a14>)
 8003218:	7adb      	ldrb	r3, [r3, #11]
 800321a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setYear(atoi(val));
 800321e:	f107 0320 	add.w	r3, r7, #32
 8003222:	4618      	mov	r0, r3
 8003224:	f016 fb39 	bl	801989a <atoi>
 8003228:	4603      	mov	r3, r0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd ffab 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8003232:	4b4e      	ldr	r3, [pc, #312]	; (800336c <main+0x1a14>)
 8003234:	7b1b      	ldrb	r3, [r3, #12]
 8003236:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDay(atoi(val));
 800323a:	f107 0320 	add.w	r3, r7, #32
 800323e:	4618      	mov	r0, r3
 8003240:	f016 fb2b 	bl	801989a <atoi>
 8003244:	4603      	mov	r3, r0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd ff3d 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003254:	e008      	b.n	8003268 <main+0x1910>
 8003256:	4a41      	ldr	r2, [pc, #260]	; (800335c <main+0x1a04>)
 8003258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800325c:	6353      	str	r3, [r2, #52]	; 0x34
 800325e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003262:	3301      	adds	r3, #1
 8003264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d9f1      	bls.n	8003256 <main+0x18fe>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8003272:	2202      	movs	r2, #2
 8003274:	493e      	ldr	r1, [pc, #248]	; (8003370 <main+0x1a18>)
 8003276:	483d      	ldr	r0, [pc, #244]	; (800336c <main+0x1a14>)
 8003278:	f01a ffc2 	bl	801e200 <memcmp>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d122      	bne.n	80032c8 <main+0x1970>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8003282:	2300      	movs	r3, #0
 8003284:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 8003288:	e00a      	b.n	80032a0 <main+0x1948>
 800328a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f827 	bl	80002e4 <AT24XX_Update>
 8003296:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800329a:	3301      	adds	r3, #1
 800329c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 80032a0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d3ef      	bcc.n	800328a <main+0x1932>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 80032aa:	4b32      	ldr	r3, [pc, #200]	; (8003374 <main+0x1a1c>)
 80032ac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80032b0:	461d      	mov	r5, r3
 80032b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b6:	682b      	ldr	r3, [r5, #0]
 80032b8:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 80032ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80032be:	2364      	movs	r3, #100	; 0x64
 80032c0:	2214      	movs	r2, #20
 80032c2:	482d      	ldr	r0, [pc, #180]	; (8003378 <main+0x1a20>)
 80032c4:	f012 fae3 	bl	801588e <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 80032c8:	2202      	movs	r2, #2
 80032ca:	492c      	ldr	r1, [pc, #176]	; (800337c <main+0x1a24>)
 80032cc:	4827      	ldr	r0, [pc, #156]	; (800336c <main+0x1a14>)
 80032ce:	f01a ff97 	bl	801e200 <memcmp>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 82b7 	bne.w	8003848 <main+0x1ef0>

					char valT[4] = { 0 };
 80032da:	2300      	movs	r3, #0
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80032e4:	e010      	b.n	8003308 <main+0x19b0>
 80032e6:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032ea:	1c9a      	adds	r2, r3, #2
 80032ec:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80032f0:	491e      	ldr	r1, [pc, #120]	; (800336c <main+0x1a14>)
 80032f2:	5c8a      	ldrb	r2, [r1, r2]
 80032f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032f8:	443b      	add	r3, r7
 80032fa:	f803 2cb8 	strb.w	r2, [r3, #-184]
 80032fe:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003302:	3301      	adds	r3, #1
 8003304:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8003308:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800330c:	2b03      	cmp	r3, #3
 800330e:	d9ea      	bls.n	80032e6 <main+0x198e>

					temperatureRemote = atoi(valT);
 8003310:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003314:	4618      	mov	r0, r3
 8003316:	f016 fac0 	bl	801989a <atoi>
 800331a:	4603      	mov	r3, r0
 800331c:	4618      	mov	r0, r3
 800331e:	f015 fd29 	bl	8018d74 <__aeabi_i2d>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4916      	ldr	r1, [pc, #88]	; (8003380 <main+0x1a28>)
 8003328:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <main+0x1a28>)
 800332e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <main+0x1a2c>)
 8003338:	f015 feb0 	bl	801909c <__aeabi_ddiv>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	490f      	ldr	r1, [pc, #60]	; (8003380 <main+0x1a28>)
 8003342:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <main+0x1a30>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800334e:	2300      	movs	r3, #0
 8003350:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8003354:	2300      	movs	r3, #0
 8003356:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800335a:	e028      	b.n	80033ae <main+0x1a56>
 800335c:	40010000 	.word	0x40010000
 8003360:	2000056c 	.word	0x2000056c
 8003364:	20000974 	.word	0x20000974
 8003368:	08052164 	.word	0x08052164
 800336c:	20000964 	.word	0x20000964
 8003370:	08052168 	.word	0x08052168
 8003374:	080521a0 	.word	0x080521a0
 8003378:	200004d8 	.word	0x200004d8
 800337c:	0805216c 	.word	0x0805216c
 8003380:	20000598 	.word	0x20000598
 8003384:	40240000 	.word	0x40240000
 8003388:	08051f44 	.word	0x08051f44
 800338c:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003390:	1d9a      	adds	r2, r3, #6
 8003392:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8003396:	499d      	ldr	r1, [pc, #628]	; (800360c <main+0x1cb4>)
 8003398:	5c8a      	ldrb	r2, [r1, r2]
 800339a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800339e:	443b      	add	r3, r7
 80033a0:	f803 2cbc 	strb.w	r2, [r3, #-188]
 80033a4:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80033a8:	3301      	adds	r3, #1
 80033aa:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80033ae:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d9ea      	bls.n	800338c <main+0x1a34>

					humidityRemote = atoi(valH);
 80033b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033ba:	4618      	mov	r0, r3
 80033bc:	f016 fa6d 	bl	801989a <atoi>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f015 fcd6 	bl	8018d74 <__aeabi_i2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4990      	ldr	r1, [pc, #576]	; (8003610 <main+0x1cb8>)
 80033ce:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 80033d2:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <main+0x1cb8>)
 80033d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <main+0x1cbc>)
 80033de:	f015 fe5d 	bl	801909c <__aeabi_ddiv>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	498a      	ldr	r1, [pc, #552]	; (8003610 <main+0x1cb8>)
 80033e8:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80033ec:	4b8a      	ldr	r3, [pc, #552]	; (8003618 <main+0x1cc0>)
 80033ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f2:	4b8a      	ldr	r3, [pc, #552]	; (800361c <main+0x1cc4>)
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f015 ff8e 	bl	8019318 <__aeabi_dcmpeq>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d115      	bne.n	800342e <main+0x1ad6>
 8003402:	4b85      	ldr	r3, [pc, #532]	; (8003618 <main+0x1cc0>)
 8003404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	4b84      	ldr	r3, [pc, #528]	; (8003620 <main+0x1cc8>)
 800340e:	f015 ff8d 	bl	801932c <__aeabi_dcmplt>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <main+0x1ad6>
 8003418:	4b7f      	ldr	r3, [pc, #508]	; (8003618 <main+0x1cc0>)
 800341a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	4b80      	ldr	r3, [pc, #512]	; (8003624 <main+0x1ccc>)
 8003424:	f015 ffa0 	bl	8019368 <__aeabi_dcmpgt>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <main+0x1b08>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 800342e:	4b78      	ldr	r3, [pc, #480]	; (8003610 <main+0x1cb8>)
 8003430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003434:	4b7c      	ldr	r3, [pc, #496]	; (8003628 <main+0x1cd0>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800343a:	f015 ff6d 	bl	8019318 <__aeabi_dcmpeq>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 8201 	bne.w	8003848 <main+0x1ef0>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003446:	4b72      	ldr	r3, [pc, #456]	; (8003610 <main+0x1cb8>)
 8003448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	f015 ff88 	bl	8019368 <__aeabi_dcmpgt>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 81f4 	beq.w	8003848 <main+0x1ef0>

						remoteSensorLastUpdate = 0;
 8003460:	4b72      	ldr	r3, [pc, #456]	; (800362c <main+0x1cd4>)
 8003462:	2200      	movs	r2, #0
 8003464:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 8003466:	4b72      	ldr	r3, [pc, #456]	; (8003630 <main+0x1cd8>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003470:	4970      	ldr	r1, [pc, #448]	; (8003634 <main+0x1cdc>)
 8003472:	4618      	mov	r0, r3
 8003474:	f017 f8c8 	bl	801a608 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003478:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800347c:	2300      	movs	r3, #0
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2301      	movs	r3, #1
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4b6c      	ldr	r3, [pc, #432]	; (8003638 <main+0x1ce0>)
 8003486:	2128      	movs	r1, #40	; 0x28
 8003488:	f240 1077 	movw	r0, #375	; 0x177
 800348c:	f002 f892 	bl	80055b4 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003490:	4b62      	ldr	r3, [pc, #392]	; (800361c <main+0x1cc4>)
 8003492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	4b68      	ldr	r3, [pc, #416]	; (800363c <main+0x1ce4>)
 800349c:	f015 ff50 	bl	8019340 <__aeabi_dcmple>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d014      	beq.n	80034d0 <main+0x1b78>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80034a6:	4b5d      	ldr	r3, [pc, #372]	; (800361c <main+0x1cc4>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034b0:	4963      	ldr	r1, [pc, #396]	; (8003640 <main+0x1ce8>)
 80034b2:	f017 f8a9 	bl	801a608 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80034b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80034ba:	2300      	movs	r3, #0
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2301      	movs	r3, #1
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <main+0x1ce0>)
 80034c4:	215a      	movs	r1, #90	; 0x5a
 80034c6:	f240 1061 	movw	r0, #353	; 0x161
 80034ca:	f002 f873 	bl	80055b4 <LCD_Font>
 80034ce:	e076      	b.n	80035be <main+0x1c66>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80034d0:	4b52      	ldr	r3, [pc, #328]	; (800361c <main+0x1cc4>)
 80034d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	f015 ff25 	bl	801932c <__aeabi_dcmplt>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01f      	beq.n	8003528 <main+0x1bd0>
 80034e8:	4b4c      	ldr	r3, [pc, #304]	; (800361c <main+0x1cc4>)
 80034ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	4b52      	ldr	r3, [pc, #328]	; (800363c <main+0x1ce4>)
 80034f4:	f015 ff38 	bl	8019368 <__aeabi_dcmpgt>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d014      	beq.n	8003528 <main+0x1bd0>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <main+0x1cc4>)
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003508:	494d      	ldr	r1, [pc, #308]	; (8003640 <main+0x1ce8>)
 800350a:	f017 f87d 	bl	801a608 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800350e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2301      	movs	r3, #1
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <main+0x1ce0>)
 800351c:	215a      	movs	r1, #90	; 0x5a
 800351e:	f240 1081 	movw	r0, #385	; 0x181
 8003522:	f002 f847 	bl	80055b4 <LCD_Font>
 8003526:	e04a      	b.n	80035be <main+0x1c66>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003528:	4b3c      	ldr	r3, [pc, #240]	; (800361c <main+0x1cc4>)
 800352a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f015 ff17 	bl	8019368 <__aeabi_dcmpgt>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01f      	beq.n	8003580 <main+0x1c28>
 8003540:	4b36      	ldr	r3, [pc, #216]	; (800361c <main+0x1cc4>)
 8003542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	4b32      	ldr	r3, [pc, #200]	; (8003614 <main+0x1cbc>)
 800354c:	f015 feee 	bl	801932c <__aeabi_dcmplt>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <main+0x1c28>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <main+0x1cc4>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003560:	4938      	ldr	r1, [pc, #224]	; (8003644 <main+0x1cec>)
 8003562:	f017 f851 	bl	801a608 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003566:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800356a:	2300      	movs	r3, #0
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2301      	movs	r3, #1
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <main+0x1ce0>)
 8003574:	215a      	movs	r1, #90	; 0x5a
 8003576:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800357a:	f002 f81b 	bl	80055b4 <LCD_Font>
 800357e:	e01e      	b.n	80035be <main+0x1c66>
						}
						else if (temperatureRemoteLast >= 10) {
 8003580:	4b26      	ldr	r3, [pc, #152]	; (800361c <main+0x1cc4>)
 8003582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <main+0x1cbc>)
 800358c:	f015 fee2 	bl	8019354 <__aeabi_dcmpge>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d013      	beq.n	80035be <main+0x1c66>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <main+0x1cc4>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035a0:	4928      	ldr	r1, [pc, #160]	; (8003644 <main+0x1cec>)
 80035a2:	f017 f831 	bl	801a608 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80035a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035aa:	2300      	movs	r3, #0
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2301      	movs	r3, #1
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4b21      	ldr	r3, [pc, #132]	; (8003638 <main+0x1ce0>)
 80035b4:	215a      	movs	r1, #90	; 0x5a
 80035b6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80035ba:	f001 fffb 	bl	80055b4 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 80035be:	4b16      	ldr	r3, [pc, #88]	; (8003618 <main+0x1cc0>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	4915      	ldr	r1, [pc, #84]	; (800361c <main+0x1cc4>)
 80035c6:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <main+0x1cc4>)
 80035cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <main+0x1ce4>)
 80035d6:	f015 feb3 	bl	8019340 <__aeabi_dcmple>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d033      	beq.n	8003648 <main+0x1cf0>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <main+0x1cc4>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035ea:	4915      	ldr	r1, [pc, #84]	; (8003640 <main+0x1ce8>)
 80035ec:	f017 f80c 	bl	801a608 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80035f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	2301      	movs	r3, #1
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <main+0x1ce0>)
 8003600:	215a      	movs	r1, #90	; 0x5a
 8003602:	f240 1061 	movw	r0, #353	; 0x161
 8003606:	f001 ffd5 	bl	80055b4 <LCD_Font>
 800360a:	e097      	b.n	800373c <main+0x1de4>
 800360c:	20000964 	.word	0x20000964
 8003610:	200005a8 	.word	0x200005a8
 8003614:	40240000 	.word	0x40240000
 8003618:	20000598 	.word	0x20000598
 800361c:	200005a0 	.word	0x200005a0
 8003620:	40554000 	.word	0x40554000
 8003624:	c0440000 	.word	0xc0440000
 8003628:	200005b0 	.word	0x200005b0
 800362c:	20000004 	.word	0x20000004
 8003630:	20000000 	.word	0x20000000
 8003634:	08052124 	.word	0x08052124
 8003638:	080298a0 	.word	0x080298a0
 800363c:	c0240000 	.word	0xc0240000
 8003640:	08052170 	.word	0x08052170
 8003644:	08052178 	.word	0x08052178
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003648:	4bac      	ldr	r3, [pc, #688]	; (80038fc <main+0x1fa4>)
 800364a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	f015 fe69 	bl	801932c <__aeabi_dcmplt>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <main+0x1d4a>
 8003660:	4ba6      	ldr	r3, [pc, #664]	; (80038fc <main+0x1fa4>)
 8003662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <main+0x1fa8>)
 800366c:	f015 fe7c 	bl	8019368 <__aeabi_dcmpgt>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d015      	beq.n	80036a2 <main+0x1d4a>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003676:	4ba1      	ldr	r3, [pc, #644]	; (80038fc <main+0x1fa4>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003680:	49a0      	ldr	r1, [pc, #640]	; (8003904 <main+0x1fac>)
 8003682:	f016 ffc1 	bl	801a608 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003686:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800368a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2301      	movs	r3, #1
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	4b9c      	ldr	r3, [pc, #624]	; (8003908 <main+0x1fb0>)
 8003696:	215a      	movs	r1, #90	; 0x5a
 8003698:	f240 1081 	movw	r0, #385	; 0x181
 800369c:	f001 ff8a 	bl	80055b4 <LCD_Font>
 80036a0:	e04c      	b.n	800373c <main+0x1de4>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80036a2:	4b96      	ldr	r3, [pc, #600]	; (80038fc <main+0x1fa4>)
 80036a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f015 fe5a 	bl	8019368 <__aeabi_dcmpgt>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d020      	beq.n	80036fc <main+0x1da4>
 80036ba:	4b90      	ldr	r3, [pc, #576]	; (80038fc <main+0x1fa4>)
 80036bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	4b91      	ldr	r3, [pc, #580]	; (800390c <main+0x1fb4>)
 80036c6:	f015 fe31 	bl	801932c <__aeabi_dcmplt>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <main+0x1da4>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80036d0:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <main+0x1fa4>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80036da:	498d      	ldr	r1, [pc, #564]	; (8003910 <main+0x1fb8>)
 80036dc:	f016 ff94 	bl	801a608 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80036e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80036e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2301      	movs	r3, #1
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4b86      	ldr	r3, [pc, #536]	; (8003908 <main+0x1fb0>)
 80036f0:	215a      	movs	r1, #90	; 0x5a
 80036f2:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80036f6:	f001 ff5d 	bl	80055b4 <LCD_Font>
 80036fa:	e01f      	b.n	800373c <main+0x1de4>
						}
						else if (temperatureRemoteLast >= 10) {
 80036fc:	4b7f      	ldr	r3, [pc, #508]	; (80038fc <main+0x1fa4>)
 80036fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	4b81      	ldr	r3, [pc, #516]	; (800390c <main+0x1fb4>)
 8003708:	f015 fe24 	bl	8019354 <__aeabi_dcmpge>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <main+0x1de4>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003712:	4b7a      	ldr	r3, [pc, #488]	; (80038fc <main+0x1fa4>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800371c:	497c      	ldr	r1, [pc, #496]	; (8003910 <main+0x1fb8>)
 800371e:	f016 ff73 	bl	801a608 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003722:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	2301      	movs	r3, #1
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4b75      	ldr	r3, [pc, #468]	; (8003908 <main+0x1fb0>)
 8003732:	215a      	movs	r1, #90	; 0x5a
 8003734:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003738:	f001 ff3c 	bl	80055b4 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 800373c:	4b75      	ldr	r3, [pc, #468]	; (8003914 <main+0x1fbc>)
 800373e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	4b71      	ldr	r3, [pc, #452]	; (800390c <main+0x1fb4>)
 8003748:	f015 fe04 	bl	8019354 <__aeabi_dcmpge>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <main+0x1e24>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003752:	4b70      	ldr	r3, [pc, #448]	; (8003914 <main+0x1fbc>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800375c:	4969      	ldr	r1, [pc, #420]	; (8003904 <main+0x1fac>)
 800375e:	f016 ff53 	bl	801a608 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003762:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003766:	2300      	movs	r3, #0
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	2301      	movs	r3, #1
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	4b66      	ldr	r3, [pc, #408]	; (8003908 <main+0x1fb0>)
 8003770:	2128      	movs	r1, #40	; 0x28
 8003772:	f240 1073 	movw	r0, #371	; 0x173
 8003776:	f001 ff1d 	bl	80055b4 <LCD_Font>
 800377a:	e01e      	b.n	80037ba <main+0x1e62>
						}
						else if (humidityRemoteLast < 10) {
 800377c:	4b65      	ldr	r3, [pc, #404]	; (8003914 <main+0x1fbc>)
 800377e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	4b61      	ldr	r3, [pc, #388]	; (800390c <main+0x1fb4>)
 8003788:	f015 fdd0 	bl	801932c <__aeabi_dcmplt>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d013      	beq.n	80037ba <main+0x1e62>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003792:	4b60      	ldr	r3, [pc, #384]	; (8003914 <main+0x1fbc>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800379c:	4959      	ldr	r1, [pc, #356]	; (8003904 <main+0x1fac>)
 800379e:	f016 ff33 	bl	801a608 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80037a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037a6:	2300      	movs	r3, #0
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2301      	movs	r3, #1
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4b56      	ldr	r3, [pc, #344]	; (8003908 <main+0x1fb0>)
 80037b0:	2128      	movs	r1, #40	; 0x28
 80037b2:	f240 1093 	movw	r0, #403	; 0x193
 80037b6:	f001 fefd 	bl	80055b4 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <main+0x1fc0>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	4954      	ldr	r1, [pc, #336]	; (8003914 <main+0x1fbc>)
 80037c2:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 80037c6:	4b53      	ldr	r3, [pc, #332]	; (8003914 <main+0x1fbc>)
 80037c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	4b4e      	ldr	r3, [pc, #312]	; (800390c <main+0x1fb4>)
 80037d2:	f015 fdbf 	bl	8019354 <__aeabi_dcmpge>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d015      	beq.n	8003808 <main+0x1eb0>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80037dc:	4b4d      	ldr	r3, [pc, #308]	; (8003914 <main+0x1fbc>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80037e6:	4947      	ldr	r1, [pc, #284]	; (8003904 <main+0x1fac>)
 80037e8:	f016 ff0e 	bl	801a608 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80037ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	2301      	movs	r3, #1
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	4b43      	ldr	r3, [pc, #268]	; (8003908 <main+0x1fb0>)
 80037fc:	2128      	movs	r1, #40	; 0x28
 80037fe:	f240 1073 	movw	r0, #371	; 0x173
 8003802:	f001 fed7 	bl	80055b4 <LCD_Font>
 8003806:	e01f      	b.n	8003848 <main+0x1ef0>
						}
						else if (humidityRemoteLast < 10) {
 8003808:	4b42      	ldr	r3, [pc, #264]	; (8003914 <main+0x1fbc>)
 800380a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	4b3e      	ldr	r3, [pc, #248]	; (800390c <main+0x1fb4>)
 8003814:	f015 fd8a 	bl	801932c <__aeabi_dcmplt>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d014      	beq.n	8003848 <main+0x1ef0>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <main+0x1fbc>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003828:	4936      	ldr	r1, [pc, #216]	; (8003904 <main+0x1fac>)
 800382a:	f016 feed 	bl	801a608 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 800382e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2301      	movs	r3, #1
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4b32      	ldr	r3, [pc, #200]	; (8003908 <main+0x1fb0>)
 800383e:	2128      	movs	r1, #40	; 0x28
 8003840:	f240 1093 	movw	r0, #403	; 0x193
 8003844:	f001 feb6 	bl	80055b4 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 8003848:	4b34      	ldr	r3, [pc, #208]	; (800391c <main+0x1fc4>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8003854:	e009      	b.n	800386a <main+0x1f12>
 8003856:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800385a:	4a31      	ldr	r2, [pc, #196]	; (8003920 <main+0x1fc8>)
 800385c:	2100      	movs	r1, #0
 800385e:	54d1      	strb	r1, [r2, r3]
 8003860:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8003864:	3301      	adds	r3, #1
 8003866:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 800386a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d9f1      	bls.n	8003856 <main+0x1efe>
			}

			remoteSensorLastUpdate++;
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <main+0x1fcc>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <main+0x1fcc>)
 800387c:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <main+0x1fcc>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	f240 813e 	bls.w	8003b04 <main+0x21ac>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <main+0x1fa4>)
 800388a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	f015 fd3f 	bl	8019318 <__aeabi_dcmpeq>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 8107 	bne.w	8003ab0 <main+0x2158>
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <main+0x1fbc>)
 80038a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	f015 fd32 	bl	8019318 <__aeabi_dcmpeq>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 80fa 	bne.w	8003ab0 <main+0x2158>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <main+0x1fa4>)
 80038be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <main+0x1fa8>)
 80038c8:	f015 fd3a 	bl	8019340 <__aeabi_dcmple>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02a      	beq.n	8003928 <main+0x1fd0>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <main+0x1fa4>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80038dc:	4909      	ldr	r1, [pc, #36]	; (8003904 <main+0x1fac>)
 80038de:	f016 fe93 	bl	801a608 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80038e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038e6:	2300      	movs	r3, #0
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2301      	movs	r3, #1
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <main+0x1fb0>)
 80038f0:	215a      	movs	r1, #90	; 0x5a
 80038f2:	f240 1061 	movw	r0, #353	; 0x161
 80038f6:	f001 fe5d 	bl	80055b4 <LCD_Font>
 80038fa:	e08c      	b.n	8003a16 <main+0x20be>
 80038fc:	200005a0 	.word	0x200005a0
 8003900:	c0240000 	.word	0xc0240000
 8003904:	08052170 	.word	0x08052170
 8003908:	080298a0 	.word	0x080298a0
 800390c:	40240000 	.word	0x40240000
 8003910:	08052178 	.word	0x08052178
 8003914:	200005b0 	.word	0x200005b0
 8003918:	200005a8 	.word	0x200005a8
 800391c:	20000974 	.word	0x20000974
 8003920:	20000964 	.word	0x20000964
 8003924:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <main+0x21b8>)
 800392a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	f015 fcf9 	bl	801932c <__aeabi_dcmplt>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01f      	beq.n	8003980 <main+0x2028>
 8003940:	4b73      	ldr	r3, [pc, #460]	; (8003b10 <main+0x21b8>)
 8003942:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <main+0x21bc>)
 800394c:	f015 fd0c 	bl	8019368 <__aeabi_dcmpgt>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d014      	beq.n	8003980 <main+0x2028>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003956:	4b6e      	ldr	r3, [pc, #440]	; (8003b10 <main+0x21b8>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003960:	496d      	ldr	r1, [pc, #436]	; (8003b18 <main+0x21c0>)
 8003962:	f016 fe51 	bl	801a608 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003966:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800396a:	2300      	movs	r3, #0
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	2301      	movs	r3, #1
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <main+0x21c4>)
 8003974:	215a      	movs	r1, #90	; 0x5a
 8003976:	f240 1081 	movw	r0, #385	; 0x181
 800397a:	f001 fe1b 	bl	80055b4 <LCD_Font>
 800397e:	e04a      	b.n	8003a16 <main+0x20be>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003980:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <main+0x21b8>)
 8003982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	f015 fceb 	bl	8019368 <__aeabi_dcmpgt>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01f      	beq.n	80039d8 <main+0x2080>
 8003998:	4b5d      	ldr	r3, [pc, #372]	; (8003b10 <main+0x21b8>)
 800399a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <main+0x21c8>)
 80039a4:	f015 fcc2 	bl	801932c <__aeabi_dcmplt>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d014      	beq.n	80039d8 <main+0x2080>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80039ae:	4b58      	ldr	r3, [pc, #352]	; (8003b10 <main+0x21b8>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80039b8:	495a      	ldr	r1, [pc, #360]	; (8003b24 <main+0x21cc>)
 80039ba:	f016 fe25 	bl	801a608 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039c2:	2300      	movs	r3, #0
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	2301      	movs	r3, #1
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4b54      	ldr	r3, [pc, #336]	; (8003b1c <main+0x21c4>)
 80039cc:	215a      	movs	r1, #90	; 0x5a
 80039ce:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80039d2:	f001 fdef 	bl	80055b4 <LCD_Font>
 80039d6:	e01e      	b.n	8003a16 <main+0x20be>
					}
					else if (temperatureRemoteLast >= 10) {
 80039d8:	4b4d      	ldr	r3, [pc, #308]	; (8003b10 <main+0x21b8>)
 80039da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <main+0x21c8>)
 80039e4:	f015 fcb6 	bl	8019354 <__aeabi_dcmpge>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d013      	beq.n	8003a16 <main+0x20be>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80039ee:	4b48      	ldr	r3, [pc, #288]	; (8003b10 <main+0x21b8>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80039f8:	494a      	ldr	r1, [pc, #296]	; (8003b24 <main+0x21cc>)
 80039fa:	f016 fe05 	bl	801a608 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a02:	2300      	movs	r3, #0
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2301      	movs	r3, #1
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <main+0x21c4>)
 8003a0c:	215a      	movs	r1, #90	; 0x5a
 8003a0e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003a12:	f001 fdcf 	bl	80055b4 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8003a16:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <main+0x21d0>)
 8003a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <main+0x21c8>)
 8003a22:	f015 fc97 	bl	8019354 <__aeabi_dcmpge>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d014      	beq.n	8003a56 <main+0x20fe>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a2c:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <main+0x21d0>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a36:	4938      	ldr	r1, [pc, #224]	; (8003b18 <main+0x21c0>)
 8003a38:	f016 fde6 	bl	801a608 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a3c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a40:	2300      	movs	r3, #0
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	2301      	movs	r3, #1
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4b34      	ldr	r3, [pc, #208]	; (8003b1c <main+0x21c4>)
 8003a4a:	2128      	movs	r1, #40	; 0x28
 8003a4c:	f240 1073 	movw	r0, #371	; 0x173
 8003a50:	f001 fdb0 	bl	80055b4 <LCD_Font>
 8003a54:	e01e      	b.n	8003a94 <main+0x213c>
					}
					else if (humidityRemoteLast < 10) {
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <main+0x21d0>)
 8003a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <main+0x21c8>)
 8003a62:	f015 fc63 	bl	801932c <__aeabi_dcmplt>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <main+0x213c>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <main+0x21d0>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003a76:	4928      	ldr	r1, [pc, #160]	; (8003b18 <main+0x21c0>)
 8003a78:	f016 fdc6 	bl	801a608 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003a7c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003a80:	2300      	movs	r3, #0
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	2301      	movs	r3, #1
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <main+0x21c4>)
 8003a8a:	2128      	movs	r1, #40	; 0x28
 8003a8c:	f240 1093 	movw	r0, #403	; 0x193
 8003a90:	f001 fd90 	bl	80055b4 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003a94:	491e      	ldr	r1, [pc, #120]	; (8003b10 <main+0x21b8>)
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003aa2:	4921      	ldr	r1, [pc, #132]	; (8003b28 <main+0x21d0>)
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <main+0x21d4>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003aba:	491d      	ldr	r1, [pc, #116]	; (8003b30 <main+0x21d8>)
 8003abc:	4618      	mov	r0, r3
 8003abe:	f016 fda3 	bl	801a608 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003ac2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	2301      	movs	r3, #1
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <main+0x21c4>)
 8003ad0:	2128      	movs	r1, #40	; 0x28
 8003ad2:	f240 1077 	movw	r0, #375	; 0x177
 8003ad6:	f001 fd6d 	bl	80055b4 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <main+0x21dc>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ae4:	4912      	ldr	r1, [pc, #72]	; (8003b30 <main+0x21d8>)
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f016 fd8e 	bl	801a608 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003aec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <main+0x21e0>)
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	2301      	movs	r3, #1
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <main+0x21c4>)
 8003afa:	2128      	movs	r1, #40	; 0x28
 8003afc:	f240 1077 	movw	r0, #375	; 0x177
 8003b00:	f001 fd58 	bl	80055b4 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <main+0x21dc>)
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <main+0x21d4>)
 8003b0a:	701a      	strb	r2, [r3, #0]
	{
 8003b0c:	f7fe b9c5 	b.w	8001e9a <main+0x542>
 8003b10:	200005a0 	.word	0x200005a0
 8003b14:	c0240000 	.word	0xc0240000
 8003b18:	08052170 	.word	0x08052170
 8003b1c:	080298a0 	.word	0x080298a0
 8003b20:	40240000 	.word	0x40240000
 8003b24:	08052178 	.word	0x08052178
 8003b28:	200005b0 	.word	0x200005b0
 8003b2c:	20000000 	.word	0x20000000
 8003b30:	08052124 	.word	0x08052124
 8003b34:	2000056d 	.word	0x2000056d
 8003b38:	00ffa500 	.word	0x00ffa500

08003b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b094      	sub	sp, #80	; 0x50
 8003b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b42:	f107 0320 	add.w	r3, r7, #32
 8003b46:	2230      	movs	r2, #48	; 0x30
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f015 fed4 	bl	80198f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b60:	2300      	movs	r3, #0
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <SystemClock_Config+0xcc>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <SystemClock_Config+0xcc>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <SystemClock_Config+0xcc>)
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <SystemClock_Config+0xd0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <SystemClock_Config+0xd0>)
 8003b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <SystemClock_Config+0xd0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003bac:	2304      	movs	r3, #4
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003bb0:	23a8      	movs	r3, #168	; 0xa8
 8003bb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003bb8:	2307      	movs	r3, #7
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bbc:	f107 0320 	add.w	r3, r7, #32
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f00d febf 	bl	8011944 <HAL_RCC_OscConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003bcc:	f000 fab0 	bl	8004130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bd0:	230f      	movs	r3, #15
 8003bd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	2105      	movs	r1, #5
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f00e f920 	bl	8011e34 <HAL_RCC_ClockConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003bfa:	f000 fa99 	bl	8004130 <Error_Handler>
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3750      	adds	r7, #80	; 0x50
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40007000 	.word	0x40007000

08003c10 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003c16:	463b      	mov	r3, r7
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <MX_DAC_Init+0x60>)
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <MX_DAC_Init+0x64>)
 8003c22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003c24:	4812      	ldr	r0, [pc, #72]	; (8003c70 <MX_DAC_Init+0x60>)
 8003c26:	f003 faa8 	bl	800717a <HAL_DAC_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003c30:	f000 fa7e 	bl	8004130 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4619      	mov	r1, r3
 8003c42:	480b      	ldr	r0, [pc, #44]	; (8003c70 <MX_DAC_Init+0x60>)
 8003c44:	f003 fd1d 	bl	8007682 <HAL_DAC_ConfigChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003c4e:	f000 fa6f 	bl	8004130 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003c52:	463b      	mov	r3, r7
 8003c54:	2210      	movs	r2, #16
 8003c56:	4619      	mov	r1, r3
 8003c58:	4805      	ldr	r0, [pc, #20]	; (8003c70 <MX_DAC_Init+0x60>)
 8003c5a:	f003 fd12 	bl	8007682 <HAL_DAC_ConfigChannel>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003c64:	f000 fa64 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200002a8 	.word	0x200002a8
 8003c74:	40007400 	.word	0x40007400

08003c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c7e:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <MX_I2C1_Init+0x54>)
 8003c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c84:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <MX_I2C1_Init+0x58>)
 8003c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <MX_I2C1_Init+0x50>)
 8003cb6:	f007 fa70 	bl	800b19a <HAL_I2C_Init>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003cc0:	f000 fa36 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200002bc 	.word	0x200002bc
 8003ccc:	40005400 	.word	0x40005400
 8003cd0:	000186a0 	.word	0x000186a0

08003cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <MX_SPI1_Init+0x68>)
 8003cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d20:	220a      	movs	r2, #10
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d24:	4804      	ldr	r0, [pc, #16]	; (8003d38 <MX_SPI1_Init+0x64>)
 8003d26:	f00e fea5 	bl	8012a74 <HAL_SPI_Init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d30:	f000 f9fe 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000310 	.word	0x20000310
 8003d3c:	40013000 	.word	0x40013000

08003d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d44:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <MX_SPI2_Init+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003d70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d74:	2238      	movs	r2, #56	; 0x38
 8003d76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d8c:	220a      	movs	r2, #10
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d90:	4804      	ldr	r0, [pc, #16]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d92:	f00e fe6f 	bl	8012a74 <HAL_SPI_Init>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d9c:	f000 f9c8 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000368 	.word	0x20000368
 8003da8:	40003800 	.word	0x40003800

08003dac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003db0:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <MX_SPI3_Init+0x68>)
 8003db4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003db6:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003dbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003dd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003ddc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003de0:	2238      	movs	r2, #56	; 0x38
 8003de2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003df8:	220a      	movs	r2, #10
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003dfc:	4804      	ldr	r0, [pc, #16]	; (8003e10 <MX_SPI3_Init+0x64>)
 8003dfe:	f00e fe39 	bl	8012a74 <HAL_SPI_Init>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003e08:	f000 f992 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	200003c0 	.word	0x200003c0
 8003e14:	40003c00 	.word	0x40003c00

08003e18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <MX_USART1_UART_Init+0x50>)
 8003e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e3e:	220c      	movs	r2, #12
 8003e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e4e:	4805      	ldr	r0, [pc, #20]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e50:	f011 fb76 	bl	8015540 <HAL_UART_Init>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e5a:	f000 f969 	bl	8004130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200004d8 	.word	0x200004d8
 8003e68:	40011000 	.word	0x40011000

08003e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <MX_DMA_Init+0x4c>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <MX_DMA_Init+0x4c>)
 8003e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <MX_DMA_Init+0x4c>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	200e      	movs	r0, #14
 8003e94:	f003 f82d 	bl	8006ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003e98:	200e      	movs	r0, #14
 8003e9a:	f003 f846 	bl	8006f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	200f      	movs	r0, #15
 8003ea4:	f003 f825 	bl	8006ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003ea8:	200f      	movs	r0, #15
 8003eaa:	f003 f83e 	bl	8006f2a <HAL_NVIC_EnableIRQ>

}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	; 0x30
 8003ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec2:	f107 031c 	add.w	r3, r7, #28
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	4b60      	ldr	r3, [pc, #384]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a5f      	ldr	r2, [pc, #380]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003edc:	f043 0310 	orr.w	r3, r3, #16
 8003ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee2:	4b5d      	ldr	r3, [pc, #372]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	4b59      	ldr	r3, [pc, #356]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a58      	ldr	r2, [pc, #352]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b56      	ldr	r3, [pc, #344]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b52      	ldr	r3, [pc, #328]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a51      	ldr	r2, [pc, #324]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4a4a      	ldr	r2, [pc, #296]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	; 0x30
 8003f36:	4b48      	ldr	r3, [pc, #288]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	4b44      	ldr	r3, [pc, #272]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a43      	ldr	r2, [pc, #268]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <MX_GPIO_Init+0x19c>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	2140      	movs	r1, #64	; 0x40
 8003f7e:	4837      	ldr	r0, [pc, #220]	; (800405c <MX_GPIO_Init+0x1a0>)
 8003f80:	f007 f88c 	bl	800b09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003f84:	2200      	movs	r2, #0
 8003f86:	2180      	movs	r1, #128	; 0x80
 8003f88:	4834      	ldr	r0, [pc, #208]	; (800405c <MX_GPIO_Init+0x1a0>)
 8003f8a:	f007 f887 	bl	800b09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_RESET);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2101      	movs	r1, #1
 8003f92:	4833      	ldr	r0, [pc, #204]	; (8004060 <MX_GPIO_Init+0x1a4>)
 8003f94:	f007 f882 	bl	800b09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003f9e:	4831      	ldr	r0, [pc, #196]	; (8004064 <MX_GPIO_Init+0x1a8>)
 8003fa0:	f007 f87c 	bl	800b09c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	482f      	ldr	r0, [pc, #188]	; (8004068 <MX_GPIO_Init+0x1ac>)
 8003faa:	f007 f877 	bl	800b09c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003fae:	2318      	movs	r3, #24
 8003fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fba:	f107 031c 	add.w	r3, r7, #28
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	482a      	ldr	r0, [pc, #168]	; (800406c <MX_GPIO_Init+0x1b0>)
 8003fc2:	f006 fdbb 	bl	800ab3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003fc6:	23c0      	movs	r3, #192	; 0xc0
 8003fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd6:	f107 031c 	add.w	r3, r7, #28
 8003fda:	4619      	mov	r1, r3
 8003fdc:	481f      	ldr	r0, [pc, #124]	; (800405c <MX_GPIO_Init+0x1a0>)
 8003fde:	f006 fdad 	bl	800ab3c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fea:	2301      	movs	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003fee:	f107 031c 	add.w	r3, r7, #28
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	481b      	ldr	r0, [pc, #108]	; (8004064 <MX_GPIO_Init+0x1a8>)
 8003ff6:	f006 fda1 	bl	800ab3c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffe:	2301      	movs	r3, #1
 8004000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004002:	2301      	movs	r3, #1
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	2303      	movs	r3, #3
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 800400a:	f107 031c 	add.w	r3, r7, #28
 800400e:	4619      	mov	r1, r3
 8004010:	4813      	ldr	r0, [pc, #76]	; (8004060 <MX_GPIO_Init+0x1a4>)
 8004012:	f006 fd93 	bl	800ab3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8004016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800401a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401c:	2301      	movs	r3, #1
 800401e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004024:	2300      	movs	r3, #0
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	4619      	mov	r1, r3
 800402e:	480d      	ldr	r0, [pc, #52]	; (8004064 <MX_GPIO_Init+0x1a8>)
 8004030:	f006 fd84 	bl	800ab3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8004034:	2304      	movs	r3, #4
 8004036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004038:	2301      	movs	r3, #1
 800403a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004040:	2300      	movs	r3, #0
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	4619      	mov	r1, r3
 800404a:	4807      	ldr	r0, [pc, #28]	; (8004068 <MX_GPIO_Init+0x1ac>)
 800404c:	f006 fd76 	bl	800ab3c <HAL_GPIO_Init>

}
 8004050:	bf00      	nop
 8004052:	3730      	adds	r7, #48	; 0x30
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	40020000 	.word	0x40020000
 8004060:	40020400 	.word	0x40020400
 8004064:	40020800 	.word	0x40020800
 8004068:	40020c00 	.word	0x40020c00
 800406c:	40021000 	.word	0x40021000

08004070 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
 8004084:	615a      	str	r2, [r3, #20]
 8004086:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <MX_FSMC_Init+0xb8>)
 800408a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800408e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <MX_FSMC_Init+0xb8>)
 8004092:	4a26      	ldr	r2, [pc, #152]	; (800412c <MX_FSMC_Init+0xbc>)
 8004094:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <MX_FSMC_Init+0xb8>)
 8004098:	2200      	movs	r2, #0
 800409a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800409c:	4b22      	ldr	r3, [pc, #136]	; (8004128 <MX_FSMC_Init+0xb8>)
 800409e:	2200      	movs	r2, #0
 80040a0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80040a2:	4b21      	ldr	r3, [pc, #132]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040aa:	2210      	movs	r2, #16
 80040ac:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <MX_FSMC_Init+0xb8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 80040ec:	2302      	movs	r3, #2
 80040ee:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80040f0:	230f      	movs	r3, #15
 80040f2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80040f4:	2305      	movs	r3, #5
 80040f6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 80040f8:	2302      	movs	r3, #2
 80040fa:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80040fc:	2310      	movs	r3, #16
 80040fe:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004100:	2311      	movs	r3, #17
 8004102:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	2200      	movs	r2, #0
 800410c:	4619      	mov	r1, r3
 800410e:	4806      	ldr	r0, [pc, #24]	; (8004128 <MX_FSMC_Init+0xb8>)
 8004110:	f010 ff6c 	bl	8014fec <HAL_SRAM_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800411a:	f000 f809 	bl	8004130 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800411e:	bf00      	nop
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000051c 	.word	0x2000051c
 800412c:	a0000104 	.word	0xa0000104

08004130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004134:	b672      	cpsid	i
}
 8004136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004138:	e7fe      	b.n	8004138 <Error_Handler+0x8>

0800413a <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	71fb      	strb	r3, [r7, #7]
 8004144:	460b      	mov	r3, r1
 8004146:	71bb      	strb	r3, [r7, #6]
 8004148:	4613      	mov	r3, r2
 800414a:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	041a      	lsls	r2, r3, #16
 8004150:	79bb      	ldrb	r3, [r7, #6]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	441a      	add	r2, r3
 8004156:	797b      	ldrb	r3, [r7, #5]
 8004158:	4413      	add	r3, r2
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	6039      	str	r1, [r7, #0]
 8004170:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <H24_RGB565+0x4a>
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	08db      	lsrs	r3, r3, #3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	02db      	lsls	r3, r3, #11
 8004190:	b21a      	sxth	r2, r3
 8004192:	7bbb      	ldrb	r3, [r7, #14]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	b2db      	uxtb	r3, r3
 8004198:	015b      	lsls	r3, r3, #5
 800419a:	b21b      	sxth	r3, r3
 800419c:	4313      	orrs	r3, r2
 800419e:	b21a      	sxth	r2, r3
 80041a0:	7b7b      	ldrb	r3, [r7, #13]
 80041a2:	08db      	lsrs	r3, r3, #3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	e012      	b.n	80041d6 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 80041b0:	7b7b      	ldrb	r3, [r7, #13]
 80041b2:	08db      	lsrs	r3, r3, #3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	02db      	lsls	r3, r3, #11
 80041b8:	b21a      	sxth	r2, r3
 80041ba:	7bbb      	ldrb	r3, [r7, #14]
 80041bc:	089b      	lsrs	r3, r3, #2
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	015b      	lsls	r3, r3, #5
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b21a      	sxth	r2, r3
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	08db      	lsrs	r3, r3, #3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	b21b      	sxth	r3, r3
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b21b      	sxth	r3, r3
 80041d4:	b29b      	uxth	r3, r3
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 80041ec:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	8013      	strh	r3, [r2, #0]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e005      	b.n	800421c <LCD_Send_Dat+0x1c>
	DAT = dat;
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <LCD_Send_Dat+0x30>)
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3301      	adds	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f6      	beq.n	8004210 <LCD_Send_Dat+0x10>
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	60080000 	.word	0x60080000

08004234 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4623      	mov	r3, r4
 8004244:	80fb      	strh	r3, [r7, #6]
 8004246:	4603      	mov	r3, r0
 8004248:	80bb      	strh	r3, [r7, #4]
 800424a:	460b      	mov	r3, r1
 800424c:	807b      	strh	r3, [r7, #2]
 800424e:	4613      	mov	r3, r2
 8004250:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8004252:	202a      	movs	r0, #42	; 0x2a
 8004254:	f7ff ffc5 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8004258:	88bb      	ldrh	r3, [r7, #4]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	b29b      	uxth	r3, r3
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ffce 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8004264:	88bb      	ldrh	r3, [r7, #4]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	b29b      	uxth	r3, r3
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ffc8 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8004270:	883b      	ldrh	r3, [r7, #0]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b29b      	uxth	r3, r3
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ffc2 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 800427c:	883b      	ldrh	r3, [r7, #0]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ffbc 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8004288:	202b      	movs	r0, #43	; 0x2b
 800428a:	f7ff ffaa 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	b29b      	uxth	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ffb3 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	b29b      	uxth	r3, r3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ffad 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ffa7 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 80042b2:	887b      	ldrh	r3, [r7, #2]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ffa1 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 80042be:	202c      	movs	r0, #44	; 0x2c
 80042c0:	f7ff ff8f 	bl	80041e2 <LCD_Send_Cmd>
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}

080042cc <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	603a      	str	r2, [r7, #0]
 80042d6:	80fb      	strh	r3, [r7, #6]
 80042d8:	460b      	mov	r3, r1
 80042da:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 80042dc:	88bb      	ldrh	r3, [r7, #4]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	88b9      	ldrh	r1, [r7, #4]
 80042e2:	88f8      	ldrh	r0, [r7, #6]
 80042e4:	f7ff ffa6 	bl	8004234 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	2001      	movs	r0, #1
 80042ec:	f7ff ff3b 	bl	8004166 <H24_RGB565>
 80042f0:	4603      	mov	r3, r0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff84 	bl	8004200 <LCD_Send_Dat>
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	4604      	mov	r4, r0
 8004308:	4608      	mov	r0, r1
 800430a:	4611      	mov	r1, r2
 800430c:	461a      	mov	r2, r3
 800430e:	4623      	mov	r3, r4
 8004310:	80fb      	strh	r3, [r7, #6]
 8004312:	4603      	mov	r3, r0
 8004314:	80bb      	strh	r3, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	807b      	strh	r3, [r7, #2]
 800431a:	4613      	mov	r3, r2
 800431c:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	883a      	ldrh	r2, [r7, #0]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 800432c:	88ba      	ldrh	r2, [r7, #4]
 800432e:	883b      	ldrh	r3, [r7, #0]
 8004330:	4413      	add	r3, r2
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29c      	uxth	r4, r3
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	887b      	ldrh	r3, [r7, #2]
 800433c:	4413      	add	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	88f9      	ldrh	r1, [r7, #6]
 8004346:	88b8      	ldrh	r0, [r7, #4]
 8004348:	4622      	mov	r2, r4
 800434a:	f7ff ff73 	bl	8004234 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e00a      	b.n	800436a <LCD_Rect_Fill+0x6a>
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	2001      	movs	r0, #1
 8004358:	f7ff ff05 	bl	8004166 <H24_RGB565>
 800435c:	4603      	mov	r3, r0
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff4e 	bl	8004200 <LCD_Send_Dat>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	d3f0      	bcc.n	8004354 <LCD_Rect_Fill+0x54>
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}

0800437c <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b08b      	sub	sp, #44	; 0x2c
 8004380:	af02      	add	r7, sp, #8
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4623      	mov	r3, r4
 800438c:	80fb      	strh	r3, [r7, #6]
 800438e:	4603      	mov	r3, r0
 8004390:	80bb      	strh	r3, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	807b      	strh	r3, [r7, #2]
 8004396:	4613      	mov	r3, r2
 8004398:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bfb8      	it	lt
 80043a4:	425b      	neglt	r3, r3
 80043a6:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80043a8:	883a      	ldrh	r2, [r7, #0]
 80043aa:	88bb      	ldrh	r3, [r7, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bfb8      	it	lt
 80043b2:	425b      	neglt	r3, r3
 80043b4:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	887b      	ldrh	r3, [r7, #2]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d201      	bcs.n	80043c2 <LCD_Line+0x46>
 80043be:	2301      	movs	r3, #1
 80043c0:	e001      	b.n	80043c6 <LCD_Line+0x4a>
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295
 80043c6:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 80043c8:	88ba      	ldrh	r2, [r7, #4]
 80043ca:	883b      	ldrh	r3, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d201      	bcs.n	80043d4 <LCD_Line+0x58>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e001      	b.n	80043d8 <LCD_Line+0x5c>
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80043e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043f0:	b29c      	uxth	r4, r3
 80043f2:	88b9      	ldrh	r1, [r7, #4]
 80043f4:	88f8      	ldrh	r0, [r7, #6]
 80043f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4623      	mov	r3, r4
 80043fc:	f7ff ff80 	bl	8004300 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	887b      	ldrh	r3, [r7, #2]
 8004404:	429a      	cmp	r2, r3
 8004406:	d103      	bne.n	8004410 <LCD_Line+0x94>
 8004408:	88ba      	ldrh	r2, [r7, #4]
 800440a:	883b      	ldrh	r3, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d01e      	beq.n	800444e <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	425b      	negs	r3, r3
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	dd08      	ble.n	8004432 <LCD_Line+0xb6>
		{
			error -= deltaY;
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	b29a      	uxth	r2, r3
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	4413      	add	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	429a      	cmp	r2, r3
 8004438:	dad5      	bge.n	80043e6 <LCD_Line+0x6a>
		{
			error += deltaX;
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	b29a      	uxth	r2, r3
 8004446:	88bb      	ldrh	r3, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800444c:	e7cb      	b.n	80043e6 <LCD_Line+0x6a>
		break;
 800444e:	bf00      	nop
		}
	}
}
 8004450:	bf00      	nop
 8004452:	3724      	adds	r7, #36	; 0x24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd90      	pop	{r4, r7, pc}

08004458 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
 800445e:	4604      	mov	r4, r0
 8004460:	4608      	mov	r0, r1
 8004462:	4611      	mov	r1, r2
 8004464:	461a      	mov	r2, r3
 8004466:	4623      	mov	r3, r4
 8004468:	80fb      	strh	r3, [r7, #6]
 800446a:	4603      	mov	r3, r0
 800446c:	80bb      	strh	r3, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	807b      	strh	r3, [r7, #2]
 8004472:	4613      	mov	r3, r2
 8004474:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 8004476:	883c      	ldrh	r4, [r7, #0]
 8004478:	887a      	ldrh	r2, [r7, #2]
 800447a:	88b9      	ldrh	r1, [r7, #4]
 800447c:	88f8      	ldrh	r0, [r7, #6]
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	4623      	mov	r3, r4
 800448a:	f7ff ff77 	bl	800437c <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 800448e:	8bbc      	ldrh	r4, [r7, #28]
 8004490:	8b3a      	ldrh	r2, [r7, #24]
 8004492:	8839      	ldrh	r1, [r7, #0]
 8004494:	8878      	ldrh	r0, [r7, #2]
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	4623      	mov	r3, r4
 80044a2:	f7ff ff6b 	bl	800437c <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 80044a6:	88bc      	ldrh	r4, [r7, #4]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	8bb9      	ldrh	r1, [r7, #28]
 80044ac:	8b38      	ldrh	r0, [r7, #24]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	4623      	mov	r3, r4
 80044ba:	f7ff ff5f 	bl	800437c <LCD_Line>
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd90      	pop	{r4, r7, pc}

080044c6 <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 80044c6:	b590      	push	{r4, r7, lr}
 80044c8:	b08d      	sub	sp, #52	; 0x34
 80044ca:	af02      	add	r7, sp, #8
 80044cc:	4604      	mov	r4, r0
 80044ce:	4608      	mov	r0, r1
 80044d0:	4611      	mov	r1, r2
 80044d2:	461a      	mov	r2, r3
 80044d4:	4623      	mov	r3, r4
 80044d6:	80fb      	strh	r3, [r7, #6]
 80044d8:	4603      	mov	r3, r0
 80044da:	80bb      	strh	r3, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
 80044e0:	4613      	mov	r3, r2
 80044e2:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80044e4:	2300      	movs	r3, #0
 80044e6:	823b      	strh	r3, [r7, #16]
 80044e8:	2300      	movs	r3, #0
 80044ea:	81fb      	strh	r3, [r7, #14]
 80044ec:	2300      	movs	r3, #0
 80044ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044f0:	2300      	movs	r3, #0
 80044f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044f4:	2300      	movs	r3, #0
 80044f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80044f8:	2300      	movs	r3, #0
 80044fa:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80044fc:	2300      	movs	r3, #0
 80044fe:	83fb      	strh	r3, [r7, #30]
 8004500:	2300      	movs	r3, #0
 8004502:	83bb      	strh	r3, [r7, #28]
 8004504:	2300      	movs	r3, #0
 8004506:	837b      	strh	r3, [r7, #26]
 8004508:	2300      	movs	r3, #0
 800450a:	833b      	strh	r3, [r7, #24]
 800450c:	2300      	movs	r3, #0
 800450e:	82fb      	strh	r3, [r7, #22]
 8004510:	2300      	movs	r3, #0
 8004512:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8004518:	887a      	ldrh	r2, [r7, #2]
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bfb8      	it	lt
 8004522:	425b      	neglt	r3, r3
 8004524:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8004526:	883a      	ldrh	r2, [r7, #0]
 8004528:	88bb      	ldrh	r3, [r7, #4]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	bfb8      	it	lt
 8004530:	425b      	neglt	r3, r3
 8004532:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8004538:	88bb      	ldrh	r3, [r7, #4]
 800453a:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 800453c:	887a      	ldrh	r2, [r7, #2]
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	429a      	cmp	r2, r3
 8004542:	d304      	bcc.n	800454e <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 8004544:	2301      	movs	r3, #1
 8004546:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8004548:	2301      	movs	r3, #1
 800454a:	843b      	strh	r3, [r7, #32]
 800454c:	e005      	b.n	800455a <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 800454e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004552:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8004554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004558:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 800455a:	883a      	ldrh	r2, [r7, #0]
 800455c:	88bb      	ldrh	r3, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d304      	bcc.n	800456c <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 8004562:	2301      	movs	r3, #1
 8004564:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	83bb      	strh	r3, [r7, #28]
 800456a:	e005      	b.n	8004578 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 800456c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004570:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8004572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004576:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8004578:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800457c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004580:	429a      	cmp	r2, r3
 8004582:	db10      	blt.n	80045a6 <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 800458c:	8a3b      	ldrh	r3, [r7, #16]
 800458e:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8004590:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004594:	0fda      	lsrs	r2, r3, #31
 8004596:	4413      	add	r3, r2
 8004598:	105b      	asrs	r3, r3, #1
 800459a:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80045a0:	8a3b      	ldrh	r3, [r7, #16]
 80045a2:	82bb      	strh	r3, [r7, #20]
 80045a4:	e00f      	b.n	80045c6 <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80045ae:	89fb      	ldrh	r3, [r7, #14]
 80045b0:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80045b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045b6:	0fda      	lsrs	r2, r3, #31
 80045b8:	4413      	add	r3, r2
 80045ba:	105b      	asrs	r3, r3, #1
 80045bc:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80045be:	8a3b      	ldrh	r3, [r7, #16]
 80045c0:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80045c2:	89fb      	ldrh	r3, [r7, #14]
 80045c4:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	827b      	strh	r3, [r7, #18]
 80045ca:	e034      	b.n	8004636 <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 80045cc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80045ce:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80045d0:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80045d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80045d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	2301      	movs	r3, #1
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4623      	mov	r3, r4
 80045de:	f7ff fecd 	bl	800437c <LCD_Line>

		num += numadd;
 80045e2:	8b3a      	ldrh	r2, [r7, #24]
 80045e4:	8afb      	ldrh	r3, [r7, #22]
 80045e6:	4413      	add	r3, r2
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 80045ec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	db0e      	blt.n	8004616 <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 80045f8:	8b3a      	ldrh	r2, [r7, #24]
 80045fa:	8b7b      	ldrh	r3, [r7, #26]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8004602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004606:	4413      	add	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 800460c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800460e:	8bfb      	ldrh	r3, [r7, #30]
 8004610:	4413      	add	r3, r2
 8004612:	b29b      	uxth	r3, r3
 8004614:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8004616:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004618:	8c3b      	ldrh	r3, [r7, #32]
 800461a:	4413      	add	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 8004620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004622:	8bbb      	ldrh	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	b29b      	uxth	r3, r3
 8004628:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800462a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800462e:	b29b      	uxth	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	827b      	strh	r3, [r7, #18]
 8004636:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800463a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800463e:	429a      	cmp	r2, r3
 8004640:	ddc4      	ble.n	80045cc <LCD_Triangle_Fill+0x106>
	}
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	372c      	adds	r7, #44	; 0x2c
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}

0800464c <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b085      	sub	sp, #20
 8004650:	af02      	add	r7, sp, #8
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	4611      	mov	r1, r2
 8004658:	461a      	mov	r2, r3
 800465a:	4623      	mov	r3, r4
 800465c:	80fb      	strh	r3, [r7, #6]
 800465e:	4603      	mov	r3, r0
 8004660:	80bb      	strh	r3, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	807b      	strh	r3, [r7, #2]
 8004666:	4613      	mov	r3, r2
 8004668:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	887b      	ldrh	r3, [r7, #2]
 800466e:	4413      	add	r3, r2
 8004670:	b29a      	uxth	r2, r3
 8004672:	88bc      	ldrh	r4, [r7, #4]
 8004674:	88b9      	ldrh	r1, [r7, #4]
 8004676:	88f8      	ldrh	r0, [r7, #6]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	7e3b      	ldrb	r3, [r7, #24]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	4623      	mov	r3, r4
 8004682:	f7ff fe7b 	bl	800437c <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004686:	88ba      	ldrh	r2, [r7, #4]
 8004688:	883b      	ldrh	r3, [r7, #0]
 800468a:	4413      	add	r3, r2
 800468c:	b299      	uxth	r1, r3
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	4413      	add	r3, r2
 8004694:	b29c      	uxth	r4, r3
 8004696:	88ba      	ldrh	r2, [r7, #4]
 8004698:	883b      	ldrh	r3, [r7, #0]
 800469a:	4413      	add	r3, r2
 800469c:	b29a      	uxth	r2, r3
 800469e:	88f8      	ldrh	r0, [r7, #6]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	7e3b      	ldrb	r3, [r7, #24]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	4622      	mov	r2, r4
 80046ac:	f7ff fe66 	bl	800437c <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 80046b0:	88ba      	ldrh	r2, [r7, #4]
 80046b2:	883b      	ldrh	r3, [r7, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	b29c      	uxth	r4, r3
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	88b9      	ldrh	r1, [r7, #4]
 80046bc:	88f8      	ldrh	r0, [r7, #6]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	7e3b      	ldrb	r3, [r7, #24]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4623      	mov	r3, r4
 80046c8:	f7ff fe58 	bl	800437c <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	4413      	add	r3, r2
 80046d2:	b298      	uxth	r0, r3
 80046d4:	88fa      	ldrh	r2, [r7, #6]
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	4413      	add	r3, r2
 80046da:	b29c      	uxth	r4, r3
 80046dc:	88ba      	ldrh	r2, [r7, #4]
 80046de:	883b      	ldrh	r3, [r7, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	88b9      	ldrh	r1, [r7, #4]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	7e3b      	ldrb	r3, [r7, #24]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	4622      	mov	r2, r4
 80046f2:	f7ff fe43 	bl	800437c <LCD_Line>
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}

080046fe <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 80046fe:	b590      	push	{r4, r7, lr}
 8004700:	b08b      	sub	sp, #44	; 0x2c
 8004702:	af02      	add	r7, sp, #8
 8004704:	4604      	mov	r4, r0
 8004706:	4608      	mov	r0, r1
 8004708:	4611      	mov	r1, r2
 800470a:	461a      	mov	r2, r3
 800470c:	4623      	mov	r3, r4
 800470e:	80fb      	strh	r3, [r7, #6]
 8004710:	4603      	mov	r3, r0
 8004712:	80bb      	strh	r3, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
 8004718:	4613      	mov	r3, r2
 800471a:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 800471c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004720:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 800472a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800472e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 8004744:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8101 	beq.w	8004950 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800474e:	2300      	movs	r3, #0
 8004750:	83fb      	strh	r3, [r7, #30]
 8004752:	883b      	ldrh	r3, [r7, #0]
 8004754:	83bb      	strh	r3, [r7, #28]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	005a      	lsls	r2, r3, #1
 800475a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	f1c3 0301 	rsb	r3, r3, #1
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	4413      	add	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e062      	b.n	8004836 <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	8bfb      	ldrh	r3, [r7, #30]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	b298      	uxth	r0, r3
 8004778:	88ba      	ldrh	r2, [r7, #4]
 800477a:	8bbb      	ldrh	r3, [r7, #28]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	b299      	uxth	r1, r3
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	8bfb      	ldrh	r3, [r7, #30]
 8004784:	4413      	add	r3, r2
 8004786:	b29a      	uxth	r2, r3
 8004788:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800478c:	b29b      	uxth	r3, r3
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	b29b      	uxth	r3, r3
 8004792:	3301      	adds	r3, #1
 8004794:	b29c      	uxth	r4, r3
 8004796:	88ba      	ldrh	r2, [r7, #4]
 8004798:	8bbb      	ldrh	r3, [r7, #28]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	b29a      	uxth	r2, r3
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	4622      	mov	r2, r4
 80047ac:	f7ff fde6 	bl	800437c <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	8bfb      	ldrh	r3, [r7, #30]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	b298      	uxth	r0, r3
 80047b8:	88ba      	ldrh	r2, [r7, #4]
 80047ba:	8bbb      	ldrh	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	b299      	uxth	r1, r3
 80047c0:	88fa      	ldrh	r2, [r7, #6]
 80047c2:	8bfb      	ldrh	r3, [r7, #30]
 80047c4:	4413      	add	r3, r2
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	b29c      	uxth	r4, r3
 80047d6:	88ba      	ldrh	r2, [r7, #4]
 80047d8:	8bbb      	ldrh	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	b29a      	uxth	r2, r3
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	4622      	mov	r2, r4
 80047ec:	f7ff fdc6 	bl	800437c <LCD_Line>
			if (s >= 0)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db0f      	blt.n	8004816 <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 80047f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047fa:	f1c3 0301 	rsb	r3, r3, #1
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4413      	add	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
				y--;
 800480a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 8004816:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	3306      	adds	r3, #6
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4413      	add	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800482a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800482e:	b29b      	uxth	r3, r3
 8004830:	3301      	adds	r3, #1
 8004832:	b29b      	uxth	r3, r3
 8004834:	83fb      	strh	r3, [r7, #30]
 8004836:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	fb03 f202 	mul.w	r2, r3, r2
 8004840:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004844:	6979      	ldr	r1, [r7, #20]
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	429a      	cmp	r2, r3
 800484c:	dd90      	ble.n	8004770 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 800484e:	887b      	ldrh	r3, [r7, #2]
 8004850:	83fb      	strh	r3, [r7, #30]
 8004852:	2300      	movs	r3, #0
 8004854:	83bb      	strh	r3, [r7, #28]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005a      	lsls	r2, r3, #1
 800485a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	f1c3 0301 	rsb	r3, r3, #1
 8004864:	6939      	ldr	r1, [r7, #16]
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e062      	b.n	8004936 <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004870:	88fa      	ldrh	r2, [r7, #6]
 8004872:	8bfb      	ldrh	r3, [r7, #30]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	b298      	uxth	r0, r3
 8004878:	88ba      	ldrh	r2, [r7, #4]
 800487a:	8bbb      	ldrh	r3, [r7, #28]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	b299      	uxth	r1, r3
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	8bfb      	ldrh	r3, [r7, #30]
 8004884:	4413      	add	r3, r2
 8004886:	b29a      	uxth	r2, r3
 8004888:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800488c:	b29b      	uxth	r3, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	b29b      	uxth	r3, r3
 8004892:	3301      	adds	r3, #1
 8004894:	b29c      	uxth	r4, r3
 8004896:	88ba      	ldrh	r2, [r7, #4]
 8004898:	8bbb      	ldrh	r3, [r7, #28]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	b29a      	uxth	r2, r3
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	4622      	mov	r2, r4
 80048ac:	f7ff fd66 	bl	800437c <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	8bfb      	ldrh	r3, [r7, #30]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	b298      	uxth	r0, r3
 80048b8:	88ba      	ldrh	r2, [r7, #4]
 80048ba:	8bbb      	ldrh	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	b299      	uxth	r1, r3
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	8bfb      	ldrh	r3, [r7, #30]
 80048c4:	4413      	add	r3, r2
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3301      	adds	r3, #1
 80048d4:	b29c      	uxth	r4, r3
 80048d6:	88ba      	ldrh	r2, [r7, #4]
 80048d8:	8bbb      	ldrh	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	4622      	mov	r2, r4
 80048ec:	f7ff fd46 	bl	800437c <LCD_Line>
			if (s >= 0)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	db0f      	blt.n	8004916 <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 80048f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80048fa:	f1c3 0301 	rsb	r3, r3, #1
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4413      	add	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
				x--;
 800490a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 8004916:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3306      	adds	r3, #6
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	fb02 f303 	mul.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4413      	add	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 800492a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800492e:	b29b      	uxth	r3, r3
 8004930:	3301      	adds	r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	83bb      	strh	r3, [r7, #28]
 8004936:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	fb03 f202 	mul.w	r2, r3, r2
 8004940:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004944:	6939      	ldr	r1, [r7, #16]
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	429a      	cmp	r2, r3
 800494c:	dd90      	ble.n	8004870 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 800494e:	e117      	b.n	8004b80 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004950:	2300      	movs	r3, #0
 8004952:	83fb      	strh	r3, [r7, #30]
 8004954:	883b      	ldrh	r3, [r7, #0]
 8004956:	83bb      	strh	r3, [r7, #28]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	005a      	lsls	r2, r3, #1
 800495c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	f1c3 0301 	rsb	r3, r3, #1
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	e06e      	b.n	8004a50 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	8bfb      	ldrh	r3, [r7, #30]
 8004976:	4413      	add	r3, r2
 8004978:	b298      	uxth	r0, r3
 800497a:	88ba      	ldrh	r2, [r7, #4]
 800497c:	8bbb      	ldrh	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	b299      	uxth	r1, r3
 8004982:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004986:	b29a      	uxth	r2, r3
 8004988:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800498c:	b29c      	uxth	r4, r3
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4623      	mov	r3, r4
 8004994:	f7ff fcb4 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	8bfb      	ldrh	r3, [r7, #30]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	b298      	uxth	r0, r3
 80049a0:	88ba      	ldrh	r2, [r7, #4]
 80049a2:	8bbb      	ldrh	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	b299      	uxth	r1, r3
 80049a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049b2:	b29c      	uxth	r4, r3
 80049b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	4623      	mov	r3, r4
 80049ba:	f7ff fca1 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80049be:	88fa      	ldrh	r2, [r7, #6]
 80049c0:	8bfb      	ldrh	r3, [r7, #30]
 80049c2:	4413      	add	r3, r2
 80049c4:	b298      	uxth	r0, r3
 80049c6:	88ba      	ldrh	r2, [r7, #4]
 80049c8:	8bbb      	ldrh	r3, [r7, #28]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	b299      	uxth	r1, r3
 80049ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049d8:	b29c      	uxth	r4, r3
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4623      	mov	r3, r4
 80049e0:	f7ff fc8e 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	8bfb      	ldrh	r3, [r7, #30]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	b298      	uxth	r0, r3
 80049ec:	88ba      	ldrh	r2, [r7, #4]
 80049ee:	8bbb      	ldrh	r3, [r7, #28]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	b299      	uxth	r1, r3
 80049f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049fe:	b29c      	uxth	r4, r3
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4623      	mov	r3, r4
 8004a06:	f7ff fc7b 	bl	8004300 <LCD_Rect_Fill>
			if (s >= 0)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db0f      	blt.n	8004a30 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 8004a10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a14:	f1c3 0301 	rsb	r3, r3, #1
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4413      	add	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
				y--;
 8004a24:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 8004a30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	3306      	adds	r3, #6
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4413      	add	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004a44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	83fb      	strh	r3, [r7, #30]
 8004a50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	fb03 f202 	mul.w	r2, r3, r2
 8004a5a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a5e:	6979      	ldr	r1, [r7, #20]
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	429a      	cmp	r2, r3
 8004a66:	dd84      	ble.n	8004972 <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	83fb      	strh	r3, [r7, #30]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	83bb      	strh	r3, [r7, #28]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	005a      	lsls	r2, r3, #1
 8004a74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	f1c3 0301 	rsb	r3, r3, #1
 8004a7e:	6939      	ldr	r1, [r7, #16]
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e06e      	b.n	8004b68 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	8bfb      	ldrh	r3, [r7, #30]
 8004a8e:	4413      	add	r3, r2
 8004a90:	b298      	uxth	r0, r3
 8004a92:	88ba      	ldrh	r2, [r7, #4]
 8004a94:	8bbb      	ldrh	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	b299      	uxth	r1, r3
 8004a9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aa4:	b29c      	uxth	r4, r3
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4623      	mov	r3, r4
 8004aac:	f7ff fc28 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	8bfb      	ldrh	r3, [r7, #30]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	b298      	uxth	r0, r3
 8004ab8:	88ba      	ldrh	r2, [r7, #4]
 8004aba:	8bbb      	ldrh	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	b299      	uxth	r1, r3
 8004ac0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aca:	b29c      	uxth	r4, r3
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	f7ff fc15 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	8bfb      	ldrh	r3, [r7, #30]
 8004ada:	4413      	add	r3, r2
 8004adc:	b298      	uxth	r0, r3
 8004ade:	88ba      	ldrh	r2, [r7, #4]
 8004ae0:	8bbb      	ldrh	r3, [r7, #28]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	b299      	uxth	r1, r3
 8004ae6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004af0:	b29c      	uxth	r4, r3
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4623      	mov	r3, r4
 8004af8:	f7ff fc02 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	8bfb      	ldrh	r3, [r7, #30]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	b298      	uxth	r0, r3
 8004b04:	88ba      	ldrh	r2, [r7, #4]
 8004b06:	8bbb      	ldrh	r3, [r7, #28]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	b299      	uxth	r1, r3
 8004b0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b16:	b29c      	uxth	r4, r3
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4623      	mov	r3, r4
 8004b1e:	f7ff fbef 	bl	8004300 <LCD_Rect_Fill>
			if (s >= 0)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	db0f      	blt.n	8004b48 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 8004b28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b2c:	f1c3 0301 	rsb	r3, r3, #1
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4413      	add	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
				x--;
 8004b3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8004b48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	3306      	adds	r3, #6
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4413      	add	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004b5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	83bb      	strh	r3, [r7, #28]
 8004b68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	fb03 f202 	mul.w	r2, r3, r2
 8004b72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	dd84      	ble.n	8004a8a <LCD_Ellipse+0x38c>
}
 8004b80:	bf00      	nop
 8004b82:	3724      	adds	r7, #36	; 0x24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd90      	pop	{r4, r7, pc}

08004b88 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	4623      	mov	r3, r4
 8004b98:	80fb      	strh	r3, [r7, #6]
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	80bb      	strh	r3, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	70fb      	strb	r3, [r7, #3]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	f1c3 0301 	rsb	r3, r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004bb6:	e0fc      	b.n	8004db2 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004bb8:	78bb      	ldrb	r3, [r7, #2]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d136      	bne.n	8004c2c <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	b298      	uxth	r0, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	88ba      	ldrh	r2, [r7, #4]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	b299      	uxth	r1, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	b29c      	uxth	r4, r3
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4623      	mov	r3, r4
 8004bf0:	f7ff fb86 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	b298      	uxth	r0, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	88ba      	ldrh	r2, [r7, #4]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	b299      	uxth	r1, r3
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	b29c      	uxth	r4, r3
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4623      	mov	r3, r4
 8004c26:	f7ff fb6b 	bl	8004300 <LCD_Rect_Fill>
 8004c2a:	e0a7      	b.n	8004d7c <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	4413      	add	r3, r2
 8004c34:	b298      	uxth	r0, r3
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	88bb      	ldrh	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	b299      	uxth	r1, r3
 8004c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c4a:	b29c      	uxth	r4, r3
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4623      	mov	r3, r4
 8004c52:	f7ff fb55 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b298      	uxth	r0, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	88bb      	ldrh	r3, [r7, #4]
 8004c66:	4413      	add	r3, r2
 8004c68:	b299      	uxth	r1, r3
 8004c6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c74:	b29c      	uxth	r4, r3
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	4623      	mov	r3, r4
 8004c7c:	f7ff fb40 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	b298      	uxth	r0, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	88bb      	ldrh	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	b299      	uxth	r1, r3
 8004c94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c9e:	b29c      	uxth	r4, r3
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	f7ff fb2b 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	b298      	uxth	r0, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	88bb      	ldrh	r3, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	b299      	uxth	r1, r3
 8004cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cc8:	b29c      	uxth	r4, r3
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	4623      	mov	r3, r4
 8004cd0:	f7ff fb16 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	4413      	add	r3, r2
 8004cdc:	b298      	uxth	r0, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	88ba      	ldrh	r2, [r7, #4]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	b299      	uxth	r1, r3
 8004ce8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cf2:	b29c      	uxth	r4, r3
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	f7ff fb01 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	4413      	add	r3, r2
 8004d06:	b298      	uxth	r0, r3
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	88ba      	ldrh	r2, [r7, #4]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	b299      	uxth	r1, r3
 8004d12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d1c:	b29c      	uxth	r4, r3
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	4623      	mov	r3, r4
 8004d24:	f7ff faec 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	b298      	uxth	r0, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	88ba      	ldrh	r2, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	b299      	uxth	r1, r3
 8004d3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d46:	b29c      	uxth	r4, r3
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4623      	mov	r3, r4
 8004d4e:	f7ff fad7 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b298      	uxth	r0, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	88ba      	ldrh	r2, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	b299      	uxth	r1, r3
 8004d66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d70:	b29c      	uxth	r4, r3
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4623      	mov	r3, r4
 8004d78:	f7ff fac2 	bl	8004300 <LCD_Rect_Fill>
		}
		if (P < 0)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	da09      	bge.n	8004d96 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1cda      	adds	r2, r3, #3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
			a_++;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3301      	adds	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e00d      	b.n	8004db2 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1d5a      	adds	r2, r3, #5
 8004d9a:	6979      	ldr	r1, [r7, #20]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1acb      	subs	r3, r1, r3
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
			a_++;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	3301      	adds	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
			b_--;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	f77f aefe 	ble.w	8004bb8 <LCD_Circle+0x30>
		}
	}
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd90      	pop	{r4, r7, pc}

08004dc6 <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004dc6:	b590      	push	{r4, r7, lr}
 8004dc8:	b089      	sub	sp, #36	; 0x24
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	4604      	mov	r4, r0
 8004dce:	4608      	mov	r0, r1
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	80fb      	strh	r3, [r7, #6]
 8004dd8:	4603      	mov	r3, r0
 8004dda:	80bb      	strh	r3, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
 8004de0:	4613      	mov	r3, r2
 8004de2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	f1c3 0301 	rsb	r3, r3, #1
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004dee:	2301      	movs	r3, #1
 8004df0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	461a      	mov	r2, r3
 8004df6:	03d2      	lsls	r2, r2, #15
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004e08:	e0cd      	b.n	8004fa6 <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004e0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	db0e      	blt.n	8004e30 <LCD_Circle_Helper+0x6a>
			y--;
 8004e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004e1e:	8a7b      	ldrh	r3, [r7, #18]
 8004e20:	3302      	adds	r3, #2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004e26:	8afa      	ldrh	r2, [r7, #22]
 8004e28:	8a7b      	ldrh	r3, [r7, #18]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004e30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3301      	adds	r3, #1
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004e3c:	8abb      	ldrh	r3, [r7, #20]
 8004e3e:	3302      	adds	r3, #2
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004e44:	8afa      	ldrh	r2, [r7, #22]
 8004e46:	8abb      	ldrh	r3, [r7, #20]
 8004e48:	4413      	add	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004e4e:	787b      	ldrb	r3, [r7, #1]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d025      	beq.n	8004ea4 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	8a3b      	ldrh	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	b298      	uxth	r0, r3
 8004e60:	88ba      	ldrh	r2, [r7, #4]
 8004e62:	89fb      	ldrh	r3, [r7, #14]
 8004e64:	4413      	add	r3, r2
 8004e66:	b299      	uxth	r1, r3
 8004e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e72:	b29c      	uxth	r4, r3
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4623      	mov	r3, r4
 8004e7a:	f7ff fa41 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	89fb      	ldrh	r3, [r7, #14]
 8004e82:	4413      	add	r3, r2
 8004e84:	b298      	uxth	r0, r3
 8004e86:	88ba      	ldrh	r2, [r7, #4]
 8004e88:	8a3b      	ldrh	r3, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	b299      	uxth	r1, r3
 8004e8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e98:	b29c      	uxth	r4, r3
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	f7ff fa2e 	bl	8004300 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004ea4:	787b      	ldrb	r3, [r7, #1]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d025      	beq.n	8004efa <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	8a3b      	ldrh	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	b298      	uxth	r0, r3
 8004eb6:	88ba      	ldrh	r2, [r7, #4]
 8004eb8:	89fb      	ldrh	r3, [r7, #14]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	b299      	uxth	r1, r3
 8004ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec8:	b29c      	uxth	r4, r3
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	4623      	mov	r3, r4
 8004ed0:	f7ff fa16 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	89fb      	ldrh	r3, [r7, #14]
 8004ed8:	4413      	add	r3, r2
 8004eda:	b298      	uxth	r0, r3
 8004edc:	88ba      	ldrh	r2, [r7, #4]
 8004ede:	8a3b      	ldrh	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	b299      	uxth	r1, r3
 8004ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eee:	b29c      	uxth	r4, r3
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	f7ff fa03 	bl	8004300 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004efa:	787b      	ldrb	r3, [r7, #1]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d025      	beq.n	8004f50 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	89fb      	ldrh	r3, [r7, #14]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	b298      	uxth	r0, r3
 8004f0c:	88ba      	ldrh	r2, [r7, #4]
 8004f0e:	8a3b      	ldrh	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	b299      	uxth	r1, r3
 8004f14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f1e:	b29c      	uxth	r4, r3
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	4623      	mov	r3, r4
 8004f26:	f7ff f9eb 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	8a3b      	ldrh	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	b298      	uxth	r0, r3
 8004f32:	88ba      	ldrh	r2, [r7, #4]
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	4413      	add	r3, r2
 8004f38:	b299      	uxth	r1, r3
 8004f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f44:	b29c      	uxth	r4, r3
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	f7ff f9d8 	bl	8004300 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004f50:	787b      	ldrb	r3, [r7, #1]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d025      	beq.n	8004fa6 <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	89fb      	ldrh	r3, [r7, #14]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b298      	uxth	r0, r3
 8004f62:	88ba      	ldrh	r2, [r7, #4]
 8004f64:	8a3b      	ldrh	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	b299      	uxth	r1, r3
 8004f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f74:	b29c      	uxth	r4, r3
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	f7ff f9c0 	bl	8004300 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	8a3b      	ldrh	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	b298      	uxth	r0, r3
 8004f88:	88ba      	ldrh	r2, [r7, #4]
 8004f8a:	89fb      	ldrh	r3, [r7, #14]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	b299      	uxth	r1, r3
 8004f90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f9a:	b29c      	uxth	r4, r3
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	f7ff f9ad 	bl	8004300 <LCD_Rect_Fill>
	while (x < y) {
 8004fa6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	f6ff af2b 	blt.w	8004e0a <LCD_Circle_Helper+0x44>
		}
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}

08004fbe <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004fbe:	b590      	push	{r4, r7, lr}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af02      	add	r7, sp, #8
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4623      	mov	r3, r4
 8004fce:	80fb      	strh	r3, [r7, #6]
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	80bb      	strh	r3, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004fdc:	8b3a      	ldrh	r2, [r7, #24]
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	b298      	uxth	r0, r3
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	4413      	add	r3, r2
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	7f3b      	ldrb	r3, [r7, #28]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	8b3b      	ldrh	r3, [r7, #24]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b02      	subs	r3, #2
 8005000:	b29a      	uxth	r2, r3
 8005002:	88bc      	ldrh	r4, [r7, #4]
 8005004:	88b9      	ldrh	r1, [r7, #4]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	7f3b      	ldrb	r3, [r7, #28]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	4623      	mov	r3, r4
 8005010:	f7ff f9b4 	bl	800437c <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8005014:	8b3a      	ldrh	r2, [r7, #24]
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	4413      	add	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	3302      	adds	r3, #2
 800501e:	b298      	uxth	r0, r3
 8005020:	88ba      	ldrh	r2, [r7, #4]
 8005022:	883b      	ldrh	r3, [r7, #0]
 8005024:	4413      	add	r3, r2
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b299      	uxth	r1, r3
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	4413      	add	r3, r2
 8005032:	b29a      	uxth	r2, r3
 8005034:	7f3b      	ldrb	r3, [r7, #28]
 8005036:	b29b      	uxth	r3, r3
 8005038:	4413      	add	r3, r2
 800503a:	b29a      	uxth	r2, r3
 800503c:	8b3b      	ldrh	r3, [r7, #24]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b02      	subs	r3, #2
 8005044:	b29c      	uxth	r4, r3
 8005046:	88ba      	ldrh	r2, [r7, #4]
 8005048:	883b      	ldrh	r3, [r7, #0]
 800504a:	4413      	add	r3, r2
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	7f3b      	ldrb	r3, [r7, #28]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	4613      	mov	r3, r2
 800505c:	4622      	mov	r2, r4
 800505e:	f7ff f98d 	bl	800437c <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8005062:	8b3a      	ldrh	r2, [r7, #24]
 8005064:	88bb      	ldrh	r3, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	b29b      	uxth	r3, r3
 800506a:	3302      	adds	r3, #2
 800506c:	b299      	uxth	r1, r3
 800506e:	88ba      	ldrh	r2, [r7, #4]
 8005070:	883b      	ldrh	r3, [r7, #0]
 8005072:	4413      	add	r3, r2
 8005074:	b29a      	uxth	r2, r3
 8005076:	7f3b      	ldrb	r3, [r7, #28]
 8005078:	b29b      	uxth	r3, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b29a      	uxth	r2, r3
 800507e:	8b3b      	ldrh	r3, [r7, #24]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b02      	subs	r3, #2
 8005086:	b29c      	uxth	r4, r3
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	88f8      	ldrh	r0, [r7, #6]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	7f3b      	ldrb	r3, [r7, #28]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	4623      	mov	r3, r4
 8005096:	f7ff f971 	bl	800437c <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	887b      	ldrh	r3, [r7, #2]
 800509e:	4413      	add	r3, r2
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b298      	uxth	r0, r3
 80050a6:	8b3a      	ldrh	r2, [r7, #24]
 80050a8:	88bb      	ldrh	r3, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3302      	adds	r3, #2
 80050b0:	b299      	uxth	r1, r3
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	4413      	add	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29c      	uxth	r4, r3
 80050be:	88ba      	ldrh	r2, [r7, #4]
 80050c0:	883b      	ldrh	r3, [r7, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	7f3b      	ldrb	r3, [r7, #28]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	8b3b      	ldrh	r3, [r7, #24]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b02      	subs	r3, #2
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	7f3b      	ldrb	r3, [r7, #28]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	4622      	mov	r2, r4
 80050e4:	f7ff f94a 	bl	800437c <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 80050e8:	8b3a      	ldrh	r2, [r7, #24]
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	4413      	add	r3, r2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3302      	adds	r3, #2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	b218      	sxth	r0, r3
 80050f6:	8b3a      	ldrh	r2, [r7, #24]
 80050f8:	88bb      	ldrh	r3, [r7, #4]
 80050fa:	4413      	add	r3, r2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3302      	adds	r3, #2
 8005100:	b29b      	uxth	r3, r3
 8005102:	b219      	sxth	r1, r3
 8005104:	8b3b      	ldrh	r3, [r7, #24]
 8005106:	3302      	adds	r3, #2
 8005108:	b29b      	uxth	r3, r3
 800510a:	b21a      	sxth	r2, r3
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	7f3b      	ldrb	r3, [r7, #28]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2301      	movs	r3, #1
 8005116:	f7ff fe56 	bl	8004dc6 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	887b      	ldrh	r3, [r7, #2]
 800511e:	4413      	add	r3, r2
 8005120:	b29a      	uxth	r2, r3
 8005122:	8b3b      	ldrh	r3, [r7, #24]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b03      	subs	r3, #3
 800512a:	b29b      	uxth	r3, r3
 800512c:	b218      	sxth	r0, r3
 800512e:	8b3a      	ldrh	r2, [r7, #24]
 8005130:	88bb      	ldrh	r3, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	3302      	adds	r3, #2
 8005138:	b29b      	uxth	r3, r3
 800513a:	b219      	sxth	r1, r3
 800513c:	8b3b      	ldrh	r3, [r7, #24]
 800513e:	3302      	adds	r3, #2
 8005140:	b29b      	uxth	r3, r3
 8005142:	b21a      	sxth	r2, r3
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	7f3b      	ldrb	r3, [r7, #28]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2302      	movs	r3, #2
 800514e:	f7ff fe3a 	bl	8004dc6 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	887b      	ldrh	r3, [r7, #2]
 8005156:	4413      	add	r3, r2
 8005158:	b29a      	uxth	r2, r3
 800515a:	8b3b      	ldrh	r3, [r7, #24]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b03      	subs	r3, #3
 8005162:	b29b      	uxth	r3, r3
 8005164:	b218      	sxth	r0, r3
 8005166:	88ba      	ldrh	r2, [r7, #4]
 8005168:	883b      	ldrh	r3, [r7, #0]
 800516a:	4413      	add	r3, r2
 800516c:	b29a      	uxth	r2, r3
 800516e:	8b3b      	ldrh	r3, [r7, #24]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b03      	subs	r3, #3
 8005176:	b29b      	uxth	r3, r3
 8005178:	b219      	sxth	r1, r3
 800517a:	8b3b      	ldrh	r3, [r7, #24]
 800517c:	3302      	adds	r3, #2
 800517e:	b29b      	uxth	r3, r3
 8005180:	b21a      	sxth	r2, r3
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	7f3b      	ldrb	r3, [r7, #28]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	2304      	movs	r3, #4
 800518c:	f7ff fe1b 	bl	8004dc6 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8005190:	8b3a      	ldrh	r2, [r7, #24]
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	4413      	add	r3, r2
 8005196:	b29b      	uxth	r3, r3
 8005198:	3302      	adds	r3, #2
 800519a:	b29b      	uxth	r3, r3
 800519c:	b218      	sxth	r0, r3
 800519e:	88ba      	ldrh	r2, [r7, #4]
 80051a0:	883b      	ldrh	r3, [r7, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	8b3b      	ldrh	r3, [r7, #24]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b03      	subs	r3, #3
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	b219      	sxth	r1, r3
 80051b2:	8b3b      	ldrh	r3, [r7, #24]
 80051b4:	3302      	adds	r3, #2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	b21a      	sxth	r2, r3
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	7f3b      	ldrb	r3, [r7, #28]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2308      	movs	r3, #8
 80051c4:	f7ff fdff 	bl	8004dc6 <LCD_Circle_Helper>
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}

080051d0 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b089      	sub	sp, #36	; 0x24
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	80fb      	strh	r3, [r7, #6]
 80051e2:	4603      	mov	r3, r0
 80051e4:	80bb      	strh	r3, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	807b      	strh	r3, [r7, #2]
 80051ea:	4613      	mov	r3, r2
 80051ec:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	f1c3 0301 	rsb	r3, r3, #1
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80051f8:	2301      	movs	r3, #1
 80051fa:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	461a      	mov	r2, r3
 8005200:	03d2      	lsls	r2, r2, #15
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	b29b      	uxth	r3, r3
 8005208:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800520e:	887b      	ldrh	r3, [r7, #2]
 8005210:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8005212:	e0ab      	b.n	800536c <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8005214:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005218:	2b00      	cmp	r3, #0
 800521a:	db0e      	blt.n	800523a <LCD_Circle_Fill_Helper+0x6a>
			y--;
 800521c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005228:	8a7b      	ldrh	r3, [r7, #18]
 800522a:	3302      	adds	r3, #2
 800522c:	b29b      	uxth	r3, r3
 800522e:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8005230:	8afa      	ldrh	r2, [r7, #22]
 8005232:	8a7b      	ldrh	r3, [r7, #18]
 8005234:	4413      	add	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800523a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800523e:	b29b      	uxth	r3, r3
 8005240:	3301      	adds	r3, #1
 8005242:	b29b      	uxth	r3, r3
 8005244:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005246:	8abb      	ldrh	r3, [r7, #20]
 8005248:	3302      	adds	r3, #2
 800524a:	b29b      	uxth	r3, r3
 800524c:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800524e:	8afa      	ldrh	r2, [r7, #22]
 8005250:	8abb      	ldrh	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8005258:	787b      	ldrb	r3, [r7, #1]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03f      	beq.n	80052e2 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	8a3b      	ldrh	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	b298      	uxth	r0, r3
 800526a:	88ba      	ldrh	r2, [r7, #4]
 800526c:	89fb      	ldrh	r3, [r7, #14]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	b299      	uxth	r1, r3
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	8a3b      	ldrh	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	b29c      	uxth	r4, r3
 800527a:	88ba      	ldrh	r2, [r7, #4]
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	b29a      	uxth	r2, r3
 8005282:	89fb      	ldrh	r3, [r7, #14]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	b29b      	uxth	r3, r3
 8005288:	4413      	add	r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800528e:	4413      	add	r3, r2
 8005290:	b29a      	uxth	r2, r3
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	2301      	movs	r3, #1
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	4622      	mov	r2, r4
 800529e:	f7ff f86d 	bl	800437c <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	89fb      	ldrh	r3, [r7, #14]
 80052a6:	4413      	add	r3, r2
 80052a8:	b298      	uxth	r0, r3
 80052aa:	88ba      	ldrh	r2, [r7, #4]
 80052ac:	8a3b      	ldrh	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b299      	uxth	r1, r3
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	4413      	add	r3, r2
 80052b8:	b29c      	uxth	r4, r3
 80052ba:	88ba      	ldrh	r2, [r7, #4]
 80052bc:	8a3b      	ldrh	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	8a3b      	ldrh	r3, [r7, #16]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	4413      	add	r3, r2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052ce:	4413      	add	r3, r2
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	2301      	movs	r3, #1
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	4613      	mov	r3, r2
 80052dc:	4622      	mov	r2, r4
 80052de:	f7ff f84d 	bl	800437c <LCD_Line>
		}
		if (cornername & 0x2) {
 80052e2:	787b      	ldrb	r3, [r7, #1]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d03f      	beq.n	800536c <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	8a3b      	ldrh	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b298      	uxth	r0, r3
 80052f4:	88ba      	ldrh	r2, [r7, #4]
 80052f6:	89fb      	ldrh	r3, [r7, #14]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	b299      	uxth	r1, r3
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	8a3b      	ldrh	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	b29c      	uxth	r4, r3
 8005304:	88ba      	ldrh	r2, [r7, #4]
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	b29a      	uxth	r2, r3
 800530c:	89fb      	ldrh	r3, [r7, #14]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	4413      	add	r3, r2
 8005314:	b29a      	uxth	r2, r3
 8005316:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005318:	4413      	add	r3, r2
 800531a:	b29a      	uxth	r2, r3
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	2301      	movs	r3, #1
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	4622      	mov	r2, r4
 8005328:	f7ff f828 	bl	800437c <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	89fb      	ldrh	r3, [r7, #14]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	b298      	uxth	r0, r3
 8005334:	88ba      	ldrh	r2, [r7, #4]
 8005336:	8a3b      	ldrh	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	b299      	uxth	r1, r3
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	b29c      	uxth	r4, r3
 8005344:	88ba      	ldrh	r2, [r7, #4]
 8005346:	8a3b      	ldrh	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	b29a      	uxth	r2, r3
 800534c:	8a3b      	ldrh	r3, [r7, #16]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	b29b      	uxth	r3, r3
 8005352:	4413      	add	r3, r2
 8005354:	b29a      	uxth	r2, r3
 8005356:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005358:	4413      	add	r3, r2
 800535a:	b29a      	uxth	r2, r3
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	2301      	movs	r3, #1
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	4622      	mov	r2, r4
 8005368:	f7ff f808 	bl	800437c <LCD_Line>
	while (x < y) {
 800536c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005370:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005374:	429a      	cmp	r2, r3
 8005376:	f6ff af4d 	blt.w	8005214 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	bd90      	pop	{r4, r7, pc}

08005384 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b085      	sub	sp, #20
 8005388:	af02      	add	r7, sp, #8
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	4611      	mov	r1, r2
 8005390:	461a      	mov	r2, r3
 8005392:	4623      	mov	r3, r4
 8005394:	80fb      	strh	r3, [r7, #6]
 8005396:	4603      	mov	r3, r0
 8005398:	80bb      	strh	r3, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	807b      	strh	r3, [r7, #2]
 800539e:	4613      	mov	r3, r2
 80053a0:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	8b3b      	ldrh	r3, [r7, #24]
 80053a6:	4413      	add	r3, r2
 80053a8:	b298      	uxth	r0, r3
 80053aa:	8b3b      	ldrh	r3, [r7, #24]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	887a      	ldrh	r2, [r7, #2]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	883c      	ldrh	r4, [r7, #0]
 80053b8:	88b9      	ldrh	r1, [r7, #4]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	4623      	mov	r3, r4
 80053c0:	f7fe ff9e 	bl	8004300 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 80053c4:	88fa      	ldrh	r2, [r7, #6]
 80053c6:	887b      	ldrh	r3, [r7, #2]
 80053c8:	4413      	add	r3, r2
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	8b3b      	ldrh	r3, [r7, #24]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	b218      	sxth	r0, r3
 80053d8:	88ba      	ldrh	r2, [r7, #4]
 80053da:	8b3b      	ldrh	r3, [r7, #24]
 80053dc:	4413      	add	r3, r2
 80053de:	b29b      	uxth	r3, r3
 80053e0:	b219      	sxth	r1, r3
 80053e2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80053e6:	8b3b      	ldrh	r3, [r7, #24]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	883a      	ldrh	r2, [r7, #0]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	9201      	str	r2, [sp, #4]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2301      	movs	r3, #1
 8005400:	4622      	mov	r2, r4
 8005402:	f7ff fee5 	bl	80051d0 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	8b3b      	ldrh	r3, [r7, #24]
 800540a:	4413      	add	r3, r2
 800540c:	b29b      	uxth	r3, r3
 800540e:	b218      	sxth	r0, r3
 8005410:	88ba      	ldrh	r2, [r7, #4]
 8005412:	8b3b      	ldrh	r3, [r7, #24]
 8005414:	4413      	add	r3, r2
 8005416:	b29b      	uxth	r3, r3
 8005418:	b219      	sxth	r1, r3
 800541a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800541e:	8b3b      	ldrh	r3, [r7, #24]
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	b29b      	uxth	r3, r3
 8005424:	883a      	ldrh	r2, [r7, #0]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29b      	uxth	r3, r3
 800542e:	b21b      	sxth	r3, r3
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	9201      	str	r2, [sp, #4]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2302      	movs	r3, #2
 8005438:	4622      	mov	r2, r4
 800543a:	f7ff fec9 	bl	80051d0 <LCD_Circle_Fill_Helper>
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bd90      	pop	{r4, r7, pc}

08005446 <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8005446:	b590      	push	{r4, r7, lr}
 8005448:	b08b      	sub	sp, #44	; 0x2c
 800544a:	af02      	add	r7, sp, #8
 800544c:	60ba      	str	r2, [r7, #8]
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	4603      	mov	r3, r0
 8005452:	81fb      	strh	r3, [r7, #14]
 8005454:	460b      	mov	r3, r1
 8005456:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	777b      	strb	r3, [r7, #29]
 8005468:	2300      	movs	r3, #0
 800546a:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005470:	2300      	movs	r3, #0
 8005472:	763b      	strb	r3, [r7, #24]
 8005474:	e093      	b.n	800559e <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005476:	2300      	movs	r3, #0
 8005478:	767b      	strb	r3, [r7, #25]
 800547a:	e052      	b.n	8005522 <LCD_Char+0xdc>
		{
			if(bit == 0)
 800547c:	7f3b      	ldrb	r3, [r7, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005482:	8bfb      	ldrh	r3, [r7, #30]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	83fa      	strh	r2, [r7, #30]
 8005488:	461a      	mov	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8005496:	7f7a      	ldrb	r2, [r7, #29]
 8005498:	7f3b      	ldrb	r3, [r7, #28]
 800549a:	4013      	ands	r3, r2
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <LCD_Char+0x64>
			{
				set_pixels++;
 80054a2:	8b7b      	ldrh	r3, [r7, #26]
 80054a4:	3301      	adds	r3, #1
 80054a6:	837b      	strh	r3, [r7, #26]
 80054a8:	e035      	b.n	8005516 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 80054aa:	8b7b      	ldrh	r3, [r7, #26]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d032      	beq.n	8005516 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80054b6:	461a      	mov	r2, r3
 80054b8:	7e7b      	ldrb	r3, [r7, #25]
 80054ba:	441a      	add	r2, r3
 80054bc:	8b7b      	ldrh	r3, [r7, #26]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	fb12 f303 	smulbb	r3, r2, r3
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	89fb      	ldrh	r3, [r7, #14]
 80054d0:	4413      	add	r3, r2
 80054d2:	b298      	uxth	r0, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80054da:	461a      	mov	r2, r3
 80054dc:	7e3b      	ldrb	r3, [r7, #24]
 80054de:	4413      	add	r3, r2
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	fb12 f303 	smulbb	r3, r2, r3
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	89bb      	ldrh	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	b299      	uxth	r1, r3
 80054f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	8b7a      	ldrh	r2, [r7, #26]
 80054fc:	fb12 f303 	smulbb	r3, r2, r3
 8005500:	b29a      	uxth	r2, r3
 8005502:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005506:	b29c      	uxth	r4, r3
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	4623      	mov	r3, r4
 800550e:	f7fe fef7 	bl	8004300 <LCD_Rect_Fill>
				set_pixels = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8005516:	7f3b      	ldrb	r3, [r7, #28]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800551c:	7e7b      	ldrb	r3, [r7, #25]
 800551e:	3301      	adds	r3, #1
 8005520:	767b      	strb	r3, [r7, #25]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	789b      	ldrb	r3, [r3, #2]
 8005526:	7e7a      	ldrb	r2, [r7, #25]
 8005528:	429a      	cmp	r2, r3
 800552a:	d3a7      	bcc.n	800547c <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 800552c:	8b7b      	ldrh	r3, [r7, #26]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d032      	beq.n	8005598 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005538:	461a      	mov	r2, r3
 800553a:	7e7b      	ldrb	r3, [r7, #25]
 800553c:	441a      	add	r2, r3
 800553e:	8b7b      	ldrh	r3, [r7, #26]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	b29a      	uxth	r2, r3
 8005544:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005548:	b29b      	uxth	r3, r3
 800554a:	fb12 f303 	smulbb	r3, r2, r3
 800554e:	b29a      	uxth	r2, r3
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	4413      	add	r3, r2
 8005554:	b298      	uxth	r0, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800555c:	461a      	mov	r2, r3
 800555e:	7e3b      	ldrb	r3, [r7, #24]
 8005560:	4413      	add	r3, r2
 8005562:	b29a      	uxth	r2, r3
 8005564:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005568:	b29b      	uxth	r3, r3
 800556a:	fb12 f303 	smulbb	r3, r2, r3
 800556e:	b29a      	uxth	r2, r3
 8005570:	89bb      	ldrh	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	b299      	uxth	r1, r3
 8005576:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800557a:	b29b      	uxth	r3, r3
 800557c:	8b7a      	ldrh	r2, [r7, #26]
 800557e:	fb12 f303 	smulbb	r3, r2, r3
 8005582:	b29a      	uxth	r2, r3
 8005584:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005588:	b29c      	uxth	r4, r3
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4623      	mov	r3, r4
 8005590:	f7fe feb6 	bl	8004300 <LCD_Rect_Fill>
			set_pixels = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005598:	7e3b      	ldrb	r3, [r7, #24]
 800559a:	3301      	adds	r3, #1
 800559c:	763b      	strb	r3, [r7, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	78db      	ldrb	r3, [r3, #3]
 80055a2:	7e3a      	ldrb	r2, [r7, #24]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	f4ff af66 	bcc.w	8005476 <LCD_Char+0x30>
		}
	}
}
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
 80055ae:	3724      	adds	r7, #36	; 0x24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd90      	pop	{r4, r7, pc}

080055b4 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b08f      	sub	sp, #60	; 0x3c
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60ba      	str	r2, [r7, #8]
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	4603      	mov	r3, r0
 80055c0:	81fb      	strh	r3, [r7, #14]
 80055c2:	460b      	mov	r3, r1
 80055c4:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80055c6:	89fb      	ldrh	r3, [r7, #14]
 80055c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80055ca:	89bb      	ldrh	r3, [r7, #12]
 80055cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80055ce:	f107 031c 	add.w	r3, r7, #28
 80055d2:	220c      	movs	r2, #12
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f017 f8f6 	bl	801c7c8 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055dc:	2300      	movs	r3, #0
 80055de:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055e0:	e056      	b.n	8005690 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80055e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80055ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80055f2:	2b0a      	cmp	r3, #10
 80055f4:	d10f      	bne.n	8005616 <LCD_Font+0x62>
		{
			cursor_x = x;
 80055f6:	89fb      	ldrh	r3, [r7, #14]
 80055f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80055fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005604:	b29b      	uxth	r3, r3
 8005606:	fb12 f303 	smulbb	r3, r2, r3
 800560a:	b29a      	uxth	r2, r3
 800560c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800560e:	4413      	add	r3, r2
 8005610:	b29b      	uxth	r3, r3
 8005612:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005614:	e039      	b.n	800568a <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8005616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800561a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800561e:	429a      	cmp	r2, r3
 8005620:	d333      	bcc.n	800568a <LCD_Font+0xd6>
 8005622:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005626:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800562a:	429a      	cmp	r2, r3
 800562c:	d82d      	bhi.n	800568a <LCD_Font+0xd6>
 800562e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005632:	2b0d      	cmp	r3, #13
 8005634:	d029      	beq.n	800568a <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800563c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005640:	1a5b      	subs	r3, r3, r1
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	18d1      	adds	r1, r2, r3
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	2208      	movs	r2, #8
 800564c:	4618      	mov	r0, r3
 800564e:	f017 f8bb 	bl	801c7c8 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8005652:	f107 041c 	add.w	r4, r7, #28
 8005656:	f107 0214 	add.w	r2, r7, #20
 800565a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800565e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	4623      	mov	r3, r4
 800566e:	f7ff feea 	bl	8005446 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8005672:	7e3b      	ldrb	r3, [r7, #24]
 8005674:	b29a      	uxth	r2, r3
 8005676:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800567a:	b29b      	uxth	r3, r3
 800567c:	fb12 f303 	smulbb	r3, r2, r3
 8005680:	b29a      	uxth	r2, r3
 8005682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005684:	4413      	add	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800568a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800568c:	3301      	adds	r3, #1
 800568e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005690:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005692:	68b8      	ldr	r0, [r7, #8]
 8005694:	f013 f9c2 	bl	8018a1c <strlen>
 8005698:	4603      	mov	r3, r0
 800569a:	429c      	cmp	r4, r3
 800569c:	d3a1      	bcc.n	80055e2 <LCD_Font+0x2e>
		}
	}
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	3734      	adds	r7, #52	; 0x34
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd90      	pop	{r4, r7, pc}

080056a8 <LCD_Init>:

void LCD_Init(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 80056ac:	2096      	movs	r0, #150	; 0x96
 80056ae:	f001 f929 	bl	8006904 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 80056b2:	2001      	movs	r0, #1
 80056b4:	f7fe fd95 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 80056b8:	2029      	movs	r0, #41	; 0x29
 80056ba:	f7fe fd92 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 80056be:	20e2      	movs	r0, #226	; 0xe2
 80056c0:	f7fe fd8f 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 80056c4:	201d      	movs	r0, #29
 80056c6:	f7fe fd9b 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 80056ca:	2002      	movs	r0, #2
 80056cc:	f7fe fd98 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 80056d0:	20ff      	movs	r0, #255	; 0xff
 80056d2:	f7fe fd95 	bl	8004200 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 80056d6:	20e0      	movs	r0, #224	; 0xe0
 80056d8:	f7fe fd83 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80056dc:	2001      	movs	r0, #1
 80056de:	f7fe fd8f 	bl	8004200 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 80056e2:	2078      	movs	r0, #120	; 0x78
 80056e4:	f001 f90e 	bl	8006904 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 80056e8:	20e0      	movs	r0, #224	; 0xe0
 80056ea:	f7fe fd7a 	bl	80041e2 <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 80056ee:	2003      	movs	r0, #3
 80056f0:	f7fe fd86 	bl	8004200 <LCD_Send_Dat>
	HAL_Delay(120);
 80056f4:	2078      	movs	r0, #120	; 0x78
 80056f6:	f001 f905 	bl	8006904 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80056fa:	2001      	movs	r0, #1
 80056fc:	f7fe fd71 	bl	80041e2 <LCD_Send_Cmd>
	HAL_Delay(120);
 8005700:	2078      	movs	r0, #120	; 0x78
 8005702:	f001 f8ff 	bl	8006904 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 8005706:	20e6      	movs	r0, #230	; 0xe6
 8005708:	f7fe fd6b 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 800570c:	2003      	movs	r0, #3
 800570e:	f7fe fd77 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 8005712:	2085      	movs	r0, #133	; 0x85
 8005714:	f7fe fd74 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8005718:	201d      	movs	r0, #29
 800571a:	f7fe fd71 	bl	8004200 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 800571e:	20b0      	movs	r0, #176	; 0xb0
 8005720:	f7fe fd5f 	bl	80041e2 <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 8005724:	20ae      	movs	r0, #174	; 0xae
 8005726:	f7fe fd6b 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 800572a:	2020      	movs	r0, #32
 800572c:	f7fe fd68 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 8005730:	2003      	movs	r0, #3
 8005732:	f7fe fd65 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 8005736:	201f      	movs	r0, #31
 8005738:	f7fe fd62 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 800573c:	2001      	movs	r0, #1
 800573e:	f7fe fd5f 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 8005742:	20df      	movs	r0, #223	; 0xdf
 8005744:	f7fe fd5c 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005748:	202d      	movs	r0, #45	; 0x2d
 800574a:	f7fe fd59 	bl	8004200 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 800574e:	20b4      	movs	r0, #180	; 0xb4
 8005750:	f7fe fd47 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8005754:	2003      	movs	r0, #3
 8005756:	f7fe fd53 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 800575a:	20a0      	movs	r0, #160	; 0xa0
 800575c:	f7fe fd50 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 8005760:	2000      	movs	r0, #0
 8005762:	f7fe fd4d 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8005766:	202e      	movs	r0, #46	; 0x2e
 8005768:	f7fe fd4a 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 800576c:	2030      	movs	r0, #48	; 0x30
 800576e:	f7fe fd47 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 8005772:	2000      	movs	r0, #0
 8005774:	f7fe fd44 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005778:	200f      	movs	r0, #15
 800577a:	f7fe fd41 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 800577e:	2000      	movs	r0, #0
 8005780:	f7fe fd3e 	bl	8004200 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8005784:	20b6      	movs	r0, #182	; 0xb6
 8005786:	f7fe fd2c 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 800578a:	2002      	movs	r0, #2
 800578c:	f7fe fd38 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8005790:	200d      	movs	r0, #13
 8005792:	f7fe fd35 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 8005796:	2000      	movs	r0, #0
 8005798:	f7fe fd32 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 800579c:	2010      	movs	r0, #16
 800579e:	f7fe fd2f 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 80057a2:	2010      	movs	r0, #16
 80057a4:	f7fe fd2c 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 80057a8:	2008      	movs	r0, #8
 80057aa:	f7fe fd29 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 80057ae:	2000      	movs	r0, #0
 80057b0:	f7fe fd26 	bl	8004200 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 80057b4:	20be      	movs	r0, #190	; 0xbe
 80057b6:	f7fe fd14 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80057ba:	2008      	movs	r0, #8
 80057bc:	f7fe fd20 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 80057c0:	20ff      	movs	r0, #255	; 0xff
 80057c2:	f7fe fd1d 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 80057c6:	2001      	movs	r0, #1
 80057c8:	f7fe fd1a 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 80057cc:	2036      	movs	r0, #54	; 0x36
 80057ce:	f7fe fd08 	bl	80041e2 <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 80057d2:	2003      	movs	r0, #3
 80057d4:	f7fe fd14 	bl	8004200 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80057d8:	20f0      	movs	r0, #240	; 0xf0
 80057da:	f7fe fd02 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80057de:	2003      	movs	r0, #3
 80057e0:	f7fe fd0e 	bl	8004200 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 80057e4:	2029      	movs	r0, #41	; 0x29
 80057e6:	f7fe fcfc 	bl	80041e2 <LCD_Send_Cmd>
}
 80057ea:	bf00      	nop
 80057ec:	bd80      	pop	{r7, pc}

080057ee <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4603      	mov	r3, r0
 80057f6:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 80057f8:	20be      	movs	r0, #190	; 0xbe
 80057fa:	f7fe fcf2 	bl	80041e2 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80057fe:	2008      	movs	r0, #8
 8005800:	f7fe fcfe 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	b29b      	uxth	r3, r3
 8005808:	4618      	mov	r0, r3
 800580a:	f7fe fcf9 	bl	8004200 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 800580e:	2001      	movs	r0, #1
 8005810:	f7fe fcf6 	bl	8004200 <LCD_Send_Dat>
}
 8005814:	bf00      	nop
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_MspInit+0x4c>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	4a0f      	ldr	r2, [pc, #60]	; (8005868 <HAL_MspInit+0x4c>)
 800582c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005830:	6453      	str	r3, [r2, #68]	; 0x44
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <HAL_MspInit+0x4c>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_MspInit+0x4c>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	4a08      	ldr	r2, [pc, #32]	; (8005868 <HAL_MspInit+0x4c>)
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584c:	6413      	str	r3, [r2, #64]	; 0x40
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <HAL_MspInit+0x4c>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800

0800586c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005874:	f107 0314 	add.w	r3, r7, #20
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <HAL_DAC_MspInit+0x7c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d127      	bne.n	80058de <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	4b16      	ldr	r3, [pc, #88]	; (80058ec <HAL_DAC_MspInit+0x80>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	4a15      	ldr	r2, [pc, #84]	; (80058ec <HAL_DAC_MspInit+0x80>)
 8005898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800589c:	6413      	str	r3, [r2, #64]	; 0x40
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <HAL_DAC_MspInit+0x80>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_DAC_MspInit+0x80>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	4a0e      	ldr	r2, [pc, #56]	; (80058ec <HAL_DAC_MspInit+0x80>)
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <HAL_DAC_MspInit+0x80>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80058c6:	2330      	movs	r3, #48	; 0x30
 80058c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058ca:	2303      	movs	r3, #3
 80058cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4619      	mov	r1, r3
 80058d8:	4805      	ldr	r0, [pc, #20]	; (80058f0 <HAL_DAC_MspInit+0x84>)
 80058da:	f005 f92f 	bl	800ab3c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80058de:	bf00      	nop
 80058e0:	3728      	adds	r7, #40	; 0x28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40007400 	.word	0x40007400
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40020000 	.word	0x40020000

080058f4 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <HAL_DAC_MspDeInit+0x30>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d109      	bne.n	800591a <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 8005906:	4b08      	ldr	r3, [pc, #32]	; (8005928 <HAL_DAC_MspDeInit+0x34>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	4a07      	ldr	r2, [pc, #28]	; (8005928 <HAL_DAC_MspDeInit+0x34>)
 800590c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005910:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8005912:	2130      	movs	r1, #48	; 0x30
 8005914:	4805      	ldr	r0, [pc, #20]	; (800592c <HAL_DAC_MspDeInit+0x38>)
 8005916:	f005 faad 	bl	800ae74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40007400 	.word	0x40007400
 8005928:	40023800 	.word	0x40023800
 800592c:	40020000 	.word	0x40020000

08005930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_I2C_MspInit+0xa4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d13b      	bne.n	80059ca <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_I2C_MspInit+0xa8>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <HAL_I2C_MspInit+0xa8>)
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	6313      	str	r3, [r2, #48]	; 0x30
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <HAL_I2C_MspInit+0xa8>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800596e:	23c0      	movs	r3, #192	; 0xc0
 8005970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005972:	2312      	movs	r3, #18
 8005974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005976:	2301      	movs	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800597a:	2303      	movs	r3, #3
 800597c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800597e:	2304      	movs	r3, #4
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005982:	f107 0314 	add.w	r3, r7, #20
 8005986:	4619      	mov	r1, r3
 8005988:	4814      	ldr	r0, [pc, #80]	; (80059dc <HAL_I2C_MspInit+0xac>)
 800598a:	f005 f8d7 	bl	800ab3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <HAL_I2C_MspInit+0xa8>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <HAL_I2C_MspInit+0xa8>)
 8005998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800599c:	6413      	str	r3, [r2, #64]	; 0x40
 800599e:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <HAL_I2C_MspInit+0xa8>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	201f      	movs	r0, #31
 80059b0:	f001 fa9f 	bl	8006ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80059b4:	201f      	movs	r0, #31
 80059b6:	f001 fab8 	bl	8006f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	2020      	movs	r0, #32
 80059c0:	f001 fa97 	bl	8006ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80059c4:	2020      	movs	r0, #32
 80059c6:	f001 fab0 	bl	8006f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059ca:	bf00      	nop
 80059cc:	3728      	adds	r7, #40	; 0x28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40005400 	.word	0x40005400
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40020400 	.word	0x40020400

080059e0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <HAL_I2C_MspDeInit+0x44>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d113      	bne.n	8005a1a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80059f2:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <HAL_I2C_MspDeInit+0x48>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <HAL_I2C_MspDeInit+0x48>)
 80059f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80059fe:	2140      	movs	r1, #64	; 0x40
 8005a00:	480a      	ldr	r0, [pc, #40]	; (8005a2c <HAL_I2C_MspDeInit+0x4c>)
 8005a02:	f005 fa37 	bl	800ae74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	4808      	ldr	r0, [pc, #32]	; (8005a2c <HAL_I2C_MspDeInit+0x4c>)
 8005a0a:	f005 fa33 	bl	800ae74 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005a0e:	201f      	movs	r0, #31
 8005a10:	f001 fa99 	bl	8006f46 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005a14:	2020      	movs	r0, #32
 8005a16:	f001 fa96 	bl	8006f46 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40005400 	.word	0x40005400
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40020400 	.word	0x40020400

08005a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	; 0x38
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a89      	ldr	r2, [pc, #548]	; (8005c74 <HAL_SPI_MspInit+0x244>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d12c      	bne.n	8005aac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	4b88      	ldr	r3, [pc, #544]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5a:	4a87      	ldr	r2, [pc, #540]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a60:	6453      	str	r3, [r2, #68]	; 0x44
 8005a62:	4b85      	ldr	r3, [pc, #532]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	4b81      	ldr	r3, [pc, #516]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	4a80      	ldr	r2, [pc, #512]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005a78:	f043 0302 	orr.w	r3, r3, #2
 8005a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7e:	4b7e      	ldr	r3, [pc, #504]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005a8a:	2338      	movs	r3, #56	; 0x38
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a96:	2303      	movs	r3, #3
 8005a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a9a:	2305      	movs	r3, #5
 8005a9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4875      	ldr	r0, [pc, #468]	; (8005c7c <HAL_SPI_MspInit+0x24c>)
 8005aa6:	f005 f849 	bl	800ab3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005aaa:	e0de      	b.n	8005c6a <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a73      	ldr	r2, [pc, #460]	; (8005c80 <HAL_SPI_MspInit+0x250>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	f040 8088 	bne.w	8005bc8 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	4b6e      	ldr	r3, [pc, #440]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	4a6d      	ldr	r2, [pc, #436]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ac8:	4b6b      	ldr	r3, [pc, #428]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	4a66      	ldr	r2, [pc, #408]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005ade:	f043 0302 	orr.w	r3, r3, #2
 8005ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae4:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005af0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af6:	2302      	movs	r3, #2
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005afe:	2303      	movs	r3, #3
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b02:	2305      	movs	r3, #5
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	485b      	ldr	r0, [pc, #364]	; (8005c7c <HAL_SPI_MspInit+0x24c>)
 8005b0e:	f005 f815 	bl	800ab3c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005b12:	4b5c      	ldr	r3, [pc, #368]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b14:	4a5c      	ldr	r2, [pc, #368]	; (8005c88 <HAL_SPI_MspInit+0x258>)
 8005b16:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005b18:	4b5a      	ldr	r3, [pc, #360]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b1e:	4b59      	ldr	r3, [pc, #356]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b20:	2240      	movs	r2, #64	; 0x40
 8005b22:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b24:	4b57      	ldr	r3, [pc, #348]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b2a:	4b56      	ldr	r3, [pc, #344]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b30:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b32:	4b54      	ldr	r3, [pc, #336]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b38:	4b52      	ldr	r3, [pc, #328]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005b3e:	4b51      	ldr	r3, [pc, #324]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b44:	4b4f      	ldr	r3, [pc, #316]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b4a:	4b4e      	ldr	r3, [pc, #312]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005b50:	484c      	ldr	r0, [pc, #304]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b52:	f001 ffad 	bl	8007ab0 <HAL_DMA_Init>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8005b5c:	f7fe fae8 	bl	8004130 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a48      	ldr	r2, [pc, #288]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b64:	649a      	str	r2, [r3, #72]	; 0x48
 8005b66:	4a47      	ldr	r2, [pc, #284]	; (8005c84 <HAL_SPI_MspInit+0x254>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005b6c:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b6e:	4a48      	ldr	r2, [pc, #288]	; (8005c90 <HAL_SPI_MspInit+0x260>)
 8005b70:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005b72:	4b46      	ldr	r3, [pc, #280]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b78:	4b44      	ldr	r3, [pc, #272]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b7e:	4b43      	ldr	r3, [pc, #268]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b84:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b8a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b92:	4b3e      	ldr	r3, [pc, #248]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005b98:	4b3c      	ldr	r3, [pc, #240]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b9e:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005baa:	4838      	ldr	r0, [pc, #224]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005bac:	f001 ff80 	bl	8007ab0 <HAL_DMA_Init>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8005bb6:	f7fe fabb 	bl	8004130 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a33      	ldr	r2, [pc, #204]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005bbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bc0:	4a32      	ldr	r2, [pc, #200]	; (8005c8c <HAL_SPI_MspInit+0x25c>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005bc6:	e050      	b.n	8005c6a <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a31      	ldr	r2, [pc, #196]	; (8005c94 <HAL_SPI_MspInit+0x264>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d14b      	bne.n	8005c6a <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be0:	6413      	str	r3, [r2, #64]	; 0x40
 8005be2:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005c14:	f043 0304 	orr.w	r3, r3, #4
 8005c18:	6313      	str	r3, [r2, #48]	; 0x30
 8005c1a:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <HAL_SPI_MspInit+0x248>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c34:	2303      	movs	r3, #3
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c38:	2306      	movs	r3, #6
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c40:	4619      	mov	r1, r3
 8005c42:	4815      	ldr	r0, [pc, #84]	; (8005c98 <HAL_SPI_MspInit+0x268>)
 8005c44:	f004 ff7a 	bl	800ab3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005c48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c56:	2303      	movs	r3, #3
 8005c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c5a:	2306      	movs	r3, #6
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c62:	4619      	mov	r1, r3
 8005c64:	480d      	ldr	r0, [pc, #52]	; (8005c9c <HAL_SPI_MspInit+0x26c>)
 8005c66:	f004 ff69 	bl	800ab3c <HAL_GPIO_Init>
}
 8005c6a:	bf00      	nop
 8005c6c:	3738      	adds	r7, #56	; 0x38
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40013000 	.word	0x40013000
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	40020400 	.word	0x40020400
 8005c80:	40003800 	.word	0x40003800
 8005c84:	20000418 	.word	0x20000418
 8005c88:	40026070 	.word	0x40026070
 8005c8c:	20000478 	.word	0x20000478
 8005c90:	40026058 	.word	0x40026058
 8005c94:	40003c00 	.word	0x40003c00
 8005c98:	40020000 	.word	0x40020000
 8005c9c:	40020800 	.word	0x40020800

08005ca0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <HAL_SPI_MspDeInit+0x90>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10a      	bne.n	8005cc8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <HAL_SPI_MspDeInit+0x94>)
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <HAL_SPI_MspDeInit+0x94>)
 8005cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cbc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8005cbe:	2138      	movs	r1, #56	; 0x38
 8005cc0:	481d      	ldr	r0, [pc, #116]	; (8005d38 <HAL_SPI_MspDeInit+0x98>)
 8005cc2:	f005 f8d7 	bl	800ae74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005cc6:	e02f      	b.n	8005d28 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_SPI_MspDeInit+0x9c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d115      	bne.n	8005cfe <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005cd2:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <HAL_SPI_MspDeInit+0x94>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <HAL_SPI_MspDeInit+0x94>)
 8005cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cdc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8005cde:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005ce2:	4815      	ldr	r0, [pc, #84]	; (8005d38 <HAL_SPI_MspDeInit+0x98>)
 8005ce4:	f005 f8c6 	bl	800ae74 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 ff8d 	bl	8007c0c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 ff88 	bl	8007c0c <HAL_DMA_DeInit>
}
 8005cfc:	e014      	b.n	8005d28 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <HAL_SPI_MspDeInit+0xa0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d10f      	bne.n	8005d28 <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HAL_SPI_MspDeInit+0x94>)
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <HAL_SPI_MspDeInit+0x94>)
 8005d0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d12:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d18:	480a      	ldr	r0, [pc, #40]	; (8005d44 <HAL_SPI_MspDeInit+0xa4>)
 8005d1a:	f005 f8ab 	bl	800ae74 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005d1e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8005d22:	4809      	ldr	r0, [pc, #36]	; (8005d48 <HAL_SPI_MspDeInit+0xa8>)
 8005d24:	f005 f8a6 	bl	800ae74 <HAL_GPIO_DeInit>
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40013000 	.word	0x40013000
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40020400 	.word	0x40020400
 8005d3c:	40003800 	.word	0x40003800
 8005d40:	40003c00 	.word	0x40003c00
 8005d44:	40020000 	.word	0x40020000
 8005d48:	40020800 	.word	0x40020800

08005d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d54:	f107 0314 	add.w	r3, r7, #20
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	60da      	str	r2, [r3, #12]
 8005d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_UART_MspInit+0x94>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d134      	bne.n	8005dd8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <HAL_UART_MspInit+0x98>)
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <HAL_UART_MspInit+0x98>)
 8005d78:	f043 0310 	orr.w	r3, r3, #16
 8005d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d7e:	4b19      	ldr	r3, [pc, #100]	; (8005de4 <HAL_UART_MspInit+0x98>)
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <HAL_UART_MspInit+0x98>)
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <HAL_UART_MspInit+0x98>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6313      	str	r3, [r2, #48]	; 0x30
 8005d9a:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_UART_MspInit+0x98>)
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005da6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dac:	2302      	movs	r3, #2
 8005dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db4:	2303      	movs	r3, #3
 8005db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005db8:	2307      	movs	r3, #7
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4809      	ldr	r0, [pc, #36]	; (8005de8 <HAL_UART_MspInit+0x9c>)
 8005dc4:	f004 feba 	bl	800ab3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2100      	movs	r1, #0
 8005dcc:	2025      	movs	r0, #37	; 0x25
 8005dce:	f001 f890 	bl	8006ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005dd2:	2025      	movs	r0, #37	; 0x25
 8005dd4:	f001 f8a9 	bl	8006f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005dd8:	bf00      	nop
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40011000 	.word	0x40011000
 8005de4:	40023800 	.word	0x40023800
 8005de8:	40020000 	.word	0x40020000

08005dec <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <HAL_UART_MspDeInit+0x38>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_UART_MspDeInit+0x3c>)
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <HAL_UART_MspDeInit+0x3c>)
 8005e04:	f023 0310 	bic.w	r3, r3, #16
 8005e08:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005e0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e0e:	4807      	ldr	r0, [pc, #28]	; (8005e2c <HAL_UART_MspDeInit+0x40>)
 8005e10:	f005 f830 	bl	800ae74 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005e14:	2025      	movs	r0, #37	; 0x25
 8005e16:	f001 f896 	bl	8006f46 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40011000 	.word	0x40011000
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	40020000 	.word	0x40020000

08005e30 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005e44:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <HAL_FSMC_MspInit+0x88>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d131      	bne.n	8005eb0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005e4c:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <HAL_FSMC_MspInit+0x88>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_FSMC_MspInit+0x8c>)
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <HAL_FSMC_MspInit+0x8c>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	6393      	str	r3, [r2, #56]	; 0x38
 8005e62:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <HAL_FSMC_MspInit+0x8c>)
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005e6e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005e72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e74:	2302      	movs	r3, #2
 8005e76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005e80:	230c      	movs	r3, #12
 8005e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	480d      	ldr	r0, [pc, #52]	; (8005ec0 <HAL_FSMC_MspInit+0x90>)
 8005e8a:	f004 fe57 	bl	800ab3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005e8e:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005e92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e94:	2302      	movs	r3, #2
 8005e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ea4:	1d3b      	adds	r3, r7, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4806      	ldr	r0, [pc, #24]	; (8005ec4 <HAL_FSMC_MspInit+0x94>)
 8005eaa:	f004 fe47 	bl	800ab3c <HAL_GPIO_Init>
 8005eae:	e000      	b.n	8005eb2 <HAL_FSMC_MspInit+0x82>
    return;
 8005eb0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000978 	.word	0x20000978
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40020c00 	.word	0x40020c00

08005ec8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005ed0:	f7ff ffae 	bl	8005e30 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <HAL_FSMC_MspDeInit+0x38>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d113      	bne.n	8005f10 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <HAL_FSMC_MspDeInit+0x38>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005eee:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <HAL_FSMC_MspDeInit+0x3c>)
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <HAL_FSMC_MspDeInit+0x3c>)
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005efa:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005efe:	4807      	ldr	r0, [pc, #28]	; (8005f1c <HAL_FSMC_MspDeInit+0x40>)
 8005f00:	f004 ffb8 	bl	800ae74 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005f04:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005f08:	4805      	ldr	r0, [pc, #20]	; (8005f20 <HAL_FSMC_MspDeInit+0x44>)
 8005f0a:	f004 ffb3 	bl	800ae74 <HAL_GPIO_DeInit>
 8005f0e:	e000      	b.n	8005f12 <HAL_FSMC_MspDeInit+0x36>
    return;
 8005f10:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	2000097c 	.word	0x2000097c
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40020c00 	.word	0x40020c00

08005f24 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005f2c:	f7ff ffd6 	bl	8005edc <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f3c:	e7fe      	b.n	8005f3c <NMI_Handler+0x4>

08005f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f42:	e7fe      	b.n	8005f42 <HardFault_Handler+0x4>

08005f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f48:	e7fe      	b.n	8005f48 <MemManage_Handler+0x4>

08005f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f4e:	e7fe      	b.n	8005f4e <BusFault_Handler+0x4>

08005f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f54:	e7fe      	b.n	8005f54 <UsageFault_Handler+0x4>

08005f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f56:	b480      	push	{r7}
 8005f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f72:	b480      	push	{r7}
 8005f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f76:	bf00      	nop
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f84:	f000 fc5e 	bl	8006844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f88:	bf00      	nop
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005f90:	4802      	ldr	r0, [pc, #8]	; (8005f9c <DMA1_Stream3_IRQHandler+0x10>)
 8005f92:	f002 f89d 	bl	80080d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005f96:	bf00      	nop
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000478 	.word	0x20000478

08005fa0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005fa4:	4802      	ldr	r0, [pc, #8]	; (8005fb0 <DMA1_Stream4_IRQHandler+0x10>)
 8005fa6:	f002 f893 	bl	80080d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000418 	.word	0x20000418

08005fb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005fb8:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <I2C1_EV_IRQHandler+0x10>)
 8005fba:	f008 ff87 	bl	800eecc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005fbe:	bf00      	nop
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200002bc 	.word	0x200002bc

08005fc8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005fcc:	4802      	ldr	r0, [pc, #8]	; (8005fd8 <I2C1_ER_IRQHandler+0x10>)
 8005fce:	f009 f8ee 	bl	800f1ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005fd2:	bf00      	nop
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200002bc 	.word	0x200002bc

08005fdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005fe0:	4802      	ldr	r0, [pc, #8]	; (8005fec <USART1_IRQHandler+0x10>)
 8005fe2:	f010 fe47 	bl	8016c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005fe6:	bf00      	nop
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	200004d8 	.word	0x200004d8

08005ff0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <_getpid>:

int _getpid(void)
{
 8005ffe:	b480      	push	{r7}
 8006000:	af00      	add	r7, sp, #0
	return 1;
 8006002:	2301      	movs	r3, #1
}
 8006004:	4618      	mov	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <_kill>:

int _kill(int pid, int sig)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006018:	f013 fc44 	bl	80198a4 <__errno>
 800601c:	4603      	mov	r3, r0
 800601e:	2216      	movs	r2, #22
 8006020:	601a      	str	r2, [r3, #0]
	return -1;
 8006022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <_exit>:

void _exit (int status)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006036:	f04f 31ff 	mov.w	r1, #4294967295
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffe7 	bl	800600e <_kill>
	while (1) {}		/* Make sure we hang here */
 8006040:	e7fe      	b.n	8006040 <_exit+0x12>

08006042 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	e00a      	b.n	800606a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006054:	f3af 8000 	nop.w
 8006058:	4601      	mov	r1, r0
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	60ba      	str	r2, [r7, #8]
 8006060:	b2ca      	uxtb	r2, r1
 8006062:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	3301      	adds	r3, #1
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	dbf0      	blt.n	8006054 <_read+0x12>
	}

return len;
 8006072:	687b      	ldr	r3, [r7, #4]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e009      	b.n	80060a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	60ba      	str	r2, [r7, #8]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	dbf1      	blt.n	800608e <_write+0x12>
	}
	return len;
 80060aa:	687b      	ldr	r3, [r7, #4]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_close>:

int _close(int file)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	return -1;
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060dc:	605a      	str	r2, [r3, #4]
	return 0;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <_isatty>:

int _isatty(int file)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	return 1;
 80060f4:	2301      	movs	r3, #1
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
	return 0;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <_open>:

int _open(char *path, int flags, ...)
{
 800611c:	b40e      	push	{r1, r2, r3}
 800611e:	b480      	push	{r7}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	b003      	add	sp, #12
 8006136:	4770      	bx	lr

08006138 <_wait>:

int _wait(int *status)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8006140:	f013 fbb0 	bl	80198a4 <__errno>
 8006144:	4603      	mov	r3, r0
 8006146:	220a      	movs	r2, #10
 8006148:	601a      	str	r2, [r3, #0]
	return -1;
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <_unlink>:

int _unlink(char *name)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 800615e:	f013 fba1 	bl	80198a4 <__errno>
 8006162:	4603      	mov	r3, r0
 8006164:	2202      	movs	r2, #2
 8006166:	601a      	str	r2, [r3, #0]
	return -1;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <_times>:

int _times(struct tms *buf)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	return -1;
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <_stat>:

int _stat(char *file, struct stat *st)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800619c:	605a      	str	r2, [r3, #4]
	return 0;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <_link>:

int _link(char *old, char *new)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 80061b6:	f013 fb75 	bl	80198a4 <__errno>
 80061ba:	4603      	mov	r3, r0
 80061bc:	221f      	movs	r2, #31
 80061be:	601a      	str	r2, [r3, #0]
	return -1;
 80061c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <_fork>:

int _fork(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 80061d0:	f013 fb68 	bl	80198a4 <__errno>
 80061d4:	4603      	mov	r3, r0
 80061d6:	220b      	movs	r2, #11
 80061d8:	601a      	str	r2, [r3, #0]
	return -1;
 80061da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061de:	4618      	mov	r0, r3
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 80061ee:	f013 fb59 	bl	80198a4 <__errno>
 80061f2:	4603      	mov	r3, r0
 80061f4:	220c      	movs	r2, #12
 80061f6:	601a      	str	r2, [r3, #0]
	return -1;
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800620c:	4a14      	ldr	r2, [pc, #80]	; (8006260 <_sbrk+0x5c>)
 800620e:	4b15      	ldr	r3, [pc, #84]	; (8006264 <_sbrk+0x60>)
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <_sbrk+0x64>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006220:	4b11      	ldr	r3, [pc, #68]	; (8006268 <_sbrk+0x64>)
 8006222:	4a12      	ldr	r2, [pc, #72]	; (800626c <_sbrk+0x68>)
 8006224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <_sbrk+0x64>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d207      	bcs.n	8006244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006234:	f013 fb36 	bl	80198a4 <__errno>
 8006238:	4603      	mov	r3, r0
 800623a:	220c      	movs	r2, #12
 800623c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	e009      	b.n	8006258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006244:	4b08      	ldr	r3, [pc, #32]	; (8006268 <_sbrk+0x64>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <_sbrk+0x64>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	4a05      	ldr	r2, [pc, #20]	; (8006268 <_sbrk+0x64>)
 8006254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006256:	68fb      	ldr	r3, [r7, #12]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20020000 	.word	0x20020000
 8006264:	00000400 	.word	0x00000400
 8006268:	20000984 	.word	0x20000984
 800626c:	20000dd0 	.word	0x20000dd0

08006270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <SystemInit+0x20>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	4a05      	ldr	r2, [pc, #20]	; (8006290 <SystemInit+0x20>)
 800627c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	e000ed00 	.word	0xe000ed00

08006294 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800629a:	2300      	movs	r3, #0
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	2302      	movs	r3, #2
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	2302      	movs	r3, #2
 80062ac:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80062ae:	4b34      	ldr	r3, [pc, #208]	; (8006380 <SystemCoreClockUpdate+0xec>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d011      	beq.n	80062e2 <SystemCoreClockUpdate+0x4e>
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d844      	bhi.n	800634e <SystemCoreClockUpdate+0xba>
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <SystemCoreClockUpdate+0x3e>
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d004      	beq.n	80062da <SystemCoreClockUpdate+0x46>
 80062d0:	e03d      	b.n	800634e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80062d2:	4b2c      	ldr	r3, [pc, #176]	; (8006384 <SystemCoreClockUpdate+0xf0>)
 80062d4:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <SystemCoreClockUpdate+0xf4>)
 80062d6:	601a      	str	r2, [r3, #0]
      break;
 80062d8:	e03d      	b.n	8006356 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80062da:	4b2a      	ldr	r3, [pc, #168]	; (8006384 <SystemCoreClockUpdate+0xf0>)
 80062dc:	4a2b      	ldr	r2, [pc, #172]	; (800638c <SystemCoreClockUpdate+0xf8>)
 80062de:	601a      	str	r2, [r3, #0]
      break;
 80062e0:	e039      	b.n	8006356 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80062e2:	4b27      	ldr	r3, [pc, #156]	; (8006380 <SystemCoreClockUpdate+0xec>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	0d9b      	lsrs	r3, r3, #22
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <SystemCoreClockUpdate+0xec>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80062fe:	4a23      	ldr	r2, [pc, #140]	; (800638c <SystemCoreClockUpdate+0xf8>)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	fbb2 f3f3 	udiv	r3, r2, r3
 8006306:	4a1e      	ldr	r2, [pc, #120]	; (8006380 <SystemCoreClockUpdate+0xec>)
 8006308:	6852      	ldr	r2, [r2, #4]
 800630a:	0992      	lsrs	r2, r2, #6
 800630c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	e00b      	b.n	8006330 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006318:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <SystemCoreClockUpdate+0xf4>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006320:	4a17      	ldr	r2, [pc, #92]	; (8006380 <SystemCoreClockUpdate+0xec>)
 8006322:	6852      	ldr	r2, [r2, #4]
 8006324:	0992      	lsrs	r2, r2, #6
 8006326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006330:	4b13      	ldr	r3, [pc, #76]	; (8006380 <SystemCoreClockUpdate+0xec>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	3301      	adds	r3, #1
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <SystemCoreClockUpdate+0xf0>)
 800634a:	6013      	str	r3, [r2, #0]
      break;
 800634c:	e003      	b.n	8006356 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <SystemCoreClockUpdate+0xf0>)
 8006350:	4a0d      	ldr	r2, [pc, #52]	; (8006388 <SystemCoreClockUpdate+0xf4>)
 8006352:	601a      	str	r2, [r3, #0]
      break;
 8006354:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006356:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <SystemCoreClockUpdate+0xec>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	4a0b      	ldr	r2, [pc, #44]	; (8006390 <SystemCoreClockUpdate+0xfc>)
 8006362:	5cd3      	ldrb	r3, [r2, r3]
 8006364:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <SystemCoreClockUpdate+0xf0>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <SystemCoreClockUpdate+0xf0>)
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	40023800 	.word	0x40023800
 8006384:	20000058 	.word	0x20000058
 8006388:	00f42400 	.word	0x00f42400
 800638c:	007a1200 	.word	0x007a1200
 8006390:	08051f48 	.word	0x08051f48

08006394 <SPI1_Send>:

uint8_t rx_buf[1025];
uint8_t tx_buf[10];

void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit (&W25QXX_SPI, dt, cnt, 5000);
 80063a0:	887a      	ldrh	r2, [r7, #2]
 80063a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4803      	ldr	r0, [pc, #12]	; (80063b8 <SPI1_Send+0x24>)
 80063aa:	f00c fc14 	bl	8012bd6 <HAL_SPI_Transmit>
}
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000310 	.word	0x20000310

080063bc <SPI1_Recv>:

void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&W25QXX_SPI, dt, cnt, 5000);
 80063c8:	887a      	ldrh	r2, [r7, #2]
 80063ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4803      	ldr	r0, [pc, #12]	; (80063e0 <SPI1_Recv+0x24>)
 80063d2:	f00c fd3c 	bl	8012e4e <HAL_SPI_Receive>
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000310 	.word	0x20000310

080063e4 <W25QXX_Reset>:

void W25QXX_Reset (void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 80063e8:	2200      	movs	r2, #0
 80063ea:	2101      	movs	r1, #1
 80063ec:	4809      	ldr	r0, [pc, #36]	; (8006414 <W25QXX_Reset+0x30>)
 80063ee:	f004 fe55 	bl	800b09c <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_ENABLE_RESET;
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <W25QXX_Reset+0x34>)
 80063f4:	2266      	movs	r2, #102	; 0x66
 80063f6:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = W25QXX_RESET;
 80063f8:	4b07      	ldr	r3, [pc, #28]	; (8006418 <W25QXX_Reset+0x34>)
 80063fa:	2299      	movs	r2, #153	; 0x99
 80063fc:	705a      	strb	r2, [r3, #1]
	SPI1_Send(tx_buf, 2);
 80063fe:	2102      	movs	r1, #2
 8006400:	4805      	ldr	r0, [pc, #20]	; (8006418 <W25QXX_Reset+0x34>)
 8006402:	f7ff ffc7 	bl	8006394 <SPI1_Send>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 8006406:	2201      	movs	r2, #1
 8006408:	2101      	movs	r1, #1
 800640a:	4802      	ldr	r0, [pc, #8]	; (8006414 <W25QXX_Reset+0x30>)
 800640c:	f004 fe46 	bl	800b09c <HAL_GPIO_WritePin>
}
 8006410:	bf00      	nop
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40020400 	.word	0x40020400
 8006418:	20000d8c 	.word	0x20000d8c

0800641c <W25QXX_Read_Data>:

void W25QXX_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 8006428:	2200      	movs	r2, #0
 800642a:	2101      	movs	r1, #1
 800642c:	4813      	ldr	r0, [pc, #76]	; (800647c <W25QXX_Read_Data+0x60>)
 800642e:	f004 fe35 	bl	800b09c <HAL_GPIO_WritePin>
	tx_buf[0] = W25QXX_READ;
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <W25QXX_Read_Data+0x64>)
 8006434:	2203      	movs	r2, #3
 8006436:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (addr >> 16) & 0xFF;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	b2da      	uxtb	r2, r3
 800643e:	4b10      	ldr	r3, [pc, #64]	; (8006480 <W25QXX_Read_Data+0x64>)
 8006440:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (addr >> 8) & 0xFF;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	b2da      	uxtb	r2, r3
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <W25QXX_Read_Data+0x64>)
 800644a:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = addr & 0xFF;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <W25QXX_Read_Data+0x64>)
 8006452:	70da      	strb	r2, [r3, #3]
	SPI1_Send(tx_buf, 4);
 8006454:	2104      	movs	r1, #4
 8006456:	480a      	ldr	r0, [pc, #40]	; (8006480 <W25QXX_Read_Data+0x64>)
 8006458:	f7ff ff9c 	bl	8006394 <SPI1_Send>
	SPI1_Recv(data, sz);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	b29b      	uxth	r3, r3
 8006460:	4619      	mov	r1, r3
 8006462:	68b8      	ldr	r0, [r7, #8]
 8006464:	f7ff ffaa 	bl	80063bc <SPI1_Recv>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 8006468:	2201      	movs	r2, #1
 800646a:	2101      	movs	r1, #1
 800646c:	4803      	ldr	r0, [pc, #12]	; (800647c <W25QXX_Read_Data+0x60>)
 800646e:	f004 fe15 	bl	800b09c <HAL_GPIO_WritePin>
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40020400 	.word	0x40020400
 8006480:	20000d8c 	.word	0x20000d8c

08006484 <W25QXX_Read_ID>:

uint32_t W25QXX_Read_ID(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	tx_buf[0] = W25QXX_GET_JEDEC_ID;
 800648a:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <W25QXX_Read_ID+0x4c>)
 800648c:	229f      	movs	r2, #159	; 0x9f
 800648e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_RESET);
 8006490:	2200      	movs	r2, #0
 8006492:	2101      	movs	r1, #1
 8006494:	480f      	ldr	r0, [pc, #60]	; (80064d4 <W25QXX_Read_ID+0x50>)
 8006496:	f004 fe01 	bl	800b09c <HAL_GPIO_WritePin>
	SPI1_Send(tx_buf, 1);
 800649a:	2101      	movs	r1, #1
 800649c:	480c      	ldr	r0, [pc, #48]	; (80064d0 <W25QXX_Read_ID+0x4c>)
 800649e:	f7ff ff79 	bl	8006394 <SPI1_Send>
	SPI1_Recv(dt,3);
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	2103      	movs	r1, #3
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff ff88 	bl	80063bc <SPI1_Recv>
	HAL_GPIO_WritePin(W25QXX_NSS_PORT, W25QXX_NSS_PIN, GPIO_PIN_SET);
 80064ac:	2201      	movs	r2, #1
 80064ae:	2101      	movs	r1, #1
 80064b0:	4808      	ldr	r0, [pc, #32]	; (80064d4 <W25QXX_Read_ID+0x50>)
 80064b2:	f004 fdf3 	bl	800b09c <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 80064b6:	793b      	ldrb	r3, [r7, #4]
 80064b8:	041a      	lsls	r2, r3, #16
 80064ba:	797b      	ldrb	r3, [r7, #5]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	4313      	orrs	r3, r2
 80064c0:	79ba      	ldrb	r2, [r7, #6]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	bf00      	nop
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000d8c 	.word	0x20000d8c
 80064d4:	40020400 	.word	0x40020400

080064d8 <W25QXX_Init>:

void W25QXX_Init(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80064dc:	2064      	movs	r0, #100	; 0x64
 80064de:	f000 fa11 	bl	8006904 <HAL_Delay>
	W25QXX_Reset();
 80064e2:	f7ff ff7f 	bl	80063e4 <W25QXX_Reset>
	HAL_Delay(100);
 80064e6:	2064      	movs	r0, #100	; 0x64
 80064e8:	f000 fa0c 	bl	8006904 <HAL_Delay>
}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80064fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80064fe:	ed87 1a03 	vstr	s2, [r7, #12]
 8006502:	edc7 1a02 	vstr	s3, [r7, #8]
 8006506:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800650a:	ed97 7a05 	vldr	s14, [r7, #20]
 800650e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006516:	edd7 6a01 	vldr	s13, [r7, #4]
 800651a:	edd7 7a02 	vldr	s15, [r7, #8]
 800651e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006522:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006526:	ed97 7a03 	vldr	s14, [r7, #12]
 800652a:	edd7 7a04 	vldr	s15, [r7, #16]
 800652e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006536:	edd7 7a02 	vldr	s15, [r7, #8]
 800653a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800653e:	eeb0 0a67 	vmov.f32	s0, s15
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <XPT2046_Init>:

void XPT2046_Init(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8006550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006554:	2201      	movs	r2, #1
 8006556:	2180      	movs	r1, #128	; 0x80
 8006558:	4809      	ldr	r0, [pc, #36]	; (8006580 <XPT2046_Init+0x34>)
 800655a:	f00c fb3c 	bl	8012bd6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800655e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006562:	2201      	movs	r2, #1
 8006564:	2100      	movs	r1, #0
 8006566:	4806      	ldr	r0, [pc, #24]	; (8006580 <XPT2046_Init+0x34>)
 8006568:	f00c fb35 	bl	8012bd6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800656c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006570:	2201      	movs	r2, #1
 8006572:	2100      	movs	r1, #0
 8006574:	4802      	ldr	r0, [pc, #8]	; (8006580 <XPT2046_Init+0x34>)
 8006576:	f00c fb2e 	bl	8012bd6 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 800657a:	bf00      	nop
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000368 	.word	0x20000368

08006584 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af02      	add	r7, sp, #8
 800658a:	4603      	mov	r3, r0
 800658c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 800658e:	2001      	movs	r0, #1
 8006590:	f000 f9b8 	bl	8006904 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8006594:	1df9      	adds	r1, r7, #7
 8006596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800659a:	2201      	movs	r2, #1
 800659c:	4814      	ldr	r0, [pc, #80]	; (80065f0 <getRaw+0x6c>)
 800659e:	f00c fb1a 	bl	8012bd6 <HAL_SPI_Transmit>
	address = 0x00;
 80065a2:	2300      	movs	r3, #0
 80065a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 80065a6:	f107 020b 	add.w	r2, r7, #11
 80065aa:	1df9      	adds	r1, r7, #7
 80065ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	2301      	movs	r3, #1
 80065b4:	480e      	ldr	r0, [pc, #56]	; (80065f0 <getRaw+0x6c>)
 80065b6:	f00c fd5b 	bl	8013070 <HAL_SPI_TransmitReceive>
	MSB = data;   
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 80065be:	2300      	movs	r3, #0
 80065c0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 80065c2:	f107 020b 	add.w	r2, r7, #11
 80065c6:	1df9      	adds	r1, r7, #7
 80065c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2301      	movs	r3, #1
 80065d0:	4807      	ldr	r0, [pc, #28]	; (80065f0 <getRaw+0x6c>)
 80065d2:	f00c fd4d 	bl	8013070 <HAL_SPI_TransmitReceive>
	LSB = data;
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 80065da:	89fb      	ldrh	r3, [r7, #14]
 80065dc:	021a      	lsls	r2, r3, #8
 80065de:	89bb      	ldrh	r3, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	10db      	asrs	r3, r3, #3
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	bf00      	nop
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000368 	.word	0x20000368

080065f4 <X>:

inline static uint16_t X(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80065fa:	20d0      	movs	r0, #208	; 0xd0
 80065fc:	f7ff ffc2 	bl	8006584 <getRaw>
 8006600:	4603      	mov	r3, r0
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006658 <X+0x64>
 800660e:	eddf 1a13 	vldr	s3, [pc, #76]	; 800665c <X+0x68>
 8006612:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006660 <X+0x6c>
 8006616:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006664 <X+0x70>
 800661a:	eeb0 0a67 	vmov.f32	s0, s15
 800661e:	f7ff ff67 	bl	80064f0 <remap>
 8006622:	eef0 7a40 	vmov.f32	s15, s0
 8006626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662a:	ee17 3a90 	vmov	r3, s15
 800662e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8006636:	3303      	adds	r3, #3
 8006638:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <X+0x5a>
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	f240 321e 	movw	r2, #798	; 0x31e
 8006646:	4293      	cmp	r3, r2
 8006648:	d801      	bhi.n	800664e <X+0x5a>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	e000      	b.n	8006650 <X+0x5c>
	else return 0;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	4447c000 	.word	0x4447c000
 800665c:	00000000 	.word	0x00000000
 8006660:	457a0000 	.word	0x457a0000
 8006664:	43480000 	.word	0x43480000

08006668 <Y>:

inline static uint16_t Y(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800666e:	2090      	movs	r0, #144	; 0x90
 8006670:	f7ff ff88 	bl	8006584 <getRaw>
 8006674:	4603      	mov	r3, r0
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 80066c0 <Y+0x58>
 8006682:	eddf 1a10 	vldr	s3, [pc, #64]	; 80066c4 <Y+0x5c>
 8006686:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80066c8 <Y+0x60>
 800668a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80066cc <Y+0x64>
 800668e:	eeb0 0a67 	vmov.f32	s0, s15
 8006692:	f7ff ff2d 	bl	80064f0 <remap>
 8006696:	eef0 7a40 	vmov.f32	s15, s0
 800669a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669e:	ee17 3a90 	vmov	r3, s15
 80066a2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <Y+0x4e>
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 80066b0:	d801      	bhi.n	80066b6 <Y+0x4e>
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	e000      	b.n	80066b8 <Y+0x50>
	else return 0;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	43ef8000 	.word	0x43ef8000
 80066c4:	00000000 	.word	0x00000000
 80066c8:	456d8000 	.word	0x456d8000
 80066cc:	43480000 	.word	0x43480000

080066d0 <getX>:

uint16_t getX(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <getX+0x30>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 80066dc:	e007      	b.n	80066ee <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 80066de:	f7ff ff89 	bl	80065f4 <X>
 80066e2:	4603      	mov	r3, r0
 80066e4:	80bb      	strh	r3, [r7, #4]
 80066e6:	f7ff ff85 	bl	80065f4 <X>
 80066ea:	4603      	mov	r3, r0
 80066ec:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 80066ee:	88ba      	ldrh	r2, [r7, #4]
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d1f3      	bne.n	80066de <getX+0xe>
		}
		return x[0];
 80066f6:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	08051f60 	.word	0x08051f60

08006704 <getY>:

uint16_t getY(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <getY+0x30>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8006710:	e007      	b.n	8006722 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8006712:	f7ff ffa9 	bl	8006668 <Y>
 8006716:	4603      	mov	r3, r0
 8006718:	80bb      	strh	r3, [r7, #4]
 800671a:	f7ff ffa5 	bl	8006668 <Y>
 800671e:	4603      	mov	r3, r0
 8006720:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8006722:	88ba      	ldrh	r2, [r7, #4]
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	429a      	cmp	r2, r3
 8006728:	d1f3      	bne.n	8006712 <getY+0xe>
		}
		return y[0];
 800672a:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	08051f60 	.word	0x08051f60

08006738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800673c:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <HAL_Init+0x40>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <HAL_Init+0x40>)
 8006742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_Init+0x40>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_Init+0x40>)
 800674e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_Init+0x40>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_Init+0x40>)
 800675a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006760:	2003      	movs	r0, #3
 8006762:	f000 fbbb 	bl	8006edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006766:	2000      	movs	r0, #0
 8006768:	f000 f83b 	bl	80067e2 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800676c:	f7ff f856 	bl	800581c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40023c00 	.word	0x40023c00

0800677c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006780:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <HAL_DeInit+0x54>)
 8006782:	f04f 32ff 	mov.w	r2, #4294967295
 8006786:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <HAL_DeInit+0x54>)
 800678a:	2200      	movs	r2, #0
 800678c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <HAL_DeInit+0x54>)
 8006790:	f04f 32ff 	mov.w	r2, #4294967295
 8006794:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006796:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <HAL_DeInit+0x54>)
 8006798:	2200      	movs	r2, #0
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <HAL_DeInit+0x54>)
 800679e:	f04f 32ff 	mov.w	r2, #4294967295
 80067a2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <HAL_DeInit+0x54>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <HAL_DeInit+0x54>)
 80067ac:	f04f 32ff 	mov.w	r2, #4294967295
 80067b0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <HAL_DeInit+0x54>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <HAL_DeInit+0x54>)
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295
 80067be:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80067c0:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <HAL_DeInit+0x54>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80067c6:	f000 f805 	bl	80067d4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40023800 	.word	0x40023800

080067d4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80067d8:	bf00      	nop
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <HAL_InitTick+0x56>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <HAL_InitTick+0x5a>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fbb2 	bl	8006f6a <HAL_SYSTICK_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e00e      	b.n	800682e <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d80a      	bhi.n	800682c <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006816:	2200      	movs	r2, #0
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	f000 fb68 	bl	8006ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006822:	4a07      	ldr	r2, [pc, #28]	; (8006840 <HAL_InitTick+0x5e>)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	e000      	b.n	800682e <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000058 	.word	0x20000058
 800683c:	20000060 	.word	0x20000060
 8006840:	2000005c 	.word	0x2000005c

08006844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_IncTick+0x20>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_IncTick+0x24>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4413      	add	r3, r2
 8006854:	4a04      	ldr	r2, [pc, #16]	; (8006868 <HAL_IncTick+0x24>)
 8006856:	6013      	str	r3, [r2, #0]
}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000060 	.word	0x20000060
 8006868:	20000d98 	.word	0x20000d98

0800686c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return uwTick;
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <HAL_GetTick+0x14>)
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000d98 	.word	0x20000d98

08006884 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <HAL_GetTickPrio+0x14>)
 800688a:	681b      	ldr	r3, [r3, #0]
}
 800688c:	4618      	mov	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	2000005c 	.word	0x2000005c

0800689c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80068aa:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <HAL_SetTickFreq+0x48>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	79fa      	ldrb	r2, [r7, #7]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d012      	beq.n	80068da <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_SetTickFreq+0x48>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 80068ba:	4a0a      	ldr	r2, [pc, #40]	; (80068e4 <HAL_SetTickFreq+0x48>)
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80068c0:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <HAL_SetTickFreq+0x4c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff ff8c 	bl	80067e2 <HAL_InitTick>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80068d4:	4a03      	ldr	r2, [pc, #12]	; (80068e4 <HAL_SetTickFreq+0x48>)
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80068da:	7bfb      	ldrb	r3, [r7, #15]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000060 	.word	0x20000060
 80068e8:	2000005c 	.word	0x2000005c

080068ec <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80068f0:	4b03      	ldr	r3, [pc, #12]	; (8006900 <HAL_GetTickFreq+0x14>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000060 	.word	0x20000060

08006904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800690c:	f7ff ffae 	bl	800686c <HAL_GetTick>
 8006910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d005      	beq.n	800692a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <HAL_Delay+0x44>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800692a:	bf00      	nop
 800692c:	f7ff ff9e 	bl	800686c <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	429a      	cmp	r2, r3
 800693a:	d8f7      	bhi.n	800692c <HAL_Delay+0x28>
  {
  }
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000060 	.word	0x20000060

0800694c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <HAL_SuspendTick+0x1c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a04      	ldr	r2, [pc, #16]	; (8006968 <HAL_SuspendTick+0x1c>)
 8006956:	f023 0302 	bic.w	r3, r3, #2
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000e010 	.word	0xe000e010

0800696c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <HAL_ResumeTick+0x1c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a04      	ldr	r2, [pc, #16]	; (8006988 <HAL_ResumeTick+0x1c>)
 8006976:	f043 0302 	orr.w	r3, r3, #2
 800697a:	6013      	str	r3, [r2, #0]
}
 800697c:	bf00      	nop
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000e010 	.word	0xe000e010

0800698c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8006990:	4b02      	ldr	r3, [pc, #8]	; (800699c <HAL_GetHalVersion+0x10>)
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	01070d00 	.word	0x01070d00

080069a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_GetREVID+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	0c1b      	lsrs	r3, r3, #16
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	e0042000 	.word	0xe0042000

080069b8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <HAL_GetDEVID+0x18>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	e0042000 	.word	0xe0042000

080069d4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6053      	str	r3, [r2, #4]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	e0042000 	.word	0xe0042000

080069f4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4a04      	ldr	r2, [pc, #16]	; (8006a10 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	6053      	str	r3, [r2, #4]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	e0042000 	.word	0xe0042000

08006a14 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	6053      	str	r3, [r2, #4]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	e0042000 	.word	0xe0042000

08006a34 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006a3e:	f023 0302 	bic.w	r3, r3, #2
 8006a42:	6053      	str	r3, [r2, #4]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e0042000 	.word	0xe0042000

08006a54 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	4a04      	ldr	r2, [pc, #16]	; (8006a70 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006a5e:	f043 0304 	orr.w	r3, r3, #4
 8006a62:	6053      	str	r3, [r2, #4]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e0042000 	.word	0xe0042000

08006a74 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4a04      	ldr	r2, [pc, #16]	; (8006a90 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006a7e:	f023 0304 	bic.w	r3, r3, #4
 8006a82:	6053      	str	r3, [r2, #4]
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	e0042000 	.word	0xe0042000

08006a94 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006a98:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <HAL_EnableCompensationCell+0x14>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	42270400 	.word	0x42270400

08006aac <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <HAL_DisableCompensationCell+0x14>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
}
 8006ab6:	bf00      	nop
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	42270400 	.word	0x42270400

08006ac4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <HAL_GetUIDw0+0x14>)
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	1fff7a10 	.word	0x1fff7a10

08006adc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006ae0:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <HAL_GetUIDw1+0x14>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	1fff7a14 	.word	0x1fff7a14

08006af4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006af8:	4b03      	ldr	r3, [pc, #12]	; (8006b08 <HAL_GetUIDw2+0x14>)
 8006afa:	681b      	ldr	r3, [r3, #0]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	1fff7a18 	.word	0x1fff7a18

08006b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <__NVIC_SetPriorityGrouping+0x44>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b3e:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <__NVIC_SetPriorityGrouping+0x44>)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	60d3      	str	r3, [r2, #12]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	e000ed00 	.word	0xe000ed00

08006b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b58:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <__NVIC_GetPriorityGrouping+0x18>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	f003 0307 	and.w	r3, r3, #7
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	e000ed00 	.word	0xe000ed00

08006b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	db0b      	blt.n	8006b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b82:	79fb      	ldrb	r3, [r7, #7]
 8006b84:	f003 021f 	and.w	r2, r3, #31
 8006b88:	4907      	ldr	r1, [pc, #28]	; (8006ba8 <__NVIC_EnableIRQ+0x38>)
 8006b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	2001      	movs	r0, #1
 8006b92:	fa00 f202 	lsl.w	r2, r0, r2
 8006b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	e000e100 	.word	0xe000e100

08006bac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	db12      	blt.n	8006be4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	f003 021f 	and.w	r2, r3, #31
 8006bc4:	490a      	ldr	r1, [pc, #40]	; (8006bf0 <__NVIC_DisableIRQ+0x44>)
 8006bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2001      	movs	r0, #1
 8006bce:	fa00 f202 	lsl.w	r2, r0, r2
 8006bd2:	3320      	adds	r3, #32
 8006bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006bd8:	f3bf 8f4f 	dsb	sy
}
 8006bdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bde:	f3bf 8f6f 	isb	sy
}
 8006be2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	e000e100 	.word	0xe000e100

08006bf4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	db0e      	blt.n	8006c24 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006c06:	4a0b      	ldr	r2, [pc, #44]	; (8006c34 <__NVIC_GetPendingIRQ+0x40>)
 8006c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	3340      	adds	r3, #64	; 0x40
 8006c10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	f003 031f 	and.w	r3, r3, #31
 8006c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	e000      	b.n	8006c26 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006c24:	2300      	movs	r3, #0
  }
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	e000e100 	.word	0xe000e100

08006c38 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	db0c      	blt.n	8006c64 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	f003 021f 	and.w	r2, r3, #31
 8006c50:	4907      	ldr	r1, [pc, #28]	; (8006c70 <__NVIC_SetPendingIRQ+0x38>)
 8006c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2001      	movs	r0, #1
 8006c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c5e:	3340      	adds	r3, #64	; 0x40
 8006c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	e000e100 	.word	0xe000e100

08006c74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	db0c      	blt.n	8006ca0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	f003 021f 	and.w	r2, r3, #31
 8006c8c:	4907      	ldr	r1, [pc, #28]	; (8006cac <__NVIC_ClearPendingIRQ+0x38>)
 8006c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2001      	movs	r0, #1
 8006c96:	fa00 f202 	lsl.w	r2, r0, r2
 8006c9a:	3360      	adds	r3, #96	; 0x60
 8006c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	e000e100 	.word	0xe000e100

08006cb0 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	db0e      	blt.n	8006ce0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006cc2:	4a0b      	ldr	r2, [pc, #44]	; (8006cf0 <__NVIC_GetActive+0x40>)
 8006cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	3380      	adds	r3, #128	; 0x80
 8006ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	e000      	b.n	8006ce2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8006ce0:	2300      	movs	r3, #0
  }
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	e000e100 	.word	0xe000e100

08006cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	db0a      	blt.n	8006d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	490c      	ldr	r1, [pc, #48]	; (8006d40 <__NVIC_SetPriority+0x4c>)
 8006d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d12:	0112      	lsls	r2, r2, #4
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	440b      	add	r3, r1
 8006d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d1c:	e00a      	b.n	8006d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	4908      	ldr	r1, [pc, #32]	; (8006d44 <__NVIC_SetPriority+0x50>)
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	3b04      	subs	r3, #4
 8006d2c:	0112      	lsls	r2, r2, #4
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	440b      	add	r3, r1
 8006d32:	761a      	strb	r2, [r3, #24]
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	e000e100 	.word	0xe000e100
 8006d44:	e000ed00 	.word	0xe000ed00

08006d48 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8006d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	db09      	blt.n	8006d6e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8006d5a:	4a0d      	ldr	r2, [pc, #52]	; (8006d90 <__NVIC_GetPriority+0x48>)
 8006d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d60:	4413      	add	r3, r2
 8006d62:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	e009      	b.n	8006d82 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8006d6e:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <__NVIC_GetPriority+0x4c>)
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	3b04      	subs	r3, #4
 8006d78:	4413      	add	r3, r2
 8006d7a:	7e1b      	ldrb	r3, [r3, #24]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	091b      	lsrs	r3, r3, #4
 8006d80:	b2db      	uxtb	r3, r3
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	e000e100 	.word	0xe000e100
 8006d94:	e000ed00 	.word	0xe000ed00

08006d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b089      	sub	sp, #36	; 0x24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f1c3 0307 	rsb	r3, r3, #7
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	bf28      	it	cs
 8006db6:	2304      	movcs	r3, #4
 8006db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	2b06      	cmp	r3, #6
 8006dc0:	d902      	bls.n	8006dc8 <NVIC_EncodePriority+0x30>
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3b03      	subs	r3, #3
 8006dc6:	e000      	b.n	8006dca <NVIC_EncodePriority+0x32>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	43da      	mvns	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	401a      	ands	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006de0:	f04f 31ff 	mov.w	r1, #4294967295
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dea:	43d9      	mvns	r1, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006df0:	4313      	orrs	r3, r2
         );
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3724      	adds	r7, #36	; 0x24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b089      	sub	sp, #36	; 0x24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f1c3 0307 	rsb	r3, r3, #7
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	bf28      	it	cs
 8006e1e:	2304      	movcs	r3, #4
 8006e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2b06      	cmp	r3, #6
 8006e28:	d902      	bls.n	8006e30 <NVIC_DecodePriority+0x32>
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3b03      	subs	r3, #3
 8006e2e:	e000      	b.n	8006e32 <NVIC_DecodePriority+0x34>
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	40da      	lsrs	r2, r3
 8006e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	fa01 f303 	lsl.w	r3, r1, r3
 8006e44:	43db      	mvns	r3, r3
 8006e46:	401a      	ands	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43da      	mvns	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	601a      	str	r2, [r3, #0]
}
 8006e60:	bf00      	nop
 8006e62:	3724      	adds	r7, #36	; 0x24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006e70:	f3bf 8f4f 	dsb	sy
}
 8006e74:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <__NVIC_SystemReset+0x24>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e7e:	4904      	ldr	r1, [pc, #16]	; (8006e90 <__NVIC_SystemReset+0x24>)
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <__NVIC_SystemReset+0x28>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e86:	f3bf 8f4f 	dsb	sy
}
 8006e8a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006e8c:	bf00      	nop
 8006e8e:	e7fd      	b.n	8006e8c <__NVIC_SystemReset+0x20>
 8006e90:	e000ed00 	.word	0xe000ed00
 8006e94:	05fa0004 	.word	0x05fa0004

08006e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ea8:	d301      	bcc.n	8006eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e00f      	b.n	8006ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eae:	4a0a      	ldr	r2, [pc, #40]	; (8006ed8 <SysTick_Config+0x40>)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eb6:	210f      	movs	r1, #15
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	f7ff ff1a 	bl	8006cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <SysTick_Config+0x40>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ec6:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <SysTick_Config+0x40>)
 8006ec8:	2207      	movs	r2, #7
 8006eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	e000e010 	.word	0xe000e010

08006edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff fe11 	bl	8006b0c <__NVIC_SetPriorityGrouping>
}
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	4603      	mov	r3, r0
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f04:	f7ff fe26 	bl	8006b54 <__NVIC_GetPriorityGrouping>
 8006f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	6978      	ldr	r0, [r7, #20]
 8006f10:	f7ff ff42 	bl	8006d98 <NVIC_EncodePriority>
 8006f14:	4602      	mov	r2, r0
 8006f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fee9 	bl	8006cf4 <__NVIC_SetPriority>
}
 8006f22:	bf00      	nop
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	4603      	mov	r3, r0
 8006f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fe19 	bl	8006b70 <__NVIC_EnableIRQ>
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff fe29 	bl	8006bac <__NVIC_DisableIRQ>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006f66:	f7ff ff81 	bl	8006e6c <__NVIC_SystemReset>

08006f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff ff90 	bl	8006e98 <SysTick_Config>
 8006f78:	4603      	mov	r3, r0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006f86:	f3bf 8f5f 	dmb	sy
}
 8006f8a:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_MPU_Disable+0x26>)
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	4a05      	ldr	r2, [pc, #20]	; (8006fa8 <HAL_MPU_Disable+0x26>)
 8006f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f96:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <HAL_MPU_Disable+0x2a>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	e000ed00 	.word	0xe000ed00
 8006fac:	e000ed90 	.word	0xe000ed90

08006fb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006fb8:	4a0b      	ldr	r2, [pc, #44]	; (8006fe8 <HAL_MPU_Enable+0x38>)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <HAL_MPU_Enable+0x3c>)
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <HAL_MPU_Enable+0x3c>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fcc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006fce:	f3bf 8f4f 	dsb	sy
}
 8006fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006fd4:	f3bf 8f6f 	isb	sy
}
 8006fd8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e000ed90 	.word	0xe000ed90
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	785a      	ldrb	r2, [r3, #1]
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_MPU_ConfigRegion+0x84>)
 8006ffe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d029      	beq.n	800705c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8007008:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <HAL_MPU_ConfigRegion+0x84>)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7b1b      	ldrb	r3, [r3, #12]
 8007014:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7adb      	ldrb	r3, [r3, #11]
 800701a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800701c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7a9b      	ldrb	r3, [r3, #10]
 8007022:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007024:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	7b5b      	ldrb	r3, [r3, #13]
 800702a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800702c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7b9b      	ldrb	r3, [r3, #14]
 8007032:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007034:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	7bdb      	ldrb	r3, [r3, #15]
 800703a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800703c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7a5b      	ldrb	r3, [r3, #9]
 8007042:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007044:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	7a1b      	ldrb	r3, [r3, #8]
 800704a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800704c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	7812      	ldrb	r2, [r2, #0]
 8007052:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007054:	4a07      	ldr	r2, [pc, #28]	; (8007074 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007056:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007058:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800705a:	e005      	b.n	8007068 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_MPU_ConfigRegion+0x84>)
 800705e:	2200      	movs	r2, #0
 8007060:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8007062:	4b04      	ldr	r3, [pc, #16]	; (8007074 <HAL_MPU_ConfigRegion+0x84>)
 8007064:	2200      	movs	r2, #0
 8007066:	611a      	str	r2, [r3, #16]
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	e000ed90 	.word	0xe000ed90

08007078 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 800707c:	f7ff fd6a 	bl	8006b54 <__NVIC_GetPriorityGrouping>
 8007080:	4603      	mov	r3, r0
}
 8007082:	4618      	mov	r0, r3
 8007084:	bd80      	pop	{r7, pc}

08007086 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8007096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fe54 	bl	8006d48 <__NVIC_GetPriority>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	f7ff feaa 	bl	8006dfe <NVIC_DecodePriority>
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	4603      	mov	r3, r0
 80070ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80070bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fdb9 	bl	8006c38 <__NVIC_SetPendingIRQ>
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	4603      	mov	r3, r0
 80070d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80070d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fd89 	bl	8006bf4 <__NVIC_GetPendingIRQ>
 80070e2:	4603      	mov	r3, r0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80070f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fdba 	bl	8006c74 <__NVIC_ClearPendingIRQ>
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8007112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fdca 	bl	8006cb0 <__NVIC_GetActive>
 800711c:	4603      	mov	r3, r0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d106      	bne.n	8007142 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a08      	ldr	r2, [pc, #32]	; (800715c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 800713a:	f043 0304 	orr.w	r3, r3, #4
 800713e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8007140:	e005      	b.n	800714e <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007148:	f023 0304 	bic.w	r3, r3, #4
 800714c:	6013      	str	r3, [r2, #0]
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	e000e010 	.word	0xe000e010

08007160 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007164:	f000 f802 	bl	800716c <HAL_SYSTICK_Callback>
}
 8007168:	bf00      	nop
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e014      	b.n	80071b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	791b      	ldrb	r3, [r3, #4]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7fe fb65 	bl	800586c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e00f      	b.n	80071f0 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fe fb8c 	bl	80058f4 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	795b      	ldrb	r3, [r3, #5]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_DAC_Start+0x16>
 800720a:	2302      	movs	r3, #2
 800720c:	e040      	b.n	8007290 <HAL_DAC_Start+0x98>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2201      	movs	r2, #1
 8007228:	409a      	lsls	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10f      	bne.n	8007258 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007242:	2b3c      	cmp	r3, #60	; 0x3c
 8007244:	d11d      	bne.n	8007282 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	605a      	str	r2, [r3, #4]
 8007256:	e014      	b.n	8007282 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	213c      	movs	r1, #60	; 0x3c
 800726a:	fa01 f303 	lsl.w	r3, r1, r3
 800726e:	429a      	cmp	r2, r3
 8007270:	d107      	bne.n	8007282 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0202 	orr.w	r2, r2, #2
 8007280:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2201      	movs	r2, #1
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	43da      	mvns	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	400a      	ands	r2, r1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b086      	sub	sp, #24
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	795b      	ldrb	r3, [r3, #5]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_DAC_Start_DMA+0x22>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e0ab      	b.n	8007450 <HAL_DAC_Start_DMA+0x17a>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2202      	movs	r2, #2
 8007302:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d12f      	bne.n	800736a <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	4a52      	ldr	r2, [pc, #328]	; (8007458 <HAL_DAC_Start_DMA+0x182>)
 8007310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	4a51      	ldr	r2, [pc, #324]	; (800745c <HAL_DAC_Start_DMA+0x186>)
 8007318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	4a50      	ldr	r2, [pc, #320]	; (8007460 <HAL_DAC_Start_DMA+0x18a>)
 8007320:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007330:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	2b08      	cmp	r3, #8
 8007336:	d013      	beq.n	8007360 <HAL_DAC_Start_DMA+0x8a>
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	2b08      	cmp	r3, #8
 800733c:	d845      	bhi.n	80073ca <HAL_DAC_Start_DMA+0xf4>
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_DAC_Start_DMA+0x76>
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2b04      	cmp	r3, #4
 8007348:	d005      	beq.n	8007356 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800734a:	e03e      	b.n	80073ca <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	613b      	str	r3, [r7, #16]
        break;
 8007354:	e03c      	b.n	80073d0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	613b      	str	r3, [r7, #16]
        break;
 800735e:	e037      	b.n	80073d0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3310      	adds	r3, #16
 8007366:	613b      	str	r3, [r7, #16]
        break;
 8007368:	e032      	b.n	80073d0 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	4a3d      	ldr	r2, [pc, #244]	; (8007464 <HAL_DAC_Start_DMA+0x18e>)
 8007370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	4a3c      	ldr	r2, [pc, #240]	; (8007468 <HAL_DAC_Start_DMA+0x192>)
 8007378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	4a3b      	ldr	r2, [pc, #236]	; (800746c <HAL_DAC_Start_DMA+0x196>)
 8007380:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007390:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d013      	beq.n	80073c0 <HAL_DAC_Start_DMA+0xea>
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	2b08      	cmp	r3, #8
 800739c:	d817      	bhi.n	80073ce <HAL_DAC_Start_DMA+0xf8>
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_DAC_Start_DMA+0xd6>
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d005      	beq.n	80073b6 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80073aa:	e010      	b.n	80073ce <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3314      	adds	r3, #20
 80073b2:	613b      	str	r3, [r7, #16]
        break;
 80073b4:	e00c      	b.n	80073d0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3318      	adds	r3, #24
 80073bc:	613b      	str	r3, [r7, #16]
        break;
 80073be:	e007      	b.n	80073d0 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	331c      	adds	r3, #28
 80073c6:	613b      	str	r3, [r7, #16]
        break;
 80073c8:	e002      	b.n	80073d0 <HAL_DAC_Start_DMA+0xfa>
        break;
 80073ca:	bf00      	nop
 80073cc:	e000      	b.n	80073d0 <HAL_DAC_Start_DMA+0xfa>
        break;
 80073ce:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d111      	bne.n	80073fa <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6898      	ldr	r0, [r3, #8]
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	f000 fca5 	bl	8007d3e <HAL_DMA_Start_IT>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]
 80073f8:	e010      	b.n	800741c <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007408:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	68d8      	ldr	r0, [r3, #12]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	f000 fc93 	bl	8007d3e <HAL_DMA_Start_IT>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10c      	bne.n	8007442 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6819      	ldr	r1, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2201      	movs	r2, #1
 8007436:	409a      	lsls	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	e005      	b.n	800744e <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f043 0204 	orr.w	r2, r3, #4
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08007753 	.word	0x08007753
 800745c:	08007775 	.word	0x08007775
 8007460:	08007791 	.word	0x08007791
 8007464:	08007a45 	.word	0x08007a45
 8007468:	08007a67 	.word	0x08007a67
 800746c:	08007a83 	.word	0x08007a83

08007470 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	43da      	mvns	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	400a      	ands	r2, r1
 8007496:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6819      	ldr	r1, [r3, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	2201      	movs	r2, #1
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43da      	mvns	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	400a      	ands	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10d      	bne.n	80074d6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fc95 	bl	8007dee <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e00c      	b.n	80074f0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fc87 	bl	8007dee <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80074ee:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007516:	d120      	bne.n	800755a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007526:	d118      	bne.n	800755a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2204      	movs	r2, #4
 800752c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f043 0201 	orr.w	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007552:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f870 	bl	800763a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007568:	d120      	bne.n	80075ac <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007578:	d118      	bne.n	80075ac <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2204      	movs	r2, #4
 800757e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f043 0202 	orr.w	r2, r3, #2
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007594:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa28 	bl	80079fc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4413      	add	r3, r2
 80075d8:	3308      	adds	r3, #8
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e004      	b.n	80075e8 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	3314      	adds	r3, #20
 80075e6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	461a      	mov	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	371c      	adds	r7, #28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	e003      	b.n	8007674 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	795b      	ldrb	r3, [r3, #5]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_DAC_ConfigChannel+0x18>
 8007696:	2302      	movs	r3, #2
 8007698:	e03c      	b.n	8007714 <HAL_DAC_ConfigChannel+0x92>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2202      	movs	r2, #2
 80076a4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	43db      	mvns	r3, r3
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4013      	ands	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6819      	ldr	r1, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	22c0      	movs	r2, #192	; 0xc0
 80076f8:	fa02 f303 	lsl.w	r3, r2, r3
 80076fc:	43da      	mvns	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	400a      	ands	r2, r1
 8007704:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	791b      	ldrb	r3, [r3, #4]
 800772c:	b2db      	uxtb	r3, r3
}
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff ff4c 	bl	80075fe <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	711a      	strb	r2, [r3, #4]
}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff ff45 	bl	8007612 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f043 0204 	orr.w	r2, r3, #4
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff ff3b 	bl	8007626 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	711a      	strb	r2, [r3, #4]
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	795b      	ldrb	r3, [r3, #5]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_DACEx_DualStart+0x18>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e03b      	b.n	800784e <HAL_DACEx_DualStart+0x90>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0201 	orr.w	r2, r2, #1
 80077f0:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007800:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800780c:	2b3c      	cmp	r3, #60	; 0x3c
 800780e:	d103      	bne.n	8007818 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007822:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8007826:	d103      	bne.n	8007830 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6859      	ldr	r1, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	430a      	orrs	r2, r1
 800783e:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0201 	bic.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007880:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007896:	b480      	push	{r7}
 8007898:	b085      	sub	sp, #20
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	795b      	ldrb	r3, [r3, #5]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_DACEx_TriangleWaveGenerate+0x18>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e024      	b.n	80078f8 <HAL_DACEx_TriangleWaveGenerate+0x62>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2202      	movs	r2, #2
 80078b8:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80078ca:	fa01 f303 	lsl.w	r3, r1, r3
 80078ce:	43db      	mvns	r3, r3
 80078d0:	ea02 0103 	and.w	r1, r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	409a      	lsls	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	795b      	ldrb	r3, [r3, #5]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_DACEx_NoiseWaveGenerate+0x18>
 8007918:	2302      	movs	r3, #2
 800791a:	e024      	b.n	8007966 <HAL_DACEx_NoiseWaveGenerate+0x62>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007938:	fa01 f303 	lsl.w	r3, r1, r3
 800793c:	43db      	mvns	r3, r3
 800793e:	ea02 0103 	and.w	r1, r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	409a      	lsls	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8007972:	b480      	push	{r7}
 8007974:	b087      	sub	sp, #28
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b08      	cmp	r3, #8
 8007984:	d105      	bne.n	8007992 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e004      	b.n	800799c <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	3320      	adds	r3, #32
 80079aa:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 8007a36:	68fb      	ldr	r3, [r7, #12]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff ffb4 	bl	80079c0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	711a      	strb	r2, [r3, #4]
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff ffad 	bl	80079d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f043 0204 	orr.w	r2, r3, #4
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff ffa3 	bl	80079e8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	711a      	strb	r2, [r3, #4]
}
 8007aa8:	bf00      	nop
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007abc:	f7fe fed6 	bl	800686c <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e099      	b.n	8007c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aec:	e00f      	b.n	8007b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007aee:	f7fe febd 	bl	800686c <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	d908      	bls.n	8007b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2203      	movs	r2, #3
 8007b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e078      	b.n	8007c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e8      	bne.n	8007aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4b38      	ldr	r3, [pc, #224]	; (8007c08 <HAL_DMA_Init+0x158>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d107      	bne.n	8007b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	4313      	orrs	r3, r2
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d117      	bne.n	8007bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fd4d 	bl	8008654 <DMA_CheckFifoParam>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e016      	b.n	8007c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fd05 	bl	80085ea <DMA_CalcBaseAndBitshift>
 8007be0:	4603      	mov	r3, r0
 8007be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be8:	223f      	movs	r2, #63	; 0x3f
 8007bea:	409a      	lsls	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	f010803f 	.word	0xf010803f

08007c0c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e050      	b.n	8007cc0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d101      	bne.n	8007c2e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e048      	b.n	8007cc0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2221      	movs	r2, #33	; 0x21
 8007c6c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fcbb 	bl	80085ea <DMA_CalcBaseAndBitshift>
 8007c74:	4603      	mov	r3, r0
 8007c76:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ca0:	223f      	movs	r2, #63	; 0x3f
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_DMA_Start+0x20>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e026      	b.n	8007d36 <HAL_DMA_Start+0x6e>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d115      	bne.n	8007d28 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fc3c 	bl	800858e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 0201 	orr.w	r2, r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e005      	b.n	8007d34 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
 8007d32:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b086      	sub	sp, #24
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d54:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_DMA_Start_IT+0x26>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e040      	b.n	8007de6 <HAL_DMA_Start_IT+0xa8>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d12f      	bne.n	8007dd8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fbfe 	bl	800858e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d96:	223f      	movs	r2, #63	; 0x3f
 8007d98:	409a      	lsls	r2, r3
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0216 	orr.w	r2, r2, #22
 8007dac:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d007      	beq.n	8007dc6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0208 	orr.w	r2, r2, #8
 8007dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e005      	b.n	8007de4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007de0:	2302      	movs	r3, #2
 8007de2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007dfc:	f7fe fd36 	bl	800686c <HAL_GetTick>
 8007e00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d008      	beq.n	8007e20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2280      	movs	r2, #128	; 0x80
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e052      	b.n	8007ec6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0216 	bic.w	r2, r2, #22
 8007e2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d103      	bne.n	8007e50 <HAL_DMA_Abort+0x62>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0208 	bic.w	r2, r2, #8
 8007e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e70:	e013      	b.n	8007e9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e72:	f7fe fcfb 	bl	800686c <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d90c      	bls.n	8007e9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2203      	movs	r2, #3
 8007e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e015      	b.n	8007ec6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e4      	bne.n	8007e72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	223f      	movs	r2, #63	; 0x3f
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d004      	beq.n	8007eec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2280      	movs	r2, #128	; 0x80
 8007ee6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e00c      	b.n	8007f06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2205      	movs	r2, #5
 8007ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b08a      	sub	sp, #40	; 0x28
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	607a      	str	r2, [r7, #4]
 8007f1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8007f20:	2300      	movs	r3, #0
 8007f22:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8007f24:	f7fe fca2 	bl	800686c <HAL_GetTick>
 8007f28:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d008      	beq.n	8007f48 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2280      	movs	r2, #128	; 0x80
 8007f3a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0bf      	b.n	80080c8 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e0b2      	b.n	80080c8 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
 8007f74:	e005      	b.n	8007f82 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007f8e:	e05a      	b.n	8008046 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d017      	beq.n	8007fc8 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d007      	beq.n	8007fae <HAL_DMA_PollForTransfer+0x9c>
 8007f9e:	f7fe fc65 	bl	800686c <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d20c      	bcs.n	8007fc8 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e07f      	b.n	80080c8 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	409a      	lsls	r2, r3
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00b      	beq.n	8007ff6 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f043 0201 	orr.w	r2, r3, #1
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	2208      	movs	r2, #8
 8007ff0:	409a      	lsls	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	409a      	lsls	r2, r3
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	4013      	ands	r3, r2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	f043 0202 	orr.w	r2, r3, #2
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008016:	2201      	movs	r2, #1
 8008018:	409a      	lsls	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008022:	2204      	movs	r2, #4
 8008024:	409a      	lsls	r2, r3
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	4013      	ands	r3, r2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	f043 0204 	orr.w	r2, r3, #4
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803e:	2204      	movs	r2, #4
 8008040:	409a      	lsls	r2, r3
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8008046:	6a3a      	ldr	r2, [r7, #32]
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	4013      	ands	r3, r2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d105      	bne.n	800805c <HAL_DMA_PollForTransfer+0x14a>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d099      	beq.n	8007f90 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008060:	2b00      	cmp	r3, #0
 8008062:	d018      	beq.n	8008096 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d012      	beq.n	8008096 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff febc 	bl	8007dee <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807a:	2230      	movs	r2, #48	; 0x30
 800807c:	409a      	lsls	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e018      	b.n	80080c8 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10e      	bne.n	80080ba <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a0:	2230      	movs	r2, #48	; 0x30
 80080a2:	409a      	lsls	r2, r3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80080b8:	e005      	b.n	80080c6 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080be:	2210      	movs	r2, #16
 80080c0:	409a      	lsls	r2, r3
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80080c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	; 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080dc:	4b8e      	ldr	r3, [pc, #568]	; (8008318 <HAL_DMA_IRQHandler+0x248>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a8e      	ldr	r2, [pc, #568]	; (800831c <HAL_DMA_IRQHandler+0x24c>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	0a9b      	lsrs	r3, r3, #10
 80080e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fa:	2208      	movs	r2, #8
 80080fc:	409a      	lsls	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01a      	beq.n	800813c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d013      	beq.n	800813c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0204 	bic.w	r2, r2, #4
 8008122:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	2208      	movs	r2, #8
 800812a:	409a      	lsls	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008134:	f043 0201 	orr.w	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008140:	2201      	movs	r2, #1
 8008142:	409a      	lsls	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4013      	ands	r3, r2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d012      	beq.n	8008172 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800815e:	2201      	movs	r2, #1
 8008160:	409a      	lsls	r2, r3
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	f043 0202 	orr.w	r2, r3, #2
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008176:	2204      	movs	r2, #4
 8008178:	409a      	lsls	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4013      	ands	r3, r2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d012      	beq.n	80081a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008194:	2204      	movs	r2, #4
 8008196:	409a      	lsls	r2, r3
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a0:	f043 0204 	orr.w	r2, r3, #4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ac:	2210      	movs	r2, #16
 80081ae:	409a      	lsls	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4013      	ands	r3, r2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d043      	beq.n	8008240 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0308 	and.w	r3, r3, #8
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d03c      	beq.n	8008240 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ca:	2210      	movs	r2, #16
 80081cc:	409a      	lsls	r2, r3
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d018      	beq.n	8008212 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d108      	bne.n	8008200 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d024      	beq.n	8008240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	4798      	blx	r3
 80081fe:	e01f      	b.n	8008240 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01b      	beq.n	8008240 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
 8008210:	e016      	b.n	8008240 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821c:	2b00      	cmp	r3, #0
 800821e:	d107      	bne.n	8008230 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0208 	bic.w	r2, r2, #8
 800822e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008244:	2220      	movs	r2, #32
 8008246:	409a      	lsls	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 808f 	beq.w	8008370 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8087 	beq.w	8008370 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008266:	2220      	movs	r2, #32
 8008268:	409a      	lsls	r2, r3
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b05      	cmp	r3, #5
 8008278:	d136      	bne.n	80082e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0216 	bic.w	r2, r2, #22
 8008288:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008298:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <HAL_DMA_IRQHandler+0x1da>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0208 	bic.w	r2, r2, #8
 80082b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082be:	223f      	movs	r2, #63	; 0x3f
 80082c0:	409a      	lsls	r2, r3
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d07e      	beq.n	80083dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
        }
        return;
 80082e6:	e079      	b.n	80083dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01d      	beq.n	8008332 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10d      	bne.n	8008320 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008308:	2b00      	cmp	r3, #0
 800830a:	d031      	beq.n	8008370 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
 8008314:	e02c      	b.n	8008370 <HAL_DMA_IRQHandler+0x2a0>
 8008316:	bf00      	nop
 8008318:	20000058 	.word	0x20000058
 800831c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d023      	beq.n	8008370 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
 8008330:	e01e      	b.n	8008370 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10f      	bne.n	8008360 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0210 	bic.w	r2, r2, #16
 800834e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	2b00      	cmp	r3, #0
 8008376:	d032      	beq.n	80083de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d022      	beq.n	80083ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2205      	movs	r2, #5
 8008388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0201 	bic.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	3301      	adds	r3, #1
 80083a0:	60bb      	str	r3, [r7, #8]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d307      	bcc.n	80083b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f2      	bne.n	800839c <HAL_DMA_IRQHandler+0x2cc>
 80083b6:	e000      	b.n	80083ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80083b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
 80083da:	e000      	b.n	80083de <HAL_DMA_IRQHandler+0x30e>
        return;
 80083dc:	bf00      	nop
    }
  }
}
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	460b      	mov	r3, r1
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_DMA_RegisterCallback+0x20>
 8008400:	2302      	movs	r3, #2
 8008402:	e03c      	b.n	800847e <HAL_DMA_RegisterCallback+0x9a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	d129      	bne.n	800846c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	2b05      	cmp	r3, #5
 800841c:	d829      	bhi.n	8008472 <HAL_DMA_RegisterCallback+0x8e>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <HAL_DMA_RegisterCallback+0x40>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	0800843d 	.word	0x0800843d
 8008428:	08008445 	.word	0x08008445
 800842c:	0800844d 	.word	0x0800844d
 8008430:	08008455 	.word	0x08008455
 8008434:	0800845d 	.word	0x0800845d
 8008438:	08008465 	.word	0x08008465
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008442:	e017      	b.n	8008474 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800844a:	e013      	b.n	8008474 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008452:	e00f      	b.n	8008474 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800845a:	e00b      	b.n	8008474 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008462:	e007      	b.n	8008474 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800846a:	e003      	b.n	8008474 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
 8008470:	e000      	b.n	8008474 <HAL_DMA_RegisterCallback+0x90>
      break;
 8008472:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800847c:	7dfb      	ldrb	r3, [r7, #23]
}
 800847e:	4618      	mov	r0, r3
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <HAL_DMA_UnRegisterCallback+0x1e>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e052      	b.n	800854e <HAL_DMA_UnRegisterCallback+0xc4>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d141      	bne.n	8008540 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	2b06      	cmp	r3, #6
 80084c0:	d83b      	bhi.n	800853a <HAL_DMA_UnRegisterCallback+0xb0>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <HAL_DMA_UnRegisterCallback+0x3e>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084e5 	.word	0x080084e5
 80084cc:	080084ed 	.word	0x080084ed
 80084d0:	080084f5 	.word	0x080084f5
 80084d4:	080084fd 	.word	0x080084fd
 80084d8:	08008505 	.word	0x08008505
 80084dc:	0800850d 	.word	0x0800850d
 80084e0:	08008515 	.word	0x08008515
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80084ea:	e02b      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80084f2:	e027      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80084fa:	e023      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8008502:	e01f      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800850a:	e01b      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008512:	e017      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008538:	e004      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
      break;
 800853e:	e001      	b.n	8008544 <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008568:	b2db      	uxtb	r3, r3
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085aa:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d108      	bne.n	80085ce <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80085cc:	e007      	b.n	80085de <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	60da      	str	r2, [r3, #12]
}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	3b10      	subs	r3, #16
 80085fa:	4a14      	ldr	r2, [pc, #80]	; (800864c <DMA_CalcBaseAndBitshift+0x62>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008604:	4a12      	ldr	r2, [pc, #72]	; (8008650 <DMA_CalcBaseAndBitshift+0x66>)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4413      	add	r3, r2
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d909      	bls.n	800862c <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008620:	f023 0303 	bic.w	r3, r3, #3
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	659a      	str	r2, [r3, #88]	; 0x58
 800862a:	e007      	b.n	800863c <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008634:	f023 0303 	bic.w	r3, r3, #3
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	aaaaaaab 	.word	0xaaaaaaab
 8008650:	08051f64 	.word	0x08051f64

08008654 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d11f      	bne.n	80086ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d856      	bhi.n	8008722 <DMA_CheckFifoParam+0xce>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <DMA_CheckFifoParam+0x28>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	0800868d 	.word	0x0800868d
 8008680:	0800869f 	.word	0x0800869f
 8008684:	0800868d 	.word	0x0800868d
 8008688:	08008723 	.word	0x08008723
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d046      	beq.n	8008726 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800869c:	e043      	b.n	8008726 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086a6:	d140      	bne.n	800872a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086ac:	e03d      	b.n	800872a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b6:	d121      	bne.n	80086fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d837      	bhi.n	800872e <DMA_CheckFifoParam+0xda>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <DMA_CheckFifoParam+0x70>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086d5 	.word	0x080086d5
 80086c8:	080086db 	.word	0x080086db
 80086cc:	080086d5 	.word	0x080086d5
 80086d0:	080086ed 	.word	0x080086ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
      break;
 80086d8:	e030      	b.n	800873c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d025      	beq.n	8008732 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086ea:	e022      	b.n	8008732 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086f4:	d11f      	bne.n	8008736 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80086fa:	e01c      	b.n	8008736 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d903      	bls.n	800870a <DMA_CheckFifoParam+0xb6>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b03      	cmp	r3, #3
 8008706:	d003      	beq.n	8008710 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008708:	e018      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
      break;
 800870e:	e015      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	73fb      	strb	r3, [r7, #15]
      break;
 8008720:	e00b      	b.n	800873a <DMA_CheckFifoParam+0xe6>
      break;
 8008722:	bf00      	nop
 8008724:	e00a      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      break;
 8008726:	bf00      	nop
 8008728:	e008      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      break;
 800872a:	bf00      	nop
 800872c:	e006      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      break;
 800872e:	bf00      	nop
 8008730:	e004      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      break;
 8008732:	bf00      	nop
 8008734:	e002      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      break;   
 8008736:	bf00      	nop
 8008738:	e000      	b.n	800873c <DMA_CheckFifoParam+0xe8>
      break;
 800873a:	bf00      	nop
    }
  } 
  
  return status; 
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	2b80      	cmp	r3, #128	; 0x80
 8008762:	d106      	bne.n	8008772 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800876a:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	e031      	b.n	80087d6 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_DMAEx_MultiBufferStart+0x36>
 800877c:	2302      	movs	r3, #2
 800877e:	e02b      	b.n	80087d8 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	d11e      	bne.n	80087d2 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80087aa:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f001 f972 	bl	8009aa4 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e001      	b.n	80087d6 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 80087d2:	2302      	movs	r3, #2
 80087d4:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2b80      	cmp	r3, #128	; 0x80
 80087f8:	d106      	bne.n	8008808 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	f001 b911 	b.w	8009a2a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d105      	bne.n	800882c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2240      	movs	r2, #64	; 0x40
 8008824:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f001 b8ff 	b.w	8009a2a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008832:	2b01      	cmp	r3, #1
 8008834:	d102      	bne.n	800883c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8008836:	2302      	movs	r3, #2
 8008838:	f001 b8f7 	b.w	8009a2a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b01      	cmp	r3, #1
 800884e:	f041 80e5 	bne.w	8009a1c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800886e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 f910 	bl	8009aa4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	461a      	mov	r2, r3
 800888a:	4b8d      	ldr	r3, [pc, #564]	; (8008ac0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800888c:	429a      	cmp	r2, r3
 800888e:	d960      	bls.n	8008952 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a8b      	ldr	r2, [pc, #556]	; (8008ac4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d057      	beq.n	800894a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a8a      	ldr	r2, [pc, #552]	; (8008ac8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d050      	beq.n	8008946 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a88      	ldr	r2, [pc, #544]	; (8008acc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d049      	beq.n	8008942 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a87      	ldr	r2, [pc, #540]	; (8008ad0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d042      	beq.n	800893e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a85      	ldr	r2, [pc, #532]	; (8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d03a      	beq.n	8008938 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a84      	ldr	r2, [pc, #528]	; (8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d032      	beq.n	8008932 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a82      	ldr	r2, [pc, #520]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d02a      	beq.n	800892c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a81      	ldr	r2, [pc, #516]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d022      	beq.n	8008926 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a7f      	ldr	r2, [pc, #508]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01a      	beq.n	8008920 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a7e      	ldr	r2, [pc, #504]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d012      	beq.n	800891a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a7c      	ldr	r2, [pc, #496]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00a      	beq.n	8008914 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a7b      	ldr	r2, [pc, #492]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d102      	bne.n	800890e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8008908:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800890c:	e01e      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800890e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008912:	e01b      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008914:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008918:	e018      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800891a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800891e:	e015      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008920:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008924:	e012      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800892a:	e00f      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800892c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008930:	e00c      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008936:	e009      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008938:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800893c:	e006      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800893e:	2320      	movs	r3, #32
 8008940:	e004      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008942:	2320      	movs	r3, #32
 8008944:	e002      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008946:	2320      	movs	r3, #32
 8008948:	e000      	b.n	800894c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800894a:	2320      	movs	r3, #32
 800894c:	4a69      	ldr	r2, [pc, #420]	; (8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800894e:	60d3      	str	r3, [r2, #12]
 8008950:	e14f      	b.n	8008bf2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	4b67      	ldr	r3, [pc, #412]	; (8008af8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800895a:	429a      	cmp	r2, r3
 800895c:	d960      	bls.n	8008a20 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a58      	ldr	r2, [pc, #352]	; (8008ac4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d057      	beq.n	8008a18 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a56      	ldr	r2, [pc, #344]	; (8008ac8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d050      	beq.n	8008a14 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a55      	ldr	r2, [pc, #340]	; (8008acc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d049      	beq.n	8008a10 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a53      	ldr	r2, [pc, #332]	; (8008ad0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d042      	beq.n	8008a0c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a52      	ldr	r2, [pc, #328]	; (8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d03a      	beq.n	8008a06 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a50      	ldr	r2, [pc, #320]	; (8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d032      	beq.n	8008a00 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a4f      	ldr	r2, [pc, #316]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d02a      	beq.n	80089fa <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a4d      	ldr	r2, [pc, #308]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d022      	beq.n	80089f4 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a4c      	ldr	r2, [pc, #304]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d01a      	beq.n	80089ee <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a4a      	ldr	r2, [pc, #296]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d012      	beq.n	80089e8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a49      	ldr	r2, [pc, #292]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d00a      	beq.n	80089e2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a47      	ldr	r2, [pc, #284]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d102      	bne.n	80089dc <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80089d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089da:	e01e      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089e0:	e01b      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089e6:	e018      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089ec:	e015      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089f2:	e012      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089f8:	e00f      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80089fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089fe:	e00c      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a04:	e009      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a0a:	e006      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a0c:	2320      	movs	r3, #32
 8008a0e:	e004      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a10:	2320      	movs	r3, #32
 8008a12:	e002      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a14:	2320      	movs	r3, #32
 8008a16:	e000      	b.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008a18:	2320      	movs	r3, #32
 8008a1a:	4a36      	ldr	r2, [pc, #216]	; (8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8008a1c:	6093      	str	r3, [r2, #8]
 8008a1e:	e0e8      	b.n	8008bf2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
 8008a26:	4b35      	ldr	r3, [pc, #212]	; (8008afc <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	f240 8082 	bls.w	8008b32 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a24      	ldr	r2, [pc, #144]	; (8008ac4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d078      	beq.n	8008b2a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d071      	beq.n	8008b26 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a21      	ldr	r2, [pc, #132]	; (8008acc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d06a      	beq.n	8008b22 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d063      	beq.n	8008b1e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d05b      	beq.n	8008b18 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d053      	beq.n	8008b12 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a1b      	ldr	r2, [pc, #108]	; (8008adc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d04b      	beq.n	8008b0c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a19      	ldr	r2, [pc, #100]	; (8008ae0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d043      	beq.n	8008b06 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a18      	ldr	r2, [pc, #96]	; (8008ae4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d03b      	beq.n	8008b00 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a16      	ldr	r2, [pc, #88]	; (8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d012      	beq.n	8008ab8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a15      	ldr	r2, [pc, #84]	; (8008aec <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00a      	beq.n	8008ab2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a13      	ldr	r2, [pc, #76]	; (8008af0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d102      	bne.n	8008aac <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8008aa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008aaa:	e03f      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008aac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ab0:	e03c      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ab6:	e039      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ab8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008abc:	e036      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008abe:	bf00      	nop
 8008ac0:	40026458 	.word	0x40026458
 8008ac4:	40026010 	.word	0x40026010
 8008ac8:	40026410 	.word	0x40026410
 8008acc:	40026070 	.word	0x40026070
 8008ad0:	40026470 	.word	0x40026470
 8008ad4:	40026028 	.word	0x40026028
 8008ad8:	40026428 	.word	0x40026428
 8008adc:	40026088 	.word	0x40026088
 8008ae0:	40026488 	.word	0x40026488
 8008ae4:	40026040 	.word	0x40026040
 8008ae8:	40026440 	.word	0x40026440
 8008aec:	400260a0 	.word	0x400260a0
 8008af0:	400264a0 	.word	0x400264a0
 8008af4:	40026400 	.word	0x40026400
 8008af8:	400260b8 	.word	0x400260b8
 8008afc:	40026058 	.word	0x40026058
 8008b00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b04:	e012      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b0a:	e00f      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b10:	e00c      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b16:	e009      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b1c:	e006      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b1e:	2320      	movs	r3, #32
 8008b20:	e004      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b22:	2320      	movs	r3, #32
 8008b24:	e002      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b26:	2320      	movs	r3, #32
 8008b28:	e000      	b.n	8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	4a8c      	ldr	r2, [pc, #560]	; (8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008b2e:	60d3      	str	r3, [r2, #12]
 8008b30:	e05f      	b.n	8008bf2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a8b      	ldr	r2, [pc, #556]	; (8008d64 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d057      	beq.n	8008bec <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a89      	ldr	r2, [pc, #548]	; (8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d050      	beq.n	8008be8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a88      	ldr	r2, [pc, #544]	; (8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d049      	beq.n	8008be4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a86      	ldr	r2, [pc, #536]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d042      	beq.n	8008be0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a85      	ldr	r2, [pc, #532]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d03a      	beq.n	8008bda <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a83      	ldr	r2, [pc, #524]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d032      	beq.n	8008bd4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a82      	ldr	r2, [pc, #520]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d02a      	beq.n	8008bce <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a80      	ldr	r2, [pc, #512]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d022      	beq.n	8008bc8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a7f      	ldr	r2, [pc, #508]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d01a      	beq.n	8008bc2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a7d      	ldr	r2, [pc, #500]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d012      	beq.n	8008bbc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a7c      	ldr	r2, [pc, #496]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00a      	beq.n	8008bb6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a7a      	ldr	r2, [pc, #488]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d102      	bne.n	8008bb0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8008baa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bae:	e01e      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bb4:	e01b      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bba:	e018      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bc0:	e015      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bc6:	e012      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bcc:	e00f      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bd2:	e00c      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bd8:	e009      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bde:	e006      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008be0:	2320      	movs	r3, #32
 8008be2:	e004      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008be4:	2320      	movs	r3, #32
 8008be6:	e002      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008be8:	2320      	movs	r3, #32
 8008bea:	e000      	b.n	8008bee <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008bec:	2320      	movs	r3, #32
 8008bee:	4a5c      	ldr	r2, [pc, #368]	; (8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008bf0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4b66      	ldr	r3, [pc, #408]	; (8008d94 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d960      	bls.n	8008cc0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a58      	ldr	r2, [pc, #352]	; (8008d64 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d057      	beq.n	8008cb8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a56      	ldr	r2, [pc, #344]	; (8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d050      	beq.n	8008cb4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a55      	ldr	r2, [pc, #340]	; (8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d049      	beq.n	8008cb0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a53      	ldr	r2, [pc, #332]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d042      	beq.n	8008cac <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a52      	ldr	r2, [pc, #328]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d03a      	beq.n	8008ca6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a50      	ldr	r2, [pc, #320]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d032      	beq.n	8008ca0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a4f      	ldr	r2, [pc, #316]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d02a      	beq.n	8008c9a <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a4d      	ldr	r2, [pc, #308]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d022      	beq.n	8008c94 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a4c      	ldr	r2, [pc, #304]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d01a      	beq.n	8008c8e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a4a      	ldr	r2, [pc, #296]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d012      	beq.n	8008c88 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a49      	ldr	r2, [pc, #292]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00a      	beq.n	8008c82 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a47      	ldr	r2, [pc, #284]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d102      	bne.n	8008c7c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8008c76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c7a:	e01e      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c80:	e01b      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c86:	e018      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c8c:	e015      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c92:	e012      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c98:	e00f      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9e:	e00c      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca4:	e009      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008caa:	e006      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cac:	2310      	movs	r3, #16
 8008cae:	e004      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	e002      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	e000      	b.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	4a37      	ldr	r2, [pc, #220]	; (8008d98 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8008cbc:	60d3      	str	r3, [r2, #12]
 8008cbe:	e14f      	b.n	8008f60 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4b35      	ldr	r3, [pc, #212]	; (8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	f240 8082 	bls.w	8008dd2 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a24      	ldr	r2, [pc, #144]	; (8008d64 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d078      	beq.n	8008dca <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a22      	ldr	r2, [pc, #136]	; (8008d68 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d071      	beq.n	8008dc6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a21      	ldr	r2, [pc, #132]	; (8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d06a      	beq.n	8008dc2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d063      	beq.n	8008dbe <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a1e      	ldr	r2, [pc, #120]	; (8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d05b      	beq.n	8008db8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a1c      	ldr	r2, [pc, #112]	; (8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d053      	beq.n	8008db2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a1b      	ldr	r2, [pc, #108]	; (8008d7c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d04b      	beq.n	8008dac <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a19      	ldr	r2, [pc, #100]	; (8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d043      	beq.n	8008da6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a18      	ldr	r2, [pc, #96]	; (8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d03b      	beq.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a16      	ldr	r2, [pc, #88]	; (8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d012      	beq.n	8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a15      	ldr	r2, [pc, #84]	; (8008d8c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00a      	beq.n	8008d52 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a13      	ldr	r2, [pc, #76]	; (8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d102      	bne.n	8008d4c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8008d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d4a:	e03f      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d50:	e03c      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d56:	e039      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d5c:	e036      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008d5e:	bf00      	nop
 8008d60:	40026000 	.word	0x40026000
 8008d64:	40026010 	.word	0x40026010
 8008d68:	40026410 	.word	0x40026410
 8008d6c:	40026070 	.word	0x40026070
 8008d70:	40026470 	.word	0x40026470
 8008d74:	40026028 	.word	0x40026028
 8008d78:	40026428 	.word	0x40026428
 8008d7c:	40026088 	.word	0x40026088
 8008d80:	40026488 	.word	0x40026488
 8008d84:	40026040 	.word	0x40026040
 8008d88:	40026440 	.word	0x40026440
 8008d8c:	400260a0 	.word	0x400260a0
 8008d90:	400264a0 	.word	0x400264a0
 8008d94:	40026458 	.word	0x40026458
 8008d98:	40026400 	.word	0x40026400
 8008d9c:	400260b8 	.word	0x400260b8
 8008da0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008da4:	e012      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008daa:	e00f      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008db0:	e00c      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008db6:	e009      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dbc:	e006      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	e004      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dc2:	2310      	movs	r3, #16
 8008dc4:	e002      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	e000      	b.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008dca:	2310      	movs	r3, #16
 8008dcc:	4a8c      	ldr	r2, [pc, #560]	; (8009000 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8008dce:	6093      	str	r3, [r2, #8]
 8008dd0:	e0c6      	b.n	8008f60 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4b8a      	ldr	r3, [pc, #552]	; (8009004 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d960      	bls.n	8008ea0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a89      	ldr	r2, [pc, #548]	; (8009008 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d057      	beq.n	8008e98 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a87      	ldr	r2, [pc, #540]	; (800900c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d050      	beq.n	8008e94 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a86      	ldr	r2, [pc, #536]	; (8009010 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d049      	beq.n	8008e90 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a84      	ldr	r2, [pc, #528]	; (8009014 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d042      	beq.n	8008e8c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a83      	ldr	r2, [pc, #524]	; (8009018 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d03a      	beq.n	8008e86 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a81      	ldr	r2, [pc, #516]	; (800901c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d032      	beq.n	8008e80 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a80      	ldr	r2, [pc, #512]	; (8009020 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d02a      	beq.n	8008e7a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a7e      	ldr	r2, [pc, #504]	; (8009024 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d022      	beq.n	8008e74 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a7d      	ldr	r2, [pc, #500]	; (8009028 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d01a      	beq.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a7b      	ldr	r2, [pc, #492]	; (800902c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d012      	beq.n	8008e68 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a7a      	ldr	r2, [pc, #488]	; (8009030 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00a      	beq.n	8008e62 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a78      	ldr	r2, [pc, #480]	; (8009034 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d102      	bne.n	8008e5c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8008e56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e5a:	e01e      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e60:	e01b      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e66:	e018      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e6c:	e015      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e72:	e012      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e78:	e00f      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e7e:	e00c      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e84:	e009      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e8a:	e006      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	e004      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e90:	2310      	movs	r3, #16
 8008e92:	e002      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e94:	2310      	movs	r3, #16
 8008e96:	e000      	b.n	8008e9a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	4a67      	ldr	r2, [pc, #412]	; (8009038 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008e9c:	60d3      	str	r3, [r2, #12]
 8008e9e:	e05f      	b.n	8008f60 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a58      	ldr	r2, [pc, #352]	; (8009008 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d057      	beq.n	8008f5a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a57      	ldr	r2, [pc, #348]	; (800900c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d050      	beq.n	8008f56 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a55      	ldr	r2, [pc, #340]	; (8009010 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d049      	beq.n	8008f52 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a54      	ldr	r2, [pc, #336]	; (8009014 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d042      	beq.n	8008f4e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a52      	ldr	r2, [pc, #328]	; (8009018 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d03a      	beq.n	8008f48 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a51      	ldr	r2, [pc, #324]	; (800901c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d032      	beq.n	8008f42 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a4f      	ldr	r2, [pc, #316]	; (8009020 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d02a      	beq.n	8008f3c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a4e      	ldr	r2, [pc, #312]	; (8009024 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d022      	beq.n	8008f36 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a4c      	ldr	r2, [pc, #304]	; (8009028 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d01a      	beq.n	8008f30 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a4b      	ldr	r2, [pc, #300]	; (800902c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d012      	beq.n	8008f2a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a49      	ldr	r2, [pc, #292]	; (8009030 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d00a      	beq.n	8008f24 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a48      	ldr	r2, [pc, #288]	; (8009034 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d102      	bne.n	8008f1e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8008f18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f1c:	e01e      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f22:	e01b      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f28:	e018      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f2e:	e015      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f34:	e012      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f3a:	e00f      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f40:	e00c      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f46:	e009      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f4c:	e006      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f4e:	2310      	movs	r3, #16
 8008f50:	e004      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f52:	2310      	movs	r3, #16
 8008f54:	e002      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f56:	2310      	movs	r3, #16
 8008f58:	e000      	b.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008f5a:	2310      	movs	r3, #16
 8008f5c:	4a36      	ldr	r2, [pc, #216]	; (8009038 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008f5e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b35      	ldr	r3, [pc, #212]	; (800903c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	f240 8082 	bls.w	8009072 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a25      	ldr	r2, [pc, #148]	; (8009008 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d078      	beq.n	800906a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a23      	ldr	r2, [pc, #140]	; (800900c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d071      	beq.n	8009066 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a22      	ldr	r2, [pc, #136]	; (8009010 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d06a      	beq.n	8009062 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a20      	ldr	r2, [pc, #128]	; (8009014 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d063      	beq.n	800905e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a1f      	ldr	r2, [pc, #124]	; (8009018 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d05b      	beq.n	8009058 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a1d      	ldr	r2, [pc, #116]	; (800901c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d053      	beq.n	8009052 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a1c      	ldr	r2, [pc, #112]	; (8009020 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d04b      	beq.n	800904c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a1a      	ldr	r2, [pc, #104]	; (8009024 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d043      	beq.n	8009046 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a19      	ldr	r2, [pc, #100]	; (8009028 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d03b      	beq.n	8009040 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a17      	ldr	r2, [pc, #92]	; (800902c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d012      	beq.n	8008ff8 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a16      	ldr	r2, [pc, #88]	; (8009030 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00a      	beq.n	8008ff2 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a14      	ldr	r2, [pc, #80]	; (8009034 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d102      	bne.n	8008fec <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8008fe6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fea:	e03f      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ff0:	e03c      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008ff2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ff6:	e039      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008ff8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ffc:	e036      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008ffe:	bf00      	nop
 8009000:	40026400 	.word	0x40026400
 8009004:	40026058 	.word	0x40026058
 8009008:	40026010 	.word	0x40026010
 800900c:	40026410 	.word	0x40026410
 8009010:	40026070 	.word	0x40026070
 8009014:	40026470 	.word	0x40026470
 8009018:	40026028 	.word	0x40026028
 800901c:	40026428 	.word	0x40026428
 8009020:	40026088 	.word	0x40026088
 8009024:	40026488 	.word	0x40026488
 8009028:	40026040 	.word	0x40026040
 800902c:	40026440 	.word	0x40026440
 8009030:	400260a0 	.word	0x400260a0
 8009034:	400264a0 	.word	0x400264a0
 8009038:	40026000 	.word	0x40026000
 800903c:	40026458 	.word	0x40026458
 8009040:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009044:	e012      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800904a:	e00f      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800904c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009050:	e00c      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009056:	e009      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800905c:	e006      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800905e:	2308      	movs	r3, #8
 8009060:	e004      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009062:	2308      	movs	r3, #8
 8009064:	e002      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009066:	2308      	movs	r3, #8
 8009068:	e000      	b.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800906a:	2308      	movs	r3, #8
 800906c:	4a8c      	ldr	r2, [pc, #560]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800906e:	60d3      	str	r3, [r2, #12]
 8009070:	e14e      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	4b8a      	ldr	r3, [pc, #552]	; (80092a4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800907a:	429a      	cmp	r2, r3
 800907c:	d960      	bls.n	8009140 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a89      	ldr	r2, [pc, #548]	; (80092a8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d057      	beq.n	8009138 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a87      	ldr	r2, [pc, #540]	; (80092ac <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d050      	beq.n	8009134 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a86      	ldr	r2, [pc, #536]	; (80092b0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d049      	beq.n	8009130 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a84      	ldr	r2, [pc, #528]	; (80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d042      	beq.n	800912c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a83      	ldr	r2, [pc, #524]	; (80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d03a      	beq.n	8009126 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a81      	ldr	r2, [pc, #516]	; (80092bc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d032      	beq.n	8009120 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a80      	ldr	r2, [pc, #512]	; (80092c0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d02a      	beq.n	800911a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a7e      	ldr	r2, [pc, #504]	; (80092c4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d022      	beq.n	8009114 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a7d      	ldr	r2, [pc, #500]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01a      	beq.n	800910e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a7b      	ldr	r2, [pc, #492]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d012      	beq.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a7a      	ldr	r2, [pc, #488]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00a      	beq.n	8009102 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a78      	ldr	r2, [pc, #480]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d102      	bne.n	80090fc <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 80090f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090fa:	e01e      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80090fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009100:	e01b      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009102:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009106:	e018      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009108:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800910c:	e015      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800910e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009112:	e012      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009118:	e00f      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800911a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800911e:	e00c      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009124:	e009      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800912a:	e006      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800912c:	2308      	movs	r3, #8
 800912e:	e004      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009130:	2308      	movs	r3, #8
 8009132:	e002      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009134:	2308      	movs	r3, #8
 8009136:	e000      	b.n	800913a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009138:	2308      	movs	r3, #8
 800913a:	4a59      	ldr	r2, [pc, #356]	; (80092a0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800913c:	6093      	str	r3, [r2, #8]
 800913e:	e0e7      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	4b64      	ldr	r3, [pc, #400]	; (80092d8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8009148:	429a      	cmp	r2, r3
 800914a:	d960      	bls.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a55      	ldr	r2, [pc, #340]	; (80092a8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d057      	beq.n	8009206 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a54      	ldr	r2, [pc, #336]	; (80092ac <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d050      	beq.n	8009202 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a52      	ldr	r2, [pc, #328]	; (80092b0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d049      	beq.n	80091fe <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a51      	ldr	r2, [pc, #324]	; (80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d042      	beq.n	80091fa <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a4f      	ldr	r2, [pc, #316]	; (80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d03a      	beq.n	80091f4 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a4e      	ldr	r2, [pc, #312]	; (80092bc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d032      	beq.n	80091ee <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a4c      	ldr	r2, [pc, #304]	; (80092c0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d02a      	beq.n	80091e8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a4b      	ldr	r2, [pc, #300]	; (80092c4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d022      	beq.n	80091e2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a49      	ldr	r2, [pc, #292]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d01a      	beq.n	80091dc <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a48      	ldr	r2, [pc, #288]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d012      	beq.n	80091d6 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a46      	ldr	r2, [pc, #280]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d00a      	beq.n	80091d0 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a45      	ldr	r2, [pc, #276]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d102      	bne.n	80091ca <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80091c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091c8:	e01e      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091ce:	e01b      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091d4:	e018      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091da:	e015      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091e0:	e012      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091e6:	e00f      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091ec:	e00c      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f2:	e009      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f8:	e006      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091fa:	2308      	movs	r3, #8
 80091fc:	e004      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80091fe:	2308      	movs	r3, #8
 8009200:	e002      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009202:	2308      	movs	r3, #8
 8009204:	e000      	b.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009206:	2308      	movs	r3, #8
 8009208:	4a34      	ldr	r2, [pc, #208]	; (80092dc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800920a:	60d3      	str	r3, [r2, #12]
 800920c:	e080      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a25      	ldr	r2, [pc, #148]	; (80092a8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d078      	beq.n	800930a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a23      	ldr	r2, [pc, #140]	; (80092ac <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d071      	beq.n	8009306 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a22      	ldr	r2, [pc, #136]	; (80092b0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d06a      	beq.n	8009302 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a20      	ldr	r2, [pc, #128]	; (80092b4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d063      	beq.n	80092fe <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1f      	ldr	r2, [pc, #124]	; (80092b8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d05b      	beq.n	80092f8 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1d      	ldr	r2, [pc, #116]	; (80092bc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d053      	beq.n	80092f2 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a1c      	ldr	r2, [pc, #112]	; (80092c0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d04b      	beq.n	80092ec <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a1a      	ldr	r2, [pc, #104]	; (80092c4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d043      	beq.n	80092e6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a19      	ldr	r2, [pc, #100]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d03b      	beq.n	80092e0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a17      	ldr	r2, [pc, #92]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d012      	beq.n	8009298 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a16      	ldr	r2, [pc, #88]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00a      	beq.n	8009292 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a14      	ldr	r2, [pc, #80]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d102      	bne.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8009286:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800928a:	e03f      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800928c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009290:	e03c      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009292:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009296:	e039      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009298:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800929c:	e036      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800929e:	bf00      	nop
 80092a0:	40026400 	.word	0x40026400
 80092a4:	400260b8 	.word	0x400260b8
 80092a8:	40026010 	.word	0x40026010
 80092ac:	40026410 	.word	0x40026410
 80092b0:	40026070 	.word	0x40026070
 80092b4:	40026470 	.word	0x40026470
 80092b8:	40026028 	.word	0x40026028
 80092bc:	40026428 	.word	0x40026428
 80092c0:	40026088 	.word	0x40026088
 80092c4:	40026488 	.word	0x40026488
 80092c8:	40026040 	.word	0x40026040
 80092cc:	40026440 	.word	0x40026440
 80092d0:	400260a0 	.word	0x400260a0
 80092d4:	400264a0 	.word	0x400264a0
 80092d8:	40026058 	.word	0x40026058
 80092dc:	40026000 	.word	0x40026000
 80092e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092e4:	e012      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092ea:	e00f      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f0:	e00c      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f6:	e009      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092fc:	e006      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80092fe:	2308      	movs	r3, #8
 8009300:	e004      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009302:	2308      	movs	r3, #8
 8009304:	e002      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009306:	2308      	movs	r3, #8
 8009308:	e000      	b.n	800930c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800930a:	2308      	movs	r3, #8
 800930c:	4a8a      	ldr	r2, [pc, #552]	; (8009538 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800930e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	4b89      	ldr	r3, [pc, #548]	; (800953c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8009318:	429a      	cmp	r2, r3
 800931a:	d960      	bls.n	80093de <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a87      	ldr	r2, [pc, #540]	; (8009540 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d057      	beq.n	80093d6 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a86      	ldr	r2, [pc, #536]	; (8009544 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d050      	beq.n	80093d2 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a84      	ldr	r2, [pc, #528]	; (8009548 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d049      	beq.n	80093ce <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a83      	ldr	r2, [pc, #524]	; (800954c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d042      	beq.n	80093ca <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a81      	ldr	r2, [pc, #516]	; (8009550 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d03a      	beq.n	80093c4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a80      	ldr	r2, [pc, #512]	; (8009554 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d032      	beq.n	80093be <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a7e      	ldr	r2, [pc, #504]	; (8009558 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d02a      	beq.n	80093b8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a7d      	ldr	r2, [pc, #500]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d022      	beq.n	80093b2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a7b      	ldr	r2, [pc, #492]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d01a      	beq.n	80093ac <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a7a      	ldr	r2, [pc, #488]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d012      	beq.n	80093a6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a78      	ldr	r2, [pc, #480]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d00a      	beq.n	80093a0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a77      	ldr	r2, [pc, #476]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d102      	bne.n	800939a <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8009394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009398:	e01e      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800939a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800939e:	e01b      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093a4:	e018      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093aa:	e015      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093b0:	e012      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093b6:	e00f      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093bc:	e00c      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093c2:	e009      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093c8:	e006      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093ca:	2304      	movs	r3, #4
 80093cc:	e004      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093ce:	2304      	movs	r3, #4
 80093d0:	e002      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093d2:	2304      	movs	r3, #4
 80093d4:	e000      	b.n	80093d8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80093d6:	2304      	movs	r3, #4
 80093d8:	4a65      	ldr	r2, [pc, #404]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80093da:	60d3      	str	r3, [r2, #12]
 80093dc:	e150      	b.n	8009680 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	4b63      	ldr	r3, [pc, #396]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d960      	bls.n	80094ac <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a54      	ldr	r2, [pc, #336]	; (8009540 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d057      	beq.n	80094a4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a52      	ldr	r2, [pc, #328]	; (8009544 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d050      	beq.n	80094a0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a51      	ldr	r2, [pc, #324]	; (8009548 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d049      	beq.n	800949c <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a4f      	ldr	r2, [pc, #316]	; (800954c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d042      	beq.n	8009498 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a4e      	ldr	r2, [pc, #312]	; (8009550 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d03a      	beq.n	8009492 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a4c      	ldr	r2, [pc, #304]	; (8009554 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d032      	beq.n	800948c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a4b      	ldr	r2, [pc, #300]	; (8009558 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d02a      	beq.n	8009486 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a49      	ldr	r2, [pc, #292]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d022      	beq.n	8009480 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a48      	ldr	r2, [pc, #288]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d01a      	beq.n	800947a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a46      	ldr	r2, [pc, #280]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d012      	beq.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a45      	ldr	r2, [pc, #276]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00a      	beq.n	800946e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a43      	ldr	r2, [pc, #268]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d102      	bne.n	8009468 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009462:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009466:	e01e      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800946c:	e01b      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800946e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009472:	e018      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009474:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009478:	e015      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800947a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800947e:	e012      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009484:	e00f      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800948a:	e00c      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800948c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009490:	e009      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009496:	e006      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009498:	2304      	movs	r3, #4
 800949a:	e004      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800949c:	2304      	movs	r3, #4
 800949e:	e002      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80094a0:	2304      	movs	r3, #4
 80094a2:	e000      	b.n	80094a6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80094a4:	2304      	movs	r3, #4
 80094a6:	4a32      	ldr	r2, [pc, #200]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80094a8:	6093      	str	r3, [r2, #8]
 80094aa:	e0e9      	b.n	8009680 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	4b31      	ldr	r3, [pc, #196]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80094b4:	429a      	cmp	r2, r3
 80094b6:	f240 8083 	bls.w	80095c0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a20      	ldr	r2, [pc, #128]	; (8009540 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d079      	beq.n	80095b8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d072      	beq.n	80095b4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a1d      	ldr	r2, [pc, #116]	; (8009548 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d06b      	beq.n	80095b0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a1b      	ldr	r2, [pc, #108]	; (800954c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d064      	beq.n	80095ac <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a1a      	ldr	r2, [pc, #104]	; (8009550 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d05c      	beq.n	80095a6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a18      	ldr	r2, [pc, #96]	; (8009554 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d054      	beq.n	80095a0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a17      	ldr	r2, [pc, #92]	; (8009558 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d04c      	beq.n	800959a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a15      	ldr	r2, [pc, #84]	; (800955c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d044      	beq.n	8009594 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a14      	ldr	r2, [pc, #80]	; (8009560 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d03c      	beq.n	800958e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a12      	ldr	r2, [pc, #72]	; (8009564 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d034      	beq.n	8009588 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a11      	ldr	r2, [pc, #68]	; (8009568 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d02c      	beq.n	8009582 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a0f      	ldr	r2, [pc, #60]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d124      	bne.n	800957c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8009532:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009536:	e040      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009538:	40026000 	.word	0x40026000
 800953c:	40026458 	.word	0x40026458
 8009540:	40026010 	.word	0x40026010
 8009544:	40026410 	.word	0x40026410
 8009548:	40026070 	.word	0x40026070
 800954c:	40026470 	.word	0x40026470
 8009550:	40026028 	.word	0x40026028
 8009554:	40026428 	.word	0x40026428
 8009558:	40026088 	.word	0x40026088
 800955c:	40026488 	.word	0x40026488
 8009560:	40026040 	.word	0x40026040
 8009564:	40026440 	.word	0x40026440
 8009568:	400260a0 	.word	0x400260a0
 800956c:	400264a0 	.word	0x400264a0
 8009570:	40026400 	.word	0x40026400
 8009574:	400260b8 	.word	0x400260b8
 8009578:	40026058 	.word	0x40026058
 800957c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009580:	e01b      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009582:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009586:	e018      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009588:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800958c:	e015      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800958e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009592:	e012      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009598:	e00f      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800959a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800959e:	e00c      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095a4:	e009      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095aa:	e006      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095ac:	2304      	movs	r3, #4
 80095ae:	e004      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095b0:	2304      	movs	r3, #4
 80095b2:	e002      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095b4:	2304      	movs	r3, #4
 80095b6:	e000      	b.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80095b8:	2304      	movs	r3, #4
 80095ba:	4a8b      	ldr	r2, [pc, #556]	; (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80095bc:	60d3      	str	r3, [r2, #12]
 80095be:	e05f      	b.n	8009680 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a89      	ldr	r2, [pc, #548]	; (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d057      	beq.n	800967a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a88      	ldr	r2, [pc, #544]	; (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d050      	beq.n	8009676 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a86      	ldr	r2, [pc, #536]	; (80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d049      	beq.n	8009672 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a85      	ldr	r2, [pc, #532]	; (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d042      	beq.n	800966e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a83      	ldr	r2, [pc, #524]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d03a      	beq.n	8009668 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a82      	ldr	r2, [pc, #520]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d032      	beq.n	8009662 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a80      	ldr	r2, [pc, #512]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d02a      	beq.n	800965c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a7f      	ldr	r2, [pc, #508]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d022      	beq.n	8009656 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a7d      	ldr	r2, [pc, #500]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01a      	beq.n	8009650 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a7c      	ldr	r2, [pc, #496]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d012      	beq.n	800964a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a7a      	ldr	r2, [pc, #488]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d00a      	beq.n	8009644 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a79      	ldr	r2, [pc, #484]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d102      	bne.n	800963e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8009638:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800963c:	e01e      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800963e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009642:	e01b      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009644:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009648:	e018      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800964a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800964e:	e015      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009654:	e012      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800965a:	e00f      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800965c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009660:	e00c      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009666:	e009      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800966c:	e006      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800966e:	2304      	movs	r3, #4
 8009670:	e004      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009672:	2304      	movs	r3, #4
 8009674:	e002      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009676:	2304      	movs	r3, #4
 8009678:	e000      	b.n	800967c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800967a:	2304      	movs	r3, #4
 800967c:	4a5a      	ldr	r2, [pc, #360]	; (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800967e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	4b65      	ldr	r3, [pc, #404]	; (800981c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009688:	429a      	cmp	r2, r3
 800968a:	d95c      	bls.n	8009746 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a56      	ldr	r2, [pc, #344]	; (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d053      	beq.n	800973e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a55      	ldr	r2, [pc, #340]	; (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d04c      	beq.n	800973a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a53      	ldr	r2, [pc, #332]	; (80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d045      	beq.n	8009736 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a52      	ldr	r2, [pc, #328]	; (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d03e      	beq.n	8009732 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a50      	ldr	r2, [pc, #320]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d037      	beq.n	800972e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a4f      	ldr	r2, [pc, #316]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d030      	beq.n	800972a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a4d      	ldr	r2, [pc, #308]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d029      	beq.n	8009726 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a4c      	ldr	r2, [pc, #304]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d022      	beq.n	8009722 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a4a      	ldr	r2, [pc, #296]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d01a      	beq.n	800971c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a49      	ldr	r2, [pc, #292]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d012      	beq.n	8009716 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a47      	ldr	r2, [pc, #284]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00a      	beq.n	8009710 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a46      	ldr	r2, [pc, #280]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d102      	bne.n	800970a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8009704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009708:	e01a      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800970a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800970e:	e017      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009714:	e014      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800971a:	e011      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800971c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009720:	e00e      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009722:	2340      	movs	r3, #64	; 0x40
 8009724:	e00c      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	e00a      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800972a:	2340      	movs	r3, #64	; 0x40
 800972c:	e008      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800972e:	2340      	movs	r3, #64	; 0x40
 8009730:	e006      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009732:	2301      	movs	r3, #1
 8009734:	e004      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009736:	2301      	movs	r3, #1
 8009738:	e002      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800973e:	2301      	movs	r3, #1
 8009740:	4a37      	ldr	r2, [pc, #220]	; (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8009742:	60d3      	str	r3, [r2, #12]
 8009744:	e141      	b.n	80099ca <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	4b35      	ldr	r3, [pc, #212]	; (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800974e:	429a      	cmp	r2, r3
 8009750:	d97c      	bls.n	800984c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a25      	ldr	r2, [pc, #148]	; (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d073      	beq.n	8009844 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a23      	ldr	r2, [pc, #140]	; (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d06c      	beq.n	8009840 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a22      	ldr	r2, [pc, #136]	; (80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d065      	beq.n	800983c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d05e      	beq.n	8009838 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a1f      	ldr	r2, [pc, #124]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d057      	beq.n	8009834 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a1d      	ldr	r2, [pc, #116]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d050      	beq.n	8009830 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a1c      	ldr	r2, [pc, #112]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d049      	beq.n	800982c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a1a      	ldr	r2, [pc, #104]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d042      	beq.n	8009828 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a19      	ldr	r2, [pc, #100]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d01a      	beq.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a17      	ldr	r2, [pc, #92]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d012      	beq.n	80097dc <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a16      	ldr	r2, [pc, #88]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00a      	beq.n	80097d6 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a14      	ldr	r2, [pc, #80]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d102      	bne.n	80097d0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80097ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097ce:	e03a      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097d4:	e037      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097da:	e034      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097e0:	e031      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097e6:	e02e      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80097e8:	40026000 	.word	0x40026000
 80097ec:	40026010 	.word	0x40026010
 80097f0:	40026410 	.word	0x40026410
 80097f4:	40026070 	.word	0x40026070
 80097f8:	40026470 	.word	0x40026470
 80097fc:	40026028 	.word	0x40026028
 8009800:	40026428 	.word	0x40026428
 8009804:	40026088 	.word	0x40026088
 8009808:	40026488 	.word	0x40026488
 800980c:	40026040 	.word	0x40026040
 8009810:	40026440 	.word	0x40026440
 8009814:	400260a0 	.word	0x400260a0
 8009818:	400264a0 	.word	0x400264a0
 800981c:	40026458 	.word	0x40026458
 8009820:	40026400 	.word	0x40026400
 8009824:	400260b8 	.word	0x400260b8
 8009828:	2340      	movs	r3, #64	; 0x40
 800982a:	e00c      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800982c:	2340      	movs	r3, #64	; 0x40
 800982e:	e00a      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009830:	2340      	movs	r3, #64	; 0x40
 8009832:	e008      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	e006      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009838:	2301      	movs	r3, #1
 800983a:	e004      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800983c:	2301      	movs	r3, #1
 800983e:	e002      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009840:	2301      	movs	r3, #1
 8009842:	e000      	b.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009844:	2301      	movs	r3, #1
 8009846:	4a7b      	ldr	r2, [pc, #492]	; (8009a34 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009848:	6093      	str	r3, [r2, #8]
 800984a:	e0be      	b.n	80099ca <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	461a      	mov	r2, r3
 8009852:	4b79      	ldr	r3, [pc, #484]	; (8009a38 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009854:	429a      	cmp	r2, r3
 8009856:	d95c      	bls.n	8009912 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a77      	ldr	r2, [pc, #476]	; (8009a3c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d053      	beq.n	800990a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a76      	ldr	r2, [pc, #472]	; (8009a40 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d04c      	beq.n	8009906 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a74      	ldr	r2, [pc, #464]	; (8009a44 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d045      	beq.n	8009902 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a73      	ldr	r2, [pc, #460]	; (8009a48 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d03e      	beq.n	80098fe <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a71      	ldr	r2, [pc, #452]	; (8009a4c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d037      	beq.n	80098fa <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a70      	ldr	r2, [pc, #448]	; (8009a50 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d030      	beq.n	80098f6 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a6e      	ldr	r2, [pc, #440]	; (8009a54 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d029      	beq.n	80098f2 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a6d      	ldr	r2, [pc, #436]	; (8009a58 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d022      	beq.n	80098ee <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a6b      	ldr	r2, [pc, #428]	; (8009a5c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d01a      	beq.n	80098e8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a6a      	ldr	r2, [pc, #424]	; (8009a60 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d012      	beq.n	80098e2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a68      	ldr	r2, [pc, #416]	; (8009a64 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00a      	beq.n	80098dc <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a67      	ldr	r2, [pc, #412]	; (8009a68 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d102      	bne.n	80098d6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80098d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098d4:	e01a      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098da:	e017      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098e0:	e014      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098e6:	e011      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098ec:	e00e      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098ee:	2340      	movs	r3, #64	; 0x40
 80098f0:	e00c      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098f2:	2340      	movs	r3, #64	; 0x40
 80098f4:	e00a      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098f6:	2340      	movs	r3, #64	; 0x40
 80098f8:	e008      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	e006      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80098fe:	2301      	movs	r3, #1
 8009900:	e004      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009902:	2301      	movs	r3, #1
 8009904:	e002      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800990a:	2301      	movs	r3, #1
 800990c:	4a57      	ldr	r2, [pc, #348]	; (8009a6c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800990e:	60d3      	str	r3, [r2, #12]
 8009910:	e05b      	b.n	80099ca <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a49      	ldr	r2, [pc, #292]	; (8009a3c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d053      	beq.n	80099c4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a47      	ldr	r2, [pc, #284]	; (8009a40 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d04c      	beq.n	80099c0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a46      	ldr	r2, [pc, #280]	; (8009a44 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d045      	beq.n	80099bc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a44      	ldr	r2, [pc, #272]	; (8009a48 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d03e      	beq.n	80099b8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a43      	ldr	r2, [pc, #268]	; (8009a4c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d037      	beq.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a41      	ldr	r2, [pc, #260]	; (8009a50 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d030      	beq.n	80099b0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a40      	ldr	r2, [pc, #256]	; (8009a54 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d029      	beq.n	80099ac <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a3e      	ldr	r2, [pc, #248]	; (8009a58 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d022      	beq.n	80099a8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a3d      	ldr	r2, [pc, #244]	; (8009a5c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d01a      	beq.n	80099a2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a3b      	ldr	r2, [pc, #236]	; (8009a60 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d012      	beq.n	800999c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a3a      	ldr	r2, [pc, #232]	; (8009a64 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d00a      	beq.n	8009996 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a38      	ldr	r2, [pc, #224]	; (8009a68 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d102      	bne.n	8009990 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800998a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800998e:	e01a      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009990:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009994:	e017      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800999a:	e014      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800999c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099a0:	e011      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099a6:	e00e      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099a8:	2340      	movs	r3, #64	; 0x40
 80099aa:	e00c      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099ac:	2340      	movs	r3, #64	; 0x40
 80099ae:	e00a      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	e008      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	e006      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e004      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099bc:	2301      	movs	r3, #1
 80099be:	e002      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4a29      	ldr	r2, [pc, #164]	; (8009a6c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80099c8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0216 	orr.w	r2, r2, #22
 80099d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	695a      	ldr	r2, [r3, #20]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d103      	bne.n	80099fa <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d007      	beq.n	8009a0a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0208 	orr.w	r2, r2, #8
 8009a08:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f042 0201 	orr.w	r2, r2, #1
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e005      	b.n	8009a28 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009a24:	2302      	movs	r3, #2
 8009a26:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	40026400 	.word	0x40026400
 8009a38:	40026058 	.word	0x40026058
 8009a3c:	40026010 	.word	0x40026010
 8009a40:	40026410 	.word	0x40026410
 8009a44:	40026070 	.word	0x40026070
 8009a48:	40026470 	.word	0x40026470
 8009a4c:	40026028 	.word	0x40026028
 8009a50:	40026428 	.word	0x40026428
 8009a54:	40026088 	.word	0x40026088
 8009a58:	40026488 	.word	0x40026488
 8009a5c:	40026040 	.word	0x40026040
 8009a60:	40026440 	.word	0x40026440
 8009a64:	400260a0 	.word	0x400260a0
 8009a68:	400264a0 	.word	0x400264a0
 8009a6c:	40026000 	.word	0x40026000

08009a70 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d104      	bne.n	8009a8e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	60da      	str	r2, [r3, #12]
 8009a8c:	e003      	b.n	8009a96 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d108      	bne.n	8009ad4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009ad2:	e007      	b.n	8009ae4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	60da      	str	r2, [r3, #12]
}
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <HAL_EXTI_SetConfigLine+0x16>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e08f      	b.n	8009c2a <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 031f 	and.w	r3, r3, #31
 8009b1a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	fa02 f303 	lsl.w	r3, r2, r3
 8009b24:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d052      	beq.n	8009bd8 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d006      	beq.n	8009b4c <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8009b3e:	4b3e      	ldr	r3, [pc, #248]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b40:	689a      	ldr	r2, [r3, #8]
 8009b42:	493d      	ldr	r1, [pc, #244]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	608b      	str	r3, [r1, #8]
 8009b4a:	e006      	b.n	8009b5a <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8009b4c:	4b3a      	ldr	r3, [pc, #232]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	43db      	mvns	r3, r3
 8009b54:	4938      	ldr	r1, [pc, #224]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d006      	beq.n	8009b74 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8009b66:	4b34      	ldr	r3, [pc, #208]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	4933      	ldr	r1, [pc, #204]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60cb      	str	r3, [r1, #12]
 8009b72:	e006      	b.n	8009b82 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8009b74:	4b30      	ldr	r3, [pc, #192]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	43db      	mvns	r3, r3
 8009b7c:	492e      	ldr	r1, [pc, #184]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009b7e:	4013      	ands	r3, r2
 8009b80:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009b8a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009b8e:	d123      	bne.n	8009bd8 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009b90:	4a2a      	ldr	r2, [pc, #168]	; (8009c3c <HAL_EXTI_SetConfigLine+0x14c>)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	089b      	lsrs	r3, r3, #2
 8009b96:	3302      	adds	r3, #2
 8009b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b9c:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	220f      	movs	r2, #15
 8009ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bac:	43db      	mvns	r3, r3
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009bca:	491c      	ldr	r1, [pc, #112]	; (8009c3c <HAL_EXTI_SetConfigLine+0x14c>)
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	089b      	lsrs	r3, r3, #2
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d006      	beq.n	8009bf2 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8009be4:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	4913      	ldr	r1, [pc, #76]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	600b      	str	r3, [r1, #0]
 8009bf0:	e006      	b.n	8009c00 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8009bf2:	4b11      	ldr	r3, [pc, #68]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	490f      	ldr	r1, [pc, #60]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d006      	beq.n	8009c1a <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	4909      	ldr	r1, [pc, #36]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	604b      	str	r3, [r1, #4]
 8009c18:	e006      	b.n	8009c28 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	43db      	mvns	r3, r3
 8009c22:	4905      	ldr	r1, [pc, #20]	; (8009c38 <HAL_EXTI_SetConfigLine+0x148>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	40013c00 	.word	0x40013c00
 8009c3c:	40013800 	.word	0x40013800

08009c40 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_EXTI_GetConfigLine+0x16>
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e061      	b.n	8009d1e <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 031f 	and.w	r3, r3, #31
 8009c6a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	fa02 f303 	lsl.w	r3, r2, r3
 8009c74:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8009c76:	4b2d      	ldr	r3, [pc, #180]	; (8009d2c <HAL_EXTI_GetConfigLine+0xec>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2201      	movs	r2, #1
 8009c86:	605a      	str	r2, [r3, #4]
 8009c88:	e002      	b.n	8009c90 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8009c90:	4b26      	ldr	r3, [pc, #152]	; (8009d2c <HAL_EXTI_GetConfigLine+0xec>)
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d005      	beq.n	8009ca8 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f043 0202 	orr.w	r2, r3, #2
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2200      	movs	r2, #0
 8009cac:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d02d      	beq.n	8009d1c <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8009cc0:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <HAL_EXTI_GetConfigLine+0xec>)
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8009cd2:	4b16      	ldr	r3, [pc, #88]	; (8009d2c <HAL_EXTI_GetConfigLine+0xec>)
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d005      	beq.n	8009cea <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f043 0202 	orr.w	r2, r3, #2
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009cf2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009cf6:	d111      	bne.n	8009d1c <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009cf8:	4a0d      	ldr	r2, [pc, #52]	; (8009d30 <HAL_EXTI_GetConfigLine+0xf0>)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	089b      	lsrs	r3, r3, #2
 8009cfe:	3302      	adds	r3, #2
 8009d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d04:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	fa02 f303 	lsl.w	r3, r2, r3
 8009d16:	0e1a      	lsrs	r2, r3, #24
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	40013c00 	.word	0x40013c00
 8009d30:	40013800 	.word	0x40013800

08009d34 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e04c      	b.n	8009de0 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 031f 	and.w	r3, r3, #31
 8009d4e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009d50:	2201      	movs	r2, #1
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	fa02 f303 	lsl.w	r3, r2, r3
 8009d58:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8009d5a:	4b24      	ldr	r3, [pc, #144]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	43db      	mvns	r3, r3
 8009d62:	4922      	ldr	r1, [pc, #136]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8009d68:	4b20      	ldr	r3, [pc, #128]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	43db      	mvns	r3, r3
 8009d70:	491e      	ldr	r1, [pc, #120]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d72:	4013      	ands	r3, r2
 8009d74:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d02d      	beq.n	8009dde <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8009d82:	4b1a      	ldr	r3, [pc, #104]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	4918      	ldr	r1, [pc, #96]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8009d90:	4b16      	ldr	r3, [pc, #88]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	43db      	mvns	r3, r3
 8009d98:	4914      	ldr	r1, [pc, #80]	; (8009dec <HAL_EXTI_ClearConfigLine+0xb8>)
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009da6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009daa:	d118      	bne.n	8009dde <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009dac:	4a10      	ldr	r2, [pc, #64]	; (8009df0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	089b      	lsrs	r3, r3, #2
 8009db2:	3302      	adds	r3, #2
 8009db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db8:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	220f      	movs	r2, #15
 8009dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc8:	43db      	mvns	r3, r3
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009dd0:	4907      	ldr	r1, [pc, #28]	; (8009df0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	089b      	lsrs	r3, r3, #2
 8009dd6:	3302      	adds	r3, #2
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	371c      	adds	r7, #28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	40013c00 	.word	0x40013c00
 8009df0:	40013800 	.word	0x40013800

08009df4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d103      	bne.n	8009e14 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	605a      	str	r2, [r3, #4]
      break;
 8009e12:	e002      	b.n	8009e1a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]
      break;
 8009e18:	bf00      	nop
  }

  return status;
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e003      	b.n	8009e44 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009e42:	2300      	movs	r3, #0
  }
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 031f 	and.w	r3, r3, #31
 8009e60:	2201      	movs	r2, #1
 8009e62:	fa02 f303 	lsl.w	r3, r2, r3
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <HAL_EXTI_IRQHandler+0x44>)
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4013      	ands	r3, r2
 8009e70:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d009      	beq.n	8009e8c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009e78:	4a06      	ldr	r2, [pc, #24]	; (8009e94 <HAL_EXTI_IRQHandler+0x44>)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	4798      	blx	r3
    }
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	40013c00 	.word	0x40013c00

08009e98 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 031f 	and.w	r3, r3, #31
 8009eaa:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009eac:	2201      	movs	r2, #1
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb4:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8009eb6:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <HAL_EXTI_GetPending+0x3c>)
 8009eb8:	695a      	ldr	r2, [r3, #20]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	401a      	ands	r2, r3
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec4:	60fb      	str	r3, [r7, #12]
  return regval;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	40013c00 	.word	0x40013c00

08009ed8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 031f 	and.w	r3, r3, #31
 8009eea:	2201      	movs	r2, #1
 8009eec:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8009ef2:	4a04      	ldr	r2, [pc, #16]	; (8009f04 <HAL_EXTI_ClearPending+0x2c>)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6153      	str	r3, [r2, #20]
}
 8009ef8:	bf00      	nop
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	40013c00 	.word	0x40013c00

08009f08 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 031f 	and.w	r3, r3, #31
 8009f18:	2201      	movs	r2, #1
 8009f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8009f20:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <HAL_EXTI_GenerateSWI+0x2c>)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6113      	str	r3, [r2, #16]
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	40013c00 	.word	0x40013c00

08009f38 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f4a:	4b23      	ldr	r3, [pc, #140]	; (8009fd8 <HAL_FLASH_Program+0xa0>)
 8009f4c:	7e1b      	ldrb	r3, [r3, #24]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <HAL_FLASH_Program+0x1e>
 8009f52:	2302      	movs	r3, #2
 8009f54:	e03b      	b.n	8009fce <HAL_FLASH_Program+0x96>
 8009f56:	4b20      	ldr	r3, [pc, #128]	; (8009fd8 <HAL_FLASH_Program+0xa0>)
 8009f58:	2201      	movs	r2, #1
 8009f5a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f60:	f000 f9be 	bl	800a2e0 <FLASH_WaitForLastOperation>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d12b      	bne.n	8009fc6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009f74:	783b      	ldrb	r3, [r7, #0]
 8009f76:	4619      	mov	r1, r3
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f000 fa69 	bl	800a450 <FLASH_Program_Byte>
 8009f7e:	e016      	b.n	8009fae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d105      	bne.n	8009f92 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009f86:	883b      	ldrh	r3, [r7, #0]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	68b8      	ldr	r0, [r7, #8]
 8009f8c:	f000 fa3c 	bl	800a408 <FLASH_Program_HalfWord>
 8009f90:	e00d      	b.n	8009fae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d105      	bne.n	8009fa4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	68b8      	ldr	r0, [r7, #8]
 8009f9e:	f000 fa11 	bl	800a3c4 <FLASH_Program_Word>
 8009fa2:	e004      	b.n	8009fae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f000 f9d9 	bl	800a360 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009fae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009fb2:	f000 f995 	bl	800a2e0 <FLASH_WaitForLastOperation>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009fba:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <HAL_FLASH_Program+0xa4>)
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	4a07      	ldr	r2, [pc, #28]	; (8009fdc <HAL_FLASH_Program+0xa4>)
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009fc6:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <HAL_FLASH_Program+0xa0>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000d9c 	.word	0x20000d9c
 8009fdc:	40023c00 	.word	0x40023c00

08009fe0 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009ff2:	4b20      	ldr	r3, [pc, #128]	; (800a074 <HAL_FLASH_Program_IT+0x94>)
 8009ff4:	7e1b      	ldrb	r3, [r3, #24]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_FLASH_Program_IT+0x1e>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e035      	b.n	800a06a <HAL_FLASH_Program_IT+0x8a>
 8009ffe:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <HAL_FLASH_Program_IT+0x94>)
 800a000:	2201      	movs	r2, #1
 800a002:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a004:	4b1c      	ldr	r3, [pc, #112]	; (800a078 <HAL_FLASH_Program_IT+0x98>)
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	4a1b      	ldr	r2, [pc, #108]	; (800a078 <HAL_FLASH_Program_IT+0x98>)
 800a00a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a00e:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a010:	4b19      	ldr	r3, [pc, #100]	; (800a078 <HAL_FLASH_Program_IT+0x98>)
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	4a18      	ldr	r2, [pc, #96]	; (800a078 <HAL_FLASH_Program_IT+0x98>)
 800a016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a01a:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 800a01c:	4b15      	ldr	r3, [pc, #84]	; (800a074 <HAL_FLASH_Program_IT+0x94>)
 800a01e:	2203      	movs	r2, #3
 800a020:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 800a022:	4a14      	ldr	r2, [pc, #80]	; (800a074 <HAL_FLASH_Program_IT+0x94>)
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d105      	bne.n	800a03a <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a02e:	783b      	ldrb	r3, [r7, #0]
 800a030:	4619      	mov	r1, r3
 800a032:	68b8      	ldr	r0, [r7, #8]
 800a034:	f000 fa0c 	bl	800a450 <FLASH_Program_Byte>
 800a038:	e016      	b.n	800a068 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d105      	bne.n	800a04c <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a040:	883b      	ldrh	r3, [r7, #0]
 800a042:	4619      	mov	r1, r3
 800a044:	68b8      	ldr	r0, [r7, #8]
 800a046:	f000 f9df 	bl	800a408 <FLASH_Program_HalfWord>
 800a04a:	e00d      	b.n	800a068 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d105      	bne.n	800a05e <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	4619      	mov	r1, r3
 800a056:	68b8      	ldr	r0, [r7, #8]
 800a058:	f000 f9b4 	bl	800a3c4 <FLASH_Program_Word>
 800a05c:	e004      	b.n	800a068 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a05e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a062:	68b8      	ldr	r0, [r7, #8]
 800a064:	f000 f97c 	bl	800a360 <FLASH_Program_DoubleWord>
  }

  return status;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20000d9c 	.word	0x20000d9c
 800a078:	40023c00 	.word	0x40023c00

0800a07c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a086:	4b4b      	ldr	r3, [pc, #300]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d020      	beq.n	800a0d4 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a092:	4b49      	ldr	r3, [pc, #292]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d107      	bne.n	800a0ac <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a09c:	4b46      	ldr	r3, [pc, #280]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a0a2:	4b45      	ldr	r3, [pc, #276]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a8:	60da      	str	r2, [r3, #12]
 800a0aa:	e00b      	b.n	800a0c4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a0ac:	4b42      	ldr	r3, [pc, #264]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d103      	bne.n	800a0be <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a0b6:	4b40      	ldr	r3, [pc, #256]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	607b      	str	r3, [r7, #4]
 800a0bc:	e002      	b.n	800a0c4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a0be:	4b3e      	ldr	r3, [pc, #248]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a0c4:	f000 f9e6 	bl	800a494 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f881 	bl	800a1d0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a0ce:	4b3a      	ldr	r3, [pc, #232]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a0d4:	4b37      	ldr	r3, [pc, #220]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d04a      	beq.n	800a176 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a0e0:	4b34      	ldr	r3, [pc, #208]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a0e6:	4b34      	ldr	r3, [pc, #208]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d12d      	bne.n	800a14c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a0f0:	4b31      	ldr	r3, [pc, #196]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	4a30      	ldr	r2, [pc, #192]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0f8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a0fa:	4b2f      	ldr	r3, [pc, #188]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d015      	beq.n	800a12e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800a102:	4b2d      	ldr	r3, [pc, #180]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f857 	bl	800a1bc <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a10e:	4b2a      	ldr	r3, [pc, #168]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	3301      	adds	r3, #1
 800a114:	4a28      	ldr	r2, [pc, #160]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a116:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800a118:	4b27      	ldr	r3, [pc, #156]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a11e:	4b26      	ldr	r3, [pc, #152]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a120:	7a1b      	ldrb	r3, [r3, #8]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fb84 	bl	800a834 <FLASH_Erase_Sector>
 800a12c:	e023      	b.n	800a176 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	607b      	str	r3, [r7, #4]
 800a134:	4a20      	ldr	r2, [pc, #128]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a13a:	4b1f      	ldr	r3, [pc, #124]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a140:	f000 fcb6 	bl	800aab0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f839 	bl	800a1bc <HAL_FLASH_EndOfOperationCallback>
 800a14a:	e014      	b.n	800a176 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a14c:	4b1a      	ldr	r3, [pc, #104]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b02      	cmp	r3, #2
 800a154:	d107      	bne.n	800a166 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a156:	f000 fcab 	bl	800aab0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a15a:	4b17      	ldr	r3, [pc, #92]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f82c 	bl	800a1bc <HAL_FLASH_EndOfOperationCallback>
 800a164:	e004      	b.n	800a170 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f826 	bl	800a1bc <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a170:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d114      	bne.n	800a1aa <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a180:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	4a0b      	ldr	r2, [pc, #44]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a18a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a196:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a198:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	4a05      	ldr	r2, [pc, #20]	; (800a1b4 <HAL_FLASH_IRQHandler+0x138>)
 800a19e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a1a2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a1a4:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <HAL_FLASH_IRQHandler+0x13c>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	761a      	strb	r2, [r3, #24]
  }
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40023c00 	.word	0x40023c00
 800a1b8:	20000d9c 	.word	0x20000d9c

0800a1bc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <HAL_FLASH_Unlock+0x38>)
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	da0b      	bge.n	800a20e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <HAL_FLASH_Unlock+0x38>)
 800a1f8:	4a09      	ldr	r2, [pc, #36]	; (800a220 <HAL_FLASH_Unlock+0x3c>)
 800a1fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a1fc:	4b07      	ldr	r3, [pc, #28]	; (800a21c <HAL_FLASH_Unlock+0x38>)
 800a1fe:	4a09      	ldr	r2, [pc, #36]	; (800a224 <HAL_FLASH_Unlock+0x40>)
 800a200:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a202:	4b06      	ldr	r3, [pc, #24]	; (800a21c <HAL_FLASH_Unlock+0x38>)
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	da01      	bge.n	800a20e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a20e:	79fb      	ldrb	r3, [r7, #7]
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	40023c00 	.word	0x40023c00
 800a220:	45670123 	.word	0x45670123
 800a224:	cdef89ab 	.word	0xcdef89ab

0800a228 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a228:	b480      	push	{r7}
 800a22a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a22c:	4b05      	ldr	r3, [pc, #20]	; (800a244 <HAL_FLASH_Lock+0x1c>)
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	4a04      	ldr	r2, [pc, #16]	; (800a244 <HAL_FLASH_Lock+0x1c>)
 800a232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a236:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	40023c00 	.word	0x40023c00

0800a248 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a24c:	4b09      	ldr	r3, [pc, #36]	; (800a274 <HAL_FLASH_OB_Unlock+0x2c>)
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	2b00      	cmp	r3, #0
 800a256:	d007      	beq.n	800a268 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <HAL_FLASH_OB_Unlock+0x2c>)
 800a25a:	4a07      	ldr	r2, [pc, #28]	; (800a278 <HAL_FLASH_OB_Unlock+0x30>)
 800a25c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HAL_FLASH_OB_Unlock+0x2c>)
 800a260:	4a06      	ldr	r2, [pc, #24]	; (800a27c <HAL_FLASH_OB_Unlock+0x34>)
 800a262:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a264:	2300      	movs	r3, #0
 800a266:	e000      	b.n	800a26a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	40023c00 	.word	0x40023c00
 800a278:	08192a3b 	.word	0x08192a3b
 800a27c:	4c5d6e7f 	.word	0x4c5d6e7f

0800a280 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <HAL_FLASH_OB_Lock+0x1c>)
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	4a04      	ldr	r2, [pc, #16]	; (800a29c <HAL_FLASH_OB_Lock+0x1c>)
 800a28a:	f043 0301 	orr.w	r3, r3, #1
 800a28e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	40023c00 	.word	0x40023c00

0800a2a0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a2a4:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <HAL_FLASH_OB_Launch+0x24>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <HAL_FLASH_OB_Launch+0x24>)
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a2b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a2b8:	f000 f812 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a2bc:	4603      	mov	r3, r0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	40023c14 	.word	0x40023c14

0800a2c8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a2cc:	4b03      	ldr	r3, [pc, #12]	; (800a2dc <HAL_FLASH_GetError+0x14>)
 800a2ce:	69db      	ldr	r3, [r3, #28]
}  
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000d9c 	.word	0x20000d9c

0800a2e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a2ec:	4b1a      	ldr	r3, [pc, #104]	; (800a358 <FLASH_WaitForLastOperation+0x78>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a2f2:	f7fc fabb 	bl	800686c <HAL_GetTick>
 800a2f6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a2f8:	e010      	b.n	800a31c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a300:	d00c      	beq.n	800a31c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <FLASH_WaitForLastOperation+0x38>
 800a308:	f7fc fab0 	bl	800686c <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	429a      	cmp	r2, r3
 800a316:	d201      	bcs.n	800a31c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e019      	b.n	800a350 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <FLASH_WaitForLastOperation+0x7c>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e8      	bne.n	800a2fa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a328:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <FLASH_WaitForLastOperation+0x7c>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a334:	4b09      	ldr	r3, [pc, #36]	; (800a35c <FLASH_WaitForLastOperation+0x7c>)
 800a336:	2201      	movs	r2, #1
 800a338:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a33a:	4b08      	ldr	r3, [pc, #32]	; (800a35c <FLASH_WaitForLastOperation+0x7c>)
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a346:	f000 f8a5 	bl	800a494 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
  
}  
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000d9c 	.word	0x20000d9c
 800a35c:	40023c00 	.word	0x40023c00

0800a360 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <FLASH_Program_DoubleWord+0x60>)
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <FLASH_Program_DoubleWord+0x60>)
 800a372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a378:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <FLASH_Program_DoubleWord+0x60>)
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	4a10      	ldr	r2, [pc, #64]	; (800a3c0 <FLASH_Program_DoubleWord+0x60>)
 800a37e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a384:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <FLASH_Program_DoubleWord+0x60>)
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <FLASH_Program_DoubleWord+0x60>)
 800a38a:	f043 0301 	orr.w	r3, r3, #1
 800a38e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a396:	f3bf 8f6f 	isb	sy
}
 800a39a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a39c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3a0:	f04f 0200 	mov.w	r2, #0
 800a3a4:	f04f 0300 	mov.w	r3, #0
 800a3a8:	000a      	movs	r2, r1
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	68f9      	ldr	r1, [r7, #12]
 800a3ae:	3104      	adds	r1, #4
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	600b      	str	r3, [r1, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	40023c00 	.word	0x40023c00

0800a3c4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3ce:	4b0d      	ldr	r3, [pc, #52]	; (800a404 <FLASH_Program_Word+0x40>)
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	4a0c      	ldr	r2, [pc, #48]	; (800a404 <FLASH_Program_Word+0x40>)
 800a3d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a3da:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <FLASH_Program_Word+0x40>)
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	4a09      	ldr	r2, [pc, #36]	; (800a404 <FLASH_Program_Word+0x40>)
 800a3e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a3e6:	4b07      	ldr	r3, [pc, #28]	; (800a404 <FLASH_Program_Word+0x40>)
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	4a06      	ldr	r2, [pc, #24]	; (800a404 <FLASH_Program_Word+0x40>)
 800a3ec:	f043 0301 	orr.w	r3, r3, #1
 800a3f0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	601a      	str	r2, [r3, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	40023c00 	.word	0x40023c00

0800a408 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a414:	4b0d      	ldr	r3, [pc, #52]	; (800a44c <FLASH_Program_HalfWord+0x44>)
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	4a0c      	ldr	r2, [pc, #48]	; (800a44c <FLASH_Program_HalfWord+0x44>)
 800a41a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a41e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <FLASH_Program_HalfWord+0x44>)
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	4a09      	ldr	r2, [pc, #36]	; (800a44c <FLASH_Program_HalfWord+0x44>)
 800a426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a42a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a42c:	4b07      	ldr	r3, [pc, #28]	; (800a44c <FLASH_Program_HalfWord+0x44>)
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	4a06      	ldr	r2, [pc, #24]	; (800a44c <FLASH_Program_HalfWord+0x44>)
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	887a      	ldrh	r2, [r7, #2]
 800a43c:	801a      	strh	r2, [r3, #0]
}
 800a43e:	bf00      	nop
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	40023c00 	.word	0x40023c00

0800a450 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a45c:	4b0c      	ldr	r3, [pc, #48]	; (800a490 <FLASH_Program_Byte+0x40>)
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	4a0b      	ldr	r2, [pc, #44]	; (800a490 <FLASH_Program_Byte+0x40>)
 800a462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a468:	4b09      	ldr	r3, [pc, #36]	; (800a490 <FLASH_Program_Byte+0x40>)
 800a46a:	4a09      	ldr	r2, [pc, #36]	; (800a490 <FLASH_Program_Byte+0x40>)
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a470:	4b07      	ldr	r3, [pc, #28]	; (800a490 <FLASH_Program_Byte+0x40>)
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	4a06      	ldr	r2, [pc, #24]	; (800a490 <FLASH_Program_Byte+0x40>)
 800a476:	f043 0301 	orr.w	r3, r3, #1
 800a47a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	78fa      	ldrb	r2, [r7, #3]
 800a480:	701a      	strb	r2, [r3, #0]
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	40023c00 	.word	0x40023c00

0800a494 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a494:	b480      	push	{r7}
 800a496:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a498:	4b27      	ldr	r3, [pc, #156]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d008      	beq.n	800a4b6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a4a4:	4b25      	ldr	r3, [pc, #148]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	f043 0310 	orr.w	r3, r3, #16
 800a4ac:	4a23      	ldr	r2, [pc, #140]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a4ae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a4b0:	4b21      	ldr	r3, [pc, #132]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a4b2:	2210      	movs	r2, #16
 800a4b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a4b6:	4b20      	ldr	r3, [pc, #128]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d008      	beq.n	800a4d4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a4c2:	4b1e      	ldr	r3, [pc, #120]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	f043 0308 	orr.w	r3, r3, #8
 800a4ca:	4a1c      	ldr	r2, [pc, #112]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a4cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a4ce:	4b1a      	ldr	r3, [pc, #104]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a4d4:	4b18      	ldr	r3, [pc, #96]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d008      	beq.n	800a4f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a4e0:	4b16      	ldr	r3, [pc, #88]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	f043 0304 	orr.w	r3, r3, #4
 800a4e8:	4a14      	ldr	r2, [pc, #80]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a4ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a4ec:	4b12      	ldr	r3, [pc, #72]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a4ee:	2240      	movs	r2, #64	; 0x40
 800a4f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a4f2:	4b11      	ldr	r3, [pc, #68]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a4fe:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	f043 0302 	orr.w	r3, r3, #2
 800a506:	4a0d      	ldr	r2, [pc, #52]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a508:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a50a:	4b0b      	ldr	r3, [pc, #44]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a50c:	2280      	movs	r2, #128	; 0x80
 800a50e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a510:	4b09      	ldr	r3, [pc, #36]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d008      	beq.n	800a52e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a51c:	4b07      	ldr	r3, [pc, #28]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	f043 0320 	orr.w	r3, r3, #32
 800a524:	4a05      	ldr	r2, [pc, #20]	; (800a53c <FLASH_SetErrorCode+0xa8>)
 800a526:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a528:	4b03      	ldr	r3, [pc, #12]	; (800a538 <FLASH_SetErrorCode+0xa4>)
 800a52a:	2202      	movs	r2, #2
 800a52c:	60da      	str	r2, [r3, #12]
  }
}
 800a52e:	bf00      	nop
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	40023c00 	.word	0x40023c00
 800a53c:	20000d9c 	.word	0x20000d9c

0800a540 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a54e:	2300      	movs	r3, #0
 800a550:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a552:	4b31      	ldr	r3, [pc, #196]	; (800a618 <HAL_FLASHEx_Erase+0xd8>)
 800a554:	7e1b      	ldrb	r3, [r3, #24]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_FLASHEx_Erase+0x1e>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e058      	b.n	800a610 <HAL_FLASHEx_Erase+0xd0>
 800a55e:	4b2e      	ldr	r3, [pc, #184]	; (800a618 <HAL_FLASHEx_Erase+0xd8>)
 800a560:	2201      	movs	r2, #1
 800a562:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a564:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a568:	f7ff feba 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a570:	7bfb      	ldrb	r3, [r7, #15]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d148      	bne.n	800a608 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	f04f 32ff 	mov.w	r2, #4294967295
 800a57c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d115      	bne.n	800a5b2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	f000 f92b 	bl	800a7ee <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a598:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a59c:	f7ff fea0 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a5a4:	4b1d      	ldr	r3, [pc, #116]	; (800a61c <HAL_FLASHEx_Erase+0xdc>)
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	4a1c      	ldr	r2, [pc, #112]	; (800a61c <HAL_FLASHEx_Erase+0xdc>)
 800a5aa:	f023 0304 	bic.w	r3, r3, #4
 800a5ae:	6113      	str	r3, [r2, #16]
 800a5b0:	e028      	b.n	800a604 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	60bb      	str	r3, [r7, #8]
 800a5b8:	e01c      	b.n	800a5f4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	68b8      	ldr	r0, [r7, #8]
 800a5c4:	f000 f936 	bl	800a834 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a5cc:	f7ff fe88 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a5d4:	4b11      	ldr	r3, [pc, #68]	; (800a61c <HAL_FLASHEx_Erase+0xdc>)
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	4a10      	ldr	r2, [pc, #64]	; (800a61c <HAL_FLASHEx_Erase+0xdc>)
 800a5da:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a5de:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	601a      	str	r2, [r3, #0]
          break;
 800a5ec:	e00a      	b.n	800a604 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	60bb      	str	r3, [r7, #8]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	429a      	cmp	r2, r3
 800a602:	d3da      	bcc.n	800a5ba <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a604:	f000 fa54 	bl	800aab0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a608:	4b03      	ldr	r3, [pc, #12]	; (800a618 <HAL_FLASHEx_Erase+0xd8>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	761a      	strb	r2, [r3, #24]

  return status;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000d9c 	.word	0x20000d9c
 800a61c:	40023c00 	.word	0x40023c00

0800a620 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a62c:	4b25      	ldr	r3, [pc, #148]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a62e:	7e1b      	ldrb	r3, [r3, #24]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_FLASHEx_Erase_IT+0x18>
 800a634:	2302      	movs	r3, #2
 800a636:	e040      	b.n	800a6ba <HAL_FLASHEx_Erase_IT+0x9a>
 800a638:	4b22      	ldr	r3, [pc, #136]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a63e:	4b22      	ldr	r3, [pc, #136]	; (800a6c8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	4a21      	ldr	r2, [pc, #132]	; (800a6c8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a648:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a64a:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	4a1e      	ldr	r2, [pc, #120]	; (800a6c8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a654:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800a656:	4b1c      	ldr	r3, [pc, #112]	; (800a6c8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a658:	22f3      	movs	r2, #243	; 0xf3
 800a65a:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d110      	bne.n	800a686 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800a664:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a666:	2202      	movs	r2, #2
 800a668:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	4a15      	ldr	r2, [pc, #84]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a670:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	4619      	mov	r1, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	f000 f8b5 	bl	800a7ee <FLASH_MassErase>
 800a684:	e018      	b.n	800a6b8 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a688:	2201      	movs	r2, #1
 800a68a:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a692:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	4a0a      	ldr	r2, [pc, #40]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a69a:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a6a4:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	f000 f8be 	bl	800a834 <FLASH_Erase_Sector>
  }

  return status;
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000d9c 	.word	0x20000d9c
 800a6c8:	40023c00 	.word	0x40023c00

0800a6cc <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a6d8:	4b32      	ldr	r3, [pc, #200]	; (800a7a4 <HAL_FLASHEx_OBProgram+0xd8>)
 800a6da:	7e1b      	ldrb	r3, [r3, #24]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d101      	bne.n	800a6e4 <HAL_FLASHEx_OBProgram+0x18>
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e05b      	b.n	800a79c <HAL_FLASHEx_OBProgram+0xd0>
 800a6e4:	4b2f      	ldr	r3, [pc, #188]	; (800a7a4 <HAL_FLASHEx_OBProgram+0xd8>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d018      	beq.n	800a728 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d10a      	bne.n	800a714 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	689a      	ldr	r2, [r3, #8]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	4619      	mov	r1, r3
 800a708:	4610      	mov	r0, r2
 800a70a:	f000 f8db 	bl	800a8c4 <FLASH_OB_EnableWRP>
 800a70e:	4603      	mov	r3, r0
 800a710:	73fb      	strb	r3, [r7, #15]
 800a712:	e009      	b.n	800a728 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f000 f8f2 	bl	800a908 <FLASH_OB_DisableWRP>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f904 	bl	800a948 <FLASH_OB_RDP_LevelConfig>
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d013      	beq.n	800a778 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7e1b      	ldrb	r3, [r3, #24]
 800a754:	f003 0320 	and.w	r3, r3, #32
 800a758:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a762:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a768:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	f000 f904 	bl	800a97c <FLASH_OB_UserConfig>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0308 	and.w	r3, r3, #8
 800a780:	2b00      	cmp	r3, #0
 800a782:	d007      	beq.n	800a794 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 f926 	bl	800a9dc <FLASH_OB_BOR_LevelConfig>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a794:	4b03      	ldr	r3, [pc, #12]	; (800a7a4 <HAL_FLASHEx_OBProgram+0xd8>)
 800a796:	2200      	movs	r2, #0
 800a798:	761a      	strb	r2, [r3, #24]

  return status;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20000d9c 	.word	0x20000d9c

0800a7a8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	220f      	movs	r2, #15
 800a7b4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800a7b6:	f000 f93f 	bl	800aa38 <FLASH_OB_GetWRP>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	461a      	mov	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800a7c2:	f000 f945 	bl	800aa50 <FLASH_OB_GetRDP>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800a7ce:	f000 f923 	bl	800aa18 <FLASH_OB_GetUser>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800a7da:	f000 f959 	bl	800aa90 <FLASH_OB_GetBOR>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	615a      	str	r2, [r3, #20]
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	6039      	str	r1, [r7, #0]
 800a7f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a7fa:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <FLASH_MassErase+0x42>)
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	4a0c      	ldr	r2, [pc, #48]	; (800a830 <FLASH_MassErase+0x42>)
 800a800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a804:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a806:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <FLASH_MassErase+0x42>)
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	4a09      	ldr	r2, [pc, #36]	; (800a830 <FLASH_MassErase+0x42>)
 800a80c:	f043 0304 	orr.w	r3, r3, #4
 800a810:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <FLASH_MassErase+0x42>)
 800a814:	691a      	ldr	r2, [r3, #16]
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	4313      	orrs	r3, r2
 800a81c:	4a04      	ldr	r2, [pc, #16]	; (800a830 <FLASH_MassErase+0x42>)
 800a81e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a822:	6113      	str	r3, [r2, #16]
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	40023c00 	.word	0x40023c00

0800a834 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d102      	bne.n	800a850 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e010      	b.n	800a872 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d103      	bne.n	800a85e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	e009      	b.n	800a872 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d103      	bne.n	800a86c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a864:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	e002      	b.n	800a872 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a86c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a870:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a872:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	4a12      	ldr	r2, [pc, #72]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a87c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a87e:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a880:	691a      	ldr	r2, [r3, #16]
 800a882:	490f      	ldr	r1, [pc, #60]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	4313      	orrs	r3, r2
 800a888:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a88a:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a890:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a894:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a898:	691a      	ldr	r2, [r3, #16]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	4a07      	ldr	r2, [pc, #28]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a8a2:	f043 0302 	orr.w	r3, r3, #2
 800a8a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <FLASH_Erase_Sector+0x8c>)
 800a8ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8b2:	6113      	str	r3, [r2, #16]
}
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	40023c00 	.word	0x40023c00

0800a8c4 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8d6:	f7ff fd03 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10a      	bne.n	800a8fa <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800a8e4:	4b07      	ldr	r3, [pc, #28]	; (800a904 <FLASH_OB_EnableWRP+0x40>)
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	43db      	mvns	r3, r3
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	4904      	ldr	r1, [pc, #16]	; (800a904 <FLASH_OB_EnableWRP+0x40>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40023c16 	.word	0x40023c16

0800a908 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a916:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a91a:	f7ff fce1 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d108      	bne.n	800a93a <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <FLASH_OB_DisableWRP+0x3c>)
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	b29b      	uxth	r3, r3
 800a932:	4904      	ldr	r1, [pc, #16]	; (800a944 <FLASH_OB_DisableWRP+0x3c>)
 800a934:	4313      	orrs	r3, r2
 800a936:	b29b      	uxth	r3, r3
 800a938:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	40023c16 	.word	0x40023c16

0800a948 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a956:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a95a:	f7ff fcc1 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a95e:	4603      	mov	r3, r0
 800a960:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800a968:	4a03      	ldr	r2, [pc, #12]	; (800a978 <FLASH_OB_RDP_LevelConfig+0x30>)
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	40023c15 	.word	0x40023c15

0800a97c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
 800a986:	460b      	mov	r3, r1
 800a988:	71bb      	strb	r3, [r7, #6]
 800a98a:	4613      	mov	r3, r2
 800a98c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800a98e:	23ff      	movs	r3, #255	; 0xff
 800a990:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a996:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a99a:	f7ff fca1 	bl	800a2e0 <FLASH_WaitForLastOperation>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d111      	bne.n	800a9cc <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800a9a8:	4b0b      	ldr	r3, [pc, #44]	; (800a9d8 <FLASH_OB_UserConfig+0x5c>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 031f 	and.w	r3, r3, #31
 800a9b2:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800a9b4:	79ba      	ldrb	r2, [r7, #6]
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	797b      	ldrb	r3, [r7, #5]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	4905      	ldr	r1, [pc, #20]	; (800a9d8 <FLASH_OB_UserConfig+0x5c>)
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	40023c14 	.word	0x40023c14

0800a9dc <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800a9e6:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9ee:	f023 030c 	bic.w	r3, r3, #12
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800a9f6:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	4905      	ldr	r1, [pc, #20]	; (800aa14 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800aa06:	2300      	movs	r3, #0

}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	40023c14 	.word	0x40023c14

0800aa18 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800aa1c:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <FLASH_OB_GetUser+0x1c>)
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	f023 031f 	bic.w	r3, r3, #31
 800aa26:	b2db      	uxtb	r3, r3
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	40023c00 	.word	0x40023c00

0800aa38 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800aa3c:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <FLASH_OB_GetWRP+0x14>)
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	40023c16 	.word	0x40023c16

0800aa50 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800aa56:	23aa      	movs	r3, #170	; 0xaa
 800aa58:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800aa5a:	4b0c      	ldr	r3, [pc, #48]	; (800aa8c <FLASH_OB_GetRDP+0x3c>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2bcc      	cmp	r3, #204	; 0xcc
 800aa62:	d102      	bne.n	800aa6a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800aa64:	23cc      	movs	r3, #204	; 0xcc
 800aa66:	71fb      	strb	r3, [r7, #7]
 800aa68:	e009      	b.n	800aa7e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800aa6a:	4b08      	ldr	r3, [pc, #32]	; (800aa8c <FLASH_OB_GetRDP+0x3c>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2baa      	cmp	r3, #170	; 0xaa
 800aa72:	d102      	bne.n	800aa7a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800aa74:	23aa      	movs	r3, #170	; 0xaa
 800aa76:	71fb      	strb	r3, [r7, #7]
 800aa78:	e001      	b.n	800aa7e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800aa7a:	2355      	movs	r3, #85	; 0x55
 800aa7c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800aa7e:	79fb      	ldrb	r3, [r7, #7]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	40023c15 	.word	0x40023c15

0800aa90 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800aa90:	b480      	push	{r7}
 800aa92:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <FLASH_OB_GetBOR+0x1c>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	f003 030c 	and.w	r3, r3, #12
 800aa9e:	b2db      	uxtb	r3, r3
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	40023c14 	.word	0x40023c14

0800aab0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800aab0:	b480      	push	{r7}
 800aab2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800aab4:	4b20      	ldr	r3, [pc, #128]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d017      	beq.n	800aaf0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800aac0:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a1c      	ldr	r2, [pc, #112]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aac6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aaca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800aacc:	4b1a      	ldr	r3, [pc, #104]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a19      	ldr	r2, [pc, #100]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	4b17      	ldr	r3, [pc, #92]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a16      	ldr	r2, [pc, #88]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aae2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800aae4:	4b14      	ldr	r3, [pc, #80]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a13      	ldr	r2, [pc, #76]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aaea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aaee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800aaf0:	4b11      	ldr	r3, [pc, #68]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d017      	beq.n	800ab2c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800aafc:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a0d      	ldr	r2, [pc, #52]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800ab02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ab08:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a0a      	ldr	r2, [pc, #40]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800ab0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a07      	ldr	r2, [pc, #28]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800ab1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ab20:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a04      	ldr	r2, [pc, #16]	; (800ab38 <FLASH_FlushCaches+0x88>)
 800ab26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab2a:	6013      	str	r3, [r2, #0]
  }
}
 800ab2c:	bf00      	nop
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	40023c00 	.word	0x40023c00

0800ab3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b089      	sub	sp, #36	; 0x24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ab46:	2300      	movs	r3, #0
 800ab48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab52:	2300      	movs	r3, #0
 800ab54:	61fb      	str	r3, [r7, #28]
 800ab56:	e16b      	b.n	800ae30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ab58:	2201      	movs	r2, #1
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	f040 815a 	bne.w	800ae2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d005      	beq.n	800ab8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d130      	bne.n	800abf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	2203      	movs	r2, #3
 800ab9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9e:	43db      	mvns	r3, r3
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	4013      	ands	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68da      	ldr	r2, [r3, #12]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abc4:	2201      	movs	r2, #1
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	fa02 f303 	lsl.w	r3, r2, r3
 800abcc:	43db      	mvns	r3, r3
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	4013      	ands	r3, r2
 800abd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	091b      	lsrs	r3, r3, #4
 800abda:	f003 0201 	and.w	r2, r3, #1
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	fa02 f303 	lsl.w	r3, r2, r3
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f003 0303 	and.w	r3, r3, #3
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d017      	beq.n	800ac2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	2203      	movs	r2, #3
 800ac08:	fa02 f303 	lsl.w	r3, r2, r3
 800ac0c:	43db      	mvns	r3, r3
 800ac0e:	69ba      	ldr	r2, [r7, #24]
 800ac10:	4013      	ands	r3, r2
 800ac12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac20:	69ba      	ldr	r2, [r7, #24]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	f003 0303 	and.w	r3, r3, #3
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d123      	bne.n	800ac80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	08da      	lsrs	r2, r3, #3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3208      	adds	r2, #8
 800ac40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	f003 0307 	and.w	r3, r3, #7
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	220f      	movs	r2, #15
 800ac50:	fa02 f303 	lsl.w	r3, r2, r3
 800ac54:	43db      	mvns	r3, r3
 800ac56:	69ba      	ldr	r2, [r7, #24]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	691a      	ldr	r2, [r3, #16]
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6c:	69ba      	ldr	r2, [r7, #24]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	08da      	lsrs	r2, r3, #3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	3208      	adds	r2, #8
 800ac7a:	69b9      	ldr	r1, [r7, #24]
 800ac7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac90:	43db      	mvns	r3, r3
 800ac92:	69ba      	ldr	r2, [r7, #24]
 800ac94:	4013      	ands	r3, r2
 800ac96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f003 0203 	and.w	r2, r3, #3
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	fa02 f303 	lsl.w	r3, r2, r3
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	4313      	orrs	r3, r2
 800acac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 80b4 	beq.w	800ae2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	4b60      	ldr	r3, [pc, #384]	; (800ae48 <HAL_GPIO_Init+0x30c>)
 800acc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acca:	4a5f      	ldr	r2, [pc, #380]	; (800ae48 <HAL_GPIO_Init+0x30c>)
 800accc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acd0:	6453      	str	r3, [r2, #68]	; 0x44
 800acd2:	4b5d      	ldr	r3, [pc, #372]	; (800ae48 <HAL_GPIO_Init+0x30c>)
 800acd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acde:	4a5b      	ldr	r2, [pc, #364]	; (800ae4c <HAL_GPIO_Init+0x310>)
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	089b      	lsrs	r3, r3, #2
 800ace4:	3302      	adds	r3, #2
 800ace6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	f003 0303 	and.w	r3, r3, #3
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	220f      	movs	r2, #15
 800acf6:	fa02 f303 	lsl.w	r3, r2, r3
 800acfa:	43db      	mvns	r3, r3
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	4013      	ands	r3, r2
 800ad00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a52      	ldr	r2, [pc, #328]	; (800ae50 <HAL_GPIO_Init+0x314>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d02b      	beq.n	800ad62 <HAL_GPIO_Init+0x226>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a51      	ldr	r2, [pc, #324]	; (800ae54 <HAL_GPIO_Init+0x318>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d025      	beq.n	800ad5e <HAL_GPIO_Init+0x222>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a50      	ldr	r2, [pc, #320]	; (800ae58 <HAL_GPIO_Init+0x31c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d01f      	beq.n	800ad5a <HAL_GPIO_Init+0x21e>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a4f      	ldr	r2, [pc, #316]	; (800ae5c <HAL_GPIO_Init+0x320>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d019      	beq.n	800ad56 <HAL_GPIO_Init+0x21a>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a4e      	ldr	r2, [pc, #312]	; (800ae60 <HAL_GPIO_Init+0x324>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d013      	beq.n	800ad52 <HAL_GPIO_Init+0x216>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a4d      	ldr	r2, [pc, #308]	; (800ae64 <HAL_GPIO_Init+0x328>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d00d      	beq.n	800ad4e <HAL_GPIO_Init+0x212>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a4c      	ldr	r2, [pc, #304]	; (800ae68 <HAL_GPIO_Init+0x32c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d007      	beq.n	800ad4a <HAL_GPIO_Init+0x20e>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a4b      	ldr	r2, [pc, #300]	; (800ae6c <HAL_GPIO_Init+0x330>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d101      	bne.n	800ad46 <HAL_GPIO_Init+0x20a>
 800ad42:	2307      	movs	r3, #7
 800ad44:	e00e      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad46:	2308      	movs	r3, #8
 800ad48:	e00c      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad4a:	2306      	movs	r3, #6
 800ad4c:	e00a      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad4e:	2305      	movs	r3, #5
 800ad50:	e008      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad52:	2304      	movs	r3, #4
 800ad54:	e006      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad56:	2303      	movs	r3, #3
 800ad58:	e004      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	e002      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <HAL_GPIO_Init+0x228>
 800ad62:	2300      	movs	r3, #0
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	f002 0203 	and.w	r2, r2, #3
 800ad6a:	0092      	lsls	r2, r2, #2
 800ad6c:	4093      	lsls	r3, r2
 800ad6e:	69ba      	ldr	r2, [r7, #24]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad74:	4935      	ldr	r1, [pc, #212]	; (800ae4c <HAL_GPIO_Init+0x310>)
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	089b      	lsrs	r3, r3, #2
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	69ba      	ldr	r2, [r7, #24]
 800ad7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad82:	4b3b      	ldr	r3, [pc, #236]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	43db      	mvns	r3, r3
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	4013      	ands	r3, r2
 800ad90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ada6:	4a32      	ldr	r2, [pc, #200]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800adac:	4b30      	ldr	r3, [pc, #192]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	43db      	mvns	r3, r3
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	4013      	ands	r3, r2
 800adba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800add0:	4a27      	ldr	r2, [pc, #156]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800add6:	4b26      	ldr	r3, [pc, #152]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	43db      	mvns	r3, r3
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	4013      	ands	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800adfa:	4a1d      	ldr	r2, [pc, #116]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae00:	4b1b      	ldr	r3, [pc, #108]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae24:	4a12      	ldr	r2, [pc, #72]	; (800ae70 <HAL_GPIO_Init+0x334>)
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	61fb      	str	r3, [r7, #28]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	2b0f      	cmp	r3, #15
 800ae34:	f67f ae90 	bls.w	800ab58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	3724      	adds	r7, #36	; 0x24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40023800 	.word	0x40023800
 800ae4c:	40013800 	.word	0x40013800
 800ae50:	40020000 	.word	0x40020000
 800ae54:	40020400 	.word	0x40020400
 800ae58:	40020800 	.word	0x40020800
 800ae5c:	40020c00 	.word	0x40020c00
 800ae60:	40021000 	.word	0x40021000
 800ae64:	40021400 	.word	0x40021400
 800ae68:	40021800 	.word	0x40021800
 800ae6c:	40021c00 	.word	0x40021c00
 800ae70:	40013c00 	.word	0x40013c00

0800ae74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	e0cd      	b.n	800b02c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae90:	2201      	movs	r2, #1
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	fa02 f303 	lsl.w	r3, r2, r3
 800ae98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	f040 80bd 	bne.w	800b026 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aeac:	4a65      	ldr	r2, [pc, #404]	; (800b044 <HAL_GPIO_DeInit+0x1d0>)
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	089b      	lsrs	r3, r3, #2
 800aeb2:	3302      	adds	r3, #2
 800aeb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeb8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	220f      	movs	r2, #15
 800aec4:	fa02 f303 	lsl.w	r3, r2, r3
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4013      	ands	r3, r2
 800aecc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a5d      	ldr	r2, [pc, #372]	; (800b048 <HAL_GPIO_DeInit+0x1d4>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d02b      	beq.n	800af2e <HAL_GPIO_DeInit+0xba>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a5c      	ldr	r2, [pc, #368]	; (800b04c <HAL_GPIO_DeInit+0x1d8>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d025      	beq.n	800af2a <HAL_GPIO_DeInit+0xb6>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a5b      	ldr	r2, [pc, #364]	; (800b050 <HAL_GPIO_DeInit+0x1dc>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d01f      	beq.n	800af26 <HAL_GPIO_DeInit+0xb2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a5a      	ldr	r2, [pc, #360]	; (800b054 <HAL_GPIO_DeInit+0x1e0>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d019      	beq.n	800af22 <HAL_GPIO_DeInit+0xae>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a59      	ldr	r2, [pc, #356]	; (800b058 <HAL_GPIO_DeInit+0x1e4>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d013      	beq.n	800af1e <HAL_GPIO_DeInit+0xaa>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a58      	ldr	r2, [pc, #352]	; (800b05c <HAL_GPIO_DeInit+0x1e8>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00d      	beq.n	800af1a <HAL_GPIO_DeInit+0xa6>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a57      	ldr	r2, [pc, #348]	; (800b060 <HAL_GPIO_DeInit+0x1ec>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d007      	beq.n	800af16 <HAL_GPIO_DeInit+0xa2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a56      	ldr	r2, [pc, #344]	; (800b064 <HAL_GPIO_DeInit+0x1f0>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d101      	bne.n	800af12 <HAL_GPIO_DeInit+0x9e>
 800af0e:	2307      	movs	r3, #7
 800af10:	e00e      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af12:	2308      	movs	r3, #8
 800af14:	e00c      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af16:	2306      	movs	r3, #6
 800af18:	e00a      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af1a:	2305      	movs	r3, #5
 800af1c:	e008      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af1e:	2304      	movs	r3, #4
 800af20:	e006      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af22:	2303      	movs	r3, #3
 800af24:	e004      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af26:	2302      	movs	r3, #2
 800af28:	e002      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <HAL_GPIO_DeInit+0xbc>
 800af2e:	2300      	movs	r3, #0
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	f002 0203 	and.w	r2, r2, #3
 800af36:	0092      	lsls	r2, r2, #2
 800af38:	4093      	lsls	r3, r2
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d132      	bne.n	800afa6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800af40:	4b49      	ldr	r3, [pc, #292]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	43db      	mvns	r3, r3
 800af48:	4947      	ldr	r1, [pc, #284]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af4a:	4013      	ands	r3, r2
 800af4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800af4e:	4b46      	ldr	r3, [pc, #280]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	43db      	mvns	r3, r3
 800af56:	4944      	ldr	r1, [pc, #272]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af58:	4013      	ands	r3, r2
 800af5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800af5c:	4b42      	ldr	r3, [pc, #264]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	43db      	mvns	r3, r3
 800af64:	4940      	ldr	r1, [pc, #256]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af66:	4013      	ands	r3, r2
 800af68:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800af6a:	4b3f      	ldr	r3, [pc, #252]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	43db      	mvns	r3, r3
 800af72:	493d      	ldr	r1, [pc, #244]	; (800b068 <HAL_GPIO_DeInit+0x1f4>)
 800af74:	4013      	ands	r3, r2
 800af76:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	220f      	movs	r2, #15
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800af88:	4a2e      	ldr	r2, [pc, #184]	; (800b044 <HAL_GPIO_DeInit+0x1d0>)
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	089b      	lsrs	r3, r3, #2
 800af8e:	3302      	adds	r3, #2
 800af90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	43da      	mvns	r2, r3
 800af98:	482a      	ldr	r0, [pc, #168]	; (800b044 <HAL_GPIO_DeInit+0x1d0>)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	089b      	lsrs	r3, r3, #2
 800af9e:	400a      	ands	r2, r1
 800afa0:	3302      	adds	r3, #2
 800afa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	2103      	movs	r1, #3
 800afb0:	fa01 f303 	lsl.w	r3, r1, r3
 800afb4:	43db      	mvns	r3, r3
 800afb6:	401a      	ands	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	08da      	lsrs	r2, r3, #3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3208      	adds	r2, #8
 800afc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	220f      	movs	r2, #15
 800afd2:	fa02 f303 	lsl.w	r3, r2, r3
 800afd6:	43db      	mvns	r3, r3
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	08d2      	lsrs	r2, r2, #3
 800afdc:	4019      	ands	r1, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3208      	adds	r2, #8
 800afe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68da      	ldr	r2, [r3, #12]
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	2103      	movs	r1, #3
 800aff0:	fa01 f303 	lsl.w	r3, r1, r3
 800aff4:	43db      	mvns	r3, r3
 800aff6:	401a      	ands	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	2101      	movs	r1, #1
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	fa01 f303 	lsl.w	r3, r1, r3
 800b008:	43db      	mvns	r3, r3
 800b00a:	401a      	ands	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	005b      	lsls	r3, r3, #1
 800b018:	2103      	movs	r1, #3
 800b01a:	fa01 f303 	lsl.w	r3, r1, r3
 800b01e:	43db      	mvns	r3, r3
 800b020:	401a      	ands	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	3301      	adds	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b0f      	cmp	r3, #15
 800b030:	f67f af2e 	bls.w	800ae90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	40013800 	.word	0x40013800
 800b048:	40020000 	.word	0x40020000
 800b04c:	40020400 	.word	0x40020400
 800b050:	40020800 	.word	0x40020800
 800b054:	40020c00 	.word	0x40020c00
 800b058:	40021000 	.word	0x40021000
 800b05c:	40021400 	.word	0x40021400
 800b060:	40021800 	.word	0x40021800
 800b064:	40021c00 	.word	0x40021c00
 800b068:	40013c00 	.word	0x40013c00

0800b06c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	691a      	ldr	r2, [r3, #16]
 800b07c:	887b      	ldrh	r3, [r7, #2]
 800b07e:	4013      	ands	r3, r2
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b084:	2301      	movs	r3, #1
 800b086:	73fb      	strb	r3, [r7, #15]
 800b088:	e001      	b.n	800b08e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	807b      	strh	r3, [r7, #2]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b0ac:	787b      	ldrb	r3, [r7, #1]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b0b2:	887a      	ldrh	r2, [r7, #2]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b0b8:	e003      	b.n	800b0c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b0ba:	887b      	ldrh	r3, [r7, #2]
 800b0bc:	041a      	lsls	r2, r3, #16
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	619a      	str	r2, [r3, #24]
}
 800b0c2:	bf00      	nop
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b085      	sub	sp, #20
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b0e0:	887a      	ldrh	r2, [r7, #2]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	041a      	lsls	r2, r3, #16
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	43d9      	mvns	r1, r3
 800b0ec:	887b      	ldrh	r3, [r7, #2]
 800b0ee:	400b      	ands	r3, r1
 800b0f0:	431a      	orrs	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	619a      	str	r2, [r3, #24]
}
 800b0f6:	bf00      	nop
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b102:	b480      	push	{r7}
 800b104:	b085      	sub	sp, #20
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800b10e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b112:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800b114:	887a      	ldrh	r2, [r7, #2]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	4313      	orrs	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800b122:	887a      	ldrh	r2, [r7, #2]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	69db      	ldr	r3, [r3, #28]
 800b132:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	69db      	ldr	r3, [r3, #28]
 800b138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	e000      	b.n	800b146 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
  }
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	4603      	mov	r3, r0
 800b15a:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b15c:	4b08      	ldr	r3, [pc, #32]	; (800b180 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b15e:	695a      	ldr	r2, [r3, #20]
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	4013      	ands	r3, r2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d006      	beq.n	800b176 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b168:	4a05      	ldr	r2, [pc, #20]	; (800b180 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	4618      	mov	r0, r3
 800b172:	f000 f807 	bl	800b184 <HAL_GPIO_EXTI_Callback>
  }
}
 800b176:	bf00      	nop
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	40013c00 	.word	0x40013c00

0800b184 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b18e:	bf00      	nop
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e12b      	b.n	800b404 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d106      	bne.n	800b1c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7fa fbb5 	bl	8005930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2224      	movs	r2, #36	; 0x24
 800b1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f022 0201 	bic.w	r2, r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1ec:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1fc:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b1fe:	f007 f891 	bl	8012324 <HAL_RCC_GetPCLK1Freq>
 800b202:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	4a80      	ldr	r2, [pc, #512]	; (800b40c <HAL_I2C_Init+0x272>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d807      	bhi.n	800b21e <HAL_I2C_Init+0x84>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4a7f      	ldr	r2, [pc, #508]	; (800b410 <HAL_I2C_Init+0x276>)
 800b212:	4293      	cmp	r3, r2
 800b214:	bf94      	ite	ls
 800b216:	2301      	movls	r3, #1
 800b218:	2300      	movhi	r3, #0
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	e006      	b.n	800b22c <HAL_I2C_Init+0x92>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4a7c      	ldr	r2, [pc, #496]	; (800b414 <HAL_I2C_Init+0x27a>)
 800b222:	4293      	cmp	r3, r2
 800b224:	bf94      	ite	ls
 800b226:	2301      	movls	r3, #1
 800b228:	2300      	movhi	r3, #0
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e0e7      	b.n	800b404 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4a78      	ldr	r2, [pc, #480]	; (800b418 <HAL_I2C_Init+0x27e>)
 800b238:	fba2 2303 	umull	r2, r3, r2, r3
 800b23c:	0c9b      	lsrs	r3, r3, #18
 800b23e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	430a      	orrs	r2, r1
 800b252:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4a6a      	ldr	r2, [pc, #424]	; (800b40c <HAL_I2C_Init+0x272>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d802      	bhi.n	800b26e <HAL_I2C_Init+0xd4>
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3301      	adds	r3, #1
 800b26c:	e009      	b.n	800b282 <HAL_I2C_Init+0xe8>
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b274:	fb02 f303 	mul.w	r3, r2, r3
 800b278:	4a68      	ldr	r2, [pc, #416]	; (800b41c <HAL_I2C_Init+0x282>)
 800b27a:	fba2 2303 	umull	r2, r3, r2, r3
 800b27e:	099b      	lsrs	r3, r3, #6
 800b280:	3301      	adds	r3, #1
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	6812      	ldr	r2, [r2, #0]
 800b286:	430b      	orrs	r3, r1
 800b288:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b294:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	495b      	ldr	r1, [pc, #364]	; (800b40c <HAL_I2C_Init+0x272>)
 800b29e:	428b      	cmp	r3, r1
 800b2a0:	d819      	bhi.n	800b2d6 <HAL_I2C_Init+0x13c>
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	1e59      	subs	r1, r3, #1
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	005b      	lsls	r3, r3, #1
 800b2ac:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2b0:	1c59      	adds	r1, r3, #1
 800b2b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b2b6:	400b      	ands	r3, r1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <HAL_I2C_Init+0x138>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	1e59      	subs	r1, r3, #1
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2d0:	e051      	b.n	800b376 <HAL_I2C_Init+0x1dc>
 800b2d2:	2304      	movs	r3, #4
 800b2d4:	e04f      	b.n	800b376 <HAL_I2C_Init+0x1dc>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d111      	bne.n	800b302 <HAL_I2C_Init+0x168>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	1e58      	subs	r0, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6859      	ldr	r1, [r3, #4]
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	440b      	add	r3, r1
 800b2ec:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf0c      	ite	eq
 800b2fa:	2301      	moveq	r3, #1
 800b2fc:	2300      	movne	r3, #0
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	e012      	b.n	800b328 <HAL_I2C_Init+0x18e>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	1e58      	subs	r0, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6859      	ldr	r1, [r3, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	0099      	lsls	r1, r3, #2
 800b312:	440b      	add	r3, r1
 800b314:	fbb0 f3f3 	udiv	r3, r0, r3
 800b318:	3301      	adds	r3, #1
 800b31a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bf0c      	ite	eq
 800b322:	2301      	moveq	r3, #1
 800b324:	2300      	movne	r3, #0
 800b326:	b2db      	uxtb	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <HAL_I2C_Init+0x196>
 800b32c:	2301      	movs	r3, #1
 800b32e:	e022      	b.n	800b376 <HAL_I2C_Init+0x1dc>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10e      	bne.n	800b356 <HAL_I2C_Init+0x1bc>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	1e58      	subs	r0, r3, #1
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6859      	ldr	r1, [r3, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	440b      	add	r3, r1
 800b346:	fbb0 f3f3 	udiv	r3, r0, r3
 800b34a:	3301      	adds	r3, #1
 800b34c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b354:	e00f      	b.n	800b376 <HAL_I2C_Init+0x1dc>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	1e58      	subs	r0, r3, #1
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6859      	ldr	r1, [r3, #4]
 800b35e:	460b      	mov	r3, r1
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	440b      	add	r3, r1
 800b364:	0099      	lsls	r1, r3, #2
 800b366:	440b      	add	r3, r1
 800b368:	fbb0 f3f3 	udiv	r3, r0, r3
 800b36c:	3301      	adds	r3, #1
 800b36e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	6809      	ldr	r1, [r1, #0]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	69da      	ldr	r2, [r3, #28]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b3a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	6911      	ldr	r1, [r2, #16]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	68d2      	ldr	r2, [r2, #12]
 800b3b0:	4311      	orrs	r1, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6812      	ldr	r2, [r2, #0]
 800b3b6:	430b      	orrs	r3, r1
 800b3b8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	695a      	ldr	r2, [r3, #20]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f042 0201 	orr.w	r2, r2, #1
 800b3e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	000186a0 	.word	0x000186a0
 800b410:	001e847f 	.word	0x001e847f
 800b414:	003d08ff 	.word	0x003d08ff
 800b418:	431bde83 	.word	0x431bde83
 800b41c:	10624dd3 	.word	0x10624dd3

0800b420 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e021      	b.n	800b476 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2224      	movs	r2, #36	; 0x24
 800b436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f022 0201 	bic.w	r2, r2, #1
 800b448:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7fa fac8 	bl	80059e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b088      	sub	sp, #32
 800b482:	af02      	add	r7, sp, #8
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	461a      	mov	r2, r3
 800b48a:	460b      	mov	r3, r1
 800b48c:	817b      	strh	r3, [r7, #10]
 800b48e:	4613      	mov	r3, r2
 800b490:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b492:	f7fb f9eb 	bl	800686c <HAL_GetTick>
 800b496:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b20      	cmp	r3, #32
 800b4a2:	f040 80e0 	bne.w	800b666 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	2319      	movs	r3, #25
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	4970      	ldr	r1, [pc, #448]	; (800b670 <HAL_I2C_Master_Transmit+0x1f2>)
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f005 fd97 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e0d3      	b.n	800b668 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <HAL_I2C_Master_Transmit+0x50>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e0cc      	b.n	800b668 <HAL_I2C_Master_Transmit+0x1ea>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d007      	beq.n	800b4f4 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f042 0201 	orr.w	r2, r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b502:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2221      	movs	r2, #33	; 0x21
 800b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2210      	movs	r2, #16
 800b510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	893a      	ldrh	r2, [r7, #8]
 800b524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4a50      	ldr	r2, [pc, #320]	; (800b674 <HAL_I2C_Master_Transmit+0x1f6>)
 800b534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b536:	8979      	ldrh	r1, [r7, #10]
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	6a3a      	ldr	r2, [r7, #32]
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f005 f8c9 	bl	80106d4 <I2C_MasterRequestWrite>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e08d      	b.n	800b668 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b54c:	2300      	movs	r3, #0
 800b54e:	613b      	str	r3, [r7, #16]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	613b      	str	r3, [r7, #16]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b562:	e066      	b.n	800b632 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	6a39      	ldr	r1, [r7, #32]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f005 fe11 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00d      	beq.n	800b590 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d107      	bne.n	800b58c <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b58a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e06b      	b.n	800b668 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	781a      	ldrb	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	f003 0304 	and.w	r3, r3, #4
 800b5ca:	2b04      	cmp	r3, #4
 800b5cc:	d11b      	bne.n	800b606 <HAL_I2C_Master_Transmit+0x188>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d017      	beq.n	800b606 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b29a      	uxth	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	6a39      	ldr	r1, [r7, #32]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f005 fe01 	bl	8011212 <I2C_WaitOnBTFFlagUntilTimeout>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00d      	beq.n	800b632 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d107      	bne.n	800b62e <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b62c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e01a      	b.n	800b668 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b636:	2b00      	cmp	r3, #0
 800b638:	d194      	bne.n	800b564 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2220      	movs	r2, #32
 800b64e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	e000      	b.n	800b668 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b666:	2302      	movs	r3, #2
  }
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	00100002 	.word	0x00100002
 800b674:	ffff0000 	.word	0xffff0000

0800b678 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08c      	sub	sp, #48	; 0x30
 800b67c:	af02      	add	r7, sp, #8
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	607a      	str	r2, [r7, #4]
 800b682:	461a      	mov	r2, r3
 800b684:	460b      	mov	r3, r1
 800b686:	817b      	strh	r3, [r7, #10]
 800b688:	4613      	mov	r3, r2
 800b68a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b68c:	f7fb f8ee 	bl	800686c <HAL_GetTick>
 800b690:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	f040 820b 	bne.w	800bab6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	2319      	movs	r3, #25
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	497c      	ldr	r1, [pc, #496]	; (800b89c <HAL_I2C_Master_Receive+0x224>)
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f005 fc9a 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e1fe      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d101      	bne.n	800b6c8 <HAL_I2C_Master_Receive+0x50>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e1f7      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d007      	beq.n	800b6ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f042 0201 	orr.w	r2, r2, #1
 800b6ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b6fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2222      	movs	r2, #34	; 0x22
 800b702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2210      	movs	r2, #16
 800b70a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	893a      	ldrh	r2, [r7, #8]
 800b71e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b724:	b29a      	uxth	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	4a5c      	ldr	r2, [pc, #368]	; (800b8a0 <HAL_I2C_Master_Receive+0x228>)
 800b72e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b730:	8979      	ldrh	r1, [r7, #10]
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f005 f84e 	bl	80107d8 <I2C_MasterRequestRead>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	e1b8      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d113      	bne.n	800b776 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b74e:	2300      	movs	r3, #0
 800b750:	617b      	str	r3, [r7, #20]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	617b      	str	r3, [r7, #20]
 800b762:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	e18c      	b.n	800ba90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d11b      	bne.n	800b7b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b78c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b78e:	2300      	movs	r3, #0
 800b790:	61bb      	str	r3, [r7, #24]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	61bb      	str	r3, [r7, #24]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	61bb      	str	r3, [r7, #24]
 800b7a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	e16c      	b.n	800ba90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d11b      	bne.n	800b7f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7de:	2300      	movs	r3, #0
 800b7e0:	61fb      	str	r3, [r7, #28]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	61fb      	str	r3, [r7, #28]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	61fb      	str	r3, [r7, #28]
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	e14c      	b.n	800ba90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b806:	2300      	movs	r3, #0
 800b808:	623b      	str	r3, [r7, #32]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	695b      	ldr	r3, [r3, #20]
 800b810:	623b      	str	r3, [r7, #32]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800b81c:	e138      	b.n	800ba90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b822:	2b03      	cmp	r3, #3
 800b824:	f200 80f1 	bhi.w	800ba0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d123      	bne.n	800b878 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f005 fd9d 	bl	8011374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e139      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	691a      	ldr	r2, [r3, #16]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84e:	b2d2      	uxtb	r2, r2
 800b850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b856:	1c5a      	adds	r2, r3, #1
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b860:	3b01      	subs	r3, #1
 800b862:	b29a      	uxth	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	b29a      	uxth	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b876:	e10b      	b.n	800ba90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d14e      	bne.n	800b91e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	2200      	movs	r2, #0
 800b888:	4906      	ldr	r1, [pc, #24]	; (800b8a4 <HAL_I2C_Master_Receive+0x22c>)
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f005 fbaa 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d008      	beq.n	800b8a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e10e      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
 800b89a:	bf00      	nop
 800b89c:	00100002 	.word	0x00100002
 800b8a0:	ffff0000 	.word	0xffff0000
 800b8a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	691a      	ldr	r2, [r3, #16]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	b2d2      	uxtb	r2, r2
 800b8c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	b2d2      	uxtb	r2, r2
 800b8f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b906:	3b01      	subs	r3, #1
 800b908:	b29a      	uxth	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b912:	b29b      	uxth	r3, r3
 800b914:	3b01      	subs	r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b91c:	e0b8      	b.n	800ba90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	2200      	movs	r2, #0
 800b926:	4966      	ldr	r1, [pc, #408]	; (800bac0 <HAL_I2C_Master_Receive+0x448>)
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f005 fb5b 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e0bf      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	691a      	ldr	r2, [r3, #16]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b952:	b2d2      	uxtb	r2, r2
 800b954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b964:	3b01      	subs	r3, #1
 800b966:	b29a      	uxth	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b970:	b29b      	uxth	r3, r3
 800b972:	3b01      	subs	r3, #1
 800b974:	b29a      	uxth	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	2200      	movs	r2, #0
 800b982:	494f      	ldr	r1, [pc, #316]	; (800bac0 <HAL_I2C_Master_Receive+0x448>)
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f005 fb2d 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e091      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	691a      	ldr	r2, [r3, #16]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	b2d2      	uxtb	r2, r2
 800b9b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b6:	1c5a      	adds	r2, r3, #1
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	691a      	ldr	r2, [r3, #16]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	b2d2      	uxtb	r2, r2
 800b9e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	3b01      	subs	r3, #1
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba08:	e042      	b.n	800ba90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f005 fcb0 	bl	8011374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e04c      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	691a      	ldr	r2, [r3, #16]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	b2d2      	uxtb	r2, r2
 800ba2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	f003 0304 	and.w	r3, r3, #4
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	d118      	bne.n	800ba90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	691a      	ldr	r2, [r3, #16]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	b2d2      	uxtb	r2, r2
 800ba6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f47f aec2 	bne.w	800b81e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	e000      	b.n	800bab8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bab6:	2302      	movs	r3, #2
  }
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3728      	adds	r7, #40	; 0x28
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	00010004 	.word	0x00010004

0800bac4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b08a      	sub	sp, #40	; 0x28
 800bac8:	af02      	add	r7, sp, #8
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	603b      	str	r3, [r7, #0]
 800bad0:	4613      	mov	r3, r2
 800bad2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bad4:	f7fa feca 	bl	800686c <HAL_GetTick>
 800bad8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	f040 80fb 	bne.w	800bcde <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <HAL_I2C_Slave_Transmit+0x30>
 800baee:	88fb      	ldrh	r3, [r7, #6]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e0f3      	b.n	800bce0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d101      	bne.n	800bb06 <HAL_I2C_Slave_Transmit+0x42>
 800bb02:	2302      	movs	r3, #2
 800bb04:	e0ec      	b.n	800bce0 <HAL_I2C_Slave_Transmit+0x21c>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d007      	beq.n	800bb2c <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f042 0201 	orr.w	r2, r2, #1
 800bb2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb3a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2221      	movs	r2, #33	; 0x21
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2220      	movs	r2, #32
 800bb48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	88fa      	ldrh	r2, [r7, #6]
 800bb5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	4a5f      	ldr	r2, [pc, #380]	; (800bce8 <HAL_I2C_Slave_Transmit+0x224>)
 800bb6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb7c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2200      	movs	r2, #0
 800bb86:	4959      	ldr	r1, [pc, #356]	; (800bcec <HAL_I2C_Slave_Transmit+0x228>)
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f005 fa2b 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	e0a3      	b.n	800bce0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb98:	2300      	movs	r3, #0
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bbb6:	d165      	bne.n	800bc84 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	494a      	ldr	r1, [pc, #296]	; (800bcec <HAL_I2C_Slave_Transmit+0x228>)
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f005 fa0e 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e086      	b.n	800bce0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	61bb      	str	r3, [r7, #24]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	61bb      	str	r3, [r7, #24]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	61bb      	str	r3, [r7, #24]
 800bbe6:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800bbe8:	e04c      	b.n	800bc84 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f005 face 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d009      	beq.n	800bc0e <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc08:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e068      	b.n	800bce0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	781a      	ldrb	r2, [r3, #0]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc36:	3b01      	subs	r3, #1
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	d11b      	bne.n	800bc84 <HAL_I2C_Slave_Transmit+0x1c0>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d017      	beq.n	800bc84 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	781a      	ldrb	r2, [r3, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	3b01      	subs	r3, #1
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1ae      	bne.n	800bbea <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f005 f9a3 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e01b      	b.n	800bce0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bcb0:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2220      	movs	r2, #32
 800bcc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e000      	b.n	800bce0 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bcde:	2302      	movs	r3, #2
  }
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	ffff0000 	.word	0xffff0000
 800bcec:	00010002 	.word	0x00010002

0800bcf0 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08a      	sub	sp, #40	; 0x28
 800bcf4:	af02      	add	r7, sp, #8
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	603b      	str	r3, [r7, #0]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd00:	f7fa fdb4 	bl	800686c <HAL_GetTick>
 800bd04:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b20      	cmp	r3, #32
 800bd10:	f040 80ee 	bne.w	800bef0 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <HAL_I2C_Slave_Receive+0x30>
 800bd1a:	88fb      	ldrh	r3, [r7, #6]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e0e6      	b.n	800bef2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d101      	bne.n	800bd32 <HAL_I2C_Slave_Receive+0x42>
 800bd2e:	2302      	movs	r3, #2
 800bd30:	e0df      	b.n	800bef2 <HAL_I2C_Slave_Receive+0x202>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d007      	beq.n	800bd58 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd66:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2222      	movs	r2, #34	; 0x22
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	88fa      	ldrh	r2, [r7, #6]
 800bd88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	4a59      	ldr	r2, [pc, #356]	; (800befc <HAL_I2C_Slave_Receive+0x20c>)
 800bd98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bda8:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	4953      	ldr	r1, [pc, #332]	; (800bf00 <HAL_I2C_Slave_Receive+0x210>)
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f005 f915 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e096      	b.n	800bef2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800bdda:	e04e      	b.n	800be7a <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bddc:	69fa      	ldr	r2, [r7, #28]
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f005 fac7 	bl	8011374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d009      	beq.n	800be00 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdfa:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e078      	b.n	800bef2 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	691a      	ldr	r2, [r3, #16]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0a:	b2d2      	uxtb	r2, r2
 800be0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29a      	uxth	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be28:	b29b      	uxth	r3, r3
 800be2a:	3b01      	subs	r3, #1
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d11c      	bne.n	800be7a <HAL_I2C_Slave_Receive+0x18a>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be44:	2b00      	cmp	r3, #0
 800be46:	d018      	beq.n	800be7a <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	691a      	ldr	r2, [r3, #16]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be64:	3b01      	subs	r3, #1
 800be66:	b29a      	uxth	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be70:	b29b      	uxth	r3, r3
 800be72:	3b01      	subs	r3, #1
 800be74:	b29a      	uxth	r2, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1ac      	bne.n	800bddc <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be82:	69fa      	ldr	r2, [r7, #28]
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f005 fa04 	bl	8011294 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d009      	beq.n	800bea6 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bea0:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e025      	b.n	800bef2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800bea6:	2300      	movs	r3, #0
 800bea8:	61bb      	str	r3, [r7, #24]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	61bb      	str	r3, [r7, #24]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f042 0201 	orr.w	r2, r2, #1
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2220      	movs	r2, #32
 800bed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	e000      	b.n	800bef2 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800bef0:	2302      	movs	r3, #2
  }
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	ffff0000 	.word	0xffff0000
 800bf00:	00010002 	.word	0x00010002

0800bf04 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	460b      	mov	r3, r1
 800bf12:	817b      	strh	r3, [r7, #10]
 800bf14:	4613      	mov	r3, r2
 800bf16:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b20      	cmp	r3, #32
 800bf26:	f040 8085 	bne.w	800c034 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bf2a:	4b46      	ldr	r3, [pc, #280]	; (800c044 <HAL_I2C_Master_Transmit_IT+0x140>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	08db      	lsrs	r3, r3, #3
 800bf30:	4a45      	ldr	r2, [pc, #276]	; (800c048 <HAL_I2C_Master_Transmit_IT+0x144>)
 800bf32:	fba2 2303 	umull	r2, r3, r2, r3
 800bf36:	0a1a      	lsrs	r2, r3, #8
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009a      	lsls	r2, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d116      	bne.n	800bf7e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6a:	f043 0220 	orr.w	r2, r3, #32
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e05b      	b.n	800c036 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	f003 0302 	and.w	r3, r3, #2
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d0db      	beq.n	800bf44 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d101      	bne.n	800bf9a <HAL_I2C_Master_Transmit_IT+0x96>
 800bf96:	2302      	movs	r3, #2
 800bf98:	e04d      	b.n	800c036 <HAL_I2C_Master_Transmit_IT+0x132>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d007      	beq.n	800bfc0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f042 0201 	orr.w	r2, r2, #1
 800bfbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2221      	movs	r2, #33	; 0x21
 800bfd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2210      	movs	r2, #16
 800bfdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	893a      	ldrh	r2, [r7, #8]
 800bff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4a13      	ldr	r2, [pc, #76]	; (800c04c <HAL_I2C_Master_Transmit_IT+0x148>)
 800c000:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c002:	897a      	ldrh	r2, [r7, #10]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c01e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c02e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	e000      	b.n	800c036 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800c034:	2302      	movs	r3, #2
  }
}
 800c036:	4618      	mov	r0, r3
 800c038:	371c      	adds	r7, #28
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20000058 	.word	0x20000058
 800c048:	14f8b589 	.word	0x14f8b589
 800c04c:	ffff0000 	.word	0xffff0000

0800c050 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c050:	b480      	push	{r7}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	607a      	str	r2, [r7, #4]
 800c05a:	461a      	mov	r2, r3
 800c05c:	460b      	mov	r3, r1
 800c05e:	817b      	strh	r3, [r7, #10]
 800c060:	4613      	mov	r3, r2
 800c062:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b20      	cmp	r3, #32
 800c072:	f040 808d 	bne.w	800c190 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c076:	4b4a      	ldr	r3, [pc, #296]	; (800c1a0 <HAL_I2C_Master_Receive_IT+0x150>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	08db      	lsrs	r3, r3, #3
 800c07c:	4a49      	ldr	r2, [pc, #292]	; (800c1a4 <HAL_I2C_Master_Receive_IT+0x154>)
 800c07e:	fba2 2303 	umull	r2, r3, r2, r3
 800c082:	0a1a      	lsrs	r2, r3, #8
 800c084:	4613      	mov	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4413      	add	r3, r2
 800c08a:	009a      	lsls	r2, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	3b01      	subs	r3, #1
 800c094:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d116      	bne.n	800c0ca <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b6:	f043 0220 	orr.w	r2, r3, #32
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e063      	b.n	800c192 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	699b      	ldr	r3, [r3, #24]
 800c0d0:	f003 0302 	and.w	r3, r3, #2
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d0db      	beq.n	800c090 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d101      	bne.n	800c0e6 <HAL_I2C_Master_Receive_IT+0x96>
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	e055      	b.n	800c192 <HAL_I2C_Master_Receive_IT+0x142>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d007      	beq.n	800c10c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f042 0201 	orr.w	r2, r2, #1
 800c10a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c11a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2222      	movs	r2, #34	; 0x22
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2210      	movs	r2, #16
 800c128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	893a      	ldrh	r2, [r7, #8]
 800c13c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c142:	b29a      	uxth	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4a17      	ldr	r2, [pc, #92]	; (800c1a8 <HAL_I2C_Master_Receive_IT+0x158>)
 800c14c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c14e:	897a      	ldrh	r2, [r7, #10]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c16a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c17a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c18a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	e000      	b.n	800c192 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800c190:	2302      	movs	r3, #2
  }
}
 800c192:	4618      	mov	r0, r3
 800c194:	371c      	adds	r7, #28
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	20000058 	.word	0x20000058
 800c1a4:	14f8b589 	.word	0x14f8b589
 800c1a8:	ffff0000 	.word	0xffff0000

0800c1ac <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b20      	cmp	r3, #32
 800c1c4:	d158      	bne.n	800c278 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <HAL_I2C_Slave_Transmit_IT+0x26>
 800c1cc:	88fb      	ldrh	r3, [r7, #6]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d101      	bne.n	800c1d6 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e051      	b.n	800c27a <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d101      	bne.n	800c1e4 <HAL_I2C_Slave_Transmit_IT+0x38>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e04a      	b.n	800c27a <HAL_I2C_Slave_Transmit_IT+0xce>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d007      	beq.n	800c20a <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f042 0201 	orr.w	r2, r2, #1
 800c208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c218:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2221      	movs	r2, #33	; 0x21
 800c21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2220      	movs	r2, #32
 800c226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	88fa      	ldrh	r2, [r7, #6]
 800c23a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c240:	b29a      	uxth	r2, r3
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	4a0f      	ldr	r2, [pc, #60]	; (800c288 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c24a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c25a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c272:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	e000      	b.n	800c27a <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c278:	2302      	movs	r3, #2
  }
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	ffff0000 	.word	0xffff0000

0800c28c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	4613      	mov	r3, r2
 800c298:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b20      	cmp	r3, #32
 800c2a4:	d158      	bne.n	800c358 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <HAL_I2C_Slave_Receive_IT+0x26>
 800c2ac:	88fb      	ldrh	r3, [r7, #6]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d101      	bne.n	800c2b6 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e051      	b.n	800c35a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d101      	bne.n	800c2c4 <HAL_I2C_Slave_Receive_IT+0x38>
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	e04a      	b.n	800c35a <HAL_I2C_Slave_Receive_IT+0xce>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d007      	beq.n	800c2ea <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f042 0201 	orr.w	r2, r2, #1
 800c2e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2f8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2222      	movs	r2, #34	; 0x22
 800c2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2220      	movs	r2, #32
 800c306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	88fa      	ldrh	r2, [r7, #6]
 800c31a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c320:	b29a      	uxth	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4a0f      	ldr	r2, [pc, #60]	; (800c368 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800c32a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c33a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c352:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	e000      	b.n	800c35a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c358:	2302      	movs	r3, #2
  }
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	ffff0000 	.word	0xffff0000

0800c36c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	607a      	str	r2, [r7, #4]
 800c376:	461a      	mov	r2, r3
 800c378:	460b      	mov	r3, r1
 800c37a:	817b      	strh	r3, [r7, #10]
 800c37c:	4613      	mov	r3, r2
 800c37e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b20      	cmp	r3, #32
 800c38e:	f040 810d 	bne.w	800c5ac <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c392:	4b89      	ldr	r3, [pc, #548]	; (800c5b8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	4a88      	ldr	r2, [pc, #544]	; (800c5bc <HAL_I2C_Master_Transmit_DMA+0x250>)
 800c39a:	fba2 2303 	umull	r2, r3, r2, r3
 800c39e:	0a1a      	lsrs	r2, r3, #8
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009a      	lsls	r2, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d116      	bne.n	800c3e6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2220      	movs	r2, #32
 800c3c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d2:	f043 0220 	orr.w	r2, r3, #32
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e0e3      	b.n	800c5ae <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	f003 0302 	and.w	r3, r3, #2
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d0db      	beq.n	800c3ac <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d101      	bne.n	800c402 <HAL_I2C_Master_Transmit_DMA+0x96>
 800c3fe:	2302      	movs	r3, #2
 800c400:	e0d5      	b.n	800c5ae <HAL_I2C_Master_Transmit_DMA+0x242>
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	2b01      	cmp	r3, #1
 800c416:	d007      	beq.n	800c428 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f042 0201 	orr.w	r2, r2, #1
 800c426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2221      	movs	r2, #33	; 0x21
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2210      	movs	r2, #16
 800c444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	893a      	ldrh	r2, [r7, #8]
 800c458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c45e:	b29a      	uxth	r2, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4a56      	ldr	r2, [pc, #344]	; (800c5c0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800c468:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c46a:	897a      	ldrh	r2, [r7, #10]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c474:	2b00      	cmp	r3, #0
 800c476:	d07b      	beq.n	800c570 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d02a      	beq.n	800c4d6 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c484:	4a4f      	ldr	r2, [pc, #316]	; (800c5c4 <HAL_I2C_Master_Transmit_DMA+0x258>)
 800c486:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48c:	4a4e      	ldr	r2, [pc, #312]	; (800c5c8 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800c48e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c494:	2200      	movs	r2, #0
 800c496:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49c:	2200      	movs	r2, #0
 800c49e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3310      	adds	r3, #16
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4c6:	f7fb fc3a 	bl	8007d3e <HAL_DMA_Start_IT>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d139      	bne.n	800c548 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800c4d4:	e013      	b.n	800c4fe <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e057      	b.n	800c5ae <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c514:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c524:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c534:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	e02f      	b.n	800c5a8 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55c:	f043 0210 	orr.w	r2, r3, #16
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	e01e      	b.n	800c5ae <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c57e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c58e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c5a6:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	e000      	b.n	800c5ae <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c5ac:	2302      	movs	r3, #2
  }
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20000058 	.word	0x20000058
 800c5bc:	14f8b589 	.word	0x14f8b589
 800c5c0:	ffff0000 	.word	0xffff0000
 800c5c4:	08010c71 	.word	0x08010c71
 800c5c8:	08010e1b 	.word	0x08010e1b

0800c5cc <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	607a      	str	r2, [r7, #4]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	460b      	mov	r3, r1
 800c5da:	817b      	strh	r3, [r7, #10]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b20      	cmp	r3, #32
 800c5ee:	f040 810d 	bne.w	800c80c <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c5f2:	4b89      	ldr	r3, [pc, #548]	; (800c818 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	08db      	lsrs	r3, r3, #3
 800c5f8:	4a88      	ldr	r2, [pc, #544]	; (800c81c <HAL_I2C_Master_Receive_DMA+0x250>)
 800c5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c5fe:	0a1a      	lsrs	r2, r3, #8
 800c600:	4613      	mov	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	009a      	lsls	r2, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	3b01      	subs	r3, #1
 800c610:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d116      	bne.n	800c646 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2220      	movs	r2, #32
 800c622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c632:	f043 0220 	orr.w	r2, r3, #32
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	e0e3      	b.n	800c80e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	2b02      	cmp	r3, #2
 800c652:	d0db      	beq.n	800c60c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d101      	bne.n	800c662 <HAL_I2C_Master_Receive_DMA+0x96>
 800c65e:	2302      	movs	r3, #2
 800c660:	e0d5      	b.n	800c80e <HAL_I2C_Master_Receive_DMA+0x242>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	2b01      	cmp	r3, #1
 800c676:	d007      	beq.n	800c688 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f042 0201 	orr.w	r2, r2, #1
 800c686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2222      	movs	r2, #34	; 0x22
 800c69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2210      	movs	r2, #16
 800c6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	893a      	ldrh	r2, [r7, #8]
 800c6b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	4a56      	ldr	r2, [pc, #344]	; (800c820 <HAL_I2C_Master_Receive_DMA+0x254>)
 800c6c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c6ca:	897a      	ldrh	r2, [r7, #10]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d07b      	beq.n	800c7d0 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d02a      	beq.n	800c736 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e4:	4a4f      	ldr	r2, [pc, #316]	; (800c824 <HAL_I2C_Master_Receive_DMA+0x258>)
 800c6e6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ec:	4a4e      	ldr	r2, [pc, #312]	; (800c828 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800c6ee:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c704:	2200      	movs	r2, #0
 800c706:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	2200      	movs	r2, #0
 800c70e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	3310      	adds	r3, #16
 800c71a:	4619      	mov	r1, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	461a      	mov	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c726:	f7fb fb0a 	bl	8007d3e <HAL_DMA_Start_IT>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d139      	bne.n	800c7a8 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800c734:	e013      	b.n	800c75e <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2220      	movs	r2, #32
 800c73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e057      	b.n	800c80e <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c76c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c77c:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2200      	movs	r2, #0
 800c782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c794:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7a4:	605a      	str	r2, [r3, #4]
 800c7a6:	e02f      	b.n	800c808 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7bc:	f043 0210 	orr.w	r2, r3, #16
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e01e      	b.n	800c80e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	685a      	ldr	r2, [r3, #4]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c7e6:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c7f6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c806:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	e000      	b.n	800c80e <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c80c:	2302      	movs	r3, #2
  }
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20000058 	.word	0x20000058
 800c81c:	14f8b589 	.word	0x14f8b589
 800c820:	ffff0000 	.word	0xffff0000
 800c824:	08010c71 	.word	0x08010c71
 800c828:	08010e1b 	.word	0x08010e1b

0800c82c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	4613      	mov	r3, r2
 800c838:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b20      	cmp	r3, #32
 800c844:	f040 80b8 	bne.w	800c9b8 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800c84e:	88fb      	ldrh	r3, [r7, #6]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e0b0      	b.n	800c9ba <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d101      	bne.n	800c866 <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800c862:	2302      	movs	r3, #2
 800c864:	e0a9      	b.n	800c9ba <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d007      	beq.n	800c88c <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f042 0201 	orr.w	r2, r2, #1
 800c88a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c89a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2221      	movs	r2, #33	; 0x21
 800c8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	88fa      	ldrh	r2, [r7, #6]
 800c8bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4a3e      	ldr	r2, [pc, #248]	; (800c9c4 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800c8cc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d02a      	beq.n	800c92c <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8da:	4a3b      	ldr	r2, [pc, #236]	; (800c9c8 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800c8dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e2:	4a3a      	ldr	r2, [pc, #232]	; (800c9cc <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800c8e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c902:	2200      	movs	r2, #0
 800c904:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	4619      	mov	r1, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3310      	adds	r3, #16
 800c916:	461a      	mov	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c91c:	f7fb fa0f 	bl	8007d3e <HAL_DMA_Start_IT>
 800c920:	4603      	mov	r3, r0
 800c922:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d132      	bne.n	800c990 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800c92a:	e013      	b.n	800c954 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2228      	movs	r2, #40	; 0x28
 800c930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c940:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e032      	b.n	800c9ba <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c962:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c97a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c98a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	e014      	b.n	800c9ba <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2220      	movs	r2, #32
 800c994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a4:	f043 0210 	orr.w	r2, r3, #16
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e000      	b.n	800c9ba <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c9b8:	2302      	movs	r3, #2
  }
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3718      	adds	r7, #24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	ffff0000 	.word	0xffff0000
 800c9c8:	08010c71 	.word	0x08010c71
 800c9cc:	08010e1b 	.word	0x08010e1b

0800c9d0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	f040 80b8 	bne.w	800cb5c <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <HAL_I2C_Slave_Receive_DMA+0x28>
 800c9f2:	88fb      	ldrh	r3, [r7, #6]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d101      	bne.n	800c9fc <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e0b0      	b.n	800cb5e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d101      	bne.n	800ca0a <HAL_I2C_Slave_Receive_DMA+0x3a>
 800ca06:	2302      	movs	r3, #2
 800ca08:	e0a9      	b.n	800cb5e <HAL_I2C_Slave_Receive_DMA+0x18e>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d007      	beq.n	800ca30 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f042 0201 	orr.w	r2, r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2222      	movs	r2, #34	; 0x22
 800ca44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2220      	movs	r2, #32
 800ca4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	88fa      	ldrh	r2, [r7, #6]
 800ca60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4a3e      	ldr	r2, [pc, #248]	; (800cb68 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800ca70:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d02a      	beq.n	800cad0 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7e:	4a3b      	ldr	r2, [pc, #236]	; (800cb6c <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800ca80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	4a3a      	ldr	r2, [pc, #232]	; (800cb70 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800ca88:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8e:	2200      	movs	r2, #0
 800ca90:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	2200      	movs	r2, #0
 800ca98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9e:	2200      	movs	r2, #0
 800caa0:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa6:	2200      	movs	r2, #0
 800caa8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	3310      	adds	r3, #16
 800cab4:	4619      	mov	r1, r3
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caba:	461a      	mov	r2, r3
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac0:	f7fb f93d 	bl	8007d3e <HAL_DMA_Start_IT>
 800cac4:	4603      	mov	r3, r0
 800cac6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d132      	bne.n	800cb34 <HAL_I2C_Slave_Receive_DMA+0x164>
 800cace:	e013      	b.n	800caf8 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2228      	movs	r2, #40	; 0x28
 800cad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e032      	b.n	800cb5e <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb06:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cb1e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb2e:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	e014      	b.n	800cb5e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2220      	movs	r2, #32
 800cb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb48:	f043 0210 	orr.w	r2, r3, #16
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e000      	b.n	800cb5e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800cb5c:	2302      	movs	r3, #2
  }
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	ffff0000 	.word	0xffff0000
 800cb6c:	08010c71 	.word	0x08010c71
 800cb70:	08010e1b 	.word	0x08010e1b

0800cb74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	461a      	mov	r2, r3
 800cb82:	4603      	mov	r3, r0
 800cb84:	817b      	strh	r3, [r7, #10]
 800cb86:	460b      	mov	r3, r1
 800cb88:	813b      	strh	r3, [r7, #8]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb8e:	f7f9 fe6d 	bl	800686c <HAL_GetTick>
 800cb92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	2b20      	cmp	r3, #32
 800cb9e:	f040 80d9 	bne.w	800cd54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	2319      	movs	r3, #25
 800cba8:	2201      	movs	r2, #1
 800cbaa:	496d      	ldr	r1, [pc, #436]	; (800cd60 <HAL_I2C_Mem_Write+0x1ec>)
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f004 fa19 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cbb8:	2302      	movs	r3, #2
 800cbba:	e0cc      	b.n	800cd56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d101      	bne.n	800cbca <HAL_I2C_Mem_Write+0x56>
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	e0c5      	b.n	800cd56 <HAL_I2C_Mem_Write+0x1e2>
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 0301 	and.w	r3, r3, #1
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d007      	beq.n	800cbf0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f042 0201 	orr.w	r2, r2, #1
 800cbee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2221      	movs	r2, #33	; 0x21
 800cc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2240      	movs	r2, #64	; 0x40
 800cc0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6a3a      	ldr	r2, [r7, #32]
 800cc1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4a4d      	ldr	r2, [pc, #308]	; (800cd64 <HAL_I2C_Mem_Write+0x1f0>)
 800cc30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cc32:	88f8      	ldrh	r0, [r7, #6]
 800cc34:	893a      	ldrh	r2, [r7, #8]
 800cc36:	8979      	ldrh	r1, [r7, #10]
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	4603      	mov	r3, r0
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f003 fe96 	bl	8010974 <I2C_RequestMemoryWrite>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d052      	beq.n	800ccf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e081      	b.n	800cd56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	f004 fa9a 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00d      	beq.n	800cc7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	2b04      	cmp	r3, #4
 800cc68:	d107      	bne.n	800cc7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e06b      	b.n	800cd56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc82:	781a      	ldrb	r2, [r3, #0]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	3b01      	subs	r3, #1
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d11b      	bne.n	800ccf4 <HAL_I2C_Mem_Write+0x180>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d017      	beq.n	800ccf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc8:	781a      	ldrb	r2, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	1c5a      	adds	r2, r3, #1
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccde:	3b01      	subs	r3, #1
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	3b01      	subs	r3, #1
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1aa      	bne.n	800cc52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f004 fa86 	bl	8011212 <I2C_WaitOnBTFFlagUntilTimeout>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00d      	beq.n	800cd28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd10:	2b04      	cmp	r3, #4
 800cd12:	d107      	bne.n	800cd24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e016      	b.n	800cd56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2220      	movs	r2, #32
 800cd3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	e000      	b.n	800cd56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800cd54:	2302      	movs	r3, #2
  }
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3718      	adds	r7, #24
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	00100002 	.word	0x00100002
 800cd64:	ffff0000 	.word	0xffff0000

0800cd68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08c      	sub	sp, #48	; 0x30
 800cd6c:	af02      	add	r7, sp, #8
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	4608      	mov	r0, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	461a      	mov	r2, r3
 800cd76:	4603      	mov	r3, r0
 800cd78:	817b      	strh	r3, [r7, #10]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	813b      	strh	r3, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd82:	f7f9 fd73 	bl	800686c <HAL_GetTick>
 800cd86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	2b20      	cmp	r3, #32
 800cd92:	f040 8208 	bne.w	800d1a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	2319      	movs	r3, #25
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	497b      	ldr	r1, [pc, #492]	; (800cf8c <HAL_I2C_Mem_Read+0x224>)
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f004 f91f 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cdac:	2302      	movs	r3, #2
 800cdae:	e1fb      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <HAL_I2C_Mem_Read+0x56>
 800cdba:	2302      	movs	r3, #2
 800cdbc:	e1f4      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f003 0301 	and.w	r3, r3, #1
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d007      	beq.n	800cde4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f042 0201 	orr.w	r2, r2, #1
 800cde2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2222      	movs	r2, #34	; 0x22
 800cdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2240      	movs	r2, #64	; 0x40
 800ce00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ce14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4a5b      	ldr	r2, [pc, #364]	; (800cf90 <HAL_I2C_Mem_Read+0x228>)
 800ce24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ce26:	88f8      	ldrh	r0, [r7, #6]
 800ce28:	893a      	ldrh	r2, [r7, #8]
 800ce2a:	8979      	ldrh	r1, [r7, #10]
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	4603      	mov	r3, r0
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f003 fe32 	bl	8010aa0 <I2C_RequestMemoryRead>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e1b0      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d113      	bne.n	800ce76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce4e:	2300      	movs	r3, #0
 800ce50:	617b      	str	r3, [r7, #20]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	617b      	str	r3, [r7, #20]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	617b      	str	r3, [r7, #20]
 800ce62:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	e184      	b.n	800d180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d11b      	bne.n	800ceb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce8e:	2300      	movs	r3, #0
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	61bb      	str	r3, [r7, #24]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	61bb      	str	r3, [r7, #24]
 800cea2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	e164      	b.n	800d180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d11b      	bne.n	800cef6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cecc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cedc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cede:	2300      	movs	r3, #0
 800cee0:	61fb      	str	r3, [r7, #28]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	61fb      	str	r3, [r7, #28]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	e144      	b.n	800d180 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cef6:	2300      	movs	r3, #0
 800cef8:	623b      	str	r3, [r7, #32]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	623b      	str	r3, [r7, #32]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	623b      	str	r3, [r7, #32]
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800cf0c:	e138      	b.n	800d180 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	f200 80f1 	bhi.w	800d0fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d123      	bne.n	800cf68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f004 fa25 	bl	8011374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e139      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	691a      	ldr	r2, [r3, #16]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	b2d2      	uxtb	r2, r2
 800cf40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf46:	1c5a      	adds	r2, r3, #1
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf50:	3b01      	subs	r3, #1
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf66:	e10b      	b.n	800d180 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d14e      	bne.n	800d00e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	2200      	movs	r2, #0
 800cf78:	4906      	ldr	r1, [pc, #24]	; (800cf94 <HAL_I2C_Mem_Read+0x22c>)
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f004 f832 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d008      	beq.n	800cf98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e10e      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
 800cf8a:	bf00      	nop
 800cf8c:	00100002 	.word	0x00100002
 800cf90:	ffff0000 	.word	0xffff0000
 800cf94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	691a      	ldr	r2, [r3, #16]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb2:	b2d2      	uxtb	r2, r2
 800cfb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfba:	1c5a      	adds	r2, r3, #1
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	691a      	ldr	r2, [r3, #16]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe4:	b2d2      	uxtb	r2, r2
 800cfe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cff6:	3b01      	subs	r3, #1
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d002:	b29b      	uxth	r3, r3
 800d004:	3b01      	subs	r3, #1
 800d006:	b29a      	uxth	r2, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d00c:	e0b8      	b.n	800d180 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	2200      	movs	r2, #0
 800d016:	4966      	ldr	r1, [pc, #408]	; (800d1b0 <HAL_I2C_Mem_Read+0x448>)
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f003 ffe3 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d024:	2301      	movs	r3, #1
 800d026:	e0bf      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	691a      	ldr	r2, [r3, #16]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d042:	b2d2      	uxtb	r2, r2
 800d044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d054:	3b01      	subs	r3, #1
 800d056:	b29a      	uxth	r2, r3
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d060:	b29b      	uxth	r3, r3
 800d062:	3b01      	subs	r3, #1
 800d064:	b29a      	uxth	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d070:	2200      	movs	r2, #0
 800d072:	494f      	ldr	r1, [pc, #316]	; (800d1b0 <HAL_I2C_Mem_Read+0x448>)
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f003 ffb5 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e091      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	691a      	ldr	r2, [r3, #16]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09e:	b2d2      	uxtb	r2, r2
 800d0a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	691a      	ldr	r2, [r3, #16]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d0:	b2d2      	uxtb	r2, r2
 800d0d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d8:	1c5a      	adds	r2, r3, #1
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0f8:	e042      	b.n	800d180 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f004 f938 	bl	8011374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e04c      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	691a      	ldr	r2, [r3, #16]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d118:	b2d2      	uxtb	r2, r2
 800d11a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d12a:	3b01      	subs	r3, #1
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d136:	b29b      	uxth	r3, r3
 800d138:	3b01      	subs	r3, #1
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	f003 0304 	and.w	r3, r3, #4
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d118      	bne.n	800d180 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	691a      	ldr	r2, [r3, #16]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d158:	b2d2      	uxtb	r2, r2
 800d15a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d16a:	3b01      	subs	r3, #1
 800d16c:	b29a      	uxth	r2, r3
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d176:	b29b      	uxth	r3, r3
 800d178:	3b01      	subs	r3, #1
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d184:	2b00      	cmp	r3, #0
 800d186:	f47f aec2 	bne.w	800cf0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2220      	movs	r2, #32
 800d18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e000      	b.n	800d1a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d1a6:	2302      	movs	r3, #2
  }
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3728      	adds	r7, #40	; 0x28
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	00010004 	.word	0x00010004

0800d1b4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	4608      	mov	r0, r1
 800d1be:	4611      	mov	r1, r2
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	817b      	strh	r3, [r7, #10]
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	813b      	strh	r3, [r7, #8]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b20      	cmp	r3, #32
 800d1dc:	f040 808e 	bne.w	800d2fc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d1e0:	4b4a      	ldr	r3, [pc, #296]	; (800d30c <HAL_I2C_Mem_Write_IT+0x158>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	08db      	lsrs	r3, r3, #3
 800d1e6:	4a4a      	ldr	r2, [pc, #296]	; (800d310 <HAL_I2C_Mem_Write_IT+0x15c>)
 800d1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ec:	0a1a      	lsrs	r2, r3, #8
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009a      	lsls	r2, r3, #2
 800d1f6:	4413      	add	r3, r2
 800d1f8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d116      	bne.n	800d234 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2220      	movs	r2, #32
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d220:	f043 0220 	orr.w	r2, r3, #32
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	e064      	b.n	800d2fe <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	f003 0302 	and.w	r3, r3, #2
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d0db      	beq.n	800d1fa <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d101      	bne.n	800d250 <HAL_I2C_Mem_Write_IT+0x9c>
 800d24c:	2302      	movs	r3, #2
 800d24e:	e056      	b.n	800d2fe <HAL_I2C_Mem_Write_IT+0x14a>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f003 0301 	and.w	r3, r3, #1
 800d262:	2b01      	cmp	r3, #1
 800d264:	d007      	beq.n	800d276 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f042 0201 	orr.w	r2, r2, #1
 800d274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d284:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2221      	movs	r2, #33	; 0x21
 800d28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2240      	movs	r2, #64	; 0x40
 800d292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6a3a      	ldr	r2, [r7, #32]
 800d2a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	4a17      	ldr	r2, [pc, #92]	; (800d314 <HAL_I2C_Mem_Write_IT+0x160>)
 800d2b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d2b8:	897a      	ldrh	r2, [r7, #10]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d2be:	893a      	ldrh	r2, [r7, #8]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d2c4:	88fa      	ldrh	r2, [r7, #6]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2de:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d2f6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e000      	b.n	800d2fe <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800d2fc:	2302      	movs	r3, #2
  }
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	371c      	adds	r7, #28
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	20000058 	.word	0x20000058
 800d310:	14f8b589 	.word	0x14f8b589
 800d314:	ffff0000 	.word	0xffff0000

0800d318 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d318:	b480      	push	{r7}
 800d31a:	b087      	sub	sp, #28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	4608      	mov	r0, r1
 800d322:	4611      	mov	r1, r2
 800d324:	461a      	mov	r2, r3
 800d326:	4603      	mov	r3, r0
 800d328:	817b      	strh	r3, [r7, #10]
 800d32a:	460b      	mov	r3, r1
 800d32c:	813b      	strh	r3, [r7, #8]
 800d32e:	4613      	mov	r3, r2
 800d330:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b20      	cmp	r3, #32
 800d340:	f040 809a 	bne.w	800d478 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d344:	4b50      	ldr	r3, [pc, #320]	; (800d488 <HAL_I2C_Mem_Read_IT+0x170>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	08db      	lsrs	r3, r3, #3
 800d34a:	4a50      	ldr	r2, [pc, #320]	; (800d48c <HAL_I2C_Mem_Read_IT+0x174>)
 800d34c:	fba2 2303 	umull	r2, r3, r2, r3
 800d350:	0a1a      	lsrs	r2, r3, #8
 800d352:	4613      	mov	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	009a      	lsls	r2, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	3b01      	subs	r3, #1
 800d362:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d116      	bne.n	800d398 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2220      	movs	r2, #32
 800d374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d384:	f043 0220 	orr.w	r2, r3, #32
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	e070      	b.n	800d47a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	f003 0302 	and.w	r3, r3, #2
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d0db      	beq.n	800d35e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d101      	bne.n	800d3b4 <HAL_I2C_Mem_Read_IT+0x9c>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	e062      	b.n	800d47a <HAL_I2C_Mem_Read_IT+0x162>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f003 0301 	and.w	r3, r3, #1
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d007      	beq.n	800d3da <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f042 0201 	orr.w	r2, r2, #1
 800d3d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3e8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2222      	movs	r2, #34	; 0x22
 800d3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2240      	movs	r2, #64	; 0x40
 800d3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6a3a      	ldr	r2, [r7, #32]
 800d404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d40a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d410:	b29a      	uxth	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	4a1d      	ldr	r2, [pc, #116]	; (800d490 <HAL_I2C_Mem_Read_IT+0x178>)
 800d41a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d41c:	897a      	ldrh	r2, [r7, #10]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d422:	893a      	ldrh	r2, [r7, #8]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d428:	88fa      	ldrh	r2, [r7, #6]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d442:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d452:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d460:	2b00      	cmp	r3, #0
 800d462:	d007      	beq.n	800d474 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685a      	ldr	r2, [r3, #4]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d472:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800d474:	2300      	movs	r3, #0
 800d476:	e000      	b.n	800d47a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800d478:	2302      	movs	r3, #2
  }
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	371c      	adds	r7, #28
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop
 800d488:	20000058 	.word	0x20000058
 800d48c:	14f8b589 	.word	0x14f8b589
 800d490:	ffff0000 	.word	0xffff0000

0800d494 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08a      	sub	sp, #40	; 0x28
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	4608      	mov	r0, r1
 800d49e:	4611      	mov	r1, r2
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	817b      	strh	r3, [r7, #10]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	813b      	strh	r3, [r7, #8]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d4b2:	f7f9 f9db 	bl	800686c <HAL_GetTick>
 800d4b6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	2b20      	cmp	r3, #32
 800d4c2:	f040 8145 	bne.w	800d750 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d4c6:	4b9d      	ldr	r3, [pc, #628]	; (800d73c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	08db      	lsrs	r3, r3, #3
 800d4cc:	4a9c      	ldr	r2, [pc, #624]	; (800d740 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800d4ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d2:	0a1a      	lsrs	r2, r3, #8
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4413      	add	r3, r2
 800d4da:	009a      	lsls	r2, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d116      	bne.n	800d51a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d506:	f043 0220 	orr.w	r2, r3, #32
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e11b      	b.n	800d752 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	f003 0302 	and.w	r3, r3, #2
 800d524:	2b02      	cmp	r3, #2
 800d526:	d0db      	beq.n	800d4e0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d101      	bne.n	800d536 <HAL_I2C_Mem_Write_DMA+0xa2>
 800d532:	2302      	movs	r3, #2
 800d534:	e10d      	b.n	800d752 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d007      	beq.n	800d55c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f042 0201 	orr.w	r2, r2, #1
 800d55a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d56a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2221      	movs	r2, #33	; 0x21
 800d570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2240      	movs	r2, #64	; 0x40
 800d578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d58c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d592:	b29a      	uxth	r2, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	4a6a      	ldr	r2, [pc, #424]	; (800d744 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800d59c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d59e:	897a      	ldrh	r2, [r7, #10]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d5a4:	893a      	ldrh	r2, [r7, #8]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d5aa:	88fa      	ldrh	r2, [r7, #6]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f000 80a9 	beq.w	800d712 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d02a      	beq.n	800d61e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5cc:	4a5e      	ldr	r2, [pc, #376]	; (800d748 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800d5ce:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d4:	4a5d      	ldr	r2, [pc, #372]	; (800d74c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800d5d6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5dc:	2200      	movs	r2, #0
 800d5de:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d600:	4619      	mov	r1, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3310      	adds	r3, #16
 800d608:	461a      	mov	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d60e:	f7fa fb96 	bl	8007d3e <HAL_DMA_Start_IT>
 800d612:	4603      	mov	r3, r0
 800d614:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d616:	7efb      	ldrb	r3, [r7, #27]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d166      	bne.n	800d6ea <HAL_I2C_Mem_Write_DMA+0x256>
 800d61c:	e013      	b.n	800d646 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2220      	movs	r2, #32
 800d622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d632:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	e085      	b.n	800d752 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d646:	88f8      	ldrh	r0, [r7, #6]
 800d648:	893a      	ldrh	r2, [r7, #8]
 800d64a:	8979      	ldrh	r1, [r7, #10]
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	9301      	str	r3, [sp, #4]
 800d650:	2323      	movs	r3, #35	; 0x23
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	4603      	mov	r3, r0
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f003 f98c 	bl	8010974 <I2C_RequestMemoryWrite>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d022      	beq.n	800d6a8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d666:	4618      	mov	r0, r3
 800d668:	f7fa fc31 	bl	8007ece <HAL_DMA_Abort_IT>
 800d66c:	4603      	mov	r3, r0
 800d66e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d674:	2200      	movs	r2, #0
 800d676:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d686:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f022 0201 	bic.w	r2, r2, #1
 800d6a2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e054      	b.n	800d752 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	613b      	str	r3, [r7, #16]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	613b      	str	r3, [r7, #16]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	613b      	str	r3, [r7, #16]
 800d6bc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6d4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6e4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e033      	b.n	800d752 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2220      	movs	r2, #32
 800d6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fe:	f043 0210 	orr.w	r2, r3, #16
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e01f      	b.n	800d752 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2220      	movs	r2, #32
 800d716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d736:	2301      	movs	r3, #1
 800d738:	e00b      	b.n	800d752 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d73a:	bf00      	nop
 800d73c:	20000058 	.word	0x20000058
 800d740:	14f8b589 	.word	0x14f8b589
 800d744:	ffff0000 	.word	0xffff0000
 800d748:	08010c71 	.word	0x08010c71
 800d74c:	08010e1b 	.word	0x08010e1b
    }
  }
  else
  {
    return HAL_BUSY;
 800d750:	2302      	movs	r3, #2
  }
}
 800d752:	4618      	mov	r0, r3
 800d754:	3720      	adds	r7, #32
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b08c      	sub	sp, #48	; 0x30
 800d75e:	af02      	add	r7, sp, #8
 800d760:	60f8      	str	r0, [r7, #12]
 800d762:	4608      	mov	r0, r1
 800d764:	4611      	mov	r1, r2
 800d766:	461a      	mov	r2, r3
 800d768:	4603      	mov	r3, r0
 800d76a:	817b      	strh	r3, [r7, #10]
 800d76c:	460b      	mov	r3, r1
 800d76e:	813b      	strh	r3, [r7, #8]
 800d770:	4613      	mov	r3, r2
 800d772:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d774:	f7f9 f87a 	bl	800686c <HAL_GetTick>
 800d778:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d77a:	2300      	movs	r3, #0
 800d77c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d784:	b2db      	uxtb	r3, r3
 800d786:	2b20      	cmp	r3, #32
 800d788:	f040 8175 	bne.w	800da76 <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d78c:	4b94      	ldr	r3, [pc, #592]	; (800d9e0 <HAL_I2C_Mem_Read_DMA+0x286>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	08db      	lsrs	r3, r3, #3
 800d792:	4a94      	ldr	r2, [pc, #592]	; (800d9e4 <HAL_I2C_Mem_Read_DMA+0x28a>)
 800d794:	fba2 2303 	umull	r2, r3, r2, r3
 800d798:	0a1a      	lsrs	r2, r3, #8
 800d79a:	4613      	mov	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	009a      	lsls	r2, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	3b01      	subs	r3, #1
 800d7aa:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d116      	bne.n	800d7e0 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2220      	movs	r2, #32
 800d7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7cc:	f043 0220 	orr.w	r2, r3, #32
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e14b      	b.n	800da78 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	f003 0302 	and.w	r3, r3, #2
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d0db      	beq.n	800d7a6 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d101      	bne.n	800d7fc <HAL_I2C_Mem_Read_DMA+0xa2>
 800d7f8:	2302      	movs	r3, #2
 800d7fa:	e13d      	b.n	800da78 <HAL_I2C_Mem_Read_DMA+0x31e>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d007      	beq.n	800d822 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f042 0201 	orr.w	r2, r2, #1
 800d820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d830:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2222      	movs	r2, #34	; 0x22
 800d836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2240      	movs	r2, #64	; 0x40
 800d83e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d84c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d858:	b29a      	uxth	r2, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	4a61      	ldr	r2, [pc, #388]	; (800d9e8 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800d862:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d864:	897a      	ldrh	r2, [r7, #10]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d86a:	893a      	ldrh	r2, [r7, #8]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d870:	88fa      	ldrh	r2, [r7, #6]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d880:	2b00      	cmp	r3, #0
 800d882:	f000 80cb 	beq.w	800da1c <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d02d      	beq.n	800d8ea <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d892:	4a56      	ldr	r2, [pc, #344]	; (800d9ec <HAL_I2C_Mem_Read_DMA+0x292>)
 800d894:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89a:	4a55      	ldr	r2, [pc, #340]	; (800d9f0 <HAL_I2C_Mem_Read_DMA+0x296>)
 800d89c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3310      	adds	r3, #16
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8d4:	f7fa fa33 	bl	8007d3e <HAL_DMA_Start_IT>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d8de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f040 8086 	bne.w	800d9f4 <HAL_I2C_Mem_Read_DMA+0x29a>
 800d8e8:	e013      	b.n	800d912 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e0b2      	b.n	800da78 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d912:	88f8      	ldrh	r0, [r7, #6]
 800d914:	893a      	ldrh	r2, [r7, #8]
 800d916:	8979      	ldrh	r1, [r7, #10]
 800d918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91a:	9301      	str	r3, [sp, #4]
 800d91c:	2323      	movs	r3, #35	; 0x23
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	4603      	mov	r3, r0
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f003 f8bc 	bl	8010aa0 <I2C_RequestMemoryRead>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d023      	beq.n	800d976 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d932:	4618      	mov	r0, r3
 800d934:	f7fa facb 	bl	8007ece <HAL_DMA_Abort_IT>
 800d938:	4603      	mov	r3, r0
 800d93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d942:	2200      	movs	r2, #0
 800d944:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d954:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2200      	movs	r2, #0
 800d95a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2200      	movs	r2, #0
 800d960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f022 0201 	bic.w	r2, r2, #1
 800d970:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e080      	b.n	800da78 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d108      	bne.n	800d990 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	e007      	b.n	800d9a0 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685a      	ldr	r2, [r3, #4]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d99e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	617b      	str	r3, [r7, #20]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	617b      	str	r3, [r7, #20]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	699b      	ldr	r3, [r3, #24]
 800d9b2:	617b      	str	r3, [r7, #20]
 800d9b4:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	685a      	ldr	r2, [r3, #4]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9cc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9dc:	605a      	str	r2, [r3, #4]
 800d9de:	e048      	b.n	800da72 <HAL_I2C_Mem_Read_DMA+0x318>
 800d9e0:	20000058 	.word	0x20000058
 800d9e4:	14f8b589 	.word	0x14f8b589
 800d9e8:	ffff0000 	.word	0xffff0000
 800d9ec:	08010c71 	.word	0x08010c71
 800d9f0:	08010e1b 	.word	0x08010e1b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2220      	movs	r2, #32
 800d9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da08:	f043 0210 	orr.w	r2, r3, #16
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	e02d      	b.n	800da78 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800da1c:	88f8      	ldrh	r0, [r7, #6]
 800da1e:	893a      	ldrh	r2, [r7, #8]
 800da20:	8979      	ldrh	r1, [r7, #10]
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	9301      	str	r3, [sp, #4]
 800da26:	2323      	movs	r3, #35	; 0x23
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	4603      	mov	r3, r0
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f003 f837 	bl	8010aa0 <I2C_RequestMemoryRead>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	e01d      	b.n	800da78 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da3c:	2300      	movs	r3, #0
 800da3e:	61bb      	str	r3, [r7, #24]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	695b      	ldr	r3, [r3, #20]
 800da46:	61bb      	str	r3, [r7, #24]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	61bb      	str	r3, [r7, #24]
 800da50:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da60:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2220      	movs	r2, #32
 800da66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	e000      	b.n	800da78 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800da76:	2302      	movs	r3, #2
  }
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3728      	adds	r7, #40	; 0x28
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08a      	sub	sp, #40	; 0x28
 800da84:	af02      	add	r7, sp, #8
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	607a      	str	r2, [r7, #4]
 800da8a:	603b      	str	r3, [r7, #0]
 800da8c:	460b      	mov	r3, r1
 800da8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800da90:	f7f8 feec 	bl	800686c <HAL_GetTick>
 800da94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800da96:	2301      	movs	r3, #1
 800da98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b20      	cmp	r3, #32
 800daa4:	f040 8111 	bne.w	800dcca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	2319      	movs	r3, #25
 800daae:	2201      	movs	r2, #1
 800dab0:	4988      	ldr	r1, [pc, #544]	; (800dcd4 <HAL_I2C_IsDeviceReady+0x254>)
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f003 fa96 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800dabe:	2302      	movs	r3, #2
 800dac0:	e104      	b.n	800dccc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d101      	bne.n	800dad0 <HAL_I2C_IsDeviceReady+0x50>
 800dacc:	2302      	movs	r3, #2
 800dace:	e0fd      	b.n	800dccc <HAL_I2C_IsDeviceReady+0x24c>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2201      	movs	r2, #1
 800dad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d007      	beq.n	800daf6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f042 0201 	orr.w	r2, r2, #1
 800daf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2224      	movs	r2, #36	; 0x24
 800db0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	4a70      	ldr	r2, [pc, #448]	; (800dcd8 <HAL_I2C_IsDeviceReady+0x258>)
 800db18:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db28:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2200      	movs	r2, #0
 800db32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f003 fa54 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00d      	beq.n	800db5e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db50:	d103      	bne.n	800db5a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db58:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e0b6      	b.n	800dccc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800db5e:	897b      	ldrh	r3, [r7, #10]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	461a      	mov	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800db6c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800db6e:	f7f8 fe7d 	bl	800686c <HAL_GetTick>
 800db72:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	f003 0302 	and.w	r3, r3, #2
 800db7e:	2b02      	cmp	r3, #2
 800db80:	bf0c      	ite	eq
 800db82:	2301      	moveq	r3, #1
 800db84:	2300      	movne	r3, #0
 800db86:	b2db      	uxtb	r3, r3
 800db88:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	695b      	ldr	r3, [r3, #20]
 800db90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db98:	bf0c      	ite	eq
 800db9a:	2301      	moveq	r3, #1
 800db9c:	2300      	movne	r3, #0
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800dba2:	e025      	b.n	800dbf0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dba4:	f7f8 fe62 	bl	800686c <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d302      	bcc.n	800dbba <HAL_I2C_IsDeviceReady+0x13a>
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d103      	bne.n	800dbc2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	22a0      	movs	r2, #160	; 0xa0
 800dbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	695b      	ldr	r3, [r3, #20]
 800dbc8:	f003 0302 	and.w	r3, r3, #2
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	bf0c      	ite	eq
 800dbd0:	2301      	moveq	r3, #1
 800dbd2:	2300      	movne	r3, #0
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	695b      	ldr	r3, [r3, #20]
 800dbde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbe6:	bf0c      	ite	eq
 800dbe8:	2301      	moveq	r3, #1
 800dbea:	2300      	movne	r3, #0
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2ba0      	cmp	r3, #160	; 0xa0
 800dbfa:	d005      	beq.n	800dc08 <HAL_I2C_IsDeviceReady+0x188>
 800dbfc:	7dfb      	ldrb	r3, [r7, #23]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <HAL_I2C_IsDeviceReady+0x188>
 800dc02:	7dbb      	ldrb	r3, [r7, #22]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d0cd      	beq.n	800dba4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2220      	movs	r2, #32
 800dc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	695b      	ldr	r3, [r3, #20]
 800dc16:	f003 0302 	and.w	r3, r3, #2
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d129      	bne.n	800dc72 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc2c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc2e:	2300      	movs	r3, #0
 800dc30:	613b      	str	r3, [r7, #16]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	613b      	str	r3, [r7, #16]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	699b      	ldr	r3, [r3, #24]
 800dc40:	613b      	str	r3, [r7, #16]
 800dc42:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	2319      	movs	r3, #25
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	4921      	ldr	r1, [pc, #132]	; (800dcd4 <HAL_I2C_IsDeviceReady+0x254>)
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f003 f9c8 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e036      	b.n	800dccc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2220      	movs	r2, #32
 800dc62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e02c      	b.n	800dccc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc80:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dc8a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	2319      	movs	r3, #25
 800dc92:	2201      	movs	r2, #1
 800dc94:	490f      	ldr	r1, [pc, #60]	; (800dcd4 <HAL_I2C_IsDeviceReady+0x254>)
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f003 f9a4 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e012      	b.n	800dccc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800dcac:	69ba      	ldr	r2, [r7, #24]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	f4ff af32 	bcc.w	800db1a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2220      	movs	r2, #32
 800dcba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e000      	b.n	800dccc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800dcca:	2302      	movs	r3, #2
  }
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3720      	adds	r7, #32
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	00100002 	.word	0x00100002
 800dcd8:	ffff0000 	.word	0xffff0000

0800dcdc <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b087      	sub	sp, #28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	607a      	str	r2, [r7, #4]
 800dce6:	461a      	mov	r2, r3
 800dce8:	460b      	mov	r3, r1
 800dcea:	817b      	strh	r3, [r7, #10]
 800dcec:	4613      	mov	r3, r2
 800dcee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b20      	cmp	r3, #32
 800dd02:	f040 80a6 	bne.w	800de52 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd14:	d005      	beq.n	800dd22 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dd16:	6a3b      	ldr	r3, [r7, #32]
 800dd18:	2b08      	cmp	r3, #8
 800dd1a:	d002      	beq.n	800dd22 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dd1c:	6a3b      	ldr	r3, [r7, #32]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d130      	bne.n	800dd84 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dd22:	4b4f      	ldr	r3, [pc, #316]	; (800de60 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	08db      	lsrs	r3, r3, #3
 800dd28:	4a4e      	ldr	r2, [pc, #312]	; (800de64 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800dd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd2e:	0a1a      	lsrs	r2, r3, #8
 800dd30:	4613      	mov	r3, r2
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	009a      	lsls	r2, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d116      	bne.n	800dd76 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2220      	movs	r2, #32
 800dd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd62:	f043 0220 	orr.w	r2, r3, #32
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e06e      	b.n	800de54 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	699b      	ldr	r3, [r3, #24]
 800dd7c:	f003 0302 	and.w	r3, r3, #2
 800dd80:	2b02      	cmp	r3, #2
 800dd82:	d0db      	beq.n	800dd3c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d101      	bne.n	800dd92 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800dd8e:	2302      	movs	r3, #2
 800dd90:	e060      	b.n	800de54 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2201      	movs	r2, #1
 800dd96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d007      	beq.n	800ddb8 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f042 0201 	orr.w	r2, r2, #1
 800ddb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ddc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2221      	movs	r2, #33	; 0x21
 800ddcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2210      	movs	r2, #16
 800ddd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	893a      	ldrh	r2, [r7, #8]
 800dde8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6a3a      	ldr	r2, [r7, #32]
 800ddf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800ddfa:	897a      	ldrh	r2, [r7, #10]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de04:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	2b11      	cmp	r3, #17
 800de0a:	d10c      	bne.n	800de26 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800de12:	d003      	beq.n	800de1c <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800de14:	6a3b      	ldr	r3, [r7, #32]
 800de16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800de1a:	d101      	bne.n	800de20 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800de1c:	2301      	movs	r3, #1
 800de1e:	e000      	b.n	800de22 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800de20:	2300      	movs	r3, #0
 800de22:	2b01      	cmp	r3, #1
 800de24:	d107      	bne.n	800de36 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de34:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	685a      	ldr	r2, [r3, #4]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800de4c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800de4e:	2300      	movs	r3, #0
 800de50:	e000      	b.n	800de54 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800de52:	2302      	movs	r3, #2
  }
}
 800de54:	4618      	mov	r0, r3
 800de56:	371c      	adds	r7, #28
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr
 800de60:	20000058 	.word	0x20000058
 800de64:	14f8b589 	.word	0x14f8b589

0800de68 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	607a      	str	r2, [r7, #4]
 800de72:	461a      	mov	r2, r3
 800de74:	460b      	mov	r3, r1
 800de76:	817b      	strh	r3, [r7, #10]
 800de78:	4613      	mov	r3, r2
 800de7a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800de7c:	2300      	movs	r3, #0
 800de7e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800de80:	2300      	movs	r3, #0
 800de82:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b20      	cmp	r3, #32
 800de8e:	f040 8149 	bne.w	800e124 <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dea0:	d005      	beq.n	800deae <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea4:	2b08      	cmp	r3, #8
 800dea6:	d002      	beq.n	800deae <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d130      	bne.n	800df10 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800deae:	4b99      	ldr	r3, [pc, #612]	; (800e114 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	08db      	lsrs	r3, r3, #3
 800deb4:	4a98      	ldr	r2, [pc, #608]	; (800e118 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800deb6:	fba2 2303 	umull	r2, r3, r2, r3
 800deba:	0a1a      	lsrs	r2, r3, #8
 800debc:	4613      	mov	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	009a      	lsls	r2, r3, #2
 800dec4:	4413      	add	r3, r2
 800dec6:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	3b01      	subs	r3, #1
 800decc:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d116      	bne.n	800df02 <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2220      	movs	r2, #32
 800dede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deee:	f043 0220 	orr.w	r2, r3, #32
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	e111      	b.n	800e126 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	f003 0302 	and.w	r3, r3, #2
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d0db      	beq.n	800dec8 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df16:	2b01      	cmp	r3, #1
 800df18:	d101      	bne.n	800df1e <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800df1a:	2302      	movs	r3, #2
 800df1c:	e103      	b.n	800e126 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2201      	movs	r2, #1
 800df22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b01      	cmp	r3, #1
 800df32:	d007      	beq.n	800df44 <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f042 0201 	orr.w	r2, r2, #1
 800df42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2221      	movs	r2, #33	; 0x21
 800df58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2210      	movs	r2, #16
 800df60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2200      	movs	r2, #0
 800df68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	893a      	ldrh	r2, [r7, #8]
 800df74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800df86:	897a      	ldrh	r2, [r7, #10]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df90:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df96:	2b00      	cmp	r3, #0
 800df98:	f000 808d 	beq.w	800e0b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d022      	beq.n	800dfea <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa8:	4a5c      	ldr	r2, [pc, #368]	; (800e11c <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800dfaa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb0:	4a5b      	ldr	r2, [pc, #364]	; (800e120 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800dfb2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb8:	2200      	movs	r2, #0
 800dfba:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	4619      	mov	r1, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	3310      	adds	r3, #16
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfda:	f7f9 feb0 	bl	8007d3e <HAL_DMA_Start_IT>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dfe2:	7ffb      	ldrb	r3, [r7, #31]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d152      	bne.n	800e08e <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800dfe8:	e013      	b.n	800e012 <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2220      	movs	r2, #32
 800dfee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e089      	b.n	800e126 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e020:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	2b11      	cmp	r3, #17
 800e026:	d10c      	bne.n	800e042 <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e02e:	d003      	beq.n	800e038 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800e030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e032:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e036:	d101      	bne.n	800e03c <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800e038:	2301      	movs	r3, #1
 800e03a:	e000      	b.n	800e03e <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800e03c:	2300      	movs	r3, #0
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d107      	bne.n	800e052 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e050:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2200      	movs	r2, #0
 800e056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05c:	2b04      	cmp	r3, #4
 800e05e:	d005      	beq.n	800e06c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e062:	2b20      	cmp	r3, #32
 800e064:	d002      	beq.n	800e06c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e068:	2b10      	cmp	r3, #16
 800e06a:	d107      	bne.n	800e07c <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e07a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e08a:	605a      	str	r2, [r3, #4]
 800e08c:	e03f      	b.n	800e10e <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2220      	movs	r2, #32
 800e092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0a2:	f043 0210 	orr.w	r2, r3, #16
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e037      	b.n	800e126 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0c4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	2b11      	cmp	r3, #17
 800e0ca:	d10c      	bne.n	800e0e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e0d2:	d003      	beq.n	800e0dc <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800e0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e0da:	d101      	bne.n	800e0e0 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e000      	b.n	800e0e2 <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d107      	bne.n	800e0f6 <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0f4:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	685a      	ldr	r2, [r3, #4]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e10c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800e10e:	2300      	movs	r3, #0
 800e110:	e009      	b.n	800e126 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e112:	bf00      	nop
 800e114:	20000058 	.word	0x20000058
 800e118:	14f8b589 	.word	0x14f8b589
 800e11c:	08010c71 	.word	0x08010c71
 800e120:	08010e1b 	.word	0x08010e1b
  }
  else
  {
    return HAL_BUSY;
 800e124:	2302      	movs	r3, #2
  }
}
 800e126:	4618      	mov	r0, r3
 800e128:	3720      	adds	r7, #32
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e12e:	b480      	push	{r7}
 800e130:	b089      	sub	sp, #36	; 0x24
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	461a      	mov	r2, r3
 800e13a:	460b      	mov	r3, r1
 800e13c:	817b      	strh	r3, [r7, #10]
 800e13e:	4613      	mov	r3, r2
 800e140:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e142:	2300      	movs	r3, #0
 800e144:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e146:	2300      	movs	r3, #0
 800e148:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e14a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e14e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b20      	cmp	r3, #32
 800e15a:	f040 80da 	bne.w	800e312 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e16c:	d005      	beq.n	800e17a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e170:	2b08      	cmp	r3, #8
 800e172:	d002      	beq.n	800e17a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e176:	2b01      	cmp	r3, #1
 800e178:	d130      	bne.n	800e1dc <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e17a:	4b69      	ldr	r3, [pc, #420]	; (800e320 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	08db      	lsrs	r3, r3, #3
 800e180:	4a68      	ldr	r2, [pc, #416]	; (800e324 <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800e182:	fba2 2303 	umull	r2, r3, r2, r3
 800e186:	0a1a      	lsrs	r2, r3, #8
 800e188:	4613      	mov	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	009a      	lsls	r2, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	3b01      	subs	r3, #1
 800e198:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d116      	bne.n	800e1ce <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ba:	f043 0220 	orr.w	r2, r3, #32
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e0a2      	b.n	800e314 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	f003 0302 	and.w	r3, r3, #2
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d0db      	beq.n	800e194 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	e094      	b.n	800e314 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f003 0301 	and.w	r3, r3, #1
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d007      	beq.n	800e210 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f042 0201 	orr.w	r2, r2, #1
 800e20e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e21e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2222      	movs	r2, #34	; 0x22
 800e224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2210      	movs	r2, #16
 800e22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	893a      	ldrh	r2, [r7, #8]
 800e240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e246:	b29a      	uxth	r2, r3
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e250:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e252:	897a      	ldrh	r2, [r7, #10]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25c:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e262:	b29b      	uxth	r3, r3
 800e264:	2b02      	cmp	r3, #2
 800e266:	d126      	bne.n	800e2b6 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	2b20      	cmp	r3, #32
 800e26c:	d002      	beq.n	800e274 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	2b10      	cmp	r3, #16
 800e272:	d120      	bne.n	800e2b6 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	2b12      	cmp	r3, #18
 800e278:	d114      	bne.n	800e2a4 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e288:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e298:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2a0:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e2a2:	e010      	b.n	800e2c6 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2b2:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e2b4:	e007      	b.n	800e2c6 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2c4:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	2b12      	cmp	r3, #18
 800e2ca:	d10c      	bne.n	800e2e6 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e2d2:	d003      	beq.n	800e2dc <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e2da:	d101      	bne.n	800e2e0 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e000      	b.n	800e2e2 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d107      	bne.n	800e2f6 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2f4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	6859      	ldr	r1, [r3, #4]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	69fa      	ldr	r2, [r7, #28]
 800e30a:	430a      	orrs	r2, r1
 800e30c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	e000      	b.n	800e314 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800e312:	2302      	movs	r3, #2
  }
}
 800e314:	4618      	mov	r0, r3
 800e316:	3724      	adds	r7, #36	; 0x24
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	20000058 	.word	0x20000058
 800e324:	14f8b589 	.word	0x14f8b589

0800e328 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	607a      	str	r2, [r7, #4]
 800e332:	461a      	mov	r2, r3
 800e334:	460b      	mov	r3, r1
 800e336:	817b      	strh	r3, [r7, #10]
 800e338:	4613      	mov	r3, r2
 800e33a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e33c:	2300      	movs	r3, #0
 800e33e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e344:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e348:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e350:	b2db      	uxtb	r3, r3
 800e352:	2b20      	cmp	r3, #32
 800e354:	f040 8199 	bne.w	800e68a <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e366:	d005      	beq.n	800e374 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	2b08      	cmp	r3, #8
 800e36c:	d002      	beq.n	800e374 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e370:	2b01      	cmp	r3, #1
 800e372:	d130      	bne.n	800e3d6 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e374:	4b8f      	ldr	r3, [pc, #572]	; (800e5b4 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	08db      	lsrs	r3, r3, #3
 800e37a:	4a8f      	ldr	r2, [pc, #572]	; (800e5b8 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800e37c:	fba2 2303 	umull	r2, r3, r2, r3
 800e380:	0a1a      	lsrs	r2, r3, #8
 800e382:	4613      	mov	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	009a      	lsls	r2, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	3b01      	subs	r3, #1
 800e392:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d116      	bne.n	800e3c8 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2220      	movs	r2, #32
 800e3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b4:	f043 0220 	orr.w	r2, r3, #32
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e161      	b.n	800e68c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	f003 0302 	and.w	r3, r3, #2
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d0db      	beq.n	800e38e <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d101      	bne.n	800e3e4 <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	e153      	b.n	800e68c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f003 0301 	and.w	r3, r3, #1
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d007      	beq.n	800e40a <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f042 0201 	orr.w	r2, r2, #1
 800e408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e418:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	685a      	ldr	r2, [r3, #4]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e428:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2222      	movs	r2, #34	; 0x22
 800e42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2210      	movs	r2, #16
 800e436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	893a      	ldrh	r2, [r7, #8]
 800e44a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e450:	b29a      	uxth	r2, r3
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e45a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e45c:	897a      	ldrh	r2, [r7, #10]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e466:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 80de 	beq.w	800e62e <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e476:	b29b      	uxth	r3, r3
 800e478:	2b02      	cmp	r3, #2
 800e47a:	d12a      	bne.n	800e4d2 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	2b20      	cmp	r3, #32
 800e480:	d002      	beq.n	800e488 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800e482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e484:	2b10      	cmp	r3, #16
 800e486:	d124      	bne.n	800e4d2 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	2b12      	cmp	r3, #18
 800e48c:	d118      	bne.n	800e4c0 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e49c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4ac:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e4bc:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e4be:	e022      	b.n	800e506 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4ce:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e4d0:	e019      	b.n	800e506 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4e0:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	2b20      	cmp	r3, #32
 800e4e6:	d006      	beq.n	800e4f6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e4ee:	d002      	beq.n	800e4f6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f2:	2b10      	cmp	r3, #16
 800e4f4:	d107      	bne.n	800e506 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e504:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d022      	beq.n	800e554 <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e512:	4a2a      	ldr	r2, [pc, #168]	; (800e5bc <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800e514:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e51a:	4a29      	ldr	r2, [pc, #164]	; (800e5c0 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800e51c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e522:	2200      	movs	r2, #0
 800e524:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52a:	2200      	movs	r2, #0
 800e52c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3310      	adds	r3, #16
 800e538:	4619      	mov	r1, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e53e:	461a      	mov	r2, r3
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e544:	f7f9 fbfb 	bl	8007d3e <HAL_DMA_Start_IT>
 800e548:	4603      	mov	r3, r0
 800e54a:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800e54c:	7efb      	ldrb	r3, [r7, #27]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d159      	bne.n	800e606 <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800e552:	e013      	b.n	800e57c <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2220      	movs	r2, #32
 800e558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e568:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	e087      	b.n	800e68c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2b12      	cmp	r3, #18
 800e580:	d10c      	bne.n	800e59c <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800e582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e584:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e588:	d003      	beq.n	800e592 <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e590:	d101      	bne.n	800e596 <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800e592:	2301      	movs	r3, #1
 800e594:	e000      	b.n	800e598 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800e596:	2300      	movs	r3, #0
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d113      	bne.n	800e5c4 <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5aa:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800e5ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e5b0:	61fb      	str	r3, [r7, #28]
 800e5b2:	e00a      	b.n	800e5ca <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800e5b4:	20000058 	.word	0x20000058
 800e5b8:	14f8b589 	.word	0x14f8b589
 800e5bc:	08010c71 	.word	0x08010c71
 800e5c0:	08010e1b 	.word	0x08010e1b
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800e5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5c8:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d4:	2b04      	cmp	r3, #4
 800e5d6:	d005      	beq.n	800e5e4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	2b20      	cmp	r3, #32
 800e5dc:	d002      	beq.n	800e5e4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e0:	2b10      	cmp	r3, #16
 800e5e2:	d107      	bne.n	800e5f4 <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5f2:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6859      	ldr	r1, [r3, #4]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	69fa      	ldr	r2, [r7, #28]
 800e600:	430a      	orrs	r2, r1
 800e602:	605a      	str	r2, [r3, #4]
 800e604:	e03f      	b.n	800e686 <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2220      	movs	r2, #32
 800e60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2200      	movs	r2, #0
 800e612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61a:	f043 0210 	orr.w	r2, r3, #16
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e02e      	b.n	800e68c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e63c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2b12      	cmp	r3, #18
 800e642:	d10c      	bne.n	800e65e <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e64a:	d003      	beq.n	800e654 <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800e64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e652:	d101      	bne.n	800e658 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800e654:	2301      	movs	r3, #1
 800e656:	e000      	b.n	800e65a <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800e658:	2300      	movs	r3, #0
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d107      	bne.n	800e66e <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e66c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	6859      	ldr	r1, [r3, #4]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	69fa      	ldr	r2, [r7, #28]
 800e682:	430a      	orrs	r2, r1
 800e684:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800e686:	2300      	movs	r3, #0
 800e688:	e000      	b.n	800e68c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800e68a:	2302      	movs	r3, #2
  }
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3720      	adds	r7, #32
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e694:	b480      	push	{r7}
 800e696:	b087      	sub	sp, #28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e6b0:	2b28      	cmp	r3, #40	; 0x28
 800e6b2:	d15b      	bne.n	800e76c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800e6ba:	88fb      	ldrh	r3, [r7, #6]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e054      	b.n	800e76e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d101      	bne.n	800e6d2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800e6ce:	2302      	movs	r3, #2
 800e6d0:	e04d      	b.n	800e76e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f003 0301 	and.w	r3, r3, #1
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d007      	beq.n	800e6f8 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f042 0201 	orr.w	r2, r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e706:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2229      	movs	r2, #41	; 0x29
 800e70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2220      	movs	r2, #32
 800e714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	88fa      	ldrh	r2, [r7, #6]
 800e728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e72e:	b29a      	uxth	r2, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e73a:	2300      	movs	r3, #0
 800e73c:	617b      	str	r3, [r7, #20]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	695b      	ldr	r3, [r3, #20]
 800e744:	617b      	str	r3, [r7, #20]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	617b      	str	r3, [r7, #20]
 800e74e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2200      	movs	r2, #0
 800e754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	685a      	ldr	r2, [r3, #4]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e766:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e768:	2300      	movs	r3, #0
 800e76a:	e000      	b.n	800e76e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e76c:	2302      	movs	r3, #2
  }
}
 800e76e:	4618      	mov	r0, r3
 800e770:	371c      	adds	r7, #28
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b086      	sub	sp, #24
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	60b9      	str	r1, [r7, #8]
 800e784:	603b      	str	r3, [r7, #0]
 800e786:	4613      	mov	r3, r2
 800e788:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e790:	b2db      	uxtb	r3, r3
 800e792:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e796:	2b28      	cmp	r3, #40	; 0x28
 800e798:	f040 811e 	bne.w	800e9d8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d002      	beq.n	800e7a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800e7a2:	88fb      	ldrh	r3, [r7, #6]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e116      	b.n	800e9da <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d101      	bne.n	800e7ba <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800e7b6:	2302      	movs	r3, #2
 800e7b8:	e10f      	b.n	800e9da <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e7d0:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b2a      	cmp	r3, #42	; 0x2a
 800e7dc:	d127      	bne.n	800e82e <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7ec:	d14c      	bne.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d048      	beq.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	685a      	ldr	r2, [r3, #4]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e804:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e80a:	4a76      	ldr	r2, [pc, #472]	; (800e9e4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e80c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e812:	4618      	mov	r0, r3
 800e814:	f7f9 fb5b 	bl	8007ece <HAL_DMA_Abort_IT>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d034      	beq.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e828:	4610      	mov	r0, r2
 800e82a:	4798      	blx	r3
 800e82c:	e02c      	b.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b29      	cmp	r3, #41	; 0x29
 800e838:	d126      	bne.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e848:	d11e      	bne.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	685a      	ldr	r2, [r3, #4]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e858:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d012      	beq.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e866:	4a5f      	ldr	r2, [pc, #380]	; (800e9e4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e868:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e86e:	4618      	mov	r0, r3
 800e870:	f7f9 fb2d 	bl	8007ece <HAL_DMA_Abort_IT>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d006      	beq.n	800e888 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e884:	4610      	mov	r0, r2
 800e886:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f003 0301 	and.w	r3, r3, #1
 800e892:	2b01      	cmp	r3, #1
 800e894:	d007      	beq.n	800e8a6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f042 0201 	orr.w	r2, r2, #1
 800e8a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e8b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2229      	movs	r2, #41	; 0x29
 800e8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2220      	movs	r2, #32
 800e8c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	88fa      	ldrh	r2, [r7, #6]
 800e8d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	683a      	ldr	r2, [r7, #0]
 800e8e6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d022      	beq.n	800e936 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f4:	4a3c      	ldr	r2, [pc, #240]	; (800e9e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800e8f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8fc:	4a3b      	ldr	r2, [pc, #236]	; (800e9ec <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800e8fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e904:	2200      	movs	r2, #0
 800e906:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90c:	2200      	movs	r2, #0
 800e90e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e918:	4619      	mov	r1, r3
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	3310      	adds	r3, #16
 800e920:	461a      	mov	r2, r3
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e926:	f7f9 fa0a 	bl	8007d3e <HAL_DMA_Start_IT>
 800e92a:	4603      	mov	r3, r0
 800e92c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d13d      	bne.n	800e9b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800e934:	e013      	b.n	800e95e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2228      	movs	r2, #40	; 0x28
 800e93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e03d      	b.n	800e9da <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e96c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e96e:	2300      	movs	r3, #0
 800e970:	613b      	str	r3, [r7, #16]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	695b      	ldr	r3, [r3, #20]
 800e978:	613b      	str	r3, [r7, #16]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	613b      	str	r3, [r7, #16]
 800e982:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e99a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	685a      	ldr	r2, [r3, #4]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9aa:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	e014      	b.n	800e9da <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2220      	movs	r2, #32
 800e9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c4:	f043 0210 	orr.w	r2, r3, #16
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	e000      	b.n	800e9da <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e9d8:	2302      	movs	r3, #2
  }
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	08010e95 	.word	0x08010e95
 800e9e8:	08010c71 	.word	0x08010c71
 800e9ec:	08010e1b 	.word	0x08010e1b

0800e9f0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b087      	sub	sp, #28
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	603b      	str	r3, [r7, #0]
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ea0c:	2b28      	cmp	r3, #40	; 0x28
 800ea0e:	d15b      	bne.n	800eac8 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d002      	beq.n	800ea1c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800ea16:	88fb      	ldrh	r3, [r7, #6]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d101      	bne.n	800ea20 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e054      	b.n	800eaca <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d101      	bne.n	800ea2e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800ea2a:	2302      	movs	r3, #2
 800ea2c:	e04d      	b.n	800eaca <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f003 0301 	and.w	r3, r3, #1
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d007      	beq.n	800ea54 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f042 0201 	orr.w	r2, r2, #1
 800ea52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	222a      	movs	r2, #42	; 0x2a
 800ea68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2220      	movs	r2, #32
 800ea70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2200      	movs	r2, #0
 800ea78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	68ba      	ldr	r2, [r7, #8]
 800ea7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	88fa      	ldrh	r2, [r7, #6]
 800ea84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ea96:	2300      	movs	r3, #0
 800ea98:	617b      	str	r3, [r7, #20]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	695b      	ldr	r3, [r3, #20]
 800eaa0:	617b      	str	r3, [r7, #20]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	617b      	str	r3, [r7, #20]
 800eaaa:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	685a      	ldr	r2, [r3, #4]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800eac2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800eac4:	2300      	movs	r3, #0
 800eac6:	e000      	b.n	800eaca <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800eac8:	2302      	movs	r3, #2
  }
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	371c      	adds	r7, #28
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b086      	sub	sp, #24
 800eada:	af00      	add	r7, sp, #0
 800eadc:	60f8      	str	r0, [r7, #12]
 800eade:	60b9      	str	r1, [r7, #8]
 800eae0:	603b      	str	r3, [r7, #0]
 800eae2:	4613      	mov	r3, r2
 800eae4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eaf2:	2b28      	cmp	r3, #40	; 0x28
 800eaf4:	f040 811e 	bne.w	800ed34 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800eafe:	88fb      	ldrh	r3, [r7, #6]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e116      	b.n	800ed36 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d101      	bne.n	800eb16 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800eb12:	2302      	movs	r3, #2
 800eb14:	e10f      	b.n	800ed36 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	685a      	ldr	r2, [r3, #4]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800eb2c:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	2b2a      	cmp	r3, #42	; 0x2a
 800eb38:	d127      	bne.n	800eb8a <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb48:	d14c      	bne.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d048      	beq.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb60:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb66:	4a76      	ldr	r2, [pc, #472]	; (800ed40 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800eb68:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7f9 f9ad 	bl	8007ece <HAL_DMA_Abort_IT>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d034      	beq.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eb84:	4610      	mov	r0, r2
 800eb86:	4798      	blx	r3
 800eb88:	e02c      	b.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	2b29      	cmp	r3, #41	; 0x29
 800eb94:	d126      	bne.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eba4:	d11e      	bne.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	685a      	ldr	r2, [r3, #4]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebb4:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d012      	beq.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc2:	4a5f      	ldr	r2, [pc, #380]	; (800ed40 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800ebc4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7f9 f97f 	bl	8007ece <HAL_DMA_Abort_IT>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d006      	beq.n	800ebe4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 0301 	and.w	r3, r3, #1
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d007      	beq.n	800ec02 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f042 0201 	orr.w	r2, r2, #1
 800ec00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec10:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	222a      	movs	r2, #42	; 0x2a
 800ec16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2200      	movs	r2, #0
 800ec26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	88fa      	ldrh	r2, [r7, #6]
 800ec32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d022      	beq.n	800ec92 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec50:	4a3c      	ldr	r2, [pc, #240]	; (800ed44 <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800ec52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec58:	4a3b      	ldr	r2, [pc, #236]	; (800ed48 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800ec5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec60:	2200      	movs	r2, #0
 800ec62:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec68:	2200      	movs	r2, #0
 800ec6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3310      	adds	r3, #16
 800ec76:	4619      	mov	r1, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec82:	f7f9 f85c 	bl	8007d3e <HAL_DMA_Start_IT>
 800ec86:	4603      	mov	r3, r0
 800ec88:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d13d      	bne.n	800ed0c <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800ec90:	e013      	b.n	800ecba <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2228      	movs	r2, #40	; 0x28
 800ec96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e03d      	b.n	800ed36 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ecc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ecca:	2300      	movs	r3, #0
 800eccc:	613b      	str	r3, [r7, #16]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	695b      	ldr	r3, [r3, #20]
 800ecd4:	613b      	str	r3, [r7, #16]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	699b      	ldr	r3, [r3, #24]
 800ecdc:	613b      	str	r3, [r7, #16]
 800ecde:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecf6:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	685a      	ldr	r2, [r3, #4]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ed06:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	e014      	b.n	800ed36 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2220      	movs	r2, #32
 800ed10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed20:	f043 0210 	orr.w	r2, r3, #16
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ed30:	2301      	movs	r3, #1
 800ed32:	e000      	b.n	800ed36 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800ed34:	2302      	movs	r3, #2
  }
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3718      	adds	r7, #24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	08010e95 	.word	0x08010e95
 800ed44:	08010c71 	.word	0x08010c71
 800ed48:	08010e1b 	.word	0x08010e1b

0800ed4c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2b20      	cmp	r3, #32
 800ed5e:	d124      	bne.n	800edaa <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2228      	movs	r2, #40	; 0x28
 800ed64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f003 0301 	and.w	r3, r3, #1
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d007      	beq.n	800ed86 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f042 0201 	orr.w	r2, r2, #1
 800ed84:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed94:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800eda4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	e000      	b.n	800edac <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800edaa:	2302      	movs	r3, #2
  }
}
 800edac:	4618      	mov	r0, r3
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b28      	cmp	r3, #40	; 0x28
 800edca:	d129      	bne.n	800ee20 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	f003 0303 	and.w	r3, r3, #3
 800edd8:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	461a      	mov	r2, r3
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	431a      	orrs	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2220      	movs	r2, #32
 800edf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee0a:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ee1a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	e000      	b.n	800ee22 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800ee20:	2302      	movs	r3, #2
  }
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3714      	adds	r7, #20
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b084      	sub	sp, #16
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	460b      	mov	r3, r1
 800ee38:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee40:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	f003 0302 	and.w	r3, r3, #2
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	d138      	bne.n	800eec2 <HAL_I2C_Master_Abort_IT+0x94>
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
 800ee52:	2b10      	cmp	r3, #16
 800ee54:	d135      	bne.n	800eec2 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d101      	bne.n	800ee64 <HAL_I2C_Master_Abort_IT+0x36>
 800ee60:	2302      	movs	r3, #2
 800ee62:	e02f      	b.n	800eec4 <HAL_I2C_Master_Abort_IT+0x96>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2201      	movs	r2, #1
 800ee68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2260      	movs	r2, #96	; 0x60
 800ee76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee88:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee98:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	685a      	ldr	r2, [r3, #4]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800eeae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f001 fad9 	bl	8010470 <I2C_ITError>

    return HAL_OK;
 800eebe:	2300      	movs	r3, #0
 800eec0:	e000      	b.n	800eec4 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
  }
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b088      	sub	sp, #32
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800eed4:	2300      	movs	r3, #0
 800eed6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eeec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eef4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800eef6:	7bfb      	ldrb	r3, [r7, #15]
 800eef8:	2b10      	cmp	r3, #16
 800eefa:	d003      	beq.n	800ef04 <HAL_I2C_EV_IRQHandler+0x38>
 800eefc:	7bfb      	ldrb	r3, [r7, #15]
 800eefe:	2b40      	cmp	r3, #64	; 0x40
 800ef00:	f040 80c1 	bne.w	800f086 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	699b      	ldr	r3, [r3, #24]
 800ef0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	695b      	ldr	r3, [r3, #20]
 800ef12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	f003 0301 	and.w	r3, r3, #1
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10d      	bne.n	800ef3a <HAL_I2C_EV_IRQHandler+0x6e>
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ef24:	d003      	beq.n	800ef2e <HAL_I2C_EV_IRQHandler+0x62>
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ef2c:	d101      	bne.n	800ef32 <HAL_I2C_EV_IRQHandler+0x66>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e000      	b.n	800ef34 <HAL_I2C_EV_IRQHandler+0x68>
 800ef32:	2300      	movs	r3, #0
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	f000 8132 	beq.w	800f19e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	f003 0301 	and.w	r3, r3, #1
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d00c      	beq.n	800ef5e <HAL_I2C_EV_IRQHandler+0x92>
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	0a5b      	lsrs	r3, r3, #9
 800ef48:	f003 0301 	and.w	r3, r3, #1
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d006      	beq.n	800ef5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f002 fa94 	bl	801147e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fda1 	bl	800fa9e <I2C_Master_SB>
 800ef5c:	e092      	b.n	800f084 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	08db      	lsrs	r3, r3, #3
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d009      	beq.n	800ef7e <HAL_I2C_EV_IRQHandler+0xb2>
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	0a5b      	lsrs	r3, r3, #9
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d003      	beq.n	800ef7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 fe17 	bl	800fbaa <I2C_Master_ADD10>
 800ef7c:	e082      	b.n	800f084 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	085b      	lsrs	r3, r3, #1
 800ef82:	f003 0301 	and.w	r3, r3, #1
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d009      	beq.n	800ef9e <HAL_I2C_EV_IRQHandler+0xd2>
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	0a5b      	lsrs	r3, r3, #9
 800ef8e:	f003 0301 	and.w	r3, r3, #1
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d003      	beq.n	800ef9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 fe31 	bl	800fbfe <I2C_Master_ADDR>
 800ef9c:	e072      	b.n	800f084 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	089b      	lsrs	r3, r3, #2
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d03b      	beq.n	800f022 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efb8:	f000 80f3 	beq.w	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	09db      	lsrs	r3, r3, #7
 800efc0:	f003 0301 	and.w	r3, r3, #1
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00f      	beq.n	800efe8 <HAL_I2C_EV_IRQHandler+0x11c>
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	0a9b      	lsrs	r3, r3, #10
 800efcc:	f003 0301 	and.w	r3, r3, #1
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d009      	beq.n	800efe8 <HAL_I2C_EV_IRQHandler+0x11c>
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	089b      	lsrs	r3, r3, #2
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d103      	bne.n	800efe8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 fa1b 	bl	800f41c <I2C_MasterTransmit_TXE>
 800efe6:	e04d      	b.n	800f084 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	089b      	lsrs	r3, r3, #2
 800efec:	f003 0301 	and.w	r3, r3, #1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f000 80d6 	beq.w	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	0a5b      	lsrs	r3, r3, #9
 800effa:	f003 0301 	and.w	r3, r3, #1
 800effe:	2b00      	cmp	r3, #0
 800f000:	f000 80cf 	beq.w	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800f004:	7bbb      	ldrb	r3, [r7, #14]
 800f006:	2b21      	cmp	r3, #33	; 0x21
 800f008:	d103      	bne.n	800f012 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 faa2 	bl	800f554 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f010:	e0c7      	b.n	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800f012:	7bfb      	ldrb	r3, [r7, #15]
 800f014:	2b40      	cmp	r3, #64	; 0x40
 800f016:	f040 80c4 	bne.w	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 fb10 	bl	800f640 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f020:	e0bf      	b.n	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f02c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f030:	f000 80b7 	beq.w	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	099b      	lsrs	r3, r3, #6
 800f038:	f003 0301 	and.w	r3, r3, #1
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00f      	beq.n	800f060 <HAL_I2C_EV_IRQHandler+0x194>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	0a9b      	lsrs	r3, r3, #10
 800f044:	f003 0301 	and.w	r3, r3, #1
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d009      	beq.n	800f060 <HAL_I2C_EV_IRQHandler+0x194>
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	089b      	lsrs	r3, r3, #2
 800f050:	f003 0301 	and.w	r3, r3, #1
 800f054:	2b00      	cmp	r3, #0
 800f056:	d103      	bne.n	800f060 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fb85 	bl	800f768 <I2C_MasterReceive_RXNE>
 800f05e:	e011      	b.n	800f084 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	089b      	lsrs	r3, r3, #2
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 809a 	beq.w	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	0a5b      	lsrs	r3, r3, #9
 800f072:	f003 0301 	and.w	r3, r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	f000 8093 	beq.w	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f000 fc24 	bl	800f8ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f082:	e08e      	b.n	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f084:	e08d      	b.n	800f1a2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d004      	beq.n	800f098 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	695b      	ldr	r3, [r3, #20]
 800f094:	61fb      	str	r3, [r7, #28]
 800f096:	e007      	b.n	800f0a8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	085b      	lsrs	r3, r3, #1
 800f0ac:	f003 0301 	and.w	r3, r3, #1
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d012      	beq.n	800f0da <HAL_I2C_EV_IRQHandler+0x20e>
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	0a5b      	lsrs	r3, r3, #9
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00c      	beq.n	800f0da <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d003      	beq.n	800f0d0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	699b      	ldr	r3, [r3, #24]
 800f0ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800f0d0:	69b9      	ldr	r1, [r7, #24]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 ffe2 	bl	801009c <I2C_Slave_ADDR>
 800f0d8:	e066      	b.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	091b      	lsrs	r3, r3, #4
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d009      	beq.n	800f0fa <HAL_I2C_EV_IRQHandler+0x22e>
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	0a5b      	lsrs	r3, r3, #9
 800f0ea:	f003 0301 	and.w	r3, r3, #1
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d003      	beq.n	800f0fa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f001 f81c 	bl	8010130 <I2C_Slave_STOPF>
 800f0f8:	e056      	b.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f0fa:	7bbb      	ldrb	r3, [r7, #14]
 800f0fc:	2b21      	cmp	r3, #33	; 0x21
 800f0fe:	d002      	beq.n	800f106 <HAL_I2C_EV_IRQHandler+0x23a>
 800f100:	7bbb      	ldrb	r3, [r7, #14]
 800f102:	2b29      	cmp	r3, #41	; 0x29
 800f104:	d125      	bne.n	800f152 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	09db      	lsrs	r3, r3, #7
 800f10a:	f003 0301 	and.w	r3, r3, #1
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00f      	beq.n	800f132 <HAL_I2C_EV_IRQHandler+0x266>
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	0a9b      	lsrs	r3, r3, #10
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d009      	beq.n	800f132 <HAL_I2C_EV_IRQHandler+0x266>
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	089b      	lsrs	r3, r3, #2
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	2b00      	cmp	r3, #0
 800f128:	d103      	bne.n	800f132 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fef8 	bl	800ff20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f130:	e039      	b.n	800f1a6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	089b      	lsrs	r3, r3, #2
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d033      	beq.n	800f1a6 <HAL_I2C_EV_IRQHandler+0x2da>
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	0a5b      	lsrs	r3, r3, #9
 800f142:	f003 0301 	and.w	r3, r3, #1
 800f146:	2b00      	cmp	r3, #0
 800f148:	d02d      	beq.n	800f1a6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 ff25 	bl	800ff9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f150:	e029      	b.n	800f1a6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	099b      	lsrs	r3, r3, #6
 800f156:	f003 0301 	and.w	r3, r3, #1
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00f      	beq.n	800f17e <HAL_I2C_EV_IRQHandler+0x2b2>
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	0a9b      	lsrs	r3, r3, #10
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	2b00      	cmp	r3, #0
 800f168:	d009      	beq.n	800f17e <HAL_I2C_EV_IRQHandler+0x2b2>
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	089b      	lsrs	r3, r3, #2
 800f16e:	f003 0301 	and.w	r3, r3, #1
 800f172:	2b00      	cmp	r3, #0
 800f174:	d103      	bne.n	800f17e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 ff30 	bl	800ffdc <I2C_SlaveReceive_RXNE>
 800f17c:	e014      	b.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	089b      	lsrs	r3, r3, #2
 800f182:	f003 0301 	and.w	r3, r3, #1
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00e      	beq.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	0a5b      	lsrs	r3, r3, #9
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	2b00      	cmp	r3, #0
 800f194:	d008      	beq.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 ff5e 	bl	8010058 <I2C_SlaveReceive_BTF>
 800f19c:	e004      	b.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800f19e:	bf00      	nop
 800f1a0:	e002      	b.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f1a2:	bf00      	nop
 800f1a4:	e000      	b.n	800f1a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f1a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800f1a8:	3720      	adds	r7, #32
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b08a      	sub	sp, #40	; 0x28
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	0a1b      	lsrs	r3, r3, #8
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00e      	beq.n	800f1fc <HAL_I2C_ER_IRQHandler+0x4e>
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	0a1b      	lsrs	r3, r3, #8
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d008      	beq.n	800f1fc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	f043 0301 	orr.w	r3, r3, #1
 800f1f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f1fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	0a5b      	lsrs	r3, r3, #9
 800f200:	f003 0301 	and.w	r3, r3, #1
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00e      	beq.n	800f226 <HAL_I2C_ER_IRQHandler+0x78>
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	0a1b      	lsrs	r3, r3, #8
 800f20c:	f003 0301 	and.w	r3, r3, #1
 800f210:	2b00      	cmp	r3, #0
 800f212:	d008      	beq.n	800f226 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f216:	f043 0302 	orr.w	r3, r3, #2
 800f21a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800f224:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	0a9b      	lsrs	r3, r3, #10
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d03f      	beq.n	800f2b2 <HAL_I2C_ER_IRQHandler+0x104>
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	0a1b      	lsrs	r3, r3, #8
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d039      	beq.n	800f2b2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800f23e:	7efb      	ldrb	r3, [r7, #27]
 800f240:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f246:	b29b      	uxth	r3, r3
 800f248:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f250:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f256:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f258:	7ebb      	ldrb	r3, [r7, #26]
 800f25a:	2b20      	cmp	r3, #32
 800f25c:	d112      	bne.n	800f284 <HAL_I2C_ER_IRQHandler+0xd6>
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10f      	bne.n	800f284 <HAL_I2C_ER_IRQHandler+0xd6>
 800f264:	7cfb      	ldrb	r3, [r7, #19]
 800f266:	2b21      	cmp	r3, #33	; 0x21
 800f268:	d008      	beq.n	800f27c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f26a:	7cfb      	ldrb	r3, [r7, #19]
 800f26c:	2b29      	cmp	r3, #41	; 0x29
 800f26e:	d005      	beq.n	800f27c <HAL_I2C_ER_IRQHandler+0xce>
 800f270:	7cfb      	ldrb	r3, [r7, #19]
 800f272:	2b28      	cmp	r3, #40	; 0x28
 800f274:	d106      	bne.n	800f284 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2b21      	cmp	r3, #33	; 0x21
 800f27a:	d103      	bne.n	800f284 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f001 f887 	bl	8010390 <I2C_Slave_AF>
 800f282:	e016      	b.n	800f2b2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f28c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	f043 0304 	orr.w	r3, r3, #4
 800f294:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f296:	7efb      	ldrb	r3, [r7, #27]
 800f298:	2b10      	cmp	r3, #16
 800f29a:	d002      	beq.n	800f2a2 <HAL_I2C_ER_IRQHandler+0xf4>
 800f29c:	7efb      	ldrb	r3, [r7, #27]
 800f29e:	2b40      	cmp	r3, #64	; 0x40
 800f2a0:	d107      	bne.n	800f2b2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	0adb      	lsrs	r3, r3, #11
 800f2b6:	f003 0301 	and.w	r3, r3, #1
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00e      	beq.n	800f2dc <HAL_I2C_ER_IRQHandler+0x12e>
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	0a1b      	lsrs	r3, r3, #8
 800f2c2:	f003 0301 	and.w	r3, r3, #1
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d008      	beq.n	800f2dc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2cc:	f043 0308 	orr.w	r3, r3, #8
 800f2d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800f2da:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d008      	beq.n	800f2f4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	431a      	orrs	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f001 f8be 	bl	8010470 <I2C_ITError>
  }
}
 800f2f4:	bf00      	nop
 800f2f6:	3728      	adds	r7, #40	; 0x28
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f340:	bf00      	nop
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
 800f358:	4613      	mov	r3, r2
 800f35a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f35c:	bf00      	nop
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800f370:	bf00      	nop
 800f372:	370c      	adds	r7, #12
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f384:	bf00      	nop
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f3ac:	bf00      	nop
 800f3ae:	370c      	adds	r7, #12
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr

0800f3b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f3c0:	bf00      	nop
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3da:	b2db      	uxtb	r3, r3
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3f6:	b2db      	uxtb	r3, r3
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f42a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f432:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f438:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d150      	bne.n	800f4e4 <I2C_MasterTransmit_TXE+0xc8>
 800f442:	7bfb      	ldrb	r3, [r7, #15]
 800f444:	2b21      	cmp	r3, #33	; 0x21
 800f446:	d14d      	bne.n	800f4e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2b08      	cmp	r3, #8
 800f44c:	d01d      	beq.n	800f48a <I2C_MasterTransmit_TXE+0x6e>
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b20      	cmp	r3, #32
 800f452:	d01a      	beq.n	800f48a <I2C_MasterTransmit_TXE+0x6e>
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f45a:	d016      	beq.n	800f48a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	685a      	ldr	r2, [r3, #4]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f46a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2211      	movs	r2, #17
 800f470:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2220      	movs	r2, #32
 800f47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f7ff ff3a 	bl	800f2fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f488:	e060      	b.n	800f54c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	685a      	ldr	r2, [r3, #4]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f498:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2220      	movs	r2, #32
 800f4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b40      	cmp	r3, #64	; 0x40
 800f4c2:	d107      	bne.n	800f4d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7ff ff55 	bl	800f37c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f4d2:	e03b      	b.n	800f54c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ff0d 	bl	800f2fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f4e2:	e033      	b.n	800f54c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
 800f4e6:	2b21      	cmp	r3, #33	; 0x21
 800f4e8:	d005      	beq.n	800f4f6 <I2C_MasterTransmit_TXE+0xda>
 800f4ea:	7bbb      	ldrb	r3, [r7, #14]
 800f4ec:	2b40      	cmp	r3, #64	; 0x40
 800f4ee:	d12d      	bne.n	800f54c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	2b22      	cmp	r3, #34	; 0x22
 800f4f4:	d12a      	bne.n	800f54c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d108      	bne.n	800f512 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	685a      	ldr	r2, [r3, #4]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f50e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800f510:	e01c      	b.n	800f54c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	2b40      	cmp	r3, #64	; 0x40
 800f51c:	d103      	bne.n	800f526 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 f88e 	bl	800f640 <I2C_MemoryTransmit_TXE_BTF>
}
 800f524:	e012      	b.n	800f54c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f52a:	781a      	ldrb	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f536:	1c5a      	adds	r2, r3, #1
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f540:	b29b      	uxth	r3, r3
 800f542:	3b01      	subs	r3, #1
 800f544:	b29a      	uxth	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f54a:	e7ff      	b.n	800f54c <I2C_MasterTransmit_TXE+0x130>
 800f54c:	bf00      	nop
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f560:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b21      	cmp	r3, #33	; 0x21
 800f56c:	d164      	bne.n	800f638 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f572:	b29b      	uxth	r3, r3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d012      	beq.n	800f59e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f57c:	781a      	ldrb	r2, [r3, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f588:	1c5a      	adds	r2, r3, #1
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f592:	b29b      	uxth	r3, r3
 800f594:	3b01      	subs	r3, #1
 800f596:	b29a      	uxth	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800f59c:	e04c      	b.n	800f638 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2b08      	cmp	r3, #8
 800f5a2:	d01d      	beq.n	800f5e0 <I2C_MasterTransmit_BTF+0x8c>
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b20      	cmp	r3, #32
 800f5a8:	d01a      	beq.n	800f5e0 <I2C_MasterTransmit_BTF+0x8c>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f5b0:	d016      	beq.n	800f5e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	685a      	ldr	r2, [r3, #4]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f5c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2211      	movs	r2, #17
 800f5c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2220      	movs	r2, #32
 800f5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff fe8f 	bl	800f2fc <HAL_I2C_MasterTxCpltCallback>
}
 800f5de:	e02b      	b.n	800f638 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685a      	ldr	r2, [r3, #4]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f5ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2220      	movs	r2, #32
 800f60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f614:	b2db      	uxtb	r3, r3
 800f616:	2b40      	cmp	r3, #64	; 0x40
 800f618:	d107      	bne.n	800f62a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff feaa 	bl	800f37c <HAL_I2C_MemTxCpltCallback>
}
 800f628:	e006      	b.n	800f638 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7ff fe62 	bl	800f2fc <HAL_I2C_MasterTxCpltCallback>
}
 800f638:	bf00      	nop
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f64e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11d      	bne.n	800f694 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d10b      	bne.n	800f678 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f664:	b2da      	uxtb	r2, r3
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f670:	1c9a      	adds	r2, r3, #2
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800f676:	e073      	b.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	121b      	asrs	r3, r3, #8
 800f680:	b2da      	uxtb	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f68c:	1c5a      	adds	r2, r3, #1
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f692:	e065      	b.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d10b      	bne.n	800f6b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6a0:	b2da      	uxtb	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6ac:	1c5a      	adds	r2, r3, #1
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f6b2:	e055      	b.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6b8:	2b02      	cmp	r3, #2
 800f6ba:	d151      	bne.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800f6bc:	7bfb      	ldrb	r3, [r7, #15]
 800f6be:	2b22      	cmp	r3, #34	; 0x22
 800f6c0:	d10d      	bne.n	800f6de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f6d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6d6:	1c5a      	adds	r2, r3, #1
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f6dc:	e040      	b.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d015      	beq.n	800f714 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800f6e8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ea:	2b21      	cmp	r3, #33	; 0x21
 800f6ec:	d112      	bne.n	800f714 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f2:	781a      	ldrb	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fe:	1c5a      	adds	r2, r3, #1
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f708:	b29b      	uxth	r3, r3
 800f70a:	3b01      	subs	r3, #1
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f712:	e025      	b.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f718:	b29b      	uxth	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d120      	bne.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800f71e:	7bfb      	ldrb	r3, [r7, #15]
 800f720:	2b21      	cmp	r3, #33	; 0x21
 800f722:	d11d      	bne.n	800f760 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	685a      	ldr	r2, [r3, #4]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f732:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f742:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2220      	movs	r2, #32
 800f74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f7ff fe0e 	bl	800f37c <HAL_I2C_MemTxCpltCallback>
}
 800f760:	bf00      	nop
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b22      	cmp	r3, #34	; 0x22
 800f77a:	f040 80a2 	bne.w	800f8c2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f782:	b29b      	uxth	r3, r3
 800f784:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	2b03      	cmp	r3, #3
 800f78a:	d921      	bls.n	800f7d0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	691a      	ldr	r2, [r3, #16]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f796:	b2d2      	uxtb	r2, r2
 800f798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	3b01      	subs	r3, #1
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	f040 8082 	bne.w	800f8c2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	685a      	ldr	r2, [r3, #4]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7cc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f7ce:	e078      	b.n	800f8c2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d074      	beq.n	800f8c2 <I2C_MasterReceive_RXNE+0x15a>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d002      	beq.n	800f7e4 <I2C_MasterReceive_RXNE+0x7c>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d16e      	bne.n	800f8c2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f001 fd92 	bl	801130e <I2C_WaitOnSTOPRequestThroughIT>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d142      	bne.n	800f876 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7fe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f80e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	691a      	ldr	r2, [r3, #16]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81a:	b2d2      	uxtb	r2, r2
 800f81c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	3b01      	subs	r3, #1
 800f830:	b29a      	uxth	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2220      	movs	r2, #32
 800f83a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f844:	b2db      	uxtb	r3, r3
 800f846:	2b40      	cmp	r3, #64	; 0x40
 800f848:	d10a      	bne.n	800f860 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2200      	movs	r2, #0
 800f84e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7ff fd99 	bl	800f390 <HAL_I2C_MemRxCpltCallback>
}
 800f85e:	e030      	b.n	800f8c2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2212      	movs	r2, #18
 800f86c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7ff fd4e 	bl	800f310 <HAL_I2C_MasterRxCpltCallback>
}
 800f874:	e025      	b.n	800f8c2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f884:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	691a      	ldr	r2, [r3, #16]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f890:	b2d2      	uxtb	r2, r2
 800f892:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2220      	movs	r2, #32
 800f8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f7ff fd71 	bl	800f3a4 <HAL_I2C_ErrorCallback>
}
 800f8c2:	bf00      	nop
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b084      	sub	sp, #16
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	2b04      	cmp	r3, #4
 800f8e0:	d11b      	bne.n	800f91a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	691a      	ldr	r2, [r3, #16]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fc:	b2d2      	uxtb	r2, r2
 800f8fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f90e:	b29b      	uxth	r3, r3
 800f910:	3b01      	subs	r3, #1
 800f912:	b29a      	uxth	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f918:	e0bd      	b.n	800fa96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f91e:	b29b      	uxth	r3, r3
 800f920:	2b03      	cmp	r3, #3
 800f922:	d129      	bne.n	800f978 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	685a      	ldr	r2, [r3, #4]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f932:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b04      	cmp	r3, #4
 800f938:	d00a      	beq.n	800f950 <I2C_MasterReceive_BTF+0x86>
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d007      	beq.n	800f950 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f94e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	691a      	ldr	r2, [r3, #16]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95a:	b2d2      	uxtb	r2, r2
 800f95c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f962:	1c5a      	adds	r2, r3, #1
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	3b01      	subs	r3, #1
 800f970:	b29a      	uxth	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f976:	e08e      	b.n	800fa96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d176      	bne.n	800fa70 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2b01      	cmp	r3, #1
 800f986:	d002      	beq.n	800f98e <I2C_MasterReceive_BTF+0xc4>
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2b10      	cmp	r3, #16
 800f98c:	d108      	bne.n	800f9a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	e019      	b.n	800f9d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2b04      	cmp	r3, #4
 800f9a4:	d002      	beq.n	800f9ac <I2C_MasterReceive_BTF+0xe2>
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b02      	cmp	r3, #2
 800f9aa:	d108      	bne.n	800f9be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f9ba:	601a      	str	r2, [r3, #0]
 800f9bc:	e00a      	b.n	800f9d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2b10      	cmp	r3, #16
 800f9c2:	d007      	beq.n	800f9d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	691a      	ldr	r2, [r3, #16]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9de:	b2d2      	uxtb	r2, r2
 800f9e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	3b01      	subs	r3, #1
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	691a      	ldr	r2, [r3, #16]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa04:	b2d2      	uxtb	r2, r2
 800fa06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0c:	1c5a      	adds	r2, r3, #1
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	685a      	ldr	r2, [r3, #4]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fa2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2220      	movs	r2, #32
 800fa34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	2b40      	cmp	r3, #64	; 0x40
 800fa42:	d10a      	bne.n	800fa5a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7ff fc9c 	bl	800f390 <HAL_I2C_MemRxCpltCallback>
}
 800fa58:	e01d      	b.n	800fa96 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2212      	movs	r2, #18
 800fa66:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7ff fc51 	bl	800f310 <HAL_I2C_MasterRxCpltCallback>
}
 800fa6e:	e012      	b.n	800fa96 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	691a      	ldr	r2, [r3, #16]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7a:	b2d2      	uxtb	r2, r2
 800fa7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa82:	1c5a      	adds	r2, r3, #1
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fa96:	bf00      	nop
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}

0800fa9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b083      	sub	sp, #12
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800faac:	b2db      	uxtb	r3, r3
 800faae:	2b40      	cmp	r3, #64	; 0x40
 800fab0:	d117      	bne.n	800fae2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d109      	bne.n	800face <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	461a      	mov	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800faca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800facc:	e067      	b.n	800fb9e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	f043 0301 	orr.w	r3, r3, #1
 800fad8:	b2da      	uxtb	r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	611a      	str	r2, [r3, #16]
}
 800fae0:	e05d      	b.n	800fb9e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800faea:	d133      	bne.n	800fb54 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	2b21      	cmp	r3, #33	; 0x21
 800faf6:	d109      	bne.n	800fb0c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	461a      	mov	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fb08:	611a      	str	r2, [r3, #16]
 800fb0a:	e008      	b.n	800fb1e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	f043 0301 	orr.w	r3, r3, #1
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d004      	beq.n	800fb30 <I2C_Master_SB+0x92>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d108      	bne.n	800fb42 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d032      	beq.n	800fb9e <I2C_Master_SB+0x100>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d02d      	beq.n	800fb9e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	685a      	ldr	r2, [r3, #4]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb50:	605a      	str	r2, [r3, #4]
}
 800fb52:	e024      	b.n	800fb9e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d10e      	bne.n	800fb7a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	11db      	asrs	r3, r3, #7
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	f003 0306 	and.w	r3, r3, #6
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	f063 030f 	orn	r3, r3, #15
 800fb70:	b2da      	uxtb	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	611a      	str	r2, [r3, #16]
}
 800fb78:	e011      	b.n	800fb9e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d10d      	bne.n	800fb9e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	11db      	asrs	r3, r3, #7
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	f003 0306 	and.w	r3, r3, #6
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	f063 030e 	orn	r3, r3, #14
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	611a      	str	r2, [r3, #16]
}
 800fb9e:	bf00      	nop
 800fba0:	370c      	adds	r7, #12
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr

0800fbaa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800fbaa:	b480      	push	{r7}
 800fbac:	b083      	sub	sp, #12
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbb6:	b2da      	uxtb	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d004      	beq.n	800fbd0 <I2C_Master_ADD10+0x26>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d108      	bne.n	800fbe2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d00c      	beq.n	800fbf2 <I2C_Master_ADD10+0x48>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d007      	beq.n	800fbf2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	685a      	ldr	r2, [r3, #4]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbf0:	605a      	str	r2, [r3, #4]
  }
}
 800fbf2:	bf00      	nop
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b091      	sub	sp, #68	; 0x44
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc14:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	2b22      	cmp	r3, #34	; 0x22
 800fc26:	f040 8169 	bne.w	800fefc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d10f      	bne.n	800fc52 <I2C_Master_ADDR+0x54>
 800fc32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc36:	2b40      	cmp	r3, #64	; 0x40
 800fc38:	d10b      	bne.n	800fc52 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	695b      	ldr	r3, [r3, #20]
 800fc44:	60fb      	str	r3, [r7, #12]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	699b      	ldr	r3, [r3, #24]
 800fc4c:	60fb      	str	r3, [r7, #12]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	e160      	b.n	800ff14 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d11d      	bne.n	800fc96 <I2C_Master_ADDR+0x98>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	691b      	ldr	r3, [r3, #16]
 800fc5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fc62:	d118      	bne.n	800fc96 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc64:	2300      	movs	r3, #0
 800fc66:	613b      	str	r3, [r7, #16]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	695b      	ldr	r3, [r3, #20]
 800fc6e:	613b      	str	r3, [r7, #16]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	699b      	ldr	r3, [r3, #24]
 800fc76:	613b      	str	r3, [r7, #16]
 800fc78:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc88:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc8e:	1c5a      	adds	r2, r3, #1
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	651a      	str	r2, [r3, #80]	; 0x50
 800fc94:	e13e      	b.n	800ff14 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d113      	bne.n	800fcc8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fca0:	2300      	movs	r3, #0
 800fca2:	617b      	str	r3, [r7, #20]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	695b      	ldr	r3, [r3, #20]
 800fcaa:	617b      	str	r3, [r7, #20]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	617b      	str	r3, [r7, #20]
 800fcb4:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	e115      	b.n	800fef4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	f040 808a 	bne.w	800fde8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fcda:	d137      	bne.n	800fd4c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fcfa:	d113      	bne.n	800fd24 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd0a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	61bb      	str	r3, [r7, #24]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	61bb      	str	r3, [r7, #24]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	699b      	ldr	r3, [r3, #24]
 800fd1e:	61bb      	str	r3, [r7, #24]
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	e0e7      	b.n	800fef4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd24:	2300      	movs	r3, #0
 800fd26:	61fb      	str	r3, [r7, #28]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	695b      	ldr	r3, [r3, #20]
 800fd2e:	61fb      	str	r3, [r7, #28]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	699b      	ldr	r3, [r3, #24]
 800fd36:	61fb      	str	r3, [r7, #28]
 800fd38:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd48:	601a      	str	r2, [r3, #0]
 800fd4a:	e0d3      	b.n	800fef4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	2b08      	cmp	r3, #8
 800fd50:	d02e      	beq.n	800fdb0 <I2C_Master_ADDR+0x1b2>
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	2b20      	cmp	r3, #32
 800fd56:	d02b      	beq.n	800fdb0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800fd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd5a:	2b12      	cmp	r3, #18
 800fd5c:	d102      	bne.n	800fd64 <I2C_Master_ADDR+0x166>
 800fd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d125      	bne.n	800fdb0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd66:	2b04      	cmp	r3, #4
 800fd68:	d00e      	beq.n	800fd88 <I2C_Master_ADDR+0x18a>
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	d00b      	beq.n	800fd88 <I2C_Master_ADDR+0x18a>
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	2b10      	cmp	r3, #16
 800fd74:	d008      	beq.n	800fd88 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd84:	601a      	str	r2, [r3, #0]
 800fd86:	e007      	b.n	800fd98 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd96:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd98:	2300      	movs	r3, #0
 800fd9a:	623b      	str	r3, [r7, #32]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	623b      	str	r3, [r7, #32]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	699b      	ldr	r3, [r3, #24]
 800fdaa:	623b      	str	r3, [r7, #32]
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	e0a1      	b.n	800fef4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdbe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	627b      	str	r3, [r7, #36]	; 0x24
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	695b      	ldr	r3, [r3, #20]
 800fdca:	627b      	str	r3, [r7, #36]	; 0x24
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	699b      	ldr	r3, [r3, #24]
 800fdd2:	627b      	str	r3, [r7, #36]	; 0x24
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	e085      	b.n	800fef4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	2b02      	cmp	r3, #2
 800fdf0:	d14d      	bne.n	800fe8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	2b04      	cmp	r3, #4
 800fdf6:	d016      	beq.n	800fe26 <I2C_Master_ADDR+0x228>
 800fdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	d013      	beq.n	800fe26 <I2C_Master_ADDR+0x228>
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe00:	2b10      	cmp	r3, #16
 800fe02:	d010      	beq.n	800fe26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	e007      	b.n	800fe36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe44:	d117      	bne.n	800fe76 <I2C_Master_ADDR+0x278>
 800fe46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fe4c:	d00b      	beq.n	800fe66 <I2C_Master_ADDR+0x268>
 800fe4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d008      	beq.n	800fe66 <I2C_Master_ADDR+0x268>
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	2b08      	cmp	r3, #8
 800fe58:	d005      	beq.n	800fe66 <I2C_Master_ADDR+0x268>
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	2b10      	cmp	r3, #16
 800fe5e:	d002      	beq.n	800fe66 <I2C_Master_ADDR+0x268>
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	2b20      	cmp	r3, #32
 800fe64:	d107      	bne.n	800fe76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	685a      	ldr	r2, [r3, #4]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe76:	2300      	movs	r3, #0
 800fe78:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	695b      	ldr	r3, [r3, #20]
 800fe80:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	699b      	ldr	r3, [r3, #24]
 800fe88:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8c:	e032      	b.n	800fef4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800feac:	d117      	bne.n	800fede <I2C_Master_ADDR+0x2e0>
 800feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800feb4:	d00b      	beq.n	800fece <I2C_Master_ADDR+0x2d0>
 800feb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d008      	beq.n	800fece <I2C_Master_ADDR+0x2d0>
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	2b08      	cmp	r3, #8
 800fec0:	d005      	beq.n	800fece <I2C_Master_ADDR+0x2d0>
 800fec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec4:	2b10      	cmp	r3, #16
 800fec6:	d002      	beq.n	800fece <I2C_Master_ADDR+0x2d0>
 800fec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feca:	2b20      	cmp	r3, #32
 800fecc:	d107      	bne.n	800fede <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fedc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fede:	2300      	movs	r3, #0
 800fee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	695b      	ldr	r3, [r3, #20]
 800fee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	699b      	ldr	r3, [r3, #24]
 800fef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800fefa:	e00b      	b.n	800ff14 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fefc:	2300      	movs	r3, #0
 800fefe:	633b      	str	r3, [r7, #48]	; 0x30
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	695b      	ldr	r3, [r3, #20]
 800ff06:	633b      	str	r3, [r7, #48]	; 0x30
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	699b      	ldr	r3, [r3, #24]
 800ff0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800ff12:	e7ff      	b.n	800ff14 <I2C_Master_ADDR+0x316>
 800ff14:	bf00      	nop
 800ff16:	3744      	adds	r7, #68	; 0x44
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d02b      	beq.n	800ff92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3e:	781a      	ldrb	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	3b01      	subs	r3, #1
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d114      	bne.n	800ff92 <I2C_SlaveTransmit_TXE+0x72>
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	2b29      	cmp	r3, #41	; 0x29
 800ff6c:	d111      	bne.n	800ff92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	685a      	ldr	r2, [r3, #4]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2221      	movs	r2, #33	; 0x21
 800ff82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2228      	movs	r2, #40	; 0x28
 800ff88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7ff f9c9 	bl	800f324 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ff92:	bf00      	nop
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	b083      	sub	sp, #12
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d011      	beq.n	800ffd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb0:	781a      	ldrb	r2, [r3, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbc:	1c5a      	adds	r2, r3, #1
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d02c      	beq.n	8010050 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	691a      	ldr	r2, [r3, #16]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010000:	b2d2      	uxtb	r2, r2
 8010002:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010008:	1c5a      	adds	r2, r3, #1
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010012:	b29b      	uxth	r3, r3
 8010014:	3b01      	subs	r3, #1
 8010016:	b29a      	uxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010020:	b29b      	uxth	r3, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	d114      	bne.n	8010050 <I2C_SlaveReceive_RXNE+0x74>
 8010026:	7bfb      	ldrb	r3, [r7, #15]
 8010028:	2b2a      	cmp	r3, #42	; 0x2a
 801002a:	d111      	bne.n	8010050 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801003a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2222      	movs	r2, #34	; 0x22
 8010040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2228      	movs	r2, #40	; 0x28
 8010046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7ff f974 	bl	800f338 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8010050:	bf00      	nop
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010064:	b29b      	uxth	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d012      	beq.n	8010090 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	691a      	ldr	r2, [r3, #16]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010074:	b2d2      	uxtb	r2, r2
 8010076:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007c:	1c5a      	adds	r2, r3, #1
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010086:	b29b      	uxth	r3, r3
 8010088:	3b01      	subs	r3, #1
 801008a:	b29a      	uxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010090:	bf00      	nop
 8010092:	370c      	adds	r7, #12
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80100a6:	2300      	movs	r3, #0
 80100a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80100b6:	2b28      	cmp	r3, #40	; 0x28
 80100b8:	d127      	bne.n	801010a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	685a      	ldr	r2, [r3, #4]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	089b      	lsrs	r3, r3, #2
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80100d6:	2301      	movs	r3, #1
 80100d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	09db      	lsrs	r3, r3, #7
 80100de:	f003 0301 	and.w	r3, r3, #1
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d103      	bne.n	80100ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	81bb      	strh	r3, [r7, #12]
 80100ec:	e002      	b.n	80100f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	699b      	ldr	r3, [r3, #24]
 80100f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80100fc:	89ba      	ldrh	r2, [r7, #12]
 80100fe:	7bfb      	ldrb	r3, [r7, #15]
 8010100:	4619      	mov	r1, r3
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f7ff f922 	bl	800f34c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010108:	e00e      	b.n	8010128 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801010a:	2300      	movs	r3, #0
 801010c:	60bb      	str	r3, [r7, #8]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	695b      	ldr	r3, [r3, #20]
 8010114:	60bb      	str	r3, [r7, #8]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	699b      	ldr	r3, [r3, #24]
 801011c:	60bb      	str	r3, [r7, #8]
 801011e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8010128:	bf00      	nop
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801013e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	685a      	ldr	r2, [r3, #4]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801014e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8010150:	2300      	movs	r3, #0
 8010152:	60bb      	str	r3, [r7, #8]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	695b      	ldr	r3, [r3, #20]
 801015a:	60bb      	str	r3, [r7, #8]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f042 0201 	orr.w	r2, r2, #1
 801016a:	601a      	str	r2, [r3, #0]
 801016c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801017c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801018c:	d172      	bne.n	8010274 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801018e:	7bfb      	ldrb	r3, [r7, #15]
 8010190:	2b22      	cmp	r3, #34	; 0x22
 8010192:	d002      	beq.n	801019a <I2C_Slave_STOPF+0x6a>
 8010194:	7bfb      	ldrb	r3, [r7, #15]
 8010196:	2b2a      	cmp	r3, #42	; 0x2a
 8010198:	d135      	bne.n	8010206 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d005      	beq.n	80101be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101b6:	f043 0204 	orr.w	r2, r3, #4
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	685a      	ldr	r2, [r3, #4]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80101cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f8 f9c1 	bl	800855a <HAL_DMA_GetState>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d049      	beq.n	8010272 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e2:	4a69      	ldr	r2, [pc, #420]	; (8010388 <I2C_Slave_STOPF+0x258>)
 80101e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7f7 fe6f 	bl	8007ece <HAL_DMA_Abort_IT>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d03d      	beq.n	8010272 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010200:	4610      	mov	r0, r2
 8010202:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010204:	e035      	b.n	8010272 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	b29a      	uxth	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010218:	b29b      	uxth	r3, r3
 801021a:	2b00      	cmp	r3, #0
 801021c:	d005      	beq.n	801022a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010222:	f043 0204 	orr.w	r2, r3, #4
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	685a      	ldr	r2, [r3, #4]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010238:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801023e:	4618      	mov	r0, r3
 8010240:	f7f8 f98b 	bl	800855a <HAL_DMA_GetState>
 8010244:	4603      	mov	r3, r0
 8010246:	2b01      	cmp	r3, #1
 8010248:	d014      	beq.n	8010274 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801024e:	4a4e      	ldr	r2, [pc, #312]	; (8010388 <I2C_Slave_STOPF+0x258>)
 8010250:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010256:	4618      	mov	r0, r3
 8010258:	f7f7 fe39 	bl	8007ece <HAL_DMA_Abort_IT>
 801025c:	4603      	mov	r3, r0
 801025e:	2b00      	cmp	r3, #0
 8010260:	d008      	beq.n	8010274 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801026c:	4610      	mov	r0, r2
 801026e:	4798      	blx	r3
 8010270:	e000      	b.n	8010274 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010272:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010278:	b29b      	uxth	r3, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	d03e      	beq.n	80102fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	695b      	ldr	r3, [r3, #20]
 8010284:	f003 0304 	and.w	r3, r3, #4
 8010288:	2b04      	cmp	r3, #4
 801028a:	d112      	bne.n	80102b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	691a      	ldr	r2, [r3, #16]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010296:	b2d2      	uxtb	r2, r2
 8010298:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029e:	1c5a      	adds	r2, r3, #1
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	3b01      	subs	r3, #1
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	695b      	ldr	r3, [r3, #20]
 80102b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102bc:	2b40      	cmp	r3, #64	; 0x40
 80102be:	d112      	bne.n	80102e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	691a      	ldr	r2, [r3, #16]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ca:	b2d2      	uxtb	r2, r2
 80102cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d2:	1c5a      	adds	r2, r3, #1
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102dc:	b29b      	uxth	r3, r3
 80102de:	3b01      	subs	r3, #1
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d005      	beq.n	80102fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f4:	f043 0204 	orr.w	r2, r3, #4
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010300:	2b00      	cmp	r3, #0
 8010302:	d003      	beq.n	801030c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 f8b3 	bl	8010470 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801030a:	e039      	b.n	8010380 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801030c:	7bfb      	ldrb	r3, [r7, #15]
 801030e:	2b2a      	cmp	r3, #42	; 0x2a
 8010310:	d109      	bne.n	8010326 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2228      	movs	r2, #40	; 0x28
 801031c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff f809 	bl	800f338 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b28      	cmp	r3, #40	; 0x28
 8010330:	d111      	bne.n	8010356 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a15      	ldr	r2, [pc, #84]	; (801038c <I2C_Slave_STOPF+0x25c>)
 8010336:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2220      	movs	r2, #32
 8010342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7ff f80a 	bl	800f368 <HAL_I2C_ListenCpltCallback>
}
 8010354:	e014      	b.n	8010380 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801035a:	2b22      	cmp	r3, #34	; 0x22
 801035c:	d002      	beq.n	8010364 <I2C_Slave_STOPF+0x234>
 801035e:	7bfb      	ldrb	r3, [r7, #15]
 8010360:	2b22      	cmp	r3, #34	; 0x22
 8010362:	d10d      	bne.n	8010380 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2220      	movs	r2, #32
 801036e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7fe ffdc 	bl	800f338 <HAL_I2C_SlaveRxCpltCallback>
}
 8010380:	bf00      	nop
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	08010e95 	.word	0x08010e95
 801038c:	ffff0000 	.word	0xffff0000

08010390 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801039e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	2b08      	cmp	r3, #8
 80103aa:	d002      	beq.n	80103b2 <I2C_Slave_AF+0x22>
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	2b20      	cmp	r3, #32
 80103b0:	d129      	bne.n	8010406 <I2C_Slave_AF+0x76>
 80103b2:	7bfb      	ldrb	r3, [r7, #15]
 80103b4:	2b28      	cmp	r3, #40	; 0x28
 80103b6:	d126      	bne.n	8010406 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a2c      	ldr	r2, [pc, #176]	; (801046c <I2C_Slave_AF+0xdc>)
 80103bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	685a      	ldr	r2, [r3, #4]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80103cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80103d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2220      	movs	r2, #32
 80103f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f7fe ffb2 	bl	800f368 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8010404:	e02e      	b.n	8010464 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8010406:	7bfb      	ldrb	r3, [r7, #15]
 8010408:	2b21      	cmp	r3, #33	; 0x21
 801040a:	d126      	bne.n	801045a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4a17      	ldr	r2, [pc, #92]	; (801046c <I2C_Slave_AF+0xdc>)
 8010410:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2221      	movs	r2, #33	; 0x21
 8010416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2220      	movs	r2, #32
 801041c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	685a      	ldr	r2, [r3, #4]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010436:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010440:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010450:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f7fe ff66 	bl	800f324 <HAL_I2C_SlaveTxCpltCallback>
}
 8010458:	e004      	b.n	8010464 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010462:	615a      	str	r2, [r3, #20]
}
 8010464:	bf00      	nop
 8010466:	3710      	adds	r7, #16
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	ffff0000 	.word	0xffff0000

08010470 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801047e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010486:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010488:	7bbb      	ldrb	r3, [r7, #14]
 801048a:	2b10      	cmp	r3, #16
 801048c:	d002      	beq.n	8010494 <I2C_ITError+0x24>
 801048e:	7bbb      	ldrb	r3, [r7, #14]
 8010490:	2b40      	cmp	r3, #64	; 0x40
 8010492:	d10a      	bne.n	80104aa <I2C_ITError+0x3a>
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	2b22      	cmp	r3, #34	; 0x22
 8010498:	d107      	bne.n	80104aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80104aa:	7bfb      	ldrb	r3, [r7, #15]
 80104ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80104b0:	2b28      	cmp	r3, #40	; 0x28
 80104b2:	d107      	bne.n	80104c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2228      	movs	r2, #40	; 0x28
 80104be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80104c2:	e015      	b.n	80104f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104d2:	d00a      	beq.n	80104ea <I2C_ITError+0x7a>
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
 80104d6:	2b60      	cmp	r3, #96	; 0x60
 80104d8:	d007      	beq.n	80104ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2220      	movs	r2, #32
 80104de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2200      	movs	r2, #0
 80104ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104fe:	d162      	bne.n	80105c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801050e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010518:	b2db      	uxtb	r3, r3
 801051a:	2b01      	cmp	r3, #1
 801051c:	d020      	beq.n	8010560 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010522:	4a6a      	ldr	r2, [pc, #424]	; (80106cc <I2C_ITError+0x25c>)
 8010524:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801052a:	4618      	mov	r0, r3
 801052c:	f7f7 fccf 	bl	8007ece <HAL_DMA_Abort_IT>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	f000 8089 	beq.w	801064a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f022 0201 	bic.w	r2, r2, #1
 8010546:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2220      	movs	r2, #32
 801054c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801055a:	4610      	mov	r0, r2
 801055c:	4798      	blx	r3
 801055e:	e074      	b.n	801064a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010564:	4a59      	ldr	r2, [pc, #356]	; (80106cc <I2C_ITError+0x25c>)
 8010566:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801056c:	4618      	mov	r0, r3
 801056e:	f7f7 fcae 	bl	8007ece <HAL_DMA_Abort_IT>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d068      	beq.n	801064a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	695b      	ldr	r3, [r3, #20]
 801057e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010582:	2b40      	cmp	r3, #64	; 0x40
 8010584:	d10b      	bne.n	801059e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	691a      	ldr	r2, [r3, #16]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010590:	b2d2      	uxtb	r2, r2
 8010592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010598:	1c5a      	adds	r2, r3, #1
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f022 0201 	bic.w	r2, r2, #1
 80105ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2220      	movs	r2, #32
 80105b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80105c0:	4610      	mov	r0, r2
 80105c2:	4798      	blx	r3
 80105c4:	e041      	b.n	801064a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	2b60      	cmp	r3, #96	; 0x60
 80105d0:	d125      	bne.n	801061e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2220      	movs	r2, #32
 80105d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	695b      	ldr	r3, [r3, #20]
 80105e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105ea:	2b40      	cmp	r3, #64	; 0x40
 80105ec:	d10b      	bne.n	8010606 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	691a      	ldr	r2, [r3, #16]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f8:	b2d2      	uxtb	r2, r2
 80105fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010600:	1c5a      	adds	r2, r3, #1
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f022 0201 	bic.w	r2, r2, #1
 8010614:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7fe fece 	bl	800f3b8 <HAL_I2C_AbortCpltCallback>
 801061c:	e015      	b.n	801064a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	695b      	ldr	r3, [r3, #20]
 8010624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010628:	2b40      	cmp	r3, #64	; 0x40
 801062a:	d10b      	bne.n	8010644 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	691a      	ldr	r2, [r3, #16]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010636:	b2d2      	uxtb	r2, r2
 8010638:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801063e:	1c5a      	adds	r2, r3, #1
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7fe fead 	bl	800f3a4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	2b00      	cmp	r3, #0
 8010658:	d10e      	bne.n	8010678 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010660:	2b00      	cmp	r3, #0
 8010662:	d109      	bne.n	8010678 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801066a:	2b00      	cmp	r3, #0
 801066c:	d104      	bne.n	8010678 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010674:	2b00      	cmp	r3, #0
 8010676:	d007      	beq.n	8010688 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	685a      	ldr	r2, [r3, #4]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010686:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801068e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010694:	f003 0304 	and.w	r3, r3, #4
 8010698:	2b04      	cmp	r3, #4
 801069a:	d113      	bne.n	80106c4 <I2C_ITError+0x254>
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	2b28      	cmp	r3, #40	; 0x28
 80106a0:	d110      	bne.n	80106c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4a0a      	ldr	r2, [pc, #40]	; (80106d0 <I2C_ITError+0x260>)
 80106a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2200      	movs	r2, #0
 80106ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2220      	movs	r2, #32
 80106b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f7fe fe52 	bl	800f368 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80106c4:	bf00      	nop
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	08010e95 	.word	0x08010e95
 80106d0:	ffff0000 	.word	0xffff0000

080106d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b088      	sub	sp, #32
 80106d8:	af02      	add	r7, sp, #8
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	607a      	str	r2, [r7, #4]
 80106de:	603b      	str	r3, [r7, #0]
 80106e0:	460b      	mov	r3, r1
 80106e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	2b08      	cmp	r3, #8
 80106ee:	d006      	beq.n	80106fe <I2C_MasterRequestWrite+0x2a>
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d003      	beq.n	80106fe <I2C_MasterRequestWrite+0x2a>
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80106fc:	d108      	bne.n	8010710 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801070c:	601a      	str	r2, [r3, #0]
 801070e:	e00b      	b.n	8010728 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010714:	2b12      	cmp	r3, #18
 8010716:	d107      	bne.n	8010728 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	9300      	str	r3, [sp, #0]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2200      	movs	r2, #0
 8010730:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010734:	68f8      	ldr	r0, [r7, #12]
 8010736:	f000 fc55 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d00d      	beq.n	801075c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801074a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801074e:	d103      	bne.n	8010758 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010756:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010758:	2303      	movs	r3, #3
 801075a:	e035      	b.n	80107c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010764:	d108      	bne.n	8010778 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010766:	897b      	ldrh	r3, [r7, #10]
 8010768:	b2db      	uxtb	r3, r3
 801076a:	461a      	mov	r2, r3
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010774:	611a      	str	r2, [r3, #16]
 8010776:	e01b      	b.n	80107b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010778:	897b      	ldrh	r3, [r7, #10]
 801077a:	11db      	asrs	r3, r3, #7
 801077c:	b2db      	uxtb	r3, r3
 801077e:	f003 0306 	and.w	r3, r3, #6
 8010782:	b2db      	uxtb	r3, r3
 8010784:	f063 030f 	orn	r3, r3, #15
 8010788:	b2da      	uxtb	r2, r3
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	490e      	ldr	r1, [pc, #56]	; (80107d0 <I2C_MasterRequestWrite+0xfc>)
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f000 fc7b 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801079c:	4603      	mov	r3, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d001      	beq.n	80107a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80107a2:	2301      	movs	r3, #1
 80107a4:	e010      	b.n	80107c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80107a6:	897b      	ldrh	r3, [r7, #10]
 80107a8:	b2da      	uxtb	r2, r3
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	4907      	ldr	r1, [pc, #28]	; (80107d4 <I2C_MasterRequestWrite+0x100>)
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f000 fc6b 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d001      	beq.n	80107c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80107c2:	2301      	movs	r3, #1
 80107c4:	e000      	b.n	80107c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3718      	adds	r7, #24
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	00010008 	.word	0x00010008
 80107d4:	00010002 	.word	0x00010002

080107d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b088      	sub	sp, #32
 80107dc:	af02      	add	r7, sp, #8
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	607a      	str	r2, [r7, #4]
 80107e2:	603b      	str	r3, [r7, #0]
 80107e4:	460b      	mov	r3, r1
 80107e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80107fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	2b08      	cmp	r3, #8
 8010802:	d006      	beq.n	8010812 <I2C_MasterRequestRead+0x3a>
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d003      	beq.n	8010812 <I2C_MasterRequestRead+0x3a>
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010810:	d108      	bne.n	8010824 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010820:	601a      	str	r2, [r3, #0]
 8010822:	e00b      	b.n	801083c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010828:	2b11      	cmp	r3, #17
 801082a:	d107      	bne.n	801083c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801083a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	9300      	str	r3, [sp, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	f000 fbcb 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00d      	beq.n	8010870 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801085e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010862:	d103      	bne.n	801086c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f44f 7200 	mov.w	r2, #512	; 0x200
 801086a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801086c:	2303      	movs	r3, #3
 801086e:	e079      	b.n	8010964 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010878:	d108      	bne.n	801088c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801087a:	897b      	ldrh	r3, [r7, #10]
 801087c:	b2db      	uxtb	r3, r3
 801087e:	f043 0301 	orr.w	r3, r3, #1
 8010882:	b2da      	uxtb	r2, r3
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	611a      	str	r2, [r3, #16]
 801088a:	e05f      	b.n	801094c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801088c:	897b      	ldrh	r3, [r7, #10]
 801088e:	11db      	asrs	r3, r3, #7
 8010890:	b2db      	uxtb	r3, r3
 8010892:	f003 0306 	and.w	r3, r3, #6
 8010896:	b2db      	uxtb	r3, r3
 8010898:	f063 030f 	orn	r3, r3, #15
 801089c:	b2da      	uxtb	r2, r3
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	4930      	ldr	r1, [pc, #192]	; (801096c <I2C_MasterRequestRead+0x194>)
 80108aa:	68f8      	ldr	r0, [r7, #12]
 80108ac:	f000 fbf1 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80108b0:	4603      	mov	r3, r0
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d001      	beq.n	80108ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	e054      	b.n	8010964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80108ba:	897b      	ldrh	r3, [r7, #10]
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	4929      	ldr	r1, [pc, #164]	; (8010970 <I2C_MasterRequestRead+0x198>)
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	f000 fbe1 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d001      	beq.n	80108da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80108d6:	2301      	movs	r3, #1
 80108d8:	e044      	b.n	8010964 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80108da:	2300      	movs	r3, #0
 80108dc:	613b      	str	r3, [r7, #16]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	695b      	ldr	r3, [r3, #20]
 80108e4:	613b      	str	r3, [r7, #16]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	699b      	ldr	r3, [r3, #24]
 80108ec:	613b      	str	r3, [r7, #16]
 80108ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f000 fb69 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00d      	beq.n	8010934 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010926:	d103      	bne.n	8010930 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801092e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8010930:	2303      	movs	r3, #3
 8010932:	e017      	b.n	8010964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8010934:	897b      	ldrh	r3, [r7, #10]
 8010936:	11db      	asrs	r3, r3, #7
 8010938:	b2db      	uxtb	r3, r3
 801093a:	f003 0306 	and.w	r3, r3, #6
 801093e:	b2db      	uxtb	r3, r3
 8010940:	f063 030e 	orn	r3, r3, #14
 8010944:	b2da      	uxtb	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	4907      	ldr	r1, [pc, #28]	; (8010970 <I2C_MasterRequestRead+0x198>)
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f000 fb9d 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801095e:	2301      	movs	r3, #1
 8010960:	e000      	b.n	8010964 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	00010008 	.word	0x00010008
 8010970:	00010002 	.word	0x00010002

08010974 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b088      	sub	sp, #32
 8010978:	af02      	add	r7, sp, #8
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	4608      	mov	r0, r1
 801097e:	4611      	mov	r1, r2
 8010980:	461a      	mov	r2, r3
 8010982:	4603      	mov	r3, r0
 8010984:	817b      	strh	r3, [r7, #10]
 8010986:	460b      	mov	r3, r1
 8010988:	813b      	strh	r3, [r7, #8]
 801098a:	4613      	mov	r3, r2
 801098c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801099c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	6a3b      	ldr	r3, [r7, #32]
 80109a4:	2200      	movs	r2, #0
 80109a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80109aa:	68f8      	ldr	r0, [r7, #12]
 80109ac:	f000 fb1a 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00d      	beq.n	80109d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109c4:	d103      	bne.n	80109ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80109ce:	2303      	movs	r3, #3
 80109d0:	e05f      	b.n	8010a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80109d2:	897b      	ldrh	r3, [r7, #10]
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	461a      	mov	r2, r3
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80109e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80109e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e4:	6a3a      	ldr	r2, [r7, #32]
 80109e6:	492d      	ldr	r1, [pc, #180]	; (8010a9c <I2C_RequestMemoryWrite+0x128>)
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f000 fb52 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80109f4:	2301      	movs	r3, #1
 80109f6:	e04c      	b.n	8010a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80109f8:	2300      	movs	r3, #0
 80109fa:	617b      	str	r3, [r7, #20]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	695b      	ldr	r3, [r3, #20]
 8010a02:	617b      	str	r3, [r7, #20]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	699b      	ldr	r3, [r3, #24]
 8010a0a:	617b      	str	r3, [r7, #20]
 8010a0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a10:	6a39      	ldr	r1, [r7, #32]
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f000 fbbc 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00d      	beq.n	8010a3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a22:	2b04      	cmp	r3, #4
 8010a24:	d107      	bne.n	8010a36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010a36:	2301      	movs	r3, #1
 8010a38:	e02b      	b.n	8010a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	d105      	bne.n	8010a4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010a40:	893b      	ldrh	r3, [r7, #8]
 8010a42:	b2da      	uxtb	r2, r3
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	611a      	str	r2, [r3, #16]
 8010a4a:	e021      	b.n	8010a90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010a4c:	893b      	ldrh	r3, [r7, #8]
 8010a4e:	0a1b      	lsrs	r3, r3, #8
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a5c:	6a39      	ldr	r1, [r7, #32]
 8010a5e:	68f8      	ldr	r0, [r7, #12]
 8010a60:	f000 fb96 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d00d      	beq.n	8010a86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a6e:	2b04      	cmp	r3, #4
 8010a70:	d107      	bne.n	8010a82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	e005      	b.n	8010a92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010a86:	893b      	ldrh	r3, [r7, #8]
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010a90:	2300      	movs	r3, #0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3718      	adds	r7, #24
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	00010002 	.word	0x00010002

08010aa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b088      	sub	sp, #32
 8010aa4:	af02      	add	r7, sp, #8
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	4608      	mov	r0, r1
 8010aaa:	4611      	mov	r1, r2
 8010aac:	461a      	mov	r2, r3
 8010aae:	4603      	mov	r3, r0
 8010ab0:	817b      	strh	r3, [r7, #10]
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	813b      	strh	r3, [r7, #8]
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ac8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	6a3b      	ldr	r3, [r7, #32]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010ae6:	68f8      	ldr	r0, [r7, #12]
 8010ae8:	f000 fa7c 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d00d      	beq.n	8010b0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b00:	d103      	bne.n	8010b0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	e0aa      	b.n	8010c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010b0e:	897b      	ldrh	r3, [r7, #10]
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	461a      	mov	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	6a3a      	ldr	r2, [r7, #32]
 8010b22:	4952      	ldr	r1, [pc, #328]	; (8010c6c <I2C_RequestMemoryRead+0x1cc>)
 8010b24:	68f8      	ldr	r0, [r7, #12]
 8010b26:	f000 fab4 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8010b30:	2301      	movs	r3, #1
 8010b32:	e097      	b.n	8010c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010b34:	2300      	movs	r3, #0
 8010b36:	617b      	str	r3, [r7, #20]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	695b      	ldr	r3, [r3, #20]
 8010b3e:	617b      	str	r3, [r7, #20]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	699b      	ldr	r3, [r3, #24]
 8010b46:	617b      	str	r3, [r7, #20]
 8010b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b4c:	6a39      	ldr	r1, [r7, #32]
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f000 fb1e 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00d      	beq.n	8010b76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b5e:	2b04      	cmp	r3, #4
 8010b60:	d107      	bne.n	8010b72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e076      	b.n	8010c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010b76:	88fb      	ldrh	r3, [r7, #6]
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d105      	bne.n	8010b88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010b7c:	893b      	ldrh	r3, [r7, #8]
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	611a      	str	r2, [r3, #16]
 8010b86:	e021      	b.n	8010bcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010b88:	893b      	ldrh	r3, [r7, #8]
 8010b8a:	0a1b      	lsrs	r3, r3, #8
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	b2da      	uxtb	r2, r3
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b98:	6a39      	ldr	r1, [r7, #32]
 8010b9a:	68f8      	ldr	r0, [r7, #12]
 8010b9c:	f000 faf8 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00d      	beq.n	8010bc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010baa:	2b04      	cmp	r3, #4
 8010bac:	d107      	bne.n	8010bbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e050      	b.n	8010c64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010bc2:	893b      	ldrh	r3, [r7, #8]
 8010bc4:	b2da      	uxtb	r2, r3
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bce:	6a39      	ldr	r1, [r7, #32]
 8010bd0:	68f8      	ldr	r0, [r7, #12]
 8010bd2:	f000 fadd 	bl	8011190 <I2C_WaitOnTXEFlagUntilTimeout>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00d      	beq.n	8010bf8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be0:	2b04      	cmp	r3, #4
 8010be2:	d107      	bne.n	8010bf4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e035      	b.n	8010c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	6a3b      	ldr	r3, [r7, #32]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f000 f9e5 	bl	8010fe4 <I2C_WaitOnFlagUntilTimeout>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d00d      	beq.n	8010c3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c2e:	d103      	bne.n	8010c38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010c38:	2303      	movs	r3, #3
 8010c3a:	e013      	b.n	8010c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010c3c:	897b      	ldrh	r3, [r7, #10]
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	f043 0301 	orr.w	r3, r3, #1
 8010c44:	b2da      	uxtb	r2, r3
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4e:	6a3a      	ldr	r2, [r7, #32]
 8010c50:	4906      	ldr	r1, [pc, #24]	; (8010c6c <I2C_RequestMemoryRead+0x1cc>)
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f000 fa1d 	bl	8011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d001      	beq.n	8010c62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8010c5e:	2301      	movs	r3, #1
 8010c60:	e000      	b.n	8010c64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8010c62:	2300      	movs	r3, #0
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3718      	adds	r7, #24
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	00010002 	.word	0x00010002

08010c70 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c84:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c8c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c92:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	685a      	ldr	r2, [r3, #4]
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010ca2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d003      	beq.n	8010cb4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d003      	beq.n	8010cc4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8010cc4:	7cfb      	ldrb	r3, [r7, #19]
 8010cc6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8010cca:	2b21      	cmp	r3, #33	; 0x21
 8010ccc:	d007      	beq.n	8010cde <I2C_DMAXferCplt+0x6e>
 8010cce:	7cfb      	ldrb	r3, [r7, #19]
 8010cd0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010cd4:	2b22      	cmp	r3, #34	; 0x22
 8010cd6:	d131      	bne.n	8010d3c <I2C_DMAXferCplt+0xcc>
 8010cd8:	7cbb      	ldrb	r3, [r7, #18]
 8010cda:	2b20      	cmp	r3, #32
 8010cdc:	d12e      	bne.n	8010d3c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	685a      	ldr	r2, [r3, #4]
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010cec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010cf4:	7cfb      	ldrb	r3, [r7, #19]
 8010cf6:	2b29      	cmp	r3, #41	; 0x29
 8010cf8:	d10a      	bne.n	8010d10 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2221      	movs	r2, #33	; 0x21
 8010cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	2228      	movs	r2, #40	; 0x28
 8010d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010d08:	6978      	ldr	r0, [r7, #20]
 8010d0a:	f7fe fb0b 	bl	800f324 <HAL_I2C_SlaveTxCpltCallback>
 8010d0e:	e00c      	b.n	8010d2a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010d10:	7cfb      	ldrb	r3, [r7, #19]
 8010d12:	2b2a      	cmp	r3, #42	; 0x2a
 8010d14:	d109      	bne.n	8010d2a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	2222      	movs	r2, #34	; 0x22
 8010d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	2228      	movs	r2, #40	; 0x28
 8010d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010d24:	6978      	ldr	r0, [r7, #20]
 8010d26:	f7fe fb07 	bl	800f338 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	685a      	ldr	r2, [r3, #4]
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010d38:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010d3a:	e06a      	b.n	8010e12 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d064      	beq.n	8010e12 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d107      	bne.n	8010d62 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d60:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	685a      	ldr	r2, [r3, #4]
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010d70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010d78:	d009      	beq.n	8010d8e <I2C_DMAXferCplt+0x11e>
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2b08      	cmp	r3, #8
 8010d7e:	d006      	beq.n	8010d8e <I2C_DMAXferCplt+0x11e>
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010d86:	d002      	beq.n	8010d8e <I2C_DMAXferCplt+0x11e>
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2b20      	cmp	r3, #32
 8010d8c:	d107      	bne.n	8010d9e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d9c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	685a      	ldr	r2, [r3, #4]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010dac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	685a      	ldr	r2, [r3, #4]
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010dbc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d003      	beq.n	8010dd4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010dcc:	6978      	ldr	r0, [r7, #20]
 8010dce:	f7fe fae9 	bl	800f3a4 <HAL_I2C_ErrorCallback>
}
 8010dd2:	e01e      	b.n	8010e12 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	2220      	movs	r2, #32
 8010dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	2b40      	cmp	r3, #64	; 0x40
 8010de6:	d10a      	bne.n	8010dfe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	2200      	movs	r2, #0
 8010df4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010df6:	6978      	ldr	r0, [r7, #20]
 8010df8:	f7fe faca 	bl	800f390 <HAL_I2C_MemRxCpltCallback>
}
 8010dfc:	e009      	b.n	8010e12 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	2200      	movs	r2, #0
 8010e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	2212      	movs	r2, #18
 8010e0a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8010e0c:	6978      	ldr	r0, [r7, #20]
 8010e0e:	f7fe fa7f 	bl	800f310 <HAL_I2C_MasterRxCpltCallback>
}
 8010e12:	bf00      	nop
 8010e14:	3718      	adds	r7, #24
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b084      	sub	sp, #16
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e26:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d003      	beq.n	8010e38 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e34:	2200      	movs	r2, #0
 8010e36:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d003      	beq.n	8010e48 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e44:	2200      	movs	r2, #0
 8010e46:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7f7 fb94 	bl	8008576 <HAL_DMA_GetError>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b02      	cmp	r3, #2
 8010e52:	d01b      	beq.n	8010e8c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e62:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2200      	movs	r2, #0
 8010e68:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2220      	movs	r2, #32
 8010e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7e:	f043 0210 	orr.w	r2, r3, #16
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010e86:	68f8      	ldr	r0, [r7, #12]
 8010e88:	f7fe fa8c 	bl	800f3a4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010e8c:	bf00      	nop
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b086      	sub	sp, #24
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ea4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010eac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010eae:	4b4b      	ldr	r3, [pc, #300]	; (8010fdc <I2C_DMAAbort+0x148>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	08db      	lsrs	r3, r3, #3
 8010eb4:	4a4a      	ldr	r2, [pc, #296]	; (8010fe0 <I2C_DMAAbort+0x14c>)
 8010eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eba:	0a1a      	lsrs	r2, r3, #8
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	4413      	add	r3, r2
 8010ec2:	00da      	lsls	r2, r3, #3
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed2:	f043 0220 	orr.w	r2, r3, #32
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8010eda:	e00a      	b.n	8010ef2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ef0:	d0ea      	beq.n	8010ec8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d003      	beq.n	8010f02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010efe:	2200      	movs	r2, #0
 8010f00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d003      	beq.n	8010f12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f0e:	2200      	movs	r2, #0
 8010f10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	2200      	movs	r2, #0
 8010f26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d003      	beq.n	8010f38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f34:	2200      	movs	r2, #0
 8010f36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f44:	2200      	movs	r2, #0
 8010f46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f022 0201 	bic.w	r2, r2, #1
 8010f56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b60      	cmp	r3, #96	; 0x60
 8010f62:	d10e      	bne.n	8010f82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	2220      	movs	r2, #32
 8010f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	2200      	movs	r2, #0
 8010f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010f7a:	6978      	ldr	r0, [r7, #20]
 8010f7c:	f7fe fa1c 	bl	800f3b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f80:	e027      	b.n	8010fd2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f82:	7cfb      	ldrb	r3, [r7, #19]
 8010f84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010f88:	2b28      	cmp	r3, #40	; 0x28
 8010f8a:	d117      	bne.n	8010fbc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	681a      	ldr	r2, [r3, #0]
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f042 0201 	orr.w	r2, r2, #1
 8010f9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010faa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	2228      	movs	r2, #40	; 0x28
 8010fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010fba:	e007      	b.n	8010fcc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	2220      	movs	r2, #32
 8010fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8010fcc:	6978      	ldr	r0, [r7, #20]
 8010fce:	f7fe f9e9 	bl	800f3a4 <HAL_I2C_ErrorCallback>
}
 8010fd2:	bf00      	nop
 8010fd4:	3718      	adds	r7, #24
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
 8010fda:	bf00      	nop
 8010fdc:	20000058 	.word	0x20000058
 8010fe0:	14f8b589 	.word	0x14f8b589

08010fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	603b      	str	r3, [r7, #0]
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ff4:	e025      	b.n	8011042 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffc:	d021      	beq.n	8011042 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ffe:	f7f5 fc35 	bl	800686c <HAL_GetTick>
 8011002:	4602      	mov	r2, r0
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	683a      	ldr	r2, [r7, #0]
 801100a:	429a      	cmp	r2, r3
 801100c:	d302      	bcc.n	8011014 <I2C_WaitOnFlagUntilTimeout+0x30>
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d116      	bne.n	8011042 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2220      	movs	r2, #32
 801101e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2200      	movs	r2, #0
 8011026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801102e:	f043 0220 	orr.w	r2, r3, #32
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2200      	movs	r2, #0
 801103a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801103e:	2301      	movs	r3, #1
 8011040:	e023      	b.n	801108a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	0c1b      	lsrs	r3, r3, #16
 8011046:	b2db      	uxtb	r3, r3
 8011048:	2b01      	cmp	r3, #1
 801104a:	d10d      	bne.n	8011068 <I2C_WaitOnFlagUntilTimeout+0x84>
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	695b      	ldr	r3, [r3, #20]
 8011052:	43da      	mvns	r2, r3
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	4013      	ands	r3, r2
 8011058:	b29b      	uxth	r3, r3
 801105a:	2b00      	cmp	r3, #0
 801105c:	bf0c      	ite	eq
 801105e:	2301      	moveq	r3, #1
 8011060:	2300      	movne	r3, #0
 8011062:	b2db      	uxtb	r3, r3
 8011064:	461a      	mov	r2, r3
 8011066:	e00c      	b.n	8011082 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	699b      	ldr	r3, [r3, #24]
 801106e:	43da      	mvns	r2, r3
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	4013      	ands	r3, r2
 8011074:	b29b      	uxth	r3, r3
 8011076:	2b00      	cmp	r3, #0
 8011078:	bf0c      	ite	eq
 801107a:	2301      	moveq	r3, #1
 801107c:	2300      	movne	r3, #0
 801107e:	b2db      	uxtb	r3, r3
 8011080:	461a      	mov	r2, r3
 8011082:	79fb      	ldrb	r3, [r7, #7]
 8011084:	429a      	cmp	r2, r3
 8011086:	d0b6      	beq.n	8010ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011088:	2300      	movs	r3, #0
}
 801108a:	4618      	mov	r0, r3
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b084      	sub	sp, #16
 8011096:	af00      	add	r7, sp, #0
 8011098:	60f8      	str	r0, [r7, #12]
 801109a:	60b9      	str	r1, [r7, #8]
 801109c:	607a      	str	r2, [r7, #4]
 801109e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80110a0:	e051      	b.n	8011146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	695b      	ldr	r3, [r3, #20]
 80110a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110b0:	d123      	bne.n	80110fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80110ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2200      	movs	r2, #0
 80110d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2220      	movs	r2, #32
 80110d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2200      	movs	r2, #0
 80110de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e6:	f043 0204 	orr.w	r2, r3, #4
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2200      	movs	r2, #0
 80110f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80110f6:	2301      	movs	r3, #1
 80110f8:	e046      	b.n	8011188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011100:	d021      	beq.n	8011146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011102:	f7f5 fbb3 	bl	800686c <HAL_GetTick>
 8011106:	4602      	mov	r2, r0
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	429a      	cmp	r2, r3
 8011110:	d302      	bcc.n	8011118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d116      	bne.n	8011146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2200      	movs	r2, #0
 801111c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2220      	movs	r2, #32
 8011122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2200      	movs	r2, #0
 801112a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011132:	f043 0220 	orr.w	r2, r3, #32
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2200      	movs	r2, #0
 801113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011142:	2301      	movs	r3, #1
 8011144:	e020      	b.n	8011188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	0c1b      	lsrs	r3, r3, #16
 801114a:	b2db      	uxtb	r3, r3
 801114c:	2b01      	cmp	r3, #1
 801114e:	d10c      	bne.n	801116a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	695b      	ldr	r3, [r3, #20]
 8011156:	43da      	mvns	r2, r3
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	4013      	ands	r3, r2
 801115c:	b29b      	uxth	r3, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	bf14      	ite	ne
 8011162:	2301      	movne	r3, #1
 8011164:	2300      	moveq	r3, #0
 8011166:	b2db      	uxtb	r3, r3
 8011168:	e00b      	b.n	8011182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	699b      	ldr	r3, [r3, #24]
 8011170:	43da      	mvns	r2, r3
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	4013      	ands	r3, r2
 8011176:	b29b      	uxth	r3, r3
 8011178:	2b00      	cmp	r3, #0
 801117a:	bf14      	ite	ne
 801117c:	2301      	movne	r3, #1
 801117e:	2300      	moveq	r3, #0
 8011180:	b2db      	uxtb	r3, r3
 8011182:	2b00      	cmp	r3, #0
 8011184:	d18d      	bne.n	80110a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3710      	adds	r7, #16
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801119c:	e02d      	b.n	80111fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f000 f93e 	bl	8011420 <I2C_IsAcknowledgeFailed>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d001      	beq.n	80111ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80111aa:	2301      	movs	r3, #1
 80111ac:	e02d      	b.n	801120a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b4:	d021      	beq.n	80111fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111b6:	f7f5 fb59 	bl	800686c <HAL_GetTick>
 80111ba:	4602      	mov	r2, r0
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d302      	bcc.n	80111cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d116      	bne.n	80111fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2200      	movs	r2, #0
 80111d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2220      	movs	r2, #32
 80111d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111e6:	f043 0220 	orr.w	r2, r3, #32
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2200      	movs	r2, #0
 80111f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80111f6:	2301      	movs	r3, #1
 80111f8:	e007      	b.n	801120a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	695b      	ldr	r3, [r3, #20]
 8011200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011204:	2b80      	cmp	r3, #128	; 0x80
 8011206:	d1ca      	bne.n	801119e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b084      	sub	sp, #16
 8011216:	af00      	add	r7, sp, #0
 8011218:	60f8      	str	r0, [r7, #12]
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801121e:	e02d      	b.n	801127c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 f8fd 	bl	8011420 <I2C_IsAcknowledgeFailed>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d001      	beq.n	8011230 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801122c:	2301      	movs	r3, #1
 801122e:	e02d      	b.n	801128c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011236:	d021      	beq.n	801127c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011238:	f7f5 fb18 	bl	800686c <HAL_GetTick>
 801123c:	4602      	mov	r2, r0
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	429a      	cmp	r2, r3
 8011246:	d302      	bcc.n	801124e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d116      	bne.n	801127c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2220      	movs	r2, #32
 8011258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2200      	movs	r2, #0
 8011260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011268:	f043 0220 	orr.w	r2, r3, #32
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2200      	movs	r2, #0
 8011274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011278:	2301      	movs	r3, #1
 801127a:	e007      	b.n	801128c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	695b      	ldr	r3, [r3, #20]
 8011282:	f003 0304 	and.w	r3, r3, #4
 8011286:	2b04      	cmp	r3, #4
 8011288:	d1ca      	bne.n	8011220 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	3710      	adds	r7, #16
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80112a0:	e029      	b.n	80112f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f000 f8bc 	bl	8011420 <I2C_IsAcknowledgeFailed>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d001      	beq.n	80112b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80112ae:	2301      	movs	r3, #1
 80112b0:	e029      	b.n	8011306 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112b2:	f7f5 fadb 	bl	800686c <HAL_GetTick>
 80112b6:	4602      	mov	r2, r0
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d302      	bcc.n	80112c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d116      	bne.n	80112f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2200      	movs	r2, #0
 80112cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2220      	movs	r2, #32
 80112d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e2:	f043 0220 	orr.w	r2, r3, #32
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	e007      	b.n	8011306 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	695b      	ldr	r3, [r3, #20]
 80112fc:	f003 0310 	and.w	r3, r3, #16
 8011300:	2b10      	cmp	r3, #16
 8011302:	d1ce      	bne.n	80112a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801130e:	b480      	push	{r7}
 8011310:	b085      	sub	sp, #20
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011316:	2300      	movs	r3, #0
 8011318:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801131a:	4b14      	ldr	r3, [pc, #80]	; (801136c <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	08db      	lsrs	r3, r3, #3
 8011320:	4a13      	ldr	r2, [pc, #76]	; (8011370 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 8011322:	fba2 2303 	umull	r2, r3, r2, r3
 8011326:	0a1a      	lsrs	r2, r3, #8
 8011328:	4613      	mov	r3, r2
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	4413      	add	r3, r2
 801132e:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	3b01      	subs	r3, #1
 8011334:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d107      	bne.n	801134c <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011340:	f043 0220 	orr.w	r2, r3, #32
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011348:	2301      	movs	r3, #1
 801134a:	e008      	b.n	801135e <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801135a:	d0e9      	beq.n	8011330 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	3714      	adds	r7, #20
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	20000058 	.word	0x20000058
 8011370:	14f8b589 	.word	0x14f8b589

08011374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011380:	e042      	b.n	8011408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	695b      	ldr	r3, [r3, #20]
 8011388:	f003 0310 	and.w	r3, r3, #16
 801138c:	2b10      	cmp	r3, #16
 801138e:	d119      	bne.n	80113c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f06f 0210 	mvn.w	r2, #16
 8011398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2200      	movs	r2, #0
 801139e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2220      	movs	r2, #32
 80113a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2200      	movs	r2, #0
 80113ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2200      	movs	r2, #0
 80113bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e029      	b.n	8011418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80113c4:	f7f5 fa52 	bl	800686c <HAL_GetTick>
 80113c8:	4602      	mov	r2, r0
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	1ad3      	subs	r3, r2, r3
 80113ce:	68ba      	ldr	r2, [r7, #8]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d302      	bcc.n	80113da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d116      	bne.n	8011408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2200      	movs	r2, #0
 80113de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2220      	movs	r2, #32
 80113e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f4:	f043 0220 	orr.w	r2, r3, #32
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2200      	movs	r2, #0
 8011400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011404:	2301      	movs	r3, #1
 8011406:	e007      	b.n	8011418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	695b      	ldr	r3, [r3, #20]
 801140e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011412:	2b40      	cmp	r3, #64	; 0x40
 8011414:	d1b5      	bne.n	8011382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	3710      	adds	r7, #16
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	695b      	ldr	r3, [r3, #20]
 801142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011436:	d11b      	bne.n	8011470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2220      	movs	r2, #32
 801144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801145c:	f043 0204 	orr.w	r2, r3, #4
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801146c:	2301      	movs	r3, #1
 801146e:	e000      	b.n	8011472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011470:	2300      	movs	r3, #0
}
 8011472:	4618      	mov	r0, r3
 8011474:	370c      	adds	r7, #12
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr

0801147e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801147e:	b480      	push	{r7}
 8011480:	b083      	sub	sp, #12
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801148a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801148e:	d103      	bne.n	8011498 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2201      	movs	r2, #1
 8011494:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8011496:	e007      	b.n	80114a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80114a0:	d102      	bne.n	80114a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2208      	movs	r2, #8
 80114a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 80114b4:	b480      	push	{r7}
 80114b6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 80114b8:	4b08      	ldr	r3, [pc, #32]	; (80114dc <HAL_PWR_DeInit+0x28>)
 80114ba:	6a1b      	ldr	r3, [r3, #32]
 80114bc:	4a07      	ldr	r2, [pc, #28]	; (80114dc <HAL_PWR_DeInit+0x28>)
 80114be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114c2:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 80114c4:	4b05      	ldr	r3, [pc, #20]	; (80114dc <HAL_PWR_DeInit+0x28>)
 80114c6:	6a1b      	ldr	r3, [r3, #32]
 80114c8:	4a04      	ldr	r2, [pc, #16]	; (80114dc <HAL_PWR_DeInit+0x28>)
 80114ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80114ce:	6213      	str	r3, [r2, #32]
}
 80114d0:	bf00      	nop
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop
 80114dc:	40023800 	.word	0x40023800

080114e0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80114e6:	4b06      	ldr	r3, [pc, #24]	; (8011500 <HAL_PWR_EnableBkUpAccess+0x20>)
 80114e8:	2201      	movs	r2, #1
 80114ea:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80114ec:	4b05      	ldr	r3, [pc, #20]	; (8011504 <HAL_PWR_EnableBkUpAccess+0x24>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80114f2:	687b      	ldr	r3, [r7, #4]
}
 80114f4:	bf00      	nop
 80114f6:	370c      	adds	r7, #12
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	420e0020 	.word	0x420e0020
 8011504:	40007000 	.word	0x40007000

08011508 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 801150e:	4b06      	ldr	r3, [pc, #24]	; (8011528 <HAL_PWR_DisableBkUpAccess+0x20>)
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8011514:	4b05      	ldr	r3, [pc, #20]	; (801152c <HAL_PWR_DisableBkUpAccess+0x24>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 801151a:	687b      	ldr	r3, [r7, #4]
}
 801151c:	bf00      	nop
 801151e:	370c      	adds	r7, #12
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr
 8011528:	420e0020 	.word	0x420e0020
 801152c:	40007000 	.word	0x40007000

08011530 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8011530:	b480      	push	{r7}
 8011532:	b083      	sub	sp, #12
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8011538:	4b2b      	ldr	r3, [pc, #172]	; (80115e8 <HAL_PWR_ConfigPVD+0xb8>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4928      	ldr	r1, [pc, #160]	; (80115e8 <HAL_PWR_ConfigPVD+0xb8>)
 8011546:	4313      	orrs	r3, r2
 8011548:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 801154a:	4b28      	ldr	r3, [pc, #160]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	4a27      	ldr	r2, [pc, #156]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 8011550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011554:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8011556:	4b25      	ldr	r3, [pc, #148]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4a24      	ldr	r2, [pc, #144]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 801155c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011560:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8011562:	4b22      	ldr	r3, [pc, #136]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	4a21      	ldr	r2, [pc, #132]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 8011568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801156c:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 801156e:	4b1f      	ldr	r3, [pc, #124]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	4a1e      	ldr	r2, [pc, #120]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 8011574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011578:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011582:	2b00      	cmp	r3, #0
 8011584:	d005      	beq.n	8011592 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8011586:	4b19      	ldr	r3, [pc, #100]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	4a18      	ldr	r2, [pc, #96]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 801158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011590:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801159a:	2b00      	cmp	r3, #0
 801159c:	d005      	beq.n	80115aa <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 801159e:	4b13      	ldr	r3, [pc, #76]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	4a12      	ldr	r2, [pc, #72]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 80115a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115a8:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	f003 0301 	and.w	r3, r3, #1
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d005      	beq.n	80115c2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80115b6:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	4a0c      	ldr	r2, [pc, #48]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 80115bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115c0:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	f003 0302 	and.w	r3, r3, #2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d005      	beq.n	80115da <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80115ce:	4b07      	ldr	r3, [pc, #28]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	4a06      	ldr	r2, [pc, #24]	; (80115ec <HAL_PWR_ConfigPVD+0xbc>)
 80115d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115d8:	60d3      	str	r3, [r2, #12]
  }
}
 80115da:	bf00      	nop
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	40007000 	.word	0x40007000
 80115ec:	40013c00 	.word	0x40013c00

080115f0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80115f0:	b480      	push	{r7}
 80115f2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80115f4:	4b03      	ldr	r3, [pc, #12]	; (8011604 <HAL_PWR_EnablePVD+0x14>)
 80115f6:	2201      	movs	r2, #1
 80115f8:	601a      	str	r2, [r3, #0]
}
 80115fa:	bf00      	nop
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr
 8011604:	420e0010 	.word	0x420e0010

08011608 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8011608:	b480      	push	{r7}
 801160a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 801160c:	4b03      	ldr	r3, [pc, #12]	; (801161c <HAL_PWR_DisablePVD+0x14>)
 801160e:	2200      	movs	r2, #0
 8011610:	601a      	str	r2, [r3, #0]
}
 8011612:	bf00      	nop
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr
 801161c:	420e0010 	.word	0x420e0010

08011620 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8011628:	4b05      	ldr	r3, [pc, #20]	; (8011640 <HAL_PWR_EnableWakeUpPin+0x20>)
 801162a:	685a      	ldr	r2, [r3, #4]
 801162c:	4904      	ldr	r1, [pc, #16]	; (8011640 <HAL_PWR_EnableWakeUpPin+0x20>)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4313      	orrs	r3, r2
 8011632:	604b      	str	r3, [r1, #4]
}
 8011634:	bf00      	nop
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	40007000 	.word	0x40007000

08011644 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8011644:	b480      	push	{r7}
 8011646:	b083      	sub	sp, #12
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 801164c:	4b06      	ldr	r3, [pc, #24]	; (8011668 <HAL_PWR_DisableWakeUpPin+0x24>)
 801164e:	685a      	ldr	r2, [r3, #4]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	43db      	mvns	r3, r3
 8011654:	4904      	ldr	r1, [pc, #16]	; (8011668 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011656:	4013      	ands	r3, r2
 8011658:	604b      	str	r3, [r1, #4]
}
 801165a:	bf00      	nop
 801165c:	370c      	adds	r7, #12
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	40007000 	.word	0x40007000

0801166c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	460b      	mov	r3, r1
 8011676:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <HAL_PWR_EnterSLEEPMode+0x34>)
 801167a:	691b      	ldr	r3, [r3, #16]
 801167c:	4a08      	ldr	r2, [pc, #32]	; (80116a0 <HAL_PWR_EnterSLEEPMode+0x34>)
 801167e:	f023 0304 	bic.w	r3, r3, #4
 8011682:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011684:	78fb      	ldrb	r3, [r7, #3]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d101      	bne.n	801168e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801168a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 801168c:	e002      	b.n	8011694 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 801168e:	bf40      	sev
    __WFE();
 8011690:	bf20      	wfe
    __WFE();
 8011692:	bf20      	wfe
}
 8011694:	bf00      	nop
 8011696:	370c      	adds	r7, #12
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr
 80116a0:	e000ed00 	.word	0xe000ed00

080116a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	460b      	mov	r3, r1
 80116ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80116b0:	4b10      	ldr	r3, [pc, #64]	; (80116f4 <HAL_PWR_EnterSTOPMode+0x50>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f023 0203 	bic.w	r2, r3, #3
 80116b8:	490e      	ldr	r1, [pc, #56]	; (80116f4 <HAL_PWR_EnterSTOPMode+0x50>)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	4313      	orrs	r3, r2
 80116be:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80116c0:	4b0d      	ldr	r3, [pc, #52]	; (80116f8 <HAL_PWR_EnterSTOPMode+0x54>)
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	4a0c      	ldr	r2, [pc, #48]	; (80116f8 <HAL_PWR_EnterSTOPMode+0x54>)
 80116c6:	f043 0304 	orr.w	r3, r3, #4
 80116ca:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80116cc:	78fb      	ldrb	r3, [r7, #3]
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d101      	bne.n	80116d6 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80116d2:	bf30      	wfi
 80116d4:	e002      	b.n	80116dc <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80116d6:	bf40      	sev
    __WFE();
 80116d8:	bf20      	wfe
    __WFE();
 80116da:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80116dc:	4b06      	ldr	r3, [pc, #24]	; (80116f8 <HAL_PWR_EnterSTOPMode+0x54>)
 80116de:	691b      	ldr	r3, [r3, #16]
 80116e0:	4a05      	ldr	r2, [pc, #20]	; (80116f8 <HAL_PWR_EnterSTOPMode+0x54>)
 80116e2:	f023 0304 	bic.w	r3, r3, #4
 80116e6:	6113      	str	r3, [r2, #16]
}
 80116e8:	bf00      	nop
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr
 80116f4:	40007000 	.word	0x40007000
 80116f8:	e000ed00 	.word	0xe000ed00

080116fc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80116fc:	b480      	push	{r7}
 80116fe:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8011700:	4b08      	ldr	r3, [pc, #32]	; (8011724 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	4a07      	ldr	r2, [pc, #28]	; (8011724 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011706:	f043 0302 	orr.w	r3, r3, #2
 801170a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 801170e:	691b      	ldr	r3, [r3, #16]
 8011710:	4a05      	ldr	r2, [pc, #20]	; (8011728 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011712:	f043 0304 	orr.w	r3, r3, #4
 8011716:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8011718:	bf30      	wfi
}
 801171a:	bf00      	nop
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr
 8011724:	40007000 	.word	0x40007000
 8011728:	e000ed00 	.word	0xe000ed00

0801172c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8011730:	4b06      	ldr	r3, [pc, #24]	; (801174c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011732:	695b      	ldr	r3, [r3, #20]
 8011734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011738:	2b00      	cmp	r3, #0
 801173a:	d005      	beq.n	8011748 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 801173c:	f000 f808 	bl	8011750 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011740:	4b02      	ldr	r3, [pc, #8]	; (801174c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011742:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011746:	615a      	str	r2, [r3, #20]
  }
}
 8011748:	bf00      	nop
 801174a:	bd80      	pop	{r7, pc}
 801174c:	40013c00 	.word	0x40013c00

08011750 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011750:	b480      	push	{r7}
 8011752:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8011754:	bf00      	nop
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr

0801175e <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 801175e:	b480      	push	{r7}
 8011760:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011762:	4b05      	ldr	r3, [pc, #20]	; (8011778 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011764:	691b      	ldr	r3, [r3, #16]
 8011766:	4a04      	ldr	r2, [pc, #16]	; (8011778 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011768:	f043 0302 	orr.w	r3, r3, #2
 801176c:	6113      	str	r3, [r2, #16]
}
 801176e:	bf00      	nop
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr
 8011778:	e000ed00 	.word	0xe000ed00

0801177c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 801177c:	b480      	push	{r7}
 801177e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011780:	4b05      	ldr	r3, [pc, #20]	; (8011798 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	4a04      	ldr	r2, [pc, #16]	; (8011798 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011786:	f023 0302 	bic.w	r3, r3, #2
 801178a:	6113      	str	r3, [r2, #16]
}
 801178c:	bf00      	nop
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr
 8011796:	bf00      	nop
 8011798:	e000ed00 	.word	0xe000ed00

0801179c <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 801179c:	b480      	push	{r7}
 801179e:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 80117a0:	4b05      	ldr	r3, [pc, #20]	; (80117b8 <HAL_PWR_EnableSEVOnPend+0x1c>)
 80117a2:	691b      	ldr	r3, [r3, #16]
 80117a4:	4a04      	ldr	r2, [pc, #16]	; (80117b8 <HAL_PWR_EnableSEVOnPend+0x1c>)
 80117a6:	f043 0310 	orr.w	r3, r3, #16
 80117aa:	6113      	str	r3, [r2, #16]
}
 80117ac:	bf00      	nop
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	e000ed00 	.word	0xe000ed00

080117bc <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 80117bc:	b480      	push	{r7}
 80117be:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 80117c0:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <HAL_PWR_DisableSEVOnPend+0x1c>)
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	4a04      	ldr	r2, [pc, #16]	; (80117d8 <HAL_PWR_DisableSEVOnPend+0x1c>)
 80117c6:	f023 0310 	bic.w	r3, r3, #16
 80117ca:	6113      	str	r3, [r2, #16]
}
 80117cc:	bf00      	nop
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	e000ed00 	.word	0xe000ed00

080117dc <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80117e2:	2300      	movs	r3, #0
 80117e4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80117e6:	4b0e      	ldr	r3, [pc, #56]	; (8011820 <HAL_PWREx_EnableBkUpReg+0x44>)
 80117e8:	2201      	movs	r2, #1
 80117ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80117ec:	f7f5 f83e 	bl	800686c <HAL_GetTick>
 80117f0:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80117f2:	e009      	b.n	8011808 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80117f4:	f7f5 f83a 	bl	800686c <HAL_GetTick>
 80117f8:	4602      	mov	r2, r0
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	1ad3      	subs	r3, r2, r3
 80117fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011802:	d901      	bls.n	8011808 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011804:	2303      	movs	r3, #3
 8011806:	e006      	b.n	8011816 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011808:	4b06      	ldr	r3, [pc, #24]	; (8011824 <HAL_PWREx_EnableBkUpReg+0x48>)
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	f003 0308 	and.w	r3, r3, #8
 8011810:	2b08      	cmp	r3, #8
 8011812:	d1ef      	bne.n	80117f4 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	420e00a4 	.word	0x420e00a4
 8011824:	40007000 	.word	0x40007000

08011828 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801182e:	2300      	movs	r3, #0
 8011830:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8011832:	4b0e      	ldr	r3, [pc, #56]	; (801186c <HAL_PWREx_DisableBkUpReg+0x44>)
 8011834:	2200      	movs	r2, #0
 8011836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011838:	f7f5 f818 	bl	800686c <HAL_GetTick>
 801183c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 801183e:	e009      	b.n	8011854 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011840:	f7f5 f814 	bl	800686c <HAL_GetTick>
 8011844:	4602      	mov	r2, r0
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	1ad3      	subs	r3, r2, r3
 801184a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801184e:	d901      	bls.n	8011854 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011850:	2303      	movs	r3, #3
 8011852:	e006      	b.n	8011862 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011854:	4b06      	ldr	r3, [pc, #24]	; (8011870 <HAL_PWREx_DisableBkUpReg+0x48>)
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	f003 0308 	and.w	r3, r3, #8
 801185c:	2b08      	cmp	r3, #8
 801185e:	d0ef      	beq.n	8011840 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3708      	adds	r7, #8
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
 801186a:	bf00      	nop
 801186c:	420e00a4 	.word	0x420e00a4
 8011870:	40007000 	.word	0x40007000

08011874 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011874:	b480      	push	{r7}
 8011876:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011878:	4b03      	ldr	r3, [pc, #12]	; (8011888 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 801187a:	2201      	movs	r2, #1
 801187c:	601a      	str	r2, [r3, #0]
}
 801187e:	bf00      	nop
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	420e0024 	.word	0x420e0024

0801188c <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 801188c:	b480      	push	{r7}
 801188e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011890:	4b03      	ldr	r3, [pc, #12]	; (80118a0 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8011892:	2200      	movs	r2, #0
 8011894:	601a      	str	r2, [r3, #0]
}
 8011896:	bf00      	nop
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr
 80118a0:	420e0024 	.word	0x420e0024

080118a4 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80118a4:	b480      	push	{r7}
 80118a6:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 80118a8:	4b04      	ldr	r3, [pc, #16]	; (80118bc <HAL_PWREx_GetVoltageRange+0x18>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	40007000 	.word	0x40007000

080118c0 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b086      	sub	sp, #24
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80118c8:	2300      	movs	r3, #0
 80118ca:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 80118cc:	2300      	movs	r3, #0
 80118ce:	60fb      	str	r3, [r7, #12]
 80118d0:	4b1a      	ldr	r3, [pc, #104]	; (801193c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80118d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118d4:	4a19      	ldr	r2, [pc, #100]	; (801193c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80118d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118da:	6413      	str	r3, [r2, #64]	; 0x40
 80118dc:	4b17      	ldr	r3, [pc, #92]	; (801193c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80118de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118e4:	60fb      	str	r3, [r7, #12]
 80118e6:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 80118e8:	2300      	movs	r3, #0
 80118ea:	613b      	str	r3, [r7, #16]
 80118ec:	4b14      	ldr	r3, [pc, #80]	; (8011940 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80118f4:	4912      	ldr	r1, [pc, #72]	; (8011940 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4313      	orrs	r3, r2
 80118fa:	600b      	str	r3, [r1, #0]
 80118fc:	4b10      	ldr	r3, [pc, #64]	; (8011940 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011904:	613b      	str	r3, [r7, #16]
 8011906:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011908:	f7f4 ffb0 	bl	800686c <HAL_GetTick>
 801190c:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 801190e:	e009      	b.n	8011924 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 8011910:	f7f4 ffac 	bl	800686c <HAL_GetTick>
 8011914:	4602      	mov	r2, r0
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	1ad3      	subs	r3, r2, r3
 801191a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801191e:	d901      	bls.n	8011924 <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 8011920:	2303      	movs	r3, #3
 8011922:	e007      	b.n	8011934 <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8011924:	4b06      	ldr	r3, [pc, #24]	; (8011940 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801192c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011930:	d1ee      	bne.n	8011910 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 8011932:	2300      	movs	r3, #0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3718      	adds	r7, #24
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	40023800 	.word	0x40023800
 8011940:	40007000 	.word	0x40007000

08011944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d101      	bne.n	8011956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011952:	2301      	movs	r3, #1
 8011954:	e267      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f003 0301 	and.w	r3, r3, #1
 801195e:	2b00      	cmp	r3, #0
 8011960:	d075      	beq.n	8011a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011962:	4b88      	ldr	r3, [pc, #544]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	f003 030c 	and.w	r3, r3, #12
 801196a:	2b04      	cmp	r3, #4
 801196c:	d00c      	beq.n	8011988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801196e:	4b85      	ldr	r3, [pc, #532]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011976:	2b08      	cmp	r3, #8
 8011978:	d112      	bne.n	80119a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801197a:	4b82      	ldr	r3, [pc, #520]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011986:	d10b      	bne.n	80119a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011988:	4b7e      	ldr	r3, [pc, #504]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011990:	2b00      	cmp	r3, #0
 8011992:	d05b      	beq.n	8011a4c <HAL_RCC_OscConfig+0x108>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d157      	bne.n	8011a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801199c:	2301      	movs	r3, #1
 801199e:	e242      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119a8:	d106      	bne.n	80119b8 <HAL_RCC_OscConfig+0x74>
 80119aa:	4b76      	ldr	r3, [pc, #472]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4a75      	ldr	r2, [pc, #468]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119b4:	6013      	str	r3, [r2, #0]
 80119b6:	e01d      	b.n	80119f4 <HAL_RCC_OscConfig+0xb0>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80119c0:	d10c      	bne.n	80119dc <HAL_RCC_OscConfig+0x98>
 80119c2:	4b70      	ldr	r3, [pc, #448]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4a6f      	ldr	r2, [pc, #444]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80119cc:	6013      	str	r3, [r2, #0]
 80119ce:	4b6d      	ldr	r3, [pc, #436]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4a6c      	ldr	r2, [pc, #432]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119d8:	6013      	str	r3, [r2, #0]
 80119da:	e00b      	b.n	80119f4 <HAL_RCC_OscConfig+0xb0>
 80119dc:	4b69      	ldr	r3, [pc, #420]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4a68      	ldr	r2, [pc, #416]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80119e6:	6013      	str	r3, [r2, #0]
 80119e8:	4b66      	ldr	r3, [pc, #408]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4a65      	ldr	r2, [pc, #404]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 80119ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80119f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d013      	beq.n	8011a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119fc:	f7f4 ff36 	bl	800686c <HAL_GetTick>
 8011a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a02:	e008      	b.n	8011a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011a04:	f7f4 ff32 	bl	800686c <HAL_GetTick>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	2b64      	cmp	r3, #100	; 0x64
 8011a10:	d901      	bls.n	8011a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011a12:	2303      	movs	r3, #3
 8011a14:	e207      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a16:	4b5b      	ldr	r3, [pc, #364]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d0f0      	beq.n	8011a04 <HAL_RCC_OscConfig+0xc0>
 8011a22:	e014      	b.n	8011a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a24:	f7f4 ff22 	bl	800686c <HAL_GetTick>
 8011a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011a2a:	e008      	b.n	8011a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011a2c:	f7f4 ff1e 	bl	800686c <HAL_GetTick>
 8011a30:	4602      	mov	r2, r0
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	2b64      	cmp	r3, #100	; 0x64
 8011a38:	d901      	bls.n	8011a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	e1f3      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011a3e:	4b51      	ldr	r3, [pc, #324]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1f0      	bne.n	8011a2c <HAL_RCC_OscConfig+0xe8>
 8011a4a:	e000      	b.n	8011a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f003 0302 	and.w	r3, r3, #2
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d063      	beq.n	8011b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a5a:	4b4a      	ldr	r3, [pc, #296]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	f003 030c 	and.w	r3, r3, #12
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d00b      	beq.n	8011a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a66:	4b47      	ldr	r3, [pc, #284]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011a68:	689b      	ldr	r3, [r3, #8]
 8011a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011a6e:	2b08      	cmp	r3, #8
 8011a70:	d11c      	bne.n	8011aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011a72:	4b44      	ldr	r3, [pc, #272]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d116      	bne.n	8011aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011a7e:	4b41      	ldr	r3, [pc, #260]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f003 0302 	and.w	r3, r3, #2
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d005      	beq.n	8011a96 <HAL_RCC_OscConfig+0x152>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	2b01      	cmp	r3, #1
 8011a90:	d001      	beq.n	8011a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011a92:	2301      	movs	r3, #1
 8011a94:	e1c7      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a96:	4b3b      	ldr	r3, [pc, #236]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	691b      	ldr	r3, [r3, #16]
 8011aa2:	00db      	lsls	r3, r3, #3
 8011aa4:	4937      	ldr	r1, [pc, #220]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011aaa:	e03a      	b.n	8011b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d020      	beq.n	8011af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011ab4:	4b34      	ldr	r3, [pc, #208]	; (8011b88 <HAL_RCC_OscConfig+0x244>)
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011aba:	f7f4 fed7 	bl	800686c <HAL_GetTick>
 8011abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ac0:	e008      	b.n	8011ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011ac2:	f7f4 fed3 	bl	800686c <HAL_GetTick>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	2b02      	cmp	r3, #2
 8011ace:	d901      	bls.n	8011ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011ad0:	2303      	movs	r3, #3
 8011ad2:	e1a8      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ad4:	4b2b      	ldr	r3, [pc, #172]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f003 0302 	and.w	r3, r3, #2
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d0f0      	beq.n	8011ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011ae0:	4b28      	ldr	r3, [pc, #160]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	691b      	ldr	r3, [r3, #16]
 8011aec:	00db      	lsls	r3, r3, #3
 8011aee:	4925      	ldr	r1, [pc, #148]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011af0:	4313      	orrs	r3, r2
 8011af2:	600b      	str	r3, [r1, #0]
 8011af4:	e015      	b.n	8011b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011af6:	4b24      	ldr	r3, [pc, #144]	; (8011b88 <HAL_RCC_OscConfig+0x244>)
 8011af8:	2200      	movs	r2, #0
 8011afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011afc:	f7f4 feb6 	bl	800686c <HAL_GetTick>
 8011b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011b02:	e008      	b.n	8011b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011b04:	f7f4 feb2 	bl	800686c <HAL_GetTick>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	2b02      	cmp	r3, #2
 8011b10:	d901      	bls.n	8011b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011b12:	2303      	movs	r3, #3
 8011b14:	e187      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011b16:	4b1b      	ldr	r3, [pc, #108]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f003 0302 	and.w	r3, r3, #2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d1f0      	bne.n	8011b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f003 0308 	and.w	r3, r3, #8
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d036      	beq.n	8011b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	695b      	ldr	r3, [r3, #20]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d016      	beq.n	8011b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011b36:	4b15      	ldr	r3, [pc, #84]	; (8011b8c <HAL_RCC_OscConfig+0x248>)
 8011b38:	2201      	movs	r2, #1
 8011b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b3c:	f7f4 fe96 	bl	800686c <HAL_GetTick>
 8011b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011b42:	e008      	b.n	8011b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b44:	f7f4 fe92 	bl	800686c <HAL_GetTick>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	1ad3      	subs	r3, r2, r3
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d901      	bls.n	8011b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011b52:	2303      	movs	r3, #3
 8011b54:	e167      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011b56:	4b0b      	ldr	r3, [pc, #44]	; (8011b84 <HAL_RCC_OscConfig+0x240>)
 8011b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b5a:	f003 0302 	and.w	r3, r3, #2
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0f0      	beq.n	8011b44 <HAL_RCC_OscConfig+0x200>
 8011b62:	e01b      	b.n	8011b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011b64:	4b09      	ldr	r3, [pc, #36]	; (8011b8c <HAL_RCC_OscConfig+0x248>)
 8011b66:	2200      	movs	r2, #0
 8011b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b6a:	f7f4 fe7f 	bl	800686c <HAL_GetTick>
 8011b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011b70:	e00e      	b.n	8011b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b72:	f7f4 fe7b 	bl	800686c <HAL_GetTick>
 8011b76:	4602      	mov	r2, r0
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	2b02      	cmp	r3, #2
 8011b7e:	d907      	bls.n	8011b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011b80:	2303      	movs	r3, #3
 8011b82:	e150      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
 8011b84:	40023800 	.word	0x40023800
 8011b88:	42470000 	.word	0x42470000
 8011b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011b90:	4b88      	ldr	r3, [pc, #544]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b94:	f003 0302 	and.w	r3, r3, #2
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1ea      	bne.n	8011b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f003 0304 	and.w	r3, r3, #4
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f000 8097 	beq.w	8011cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011baa:	2300      	movs	r3, #0
 8011bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011bae:	4b81      	ldr	r3, [pc, #516]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d10f      	bne.n	8011bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011bba:	2300      	movs	r3, #0
 8011bbc:	60bb      	str	r3, [r7, #8]
 8011bbe:	4b7d      	ldr	r3, [pc, #500]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc2:	4a7c      	ldr	r2, [pc, #496]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8011bca:	4b7a      	ldr	r3, [pc, #488]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011bd2:	60bb      	str	r3, [r7, #8]
 8011bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011bda:	4b77      	ldr	r3, [pc, #476]	; (8011db8 <HAL_RCC_OscConfig+0x474>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d118      	bne.n	8011c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011be6:	4b74      	ldr	r3, [pc, #464]	; (8011db8 <HAL_RCC_OscConfig+0x474>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	4a73      	ldr	r2, [pc, #460]	; (8011db8 <HAL_RCC_OscConfig+0x474>)
 8011bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011bf2:	f7f4 fe3b 	bl	800686c <HAL_GetTick>
 8011bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011bf8:	e008      	b.n	8011c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011bfa:	f7f4 fe37 	bl	800686c <HAL_GetTick>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	d901      	bls.n	8011c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011c08:	2303      	movs	r3, #3
 8011c0a:	e10c      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011c0c:	4b6a      	ldr	r3, [pc, #424]	; (8011db8 <HAL_RCC_OscConfig+0x474>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d0f0      	beq.n	8011bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	689b      	ldr	r3, [r3, #8]
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d106      	bne.n	8011c2e <HAL_RCC_OscConfig+0x2ea>
 8011c20:	4b64      	ldr	r3, [pc, #400]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c24:	4a63      	ldr	r2, [pc, #396]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c26:	f043 0301 	orr.w	r3, r3, #1
 8011c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8011c2c:	e01c      	b.n	8011c68 <HAL_RCC_OscConfig+0x324>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	689b      	ldr	r3, [r3, #8]
 8011c32:	2b05      	cmp	r3, #5
 8011c34:	d10c      	bne.n	8011c50 <HAL_RCC_OscConfig+0x30c>
 8011c36:	4b5f      	ldr	r3, [pc, #380]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c3a:	4a5e      	ldr	r2, [pc, #376]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c3c:	f043 0304 	orr.w	r3, r3, #4
 8011c40:	6713      	str	r3, [r2, #112]	; 0x70
 8011c42:	4b5c      	ldr	r3, [pc, #368]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c46:	4a5b      	ldr	r2, [pc, #364]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c48:	f043 0301 	orr.w	r3, r3, #1
 8011c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8011c4e:	e00b      	b.n	8011c68 <HAL_RCC_OscConfig+0x324>
 8011c50:	4b58      	ldr	r3, [pc, #352]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c54:	4a57      	ldr	r2, [pc, #348]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c56:	f023 0301 	bic.w	r3, r3, #1
 8011c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8011c5c:	4b55      	ldr	r3, [pc, #340]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c60:	4a54      	ldr	r2, [pc, #336]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c62:	f023 0304 	bic.w	r3, r3, #4
 8011c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d015      	beq.n	8011c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c70:	f7f4 fdfc 	bl	800686c <HAL_GetTick>
 8011c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c76:	e00a      	b.n	8011c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c78:	f7f4 fdf8 	bl	800686c <HAL_GetTick>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d901      	bls.n	8011c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	e0cb      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c8e:	4b49      	ldr	r3, [pc, #292]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c92:	f003 0302 	and.w	r3, r3, #2
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d0ee      	beq.n	8011c78 <HAL_RCC_OscConfig+0x334>
 8011c9a:	e014      	b.n	8011cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011c9c:	f7f4 fde6 	bl	800686c <HAL_GetTick>
 8011ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011ca2:	e00a      	b.n	8011cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011ca4:	f7f4 fde2 	bl	800686c <HAL_GetTick>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d901      	bls.n	8011cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011cb6:	2303      	movs	r3, #3
 8011cb8:	e0b5      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011cba:	4b3e      	ldr	r3, [pc, #248]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cbe:	f003 0302 	and.w	r3, r3, #2
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1ee      	bne.n	8011ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011cc6:	7dfb      	ldrb	r3, [r7, #23]
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d105      	bne.n	8011cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011ccc:	4b39      	ldr	r3, [pc, #228]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cd0:	4a38      	ldr	r2, [pc, #224]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f000 80a1 	beq.w	8011e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011ce2:	4b34      	ldr	r3, [pc, #208]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	f003 030c 	and.w	r3, r3, #12
 8011cea:	2b08      	cmp	r3, #8
 8011cec:	d05c      	beq.n	8011da8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	699b      	ldr	r3, [r3, #24]
 8011cf2:	2b02      	cmp	r3, #2
 8011cf4:	d141      	bne.n	8011d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011cf6:	4b31      	ldr	r3, [pc, #196]	; (8011dbc <HAL_RCC_OscConfig+0x478>)
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011cfc:	f7f4 fdb6 	bl	800686c <HAL_GetTick>
 8011d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d02:	e008      	b.n	8011d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d04:	f7f4 fdb2 	bl	800686c <HAL_GetTick>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	2b02      	cmp	r3, #2
 8011d10:	d901      	bls.n	8011d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011d12:	2303      	movs	r3, #3
 8011d14:	e087      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d16:	4b27      	ldr	r3, [pc, #156]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1f0      	bne.n	8011d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	69da      	ldr	r2, [r3, #28]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6a1b      	ldr	r3, [r3, #32]
 8011d2a:	431a      	orrs	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d30:	019b      	lsls	r3, r3, #6
 8011d32:	431a      	orrs	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d38:	085b      	lsrs	r3, r3, #1
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	041b      	lsls	r3, r3, #16
 8011d3e:	431a      	orrs	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d44:	061b      	lsls	r3, r3, #24
 8011d46:	491b      	ldr	r1, [pc, #108]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011d48:	4313      	orrs	r3, r2
 8011d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011d4c:	4b1b      	ldr	r3, [pc, #108]	; (8011dbc <HAL_RCC_OscConfig+0x478>)
 8011d4e:	2201      	movs	r2, #1
 8011d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d52:	f7f4 fd8b 	bl	800686c <HAL_GetTick>
 8011d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d58:	e008      	b.n	8011d6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d5a:	f7f4 fd87 	bl	800686c <HAL_GetTick>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	693b      	ldr	r3, [r7, #16]
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d901      	bls.n	8011d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011d68:	2303      	movs	r3, #3
 8011d6a:	e05c      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d6c:	4b11      	ldr	r3, [pc, #68]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d0f0      	beq.n	8011d5a <HAL_RCC_OscConfig+0x416>
 8011d78:	e054      	b.n	8011e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d7a:	4b10      	ldr	r3, [pc, #64]	; (8011dbc <HAL_RCC_OscConfig+0x478>)
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d80:	f7f4 fd74 	bl	800686c <HAL_GetTick>
 8011d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d86:	e008      	b.n	8011d9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d88:	f7f4 fd70 	bl	800686c <HAL_GetTick>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	2b02      	cmp	r3, #2
 8011d94:	d901      	bls.n	8011d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011d96:	2303      	movs	r3, #3
 8011d98:	e045      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011d9a:	4b06      	ldr	r3, [pc, #24]	; (8011db4 <HAL_RCC_OscConfig+0x470>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d1f0      	bne.n	8011d88 <HAL_RCC_OscConfig+0x444>
 8011da6:	e03d      	b.n	8011e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	699b      	ldr	r3, [r3, #24]
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d107      	bne.n	8011dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	e038      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
 8011db4:	40023800 	.word	0x40023800
 8011db8:	40007000 	.word	0x40007000
 8011dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011dc0:	4b1b      	ldr	r3, [pc, #108]	; (8011e30 <HAL_RCC_OscConfig+0x4ec>)
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	699b      	ldr	r3, [r3, #24]
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d028      	beq.n	8011e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d121      	bne.n	8011e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d11a      	bne.n	8011e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011df0:	4013      	ands	r3, r2
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d111      	bne.n	8011e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e06:	085b      	lsrs	r3, r3, #1
 8011e08:	3b01      	subs	r3, #1
 8011e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d107      	bne.n	8011e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d001      	beq.n	8011e24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8011e20:	2301      	movs	r3, #1
 8011e22:	e000      	b.n	8011e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011e24:	2300      	movs	r3, #0
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3718      	adds	r7, #24
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	40023800 	.word	0x40023800

08011e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b084      	sub	sp, #16
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d101      	bne.n	8011e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011e44:	2301      	movs	r3, #1
 8011e46:	e0cc      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011e48:	4b68      	ldr	r3, [pc, #416]	; (8011fec <HAL_RCC_ClockConfig+0x1b8>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f003 0307 	and.w	r3, r3, #7
 8011e50:	683a      	ldr	r2, [r7, #0]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d90c      	bls.n	8011e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e56:	4b65      	ldr	r3, [pc, #404]	; (8011fec <HAL_RCC_ClockConfig+0x1b8>)
 8011e58:	683a      	ldr	r2, [r7, #0]
 8011e5a:	b2d2      	uxtb	r2, r2
 8011e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e5e:	4b63      	ldr	r3, [pc, #396]	; (8011fec <HAL_RCC_ClockConfig+0x1b8>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f003 0307 	and.w	r3, r3, #7
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d001      	beq.n	8011e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e0b8      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f003 0302 	and.w	r3, r3, #2
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d020      	beq.n	8011ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f003 0304 	and.w	r3, r3, #4
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d005      	beq.n	8011e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011e88:	4b59      	ldr	r3, [pc, #356]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	4a58      	ldr	r2, [pc, #352]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f003 0308 	and.w	r3, r3, #8
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d005      	beq.n	8011eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011ea0:	4b53      	ldr	r3, [pc, #332]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	4a52      	ldr	r2, [pc, #328]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011eac:	4b50      	ldr	r3, [pc, #320]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011eae:	689b      	ldr	r3, [r3, #8]
 8011eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	494d      	ldr	r1, [pc, #308]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f003 0301 	and.w	r3, r3, #1
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d044      	beq.n	8011f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d107      	bne.n	8011ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ed2:	4b47      	ldr	r3, [pc, #284]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d119      	bne.n	8011f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e07f      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	2b02      	cmp	r3, #2
 8011ee8:	d003      	beq.n	8011ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011eee:	2b03      	cmp	r3, #3
 8011ef0:	d107      	bne.n	8011f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011ef2:	4b3f      	ldr	r3, [pc, #252]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d109      	bne.n	8011f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011efe:	2301      	movs	r3, #1
 8011f00:	e06f      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011f02:	4b3b      	ldr	r3, [pc, #236]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f003 0302 	and.w	r3, r3, #2
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d101      	bne.n	8011f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011f0e:	2301      	movs	r3, #1
 8011f10:	e067      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011f12:	4b37      	ldr	r3, [pc, #220]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f14:	689b      	ldr	r3, [r3, #8]
 8011f16:	f023 0203 	bic.w	r2, r3, #3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	4934      	ldr	r1, [pc, #208]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f20:	4313      	orrs	r3, r2
 8011f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011f24:	f7f4 fca2 	bl	800686c <HAL_GetTick>
 8011f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f2a:	e00a      	b.n	8011f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f2c:	f7f4 fc9e 	bl	800686c <HAL_GetTick>
 8011f30:	4602      	mov	r2, r0
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d901      	bls.n	8011f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011f3e:	2303      	movs	r3, #3
 8011f40:	e04f      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f42:	4b2b      	ldr	r3, [pc, #172]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	f003 020c 	and.w	r2, r3, #12
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d1eb      	bne.n	8011f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011f54:	4b25      	ldr	r3, [pc, #148]	; (8011fec <HAL_RCC_ClockConfig+0x1b8>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f003 0307 	and.w	r3, r3, #7
 8011f5c:	683a      	ldr	r2, [r7, #0]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d20c      	bcs.n	8011f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f62:	4b22      	ldr	r3, [pc, #136]	; (8011fec <HAL_RCC_ClockConfig+0x1b8>)
 8011f64:	683a      	ldr	r2, [r7, #0]
 8011f66:	b2d2      	uxtb	r2, r2
 8011f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f6a:	4b20      	ldr	r3, [pc, #128]	; (8011fec <HAL_RCC_ClockConfig+0x1b8>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f003 0307 	and.w	r3, r3, #7
 8011f72:	683a      	ldr	r2, [r7, #0]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d001      	beq.n	8011f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e032      	b.n	8011fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d008      	beq.n	8011f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011f88:	4b19      	ldr	r3, [pc, #100]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	4916      	ldr	r1, [pc, #88]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011f96:	4313      	orrs	r3, r2
 8011f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f003 0308 	and.w	r3, r3, #8
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d009      	beq.n	8011fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011fa6:	4b12      	ldr	r3, [pc, #72]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	691b      	ldr	r3, [r3, #16]
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	490e      	ldr	r1, [pc, #56]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011fba:	f000 f8a1 	bl	8012100 <HAL_RCC_GetSysClockFreq>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	4b0b      	ldr	r3, [pc, #44]	; (8011ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8011fc2:	689b      	ldr	r3, [r3, #8]
 8011fc4:	091b      	lsrs	r3, r3, #4
 8011fc6:	f003 030f 	and.w	r3, r3, #15
 8011fca:	490a      	ldr	r1, [pc, #40]	; (8011ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8011fcc:	5ccb      	ldrb	r3, [r1, r3]
 8011fce:	fa22 f303 	lsr.w	r3, r2, r3
 8011fd2:	4a09      	ldr	r2, [pc, #36]	; (8011ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8011fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011fd6:	4b09      	ldr	r3, [pc, #36]	; (8011ffc <HAL_RCC_ClockConfig+0x1c8>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7f4 fc01 	bl	80067e2 <HAL_InitTick>

  return HAL_OK;
 8011fe0:	2300      	movs	r3, #0
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3710      	adds	r7, #16
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	40023c00 	.word	0x40023c00
 8011ff0:	40023800 	.word	0x40023800
 8011ff4:	08051f48 	.word	0x08051f48
 8011ff8:	20000058 	.word	0x20000058
 8011ffc:	2000005c 	.word	0x2000005c

08012000 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b08c      	sub	sp, #48	; 0x30
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d129      	bne.n	8012066 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8012012:	2300      	movs	r3, #0
 8012014:	617b      	str	r3, [r7, #20]
 8012016:	4b2b      	ldr	r3, [pc, #172]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 8012018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801201a:	4a2a      	ldr	r2, [pc, #168]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 801201c:	f043 0301 	orr.w	r3, r3, #1
 8012020:	6313      	str	r3, [r2, #48]	; 0x30
 8012022:	4b28      	ldr	r3, [pc, #160]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 8012024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012026:	f003 0301 	and.w	r3, r3, #1
 801202a:	617b      	str	r3, [r7, #20]
 801202c:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 801202e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012034:	2302      	movs	r3, #2
 8012036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012038:	2303      	movs	r3, #3
 801203a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801203c:	2300      	movs	r3, #0
 801203e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012040:	2300      	movs	r3, #0
 8012042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8012044:	f107 031c 	add.w	r3, r7, #28
 8012048:	4619      	mov	r1, r3
 801204a:	481f      	ldr	r0, [pc, #124]	; (80120c8 <HAL_RCC_MCOConfig+0xc8>)
 801204c:	f7f8 fd76 	bl	800ab3c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8012050:	4b1c      	ldr	r3, [pc, #112]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8012058:	68b9      	ldr	r1, [r7, #8]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	430b      	orrs	r3, r1
 801205e:	4919      	ldr	r1, [pc, #100]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 8012060:	4313      	orrs	r3, r2
 8012062:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8012064:	e029      	b.n	80120ba <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8012066:	2300      	movs	r3, #0
 8012068:	61bb      	str	r3, [r7, #24]
 801206a:	4b16      	ldr	r3, [pc, #88]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 801206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801206e:	4a15      	ldr	r2, [pc, #84]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 8012070:	f043 0304 	orr.w	r3, r3, #4
 8012074:	6313      	str	r3, [r2, #48]	; 0x30
 8012076:	4b13      	ldr	r3, [pc, #76]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 8012078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801207a:	f003 0304 	and.w	r3, r3, #4
 801207e:	61bb      	str	r3, [r7, #24]
 8012080:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8012082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012088:	2302      	movs	r3, #2
 801208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801208c:	2303      	movs	r3, #3
 801208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012090:	2300      	movs	r3, #0
 8012092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012094:	2300      	movs	r3, #0
 8012096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8012098:	f107 031c 	add.w	r3, r7, #28
 801209c:	4619      	mov	r1, r3
 801209e:	480b      	ldr	r0, [pc, #44]	; (80120cc <HAL_RCC_MCOConfig+0xcc>)
 80120a0:	f7f8 fd4c 	bl	800ab3c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80120a4:	4b07      	ldr	r3, [pc, #28]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	00d9      	lsls	r1, r3, #3
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	430b      	orrs	r3, r1
 80120b4:	4903      	ldr	r1, [pc, #12]	; (80120c4 <HAL_RCC_MCOConfig+0xc4>)
 80120b6:	4313      	orrs	r3, r2
 80120b8:	608b      	str	r3, [r1, #8]
}
 80120ba:	bf00      	nop
 80120bc:	3730      	adds	r7, #48	; 0x30
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	40023800 	.word	0x40023800
 80120c8:	40020000 	.word	0x40020000
 80120cc:	40020800 	.word	0x40020800

080120d0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80120d0:	b480      	push	{r7}
 80120d2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80120d4:	4b03      	ldr	r3, [pc, #12]	; (80120e4 <HAL_RCC_EnableCSS+0x14>)
 80120d6:	2201      	movs	r2, #1
 80120d8:	601a      	str	r2, [r3, #0]
}
 80120da:	bf00      	nop
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr
 80120e4:	4247004c 	.word	0x4247004c

080120e8 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 80120e8:	b480      	push	{r7}
 80120ea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80120ec:	4b03      	ldr	r3, [pc, #12]	; (80120fc <HAL_RCC_DisableCSS+0x14>)
 80120ee:	2200      	movs	r2, #0
 80120f0:	601a      	str	r2, [r3, #0]
}
 80120f2:	bf00      	nop
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr
 80120fc:	4247004c 	.word	0x4247004c

08012100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012104:	b094      	sub	sp, #80	; 0x50
 8012106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012108:	2300      	movs	r3, #0
 801210a:	647b      	str	r3, [r7, #68]	; 0x44
 801210c:	2300      	movs	r3, #0
 801210e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012110:	2300      	movs	r3, #0
 8012112:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8012114:	2300      	movs	r3, #0
 8012116:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012118:	4b79      	ldr	r3, [pc, #484]	; (8012300 <HAL_RCC_GetSysClockFreq+0x200>)
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	f003 030c 	and.w	r3, r3, #12
 8012120:	2b08      	cmp	r3, #8
 8012122:	d00d      	beq.n	8012140 <HAL_RCC_GetSysClockFreq+0x40>
 8012124:	2b08      	cmp	r3, #8
 8012126:	f200 80e1 	bhi.w	80122ec <HAL_RCC_GetSysClockFreq+0x1ec>
 801212a:	2b00      	cmp	r3, #0
 801212c:	d002      	beq.n	8012134 <HAL_RCC_GetSysClockFreq+0x34>
 801212e:	2b04      	cmp	r3, #4
 8012130:	d003      	beq.n	801213a <HAL_RCC_GetSysClockFreq+0x3a>
 8012132:	e0db      	b.n	80122ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012134:	4b73      	ldr	r3, [pc, #460]	; (8012304 <HAL_RCC_GetSysClockFreq+0x204>)
 8012136:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8012138:	e0db      	b.n	80122f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801213a:	4b73      	ldr	r3, [pc, #460]	; (8012308 <HAL_RCC_GetSysClockFreq+0x208>)
 801213c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801213e:	e0d8      	b.n	80122f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012140:	4b6f      	ldr	r3, [pc, #444]	; (8012300 <HAL_RCC_GetSysClockFreq+0x200>)
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012148:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801214a:	4b6d      	ldr	r3, [pc, #436]	; (8012300 <HAL_RCC_GetSysClockFreq+0x200>)
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012152:	2b00      	cmp	r3, #0
 8012154:	d063      	beq.n	801221e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012156:	4b6a      	ldr	r3, [pc, #424]	; (8012300 <HAL_RCC_GetSysClockFreq+0x200>)
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	099b      	lsrs	r3, r3, #6
 801215c:	2200      	movs	r2, #0
 801215e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012168:	633b      	str	r3, [r7, #48]	; 0x30
 801216a:	2300      	movs	r3, #0
 801216c:	637b      	str	r3, [r7, #52]	; 0x34
 801216e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8012172:	4622      	mov	r2, r4
 8012174:	462b      	mov	r3, r5
 8012176:	f04f 0000 	mov.w	r0, #0
 801217a:	f04f 0100 	mov.w	r1, #0
 801217e:	0159      	lsls	r1, r3, #5
 8012180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012184:	0150      	lsls	r0, r2, #5
 8012186:	4602      	mov	r2, r0
 8012188:	460b      	mov	r3, r1
 801218a:	4621      	mov	r1, r4
 801218c:	1a51      	subs	r1, r2, r1
 801218e:	6139      	str	r1, [r7, #16]
 8012190:	4629      	mov	r1, r5
 8012192:	eb63 0301 	sbc.w	r3, r3, r1
 8012196:	617b      	str	r3, [r7, #20]
 8012198:	f04f 0200 	mov.w	r2, #0
 801219c:	f04f 0300 	mov.w	r3, #0
 80121a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80121a4:	4659      	mov	r1, fp
 80121a6:	018b      	lsls	r3, r1, #6
 80121a8:	4651      	mov	r1, sl
 80121aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80121ae:	4651      	mov	r1, sl
 80121b0:	018a      	lsls	r2, r1, #6
 80121b2:	4651      	mov	r1, sl
 80121b4:	ebb2 0801 	subs.w	r8, r2, r1
 80121b8:	4659      	mov	r1, fp
 80121ba:	eb63 0901 	sbc.w	r9, r3, r1
 80121be:	f04f 0200 	mov.w	r2, #0
 80121c2:	f04f 0300 	mov.w	r3, #0
 80121c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80121ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80121ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80121d2:	4690      	mov	r8, r2
 80121d4:	4699      	mov	r9, r3
 80121d6:	4623      	mov	r3, r4
 80121d8:	eb18 0303 	adds.w	r3, r8, r3
 80121dc:	60bb      	str	r3, [r7, #8]
 80121de:	462b      	mov	r3, r5
 80121e0:	eb49 0303 	adc.w	r3, r9, r3
 80121e4:	60fb      	str	r3, [r7, #12]
 80121e6:	f04f 0200 	mov.w	r2, #0
 80121ea:	f04f 0300 	mov.w	r3, #0
 80121ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80121f2:	4629      	mov	r1, r5
 80121f4:	024b      	lsls	r3, r1, #9
 80121f6:	4621      	mov	r1, r4
 80121f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80121fc:	4621      	mov	r1, r4
 80121fe:	024a      	lsls	r2, r1, #9
 8012200:	4610      	mov	r0, r2
 8012202:	4619      	mov	r1, r3
 8012204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012206:	2200      	movs	r2, #0
 8012208:	62bb      	str	r3, [r7, #40]	; 0x28
 801220a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801220c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012210:	f007 f998 	bl	8019544 <__aeabi_uldivmod>
 8012214:	4602      	mov	r2, r0
 8012216:	460b      	mov	r3, r1
 8012218:	4613      	mov	r3, r2
 801221a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801221c:	e058      	b.n	80122d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801221e:	4b38      	ldr	r3, [pc, #224]	; (8012300 <HAL_RCC_GetSysClockFreq+0x200>)
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	099b      	lsrs	r3, r3, #6
 8012224:	2200      	movs	r2, #0
 8012226:	4618      	mov	r0, r3
 8012228:	4611      	mov	r1, r2
 801222a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801222e:	623b      	str	r3, [r7, #32]
 8012230:	2300      	movs	r3, #0
 8012232:	627b      	str	r3, [r7, #36]	; 0x24
 8012234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012238:	4642      	mov	r2, r8
 801223a:	464b      	mov	r3, r9
 801223c:	f04f 0000 	mov.w	r0, #0
 8012240:	f04f 0100 	mov.w	r1, #0
 8012244:	0159      	lsls	r1, r3, #5
 8012246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801224a:	0150      	lsls	r0, r2, #5
 801224c:	4602      	mov	r2, r0
 801224e:	460b      	mov	r3, r1
 8012250:	4641      	mov	r1, r8
 8012252:	ebb2 0a01 	subs.w	sl, r2, r1
 8012256:	4649      	mov	r1, r9
 8012258:	eb63 0b01 	sbc.w	fp, r3, r1
 801225c:	f04f 0200 	mov.w	r2, #0
 8012260:	f04f 0300 	mov.w	r3, #0
 8012264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801226c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012270:	ebb2 040a 	subs.w	r4, r2, sl
 8012274:	eb63 050b 	sbc.w	r5, r3, fp
 8012278:	f04f 0200 	mov.w	r2, #0
 801227c:	f04f 0300 	mov.w	r3, #0
 8012280:	00eb      	lsls	r3, r5, #3
 8012282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012286:	00e2      	lsls	r2, r4, #3
 8012288:	4614      	mov	r4, r2
 801228a:	461d      	mov	r5, r3
 801228c:	4643      	mov	r3, r8
 801228e:	18e3      	adds	r3, r4, r3
 8012290:	603b      	str	r3, [r7, #0]
 8012292:	464b      	mov	r3, r9
 8012294:	eb45 0303 	adc.w	r3, r5, r3
 8012298:	607b      	str	r3, [r7, #4]
 801229a:	f04f 0200 	mov.w	r2, #0
 801229e:	f04f 0300 	mov.w	r3, #0
 80122a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80122a6:	4629      	mov	r1, r5
 80122a8:	028b      	lsls	r3, r1, #10
 80122aa:	4621      	mov	r1, r4
 80122ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80122b0:	4621      	mov	r1, r4
 80122b2:	028a      	lsls	r2, r1, #10
 80122b4:	4610      	mov	r0, r2
 80122b6:	4619      	mov	r1, r3
 80122b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ba:	2200      	movs	r2, #0
 80122bc:	61bb      	str	r3, [r7, #24]
 80122be:	61fa      	str	r2, [r7, #28]
 80122c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80122c4:	f007 f93e 	bl	8019544 <__aeabi_uldivmod>
 80122c8:	4602      	mov	r2, r0
 80122ca:	460b      	mov	r3, r1
 80122cc:	4613      	mov	r3, r2
 80122ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80122d0:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <HAL_RCC_GetSysClockFreq+0x200>)
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	0c1b      	lsrs	r3, r3, #16
 80122d6:	f003 0303 	and.w	r3, r3, #3
 80122da:	3301      	adds	r3, #1
 80122dc:	005b      	lsls	r3, r3, #1
 80122de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80122e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80122e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80122ea:	e002      	b.n	80122f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80122ec:	4b05      	ldr	r3, [pc, #20]	; (8012304 <HAL_RCC_GetSysClockFreq+0x204>)
 80122ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80122f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80122f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3750      	adds	r7, #80	; 0x50
 80122f8:	46bd      	mov	sp, r7
 80122fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122fe:	bf00      	nop
 8012300:	40023800 	.word	0x40023800
 8012304:	00f42400 	.word	0x00f42400
 8012308:	007a1200 	.word	0x007a1200

0801230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801230c:	b480      	push	{r7}
 801230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012310:	4b03      	ldr	r3, [pc, #12]	; (8012320 <HAL_RCC_GetHCLKFreq+0x14>)
 8012312:	681b      	ldr	r3, [r3, #0]
}
 8012314:	4618      	mov	r0, r3
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	20000058 	.word	0x20000058

08012324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012328:	f7ff fff0 	bl	801230c <HAL_RCC_GetHCLKFreq>
 801232c:	4602      	mov	r2, r0
 801232e:	4b05      	ldr	r3, [pc, #20]	; (8012344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	0a9b      	lsrs	r3, r3, #10
 8012334:	f003 0307 	and.w	r3, r3, #7
 8012338:	4903      	ldr	r1, [pc, #12]	; (8012348 <HAL_RCC_GetPCLK1Freq+0x24>)
 801233a:	5ccb      	ldrb	r3, [r1, r3]
 801233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012340:	4618      	mov	r0, r3
 8012342:	bd80      	pop	{r7, pc}
 8012344:	40023800 	.word	0x40023800
 8012348:	08051f58 	.word	0x08051f58

0801234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012350:	f7ff ffdc 	bl	801230c <HAL_RCC_GetHCLKFreq>
 8012354:	4602      	mov	r2, r0
 8012356:	4b05      	ldr	r3, [pc, #20]	; (801236c <HAL_RCC_GetPCLK2Freq+0x20>)
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	0b5b      	lsrs	r3, r3, #13
 801235c:	f003 0307 	and.w	r3, r3, #7
 8012360:	4903      	ldr	r1, [pc, #12]	; (8012370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012362:	5ccb      	ldrb	r3, [r1, r3]
 8012364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012368:	4618      	mov	r0, r3
 801236a:	bd80      	pop	{r7, pc}
 801236c:	40023800 	.word	0x40023800
 8012370:	08051f58 	.word	0x08051f58

08012374 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012374:	b480      	push	{r7}
 8012376:	b083      	sub	sp, #12
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	220f      	movs	r2, #15
 8012380:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8012382:	4b45      	ldr	r3, [pc, #276]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801238a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801238e:	d104      	bne.n	801239a <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8012396:	605a      	str	r2, [r3, #4]
 8012398:	e00e      	b.n	80123b8 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 801239a:	4b3f      	ldr	r3, [pc, #252]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80123a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123a6:	d104      	bne.n	80123b2 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80123ae:	605a      	str	r2, [r3, #4]
 80123b0:	e002      	b.n	80123b8 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2200      	movs	r2, #0
 80123b6:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80123b8:	4b37      	ldr	r3, [pc, #220]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f003 0301 	and.w	r3, r3, #1
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d103      	bne.n	80123cc <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2201      	movs	r2, #1
 80123c8:	60da      	str	r2, [r3, #12]
 80123ca:	e002      	b.n	80123d2 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2200      	movs	r2, #0
 80123d0:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80123d2:	4b31      	ldr	r3, [pc, #196]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	08db      	lsrs	r3, r3, #3
 80123d8:	f003 021f 	and.w	r2, r3, #31
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80123e0:	4b2d      	ldr	r3, [pc, #180]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 80123e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123e4:	f003 0304 	and.w	r3, r3, #4
 80123e8:	2b04      	cmp	r3, #4
 80123ea:	d103      	bne.n	80123f4 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2205      	movs	r2, #5
 80123f0:	609a      	str	r2, [r3, #8]
 80123f2:	e00c      	b.n	801240e <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80123f4:	4b28      	ldr	r3, [pc, #160]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 80123f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f8:	f003 0301 	and.w	r3, r3, #1
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d103      	bne.n	8012408 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2201      	movs	r2, #1
 8012404:	609a      	str	r2, [r3, #8]
 8012406:	e002      	b.n	801240e <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2200      	movs	r2, #0
 801240c:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 801240e:	4b22      	ldr	r3, [pc, #136]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 8012410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012412:	f003 0301 	and.w	r3, r3, #1
 8012416:	2b01      	cmp	r3, #1
 8012418:	d103      	bne.n	8012422 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2201      	movs	r2, #1
 801241e:	615a      	str	r2, [r3, #20]
 8012420:	e002      	b.n	8012428 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2200      	movs	r2, #0
 8012426:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8012428:	4b1b      	ldr	r3, [pc, #108]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012434:	d103      	bne.n	801243e <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2202      	movs	r2, #2
 801243a:	619a      	str	r2, [r3, #24]
 801243c:	e002      	b.n	8012444 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2201      	movs	r2, #1
 8012442:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012444:	4b14      	ldr	r3, [pc, #80]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8012450:	4b11      	ldr	r3, [pc, #68]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801245c:	4b0e      	ldr	r3, [pc, #56]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	099b      	lsrs	r3, r3, #6
 8012462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 801246a:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012472:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8012476:	005b      	lsls	r3, r3, #1
 8012478:	0c1a      	lsrs	r2, r3, #16
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 801247e:	4b06      	ldr	r3, [pc, #24]	; (8012498 <HAL_RCC_GetOscConfig+0x124>)
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	0e1b      	lsrs	r3, r3, #24
 8012484:	f003 020f 	and.w	r2, r3, #15
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801248c:	bf00      	nop
 801248e:	370c      	adds	r7, #12
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr
 8012498:	40023800 	.word	0x40023800

0801249c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801249c:	b480      	push	{r7}
 801249e:	b083      	sub	sp, #12
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	220f      	movs	r2, #15
 80124aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80124ac:	4b12      	ldr	r3, [pc, #72]	; (80124f8 <HAL_RCC_GetClockConfig+0x5c>)
 80124ae:	689b      	ldr	r3, [r3, #8]
 80124b0:	f003 0203 	and.w	r2, r3, #3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80124b8:	4b0f      	ldr	r3, [pc, #60]	; (80124f8 <HAL_RCC_GetClockConfig+0x5c>)
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80124c4:	4b0c      	ldr	r3, [pc, #48]	; (80124f8 <HAL_RCC_GetClockConfig+0x5c>)
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80124d0:	4b09      	ldr	r3, [pc, #36]	; (80124f8 <HAL_RCC_GetClockConfig+0x5c>)
 80124d2:	689b      	ldr	r3, [r3, #8]
 80124d4:	08db      	lsrs	r3, r3, #3
 80124d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80124de:	4b07      	ldr	r3, [pc, #28]	; (80124fc <HAL_RCC_GetClockConfig+0x60>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f003 0207 	and.w	r2, r3, #7
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	601a      	str	r2, [r3, #0]
}
 80124ea:	bf00      	nop
 80124ec:	370c      	adds	r7, #12
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr
 80124f6:	bf00      	nop
 80124f8:	40023800 	.word	0x40023800
 80124fc:	40023c00 	.word	0x40023c00

08012500 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8012504:	4b06      	ldr	r3, [pc, #24]	; (8012520 <HAL_RCC_NMI_IRQHandler+0x20>)
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801250c:	2b80      	cmp	r3, #128	; 0x80
 801250e:	d104      	bne.n	801251a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8012510:	f000 f80a 	bl	8012528 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8012514:	4b03      	ldr	r3, [pc, #12]	; (8012524 <HAL_RCC_NMI_IRQHandler+0x24>)
 8012516:	2280      	movs	r2, #128	; 0x80
 8012518:	701a      	strb	r2, [r3, #0]
  }
}
 801251a:	bf00      	nop
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	40023800 	.word	0x40023800
 8012524:	4002380e 	.word	0x4002380e

08012528 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8012528:	b480      	push	{r7}
 801252a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 801252c:	bf00      	nop
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012536:	b580      	push	{r7, lr}
 8012538:	b086      	sub	sp, #24
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801253e:	2300      	movs	r3, #0
 8012540:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8012542:	2300      	movs	r3, #0
 8012544:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	f003 0301 	and.w	r3, r3, #1
 801254e:	2b00      	cmp	r3, #0
 8012550:	d105      	bne.n	801255e <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801255a:	2b00      	cmp	r3, #0
 801255c:	d035      	beq.n	80125ca <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801255e:	4b62      	ldr	r3, [pc, #392]	; (80126e8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012560:	2200      	movs	r2, #0
 8012562:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012564:	f7f4 f982 	bl	800686c <HAL_GetTick>
 8012568:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801256a:	e008      	b.n	801257e <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801256c:	f7f4 f97e 	bl	800686c <HAL_GetTick>
 8012570:	4602      	mov	r2, r0
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	1ad3      	subs	r3, r2, r3
 8012576:	2b02      	cmp	r3, #2
 8012578:	d901      	bls.n	801257e <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801257a:	2303      	movs	r3, #3
 801257c:	e0b0      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801257e:	4b5b      	ldr	r3, [pc, #364]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012586:	2b00      	cmp	r3, #0
 8012588:	d1f0      	bne.n	801256c <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	019a      	lsls	r2, r3, #6
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	689b      	ldr	r3, [r3, #8]
 8012594:	071b      	lsls	r3, r3, #28
 8012596:	4955      	ldr	r1, [pc, #340]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012598:	4313      	orrs	r3, r2
 801259a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801259e:	4b52      	ldr	r3, [pc, #328]	; (80126e8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 80125a0:	2201      	movs	r2, #1
 80125a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80125a4:	f7f4 f962 	bl	800686c <HAL_GetTick>
 80125a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80125aa:	e008      	b.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80125ac:	f7f4 f95e 	bl	800686c <HAL_GetTick>
 80125b0:	4602      	mov	r2, r0
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	1ad3      	subs	r3, r2, r3
 80125b6:	2b02      	cmp	r3, #2
 80125b8:	d901      	bls.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80125ba:	2303      	movs	r3, #3
 80125bc:	e090      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80125be:	4b4b      	ldr	r3, [pc, #300]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d0f0      	beq.n	80125ac <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f003 0302 	and.w	r3, r3, #2
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	f000 8083 	beq.w	80126de <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80125d8:	2300      	movs	r3, #0
 80125da:	60fb      	str	r3, [r7, #12]
 80125dc:	4b43      	ldr	r3, [pc, #268]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125e0:	4a42      	ldr	r2, [pc, #264]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125e6:	6413      	str	r3, [r2, #64]	; 0x40
 80125e8:	4b40      	ldr	r3, [pc, #256]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80125ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80125f0:	60fb      	str	r3, [r7, #12]
 80125f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80125f4:	4b3e      	ldr	r3, [pc, #248]	; (80126f0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4a3d      	ldr	r2, [pc, #244]	; (80126f0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80125fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80125fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012600:	f7f4 f934 	bl	800686c <HAL_GetTick>
 8012604:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012606:	e008      	b.n	801261a <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012608:	f7f4 f930 	bl	800686c <HAL_GetTick>
 801260c:	4602      	mov	r2, r0
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	2b02      	cmp	r3, #2
 8012614:	d901      	bls.n	801261a <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8012616:	2303      	movs	r3, #3
 8012618:	e062      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801261a:	4b35      	ldr	r3, [pc, #212]	; (80126f0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012622:	2b00      	cmp	r3, #0
 8012624:	d0f0      	beq.n	8012608 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012626:	4b31      	ldr	r3, [pc, #196]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801262e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d02f      	beq.n	8012696 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	68db      	ldr	r3, [r3, #12]
 801263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801263e:	693a      	ldr	r2, [r7, #16]
 8012640:	429a      	cmp	r2, r3
 8012642:	d028      	beq.n	8012696 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012644:	4b29      	ldr	r3, [pc, #164]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801264c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801264e:	4b29      	ldr	r3, [pc, #164]	; (80126f4 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012650:	2201      	movs	r2, #1
 8012652:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012654:	4b27      	ldr	r3, [pc, #156]	; (80126f4 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012656:	2200      	movs	r2, #0
 8012658:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801265a:	4a24      	ldr	r2, [pc, #144]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012660:	4b22      	ldr	r3, [pc, #136]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012664:	f003 0301 	and.w	r3, r3, #1
 8012668:	2b01      	cmp	r3, #1
 801266a:	d114      	bne.n	8012696 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801266c:	f7f4 f8fe 	bl	800686c <HAL_GetTick>
 8012670:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012672:	e00a      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012674:	f7f4 f8fa 	bl	800686c <HAL_GetTick>
 8012678:	4602      	mov	r2, r0
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	1ad3      	subs	r3, r2, r3
 801267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012682:	4293      	cmp	r3, r2
 8012684:	d901      	bls.n	801268a <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8012686:	2303      	movs	r3, #3
 8012688:	e02a      	b.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801268a:	4b18      	ldr	r3, [pc, #96]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801268e:	f003 0302 	and.w	r3, r3, #2
 8012692:	2b00      	cmp	r3, #0
 8012694:	d0ee      	beq.n	8012674 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	68db      	ldr	r3, [r3, #12]
 801269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801269e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126a2:	d10d      	bne.n	80126c0 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80126a4:	4b11      	ldr	r3, [pc, #68]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80126b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80126b8:	490c      	ldr	r1, [pc, #48]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126ba:	4313      	orrs	r3, r2
 80126bc:	608b      	str	r3, [r1, #8]
 80126be:	e005      	b.n	80126cc <HAL_RCCEx_PeriphCLKConfig+0x196>
 80126c0:	4b0a      	ldr	r3, [pc, #40]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126c2:	689b      	ldr	r3, [r3, #8]
 80126c4:	4a09      	ldr	r2, [pc, #36]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80126ca:	6093      	str	r3, [r2, #8]
 80126cc:	4b07      	ldr	r3, [pc, #28]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	68db      	ldr	r3, [r3, #12]
 80126d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80126d8:	4904      	ldr	r1, [pc, #16]	; (80126ec <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80126da:	4313      	orrs	r3, r2
 80126dc:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3718      	adds	r7, #24
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	42470068 	.word	0x42470068
 80126ec:	40023800 	.word	0x40023800
 80126f0:	40007000 	.word	0x40007000
 80126f4:	42470e40 	.word	0x42470e40

080126f8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b085      	sub	sp, #20
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2203      	movs	r2, #3
 8012704:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8012706:	4b11      	ldr	r3, [pc, #68]	; (801274c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801270c:	099b      	lsrs	r3, r3, #6
 801270e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8012716:	4b0d      	ldr	r3, [pc, #52]	; (801274c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801271c:	0f1b      	lsrs	r3, r3, #28
 801271e:	f003 0207 	and.w	r2, r3, #7
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8012726:	4b09      	ldr	r3, [pc, #36]	; (801274c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012728:	689b      	ldr	r3, [r3, #8]
 801272a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801272e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8012730:	4b06      	ldr	r3, [pc, #24]	; (801274c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012734:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	431a      	orrs	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012740:	bf00      	nop
 8012742:	3714      	adds	r7, #20
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr
 801274c:	40023800 	.word	0x40023800

08012750 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012750:	b480      	push	{r7}
 8012752:	b087      	sub	sp, #28
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012758:	2300      	movs	r3, #0
 801275a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 801275c:	2300      	movs	r3, #0
 801275e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012760:	2300      	movs	r3, #0
 8012762:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012764:	2300      	movs	r3, #0
 8012766:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b01      	cmp	r3, #1
 801276c:	d13e      	bne.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 801276e:	4b23      	ldr	r3, [pc, #140]	; (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012776:	60fb      	str	r3, [r7, #12]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d005      	beq.n	801278a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d12f      	bne.n	80127e4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012784:	4b1e      	ldr	r3, [pc, #120]	; (8012800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012786:	617b      	str	r3, [r7, #20]
          break;
 8012788:	e02f      	b.n	80127ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801278a:	4b1c      	ldr	r3, [pc, #112]	; (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012796:	d108      	bne.n	80127aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012798:	4b18      	ldr	r3, [pc, #96]	; (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127a0:	4a18      	ldr	r2, [pc, #96]	; (8012804 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80127a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80127a6:	613b      	str	r3, [r7, #16]
 80127a8:	e007      	b.n	80127ba <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80127aa:	4b14      	ldr	r3, [pc, #80]	; (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127b2:	4a15      	ldr	r2, [pc, #84]	; (8012808 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80127b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80127b8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80127ba:	4b10      	ldr	r3, [pc, #64]	; (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80127bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127c0:	099b      	lsrs	r3, r3, #6
 80127c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	fb02 f303 	mul.w	r3, r2, r3
 80127cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80127ce:	4b0b      	ldr	r3, [pc, #44]	; (80127fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80127d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127d4:	0f1b      	lsrs	r3, r3, #28
 80127d6:	f003 0307 	and.w	r3, r3, #7
 80127da:	68ba      	ldr	r2, [r7, #8]
 80127dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80127e0:	617b      	str	r3, [r7, #20]
          break;
 80127e2:	e002      	b.n	80127ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80127e4:	2300      	movs	r3, #0
 80127e6:	617b      	str	r3, [r7, #20]
          break;
 80127e8:	bf00      	nop
        }
      }
      break;
 80127ea:	bf00      	nop
    }
  }
  return frequency;
 80127ec:	697b      	ldr	r3, [r7, #20]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	371c      	adds	r7, #28
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	40023800 	.word	0x40023800
 8012800:	00bb8000 	.word	0x00bb8000
 8012804:	007a1200 	.word	0x007a1200
 8012808:	00f42400 	.word	0x00f42400

0801280c <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012814:	4b1d      	ldr	r3, [pc, #116]	; (801288c <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012816:	2200      	movs	r2, #0
 8012818:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 801281a:	f7f4 f827 	bl	800686c <HAL_GetTick>
 801281e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012820:	e008      	b.n	8012834 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012822:	f7f4 f823 	bl	800686c <HAL_GetTick>
 8012826:	4602      	mov	r2, r0
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	1ad3      	subs	r3, r2, r3
 801282c:	2b02      	cmp	r3, #2
 801282e:	d901      	bls.n	8012834 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012830:	2303      	movs	r3, #3
 8012832:	e026      	b.n	8012882 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012834:	4b16      	ldr	r3, [pc, #88]	; (8012890 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801283c:	2b00      	cmp	r3, #0
 801283e:	d1f0      	bne.n	8012822 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	019a      	lsls	r2, r3, #6
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	071b      	lsls	r3, r3, #28
 801284c:	4910      	ldr	r1, [pc, #64]	; (8012890 <HAL_RCCEx_EnablePLLI2S+0x84>)
 801284e:	4313      	orrs	r3, r2
 8012850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8012854:	4b0d      	ldr	r3, [pc, #52]	; (801288c <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012856:	2201      	movs	r2, #1
 8012858:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 801285a:	f7f4 f807 	bl	800686c <HAL_GetTick>
 801285e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012860:	e008      	b.n	8012874 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012862:	f7f4 f803 	bl	800686c <HAL_GetTick>
 8012866:	4602      	mov	r2, r0
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	1ad3      	subs	r3, r2, r3
 801286c:	2b02      	cmp	r3, #2
 801286e:	d901      	bls.n	8012874 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012870:	2303      	movs	r3, #3
 8012872:	e006      	b.n	8012882 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012874:	4b06      	ldr	r3, [pc, #24]	; (8012890 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801287c:	2b00      	cmp	r3, #0
 801287e:	d0f0      	beq.n	8012862 <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	42470068 	.word	0x42470068
 8012890:	40023800 	.word	0x40023800

08012894 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 801289a:	4b0d      	ldr	r3, [pc, #52]	; (80128d0 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 801289c:	2200      	movs	r2, #0
 801289e:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 80128a0:	f7f3 ffe4 	bl	800686c <HAL_GetTick>
 80128a4:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80128a6:	e008      	b.n	80128ba <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80128a8:	f7f3 ffe0 	bl	800686c <HAL_GetTick>
 80128ac:	4602      	mov	r2, r0
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d901      	bls.n	80128ba <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80128b6:	2303      	movs	r3, #3
 80128b8:	e006      	b.n	80128c8 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80128ba:	4b06      	ldr	r3, [pc, #24]	; (80128d4 <HAL_RCCEx_DisablePLLI2S+0x40>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1f0      	bne.n	80128a8 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	42470068 	.word	0x42470068
 80128d4:	40023800 	.word	0x40023800

080128d8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80128de:	f7f3 ffc5 	bl	800686c <HAL_GetTick>
 80128e2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80128e4:	4b5d      	ldr	r3, [pc, #372]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	4a5c      	ldr	r2, [pc, #368]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80128ea:	f043 0301 	orr.w	r3, r3, #1
 80128ee:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80128f0:	e008      	b.n	8012904 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80128f2:	f7f3 ffbb 	bl	800686c <HAL_GetTick>
 80128f6:	4602      	mov	r2, r0
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	1ad3      	subs	r3, r2, r3
 80128fc:	2b02      	cmp	r3, #2
 80128fe:	d901      	bls.n	8012904 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8012900:	2303      	movs	r3, #3
 8012902:	e0a7      	b.n	8012a54 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012904:	4b55      	ldr	r3, [pc, #340]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f003 0302 	and.w	r3, r3, #2
 801290c:	2b00      	cmp	r3, #0
 801290e:	d0f0      	beq.n	80128f2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8012910:	4b52      	ldr	r3, [pc, #328]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	4a51      	ldr	r2, [pc, #324]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801291a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801291c:	f7f3 ffa6 	bl	800686c <HAL_GetTick>
 8012920:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8012922:	4b4e      	ldr	r3, [pc, #312]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012924:	2200      	movs	r2, #0
 8012926:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012928:	e00a      	b.n	8012940 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801292a:	f7f3 ff9f 	bl	800686c <HAL_GetTick>
 801292e:	4602      	mov	r2, r0
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	1ad3      	subs	r3, r2, r3
 8012934:	f241 3288 	movw	r2, #5000	; 0x1388
 8012938:	4293      	cmp	r3, r2
 801293a:	d901      	bls.n	8012940 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 801293c:	2303      	movs	r3, #3
 801293e:	e089      	b.n	8012a54 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012940:	4b46      	ldr	r3, [pc, #280]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012942:	689b      	ldr	r3, [r3, #8]
 8012944:	f003 030c 	and.w	r3, r3, #12
 8012948:	2b00      	cmp	r3, #0
 801294a:	d1ee      	bne.n	801292a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801294c:	f7f3 ff8e 	bl	800686c <HAL_GetTick>
 8012950:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8012952:	4b42      	ldr	r3, [pc, #264]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a41      	ldr	r2, [pc, #260]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012958:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 801295c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801295e:	e008      	b.n	8012972 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012960:	f7f3 ff84 	bl	800686c <HAL_GetTick>
 8012964:	4602      	mov	r2, r0
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	2b64      	cmp	r3, #100	; 0x64
 801296c:	d901      	bls.n	8012972 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 801296e:	2303      	movs	r3, #3
 8012970:	e070      	b.n	8012a54 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012972:	4b3a      	ldr	r3, [pc, #232]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801297a:	2b00      	cmp	r3, #0
 801297c:	d1f0      	bne.n	8012960 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801297e:	f7f3 ff75 	bl	800686c <HAL_GetTick>
 8012982:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8012984:	4b35      	ldr	r3, [pc, #212]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4a34      	ldr	r2, [pc, #208]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 801298a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801298e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012990:	e008      	b.n	80129a4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012992:	f7f3 ff6b 	bl	800686c <HAL_GetTick>
 8012996:	4602      	mov	r2, r0
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	1ad3      	subs	r3, r2, r3
 801299c:	2b02      	cmp	r3, #2
 801299e:	d901      	bls.n	80129a4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80129a0:	2303      	movs	r3, #3
 80129a2:	e057      	b.n	8012a54 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80129a4:	4b2d      	ldr	r3, [pc, #180]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1f0      	bne.n	8012992 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80129b0:	f7f3 ff5c 	bl	800686c <HAL_GetTick>
 80129b4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80129b6:	4b29      	ldr	r3, [pc, #164]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a28      	ldr	r2, [pc, #160]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80129c0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80129c2:	e008      	b.n	80129d6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80129c4:	f7f3 ff52 	bl	800686c <HAL_GetTick>
 80129c8:	4602      	mov	r2, r0
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	1ad3      	subs	r3, r2, r3
 80129ce:	2b02      	cmp	r3, #2
 80129d0:	d901      	bls.n	80129d6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80129d2:	2303      	movs	r3, #3
 80129d4:	e03e      	b.n	8012a54 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80129d6:	4b21      	ldr	r3, [pc, #132]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d1f0      	bne.n	80129c4 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80129e2:	4b1e      	ldr	r3, [pc, #120]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129e4:	4a1e      	ldr	r2, [pc, #120]	; (8012a60 <HAL_RCC_DeInit+0x188>)
 80129e6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80129e8:	4b1c      	ldr	r3, [pc, #112]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129ea:	4a1e      	ldr	r2, [pc, #120]	; (8012a64 <HAL_RCC_DeInit+0x18c>)
 80129ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80129f0:	4b1a      	ldr	r3, [pc, #104]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	4a19      	ldr	r2, [pc, #100]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129f6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80129fa:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80129fc:	4b17      	ldr	r3, [pc, #92]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	4a16      	ldr	r2, [pc, #88]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012a06:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8012a08:	4b14      	ldr	r3, [pc, #80]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	4a13      	ldr	r2, [pc, #76]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a0e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8012a12:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8012a14:	4b11      	ldr	r3, [pc, #68]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	4a10      	ldr	r2, [pc, #64]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012a1e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8012a20:	4b0e      	ldr	r3, [pc, #56]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a24:	4a0d      	ldr	r2, [pc, #52]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a26:	f023 0301 	bic.w	r3, r3, #1
 8012a2a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8012a2c:	4b0b      	ldr	r3, [pc, #44]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a30:	4a0a      	ldr	r2, [pc, #40]	; (8012a5c <HAL_RCC_DeInit+0x184>)
 8012a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a36:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8012a38:	4b0b      	ldr	r3, [pc, #44]	; (8012a68 <HAL_RCC_DeInit+0x190>)
 8012a3a:	4a0c      	ldr	r2, [pc, #48]	; (8012a6c <HAL_RCC_DeInit+0x194>)
 8012a3c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8012a3e:	4b0c      	ldr	r3, [pc, #48]	; (8012a70 <HAL_RCC_DeInit+0x198>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7f3 fecd 	bl	80067e2 <HAL_InitTick>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d001      	beq.n	8012a52 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8012a4e:	2301      	movs	r3, #1
 8012a50:	e000      	b.n	8012a54 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8012a52:	2300      	movs	r3, #0
  }
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	40023800 	.word	0x40023800
 8012a60:	04003010 	.word	0x04003010
 8012a64:	20003000 	.word	0x20003000
 8012a68:	20000058 	.word	0x20000058
 8012a6c:	00f42400 	.word	0x00f42400
 8012a70:	2000005c 	.word	0x2000005c

08012a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d101      	bne.n	8012a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e07b      	b.n	8012b7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d108      	bne.n	8012aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012a96:	d009      	beq.n	8012aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	61da      	str	r2, [r3, #28]
 8012a9e:	e005      	b.n	8012aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d106      	bne.n	8012acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7f2 ffb2 	bl	8005a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2202      	movs	r2, #2
 8012ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	689b      	ldr	r3, [r3, #8]
 8012af0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012af4:	431a      	orrs	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012afe:	431a      	orrs	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	691b      	ldr	r3, [r3, #16]
 8012b04:	f003 0302 	and.w	r3, r3, #2
 8012b08:	431a      	orrs	r2, r3
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	695b      	ldr	r3, [r3, #20]
 8012b0e:	f003 0301 	and.w	r3, r3, #1
 8012b12:	431a      	orrs	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	699b      	ldr	r3, [r3, #24]
 8012b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b1c:	431a      	orrs	r2, r3
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	69db      	ldr	r3, [r3, #28]
 8012b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012b26:	431a      	orrs	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6a1b      	ldr	r3, [r3, #32]
 8012b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b30:	ea42 0103 	orr.w	r1, r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	430a      	orrs	r2, r1
 8012b42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	699b      	ldr	r3, [r3, #24]
 8012b48:	0c1b      	lsrs	r3, r3, #16
 8012b4a:	f003 0104 	and.w	r1, r3, #4
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b52:	f003 0210 	and.w	r2, r3, #16
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	430a      	orrs	r2, r1
 8012b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	69da      	ldr	r2, [r3, #28]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2200      	movs	r2, #0
 8012b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2201      	movs	r2, #1
 8012b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012b7c:	2300      	movs	r3, #0
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3708      	adds	r7, #8
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}

08012b86 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012b86:	b580      	push	{r7, lr}
 8012b88:	b082      	sub	sp, #8
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012b94:	2301      	movs	r3, #1
 8012b96:	e01a      	b.n	8012bce <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2202      	movs	r2, #2
 8012b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012bae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7f3 f875 	bl	8005ca0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012bcc:	2300      	movs	r3, #0
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b088      	sub	sp, #32
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	60f8      	str	r0, [r7, #12]
 8012bde:	60b9      	str	r1, [r7, #8]
 8012be0:	603b      	str	r3, [r7, #0]
 8012be2:	4613      	mov	r3, r2
 8012be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012be6:	2300      	movs	r3, #0
 8012be8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	d101      	bne.n	8012bf8 <HAL_SPI_Transmit+0x22>
 8012bf4:	2302      	movs	r3, #2
 8012bf6:	e126      	b.n	8012e46 <HAL_SPI_Transmit+0x270>
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2201      	movs	r2, #1
 8012bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012c00:	f7f3 fe34 	bl	800686c <HAL_GetTick>
 8012c04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012c06:	88fb      	ldrh	r3, [r7, #6]
 8012c08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d002      	beq.n	8012c1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012c16:	2302      	movs	r3, #2
 8012c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012c1a:	e10b      	b.n	8012e34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d002      	beq.n	8012c28 <HAL_SPI_Transmit+0x52>
 8012c22:	88fb      	ldrh	r3, [r7, #6]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d102      	bne.n	8012c2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012c2c:	e102      	b.n	8012e34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2203      	movs	r2, #3
 8012c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	88fa      	ldrh	r2, [r7, #6]
 8012c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	88fa      	ldrh	r2, [r7, #6]
 8012c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2200      	movs	r2, #0
 8012c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2200      	movs	r2, #0
 8012c64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c74:	d10f      	bne.n	8012c96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ca0:	2b40      	cmp	r3, #64	; 0x40
 8012ca2:	d007      	beq.n	8012cb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012cbc:	d14b      	bne.n	8012d56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d002      	beq.n	8012ccc <HAL_SPI_Transmit+0xf6>
 8012cc6:	8afb      	ldrh	r3, [r7, #22]
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d13e      	bne.n	8012d4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd0:	881a      	ldrh	r2, [r3, #0]
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cdc:	1c9a      	adds	r2, r3, #2
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012cf0:	e02b      	b.n	8012d4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	f003 0302 	and.w	r3, r3, #2
 8012cfc:	2b02      	cmp	r3, #2
 8012cfe:	d112      	bne.n	8012d26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d04:	881a      	ldrh	r2, [r3, #0]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d10:	1c9a      	adds	r2, r3, #2
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	3b01      	subs	r3, #1
 8012d1e:	b29a      	uxth	r2, r3
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8012d24:	e011      	b.n	8012d4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012d26:	f7f3 fda1 	bl	800686c <HAL_GetTick>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	1ad3      	subs	r3, r2, r3
 8012d30:	683a      	ldr	r2, [r7, #0]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d803      	bhi.n	8012d3e <HAL_SPI_Transmit+0x168>
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d3c:	d102      	bne.n	8012d44 <HAL_SPI_Transmit+0x16e>
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d102      	bne.n	8012d4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8012d44:	2303      	movs	r3, #3
 8012d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012d48:	e074      	b.n	8012e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d1ce      	bne.n	8012cf2 <HAL_SPI_Transmit+0x11c>
 8012d54:	e04c      	b.n	8012df0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	685b      	ldr	r3, [r3, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d002      	beq.n	8012d64 <HAL_SPI_Transmit+0x18e>
 8012d5e:	8afb      	ldrh	r3, [r7, #22]
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d140      	bne.n	8012de6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	330c      	adds	r3, #12
 8012d6e:	7812      	ldrb	r2, [r2, #0]
 8012d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	3b01      	subs	r3, #1
 8012d84:	b29a      	uxth	r2, r3
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012d8a:	e02c      	b.n	8012de6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	f003 0302 	and.w	r3, r3, #2
 8012d96:	2b02      	cmp	r3, #2
 8012d98:	d113      	bne.n	8012dc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	330c      	adds	r3, #12
 8012da4:	7812      	ldrb	r2, [r2, #0]
 8012da6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dac:	1c5a      	adds	r2, r3, #1
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	3b01      	subs	r3, #1
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8012dc0:	e011      	b.n	8012de6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012dc2:	f7f3 fd53 	bl	800686c <HAL_GetTick>
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	683a      	ldr	r2, [r7, #0]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d803      	bhi.n	8012dda <HAL_SPI_Transmit+0x204>
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd8:	d102      	bne.n	8012de0 <HAL_SPI_Transmit+0x20a>
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d102      	bne.n	8012de6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8012de0:	2303      	movs	r3, #3
 8012de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012de4:	e026      	b.n	8012e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1cd      	bne.n	8012d8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012df0:	69ba      	ldr	r2, [r7, #24]
 8012df2:	6839      	ldr	r1, [r7, #0]
 8012df4:	68f8      	ldr	r0, [r7, #12]
 8012df6:	f001 ff3e 	bl	8014c76 <SPI_EndRxTxTransaction>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d002      	beq.n	8012e06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2220      	movs	r2, #32
 8012e04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	689b      	ldr	r3, [r3, #8]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d10a      	bne.n	8012e24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012e0e:	2300      	movs	r3, #0
 8012e10:	613b      	str	r3, [r7, #16]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	613b      	str	r3, [r7, #16]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	689b      	ldr	r3, [r3, #8]
 8012e20:	613b      	str	r3, [r7, #16]
 8012e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d002      	beq.n	8012e32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	77fb      	strb	r3, [r7, #31]
 8012e30:	e000      	b.n	8012e34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8012e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2201      	movs	r2, #1
 8012e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3720      	adds	r7, #32
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b088      	sub	sp, #32
 8012e52:	af02      	add	r7, sp, #8
 8012e54:	60f8      	str	r0, [r7, #12]
 8012e56:	60b9      	str	r1, [r7, #8]
 8012e58:	603b      	str	r3, [r7, #0]
 8012e5a:	4613      	mov	r3, r2
 8012e5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	685b      	ldr	r3, [r3, #4]
 8012e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e6a:	d112      	bne.n	8012e92 <HAL_SPI_Receive+0x44>
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d10e      	bne.n	8012e92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2204      	movs	r2, #4
 8012e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012e7c:	88fa      	ldrh	r2, [r7, #6]
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	9300      	str	r3, [sp, #0]
 8012e82:	4613      	mov	r3, r2
 8012e84:	68ba      	ldr	r2, [r7, #8]
 8012e86:	68b9      	ldr	r1, [r7, #8]
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f000 f8f1 	bl	8013070 <HAL_SPI_TransmitReceive>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	e0ea      	b.n	8013068 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d101      	bne.n	8012ea0 <HAL_SPI_Receive+0x52>
 8012e9c:	2302      	movs	r3, #2
 8012e9e:	e0e3      	b.n	8013068 <HAL_SPI_Receive+0x21a>
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012ea8:	f7f3 fce0 	bl	800686c <HAL_GetTick>
 8012eac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d002      	beq.n	8012ec0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012eba:	2302      	movs	r3, #2
 8012ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012ebe:	e0ca      	b.n	8013056 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d002      	beq.n	8012ecc <HAL_SPI_Receive+0x7e>
 8012ec6:	88fb      	ldrh	r3, [r7, #6]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d102      	bne.n	8012ed2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012ecc:	2301      	movs	r3, #1
 8012ece:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012ed0:	e0c1      	b.n	8013056 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	2204      	movs	r2, #4
 8012ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2200      	movs	r2, #0
 8012ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	88fa      	ldrh	r2, [r7, #6]
 8012eea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	88fa      	ldrh	r2, [r7, #6]
 8012ef0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	2200      	movs	r2, #0
 8012efc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	2200      	movs	r2, #0
 8012f02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2200      	movs	r2, #0
 8012f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	689b      	ldr	r3, [r3, #8]
 8012f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f18:	d10f      	bne.n	8012f3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012f38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f44:	2b40      	cmp	r3, #64	; 0x40
 8012f46:	d007      	beq.n	8012f58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	681a      	ldr	r2, [r3, #0]
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d162      	bne.n	8013026 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012f60:	e02e      	b.n	8012fc0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	f003 0301 	and.w	r3, r3, #1
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d115      	bne.n	8012f9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f103 020c 	add.w	r2, r3, #12
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f7c:	7812      	ldrb	r2, [r2, #0]
 8012f7e:	b2d2      	uxtb	r2, r2
 8012f80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f86:	1c5a      	adds	r2, r3, #1
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	3b01      	subs	r3, #1
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012f9a:	e011      	b.n	8012fc0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012f9c:	f7f3 fc66 	bl	800686c <HAL_GetTick>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	683a      	ldr	r2, [r7, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d803      	bhi.n	8012fb4 <HAL_SPI_Receive+0x166>
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb2:	d102      	bne.n	8012fba <HAL_SPI_Receive+0x16c>
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d102      	bne.n	8012fc0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8012fba:	2303      	movs	r3, #3
 8012fbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012fbe:	e04a      	b.n	8013056 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d1cb      	bne.n	8012f62 <HAL_SPI_Receive+0x114>
 8012fca:	e031      	b.n	8013030 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	f003 0301 	and.w	r3, r3, #1
 8012fd6:	2b01      	cmp	r3, #1
 8012fd8:	d113      	bne.n	8013002 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	68da      	ldr	r2, [r3, #12]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fe4:	b292      	uxth	r2, r2
 8012fe6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fec:	1c9a      	adds	r2, r3, #2
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	3b01      	subs	r3, #1
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013000:	e011      	b.n	8013026 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013002:	f7f3 fc33 	bl	800686c <HAL_GetTick>
 8013006:	4602      	mov	r2, r0
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	1ad3      	subs	r3, r2, r3
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	429a      	cmp	r2, r3
 8013010:	d803      	bhi.n	801301a <HAL_SPI_Receive+0x1cc>
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013018:	d102      	bne.n	8013020 <HAL_SPI_Receive+0x1d2>
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d102      	bne.n	8013026 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013020:	2303      	movs	r3, #3
 8013022:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013024:	e017      	b.n	8013056 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801302a:	b29b      	uxth	r3, r3
 801302c:	2b00      	cmp	r3, #0
 801302e:	d1cd      	bne.n	8012fcc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013030:	693a      	ldr	r2, [r7, #16]
 8013032:	6839      	ldr	r1, [r7, #0]
 8013034:	68f8      	ldr	r0, [r7, #12]
 8013036:	f001 fdb9 	bl	8014bac <SPI_EndRxTransaction>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d002      	beq.n	8013046 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2220      	movs	r2, #32
 8013044:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801304a:	2b00      	cmp	r3, #0
 801304c:	d002      	beq.n	8013054 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801304e:	2301      	movs	r3, #1
 8013050:	75fb      	strb	r3, [r7, #23]
 8013052:	e000      	b.n	8013056 <HAL_SPI_Receive+0x208>
  }

error :
 8013054:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2201      	movs	r2, #1
 801305a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013066:	7dfb      	ldrb	r3, [r7, #23]
}
 8013068:	4618      	mov	r0, r3
 801306a:	3718      	adds	r7, #24
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b08c      	sub	sp, #48	; 0x30
 8013074:	af00      	add	r7, sp, #0
 8013076:	60f8      	str	r0, [r7, #12]
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
 801307c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801307e:	2301      	movs	r3, #1
 8013080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013082:	2300      	movs	r3, #0
 8013084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801308e:	2b01      	cmp	r3, #1
 8013090:	d101      	bne.n	8013096 <HAL_SPI_TransmitReceive+0x26>
 8013092:	2302      	movs	r3, #2
 8013094:	e18a      	b.n	80133ac <HAL_SPI_TransmitReceive+0x33c>
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2201      	movs	r2, #1
 801309a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801309e:	f7f3 fbe5 	bl	800686c <HAL_GetTick>
 80130a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80130aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80130b4:	887b      	ldrh	r3, [r7, #2]
 80130b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80130b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d00f      	beq.n	80130e0 <HAL_SPI_TransmitReceive+0x70>
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80130c6:	d107      	bne.n	80130d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	689b      	ldr	r3, [r3, #8]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d103      	bne.n	80130d8 <HAL_SPI_TransmitReceive+0x68>
 80130d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80130d4:	2b04      	cmp	r3, #4
 80130d6:	d003      	beq.n	80130e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80130d8:	2302      	movs	r3, #2
 80130da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80130de:	e15b      	b.n	8013398 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d005      	beq.n	80130f2 <HAL_SPI_TransmitReceive+0x82>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d002      	beq.n	80130f2 <HAL_SPI_TransmitReceive+0x82>
 80130ec:	887b      	ldrh	r3, [r7, #2]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d103      	bne.n	80130fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80130f2:	2301      	movs	r3, #1
 80130f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80130f8:	e14e      	b.n	8013398 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013100:	b2db      	uxtb	r3, r3
 8013102:	2b04      	cmp	r3, #4
 8013104:	d003      	beq.n	801310e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2205      	movs	r2, #5
 801310a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2200      	movs	r2, #0
 8013112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	887a      	ldrh	r2, [r7, #2]
 801311e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	887a      	ldrh	r2, [r7, #2]
 8013124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	68ba      	ldr	r2, [r7, #8]
 801312a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	887a      	ldrh	r2, [r7, #2]
 8013130:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	887a      	ldrh	r2, [r7, #2]
 8013136:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2200      	movs	r2, #0
 801313c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2200      	movs	r2, #0
 8013142:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801314e:	2b40      	cmp	r3, #64	; 0x40
 8013150:	d007      	beq.n	8013162 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801316a:	d178      	bne.n	801325e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d002      	beq.n	801317a <HAL_SPI_TransmitReceive+0x10a>
 8013174:	8b7b      	ldrh	r3, [r7, #26]
 8013176:	2b01      	cmp	r3, #1
 8013178:	d166      	bne.n	8013248 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801317e:	881a      	ldrh	r2, [r3, #0]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801318a:	1c9a      	adds	r2, r3, #2
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013194:	b29b      	uxth	r3, r3
 8013196:	3b01      	subs	r3, #1
 8013198:	b29a      	uxth	r2, r3
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801319e:	e053      	b.n	8013248 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	689b      	ldr	r3, [r3, #8]
 80131a6:	f003 0302 	and.w	r3, r3, #2
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d11b      	bne.n	80131e6 <HAL_SPI_TransmitReceive+0x176>
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d016      	beq.n	80131e6 <HAL_SPI_TransmitReceive+0x176>
 80131b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d113      	bne.n	80131e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131c2:	881a      	ldrh	r2, [r3, #0]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ce:	1c9a      	adds	r2, r3, #2
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131d8:	b29b      	uxth	r3, r3
 80131da:	3b01      	subs	r3, #1
 80131dc:	b29a      	uxth	r2, r3
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80131e2:	2300      	movs	r3, #0
 80131e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	689b      	ldr	r3, [r3, #8]
 80131ec:	f003 0301 	and.w	r3, r3, #1
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d119      	bne.n	8013228 <HAL_SPI_TransmitReceive+0x1b8>
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d014      	beq.n	8013228 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	68da      	ldr	r2, [r3, #12]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013208:	b292      	uxth	r2, r2
 801320a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013210:	1c9a      	adds	r2, r3, #2
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801321a:	b29b      	uxth	r3, r3
 801321c:	3b01      	subs	r3, #1
 801321e:	b29a      	uxth	r2, r3
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013224:	2301      	movs	r3, #1
 8013226:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013228:	f7f3 fb20 	bl	800686c <HAL_GetTick>
 801322c:	4602      	mov	r2, r0
 801322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013234:	429a      	cmp	r2, r3
 8013236:	d807      	bhi.n	8013248 <HAL_SPI_TransmitReceive+0x1d8>
 8013238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801323e:	d003      	beq.n	8013248 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013240:	2303      	movs	r3, #3
 8013242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013246:	e0a7      	b.n	8013398 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801324c:	b29b      	uxth	r3, r3
 801324e:	2b00      	cmp	r3, #0
 8013250:	d1a6      	bne.n	80131a0 <HAL_SPI_TransmitReceive+0x130>
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013256:	b29b      	uxth	r3, r3
 8013258:	2b00      	cmp	r3, #0
 801325a:	d1a1      	bne.n	80131a0 <HAL_SPI_TransmitReceive+0x130>
 801325c:	e07c      	b.n	8013358 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d002      	beq.n	801326c <HAL_SPI_TransmitReceive+0x1fc>
 8013266:	8b7b      	ldrh	r3, [r7, #26]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d16b      	bne.n	8013344 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	330c      	adds	r3, #12
 8013276:	7812      	ldrb	r2, [r2, #0]
 8013278:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801327e:	1c5a      	adds	r2, r3, #1
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013288:	b29b      	uxth	r3, r3
 801328a:	3b01      	subs	r3, #1
 801328c:	b29a      	uxth	r2, r3
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013292:	e057      	b.n	8013344 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	689b      	ldr	r3, [r3, #8]
 801329a:	f003 0302 	and.w	r3, r3, #2
 801329e:	2b02      	cmp	r3, #2
 80132a0:	d11c      	bne.n	80132dc <HAL_SPI_TransmitReceive+0x26c>
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d017      	beq.n	80132dc <HAL_SPI_TransmitReceive+0x26c>
 80132ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d114      	bne.n	80132dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	330c      	adds	r3, #12
 80132bc:	7812      	ldrb	r2, [r2, #0]
 80132be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132c4:	1c5a      	adds	r2, r3, #1
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	3b01      	subs	r3, #1
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80132d8:	2300      	movs	r3, #0
 80132da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	689b      	ldr	r3, [r3, #8]
 80132e2:	f003 0301 	and.w	r3, r3, #1
 80132e6:	2b01      	cmp	r3, #1
 80132e8:	d119      	bne.n	801331e <HAL_SPI_TransmitReceive+0x2ae>
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d014      	beq.n	801331e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	68da      	ldr	r2, [r3, #12]
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132fe:	b2d2      	uxtb	r2, r2
 8013300:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013306:	1c5a      	adds	r2, r3, #1
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013310:	b29b      	uxth	r3, r3
 8013312:	3b01      	subs	r3, #1
 8013314:	b29a      	uxth	r2, r3
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801331a:	2301      	movs	r3, #1
 801331c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801331e:	f7f3 faa5 	bl	800686c <HAL_GetTick>
 8013322:	4602      	mov	r2, r0
 8013324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013326:	1ad3      	subs	r3, r2, r3
 8013328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801332a:	429a      	cmp	r2, r3
 801332c:	d803      	bhi.n	8013336 <HAL_SPI_TransmitReceive+0x2c6>
 801332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013334:	d102      	bne.n	801333c <HAL_SPI_TransmitReceive+0x2cc>
 8013336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013338:	2b00      	cmp	r3, #0
 801333a:	d103      	bne.n	8013344 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801333c:	2303      	movs	r3, #3
 801333e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013342:	e029      	b.n	8013398 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013348:	b29b      	uxth	r3, r3
 801334a:	2b00      	cmp	r3, #0
 801334c:	d1a2      	bne.n	8013294 <HAL_SPI_TransmitReceive+0x224>
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013352:	b29b      	uxth	r3, r3
 8013354:	2b00      	cmp	r3, #0
 8013356:	d19d      	bne.n	8013294 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801335a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f001 fc8a 	bl	8014c76 <SPI_EndRxTxTransaction>
 8013362:	4603      	mov	r3, r0
 8013364:	2b00      	cmp	r3, #0
 8013366:	d006      	beq.n	8013376 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013368:	2301      	movs	r3, #1
 801336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	2220      	movs	r2, #32
 8013372:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013374:	e010      	b.n	8013398 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d10b      	bne.n	8013396 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801337e:	2300      	movs	r3, #0
 8013380:	617b      	str	r3, [r7, #20]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	617b      	str	r3, [r7, #20]
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	689b      	ldr	r3, [r3, #8]
 8013390:	617b      	str	r3, [r7, #20]
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	e000      	b.n	8013398 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2201      	movs	r2, #1
 801339c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2200      	movs	r2, #0
 80133a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80133a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3730      	adds	r7, #48	; 0x30
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b087      	sub	sp, #28
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	60f8      	str	r0, [r7, #12]
 80133bc:	60b9      	str	r1, [r7, #8]
 80133be:	4613      	mov	r3, r2
 80133c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80133c2:	2300      	movs	r3, #0
 80133c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d101      	bne.n	80133d4 <HAL_SPI_Transmit_IT+0x20>
 80133d0:	2302      	movs	r3, #2
 80133d2:	e06f      	b.n	80134b4 <HAL_SPI_Transmit_IT+0x100>
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2201      	movs	r2, #1
 80133d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d002      	beq.n	80133e8 <HAL_SPI_Transmit_IT+0x34>
 80133e2:	88fb      	ldrh	r3, [r7, #6]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d102      	bne.n	80133ee <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80133e8:	2301      	movs	r3, #1
 80133ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80133ec:	e05d      	b.n	80134aa <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80133f4:	b2db      	uxtb	r3, r3
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d002      	beq.n	8013400 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80133fa:	2302      	movs	r3, #2
 80133fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80133fe:	e054      	b.n	80134aa <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2203      	movs	r2, #3
 8013404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	68ba      	ldr	r2, [r7, #8]
 8013412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	88fa      	ldrh	r2, [r7, #6]
 8013418:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	88fa      	ldrh	r2, [r7, #6]
 801341e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2200      	movs	r2, #0
 8013424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2200      	movs	r2, #0
 801342a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2200      	movs	r2, #0
 8013430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2200      	movs	r2, #0
 8013436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d003      	beq.n	8013448 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	4a1f      	ldr	r2, [pc, #124]	; (80134c0 <HAL_SPI_Transmit_IT+0x10c>)
 8013444:	645a      	str	r2, [r3, #68]	; 0x44
 8013446:	e002      	b.n	801344e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	4a1e      	ldr	r2, [pc, #120]	; (80134c4 <HAL_SPI_Transmit_IT+0x110>)
 801344c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	689b      	ldr	r3, [r3, #8]
 8013452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013456:	d10f      	bne.n	8013478 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013476:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	685a      	ldr	r2, [r3, #4]
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8013486:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013492:	2b40      	cmp	r3, #64	; 0x40
 8013494:	d008      	beq.n	80134a8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	681a      	ldr	r2, [r3, #0]
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80134a4:	601a      	str	r2, [r3, #0]
 80134a6:	e000      	b.n	80134aa <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80134a8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80134b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	371c      	adds	r7, #28
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr
 80134c0:	08014a59 	.word	0x08014a59
 80134c4:	08014a13 	.word	0x08014a13

080134c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	4613      	mov	r3, r2
 80134d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80134d6:	2300      	movs	r3, #0
 80134d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	689b      	ldr	r3, [r3, #8]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d110      	bne.n	8013504 <HAL_SPI_Receive_IT+0x3c>
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80134ea:	d10b      	bne.n	8013504 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2204      	movs	r2, #4
 80134f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80134f4:	88fb      	ldrh	r3, [r7, #6]
 80134f6:	68ba      	ldr	r2, [r7, #8]
 80134f8:	68b9      	ldr	r1, [r7, #8]
 80134fa:	68f8      	ldr	r0, [r7, #12]
 80134fc:	f000 f882 	bl	8013604 <HAL_SPI_TransmitReceive_IT>
 8013500:	4603      	mov	r3, r0
 8013502:	e076      	b.n	80135f2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801350a:	2b01      	cmp	r3, #1
 801350c:	d101      	bne.n	8013512 <HAL_SPI_Receive_IT+0x4a>
 801350e:	2302      	movs	r3, #2
 8013510:	e06f      	b.n	80135f2 <HAL_SPI_Receive_IT+0x12a>
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2201      	movs	r2, #1
 8013516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b01      	cmp	r3, #1
 8013524:	d002      	beq.n	801352c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8013526:	2302      	movs	r3, #2
 8013528:	75fb      	strb	r3, [r7, #23]
    goto error;
 801352a:	e05d      	b.n	80135e8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d002      	beq.n	8013538 <HAL_SPI_Receive_IT+0x70>
 8013532:	88fb      	ldrh	r3, [r7, #6]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d102      	bne.n	801353e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8013538:	2301      	movs	r3, #1
 801353a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801353c:	e054      	b.n	80135e8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2204      	movs	r2, #4
 8013542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2200      	movs	r2, #0
 801354a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	68ba      	ldr	r2, [r7, #8]
 8013550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	88fa      	ldrh	r2, [r7, #6]
 8013556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	88fa      	ldrh	r2, [r7, #6]
 801355c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	2200      	movs	r2, #0
 8013562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2200      	movs	r2, #0
 8013568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	2200      	movs	r2, #0
 801356e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2200      	movs	r2, #0
 8013574:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	68db      	ldr	r3, [r3, #12]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d003      	beq.n	8013586 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	4a1e      	ldr	r2, [pc, #120]	; (80135fc <HAL_SPI_Receive_IT+0x134>)
 8013582:	641a      	str	r2, [r3, #64]	; 0x40
 8013584:	e002      	b.n	801358c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	4a1d      	ldr	r2, [pc, #116]	; (8013600 <HAL_SPI_Receive_IT+0x138>)
 801358a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	689b      	ldr	r3, [r3, #8]
 8013590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013594:	d10f      	bne.n	80135b6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80135a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80135b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80135c4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135d0:	2b40      	cmp	r3, #64	; 0x40
 80135d2:	d008      	beq.n	80135e6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80135e2:	601a      	str	r2, [r3, #0]
 80135e4:	e000      	b.n	80135e8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80135e6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	2200      	movs	r2, #0
 80135ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80135f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3718      	adds	r7, #24
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	080149cd 	.word	0x080149cd
 8013600:	08014983 	.word	0x08014983

08013604 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8013604:	b480      	push	{r7}
 8013606:	b087      	sub	sp, #28
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	607a      	str	r2, [r7, #4]
 8013610:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013612:	2300      	movs	r3, #0
 8013614:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801361c:	2b01      	cmp	r3, #1
 801361e:	d101      	bne.n	8013624 <HAL_SPI_TransmitReceive_IT+0x20>
 8013620:	2302      	movs	r3, #2
 8013622:	e075      	b.n	8013710 <HAL_SPI_TransmitReceive_IT+0x10c>
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	2201      	movs	r2, #1
 8013628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013632:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801363a:	7dbb      	ldrb	r3, [r7, #22]
 801363c:	2b01      	cmp	r3, #1
 801363e:	d00d      	beq.n	801365c <HAL_SPI_TransmitReceive_IT+0x58>
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013646:	d106      	bne.n	8013656 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	689b      	ldr	r3, [r3, #8]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <HAL_SPI_TransmitReceive_IT+0x52>
 8013650:	7dbb      	ldrb	r3, [r7, #22]
 8013652:	2b04      	cmp	r3, #4
 8013654:	d002      	beq.n	801365c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8013656:	2302      	movs	r3, #2
 8013658:	75fb      	strb	r3, [r7, #23]
    goto error;
 801365a:	e054      	b.n	8013706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d005      	beq.n	801366e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d002      	beq.n	801366e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013668:	887b      	ldrh	r3, [r7, #2]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d102      	bne.n	8013674 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 801366e:	2301      	movs	r3, #1
 8013670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013672:	e048      	b.n	8013706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801367a:	b2db      	uxtb	r3, r3
 801367c:	2b04      	cmp	r3, #4
 801367e:	d003      	beq.n	8013688 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2205      	movs	r2, #5
 8013684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2200      	movs	r2, #0
 801368c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	68ba      	ldr	r2, [r7, #8]
 8013692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	887a      	ldrh	r2, [r7, #2]
 8013698:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	887a      	ldrh	r2, [r7, #2]
 801369e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	887a      	ldrh	r2, [r7, #2]
 80136aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	887a      	ldrh	r2, [r7, #2]
 80136b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	68db      	ldr	r3, [r3, #12]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d006      	beq.n	80136c8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	4a17      	ldr	r2, [pc, #92]	; (801371c <HAL_SPI_TransmitReceive_IT+0x118>)
 80136be:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	4a17      	ldr	r2, [pc, #92]	; (8013720 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80136c4:	645a      	str	r2, [r3, #68]	; 0x44
 80136c6:	e005      	b.n	80136d4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	4a16      	ldr	r2, [pc, #88]	; (8013724 <HAL_SPI_TransmitReceive_IT+0x120>)
 80136cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	4a15      	ldr	r2, [pc, #84]	; (8013728 <HAL_SPI_TransmitReceive_IT+0x124>)
 80136d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	685a      	ldr	r2, [r3, #4]
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80136e2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136ee:	2b40      	cmp	r3, #64	; 0x40
 80136f0:	d008      	beq.n	8013704 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013700:	601a      	str	r2, [r3, #0]
 8013702:	e000      	b.n	8013706 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8013704:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2200      	movs	r2, #0
 801370a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013710:	4618      	mov	r0, r3
 8013712:	371c      	adds	r7, #28
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr
 801371c:	080148c5 	.word	0x080148c5
 8013720:	08014925 	.word	0x08014925
 8013724:	08014801 	.word	0x08014801
 8013728:	08014865 	.word	0x08014865

0801372c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b086      	sub	sp, #24
 8013730:	af00      	add	r7, sp, #0
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	4613      	mov	r3, r2
 8013738:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801373a:	2300      	movs	r3, #0
 801373c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013744:	2b01      	cmp	r3, #1
 8013746:	d101      	bne.n	801374c <HAL_SPI_Transmit_DMA+0x20>
 8013748:	2302      	movs	r3, #2
 801374a:	e09b      	b.n	8013884 <HAL_SPI_Transmit_DMA+0x158>
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2201      	movs	r2, #1
 8013750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801375a:	b2db      	uxtb	r3, r3
 801375c:	2b01      	cmp	r3, #1
 801375e:	d002      	beq.n	8013766 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013760:	2302      	movs	r3, #2
 8013762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013764:	e089      	b.n	801387a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d002      	beq.n	8013772 <HAL_SPI_Transmit_DMA+0x46>
 801376c:	88fb      	ldrh	r3, [r7, #6]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d102      	bne.n	8013778 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8013772:	2301      	movs	r3, #1
 8013774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013776:	e080      	b.n	801387a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2203      	movs	r2, #3
 801377c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2200      	movs	r2, #0
 8013784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	68ba      	ldr	r2, [r7, #8]
 801378a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	88fa      	ldrh	r2, [r7, #6]
 8013790:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	88fa      	ldrh	r2, [r7, #6]
 8013796:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2200      	movs	r2, #0
 801379c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	2200      	movs	r2, #0
 80137a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2200      	movs	r2, #0
 80137a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	2200      	movs	r2, #0
 80137ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2200      	movs	r2, #0
 80137b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	689b      	ldr	r3, [r3, #8]
 80137ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137be:	d10f      	bne.n	80137e0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	681a      	ldr	r2, [r3, #0]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80137de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137e4:	4a29      	ldr	r2, [pc, #164]	; (801388c <HAL_SPI_Transmit_DMA+0x160>)
 80137e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137ec:	4a28      	ldr	r2, [pc, #160]	; (8013890 <HAL_SPI_Transmit_DMA+0x164>)
 80137ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137f4:	4a27      	ldr	r2, [pc, #156]	; (8013894 <HAL_SPI_Transmit_DMA+0x168>)
 80137f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137fc:	2200      	movs	r2, #0
 80137fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013808:	4619      	mov	r1, r3
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	330c      	adds	r3, #12
 8013810:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013816:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013818:	f7f4 fa91 	bl	8007d3e <HAL_DMA_Start_IT>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d00c      	beq.n	801383c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013826:	f043 0210 	orr.w	r2, r3, #16
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801382e:	2301      	movs	r3, #1
 8013830:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	2201      	movs	r2, #1
 8013836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801383a:	e01e      	b.n	801387a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013846:	2b40      	cmp	r3, #64	; 0x40
 8013848:	d007      	beq.n	801385a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013858:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	685a      	ldr	r2, [r3, #4]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f042 0220 	orr.w	r2, r2, #32
 8013868:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	685a      	ldr	r2, [r3, #4]
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f042 0202 	orr.w	r2, r2, #2
 8013878:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2200      	movs	r2, #0
 801387e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013882:	7dfb      	ldrb	r3, [r7, #23]
}
 8013884:	4618      	mov	r0, r3
 8013886:	3718      	adds	r7, #24
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	080145b1 	.word	0x080145b1
 8013890:	080143d1 	.word	0x080143d1
 8013894:	08014605 	.word	0x08014605

08013898 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b086      	sub	sp, #24
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	4613      	mov	r3, r2
 80138a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80138a6:	2300      	movs	r3, #0
 80138a8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d110      	bne.n	80138d4 <HAL_SPI_Receive_DMA+0x3c>
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80138ba:	d10b      	bne.n	80138d4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2204      	movs	r2, #4
 80138c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80138c4:	88fb      	ldrh	r3, [r7, #6]
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	68b9      	ldr	r1, [r7, #8]
 80138ca:	68f8      	ldr	r0, [r7, #12]
 80138cc:	f000 f8ac 	bl	8013a28 <HAL_SPI_TransmitReceive_DMA>
 80138d0:	4603      	mov	r3, r0
 80138d2:	e09f      	b.n	8013a14 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d101      	bne.n	80138e2 <HAL_SPI_Receive_DMA+0x4a>
 80138de:	2302      	movs	r3, #2
 80138e0:	e098      	b.n	8013a14 <HAL_SPI_Receive_DMA+0x17c>
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2201      	movs	r2, #1
 80138e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	d002      	beq.n	80138fc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80138f6:	2302      	movs	r3, #2
 80138f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138fa:	e086      	b.n	8013a0a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d002      	beq.n	8013908 <HAL_SPI_Receive_DMA+0x70>
 8013902:	88fb      	ldrh	r3, [r7, #6]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d102      	bne.n	801390e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8013908:	2301      	movs	r3, #1
 801390a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801390c:	e07d      	b.n	8013a0a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2204      	movs	r2, #4
 8013912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	2200      	movs	r2, #0
 801391a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	88fa      	ldrh	r2, [r7, #6]
 8013926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	88fa      	ldrh	r2, [r7, #6]
 801392c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2200      	movs	r2, #0
 8013932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2200      	movs	r2, #0
 8013938:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2200      	movs	r2, #0
 801393e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2200      	movs	r2, #0
 8013944:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	689b      	ldr	r3, [r3, #8]
 801394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801394e:	d10f      	bne.n	8013970 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801395e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801396e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013974:	4a29      	ldr	r2, [pc, #164]	; (8013a1c <HAL_SPI_Receive_DMA+0x184>)
 8013976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801397c:	4a28      	ldr	r2, [pc, #160]	; (8013a20 <HAL_SPI_Receive_DMA+0x188>)
 801397e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013984:	4a27      	ldr	r2, [pc, #156]	; (8013a24 <HAL_SPI_Receive_DMA+0x18c>)
 8013986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801398c:	2200      	movs	r2, #0
 801398e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	330c      	adds	r3, #12
 801399a:	4619      	mov	r1, r3
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80139a8:	f7f4 f9c9 	bl	8007d3e <HAL_DMA_Start_IT>
 80139ac:	4603      	mov	r3, r0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d00c      	beq.n	80139cc <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139b6:	f043 0210 	orr.w	r2, r3, #16
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80139be:	2301      	movs	r3, #1
 80139c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	2201      	movs	r2, #1
 80139c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80139ca:	e01e      	b.n	8013a0a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139d6:	2b40      	cmp	r3, #64	; 0x40
 80139d8:	d007      	beq.n	80139ea <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	681a      	ldr	r2, [r3, #0]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	685a      	ldr	r2, [r3, #4]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	f042 0220 	orr.w	r2, r2, #32
 80139f8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	685a      	ldr	r2, [r3, #4]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f042 0201 	orr.w	r2, r2, #1
 8013a08:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3718      	adds	r7, #24
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}
 8013a1c:	080145cd 	.word	0x080145cd
 8013a20:	08014479 	.word	0x08014479
 8013a24:	08014605 	.word	0x08014605

08013a28 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	607a      	str	r2, [r7, #4]
 8013a34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013a36:	2300      	movs	r3, #0
 8013a38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d101      	bne.n	8013a48 <HAL_SPI_TransmitReceive_DMA+0x20>
 8013a44:	2302      	movs	r3, #2
 8013a46:	e0e3      	b.n	8013c10 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a56:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	685b      	ldr	r3, [r3, #4]
 8013a5c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8013a5e:	7dbb      	ldrb	r3, [r7, #22]
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d00d      	beq.n	8013a80 <HAL_SPI_TransmitReceive_DMA+0x58>
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a6a:	d106      	bne.n	8013a7a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d102      	bne.n	8013a7a <HAL_SPI_TransmitReceive_DMA+0x52>
 8013a74:	7dbb      	ldrb	r3, [r7, #22]
 8013a76:	2b04      	cmp	r3, #4
 8013a78:	d002      	beq.n	8013a80 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013a7a:	2302      	movs	r3, #2
 8013a7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a7e:	e0c2      	b.n	8013c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d005      	beq.n	8013a92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d002      	beq.n	8013a92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013a8c:	887b      	ldrh	r3, [r7, #2]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d102      	bne.n	8013a98 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8013a92:	2301      	movs	r3, #1
 8013a94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a96:	e0b6      	b.n	8013c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	2b04      	cmp	r3, #4
 8013aa2:	d003      	beq.n	8013aac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2205      	movs	r2, #5
 8013aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	68ba      	ldr	r2, [r7, #8]
 8013ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	887a      	ldrh	r2, [r7, #2]
 8013abc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	887a      	ldrh	r2, [r7, #2]
 8013ac2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	887a      	ldrh	r2, [r7, #2]
 8013ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	887a      	ldrh	r2, [r7, #2]
 8013ad4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	2b04      	cmp	r3, #4
 8013aec:	d108      	bne.n	8013b00 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013af2:	4a49      	ldr	r2, [pc, #292]	; (8013c18 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8013af4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013afa:	4a48      	ldr	r2, [pc, #288]	; (8013c1c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8013afc:	63da      	str	r2, [r3, #60]	; 0x3c
 8013afe:	e007      	b.n	8013b10 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b04:	4a46      	ldr	r2, [pc, #280]	; (8013c20 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8013b06:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b0c:	4a45      	ldr	r2, [pc, #276]	; (8013c24 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8013b0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b14:	4a44      	ldr	r2, [pc, #272]	; (8013c28 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8013b16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	330c      	adds	r3, #12
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b30:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013b38:	f7f4 f901 	bl	8007d3e <HAL_DMA_Start_IT>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00c      	beq.n	8013b5c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b46:	f043 0210 	orr.w	r2, r3, #16
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013b4e:	2301      	movs	r3, #1
 8013b50:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2201      	movs	r2, #1
 8013b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013b5a:	e054      	b.n	8013c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	685a      	ldr	r2, [r3, #4]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f042 0201 	orr.w	r2, r2, #1
 8013b6a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b70:	2200      	movs	r2, #0
 8013b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b78:	2200      	movs	r2, #0
 8013b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b80:	2200      	movs	r2, #0
 8013b82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b88:	2200      	movs	r2, #0
 8013b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b94:	4619      	mov	r1, r3
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	330c      	adds	r3, #12
 8013b9c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ba2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013ba4:	f7f4 f8cb 	bl	8007d3e <HAL_DMA_Start_IT>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00c      	beq.n	8013bc8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bb2:	f043 0210 	orr.w	r2, r3, #16
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013bba:	2301      	movs	r3, #1
 8013bbc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013bc6:	e01e      	b.n	8013c06 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bd2:	2b40      	cmp	r3, #64	; 0x40
 8013bd4:	d007      	beq.n	8013be6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013be4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	685a      	ldr	r2, [r3, #4]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f042 0220 	orr.w	r2, r2, #32
 8013bf4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	685a      	ldr	r2, [r3, #4]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f042 0202 	orr.w	r2, r2, #2
 8013c04:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3718      	adds	r7, #24
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	080145cd 	.word	0x080145cd
 8013c1c:	08014479 	.word	0x08014479
 8013c20:	080145e9 	.word	0x080145e9
 8013c24:	08014521 	.word	0x08014521
 8013c28:	08014605 	.word	0x08014605

08013c2c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b088      	sub	sp, #32
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013c34:	2300      	movs	r3, #0
 8013c36:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013c38:	4b6e      	ldr	r3, [pc, #440]	; (8013df4 <HAL_SPI_Abort+0x1c8>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4a6e      	ldr	r2, [pc, #440]	; (8013df8 <HAL_SPI_Abort+0x1cc>)
 8013c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8013c42:	0a5b      	lsrs	r3, r3, #9
 8013c44:	2264      	movs	r2, #100	; 0x64
 8013c46:	fb02 f303 	mul.w	r3, r2, r3
 8013c4a:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	685a      	ldr	r2, [r3, #4]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f022 0220 	bic.w	r2, r2, #32
 8013c5e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c6a:	2b80      	cmp	r3, #128	; 0x80
 8013c6c:	d117      	bne.n	8013c9e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4a62      	ldr	r2, [pc, #392]	; (8013dfc <HAL_SPI_Abort+0x1d0>)
 8013c72:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c74:	69bb      	ldr	r3, [r7, #24]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d106      	bne.n	8013c88 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c86:	e008      	b.n	8013c9a <HAL_SPI_Abort+0x6e>
      }
      count--;
 8013c88:	69bb      	ldr	r3, [r7, #24]
 8013c8a:	3b01      	subs	r3, #1
 8013c8c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c94:	b2db      	uxtb	r3, r3
 8013c96:	2b07      	cmp	r3, #7
 8013c98:	d1ec      	bne.n	8013c74 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ca8:	2b40      	cmp	r3, #64	; 0x40
 8013caa:	d117      	bne.n	8013cdc <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4a54      	ldr	r2, [pc, #336]	; (8013e00 <HAL_SPI_Abort+0x1d4>)
 8013cb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d106      	bne.n	8013cc6 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013cc4:	e008      	b.n	8013cd8 <HAL_SPI_Abort+0xac>
      }
      count--;
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cd2:	b2db      	uxtb	r3, r3
 8013cd4:	2b07      	cmp	r3, #7
 8013cd6:	d1ec      	bne.n	8013cb2 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	685b      	ldr	r3, [r3, #4]
 8013ce2:	f003 0302 	and.w	r3, r3, #2
 8013ce6:	2b02      	cmp	r3, #2
 8013ce8:	d12e      	bne.n	8013d48 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d02a      	beq.n	8013d48 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7f4 f875 	bl	8007dee <HAL_DMA_Abort>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d002      	beq.n	8013d10 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2240      	movs	r2, #64	; 0x40
 8013d0e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	685a      	ldr	r2, [r3, #4]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f022 0202 	bic.w	r2, r2, #2
 8013d1e:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d106      	bne.n	8013d34 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8013d32:	e009      	b.n	8013d48 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	3b01      	subs	r3, #1
 8013d38:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	689b      	ldr	r3, [r3, #8]
 8013d40:	f003 0302 	and.w	r3, r3, #2
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d0eb      	beq.n	8013d20 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	f003 0301 	and.w	r3, r3, #1
 8013d52:	2b01      	cmp	r3, #1
 8013d54:	d122      	bne.n	8013d9c <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d01e      	beq.n	8013d9c <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d62:	2200      	movs	r2, #0
 8013d64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7f4 f83f 	bl	8007dee <HAL_DMA_Abort>
 8013d70:	4603      	mov	r3, r0
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d002      	beq.n	8013d7c <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2240      	movs	r2, #64	; 0x40
 8013d7a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d8a:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	685a      	ldr	r2, [r3, #4]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f022 0201 	bic.w	r2, r2, #1
 8013d9a:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2200      	movs	r2, #0
 8013da6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dac:	2b40      	cmp	r3, #64	; 0x40
 8013dae:	d102      	bne.n	8013db6 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8013db0:	2301      	movs	r3, #1
 8013db2:	77fb      	strb	r3, [r7, #31]
 8013db4:	e002      	b.n	8013dbc <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2200      	movs	r2, #0
 8013dba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	60fb      	str	r3, [r7, #12]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	68db      	ldr	r3, [r3, #12]
 8013dc6:	60fb      	str	r3, [r7, #12]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	689b      	ldr	r3, [r3, #8]
 8013dce:	60fb      	str	r3, [r7, #12]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	613b      	str	r3, [r7, #16]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	689b      	ldr	r3, [r3, #8]
 8013ddc:	613b      	str	r3, [r7, #16]
 8013dde:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2201      	movs	r2, #1
 8013de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8013de8:	7ffb      	ldrb	r3, [r7, #31]
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3720      	adds	r7, #32
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	20000058 	.word	0x20000058
 8013df8:	057619f1 	.word	0x057619f1
 8013dfc:	08014fb1 	.word	0x08014fb1
 8013e00:	08014f21 	.word	0x08014f21

08013e04 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b088      	sub	sp, #32
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8013e10:	2301      	movs	r3, #1
 8013e12:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013e14:	4b72      	ldr	r3, [pc, #456]	; (8013fe0 <HAL_SPI_Abort_IT+0x1dc>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	4a72      	ldr	r2, [pc, #456]	; (8013fe4 <HAL_SPI_Abort_IT+0x1e0>)
 8013e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8013e1e:	0a5b      	lsrs	r3, r3, #9
 8013e20:	2264      	movs	r2, #100	; 0x64
 8013e22:	fb02 f303 	mul.w	r3, r2, r3
 8013e26:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	685a      	ldr	r2, [r3, #4]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f022 0220 	bic.w	r2, r2, #32
 8013e3a:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	685b      	ldr	r3, [r3, #4]
 8013e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e46:	2b80      	cmp	r3, #128	; 0x80
 8013e48:	d117      	bne.n	8013e7a <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	4a66      	ldr	r2, [pc, #408]	; (8013fe8 <HAL_SPI_Abort_IT+0x1e4>)
 8013e4e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d106      	bne.n	8013e64 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013e62:	e008      	b.n	8013e76 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	3b01      	subs	r3, #1
 8013e68:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	2b07      	cmp	r3, #7
 8013e74:	d1ec      	bne.n	8013e50 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e84:	2b40      	cmp	r3, #64	; 0x40
 8013e86:	d117      	bne.n	8013eb8 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	4a58      	ldr	r2, [pc, #352]	; (8013fec <HAL_SPI_Abort_IT+0x1e8>)
 8013e8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d106      	bne.n	8013ea2 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013ea0:	e008      	b.n	8013eb4 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	3b01      	subs	r3, #1
 8013ea6:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	2b07      	cmp	r3, #7
 8013eb2:	d1ec      	bne.n	8013e8e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d00f      	beq.n	8013ee0 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	f003 0302 	and.w	r3, r3, #2
 8013eca:	2b02      	cmp	r3, #2
 8013ecc:	d104      	bne.n	8013ed8 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ed2:	4a47      	ldr	r2, [pc, #284]	; (8013ff0 <HAL_SPI_Abort_IT+0x1ec>)
 8013ed4:	651a      	str	r2, [r3, #80]	; 0x50
 8013ed6:	e003      	b.n	8013ee0 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013edc:	2200      	movs	r2, #0
 8013ede:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d00f      	beq.n	8013f08 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	f003 0301 	and.w	r3, r3, #1
 8013ef2:	2b01      	cmp	r3, #1
 8013ef4:	d104      	bne.n	8013f00 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013efa:	4a3e      	ldr	r2, [pc, #248]	; (8013ff4 <HAL_SPI_Abort_IT+0x1f0>)
 8013efc:	651a      	str	r2, [r3, #80]	; 0x50
 8013efe:	e003      	b.n	8013f08 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f04:	2200      	movs	r2, #0
 8013f06:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	f003 0302 	and.w	r3, r3, #2
 8013f12:	2b02      	cmp	r3, #2
 8013f14:	d115      	bne.n	8013f42 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d011      	beq.n	8013f42 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7f3 ffd3 	bl	8007ece <HAL_DMA_Abort_IT>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d007      	beq.n	8013f3e <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f32:	2200      	movs	r2, #0
 8013f34:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2240      	movs	r2, #64	; 0x40
 8013f3a:	655a      	str	r2, [r3, #84]	; 0x54
 8013f3c:	e001      	b.n	8013f42 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	f003 0301 	and.w	r3, r3, #1
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d115      	bne.n	8013f7c <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d011      	beq.n	8013f7c <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7f3 ffb6 	bl	8007ece <HAL_DMA_Abort_IT>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d007      	beq.n	8013f78 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2240      	movs	r2, #64	; 0x40
 8013f74:	655a      	str	r2, [r3, #84]	; 0x54
 8013f76:	e001      	b.n	8013f7c <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8013f7c:	69bb      	ldr	r3, [r7, #24]
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d128      	bne.n	8013fd4 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f92:	2b40      	cmp	r3, #64	; 0x40
 8013f94:	d102      	bne.n	8013f9c <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8013f96:	2301      	movs	r3, #1
 8013f98:	77fb      	strb	r3, [r7, #31]
 8013f9a:	e002      	b.n	8013fa2 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	60bb      	str	r3, [r7, #8]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	60bb      	str	r3, [r7, #8]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	689b      	ldr	r3, [r3, #8]
 8013fb4:	60bb      	str	r3, [r7, #8]
 8013fb6:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013fb8:	2300      	movs	r3, #0
 8013fba:	60fb      	str	r3, [r7, #12]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	689b      	ldr	r3, [r3, #8]
 8013fc2:	60fb      	str	r3, [r7, #12]
 8013fc4:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2201      	movs	r2, #1
 8013fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f000 f9da 	bl	8014388 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8013fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3720      	adds	r7, #32
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}
 8013fde:	bf00      	nop
 8013fe0:	20000058 	.word	0x20000058
 8013fe4:	057619f1 	.word	0x057619f1
 8013fe8:	08014fb1 	.word	0x08014fb1
 8013fec:	08014f21 	.word	0x08014f21
 8013ff0:	0801466d 	.word	0x0801466d
 8013ff4:	08014741 	.word	0x08014741

08013ff8 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014006:	2b01      	cmp	r3, #1
 8014008:	d101      	bne.n	801400e <HAL_SPI_DMAPause+0x16>
 801400a:	2302      	movs	r3, #2
 801400c:	e010      	b.n	8014030 <HAL_SPI_DMAPause+0x38>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2201      	movs	r2, #1
 8014012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	685a      	ldr	r2, [r3, #4]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	f022 0203 	bic.w	r2, r2, #3
 8014024:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2200      	movs	r2, #0
 801402a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801402e:	2300      	movs	r3, #0
}
 8014030:	4618      	mov	r0, r3
 8014032:	370c      	adds	r7, #12
 8014034:	46bd      	mov	sp, r7
 8014036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403a:	4770      	bx	lr

0801403c <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 801403c:	b480      	push	{r7}
 801403e:	b083      	sub	sp, #12
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801404a:	2b01      	cmp	r3, #1
 801404c:	d101      	bne.n	8014052 <HAL_SPI_DMAResume+0x16>
 801404e:	2302      	movs	r3, #2
 8014050:	e010      	b.n	8014074 <HAL_SPI_DMAResume+0x38>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2201      	movs	r2, #1
 8014056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	685a      	ldr	r2, [r3, #4]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f042 0203 	orr.w	r2, r2, #3
 8014068:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2200      	movs	r2, #0
 801406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8014072:	2300      	movs	r3, #0
}
 8014074:	4618      	mov	r0, r3
 8014076:	370c      	adds	r7, #12
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr

08014080 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b084      	sub	sp, #16
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014088:	2300      	movs	r3, #0
 801408a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014090:	2b00      	cmp	r3, #0
 8014092:	d00f      	beq.n	80140b4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014098:	4618      	mov	r0, r3
 801409a:	f7f3 fea8 	bl	8007dee <HAL_DMA_Abort>
 801409e:	4603      	mov	r3, r0
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d007      	beq.n	80140b4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140a8:	f043 0210 	orr.w	r2, r3, #16
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80140b0:	2301      	movs	r3, #1
 80140b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00f      	beq.n	80140dc <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7f3 fe94 	bl	8007dee <HAL_DMA_Abort>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d007      	beq.n	80140dc <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140d0:	f043 0210 	orr.w	r2, r3, #16
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80140d8:	2301      	movs	r3, #1
 80140da:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	685a      	ldr	r2, [r3, #4]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f022 0203 	bic.w	r2, r2, #3
 80140ea:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2201      	movs	r2, #1
 80140f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80140f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3710      	adds	r7, #16
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}

080140fe <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b088      	sub	sp, #32
 8014102:	af00      	add	r7, sp, #0
 8014104:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	685b      	ldr	r3, [r3, #4]
 801410c:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	689b      	ldr	r3, [r3, #8]
 8014114:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	099b      	lsrs	r3, r3, #6
 801411a:	f003 0301 	and.w	r3, r3, #1
 801411e:	2b00      	cmp	r3, #0
 8014120:	d10f      	bne.n	8014142 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014122:	69bb      	ldr	r3, [r7, #24]
 8014124:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00a      	beq.n	8014142 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	099b      	lsrs	r3, r3, #6
 8014130:	f003 0301 	and.w	r3, r3, #1
 8014134:	2b00      	cmp	r3, #0
 8014136:	d004      	beq.n	8014142 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	4798      	blx	r3
    return;
 8014140:	e0d7      	b.n	80142f2 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	085b      	lsrs	r3, r3, #1
 8014146:	f003 0301 	and.w	r3, r3, #1
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00a      	beq.n	8014164 <HAL_SPI_IRQHandler+0x66>
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	09db      	lsrs	r3, r3, #7
 8014152:	f003 0301 	and.w	r3, r3, #1
 8014156:	2b00      	cmp	r3, #0
 8014158:	d004      	beq.n	8014164 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	4798      	blx	r3
    return;
 8014162:	e0c6      	b.n	80142f2 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014164:	69bb      	ldr	r3, [r7, #24]
 8014166:	095b      	lsrs	r3, r3, #5
 8014168:	f003 0301 	and.w	r3, r3, #1
 801416c:	2b00      	cmp	r3, #0
 801416e:	d10c      	bne.n	801418a <HAL_SPI_IRQHandler+0x8c>
 8014170:	69bb      	ldr	r3, [r7, #24]
 8014172:	099b      	lsrs	r3, r3, #6
 8014174:	f003 0301 	and.w	r3, r3, #1
 8014178:	2b00      	cmp	r3, #0
 801417a:	d106      	bne.n	801418a <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801417c:	69bb      	ldr	r3, [r7, #24]
 801417e:	0a1b      	lsrs	r3, r3, #8
 8014180:	f003 0301 	and.w	r3, r3, #1
 8014184:	2b00      	cmp	r3, #0
 8014186:	f000 80b4 	beq.w	80142f2 <HAL_SPI_IRQHandler+0x1f4>
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	095b      	lsrs	r3, r3, #5
 801418e:	f003 0301 	and.w	r3, r3, #1
 8014192:	2b00      	cmp	r3, #0
 8014194:	f000 80ad 	beq.w	80142f2 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014198:	69bb      	ldr	r3, [r7, #24]
 801419a:	099b      	lsrs	r3, r3, #6
 801419c:	f003 0301 	and.w	r3, r3, #1
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d023      	beq.n	80141ec <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	d011      	beq.n	80141d4 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141b4:	f043 0204 	orr.w	r2, r3, #4
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80141bc:	2300      	movs	r3, #0
 80141be:	60bb      	str	r3, [r7, #8]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	60bb      	str	r3, [r7, #8]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	689b      	ldr	r3, [r3, #8]
 80141ce:	60bb      	str	r3, [r7, #8]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	e00b      	b.n	80141ec <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80141d4:	2300      	movs	r3, #0
 80141d6:	60fb      	str	r3, [r7, #12]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	60fb      	str	r3, [r7, #12]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	689b      	ldr	r3, [r3, #8]
 80141e6:	60fb      	str	r3, [r7, #12]
 80141e8:	68fb      	ldr	r3, [r7, #12]
        return;
 80141ea:	e082      	b.n	80142f2 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	095b      	lsrs	r3, r3, #5
 80141f0:	f003 0301 	and.w	r3, r3, #1
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d014      	beq.n	8014222 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141fc:	f043 0201 	orr.w	r2, r3, #1
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014204:	2300      	movs	r3, #0
 8014206:	613b      	str	r3, [r7, #16]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	689b      	ldr	r3, [r3, #8]
 801420e:	613b      	str	r3, [r7, #16]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801421e:	601a      	str	r2, [r3, #0]
 8014220:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014222:	69bb      	ldr	r3, [r7, #24]
 8014224:	0a1b      	lsrs	r3, r3, #8
 8014226:	f003 0301 	and.w	r3, r3, #1
 801422a:	2b00      	cmp	r3, #0
 801422c:	d00c      	beq.n	8014248 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014232:	f043 0208 	orr.w	r2, r3, #8
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801423a:	2300      	movs	r3, #0
 801423c:	617b      	str	r3, [r7, #20]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	617b      	str	r3, [r7, #20]
 8014246:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801424c:	2b00      	cmp	r3, #0
 801424e:	d04f      	beq.n	80142f0 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	685a      	ldr	r2, [r3, #4]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801425e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2201      	movs	r2, #1
 8014264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014268:	69fb      	ldr	r3, [r7, #28]
 801426a:	f003 0302 	and.w	r3, r3, #2
 801426e:	2b00      	cmp	r3, #0
 8014270:	d104      	bne.n	801427c <HAL_SPI_IRQHandler+0x17e>
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	f003 0301 	and.w	r3, r3, #1
 8014278:	2b00      	cmp	r3, #0
 801427a:	d034      	beq.n	80142e6 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	685a      	ldr	r2, [r3, #4]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	f022 0203 	bic.w	r2, r2, #3
 801428a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014290:	2b00      	cmp	r3, #0
 8014292:	d011      	beq.n	80142b8 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014298:	4a17      	ldr	r2, [pc, #92]	; (80142f8 <HAL_SPI_IRQHandler+0x1fa>)
 801429a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7f3 fe14 	bl	8007ece <HAL_DMA_Abort_IT>
 80142a6:	4603      	mov	r3, r0
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d005      	beq.n	80142b8 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d016      	beq.n	80142ee <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142c4:	4a0c      	ldr	r2, [pc, #48]	; (80142f8 <HAL_SPI_IRQHandler+0x1fa>)
 80142c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7f3 fdfe 	bl	8007ece <HAL_DMA_Abort_IT>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d00a      	beq.n	80142ee <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80142e4:	e003      	b.n	80142ee <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f000 f844 	bl	8014374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80142ec:	e000      	b.n	80142f0 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80142ee:	bf00      	nop
    return;
 80142f0:	bf00      	nop
  }
}
 80142f2:	3720      	adds	r7, #32
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	08014645 	.word	0x08014645

080142fc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80142fc:	b480      	push	{r7}
 80142fe:	b083      	sub	sp, #12
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8014304:	bf00      	nop
 8014306:	370c      	adds	r7, #12
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr

08014310 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014310:	b480      	push	{r7}
 8014312:	b083      	sub	sp, #12
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8014318:	bf00      	nop
 801431a:	370c      	adds	r7, #12
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014324:	b480      	push	{r7}
 8014326:	b083      	sub	sp, #12
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801432c:	bf00      	nop
 801432e:	370c      	adds	r7, #12
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8014340:	bf00      	nop
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8014354:	bf00      	nop
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr

08014360 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014368:	bf00      	nop
 801436a:	370c      	adds	r7, #12
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr

08014374 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014374:	b480      	push	{r7}
 8014376:	b083      	sub	sp, #12
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801437c:	bf00      	nop
 801437e:	370c      	adds	r7, #12
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr

08014388 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8014390:	bf00      	nop
 8014392:	370c      	adds	r7, #12
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143aa:	b2db      	uxtb	r3, r3
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	370c      	adds	r7, #12
 80143b0:	46bd      	mov	sp, r7
 80143b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b6:	4770      	bx	lr

080143b8 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 80143b8:	b480      	push	{r7}
 80143ba:	b083      	sub	sp, #12
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b086      	sub	sp, #24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80143de:	f7f2 fa45 	bl	800686c <HAL_GetTick>
 80143e2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143f2:	d03b      	beq.n	801446c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	685a      	ldr	r2, [r3, #4]
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	f022 0220 	bic.w	r2, r2, #32
 8014402:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	685a      	ldr	r2, [r3, #4]
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	f022 0202 	bic.w	r2, r2, #2
 8014412:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014414:	693a      	ldr	r2, [r7, #16]
 8014416:	2164      	movs	r1, #100	; 0x64
 8014418:	6978      	ldr	r0, [r7, #20]
 801441a:	f000 fc2c 	bl	8014c76 <SPI_EndRxTxTransaction>
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d005      	beq.n	8014430 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014428:	f043 0220 	orr.w	r2, r3, #32
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10a      	bne.n	801444e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014438:	2300      	movs	r3, #0
 801443a:	60fb      	str	r3, [r7, #12]
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	68db      	ldr	r3, [r3, #12]
 8014442:	60fb      	str	r3, [r7, #12]
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	689b      	ldr	r3, [r3, #8]
 801444a:	60fb      	str	r3, [r7, #12]
 801444c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	2200      	movs	r2, #0
 8014452:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	2201      	movs	r2, #1
 8014458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014460:	2b00      	cmp	r3, #0
 8014462:	d003      	beq.n	801446c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014464:	6978      	ldr	r0, [r7, #20]
 8014466:	f7ff ff85 	bl	8014374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801446a:	e002      	b.n	8014472 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 801446c:	6978      	ldr	r0, [r7, #20]
 801446e:	f7ff ff45 	bl	80142fc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014472:	3718      	adds	r7, #24
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014484:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014486:	f7f2 f9f1 	bl	800686c <HAL_GetTick>
 801448a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801449a:	d03b      	beq.n	8014514 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	685a      	ldr	r2, [r3, #4]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	f022 0220 	bic.w	r2, r2, #32
 80144aa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	689b      	ldr	r3, [r3, #8]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d10d      	bne.n	80144d0 <SPI_DMAReceiveCplt+0x58>
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80144bc:	d108      	bne.n	80144d0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	685a      	ldr	r2, [r3, #4]
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	f022 0203 	bic.w	r2, r2, #3
 80144cc:	605a      	str	r2, [r3, #4]
 80144ce:	e007      	b.n	80144e0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	685a      	ldr	r2, [r3, #4]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f022 0201 	bic.w	r2, r2, #1
 80144de:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80144e0:	68ba      	ldr	r2, [r7, #8]
 80144e2:	2164      	movs	r1, #100	; 0x64
 80144e4:	68f8      	ldr	r0, [r7, #12]
 80144e6:	f000 fb61 	bl	8014bac <SPI_EndRxTransaction>
 80144ea:	4603      	mov	r3, r0
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d002      	beq.n	80144f6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2220      	movs	r2, #32
 80144f4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2200      	movs	r2, #0
 80144fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2201      	movs	r2, #1
 8014500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014508:	2b00      	cmp	r3, #0
 801450a:	d003      	beq.n	8014514 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801450c:	68f8      	ldr	r0, [r7, #12]
 801450e:	f7ff ff31 	bl	8014374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014512:	e002      	b.n	801451a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8014514:	68f8      	ldr	r0, [r7, #12]
 8014516:	f7ff fefb 	bl	8014310 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801451a:	3710      	adds	r7, #16
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}

08014520 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801452c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801452e:	f7f2 f99d 	bl	800686c <HAL_GetTick>
 8014532:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014542:	d02f      	beq.n	80145a4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	685a      	ldr	r2, [r3, #4]
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	f022 0220 	bic.w	r2, r2, #32
 8014552:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014554:	68ba      	ldr	r2, [r7, #8]
 8014556:	2164      	movs	r1, #100	; 0x64
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f000 fb8c 	bl	8014c76 <SPI_EndRxTxTransaction>
 801455e:	4603      	mov	r3, r0
 8014560:	2b00      	cmp	r3, #0
 8014562:	d005      	beq.n	8014570 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014568:	f043 0220 	orr.w	r2, r3, #32
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	685a      	ldr	r2, [r3, #4]
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f022 0203 	bic.w	r2, r2, #3
 801457e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2200      	movs	r2, #0
 8014584:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2200      	movs	r2, #0
 801458a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2201      	movs	r2, #1
 8014590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014598:	2b00      	cmp	r3, #0
 801459a:	d003      	beq.n	80145a4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801459c:	68f8      	ldr	r0, [r7, #12]
 801459e:	f7ff fee9 	bl	8014374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80145a2:	e002      	b.n	80145aa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80145a4:	68f8      	ldr	r0, [r7, #12]
 80145a6:	f7ff febd 	bl	8014324 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145aa:	3710      	adds	r7, #16
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}

080145b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145bc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f7ff feba 	bl	8014338 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145c4:	bf00      	nop
 80145c6:	3710      	adds	r7, #16
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80145da:	68f8      	ldr	r0, [r7, #12]
 80145dc:	f7ff feb6 	bl	801434c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145e0:	bf00      	nop
 80145e2:	3710      	adds	r7, #16
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}

080145e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b084      	sub	sp, #16
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145f4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f7ff feb2 	bl	8014360 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145fc:	bf00      	nop
 80145fe:	3710      	adds	r7, #16
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014610:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	685a      	ldr	r2, [r3, #4]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	f022 0203 	bic.w	r2, r2, #3
 8014620:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014626:	f043 0210 	orr.w	r2, r3, #16
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	2201      	movs	r2, #1
 8014632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014636:	68f8      	ldr	r0, [r7, #12]
 8014638:	f7ff fe9c 	bl	8014374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801463c:	bf00      	nop
 801463e:	3710      	adds	r7, #16
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b084      	sub	sp, #16
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014650:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	2200      	movs	r2, #0
 8014656:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2200      	movs	r2, #0
 801465c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801465e:	68f8      	ldr	r0, [r7, #12]
 8014660:	f7ff fe88 	bl	8014374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014664:	bf00      	nop
 8014666:	3710      	adds	r7, #16
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b086      	sub	sp, #24
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014678:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 801467a:	697b      	ldr	r3, [r7, #20]
 801467c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801467e:	2200      	movs	r2, #0
 8014680:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014682:	4b2d      	ldr	r3, [pc, #180]	; (8014738 <SPI_DMATxAbortCallback+0xcc>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4a2d      	ldr	r2, [pc, #180]	; (801473c <SPI_DMATxAbortCallback+0xd0>)
 8014688:	fba2 2303 	umull	r2, r3, r2, r3
 801468c:	0a5b      	lsrs	r3, r3, #9
 801468e:	2264      	movs	r2, #100	; 0x64
 8014690:	fb02 f303 	mul.w	r3, r2, r3
 8014694:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	685a      	ldr	r2, [r3, #4]
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f022 0202 	bic.w	r2, r2, #2
 80146a4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d106      	bne.n	80146ba <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80146b8:	e009      	b.n	80146ce <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	3b01      	subs	r3, #1
 80146be:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	689b      	ldr	r3, [r3, #8]
 80146c6:	f003 0302 	and.w	r3, r3, #2
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d0eb      	beq.n	80146a6 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d004      	beq.n	80146e0 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d126      	bne.n	801472e <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	2200      	movs	r2, #0
 80146e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	2200      	movs	r2, #0
 80146ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146f0:	2b40      	cmp	r3, #64	; 0x40
 80146f2:	d002      	beq.n	80146fa <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	2200      	movs	r2, #0
 80146f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80146fa:	2300      	movs	r3, #0
 80146fc:	60bb      	str	r3, [r7, #8]
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	68db      	ldr	r3, [r3, #12]
 8014704:	60bb      	str	r3, [r7, #8]
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	689b      	ldr	r3, [r3, #8]
 801470c:	60bb      	str	r3, [r7, #8]
 801470e:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014710:	2300      	movs	r3, #0
 8014712:	60fb      	str	r3, [r7, #12]
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	689b      	ldr	r3, [r3, #8]
 801471a:	60fb      	str	r3, [r7, #12]
 801471c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	2201      	movs	r2, #1
 8014722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014726:	6978      	ldr	r0, [r7, #20]
 8014728:	f7ff fe2e 	bl	8014388 <HAL_SPI_AbortCpltCallback>
 801472c:	e000      	b.n	8014730 <SPI_DMATxAbortCallback+0xc4>
      return;
 801472e:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014730:	3718      	adds	r7, #24
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	20000058 	.word	0x20000058
 801473c:	057619f1 	.word	0x057619f1

08014740 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801474c:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	681a      	ldr	r2, [r3, #0]
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801475c:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014762:	2200      	movs	r2, #0
 8014764:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	685a      	ldr	r2, [r3, #4]
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	f022 0201 	bic.w	r2, r2, #1
 8014774:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014776:	f7f2 f879 	bl	800686c <HAL_GetTick>
 801477a:	4603      	mov	r3, r0
 801477c:	461a      	mov	r2, r3
 801477e:	2164      	movs	r1, #100	; 0x64
 8014780:	6978      	ldr	r0, [r7, #20]
 8014782:	f000 fa78 	bl	8014c76 <SPI_EndRxTxTransaction>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d005      	beq.n	8014798 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801479c:	2b00      	cmp	r3, #0
 801479e:	d004      	beq.n	80147aa <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d126      	bne.n	80147f8 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2200      	movs	r2, #0
 80147ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	2200      	movs	r2, #0
 80147b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147ba:	2b40      	cmp	r3, #64	; 0x40
 80147bc:	d002      	beq.n	80147c4 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2200      	movs	r2, #0
 80147c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80147c4:	2300      	movs	r3, #0
 80147c6:	60fb      	str	r3, [r7, #12]
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	60fb      	str	r3, [r7, #12]
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	60fb      	str	r3, [r7, #12]
 80147d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80147da:	2300      	movs	r3, #0
 80147dc:	613b      	str	r3, [r7, #16]
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	689b      	ldr	r3, [r3, #8]
 80147e4:	613b      	str	r3, [r7, #16]
 80147e6:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	2201      	movs	r2, #1
 80147ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80147f0:	6978      	ldr	r0, [r7, #20]
 80147f2:	f7ff fdc9 	bl	8014388 <HAL_SPI_AbortCpltCallback>
 80147f6:	e000      	b.n	80147fa <SPI_DMARxAbortCallback+0xba>
      return;
 80147f8:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80147fa:	3718      	adds	r7, #24
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}

08014800 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	f103 020c 	add.w	r2, r3, #12
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014814:	7812      	ldrb	r2, [r2, #0]
 8014816:	b2d2      	uxtb	r2, r2
 8014818:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801481e:	1c5a      	adds	r2, r3, #1
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014828:	b29b      	uxth	r3, r3
 801482a:	3b01      	subs	r3, #1
 801482c:	b29a      	uxth	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014836:	b29b      	uxth	r3, r3
 8014838:	2b00      	cmp	r3, #0
 801483a:	d10f      	bne.n	801485c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	685a      	ldr	r2, [r3, #4]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801484a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014850:	b29b      	uxth	r3, r3
 8014852:	2b00      	cmp	r3, #0
 8014854:	d102      	bne.n	801485c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 fa4e 	bl	8014cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801485c:	bf00      	nop
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	330c      	adds	r3, #12
 8014876:	7812      	ldrb	r2, [r2, #0]
 8014878:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801487e:	1c5a      	adds	r2, r3, #1
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014888:	b29b      	uxth	r3, r3
 801488a:	3b01      	subs	r3, #1
 801488c:	b29a      	uxth	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014896:	b29b      	uxth	r3, r3
 8014898:	2b00      	cmp	r3, #0
 801489a:	d10f      	bne.n	80148bc <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	685a      	ldr	r2, [r3, #4]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80148aa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d102      	bne.n	80148bc <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f000 fa1e 	bl	8014cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80148bc:	bf00      	nop
 80148be:	3708      	adds	r7, #8
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	68da      	ldr	r2, [r3, #12]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148d6:	b292      	uxth	r2, r2
 80148d8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148de:	1c9a      	adds	r2, r3, #2
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	3b01      	subs	r3, #1
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d10f      	bne.n	801491c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	685a      	ldr	r2, [r3, #4]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801490a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014910:	b29b      	uxth	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d102      	bne.n	801491c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 f9ee 	bl	8014cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801491c:	bf00      	nop
 801491e:	3708      	adds	r7, #8
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014930:	881a      	ldrh	r2, [r3, #0]
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801493c:	1c9a      	adds	r2, r3, #2
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014946:	b29b      	uxth	r3, r3
 8014948:	3b01      	subs	r3, #1
 801494a:	b29a      	uxth	r2, r3
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014954:	b29b      	uxth	r3, r3
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10f      	bne.n	801497a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	685a      	ldr	r2, [r3, #4]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014968:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801496e:	b29b      	uxth	r3, r3
 8014970:	2b00      	cmp	r3, #0
 8014972:	d102      	bne.n	801497a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f000 f9bf 	bl	8014cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801497a:	bf00      	nop
 801497c:	3708      	adds	r7, #8
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}

08014982 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014982:	b580      	push	{r7, lr}
 8014984:	b082      	sub	sp, #8
 8014986:	af00      	add	r7, sp, #0
 8014988:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	f103 020c 	add.w	r2, r3, #12
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014996:	7812      	ldrb	r2, [r2, #0]
 8014998:	b2d2      	uxtb	r2, r2
 801499a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149a0:	1c5a      	adds	r2, r3, #1
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	3b01      	subs	r3, #1
 80149ae:	b29a      	uxth	r2, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d102      	bne.n	80149c4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f000 fa0e 	bl	8014de0 <SPI_CloseRx_ISR>
  }
}
 80149c4:	bf00      	nop
 80149c6:	3708      	adds	r7, #8
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	68da      	ldr	r2, [r3, #12]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149de:	b292      	uxth	r2, r2
 80149e0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149e6:	1c9a      	adds	r2, r3, #2
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	3b01      	subs	r3, #1
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d102      	bne.n	8014a0a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 f9eb 	bl	8014de0 <SPI_CloseRx_ISR>
  }
}
 8014a0a:	bf00      	nop
 8014a0c:	3708      	adds	r7, #8
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}

08014a12 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014a12:	b580      	push	{r7, lr}
 8014a14:	b082      	sub	sp, #8
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	330c      	adds	r3, #12
 8014a24:	7812      	ldrb	r2, [r2, #0]
 8014a26:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a2c:	1c5a      	adds	r2, r3, #1
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	3b01      	subs	r3, #1
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a44:	b29b      	uxth	r3, r3
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d102      	bne.n	8014a50 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f000 fa07 	bl	8014e5e <SPI_CloseTx_ISR>
  }
}
 8014a50:	bf00      	nop
 8014a52:	3708      	adds	r7, #8
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a64:	881a      	ldrh	r2, [r3, #0]
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a70:	1c9a      	adds	r2, r3, #2
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	3b01      	subs	r3, #1
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d102      	bne.n	8014a94 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f000 f9e5 	bl	8014e5e <SPI_CloseTx_ISR>
  }
}
 8014a94:	bf00      	nop
 8014a96:	3708      	adds	r7, #8
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}

08014a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b088      	sub	sp, #32
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	60f8      	str	r0, [r7, #12]
 8014aa4:	60b9      	str	r1, [r7, #8]
 8014aa6:	603b      	str	r3, [r7, #0]
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014aac:	f7f1 fede 	bl	800686c <HAL_GetTick>
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab4:	1a9b      	subs	r3, r3, r2
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	4413      	add	r3, r2
 8014aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014abc:	f7f1 fed6 	bl	800686c <HAL_GetTick>
 8014ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014ac2:	4b39      	ldr	r3, [pc, #228]	; (8014ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	015b      	lsls	r3, r3, #5
 8014ac8:	0d1b      	lsrs	r3, r3, #20
 8014aca:	69fa      	ldr	r2, [r7, #28]
 8014acc:	fb02 f303 	mul.w	r3, r2, r3
 8014ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014ad2:	e054      	b.n	8014b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ada:	d050      	beq.n	8014b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014adc:	f7f1 fec6 	bl	800686c <HAL_GetTick>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	69bb      	ldr	r3, [r7, #24]
 8014ae4:	1ad3      	subs	r3, r2, r3
 8014ae6:	69fa      	ldr	r2, [r7, #28]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d902      	bls.n	8014af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d13d      	bne.n	8014b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	685a      	ldr	r2, [r3, #4]
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b0a:	d111      	bne.n	8014b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	689b      	ldr	r3, [r3, #8]
 8014b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b14:	d004      	beq.n	8014b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	689b      	ldr	r3, [r3, #8]
 8014b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b1e:	d107      	bne.n	8014b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b38:	d10f      	bne.n	8014b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014b48:	601a      	str	r2, [r3, #0]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	681a      	ldr	r2, [r3, #0]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2201      	movs	r2, #1
 8014b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2200      	movs	r2, #0
 8014b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014b6a:	2303      	movs	r3, #3
 8014b6c:	e017      	b.n	8014b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d101      	bne.n	8014b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014b74:	2300      	movs	r3, #0
 8014b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	689a      	ldr	r2, [r3, #8]
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	4013      	ands	r3, r2
 8014b88:	68ba      	ldr	r2, [r7, #8]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	bf0c      	ite	eq
 8014b8e:	2301      	moveq	r3, #1
 8014b90:	2300      	movne	r3, #0
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	461a      	mov	r2, r3
 8014b96:	79fb      	ldrb	r3, [r7, #7]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d19b      	bne.n	8014ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014b9c:	2300      	movs	r3, #0
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3720      	adds	r7, #32
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	20000058 	.word	0x20000058

08014bac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b086      	sub	sp, #24
 8014bb0:	af02      	add	r7, sp, #8
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bc0:	d111      	bne.n	8014be6 <SPI_EndRxTransaction+0x3a>
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	689b      	ldr	r3, [r3, #8]
 8014bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014bca:	d004      	beq.n	8014bd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	689b      	ldr	r3, [r3, #8]
 8014bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bd4:	d107      	bne.n	8014be6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014be4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bee:	d12a      	bne.n	8014c46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	689b      	ldr	r3, [r3, #8]
 8014bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bf8:	d012      	beq.n	8014c20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	9300      	str	r3, [sp, #0]
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	2200      	movs	r2, #0
 8014c02:	2180      	movs	r1, #128	; 0x80
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	f7ff ff49 	bl	8014a9c <SPI_WaitFlagStateUntilTimeout>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d02d      	beq.n	8014c6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c14:	f043 0220 	orr.w	r2, r3, #32
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014c1c:	2303      	movs	r3, #3
 8014c1e:	e026      	b.n	8014c6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	9300      	str	r3, [sp, #0]
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	2200      	movs	r2, #0
 8014c28:	2101      	movs	r1, #1
 8014c2a:	68f8      	ldr	r0, [r7, #12]
 8014c2c:	f7ff ff36 	bl	8014a9c <SPI_WaitFlagStateUntilTimeout>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d01a      	beq.n	8014c6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c3a:	f043 0220 	orr.w	r2, r3, #32
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014c42:	2303      	movs	r3, #3
 8014c44:	e013      	b.n	8014c6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	9300      	str	r3, [sp, #0]
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	2101      	movs	r1, #1
 8014c50:	68f8      	ldr	r0, [r7, #12]
 8014c52:	f7ff ff23 	bl	8014a9c <SPI_WaitFlagStateUntilTimeout>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d007      	beq.n	8014c6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c60:	f043 0220 	orr.w	r2, r3, #32
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014c68:	2303      	movs	r3, #3
 8014c6a:	e000      	b.n	8014c6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014c6c:	2300      	movs	r3, #0
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3710      	adds	r7, #16
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b088      	sub	sp, #32
 8014c7a:	af02      	add	r7, sp, #8
 8014c7c:	60f8      	str	r0, [r7, #12]
 8014c7e:	60b9      	str	r1, [r7, #8]
 8014c80:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014c82:	4b1b      	ldr	r3, [pc, #108]	; (8014cf0 <SPI_EndRxTxTransaction+0x7a>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	4a1b      	ldr	r2, [pc, #108]	; (8014cf4 <SPI_EndRxTxTransaction+0x7e>)
 8014c88:	fba2 2303 	umull	r2, r3, r2, r3
 8014c8c:	0d5b      	lsrs	r3, r3, #21
 8014c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014c92:	fb02 f303 	mul.w	r3, r2, r3
 8014c96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014ca0:	d112      	bne.n	8014cc8 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	2200      	movs	r2, #0
 8014caa:	2180      	movs	r1, #128	; 0x80
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	f7ff fef5 	bl	8014a9c <SPI_WaitFlagStateUntilTimeout>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d016      	beq.n	8014ce6 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cbc:	f043 0220 	orr.w	r2, r3, #32
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014cc4:	2303      	movs	r3, #3
 8014cc6:	e00f      	b.n	8014ce8 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d00a      	beq.n	8014ce4 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	3b01      	subs	r3, #1
 8014cd2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	689b      	ldr	r3, [r3, #8]
 8014cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014cde:	2b80      	cmp	r3, #128	; 0x80
 8014ce0:	d0f2      	beq.n	8014cc8 <SPI_EndRxTxTransaction+0x52>
 8014ce2:	e000      	b.n	8014ce6 <SPI_EndRxTxTransaction+0x70>
        break;
 8014ce4:	bf00      	nop
  }

  return HAL_OK;
 8014ce6:	2300      	movs	r3, #0
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3718      	adds	r7, #24
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}
 8014cf0:	20000058 	.word	0x20000058
 8014cf4:	165e9f81 	.word	0x165e9f81

08014cf8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b086      	sub	sp, #24
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014d00:	4b35      	ldr	r3, [pc, #212]	; (8014dd8 <SPI_CloseRxTx_ISR+0xe0>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	4a35      	ldr	r2, [pc, #212]	; (8014ddc <SPI_CloseRxTx_ISR+0xe4>)
 8014d06:	fba2 2303 	umull	r2, r3, r2, r3
 8014d0a:	0a5b      	lsrs	r3, r3, #9
 8014d0c:	2264      	movs	r2, #100	; 0x64
 8014d0e:	fb02 f303 	mul.w	r3, r2, r3
 8014d12:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014d14:	f7f1 fdaa 	bl	800686c <HAL_GetTick>
 8014d18:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	685a      	ldr	r2, [r3, #4]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f022 0220 	bic.w	r2, r2, #32
 8014d28:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d106      	bne.n	8014d3e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d34:	f043 0220 	orr.w	r2, r3, #32
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014d3c:	e009      	b.n	8014d52 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	3b01      	subs	r3, #1
 8014d42:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	689b      	ldr	r3, [r3, #8]
 8014d4a:	f003 0302 	and.w	r3, r3, #2
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d0eb      	beq.n	8014d2a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014d52:	697a      	ldr	r2, [r7, #20]
 8014d54:	2164      	movs	r1, #100	; 0x64
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f7ff ff8d 	bl	8014c76 <SPI_EndRxTxTransaction>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d005      	beq.n	8014d6e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d66:	f043 0220 	orr.w	r2, r3, #32
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	689b      	ldr	r3, [r3, #8]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d10a      	bne.n	8014d8c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014d76:	2300      	movs	r3, #0
 8014d78:	60fb      	str	r3, [r7, #12]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	68db      	ldr	r3, [r3, #12]
 8014d80:	60fb      	str	r3, [r7, #12]
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	689b      	ldr	r3, [r3, #8]
 8014d88:	60fb      	str	r3, [r7, #12]
 8014d8a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d115      	bne.n	8014dc0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014d9a:	b2db      	uxtb	r3, r3
 8014d9c:	2b04      	cmp	r3, #4
 8014d9e:	d107      	bne.n	8014db0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2201      	movs	r2, #1
 8014da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f7ff fab1 	bl	8014310 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014dae:	e00e      	b.n	8014dce <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2201      	movs	r2, #1
 8014db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f7ff fab3 	bl	8014324 <HAL_SPI_TxRxCpltCallback>
}
 8014dbe:	e006      	b.n	8014dce <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2201      	movs	r2, #1
 8014dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f7ff fad3 	bl	8014374 <HAL_SPI_ErrorCallback>
}
 8014dce:	bf00      	nop
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	20000058 	.word	0x20000058
 8014ddc:	057619f1 	.word	0x057619f1

08014de0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b084      	sub	sp, #16
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	685a      	ldr	r2, [r3, #4]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014df6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014df8:	f7f1 fd38 	bl	800686c <HAL_GetTick>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	461a      	mov	r2, r3
 8014e00:	2164      	movs	r1, #100	; 0x64
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f7ff fed2 	bl	8014bac <SPI_EndRxTransaction>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d005      	beq.n	8014e1a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e12:	f043 0220 	orr.w	r2, r3, #32
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	689b      	ldr	r3, [r3, #8]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d10a      	bne.n	8014e38 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e22:	2300      	movs	r3, #0
 8014e24:	60fb      	str	r3, [r7, #12]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	60fb      	str	r3, [r7, #12]
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	689b      	ldr	r3, [r3, #8]
 8014e34:	60fb      	str	r3, [r7, #12]
 8014e36:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d103      	bne.n	8014e50 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7ff fa61 	bl	8014310 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014e4e:	e002      	b.n	8014e56 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff fa8f 	bl	8014374 <HAL_SPI_ErrorCallback>
}
 8014e56:	bf00      	nop
 8014e58:	3710      	adds	r7, #16
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b086      	sub	sp, #24
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014e66:	4b2c      	ldr	r3, [pc, #176]	; (8014f18 <SPI_CloseTx_ISR+0xba>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	4a2c      	ldr	r2, [pc, #176]	; (8014f1c <SPI_CloseTx_ISR+0xbe>)
 8014e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8014e70:	0a5b      	lsrs	r3, r3, #9
 8014e72:	2264      	movs	r2, #100	; 0x64
 8014e74:	fb02 f303 	mul.w	r3, r2, r3
 8014e78:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014e7a:	f7f1 fcf7 	bl	800686c <HAL_GetTick>
 8014e7e:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d106      	bne.n	8014e94 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e8a:	f043 0220 	orr.w	r2, r3, #32
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014e92:	e009      	b.n	8014ea8 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	3b01      	subs	r3, #1
 8014e98:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	689b      	ldr	r3, [r3, #8]
 8014ea0:	f003 0302 	and.w	r3, r3, #2
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d0eb      	beq.n	8014e80 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	685a      	ldr	r2, [r3, #4]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014eb6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014eb8:	697a      	ldr	r2, [r7, #20]
 8014eba:	2164      	movs	r1, #100	; 0x64
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7ff feda 	bl	8014c76 <SPI_EndRxTxTransaction>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d005      	beq.n	8014ed4 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ecc:	f043 0220 	orr.w	r2, r3, #32
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	689b      	ldr	r3, [r3, #8]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d10a      	bne.n	8014ef2 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014edc:	2300      	movs	r3, #0
 8014ede:	60fb      	str	r3, [r7, #12]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	68db      	ldr	r3, [r3, #12]
 8014ee6:	60fb      	str	r3, [r7, #12]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	689b      	ldr	r3, [r3, #8]
 8014eee:	60fb      	str	r3, [r7, #12]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2201      	movs	r2, #1
 8014ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d003      	beq.n	8014f0a <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f7ff fa36 	bl	8014374 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014f08:	e002      	b.n	8014f10 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f7ff f9f6 	bl	80142fc <HAL_SPI_TxCpltCallback>
}
 8014f10:	bf00      	nop
 8014f12:	3718      	adds	r7, #24
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	20000058 	.word	0x20000058
 8014f1c:	057619f1 	.word	0x057619f1

08014f20 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b085      	sub	sp, #20
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014f2c:	4b1e      	ldr	r3, [pc, #120]	; (8014fa8 <SPI_AbortRx_ISR+0x88>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	4a1e      	ldr	r2, [pc, #120]	; (8014fac <SPI_AbortRx_ISR+0x8c>)
 8014f32:	fba2 2303 	umull	r2, r3, r2, r3
 8014f36:	0a5b      	lsrs	r3, r3, #9
 8014f38:	2264      	movs	r2, #100	; 0x64
 8014f3a:	fb02 f303 	mul.w	r3, r2, r3
 8014f3e:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d106      	bne.n	8014f54 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014f52:	e009      	b.n	8014f68 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	3b01      	subs	r3, #1
 8014f58:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	689b      	ldr	r3, [r3, #8]
 8014f60:	f003 0302 	and.w	r3, r3, #2
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d0eb      	beq.n	8014f40 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f76:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014f86:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8014f90:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2207      	movs	r2, #7
 8014f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014f9a:	bf00      	nop
 8014f9c:	3714      	adds	r7, #20
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop
 8014fa8:	20000058 	.word	0x20000058
 8014fac:	057619f1 	.word	0x057619f1

08014fb0 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	685a      	ldr	r2, [r3, #4]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014fc6:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	681a      	ldr	r2, [r3, #0]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014fd6:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2207      	movs	r2, #7
 8014fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014fe0:	bf00      	nop
 8014fe2:	370c      	adds	r7, #12
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fea:	4770      	bx	lr

08014fec <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b084      	sub	sp, #16
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
 8014ff6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d101      	bne.n	8015002 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8014ffe:	2301      	movs	r3, #1
 8015000:	e034      	b.n	801506c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015008:	b2db      	uxtb	r3, r3
 801500a:	2b00      	cmp	r3, #0
 801500c:	d106      	bne.n	801501c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2200      	movs	r2, #0
 8015012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	f7f0 ff56 	bl	8005ec8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	3308      	adds	r3, #8
 8015024:	4619      	mov	r1, r3
 8015026:	4610      	mov	r0, r2
 8015028:	f003 f9a0 	bl	801836c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	6818      	ldr	r0, [r3, #0]
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	689b      	ldr	r3, [r3, #8]
 8015034:	461a      	mov	r2, r3
 8015036:	68b9      	ldr	r1, [r7, #8]
 8015038:	f003 fa1e 	bl	8018478 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6858      	ldr	r0, [r3, #4]
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	689a      	ldr	r2, [r3, #8]
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015048:	6879      	ldr	r1, [r7, #4]
 801504a:	f003 fa52 	bl	80184f2 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	68fa      	ldr	r2, [r7, #12]
 8015054:	6892      	ldr	r2, [r2, #8]
 8015056:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	68fa      	ldr	r2, [r7, #12]
 8015060:	6892      	ldr	r2, [r2, #8]
 8015062:	f041 0101 	orr.w	r1, r1, #1
 8015066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 801506a:	2300      	movs	r3, #0
}
 801506c:	4618      	mov	r0, r3
 801506e:	3710      	adds	r7, #16
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f7f0 ff51 	bl	8005f24 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6818      	ldr	r0, [r3, #0]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	6859      	ldr	r1, [r3, #4]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	689b      	ldr	r3, [r3, #8]
 801508e:	461a      	mov	r2, r3
 8015090:	f003 f9be 	bl	8018410 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2200      	movs	r2, #0
 8015098:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2200      	movs	r2, #0
 80150a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80150a4:	2300      	movs	r3, #0
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	3708      	adds	r7, #8
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 80150ae:	b480      	push	{r7}
 80150b0:	b083      	sub	sp, #12
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 80150b6:	bf00      	nop
 80150b8:	370c      	adds	r7, #12
 80150ba:	46bd      	mov	sp, r7
 80150bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c0:	4770      	bx	lr

080150c2 <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 80150c2:	b480      	push	{r7}
 80150c4:	b083      	sub	sp, #12
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 80150ca:	bf00      	nop
 80150cc:	370c      	adds	r7, #12
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr

080150d6 <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 80150d6:	b480      	push	{r7}
 80150d8:	b087      	sub	sp, #28
 80150da:	af00      	add	r7, sp, #0
 80150dc:	60f8      	str	r0, [r7, #12]
 80150de:	60b9      	str	r1, [r7, #8]
 80150e0:	607a      	str	r2, [r7, #4]
 80150e2:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80150ee:	2b01      	cmp	r3, #1
 80150f0:	d101      	bne.n	80150f6 <HAL_SRAM_Read_8b+0x20>
 80150f2:	2302      	movs	r3, #2
 80150f4:	e022      	b.n	801513c <HAL_SRAM_Read_8b+0x66>
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	2201      	movs	r2, #1
 80150fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	2202      	movs	r2, #2
 8015102:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8015106:	e00d      	b.n	8015124 <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	781b      	ldrb	r3, [r3, #0]
 801510c:	b2da      	uxtb	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	3301      	adds	r3, #1
 8015116:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	3301      	adds	r3, #1
 801511c:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	3b01      	subs	r3, #1
 8015122:	603b      	str	r3, [r7, #0]
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d1ee      	bne.n	8015108 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2201      	movs	r2, #1
 801512e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	2200      	movs	r2, #0
 8015136:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 801513a:	2300      	movs	r3, #0
}
 801513c:	4618      	mov	r0, r3
 801513e:	371c      	adds	r7, #28
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr

08015148 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 8015148:	b480      	push	{r7}
 801514a:	b087      	sub	sp, #28
 801514c:	af00      	add	r7, sp, #0
 801514e:	60f8      	str	r0, [r7, #12]
 8015150:	60b9      	str	r1, [r7, #8]
 8015152:	607a      	str	r2, [r7, #4]
 8015154:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015160:	b2db      	uxtb	r3, r3
 8015162:	2b04      	cmp	r3, #4
 8015164:	d101      	bne.n	801516a <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 8015166:	2301      	movs	r3, #1
 8015168:	e028      	b.n	80151bc <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015170:	2b01      	cmp	r3, #1
 8015172:	d101      	bne.n	8015178 <HAL_SRAM_Write_8b+0x30>
 8015174:	2302      	movs	r3, #2
 8015176:	e021      	b.n	80151bc <HAL_SRAM_Write_8b+0x74>
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2201      	movs	r2, #1
 801517c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2202      	movs	r2, #2
 8015184:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015188:	e00c      	b.n	80151a4 <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	781a      	ldrb	r2, [r3, #0]
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	3301      	adds	r3, #1
 8015196:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	3301      	adds	r3, #1
 801519c:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	3b01      	subs	r3, #1
 80151a2:	603b      	str	r3, [r7, #0]
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d1ef      	bne.n	801518a <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2201      	movs	r2, #1
 80151ae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2200      	movs	r2, #0
 80151b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80151ba:	2300      	movs	r3, #0
}
 80151bc:	4618      	mov	r0, r3
 80151be:	371c      	adds	r7, #28
 80151c0:	46bd      	mov	sp, r7
 80151c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c6:	4770      	bx	lr

080151c8 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b087      	sub	sp, #28
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	60f8      	str	r0, [r7, #12]
 80151d0:	60b9      	str	r1, [r7, #8]
 80151d2:	607a      	str	r2, [r7, #4]
 80151d4:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 80151d6:	68bb      	ldr	r3, [r7, #8]
 80151d8:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80151e0:	2b01      	cmp	r3, #1
 80151e2:	d101      	bne.n	80151e8 <HAL_SRAM_Read_16b+0x20>
 80151e4:	2302      	movs	r3, #2
 80151e6:	e022      	b.n	801522e <HAL_SRAM_Read_16b+0x66>
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	2201      	movs	r2, #1
 80151ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2202      	movs	r2, #2
 80151f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80151f8:	e00d      	b.n	8015216 <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	881b      	ldrh	r3, [r3, #0]
 80151fe:	b29a      	uxth	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	3302      	adds	r3, #2
 8015208:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	3302      	adds	r3, #2
 801520e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	3b01      	subs	r3, #1
 8015214:	603b      	str	r3, [r7, #0]
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d1ee      	bne.n	80151fa <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	2201      	movs	r2, #1
 8015220:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2200      	movs	r2, #0
 8015228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 801522c:	2300      	movs	r3, #0
}
 801522e:	4618      	mov	r0, r3
 8015230:	371c      	adds	r7, #28
 8015232:	46bd      	mov	sp, r7
 8015234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015238:	4770      	bx	lr

0801523a <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 801523a:	b480      	push	{r7}
 801523c:	b087      	sub	sp, #28
 801523e:	af00      	add	r7, sp, #0
 8015240:	60f8      	str	r0, [r7, #12]
 8015242:	60b9      	str	r1, [r7, #8]
 8015244:	607a      	str	r2, [r7, #4]
 8015246:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015252:	b2db      	uxtb	r3, r3
 8015254:	2b04      	cmp	r3, #4
 8015256:	d101      	bne.n	801525c <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8015258:	2301      	movs	r3, #1
 801525a:	e028      	b.n	80152ae <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015262:	2b01      	cmp	r3, #1
 8015264:	d101      	bne.n	801526a <HAL_SRAM_Write_16b+0x30>
 8015266:	2302      	movs	r3, #2
 8015268:	e021      	b.n	80152ae <HAL_SRAM_Write_16b+0x74>
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2201      	movs	r2, #1
 801526e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2202      	movs	r2, #2
 8015276:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 801527a:	e00c      	b.n	8015296 <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	881a      	ldrh	r2, [r3, #0]
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	3302      	adds	r3, #2
 8015288:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	3302      	adds	r3, #2
 801528e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015290:	683b      	ldr	r3, [r7, #0]
 8015292:	3b01      	subs	r3, #1
 8015294:	603b      	str	r3, [r7, #0]
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d1ef      	bne.n	801527c <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2201      	movs	r2, #1
 80152a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	2200      	movs	r2, #0
 80152a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80152ac:	2300      	movs	r3, #0
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	371c      	adds	r7, #28
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr

080152ba <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80152ba:	b480      	push	{r7}
 80152bc:	b085      	sub	sp, #20
 80152be:	af00      	add	r7, sp, #0
 80152c0:	60f8      	str	r0, [r7, #12]
 80152c2:	60b9      	str	r1, [r7, #8]
 80152c4:	607a      	str	r2, [r7, #4]
 80152c6:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80152ce:	2b01      	cmp	r3, #1
 80152d0:	d101      	bne.n	80152d6 <HAL_SRAM_Read_32b+0x1c>
 80152d2:	2302      	movs	r3, #2
 80152d4:	e021      	b.n	801531a <HAL_SRAM_Read_32b+0x60>
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	2201      	movs	r2, #1
 80152da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	2202      	movs	r2, #2
 80152e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80152e6:	e00c      	b.n	8015302 <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	681a      	ldr	r2, [r3, #0]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	3304      	adds	r3, #4
 80152f4:	607b      	str	r3, [r7, #4]
    pAddress++;
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	3304      	adds	r3, #4
 80152fa:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	3b01      	subs	r3, #1
 8015300:	603b      	str	r3, [r7, #0]
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d1ef      	bne.n	80152e8 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2201      	movs	r2, #1
 801530c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	2200      	movs	r2, #0
 8015314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8015318:	2300      	movs	r3, #0
}
 801531a:	4618      	mov	r0, r3
 801531c:	3714      	adds	r7, #20
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr

08015326 <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8015326:	b480      	push	{r7}
 8015328:	b085      	sub	sp, #20
 801532a:	af00      	add	r7, sp, #0
 801532c:	60f8      	str	r0, [r7, #12]
 801532e:	60b9      	str	r1, [r7, #8]
 8015330:	607a      	str	r2, [r7, #4]
 8015332:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b04      	cmp	r3, #4
 801533e:	d101      	bne.n	8015344 <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 8015340:	2301      	movs	r3, #1
 8015342:	e028      	b.n	8015396 <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801534a:	2b01      	cmp	r3, #1
 801534c:	d101      	bne.n	8015352 <HAL_SRAM_Write_32b+0x2c>
 801534e:	2302      	movs	r3, #2
 8015350:	e021      	b.n	8015396 <HAL_SRAM_Write_32b+0x70>
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2201      	movs	r2, #1
 8015356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2202      	movs	r2, #2
 801535e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015362:	e00c      	b.n	801537e <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681a      	ldr	r2, [r3, #0]
 8015368:	68bb      	ldr	r3, [r7, #8]
 801536a:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	3304      	adds	r3, #4
 8015370:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	3304      	adds	r3, #4
 8015376:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	3b01      	subs	r3, #1
 801537c:	603b      	str	r3, [r7, #0]
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d1ef      	bne.n	8015364 <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2201      	movs	r2, #1
 8015388:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2200      	movs	r2, #0
 8015390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015394:	2300      	movs	r3, #0
}
 8015396:	4618      	mov	r0, r3
 8015398:	3714      	adds	r7, #20
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr

080153a2 <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b084      	sub	sp, #16
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	60f8      	str	r0, [r7, #12]
 80153aa:	60b9      	str	r1, [r7, #8]
 80153ac:	607a      	str	r2, [r7, #4]
 80153ae:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d101      	bne.n	80153be <HAL_SRAM_Read_DMA+0x1c>
 80153ba:	2302      	movs	r3, #2
 80153bc:	e01f      	b.n	80153fe <HAL_SRAM_Read_DMA+0x5c>
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	2201      	movs	r2, #1
 80153c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	2202      	movs	r2, #2
 80153ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153d2:	4a0d      	ldr	r2, [pc, #52]	; (8015408 <HAL_SRAM_Read_DMA+0x66>)
 80153d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153da:	4a0c      	ldr	r2, [pc, #48]	; (801540c <HAL_SRAM_Read_DMA+0x6a>)
 80153dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80153e2:	68b9      	ldr	r1, [r7, #8]
 80153e4:	687a      	ldr	r2, [r7, #4]
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	f7f2 fca9 	bl	8007d3e <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2201      	movs	r2, #1
 80153f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2200      	movs	r2, #0
 80153f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 80153fc:	2300      	movs	r3, #0
}
 80153fe:	4618      	mov	r0, r3
 8015400:	3710      	adds	r7, #16
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}
 8015406:	bf00      	nop
 8015408:	080150af 	.word	0x080150af
 801540c:	080150c3 	.word	0x080150c3

08015410 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b084      	sub	sp, #16
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	607a      	str	r2, [r7, #4]
 801541c:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015424:	b2db      	uxtb	r3, r3
 8015426:	2b04      	cmp	r3, #4
 8015428:	d101      	bne.n	801542e <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 801542a:	2301      	movs	r3, #1
 801542c:	e026      	b.n	801547c <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015434:	2b01      	cmp	r3, #1
 8015436:	d101      	bne.n	801543c <HAL_SRAM_Write_DMA+0x2c>
 8015438:	2302      	movs	r3, #2
 801543a:	e01f      	b.n	801547c <HAL_SRAM_Write_DMA+0x6c>
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	2201      	movs	r2, #1
 8015440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2202      	movs	r2, #2
 8015448:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015450:	4a0c      	ldr	r2, [pc, #48]	; (8015484 <HAL_SRAM_Write_DMA+0x74>)
 8015452:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015458:	4a0b      	ldr	r2, [pc, #44]	; (8015488 <HAL_SRAM_Write_DMA+0x78>)
 801545a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015460:	6879      	ldr	r1, [r7, #4]
 8015462:	68ba      	ldr	r2, [r7, #8]
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	f7f2 fc6a 	bl	8007d3e <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	2201      	movs	r2, #1
 801546e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2200      	movs	r2, #0
 8015476:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 801547a:	2300      	movs	r3, #0
}
 801547c:	4618      	mov	r0, r3
 801547e:	3710      	adds	r7, #16
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}
 8015484:	080150af 	.word	0x080150af
 8015488:	080150c3 	.word	0x080150c3

0801548c <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801549a:	2b01      	cmp	r3, #1
 801549c:	d101      	bne.n	80154a2 <HAL_SRAM_WriteOperation_Enable+0x16>
 801549e:	2302      	movs	r3, #2
 80154a0:	e014      	b.n	80154cc <HAL_SRAM_WriteOperation_Enable+0x40>
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2201      	movs	r2, #1
 80154a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681a      	ldr	r2, [r3, #0]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	4619      	mov	r1, r3
 80154b4:	4610      	mov	r0, r2
 80154b6:	f003 f85b 	bl	8018570 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2201      	movs	r2, #1
 80154be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2200      	movs	r2, #0
 80154c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 80154ca:	2300      	movs	r3, #0
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3708      	adds	r7, #8
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}

080154d4 <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d101      	bne.n	80154ea <HAL_SRAM_WriteOperation_Disable+0x16>
 80154e6:	2302      	movs	r3, #2
 80154e8:	e018      	b.n	801551c <HAL_SRAM_WriteOperation_Disable+0x48>
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2201      	movs	r2, #1
 80154ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2202      	movs	r2, #2
 80154f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681a      	ldr	r2, [r3, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	689b      	ldr	r3, [r3, #8]
 8015502:	4619      	mov	r1, r3
 8015504:	4610      	mov	r0, r2
 8015506:	f003 f849 	bl	801859c <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2204      	movs	r2, #4
 801550e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2200      	movs	r2, #0
 8015516:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 801551a:	2300      	movs	r3, #0
}
 801551c:	4618      	mov	r0, r3
 801551e:	3708      	adds	r7, #8
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}

08015524 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
  return hsram->State;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015532:	b2db      	uxtb	r3, r3
}
 8015534:	4618      	mov	r0, r3
 8015536:	370c      	adds	r7, #12
 8015538:	46bd      	mov	sp, r7
 801553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553e:	4770      	bx	lr

08015540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d101      	bne.n	8015552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801554e:	2301      	movs	r3, #1
 8015550:	e03f      	b.n	80155d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015558:	b2db      	uxtb	r3, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	d106      	bne.n	801556c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2200      	movs	r2, #0
 8015562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f7f0 fbf0 	bl	8005d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2224      	movs	r2, #36	; 0x24
 8015570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	68da      	ldr	r2, [r3, #12]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f002 fc7e 	bl	8017e86 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	691a      	ldr	r2, [r3, #16]
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	695a      	ldr	r2, [r3, #20]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80155a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	68da      	ldr	r2, [r3, #12]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80155b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2200      	movs	r2, #0
 80155be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2220      	movs	r2, #32
 80155c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2220      	movs	r2, #32
 80155cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b082      	sub	sp, #8
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d101      	bne.n	80155ec <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80155e8:	2301      	movs	r3, #1
 80155ea:	e047      	b.n	801567c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d106      	bne.n	8015606 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2200      	movs	r2, #0
 80155fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f7f0 fba3 	bl	8005d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2224      	movs	r2, #36	; 0x24
 801560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	68da      	ldr	r2, [r3, #12]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801561c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f002 fc31 	bl	8017e86 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	691a      	ldr	r2, [r3, #16]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015632:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	695a      	ldr	r2, [r3, #20]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8015642:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	695a      	ldr	r2, [r3, #20]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f042 0208 	orr.w	r2, r2, #8
 8015652:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	68da      	ldr	r2, [r3, #12]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015662:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2200      	movs	r2, #0
 8015668:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2220      	movs	r2, #32
 801566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2220      	movs	r2, #32
 8015676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801567a:	2300      	movs	r3, #0
}
 801567c:	4618      	mov	r0, r3
 801567e:	3708      	adds	r7, #8
 8015680:	46bd      	mov	sp, r7
 8015682:	bd80      	pop	{r7, pc}

08015684 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8015694:	2301      	movs	r3, #1
 8015696:	e057      	b.n	8015748 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d106      	bne.n	80156b2 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f7f0 fb4d 	bl	8005d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2224      	movs	r2, #36	; 0x24
 80156b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68da      	ldr	r2, [r3, #12]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80156c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f002 fbdb 	bl	8017e86 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	691a      	ldr	r2, [r3, #16]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80156de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	695a      	ldr	r2, [r3, #20]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80156ee:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	691a      	ldr	r2, [r3, #16]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80156fe:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	691a      	ldr	r2, [r3, #16]
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	f022 0220 	bic.w	r2, r2, #32
 801570e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	6919      	ldr	r1, [r3, #16]
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	683a      	ldr	r2, [r7, #0]
 801571c:	430a      	orrs	r2, r1
 801571e:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	68da      	ldr	r2, [r3, #12]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801572e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2220      	movs	r2, #32
 801573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2220      	movs	r2, #32
 8015742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}

08015750 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	460b      	mov	r3, r1
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d101      	bne.n	8015768 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8015764:	2301      	movs	r3, #1
 8015766:	e05f      	b.n	8015828 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801576e:	b2db      	uxtb	r3, r3
 8015770:	2b00      	cmp	r3, #0
 8015772:	d106      	bne.n	8015782 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2200      	movs	r2, #0
 8015778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801577c:	68f8      	ldr	r0, [r7, #12]
 801577e:	f7f0 fae5 	bl	8005d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	2224      	movs	r2, #36	; 0x24
 8015786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	68da      	ldr	r2, [r3, #12]
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015798:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f002 fb73 	bl	8017e86 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	691a      	ldr	r2, [r3, #16]
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80157ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	695a      	ldr	r2, [r3, #20]
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80157be:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	691a      	ldr	r2, [r3, #16]
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	f022 020f 	bic.w	r2, r2, #15
 80157ce:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	6919      	ldr	r1, [r3, #16]
 80157d6:	7afa      	ldrb	r2, [r7, #11]
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	430a      	orrs	r2, r1
 80157de:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	68da      	ldr	r2, [r3, #12]
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80157ee:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	68d9      	ldr	r1, [r3, #12]
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	430a      	orrs	r2, r1
 80157fe:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	68da      	ldr	r2, [r3, #12]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801580e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	2200      	movs	r2, #0
 8015814:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	2220      	movs	r2, #32
 801581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	2220      	movs	r2, #32
 8015822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015826:	2300      	movs	r3, #0
}
 8015828:	4618      	mov	r0, r3
 801582a:	3710      	adds	r7, #16
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d101      	bne.n	8015842 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 801583e:	2301      	movs	r3, #1
 8015840:	e021      	b.n	8015886 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	2224      	movs	r2, #36	; 0x24
 8015846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	68da      	ldr	r2, [r3, #12]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015858:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f7f0 fac6 	bl	8005dec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2200      	movs	r2, #0
 8015864:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2200      	movs	r2, #0
 801586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2200      	movs	r2, #0
 8015872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2200      	movs	r2, #0
 801587a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	2200      	movs	r2, #0
 8015880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015884:	2300      	movs	r3, #0
}
 8015886:	4618      	mov	r0, r3
 8015888:	3708      	adds	r7, #8
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801588e:	b580      	push	{r7, lr}
 8015890:	b08a      	sub	sp, #40	; 0x28
 8015892:	af02      	add	r7, sp, #8
 8015894:	60f8      	str	r0, [r7, #12]
 8015896:	60b9      	str	r1, [r7, #8]
 8015898:	603b      	str	r3, [r7, #0]
 801589a:	4613      	mov	r3, r2
 801589c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801589e:	2300      	movs	r3, #0
 80158a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80158a8:	b2db      	uxtb	r3, r3
 80158aa:	2b20      	cmp	r3, #32
 80158ac:	d17c      	bne.n	80159a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d002      	beq.n	80158ba <HAL_UART_Transmit+0x2c>
 80158b4:	88fb      	ldrh	r3, [r7, #6]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d101      	bne.n	80158be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80158ba:	2301      	movs	r3, #1
 80158bc:	e075      	b.n	80159aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80158c4:	2b01      	cmp	r3, #1
 80158c6:	d101      	bne.n	80158cc <HAL_UART_Transmit+0x3e>
 80158c8:	2302      	movs	r3, #2
 80158ca:	e06e      	b.n	80159aa <HAL_UART_Transmit+0x11c>
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	2201      	movs	r2, #1
 80158d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	2200      	movs	r2, #0
 80158d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	2221      	movs	r2, #33	; 0x21
 80158de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80158e2:	f7f0 ffc3 	bl	800686c <HAL_GetTick>
 80158e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	88fa      	ldrh	r2, [r7, #6]
 80158ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	88fa      	ldrh	r2, [r7, #6]
 80158f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	689b      	ldr	r3, [r3, #8]
 80158f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158fc:	d108      	bne.n	8015910 <HAL_UART_Transmit+0x82>
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	691b      	ldr	r3, [r3, #16]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d104      	bne.n	8015910 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8015906:	2300      	movs	r3, #0
 8015908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	61bb      	str	r3, [r7, #24]
 801590e:	e003      	b.n	8015918 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015914:	2300      	movs	r3, #0
 8015916:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	2200      	movs	r2, #0
 801591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8015920:	e02a      	b.n	8015978 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	9300      	str	r3, [sp, #0]
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	2200      	movs	r2, #0
 801592a:	2180      	movs	r1, #128	; 0x80
 801592c:	68f8      	ldr	r0, [r7, #12]
 801592e:	f001 ff19 	bl	8017764 <UART_WaitOnFlagUntilTimeout>
 8015932:	4603      	mov	r3, r0
 8015934:	2b00      	cmp	r3, #0
 8015936:	d001      	beq.n	801593c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8015938:	2303      	movs	r3, #3
 801593a:	e036      	b.n	80159aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d10b      	bne.n	801595a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	881b      	ldrh	r3, [r3, #0]
 8015946:	461a      	mov	r2, r3
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015950:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	3302      	adds	r3, #2
 8015956:	61bb      	str	r3, [r7, #24]
 8015958:	e007      	b.n	801596a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801595a:	69fb      	ldr	r3, [r7, #28]
 801595c:	781a      	ldrb	r2, [r3, #0]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015964:	69fb      	ldr	r3, [r7, #28]
 8015966:	3301      	adds	r3, #1
 8015968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801596e:	b29b      	uxth	r3, r3
 8015970:	3b01      	subs	r3, #1
 8015972:	b29a      	uxth	r2, r3
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801597c:	b29b      	uxth	r3, r3
 801597e:	2b00      	cmp	r3, #0
 8015980:	d1cf      	bne.n	8015922 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	2200      	movs	r2, #0
 801598a:	2140      	movs	r1, #64	; 0x40
 801598c:	68f8      	ldr	r0, [r7, #12]
 801598e:	f001 fee9 	bl	8017764 <UART_WaitOnFlagUntilTimeout>
 8015992:	4603      	mov	r3, r0
 8015994:	2b00      	cmp	r3, #0
 8015996:	d001      	beq.n	801599c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015998:	2303      	movs	r3, #3
 801599a:	e006      	b.n	80159aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2220      	movs	r2, #32
 80159a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80159a4:	2300      	movs	r3, #0
 80159a6:	e000      	b.n	80159aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80159a8:	2302      	movs	r3, #2
  }
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3720      	adds	r7, #32
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}

080159b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80159b2:	b580      	push	{r7, lr}
 80159b4:	b08a      	sub	sp, #40	; 0x28
 80159b6:	af02      	add	r7, sp, #8
 80159b8:	60f8      	str	r0, [r7, #12]
 80159ba:	60b9      	str	r1, [r7, #8]
 80159bc:	603b      	str	r3, [r7, #0]
 80159be:	4613      	mov	r3, r2
 80159c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80159c2:	2300      	movs	r3, #0
 80159c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	2b20      	cmp	r3, #32
 80159d0:	f040 808c 	bne.w	8015aec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d002      	beq.n	80159e0 <HAL_UART_Receive+0x2e>
 80159da:	88fb      	ldrh	r3, [r7, #6]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d101      	bne.n	80159e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80159e0:	2301      	movs	r3, #1
 80159e2:	e084      	b.n	8015aee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80159ea:	2b01      	cmp	r3, #1
 80159ec:	d101      	bne.n	80159f2 <HAL_UART_Receive+0x40>
 80159ee:	2302      	movs	r3, #2
 80159f0:	e07d      	b.n	8015aee <HAL_UART_Receive+0x13c>
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2201      	movs	r2, #1
 80159f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	2200      	movs	r2, #0
 80159fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2222      	movs	r2, #34	; 0x22
 8015a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015a0e:	f7f0 ff2d 	bl	800686c <HAL_GetTick>
 8015a12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	88fa      	ldrh	r2, [r7, #6]
 8015a18:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	88fa      	ldrh	r2, [r7, #6]
 8015a1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	689b      	ldr	r3, [r3, #8]
 8015a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a28:	d108      	bne.n	8015a3c <HAL_UART_Receive+0x8a>
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	691b      	ldr	r3, [r3, #16]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d104      	bne.n	8015a3c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8015a32:	2300      	movs	r3, #0
 8015a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	61bb      	str	r3, [r7, #24]
 8015a3a:	e003      	b.n	8015a44 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015a40:	2300      	movs	r3, #0
 8015a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2200      	movs	r2, #0
 8015a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8015a4c:	e043      	b.n	8015ad6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	9300      	str	r3, [sp, #0]
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	2200      	movs	r2, #0
 8015a56:	2120      	movs	r1, #32
 8015a58:	68f8      	ldr	r0, [r7, #12]
 8015a5a:	f001 fe83 	bl	8017764 <UART_WaitOnFlagUntilTimeout>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d001      	beq.n	8015a68 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8015a64:	2303      	movs	r3, #3
 8015a66:	e042      	b.n	8015aee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8015a68:	69fb      	ldr	r3, [r7, #28]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d10c      	bne.n	8015a88 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a7a:	b29a      	uxth	r2, r3
 8015a7c:	69bb      	ldr	r3, [r7, #24]
 8015a7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015a80:	69bb      	ldr	r3, [r7, #24]
 8015a82:	3302      	adds	r3, #2
 8015a84:	61bb      	str	r3, [r7, #24]
 8015a86:	e01f      	b.n	8015ac8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	689b      	ldr	r3, [r3, #8]
 8015a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a90:	d007      	beq.n	8015aa2 <HAL_UART_Receive+0xf0>
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	689b      	ldr	r3, [r3, #8]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d10a      	bne.n	8015ab0 <HAL_UART_Receive+0xfe>
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	691b      	ldr	r3, [r3, #16]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d106      	bne.n	8015ab0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	b2da      	uxtb	r2, r3
 8015aaa:	69fb      	ldr	r3, [r7, #28]
 8015aac:	701a      	strb	r2, [r3, #0]
 8015aae:	e008      	b.n	8015ac2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	b2db      	uxtb	r3, r3
 8015ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015abc:	b2da      	uxtb	r2, r3
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8015ac2:	69fb      	ldr	r3, [r7, #28]
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015acc:	b29b      	uxth	r3, r3
 8015ace:	3b01      	subs	r3, #1
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015ada:	b29b      	uxth	r3, r3
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d1b6      	bne.n	8015a4e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	2220      	movs	r2, #32
 8015ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	e000      	b.n	8015aee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8015aec:	2302      	movs	r3, #2
  }
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3720      	adds	r7, #32
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}

08015af6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015af6:	b480      	push	{r7}
 8015af8:	b085      	sub	sp, #20
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	60f8      	str	r0, [r7, #12]
 8015afe:	60b9      	str	r1, [r7, #8]
 8015b00:	4613      	mov	r3, r2
 8015b02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	2b20      	cmp	r3, #32
 8015b0e:	d130      	bne.n	8015b72 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d002      	beq.n	8015b1c <HAL_UART_Transmit_IT+0x26>
 8015b16:	88fb      	ldrh	r3, [r7, #6]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d101      	bne.n	8015b20 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	e029      	b.n	8015b74 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015b26:	2b01      	cmp	r3, #1
 8015b28:	d101      	bne.n	8015b2e <HAL_UART_Transmit_IT+0x38>
 8015b2a:	2302      	movs	r3, #2
 8015b2c:	e022      	b.n	8015b74 <HAL_UART_Transmit_IT+0x7e>
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	2201      	movs	r2, #1
 8015b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	68ba      	ldr	r2, [r7, #8]
 8015b3a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	88fa      	ldrh	r2, [r7, #6]
 8015b40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	88fa      	ldrh	r2, [r7, #6]
 8015b46:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2221      	movs	r2, #33	; 0x21
 8015b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	68da      	ldr	r2, [r3, #12]
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015b6c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	e000      	b.n	8015b74 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8015b72:	2302      	movs	r3, #2
  }
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3714      	adds	r7, #20
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr

08015b80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b084      	sub	sp, #16
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015b94:	b2db      	uxtb	r3, r3
 8015b96:	2b20      	cmp	r3, #32
 8015b98:	d11d      	bne.n	8015bd6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d002      	beq.n	8015ba6 <HAL_UART_Receive_IT+0x26>
 8015ba0:	88fb      	ldrh	r3, [r7, #6]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d101      	bne.n	8015baa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	e016      	b.n	8015bd8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d101      	bne.n	8015bb8 <HAL_UART_Receive_IT+0x38>
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	e00f      	b.n	8015bd8 <HAL_UART_Receive_IT+0x58>
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2201      	movs	r2, #1
 8015bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015bc6:	88fb      	ldrh	r3, [r7, #6]
 8015bc8:	461a      	mov	r2, r3
 8015bca:	68b9      	ldr	r1, [r7, #8]
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f001 fe37 	bl	8017840 <UART_Start_Receive_IT>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	e000      	b.n	8015bd8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015bd6:	2302      	movs	r3, #2
  }
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3710      	adds	r7, #16
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b08c      	sub	sp, #48	; 0x30
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	60b9      	str	r1, [r7, #8]
 8015bea:	4613      	mov	r3, r2
 8015bec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	2b20      	cmp	r3, #32
 8015bf8:	d165      	bne.n	8015cc6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d002      	beq.n	8015c06 <HAL_UART_Transmit_DMA+0x26>
 8015c00:	88fb      	ldrh	r3, [r7, #6]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d101      	bne.n	8015c0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8015c06:	2301      	movs	r3, #1
 8015c08:	e05e      	b.n	8015cc8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c10:	2b01      	cmp	r3, #1
 8015c12:	d101      	bne.n	8015c18 <HAL_UART_Transmit_DMA+0x38>
 8015c14:	2302      	movs	r3, #2
 8015c16:	e057      	b.n	8015cc8 <HAL_UART_Transmit_DMA+0xe8>
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	2201      	movs	r2, #1
 8015c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015c20:	68ba      	ldr	r2, [r7, #8]
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	88fa      	ldrh	r2, [r7, #6]
 8015c2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	88fa      	ldrh	r2, [r7, #6]
 8015c30:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2200      	movs	r2, #0
 8015c36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	2221      	movs	r2, #33	; 0x21
 8015c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c44:	4a22      	ldr	r2, [pc, #136]	; (8015cd0 <HAL_UART_Transmit_DMA+0xf0>)
 8015c46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c4c:	4a21      	ldr	r2, [pc, #132]	; (8015cd4 <HAL_UART_Transmit_DMA+0xf4>)
 8015c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c54:	4a20      	ldr	r2, [pc, #128]	; (8015cd8 <HAL_UART_Transmit_DMA+0xf8>)
 8015c56:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8015c60:	f107 0308 	add.w	r3, r7, #8
 8015c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c6c:	6819      	ldr	r1, [r3, #0]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	3304      	adds	r3, #4
 8015c74:	461a      	mov	r2, r3
 8015c76:	88fb      	ldrh	r3, [r7, #6]
 8015c78:	f7f2 f861 	bl	8007d3e <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015c84:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	3314      	adds	r3, #20
 8015c94:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c96:	69bb      	ldr	r3, [r7, #24]
 8015c98:	e853 3f00 	ldrex	r3, [r3]
 8015c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	3314      	adds	r3, #20
 8015cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cae:	627a      	str	r2, [r7, #36]	; 0x24
 8015cb0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cb2:	6a39      	ldr	r1, [r7, #32]
 8015cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cb6:	e841 2300 	strex	r3, r2, [r1]
 8015cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1e5      	bne.n	8015c8e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	e000      	b.n	8015cc8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8015cc6:	2302      	movs	r3, #2
  }
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3730      	adds	r7, #48	; 0x30
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	080174bf 	.word	0x080174bf
 8015cd4:	08017559 	.word	0x08017559
 8015cd8:	080176d1 	.word	0x080176d1

08015cdc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b084      	sub	sp, #16
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	60f8      	str	r0, [r7, #12]
 8015ce4:	60b9      	str	r1, [r7, #8]
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cf0:	b2db      	uxtb	r3, r3
 8015cf2:	2b20      	cmp	r3, #32
 8015cf4:	d11d      	bne.n	8015d32 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d002      	beq.n	8015d02 <HAL_UART_Receive_DMA+0x26>
 8015cfc:	88fb      	ldrh	r3, [r7, #6]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d101      	bne.n	8015d06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015d02:	2301      	movs	r3, #1
 8015d04:	e016      	b.n	8015d34 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d0c:	2b01      	cmp	r3, #1
 8015d0e:	d101      	bne.n	8015d14 <HAL_UART_Receive_DMA+0x38>
 8015d10:	2302      	movs	r3, #2
 8015d12:	e00f      	b.n	8015d34 <HAL_UART_Receive_DMA+0x58>
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2201      	movs	r2, #1
 8015d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015d22:	88fb      	ldrh	r3, [r7, #6]
 8015d24:	461a      	mov	r2, r3
 8015d26:	68b9      	ldr	r1, [r7, #8]
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f001 fdc3 	bl	80178b4 <UART_Start_Receive_DMA>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	e000      	b.n	8015d34 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015d32:	2302      	movs	r3, #2
  }
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8015d3c:	b480      	push	{r7}
 8015d3e:	b09d      	sub	sp, #116	; 0x74
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015d44:	2300      	movs	r3, #0
 8015d46:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d4e:	2b01      	cmp	r3, #1
 8015d50:	d101      	bne.n	8015d56 <HAL_UART_DMAPause+0x1a>
 8015d52:	2302      	movs	r3, #2
 8015d54:	e098      	b.n	8015e88 <HAL_UART_DMAPause+0x14c>
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2201      	movs	r2, #1
 8015d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	695b      	ldr	r3, [r3, #20]
 8015d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d68:	2b80      	cmp	r3, #128	; 0x80
 8015d6a:	bf0c      	ite	eq
 8015d6c:	2301      	moveq	r3, #1
 8015d6e:	2300      	movne	r3, #0
 8015d70:	b2db      	uxtb	r3, r3
 8015d72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d7a:	b2db      	uxtb	r3, r3
 8015d7c:	2b21      	cmp	r3, #33	; 0x21
 8015d7e:	d11c      	bne.n	8015dba <HAL_UART_DMAPause+0x7e>
 8015d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d019      	beq.n	8015dba <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	3314      	adds	r3, #20
 8015d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d90:	e853 3f00 	ldrex	r3, [r3]
 8015d94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	3314      	adds	r3, #20
 8015da4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015da6:	65ba      	str	r2, [r7, #88]	; 0x58
 8015da8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015dae:	e841 2300 	strex	r3, r2, [r1]
 8015db2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1e5      	bne.n	8015d86 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	695b      	ldr	r3, [r3, #20]
 8015dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015dc4:	2b40      	cmp	r3, #64	; 0x40
 8015dc6:	bf0c      	ite	eq
 8015dc8:	2301      	moveq	r3, #1
 8015dca:	2300      	movne	r3, #0
 8015dcc:	b2db      	uxtb	r3, r3
 8015dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015dd6:	b2db      	uxtb	r3, r3
 8015dd8:	2b22      	cmp	r3, #34	; 0x22
 8015dda:	d150      	bne.n	8015e7e <HAL_UART_DMAPause+0x142>
 8015ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d04d      	beq.n	8015e7e <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	330c      	adds	r3, #12
 8015de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dec:	e853 3f00 	ldrex	r3, [r3]
 8015df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015df8:	667b      	str	r3, [r7, #100]	; 0x64
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	330c      	adds	r3, #12
 8015e00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015e02:	647a      	str	r2, [r7, #68]	; 0x44
 8015e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e0a:	e841 2300 	strex	r3, r2, [r1]
 8015e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d1e5      	bne.n	8015de2 <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	3314      	adds	r3, #20
 8015e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e20:	e853 3f00 	ldrex	r3, [r3]
 8015e24:	623b      	str	r3, [r7, #32]
   return(result);
 8015e26:	6a3b      	ldr	r3, [r7, #32]
 8015e28:	f023 0301 	bic.w	r3, r3, #1
 8015e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	3314      	adds	r3, #20
 8015e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015e36:	633a      	str	r2, [r7, #48]	; 0x30
 8015e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e3e:	e841 2300 	strex	r3, r2, [r1]
 8015e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d1e5      	bne.n	8015e16 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	3314      	adds	r3, #20
 8015e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	e853 3f00 	ldrex	r3, [r3]
 8015e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	3314      	adds	r3, #20
 8015e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015e6a:	61fa      	str	r2, [r7, #28]
 8015e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e6e:	69b9      	ldr	r1, [r7, #24]
 8015e70:	69fa      	ldr	r2, [r7, #28]
 8015e72:	e841 2300 	strex	r3, r2, [r1]
 8015e76:	617b      	str	r3, [r7, #20]
   return(result);
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d1e5      	bne.n	8015e4a <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2200      	movs	r2, #0
 8015e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3774      	adds	r7, #116	; 0x74
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e92:	4770      	bx	lr

08015e94 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8015e94:	b480      	push	{r7}
 8015e96:	b09d      	sub	sp, #116	; 0x74
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d101      	bne.n	8015eaa <HAL_UART_DMAResume+0x16>
 8015ea6:	2302      	movs	r3, #2
 8015ea8:	e087      	b.n	8015fba <HAL_UART_DMAResume+0x126>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2201      	movs	r2, #1
 8015eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	2b21      	cmp	r3, #33	; 0x21
 8015ebc:	d119      	bne.n	8015ef2 <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	3314      	adds	r3, #20
 8015ec4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ec8:	e853 3f00 	ldrex	r3, [r3]
 8015ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	3314      	adds	r3, #20
 8015edc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015ede:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015ee0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ee2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ee6:	e841 2300 	strex	r3, r2, [r1]
 8015eea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d1e5      	bne.n	8015ebe <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	2b22      	cmp	r3, #34	; 0x22
 8015efc:	d158      	bne.n	8015fb0 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8015efe:	2300      	movs	r3, #0
 8015f00:	60fb      	str	r3, [r7, #12]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	60fb      	str	r3, [r7, #12]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	60fb      	str	r3, [r7, #12]
 8015f12:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	330c      	adds	r3, #12
 8015f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f1e:	e853 3f00 	ldrex	r3, [r3]
 8015f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	330c      	adds	r3, #12
 8015f32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015f34:	64ba      	str	r2, [r7, #72]	; 0x48
 8015f36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f3c:	e841 2300 	strex	r3, r2, [r1]
 8015f40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d1e5      	bne.n	8015f14 <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	3314      	adds	r3, #20
 8015f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f52:	e853 3f00 	ldrex	r3, [r3]
 8015f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5a:	f043 0301 	orr.w	r3, r3, #1
 8015f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	3314      	adds	r3, #20
 8015f66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f68:	637a      	str	r2, [r7, #52]	; 0x34
 8015f6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f70:	e841 2300 	strex	r3, r2, [r1]
 8015f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d1e5      	bne.n	8015f48 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	3314      	adds	r3, #20
 8015f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	e853 3f00 	ldrex	r3, [r3]
 8015f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f92:	663b      	str	r3, [r7, #96]	; 0x60
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	3314      	adds	r3, #20
 8015f9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f9c:	623a      	str	r2, [r7, #32]
 8015f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fa0:	69f9      	ldr	r1, [r7, #28]
 8015fa2:	6a3a      	ldr	r2, [r7, #32]
 8015fa4:	e841 2300 	strex	r3, r2, [r1]
 8015fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8015faa:	69bb      	ldr	r3, [r7, #24]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d1e5      	bne.n	8015f7c <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015fb8:	2300      	movs	r3, #0
}
 8015fba:	4618      	mov	r0, r3
 8015fbc:	3774      	adds	r7, #116	; 0x74
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc4:	4770      	bx	lr

08015fc6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015fc6:	b580      	push	{r7, lr}
 8015fc8:	b090      	sub	sp, #64	; 0x40
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	695b      	ldr	r3, [r3, #20]
 8015fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015fdc:	2b80      	cmp	r3, #128	; 0x80
 8015fde:	bf0c      	ite	eq
 8015fe0:	2301      	moveq	r3, #1
 8015fe2:	2300      	movne	r3, #0
 8015fe4:	b2db      	uxtb	r3, r3
 8015fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	2b21      	cmp	r3, #33	; 0x21
 8015ff2:	d128      	bne.n	8016046 <HAL_UART_DMAStop+0x80>
 8015ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d025      	beq.n	8016046 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	3314      	adds	r3, #20
 8016000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016004:	e853 3f00 	ldrex	r3, [r3]
 8016008:	623b      	str	r3, [r7, #32]
   return(result);
 801600a:	6a3b      	ldr	r3, [r7, #32]
 801600c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016010:	63bb      	str	r3, [r7, #56]	; 0x38
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	3314      	adds	r3, #20
 8016018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801601a:	633a      	str	r2, [r7, #48]	; 0x30
 801601c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801601e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016022:	e841 2300 	strex	r3, r2, [r1]
 8016026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602a:	2b00      	cmp	r3, #0
 801602c:	d1e5      	bne.n	8015ffa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016032:	2b00      	cmp	r3, #0
 8016034:	d004      	beq.n	8016040 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801603a:	4618      	mov	r0, r3
 801603c:	f7f1 fed7 	bl	8007dee <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f001 fcd1 	bl	80179e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	695b      	ldr	r3, [r3, #20]
 801604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016050:	2b40      	cmp	r3, #64	; 0x40
 8016052:	bf0c      	ite	eq
 8016054:	2301      	moveq	r3, #1
 8016056:	2300      	movne	r3, #0
 8016058:	b2db      	uxtb	r3, r3
 801605a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016062:	b2db      	uxtb	r3, r3
 8016064:	2b22      	cmp	r3, #34	; 0x22
 8016066:	d128      	bne.n	80160ba <HAL_UART_DMAStop+0xf4>
 8016068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801606a:	2b00      	cmp	r3, #0
 801606c:	d025      	beq.n	80160ba <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	3314      	adds	r3, #20
 8016074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	e853 3f00 	ldrex	r3, [r3]
 801607c:	60fb      	str	r3, [r7, #12]
   return(result);
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016084:	637b      	str	r3, [r7, #52]	; 0x34
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	3314      	adds	r3, #20
 801608c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801608e:	61fa      	str	r2, [r7, #28]
 8016090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016092:	69b9      	ldr	r1, [r7, #24]
 8016094:	69fa      	ldr	r2, [r7, #28]
 8016096:	e841 2300 	strex	r3, r2, [r1]
 801609a:	617b      	str	r3, [r7, #20]
   return(result);
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d1e5      	bne.n	801606e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d004      	beq.n	80160b4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7f1 fe9d 	bl	8007dee <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f001 fcbf 	bl	8017a38 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80160ba:	2300      	movs	r3, #0
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3740      	adds	r7, #64	; 0x40
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b088      	sub	sp, #32
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	60f8      	str	r0, [r7, #12]
 80160cc:	60b9      	str	r1, [r7, #8]
 80160ce:	603b      	str	r3, [r7, #0]
 80160d0:	4613      	mov	r3, r2
 80160d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	2b20      	cmp	r3, #32
 80160de:	f040 80c9 	bne.w	8016274 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d002      	beq.n	80160ee <HAL_UARTEx_ReceiveToIdle+0x2a>
 80160e8:	88fb      	ldrh	r3, [r7, #6]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d101      	bne.n	80160f2 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80160ee:	2301      	movs	r3, #1
 80160f0:	e0c1      	b.n	8016276 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d101      	bne.n	8016100 <HAL_UARTEx_ReceiveToIdle+0x3c>
 80160fc:	2302      	movs	r3, #2
 80160fe:	e0ba      	b.n	8016276 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	2201      	movs	r2, #1
 8016104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	2200      	movs	r2, #0
 801610c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	2222      	movs	r2, #34	; 0x22
 8016112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2201      	movs	r2, #1
 801611a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801611c:	f7f0 fba6 	bl	800686c <HAL_GetTick>
 8016120:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	88fa      	ldrh	r2, [r7, #6]
 8016126:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	88fa      	ldrh	r2, [r7, #6]
 801612c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	689b      	ldr	r3, [r3, #8]
 8016132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016136:	d108      	bne.n	801614a <HAL_UARTEx_ReceiveToIdle+0x86>
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	691b      	ldr	r3, [r3, #16]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d104      	bne.n	801614a <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8016140:	2300      	movs	r3, #0
 8016142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	61bb      	str	r3, [r7, #24]
 8016148:	e003      	b.n	8016152 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801614e:	2300      	movs	r3, #0
 8016150:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	2200      	movs	r2, #0
 8016156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	2200      	movs	r2, #0
 801615e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016160:	e074      	b.n	801624c <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	f003 0310 	and.w	r3, r3, #16
 801616c:	2b10      	cmp	r3, #16
 801616e:	d114      	bne.n	801619a <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016170:	2300      	movs	r3, #0
 8016172:	613b      	str	r3, [r7, #16]
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	613b      	str	r3, [r7, #16]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	613b      	str	r3, [r7, #16]
 8016184:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	881b      	ldrh	r3, [r3, #0]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d005      	beq.n	801619a <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2220      	movs	r2, #32
 8016192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8016196:	2300      	movs	r3, #0
 8016198:	e06d      	b.n	8016276 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	f003 0320 	and.w	r3, r3, #32
 80161a4:	2b20      	cmp	r3, #32
 80161a6:	d13c      	bne.n	8016222 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 80161a8:	69fb      	ldr	r3, [r7, #28]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d10c      	bne.n	80161c8 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	685b      	ldr	r3, [r3, #4]
 80161b4:	b29b      	uxth	r3, r3
 80161b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80161ba:	b29a      	uxth	r2, r3
 80161bc:	69bb      	ldr	r3, [r7, #24]
 80161be:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80161c0:	69bb      	ldr	r3, [r7, #24]
 80161c2:	3302      	adds	r3, #2
 80161c4:	61bb      	str	r3, [r7, #24]
 80161c6:	e01f      	b.n	8016208 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	689b      	ldr	r3, [r3, #8]
 80161cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161d0:	d007      	beq.n	80161e2 <HAL_UARTEx_ReceiveToIdle+0x11e>
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	689b      	ldr	r3, [r3, #8]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d10a      	bne.n	80161f0 <HAL_UARTEx_ReceiveToIdle+0x12c>
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	691b      	ldr	r3, [r3, #16]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d106      	bne.n	80161f0 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	b2da      	uxtb	r2, r3
 80161ea:	69fb      	ldr	r3, [r7, #28]
 80161ec:	701a      	strb	r2, [r3, #0]
 80161ee:	e008      	b.n	8016202 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	685b      	ldr	r3, [r3, #4]
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161fc:	b2da      	uxtb	r2, r3
 80161fe:	69fb      	ldr	r3, [r7, #28]
 8016200:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8016202:	69fb      	ldr	r3, [r7, #28]
 8016204:	3301      	adds	r3, #1
 8016206:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8016208:	683b      	ldr	r3, [r7, #0]
 801620a:	881b      	ldrh	r3, [r3, #0]
 801620c:	3301      	adds	r3, #1
 801620e:	b29a      	uxth	r2, r3
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016218:	b29b      	uxth	r3, r3
 801621a:	3b01      	subs	r3, #1
 801621c:	b29a      	uxth	r2, r3
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016228:	d010      	beq.n	801624c <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801622a:	f7f0 fb1f 	bl	800686c <HAL_GetTick>
 801622e:	4602      	mov	r2, r0
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016236:	429a      	cmp	r2, r3
 8016238:	d302      	bcc.n	8016240 <HAL_UARTEx_ReceiveToIdle+0x17c>
 801623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801623c:	2b00      	cmp	r3, #0
 801623e:	d105      	bne.n	801624c <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2220      	movs	r2, #32
 8016244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8016248:	2303      	movs	r3, #3
 801624a:	e014      	b.n	8016276 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016250:	b29b      	uxth	r3, r3
 8016252:	2b00      	cmp	r3, #0
 8016254:	d185      	bne.n	8016162 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801625e:	b29b      	uxth	r3, r3
 8016260:	1ad3      	subs	r3, r2, r3
 8016262:	b29a      	uxth	r2, r3
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2220      	movs	r2, #32
 801626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016270:	2300      	movs	r3, #0
 8016272:	e000      	b.n	8016276 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8016274:	2302      	movs	r3, #2
  }
}
 8016276:	4618      	mov	r0, r3
 8016278:	3720      	adds	r7, #32
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801627e:	b580      	push	{r7, lr}
 8016280:	b08c      	sub	sp, #48	; 0x30
 8016282:	af00      	add	r7, sp, #0
 8016284:	60f8      	str	r0, [r7, #12]
 8016286:	60b9      	str	r1, [r7, #8]
 8016288:	4613      	mov	r3, r2
 801628a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016292:	b2db      	uxtb	r3, r3
 8016294:	2b20      	cmp	r3, #32
 8016296:	d152      	bne.n	801633e <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d002      	beq.n	80162a4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 801629e:	88fb      	ldrh	r3, [r7, #6]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d101      	bne.n	80162a8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80162a4:	2301      	movs	r3, #1
 80162a6:	e04b      	b.n	8016340 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	d101      	bne.n	80162b6 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80162b2:	2302      	movs	r3, #2
 80162b4:	e044      	b.n	8016340 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2201      	movs	r2, #1
 80162ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2201      	movs	r2, #1
 80162c2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80162c4:	88fb      	ldrh	r3, [r7, #6]
 80162c6:	461a      	mov	r2, r3
 80162c8:	68b9      	ldr	r1, [r7, #8]
 80162ca:	68f8      	ldr	r0, [r7, #12]
 80162cc:	f001 fab8 	bl	8017840 <UART_Start_Receive_IT>
 80162d0:	4603      	mov	r3, r0
 80162d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80162d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d12c      	bne.n	8016338 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162e2:	2b01      	cmp	r3, #1
 80162e4:	d125      	bne.n	8016332 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80162e6:	2300      	movs	r3, #0
 80162e8:	613b      	str	r3, [r7, #16]
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	613b      	str	r3, [r7, #16]
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	613b      	str	r3, [r7, #16]
 80162fa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	330c      	adds	r3, #12
 8016302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016304:	69bb      	ldr	r3, [r7, #24]
 8016306:	e853 3f00 	ldrex	r3, [r3]
 801630a:	617b      	str	r3, [r7, #20]
   return(result);
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	f043 0310 	orr.w	r3, r3, #16
 8016312:	62bb      	str	r3, [r7, #40]	; 0x28
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	330c      	adds	r3, #12
 801631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801631c:	627a      	str	r2, [r7, #36]	; 0x24
 801631e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016320:	6a39      	ldr	r1, [r7, #32]
 8016322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016324:	e841 2300 	strex	r3, r2, [r1]
 8016328:	61fb      	str	r3, [r7, #28]
   return(result);
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d1e5      	bne.n	80162fc <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8016330:	e002      	b.n	8016338 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8016332:	2301      	movs	r3, #1
 8016334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8016338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801633c:	e000      	b.n	8016340 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801633e:	2302      	movs	r3, #2
  }
}
 8016340:	4618      	mov	r0, r3
 8016342:	3730      	adds	r7, #48	; 0x30
 8016344:	46bd      	mov	sp, r7
 8016346:	bd80      	pop	{r7, pc}

08016348 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b08c      	sub	sp, #48	; 0x30
 801634c:	af00      	add	r7, sp, #0
 801634e:	60f8      	str	r0, [r7, #12]
 8016350:	60b9      	str	r1, [r7, #8]
 8016352:	4613      	mov	r3, r2
 8016354:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801635c:	b2db      	uxtb	r3, r3
 801635e:	2b20      	cmp	r3, #32
 8016360:	d152      	bne.n	8016408 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d002      	beq.n	801636e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8016368:	88fb      	ldrh	r3, [r7, #6]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d101      	bne.n	8016372 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801636e:	2301      	movs	r3, #1
 8016370:	e04b      	b.n	801640a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016378:	2b01      	cmp	r3, #1
 801637a:	d101      	bne.n	8016380 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801637c:	2302      	movs	r3, #2
 801637e:	e044      	b.n	801640a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2201      	movs	r2, #1
 8016384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	2201      	movs	r2, #1
 801638c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801638e:	88fb      	ldrh	r3, [r7, #6]
 8016390:	461a      	mov	r2, r3
 8016392:	68b9      	ldr	r1, [r7, #8]
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f001 fa8d 	bl	80178b4 <UART_Start_Receive_DMA>
 801639a:	4603      	mov	r3, r0
 801639c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80163a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d12c      	bne.n	8016402 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163ac:	2b01      	cmp	r3, #1
 80163ae:	d125      	bne.n	80163fc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80163b0:	2300      	movs	r3, #0
 80163b2:	613b      	str	r3, [r7, #16]
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	613b      	str	r3, [r7, #16]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	685b      	ldr	r3, [r3, #4]
 80163c2:	613b      	str	r3, [r7, #16]
 80163c4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	330c      	adds	r3, #12
 80163cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ce:	69bb      	ldr	r3, [r7, #24]
 80163d0:	e853 3f00 	ldrex	r3, [r3]
 80163d4:	617b      	str	r3, [r7, #20]
   return(result);
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	f043 0310 	orr.w	r3, r3, #16
 80163dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	330c      	adds	r3, #12
 80163e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163e6:	627a      	str	r2, [r7, #36]	; 0x24
 80163e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163ea:	6a39      	ldr	r1, [r7, #32]
 80163ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163ee:	e841 2300 	strex	r3, r2, [r1]
 80163f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80163f4:	69fb      	ldr	r3, [r7, #28]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d1e5      	bne.n	80163c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80163fa:	e002      	b.n	8016402 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80163fc:	2301      	movs	r3, #1
 80163fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8016402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016406:	e000      	b.n	801640a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8016408:	2302      	movs	r3, #2
  }
}
 801640a:	4618      	mov	r0, r3
 801640c:	3730      	adds	r7, #48	; 0x30
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}

08016412 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8016412:	b580      	push	{r7, lr}
 8016414:	b0a0      	sub	sp, #128	; 0x80
 8016416:	af00      	add	r7, sp, #0
 8016418:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	330c      	adds	r3, #12
 8016420:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016424:	e853 3f00 	ldrex	r3, [r3]
 8016428:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801642a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801642c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016430:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	330c      	adds	r3, #12
 8016438:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801643a:	66ba      	str	r2, [r7, #104]	; 0x68
 801643c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801643e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016442:	e841 2300 	strex	r3, r2, [r1]
 8016446:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801644a:	2b00      	cmp	r3, #0
 801644c:	d1e5      	bne.n	801641a <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	3314      	adds	r3, #20
 8016454:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016458:	e853 3f00 	ldrex	r3, [r3]
 801645c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801645e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016460:	f023 0301 	bic.w	r3, r3, #1
 8016464:	67bb      	str	r3, [r7, #120]	; 0x78
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	3314      	adds	r3, #20
 801646c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801646e:	657a      	str	r2, [r7, #84]	; 0x54
 8016470:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016472:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016476:	e841 2300 	strex	r3, r2, [r1]
 801647a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801647e:	2b00      	cmp	r3, #0
 8016480:	d1e5      	bne.n	801644e <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016486:	2b01      	cmp	r3, #1
 8016488:	d119      	bne.n	80164be <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	330c      	adds	r3, #12
 8016490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016494:	e853 3f00 	ldrex	r3, [r3]
 8016498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649c:	f023 0310 	bic.w	r3, r3, #16
 80164a0:	677b      	str	r3, [r7, #116]	; 0x74
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	330c      	adds	r3, #12
 80164a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80164aa:	643a      	str	r2, [r7, #64]	; 0x40
 80164ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80164b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80164b2:	e841 2300 	strex	r3, r2, [r1]
 80164b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80164b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d1e5      	bne.n	801648a <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	695b      	ldr	r3, [r3, #20]
 80164c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80164c8:	2b80      	cmp	r3, #128	; 0x80
 80164ca:	d136      	bne.n	801653a <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	3314      	adds	r3, #20
 80164d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164d4:	6a3b      	ldr	r3, [r7, #32]
 80164d6:	e853 3f00 	ldrex	r3, [r3]
 80164da:	61fb      	str	r3, [r7, #28]
   return(result);
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80164e2:	673b      	str	r3, [r7, #112]	; 0x70
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	3314      	adds	r3, #20
 80164ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80164ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80164ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80164f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164f4:	e841 2300 	strex	r3, r2, [r1]
 80164f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d1e5      	bne.n	80164cc <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016504:	2b00      	cmp	r3, #0
 8016506:	d018      	beq.n	801653a <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801650c:	2200      	movs	r2, #0
 801650e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016514:	4618      	mov	r0, r3
 8016516:	f7f1 fc6a 	bl	8007dee <HAL_DMA_Abort>
 801651a:	4603      	mov	r3, r0
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00c      	beq.n	801653a <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016524:	4618      	mov	r0, r3
 8016526:	f7f2 f826 	bl	8008576 <HAL_DMA_GetError>
 801652a:	4603      	mov	r3, r0
 801652c:	2b20      	cmp	r3, #32
 801652e:	d104      	bne.n	801653a <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2210      	movs	r2, #16
 8016534:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016536:	2303      	movs	r3, #3
 8016538:	e052      	b.n	80165e0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	695b      	ldr	r3, [r3, #20]
 8016540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016544:	2b40      	cmp	r3, #64	; 0x40
 8016546:	d136      	bne.n	80165b6 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	3314      	adds	r3, #20
 801654e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	e853 3f00 	ldrex	r3, [r3]
 8016556:	60bb      	str	r3, [r7, #8]
   return(result);
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801655e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	3314      	adds	r3, #20
 8016566:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016568:	61ba      	str	r2, [r7, #24]
 801656a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801656c:	6979      	ldr	r1, [r7, #20]
 801656e:	69ba      	ldr	r2, [r7, #24]
 8016570:	e841 2300 	strex	r3, r2, [r1]
 8016574:	613b      	str	r3, [r7, #16]
   return(result);
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d1e5      	bne.n	8016548 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016580:	2b00      	cmp	r3, #0
 8016582:	d018      	beq.n	80165b6 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016588:	2200      	movs	r2, #0
 801658a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016590:	4618      	mov	r0, r3
 8016592:	f7f1 fc2c 	bl	8007dee <HAL_DMA_Abort>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d00c      	beq.n	80165b6 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7f1 ffe8 	bl	8008576 <HAL_DMA_GetError>
 80165a6:	4603      	mov	r3, r0
 80165a8:	2b20      	cmp	r3, #32
 80165aa:	d104      	bne.n	80165b6 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2210      	movs	r2, #16
 80165b0:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80165b2:	2303      	movs	r3, #3
 80165b4:	e014      	b.n	80165e0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2200      	movs	r2, #0
 80165ba:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2200      	movs	r2, #0
 80165c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2200      	movs	r2, #0
 80165c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2220      	movs	r2, #32
 80165cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2220      	movs	r2, #32
 80165d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2200      	movs	r2, #0
 80165dc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80165de:	2300      	movs	r3, #0
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3780      	adds	r7, #128	; 0x80
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b08e      	sub	sp, #56	; 0x38
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	330c      	adds	r3, #12
 80165f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165f8:	6a3b      	ldr	r3, [r7, #32]
 80165fa:	e853 3f00 	ldrex	r3, [r3]
 80165fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016606:	637b      	str	r3, [r7, #52]	; 0x34
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	330c      	adds	r3, #12
 801660e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016610:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016618:	e841 2300 	strex	r3, r2, [r1]
 801661c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016620:	2b00      	cmp	r3, #0
 8016622:	d1e5      	bne.n	80165f0 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	695b      	ldr	r3, [r3, #20]
 801662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801662e:	2b80      	cmp	r3, #128	; 0x80
 8016630:	d136      	bne.n	80166a0 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	3314      	adds	r3, #20
 8016638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	e853 3f00 	ldrex	r3, [r3]
 8016640:	60bb      	str	r3, [r7, #8]
   return(result);
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016648:	633b      	str	r3, [r7, #48]	; 0x30
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	3314      	adds	r3, #20
 8016650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016652:	61ba      	str	r2, [r7, #24]
 8016654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016656:	6979      	ldr	r1, [r7, #20]
 8016658:	69ba      	ldr	r2, [r7, #24]
 801665a:	e841 2300 	strex	r3, r2, [r1]
 801665e:	613b      	str	r3, [r7, #16]
   return(result);
 8016660:	693b      	ldr	r3, [r7, #16]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d1e5      	bne.n	8016632 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801666a:	2b00      	cmp	r3, #0
 801666c:	d018      	beq.n	80166a0 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016672:	2200      	movs	r2, #0
 8016674:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801667a:	4618      	mov	r0, r3
 801667c:	f7f1 fbb7 	bl	8007dee <HAL_DMA_Abort>
 8016680:	4603      	mov	r3, r0
 8016682:	2b00      	cmp	r3, #0
 8016684:	d00c      	beq.n	80166a0 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801668a:	4618      	mov	r0, r3
 801668c:	f7f1 ff73 	bl	8008576 <HAL_DMA_GetError>
 8016690:	4603      	mov	r3, r0
 8016692:	2b20      	cmp	r3, #32
 8016694:	d104      	bne.n	80166a0 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2210      	movs	r2, #16
 801669a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 801669c:	2303      	movs	r3, #3
 801669e:	e007      	b.n	80166b0 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2200      	movs	r2, #0
 80166a4:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2220      	movs	r2, #32
 80166aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80166ae:	2300      	movs	r3, #0
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	3738      	adds	r7, #56	; 0x38
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}

080166b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b09a      	sub	sp, #104	; 0x68
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	330c      	adds	r3, #12
 80166c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166ca:	e853 3f00 	ldrex	r3, [r3]
 80166ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80166d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80166d6:	667b      	str	r3, [r7, #100]	; 0x64
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	330c      	adds	r3, #12
 80166de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80166e0:	657a      	str	r2, [r7, #84]	; 0x54
 80166e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166e8:	e841 2300 	strex	r3, r2, [r1]
 80166ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80166ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d1e5      	bne.n	80166c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	3314      	adds	r3, #20
 80166fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166fe:	e853 3f00 	ldrex	r3, [r3]
 8016702:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016706:	f023 0301 	bic.w	r3, r3, #1
 801670a:	663b      	str	r3, [r7, #96]	; 0x60
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	3314      	adds	r3, #20
 8016712:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016714:	643a      	str	r2, [r7, #64]	; 0x40
 8016716:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801671a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801671c:	e841 2300 	strex	r3, r2, [r1]
 8016720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016724:	2b00      	cmp	r3, #0
 8016726:	d1e5      	bne.n	80166f4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801672c:	2b01      	cmp	r3, #1
 801672e:	d119      	bne.n	8016764 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	330c      	adds	r3, #12
 8016736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016738:	6a3b      	ldr	r3, [r7, #32]
 801673a:	e853 3f00 	ldrex	r3, [r3]
 801673e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016740:	69fb      	ldr	r3, [r7, #28]
 8016742:	f023 0310 	bic.w	r3, r3, #16
 8016746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	330c      	adds	r3, #12
 801674e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016758:	e841 2300 	strex	r3, r2, [r1]
 801675c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016760:	2b00      	cmp	r3, #0
 8016762:	d1e5      	bne.n	8016730 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	695b      	ldr	r3, [r3, #20]
 801676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801676e:	2b40      	cmp	r3, #64	; 0x40
 8016770:	d136      	bne.n	80167e0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	3314      	adds	r3, #20
 8016778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	e853 3f00 	ldrex	r3, [r3]
 8016780:	60bb      	str	r3, [r7, #8]
   return(result);
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016788:	65bb      	str	r3, [r7, #88]	; 0x58
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	3314      	adds	r3, #20
 8016790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016792:	61ba      	str	r2, [r7, #24]
 8016794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016796:	6979      	ldr	r1, [r7, #20]
 8016798:	69ba      	ldr	r2, [r7, #24]
 801679a:	e841 2300 	strex	r3, r2, [r1]
 801679e:	613b      	str	r3, [r7, #16]
   return(result);
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d1e5      	bne.n	8016772 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d018      	beq.n	80167e0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167b2:	2200      	movs	r2, #0
 80167b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7f1 fb17 	bl	8007dee <HAL_DMA_Abort>
 80167c0:	4603      	mov	r3, r0
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00c      	beq.n	80167e0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7f1 fed3 	bl	8008576 <HAL_DMA_GetError>
 80167d0:	4603      	mov	r3, r0
 80167d2:	2b20      	cmp	r3, #32
 80167d4:	d104      	bne.n	80167e0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2210      	movs	r2, #16
 80167da:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80167dc:	2303      	movs	r3, #3
 80167de:	e00a      	b.n	80167f6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2200      	movs	r2, #0
 80167e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2220      	movs	r2, #32
 80167ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2200      	movs	r2, #0
 80167f2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3768      	adds	r7, #104	; 0x68
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}

080167fe <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80167fe:	b580      	push	{r7, lr}
 8016800:	b0a2      	sub	sp, #136	; 0x88
 8016802:	af00      	add	r7, sp, #0
 8016804:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8016806:	2301      	movs	r3, #1
 8016808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	330c      	adds	r3, #12
 8016812:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016816:	e853 3f00 	ldrex	r3, [r3]
 801681a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801681c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801681e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	330c      	adds	r3, #12
 801682c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016830:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016832:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016834:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016838:	e841 2300 	strex	r3, r2, [r1]
 801683c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801683e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016840:	2b00      	cmp	r3, #0
 8016842:	d1e3      	bne.n	801680c <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	3314      	adds	r3, #20
 801684a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801684c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801684e:	e853 3f00 	ldrex	r3, [r3]
 8016852:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016856:	f023 0301 	bic.w	r3, r3, #1
 801685a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	3314      	adds	r3, #20
 8016862:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016864:	65ba      	str	r2, [r7, #88]	; 0x58
 8016866:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801686a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801686c:	e841 2300 	strex	r3, r2, [r1]
 8016870:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016874:	2b00      	cmp	r3, #0
 8016876:	d1e5      	bne.n	8016844 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801687c:	2b01      	cmp	r3, #1
 801687e:	d119      	bne.n	80168b4 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	330c      	adds	r3, #12
 8016886:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801688a:	e853 3f00 	ldrex	r3, [r3]
 801688e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016892:	f023 0310 	bic.w	r3, r3, #16
 8016896:	67bb      	str	r3, [r7, #120]	; 0x78
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	330c      	adds	r3, #12
 801689e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80168a0:	647a      	str	r2, [r7, #68]	; 0x44
 80168a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80168a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168a8:	e841 2300 	strex	r3, r2, [r1]
 80168ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80168ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d1e5      	bne.n	8016880 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d00f      	beq.n	80168dc <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	695b      	ldr	r3, [r3, #20]
 80168c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80168c6:	2b80      	cmp	r3, #128	; 0x80
 80168c8:	d104      	bne.n	80168d4 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168ce:	4a54      	ldr	r2, [pc, #336]	; (8016a20 <HAL_UART_Abort_IT+0x222>)
 80168d0:	651a      	str	r2, [r3, #80]	; 0x50
 80168d2:	e003      	b.n	80168dc <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168d8:	2200      	movs	r2, #0
 80168da:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d00f      	beq.n	8016904 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	695b      	ldr	r3, [r3, #20]
 80168ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168ee:	2b40      	cmp	r3, #64	; 0x40
 80168f0:	d104      	bne.n	80168fc <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168f6:	4a4b      	ldr	r2, [pc, #300]	; (8016a24 <HAL_UART_Abort_IT+0x226>)
 80168f8:	651a      	str	r2, [r3, #80]	; 0x50
 80168fa:	e003      	b.n	8016904 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016900:	2200      	movs	r2, #0
 8016902:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	695b      	ldr	r3, [r3, #20]
 801690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801690e:	2b80      	cmp	r3, #128	; 0x80
 8016910:	d12d      	bne.n	801696e <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	3314      	adds	r3, #20
 8016918:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691c:	e853 3f00 	ldrex	r3, [r3]
 8016920:	623b      	str	r3, [r7, #32]
   return(result);
 8016922:	6a3b      	ldr	r3, [r7, #32]
 8016924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016928:	677b      	str	r3, [r7, #116]	; 0x74
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	3314      	adds	r3, #20
 8016930:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016932:	633a      	str	r2, [r7, #48]	; 0x30
 8016934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801693a:	e841 2300 	strex	r3, r2, [r1]
 801693e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016942:	2b00      	cmp	r3, #0
 8016944:	d1e5      	bne.n	8016912 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801694a:	2b00      	cmp	r3, #0
 801694c:	d00f      	beq.n	801696e <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016952:	4618      	mov	r0, r3
 8016954:	f7f1 fabb 	bl	8007ece <HAL_DMA_Abort_IT>
 8016958:	4603      	mov	r3, r0
 801695a:	2b00      	cmp	r3, #0
 801695c:	d004      	beq.n	8016968 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016962:	2200      	movs	r2, #0
 8016964:	651a      	str	r2, [r3, #80]	; 0x50
 8016966:	e002      	b.n	801696e <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8016968:	2300      	movs	r3, #0
 801696a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	695b      	ldr	r3, [r3, #20]
 8016974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016978:	2b40      	cmp	r3, #64	; 0x40
 801697a:	d130      	bne.n	80169de <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	3314      	adds	r3, #20
 8016982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016984:	693b      	ldr	r3, [r7, #16]
 8016986:	e853 3f00 	ldrex	r3, [r3]
 801698a:	60fb      	str	r3, [r7, #12]
   return(result);
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016992:	673b      	str	r3, [r7, #112]	; 0x70
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	3314      	adds	r3, #20
 801699a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801699c:	61fa      	str	r2, [r7, #28]
 801699e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169a0:	69b9      	ldr	r1, [r7, #24]
 80169a2:	69fa      	ldr	r2, [r7, #28]
 80169a4:	e841 2300 	strex	r3, r2, [r1]
 80169a8:	617b      	str	r3, [r7, #20]
   return(result);
 80169aa:	697b      	ldr	r3, [r7, #20]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d1e5      	bne.n	801697c <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d012      	beq.n	80169de <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169bc:	4618      	mov	r0, r3
 80169be:	f7f1 fa86 	bl	8007ece <HAL_DMA_Abort_IT>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d007      	beq.n	80169d8 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169cc:	2200      	movs	r2, #0
 80169ce:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80169d0:	2301      	movs	r3, #1
 80169d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80169d6:	e002      	b.n	80169de <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80169d8:	2300      	movs	r3, #0
 80169da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80169de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80169e2:	2b01      	cmp	r3, #1
 80169e4:	d116      	bne.n	8016a14 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2200      	movs	r2, #0
 80169ea:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2200      	movs	r2, #0
 80169f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2200      	movs	r2, #0
 80169f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2220      	movs	r2, #32
 80169fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2220      	movs	r2, #32
 8016a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 fbe5 	bl	80171de <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016a14:	2300      	movs	r3, #0
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	3788      	adds	r7, #136	; 0x88
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}
 8016a1e:	bf00      	nop
 8016a20:	08017b27 	.word	0x08017b27
 8016a24:	08017b87 	.word	0x08017b87

08016a28 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b08e      	sub	sp, #56	; 0x38
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	330c      	adds	r3, #12
 8016a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a38:	6a3b      	ldr	r3, [r7, #32]
 8016a3a:	e853 3f00 	ldrex	r3, [r3]
 8016a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016a40:	69fb      	ldr	r3, [r7, #28]
 8016a42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016a46:	637b      	str	r3, [r7, #52]	; 0x34
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	330c      	adds	r3, #12
 8016a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016a58:	e841 2300 	strex	r3, r2, [r1]
 8016a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d1e5      	bne.n	8016a30 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	695b      	ldr	r3, [r3, #20]
 8016a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a6e:	2b80      	cmp	r3, #128	; 0x80
 8016a70:	d13c      	bne.n	8016aec <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	3314      	adds	r3, #20
 8016a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	e853 3f00 	ldrex	r3, [r3]
 8016a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a88:	633b      	str	r3, [r7, #48]	; 0x30
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	3314      	adds	r3, #20
 8016a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a92:	61ba      	str	r2, [r7, #24]
 8016a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a96:	6979      	ldr	r1, [r7, #20]
 8016a98:	69ba      	ldr	r2, [r7, #24]
 8016a9a:	e841 2300 	strex	r3, r2, [r1]
 8016a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d1e5      	bne.n	8016a72 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d013      	beq.n	8016ad6 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ab2:	4a16      	ldr	r2, [pc, #88]	; (8016b0c <HAL_UART_AbortTransmit_IT+0xe4>)
 8016ab4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7f1 fa07 	bl	8007ece <HAL_DMA_Abort_IT>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d01c      	beq.n	8016b00 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016acc:	687a      	ldr	r2, [r7, #4]
 8016ace:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016ad0:	4610      	mov	r0, r2
 8016ad2:	4798      	blx	r3
 8016ad4:	e014      	b.n	8016b00 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	2200      	movs	r2, #0
 8016ada:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2220      	movs	r2, #32
 8016ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8016ae4:	6878      	ldr	r0, [r7, #4]
 8016ae6:	f000 fb84 	bl	80171f2 <HAL_UART_AbortTransmitCpltCallback>
 8016aea:	e009      	b.n	8016b00 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2200      	movs	r2, #0
 8016af0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2220      	movs	r2, #32
 8016af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8016afa:	6878      	ldr	r0, [r7, #4]
 8016afc:	f000 fb79 	bl	80171f2 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016b00:	2300      	movs	r3, #0
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3738      	adds	r7, #56	; 0x38
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
 8016b0a:	bf00      	nop
 8016b0c:	08017be7 	.word	0x08017be7

08016b10 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b09a      	sub	sp, #104	; 0x68
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	330c      	adds	r3, #12
 8016b1e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b22:	e853 3f00 	ldrex	r3, [r3]
 8016b26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016b2e:	667b      	str	r3, [r7, #100]	; 0x64
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	330c      	adds	r3, #12
 8016b36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016b38:	657a      	str	r2, [r7, #84]	; 0x54
 8016b3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b40:	e841 2300 	strex	r3, r2, [r1]
 8016b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d1e5      	bne.n	8016b18 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	3314      	adds	r3, #20
 8016b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b56:	e853 3f00 	ldrex	r3, [r3]
 8016b5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b5e:	f023 0301 	bic.w	r3, r3, #1
 8016b62:	663b      	str	r3, [r7, #96]	; 0x60
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	3314      	adds	r3, #20
 8016b6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016b6c:	643a      	str	r2, [r7, #64]	; 0x40
 8016b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b74:	e841 2300 	strex	r3, r2, [r1]
 8016b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d1e5      	bne.n	8016b4c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b84:	2b01      	cmp	r3, #1
 8016b86:	d119      	bne.n	8016bbc <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	330c      	adds	r3, #12
 8016b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b90:	6a3b      	ldr	r3, [r7, #32]
 8016b92:	e853 3f00 	ldrex	r3, [r3]
 8016b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8016b98:	69fb      	ldr	r3, [r7, #28]
 8016b9a:	f023 0310 	bic.w	r3, r3, #16
 8016b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	330c      	adds	r3, #12
 8016ba6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bb0:	e841 2300 	strex	r3, r2, [r1]
 8016bb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d1e5      	bne.n	8016b88 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	695b      	ldr	r3, [r3, #20]
 8016bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bc6:	2b40      	cmp	r3, #64	; 0x40
 8016bc8:	d13f      	bne.n	8016c4a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	3314      	adds	r3, #20
 8016bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	e853 3f00 	ldrex	r3, [r3]
 8016bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016be0:	65bb      	str	r3, [r7, #88]	; 0x58
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	3314      	adds	r3, #20
 8016be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016bea:	61ba      	str	r2, [r7, #24]
 8016bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bee:	6979      	ldr	r1, [r7, #20]
 8016bf0:	69ba      	ldr	r2, [r7, #24]
 8016bf2:	e841 2300 	strex	r3, r2, [r1]
 8016bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d1e5      	bne.n	8016bca <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d013      	beq.n	8016c2e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c0a:	4a19      	ldr	r2, [pc, #100]	; (8016c70 <HAL_UART_AbortReceive_IT+0x160>)
 8016c0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7f1 f95b 	bl	8007ece <HAL_DMA_Abort_IT>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d022      	beq.n	8016c64 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c24:	687a      	ldr	r2, [r7, #4]
 8016c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016c28:	4610      	mov	r0, r2
 8016c2a:	4798      	blx	r3
 8016c2c:	e01a      	b.n	8016c64 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2200      	movs	r2, #0
 8016c32:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2220      	movs	r2, #32
 8016c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f000 fadf 	bl	8017206 <HAL_UART_AbortReceiveCpltCallback>
 8016c48:	e00c      	b.n	8016c64 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2220      	movs	r2, #32
 8016c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f000 fad1 	bl	8017206 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016c64:	2300      	movs	r3, #0
}
 8016c66:	4618      	mov	r0, r3
 8016c68:	3768      	adds	r7, #104	; 0x68
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	bd80      	pop	{r7, pc}
 8016c6e:	bf00      	nop
 8016c70:	08017c11 	.word	0x08017c11

08016c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b0ba      	sub	sp, #232	; 0xe8
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	695b      	ldr	r3, [r3, #20]
 8016c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016caa:	f003 030f 	and.w	r3, r3, #15
 8016cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8016cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d10f      	bne.n	8016cda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cbe:	f003 0320 	and.w	r3, r3, #32
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d009      	beq.n	8016cda <HAL_UART_IRQHandler+0x66>
 8016cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cca:	f003 0320 	and.w	r3, r3, #32
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d003      	beq.n	8016cda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8016cd2:	6878      	ldr	r0, [r7, #4]
 8016cd4:	f001 f81c 	bl	8017d10 <UART_Receive_IT>
      return;
 8016cd8:	e256      	b.n	8017188 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8016cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	f000 80de 	beq.w	8016ea0 <HAL_UART_IRQHandler+0x22c>
 8016ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016ce8:	f003 0301 	and.w	r3, r3, #1
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d106      	bne.n	8016cfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8016cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016cf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	f000 80d1 	beq.w	8016ea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d02:	f003 0301 	and.w	r3, r3, #1
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d00b      	beq.n	8016d22 <HAL_UART_IRQHandler+0xae>
 8016d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d005      	beq.n	8016d22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d1a:	f043 0201 	orr.w	r2, r3, #1
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d26:	f003 0304 	and.w	r3, r3, #4
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d00b      	beq.n	8016d46 <HAL_UART_IRQHandler+0xd2>
 8016d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d32:	f003 0301 	and.w	r3, r3, #1
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d005      	beq.n	8016d46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d3e:	f043 0202 	orr.w	r2, r3, #2
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d4a:	f003 0302 	and.w	r3, r3, #2
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d00b      	beq.n	8016d6a <HAL_UART_IRQHandler+0xf6>
 8016d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d56:	f003 0301 	and.w	r3, r3, #1
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d005      	beq.n	8016d6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d62:	f043 0204 	orr.w	r2, r3, #4
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8016d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d6e:	f003 0308 	and.w	r3, r3, #8
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d011      	beq.n	8016d9a <HAL_UART_IRQHandler+0x126>
 8016d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d7a:	f003 0320 	and.w	r3, r3, #32
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d105      	bne.n	8016d8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8016d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016d86:	f003 0301 	and.w	r3, r3, #1
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d005      	beq.n	8016d9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d92:	f043 0208 	orr.w	r2, r3, #8
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	f000 81ed 	beq.w	801717e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016da8:	f003 0320 	and.w	r3, r3, #32
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d008      	beq.n	8016dc2 <HAL_UART_IRQHandler+0x14e>
 8016db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016db4:	f003 0320 	and.w	r3, r3, #32
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d002      	beq.n	8016dc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f000 ffa7 	bl	8017d10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	695b      	ldr	r3, [r3, #20]
 8016dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016dcc:	2b40      	cmp	r3, #64	; 0x40
 8016dce:	bf0c      	ite	eq
 8016dd0:	2301      	moveq	r3, #1
 8016dd2:	2300      	movne	r3, #0
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dde:	f003 0308 	and.w	r3, r3, #8
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d103      	bne.n	8016dee <HAL_UART_IRQHandler+0x17a>
 8016de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d04f      	beq.n	8016e8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f000 fe22 	bl	8017a38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	695b      	ldr	r3, [r3, #20]
 8016dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016dfe:	2b40      	cmp	r3, #64	; 0x40
 8016e00:	d141      	bne.n	8016e86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	3314      	adds	r3, #20
 8016e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e10:	e853 3f00 	ldrex	r3, [r3]
 8016e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8016e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	3314      	adds	r3, #20
 8016e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016e3e:	e841 2300 	strex	r3, r2, [r1]
 8016e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8016e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d1d9      	bne.n	8016e02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d013      	beq.n	8016e7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e5a:	4a7d      	ldr	r2, [pc, #500]	; (8017050 <HAL_UART_IRQHandler+0x3dc>)
 8016e5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7f1 f833 	bl	8007ece <HAL_DMA_Abort_IT>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d016      	beq.n	8016e9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016e78:	4610      	mov	r0, r2
 8016e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e7c:	e00e      	b.n	8016e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f000 f9a3 	bl	80171ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e84:	e00a      	b.n	8016e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	f000 f99f 	bl	80171ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e8c:	e006      	b.n	8016e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f000 f99b 	bl	80171ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2200      	movs	r2, #0
 8016e98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8016e9a:	e170      	b.n	801717e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e9c:	bf00      	nop
    return;
 8016e9e:	e16e      	b.n	801717e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ea4:	2b01      	cmp	r3, #1
 8016ea6:	f040 814a 	bne.w	801713e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8016eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016eae:	f003 0310 	and.w	r3, r3, #16
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	f000 8143 	beq.w	801713e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8016eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ebc:	f003 0310 	and.w	r3, r3, #16
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f000 813c 	beq.w	801713e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	60bb      	str	r3, [r7, #8]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	60bb      	str	r3, [r7, #8]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	60bb      	str	r3, [r7, #8]
 8016eda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	695b      	ldr	r3, [r3, #20]
 8016ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ee6:	2b40      	cmp	r3, #64	; 0x40
 8016ee8:	f040 80b4 	bne.w	8017054 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	685b      	ldr	r3, [r3, #4]
 8016ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f000 8140 	beq.w	8017182 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	f080 8139 	bcs.w	8017182 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016f16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f1c:	69db      	ldr	r3, [r3, #28]
 8016f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f22:	f000 8088 	beq.w	8017036 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	330c      	adds	r3, #12
 8016f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016f34:	e853 3f00 	ldrex	r3, [r3]
 8016f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	330c      	adds	r3, #12
 8016f4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016f5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016f62:	e841 2300 	strex	r3, r2, [r1]
 8016f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d1d9      	bne.n	8016f26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	3314      	adds	r3, #20
 8016f78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016f7c:	e853 3f00 	ldrex	r3, [r3]
 8016f80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f84:	f023 0301 	bic.w	r3, r3, #1
 8016f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	3314      	adds	r3, #20
 8016f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016f96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016fa2:	e841 2300 	strex	r3, r2, [r1]
 8016fa6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d1e1      	bne.n	8016f72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	3314      	adds	r3, #20
 8016fb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016fb8:	e853 3f00 	ldrex	r3, [r3]
 8016fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	3314      	adds	r3, #20
 8016fce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016fd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016fd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016fd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016fda:	e841 2300 	strex	r3, r2, [r1]
 8016fde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d1e3      	bne.n	8016fae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	2220      	movs	r2, #32
 8016fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	330c      	adds	r3, #12
 8016ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ffe:	e853 3f00 	ldrex	r3, [r3]
 8017002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017006:	f023 0310 	bic.w	r3, r3, #16
 801700a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	330c      	adds	r3, #12
 8017014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017018:	65ba      	str	r2, [r7, #88]	; 0x58
 801701a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801701c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801701e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017020:	e841 2300 	strex	r3, r2, [r1]
 8017024:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017028:	2b00      	cmp	r3, #0
 801702a:	d1e3      	bne.n	8016ff4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017030:	4618      	mov	r0, r3
 8017032:	f7f0 fedc 	bl	8007dee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801703e:	b29b      	uxth	r3, r3
 8017040:	1ad3      	subs	r3, r2, r3
 8017042:	b29b      	uxth	r3, r3
 8017044:	4619      	mov	r1, r3
 8017046:	6878      	ldr	r0, [r7, #4]
 8017048:	f000 f8e7 	bl	801721a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801704c:	e099      	b.n	8017182 <HAL_UART_IRQHandler+0x50e>
 801704e:	bf00      	nop
 8017050:	08017aff 	.word	0x08017aff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801705c:	b29b      	uxth	r3, r3
 801705e:	1ad3      	subs	r3, r2, r3
 8017060:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017068:	b29b      	uxth	r3, r3
 801706a:	2b00      	cmp	r3, #0
 801706c:	f000 808b 	beq.w	8017186 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8017070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017074:	2b00      	cmp	r3, #0
 8017076:	f000 8086 	beq.w	8017186 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	330c      	adds	r3, #12
 8017080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017084:	e853 3f00 	ldrex	r3, [r3]
 8017088:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801708c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	330c      	adds	r3, #12
 801709a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801709e:	647a      	str	r2, [r7, #68]	; 0x44
 80170a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80170a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80170a6:	e841 2300 	strex	r3, r2, [r1]
 80170aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80170ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d1e3      	bne.n	801707a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	3314      	adds	r3, #20
 80170b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170bc:	e853 3f00 	ldrex	r3, [r3]
 80170c0:	623b      	str	r3, [r7, #32]
   return(result);
 80170c2:	6a3b      	ldr	r3, [r7, #32]
 80170c4:	f023 0301 	bic.w	r3, r3, #1
 80170c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	3314      	adds	r3, #20
 80170d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80170d6:	633a      	str	r2, [r7, #48]	; 0x30
 80170d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170de:	e841 2300 	strex	r3, r2, [r1]
 80170e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80170e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d1e3      	bne.n	80170b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	2220      	movs	r2, #32
 80170ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	2200      	movs	r2, #0
 80170f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	330c      	adds	r3, #12
 80170fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	e853 3f00 	ldrex	r3, [r3]
 8017106:	60fb      	str	r3, [r7, #12]
   return(result);
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f023 0310 	bic.w	r3, r3, #16
 801710e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	330c      	adds	r3, #12
 8017118:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801711c:	61fa      	str	r2, [r7, #28]
 801711e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017120:	69b9      	ldr	r1, [r7, #24]
 8017122:	69fa      	ldr	r2, [r7, #28]
 8017124:	e841 2300 	strex	r3, r2, [r1]
 8017128:	617b      	str	r3, [r7, #20]
   return(result);
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d1e3      	bne.n	80170f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017134:	4619      	mov	r1, r3
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f000 f86f 	bl	801721a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801713c:	e023      	b.n	8017186 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017146:	2b00      	cmp	r3, #0
 8017148:	d009      	beq.n	801715e <HAL_UART_IRQHandler+0x4ea>
 801714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801714e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017152:	2b00      	cmp	r3, #0
 8017154:	d003      	beq.n	801715e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8017156:	6878      	ldr	r0, [r7, #4]
 8017158:	f000 fd72 	bl	8017c40 <UART_Transmit_IT>
    return;
 801715c:	e014      	b.n	8017188 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017166:	2b00      	cmp	r3, #0
 8017168:	d00e      	beq.n	8017188 <HAL_UART_IRQHandler+0x514>
 801716a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017172:	2b00      	cmp	r3, #0
 8017174:	d008      	beq.n	8017188 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f000 fdb2 	bl	8017ce0 <UART_EndTransmit_IT>
    return;
 801717c:	e004      	b.n	8017188 <HAL_UART_IRQHandler+0x514>
    return;
 801717e:	bf00      	nop
 8017180:	e002      	b.n	8017188 <HAL_UART_IRQHandler+0x514>
      return;
 8017182:	bf00      	nop
 8017184:	e000      	b.n	8017188 <HAL_UART_IRQHandler+0x514>
      return;
 8017186:	bf00      	nop
  }
}
 8017188:	37e8      	adds	r7, #232	; 0xe8
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}

0801718e <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801718e:	b480      	push	{r7}
 8017190:	b083      	sub	sp, #12
 8017192:	af00      	add	r7, sp, #0
 8017194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017196:	bf00      	nop
 8017198:	370c      	adds	r7, #12
 801719a:	46bd      	mov	sp, r7
 801719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a0:	4770      	bx	lr

080171a2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80171a2:	b480      	push	{r7}
 80171a4:	b083      	sub	sp, #12
 80171a6:	af00      	add	r7, sp, #0
 80171a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80171aa:	bf00      	nop
 80171ac:	370c      	adds	r7, #12
 80171ae:	46bd      	mov	sp, r7
 80171b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b4:	4770      	bx	lr

080171b6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80171b6:	b480      	push	{r7}
 80171b8:	b083      	sub	sp, #12
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80171be:	bf00      	nop
 80171c0:	370c      	adds	r7, #12
 80171c2:	46bd      	mov	sp, r7
 80171c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c8:	4770      	bx	lr

080171ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80171ca:	b480      	push	{r7}
 80171cc:	b083      	sub	sp, #12
 80171ce:	af00      	add	r7, sp, #0
 80171d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80171d2:	bf00      	nop
 80171d4:	370c      	adds	r7, #12
 80171d6:	46bd      	mov	sp, r7
 80171d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171dc:	4770      	bx	lr

080171de <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80171de:	b480      	push	{r7}
 80171e0:	b083      	sub	sp, #12
 80171e2:	af00      	add	r7, sp, #0
 80171e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80171e6:	bf00      	nop
 80171e8:	370c      	adds	r7, #12
 80171ea:	46bd      	mov	sp, r7
 80171ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f0:	4770      	bx	lr

080171f2 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80171f2:	b480      	push	{r7}
 80171f4:	b083      	sub	sp, #12
 80171f6:	af00      	add	r7, sp, #0
 80171f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80171fa:	bf00      	nop
 80171fc:	370c      	adds	r7, #12
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr

08017206 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017206:	b480      	push	{r7}
 8017208:	b083      	sub	sp, #12
 801720a:	af00      	add	r7, sp, #0
 801720c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801720e:	bf00      	nop
 8017210:	370c      	adds	r7, #12
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr

0801721a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801721a:	b480      	push	{r7}
 801721c:	b083      	sub	sp, #12
 801721e:	af00      	add	r7, sp, #0
 8017220:	6078      	str	r0, [r7, #4]
 8017222:	460b      	mov	r3, r1
 8017224:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017226:	bf00      	nop
 8017228:	370c      	adds	r7, #12
 801722a:	46bd      	mov	sp, r7
 801722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017230:	4770      	bx	lr

08017232 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8017232:	b480      	push	{r7}
 8017234:	b089      	sub	sp, #36	; 0x24
 8017236:	af00      	add	r7, sp, #0
 8017238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017240:	2b01      	cmp	r3, #1
 8017242:	d101      	bne.n	8017248 <HAL_LIN_SendBreak+0x16>
 8017244:	2302      	movs	r3, #2
 8017246:	e02a      	b.n	801729e <HAL_LIN_SendBreak+0x6c>
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2201      	movs	r2, #1
 801724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	2224      	movs	r2, #36	; 0x24
 8017254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	330c      	adds	r3, #12
 801725e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	e853 3f00 	ldrex	r3, [r3]
 8017266:	60bb      	str	r3, [r7, #8]
   return(result);
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	f043 0301 	orr.w	r3, r3, #1
 801726e:	61fb      	str	r3, [r7, #28]
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	330c      	adds	r3, #12
 8017276:	69fa      	ldr	r2, [r7, #28]
 8017278:	61ba      	str	r2, [r7, #24]
 801727a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801727c:	6979      	ldr	r1, [r7, #20]
 801727e:	69ba      	ldr	r2, [r7, #24]
 8017280:	e841 2300 	strex	r3, r2, [r1]
 8017284:	613b      	str	r3, [r7, #16]
   return(result);
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d1e5      	bne.n	8017258 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2220      	movs	r2, #32
 8017290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2200      	movs	r2, #0
 8017298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801729c:	2300      	movs	r3, #0
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3724      	adds	r7, #36	; 0x24
 80172a2:	46bd      	mov	sp, r7
 80172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a8:	4770      	bx	lr

080172aa <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 80172aa:	b480      	push	{r7}
 80172ac:	b089      	sub	sp, #36	; 0x24
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80172b8:	2b01      	cmp	r3, #1
 80172ba:	d101      	bne.n	80172c0 <HAL_MultiProcessor_EnterMuteMode+0x16>
 80172bc:	2302      	movs	r3, #2
 80172be:	e02a      	b.n	8017316 <HAL_MultiProcessor_EnterMuteMode+0x6c>
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2201      	movs	r2, #1
 80172c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	2224      	movs	r2, #36	; 0x24
 80172cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	330c      	adds	r3, #12
 80172d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	e853 3f00 	ldrex	r3, [r3]
 80172de:	60bb      	str	r3, [r7, #8]
   return(result);
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	f043 0302 	orr.w	r3, r3, #2
 80172e6:	61fb      	str	r3, [r7, #28]
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	330c      	adds	r3, #12
 80172ee:	69fa      	ldr	r2, [r7, #28]
 80172f0:	61ba      	str	r2, [r7, #24]
 80172f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172f4:	6979      	ldr	r1, [r7, #20]
 80172f6:	69ba      	ldr	r2, [r7, #24]
 80172f8:	e841 2300 	strex	r3, r2, [r1]
 80172fc:	613b      	str	r3, [r7, #16]
   return(result);
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d1e5      	bne.n	80172d0 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2220      	movs	r2, #32
 8017308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2200      	movs	r2, #0
 8017310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017314:	2300      	movs	r3, #0
}
 8017316:	4618      	mov	r0, r3
 8017318:	3724      	adds	r7, #36	; 0x24
 801731a:	46bd      	mov	sp, r7
 801731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017320:	4770      	bx	lr

08017322 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 8017322:	b480      	push	{r7}
 8017324:	b089      	sub	sp, #36	; 0x24
 8017326:	af00      	add	r7, sp, #0
 8017328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017330:	2b01      	cmp	r3, #1
 8017332:	d101      	bne.n	8017338 <HAL_MultiProcessor_ExitMuteMode+0x16>
 8017334:	2302      	movs	r3, #2
 8017336:	e02a      	b.n	801738e <HAL_MultiProcessor_ExitMuteMode+0x6c>
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2201      	movs	r2, #1
 801733c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	2224      	movs	r2, #36	; 0x24
 8017344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	330c      	adds	r3, #12
 801734e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	e853 3f00 	ldrex	r3, [r3]
 8017356:	60bb      	str	r3, [r7, #8]
   return(result);
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	f023 0302 	bic.w	r3, r3, #2
 801735e:	61fb      	str	r3, [r7, #28]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	330c      	adds	r3, #12
 8017366:	69fa      	ldr	r2, [r7, #28]
 8017368:	61ba      	str	r2, [r7, #24]
 801736a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801736c:	6979      	ldr	r1, [r7, #20]
 801736e:	69ba      	ldr	r2, [r7, #24]
 8017370:	e841 2300 	strex	r3, r2, [r1]
 8017374:	613b      	str	r3, [r7, #16]
   return(result);
 8017376:	693b      	ldr	r3, [r7, #16]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d1e5      	bne.n	8017348 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2220      	movs	r2, #32
 8017380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2200      	movs	r2, #0
 8017388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801738c:	2300      	movs	r3, #0
}
 801738e:	4618      	mov	r0, r3
 8017390:	3724      	adds	r7, #36	; 0x24
 8017392:	46bd      	mov	sp, r7
 8017394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017398:	4770      	bx	lr

0801739a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 801739a:	b480      	push	{r7}
 801739c:	b085      	sub	sp, #20
 801739e:	af00      	add	r7, sp, #0
 80173a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80173a2:	2300      	movs	r3, #0
 80173a4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80173ac:	2b01      	cmp	r3, #1
 80173ae:	d101      	bne.n	80173b4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80173b0:	2302      	movs	r3, #2
 80173b2:	e020      	b.n	80173f6 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2201      	movs	r2, #1
 80173b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	2224      	movs	r2, #36	; 0x24
 80173c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	68db      	ldr	r3, [r3, #12]
 80173ca:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	f023 030c 	bic.w	r3, r3, #12
 80173d2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	f043 0308 	orr.w	r3, r3, #8
 80173da:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2220      	movs	r2, #32
 80173e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	2200      	movs	r2, #0
 80173f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80173f4:	2300      	movs	r3, #0
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3714      	adds	r7, #20
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr

08017402 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8017402:	b480      	push	{r7}
 8017404:	b085      	sub	sp, #20
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 801740a:	2300      	movs	r3, #0
 801740c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017414:	2b01      	cmp	r3, #1
 8017416:	d101      	bne.n	801741c <HAL_HalfDuplex_EnableReceiver+0x1a>
 8017418:	2302      	movs	r3, #2
 801741a:	e020      	b.n	801745e <HAL_HalfDuplex_EnableReceiver+0x5c>
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2201      	movs	r2, #1
 8017420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2224      	movs	r2, #36	; 0x24
 8017428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	68db      	ldr	r3, [r3, #12]
 8017432:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	f023 030c 	bic.w	r3, r3, #12
 801743a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	f043 0304 	orr.w	r3, r3, #4
 8017442:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	68fa      	ldr	r2, [r7, #12]
 801744a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	2220      	movs	r2, #32
 8017450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2200      	movs	r2, #0
 8017458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801745c:	2300      	movs	r3, #0
}
 801745e:	4618      	mov	r0, r3
 8017460:	3714      	adds	r7, #20
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr

0801746a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 801746a:	b480      	push	{r7}
 801746c:	b085      	sub	sp, #20
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8017472:	2300      	movs	r3, #0
 8017474:	60fb      	str	r3, [r7, #12]
 8017476:	2300      	movs	r3, #0
 8017478:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017480:	b2db      	uxtb	r3, r3
 8017482:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801748a:	b2db      	uxtb	r3, r3
 801748c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	b2da      	uxtb	r2, r3
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	b2db      	uxtb	r3, r3
 8017496:	4313      	orrs	r3, r2
 8017498:	b2db      	uxtb	r3, r3
}
 801749a:	4618      	mov	r0, r3
 801749c:	3714      	adds	r7, #20
 801749e:	46bd      	mov	sp, r7
 80174a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a4:	4770      	bx	lr

080174a6 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80174a6:	b480      	push	{r7}
 80174a8:	b083      	sub	sp, #12
 80174aa:	af00      	add	r7, sp, #0
 80174ac:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	370c      	adds	r7, #12
 80174b6:	46bd      	mov	sp, r7
 80174b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174bc:	4770      	bx	lr

080174be <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80174be:	b580      	push	{r7, lr}
 80174c0:	b090      	sub	sp, #64	; 0x40
 80174c2:	af00      	add	r7, sp, #0
 80174c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d137      	bne.n	801754a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80174da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174dc:	2200      	movs	r2, #0
 80174de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80174e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	3314      	adds	r3, #20
 80174e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ea:	e853 3f00 	ldrex	r3, [r3]
 80174ee:	623b      	str	r3, [r7, #32]
   return(result);
 80174f0:	6a3b      	ldr	r3, [r7, #32]
 80174f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80174f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80174f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	3314      	adds	r3, #20
 80174fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017500:	633a      	str	r2, [r7, #48]	; 0x30
 8017502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017508:	e841 2300 	strex	r3, r2, [r1]
 801750c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017510:	2b00      	cmp	r3, #0
 8017512:	d1e5      	bne.n	80174e0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	330c      	adds	r3, #12
 801751a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801751c:	693b      	ldr	r3, [r7, #16]
 801751e:	e853 3f00 	ldrex	r3, [r3]
 8017522:	60fb      	str	r3, [r7, #12]
   return(result);
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801752a:	637b      	str	r3, [r7, #52]	; 0x34
 801752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	330c      	adds	r3, #12
 8017532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017534:	61fa      	str	r2, [r7, #28]
 8017536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017538:	69b9      	ldr	r1, [r7, #24]
 801753a:	69fa      	ldr	r2, [r7, #28]
 801753c:	e841 2300 	strex	r3, r2, [r1]
 8017540:	617b      	str	r3, [r7, #20]
   return(result);
 8017542:	697b      	ldr	r3, [r7, #20]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d1e5      	bne.n	8017514 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017548:	e002      	b.n	8017550 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801754a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801754c:	f7ff fe1f 	bl	801718e <HAL_UART_TxCpltCallback>
}
 8017550:	bf00      	nop
 8017552:	3740      	adds	r7, #64	; 0x40
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}

08017558 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b084      	sub	sp, #16
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017564:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8017566:	68f8      	ldr	r0, [r7, #12]
 8017568:	f7ff fe1b 	bl	80171a2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801756c:	bf00      	nop
 801756e:	3710      	adds	r7, #16
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}

08017574 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b09c      	sub	sp, #112	; 0x70
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017580:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801758c:	2b00      	cmp	r3, #0
 801758e:	d172      	bne.n	8017676 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8017590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017592:	2200      	movs	r2, #0
 8017594:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	330c      	adds	r3, #12
 801759c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801759e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175a0:	e853 3f00 	ldrex	r3, [r3]
 80175a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80175a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80175ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80175ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	330c      	adds	r3, #12
 80175b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80175b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80175b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80175bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80175be:	e841 2300 	strex	r3, r2, [r1]
 80175c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80175c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d1e5      	bne.n	8017596 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80175ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	3314      	adds	r3, #20
 80175d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175d4:	e853 3f00 	ldrex	r3, [r3]
 80175d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80175da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175dc:	f023 0301 	bic.w	r3, r3, #1
 80175e0:	667b      	str	r3, [r7, #100]	; 0x64
 80175e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	3314      	adds	r3, #20
 80175e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80175ea:	647a      	str	r2, [r7, #68]	; 0x44
 80175ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80175f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80175f2:	e841 2300 	strex	r3, r2, [r1]
 80175f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80175f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d1e5      	bne.n	80175ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80175fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	3314      	adds	r3, #20
 8017604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017608:	e853 3f00 	ldrex	r3, [r3]
 801760c:	623b      	str	r3, [r7, #32]
   return(result);
 801760e:	6a3b      	ldr	r3, [r7, #32]
 8017610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017614:	663b      	str	r3, [r7, #96]	; 0x60
 8017616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	3314      	adds	r3, #20
 801761c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801761e:	633a      	str	r2, [r7, #48]	; 0x30
 8017620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017626:	e841 2300 	strex	r3, r2, [r1]
 801762a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762e:	2b00      	cmp	r3, #0
 8017630:	d1e5      	bne.n	80175fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017634:	2220      	movs	r2, #32
 8017636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801763a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801763e:	2b01      	cmp	r3, #1
 8017640:	d119      	bne.n	8017676 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	330c      	adds	r3, #12
 8017648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	e853 3f00 	ldrex	r3, [r3]
 8017650:	60fb      	str	r3, [r7, #12]
   return(result);
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	f023 0310 	bic.w	r3, r3, #16
 8017658:	65fb      	str	r3, [r7, #92]	; 0x5c
 801765a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	330c      	adds	r3, #12
 8017660:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017662:	61fa      	str	r2, [r7, #28]
 8017664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017666:	69b9      	ldr	r1, [r7, #24]
 8017668:	69fa      	ldr	r2, [r7, #28]
 801766a:	e841 2300 	strex	r3, r2, [r1]
 801766e:	617b      	str	r3, [r7, #20]
   return(result);
 8017670:	697b      	ldr	r3, [r7, #20]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d1e5      	bne.n	8017642 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801767a:	2b01      	cmp	r3, #1
 801767c:	d106      	bne.n	801768c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801767e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017682:	4619      	mov	r1, r3
 8017684:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017686:	f7ff fdc8 	bl	801721a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801768a:	e002      	b.n	8017692 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801768c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801768e:	f7ea f93b 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8017692:	bf00      	nop
 8017694:	3770      	adds	r7, #112	; 0x70
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}

0801769a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801769a:	b580      	push	{r7, lr}
 801769c:	b084      	sub	sp, #16
 801769e:	af00      	add	r7, sp, #0
 80176a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176ac:	2b01      	cmp	r3, #1
 80176ae:	d108      	bne.n	80176c2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80176b4:	085b      	lsrs	r3, r3, #1
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	4619      	mov	r1, r3
 80176ba:	68f8      	ldr	r0, [r7, #12]
 80176bc:	f7ff fdad 	bl	801721a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80176c0:	e002      	b.n	80176c8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80176c2:	68f8      	ldr	r0, [r7, #12]
 80176c4:	f7ff fd77 	bl	80171b6 <HAL_UART_RxHalfCpltCallback>
}
 80176c8:	bf00      	nop
 80176ca:	3710      	adds	r7, #16
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}

080176d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b084      	sub	sp, #16
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80176d8:	2300      	movs	r3, #0
 80176da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80176e2:	68bb      	ldr	r3, [r7, #8]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	695b      	ldr	r3, [r3, #20]
 80176e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176ec:	2b80      	cmp	r3, #128	; 0x80
 80176ee:	bf0c      	ite	eq
 80176f0:	2301      	moveq	r3, #1
 80176f2:	2300      	movne	r3, #0
 80176f4:	b2db      	uxtb	r3, r3
 80176f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80176f8:	68bb      	ldr	r3, [r7, #8]
 80176fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80176fe:	b2db      	uxtb	r3, r3
 8017700:	2b21      	cmp	r3, #33	; 0x21
 8017702:	d108      	bne.n	8017716 <UART_DMAError+0x46>
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d005      	beq.n	8017716 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	2200      	movs	r2, #0
 801770e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8017710:	68b8      	ldr	r0, [r7, #8]
 8017712:	f000 f969 	bl	80179e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017716:	68bb      	ldr	r3, [r7, #8]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	695b      	ldr	r3, [r3, #20]
 801771c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017720:	2b40      	cmp	r3, #64	; 0x40
 8017722:	bf0c      	ite	eq
 8017724:	2301      	moveq	r3, #1
 8017726:	2300      	movne	r3, #0
 8017728:	b2db      	uxtb	r3, r3
 801772a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017732:	b2db      	uxtb	r3, r3
 8017734:	2b22      	cmp	r3, #34	; 0x22
 8017736:	d108      	bne.n	801774a <UART_DMAError+0x7a>
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d005      	beq.n	801774a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801773e:	68bb      	ldr	r3, [r7, #8]
 8017740:	2200      	movs	r2, #0
 8017742:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8017744:	68b8      	ldr	r0, [r7, #8]
 8017746:	f000 f977 	bl	8017a38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801774e:	f043 0210 	orr.w	r2, r3, #16
 8017752:	68bb      	ldr	r3, [r7, #8]
 8017754:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017756:	68b8      	ldr	r0, [r7, #8]
 8017758:	f7ff fd37 	bl	80171ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801775c:	bf00      	nop
 801775e:	3710      	adds	r7, #16
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b090      	sub	sp, #64	; 0x40
 8017768:	af00      	add	r7, sp, #0
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	603b      	str	r3, [r7, #0]
 8017770:	4613      	mov	r3, r2
 8017772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017774:	e050      	b.n	8017818 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801777c:	d04c      	beq.n	8017818 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801777e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017780:	2b00      	cmp	r3, #0
 8017782:	d007      	beq.n	8017794 <UART_WaitOnFlagUntilTimeout+0x30>
 8017784:	f7ef f872 	bl	800686c <HAL_GetTick>
 8017788:	4602      	mov	r2, r0
 801778a:	683b      	ldr	r3, [r7, #0]
 801778c:	1ad3      	subs	r3, r2, r3
 801778e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017790:	429a      	cmp	r2, r3
 8017792:	d241      	bcs.n	8017818 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	330c      	adds	r3, #12
 801779a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801779e:	e853 3f00 	ldrex	r3, [r3]
 80177a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80177a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80177aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	330c      	adds	r3, #12
 80177b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80177b4:	637a      	str	r2, [r7, #52]	; 0x34
 80177b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80177ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177bc:	e841 2300 	strex	r3, r2, [r1]
 80177c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80177c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d1e5      	bne.n	8017794 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	3314      	adds	r3, #20
 80177ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	e853 3f00 	ldrex	r3, [r3]
 80177d6:	613b      	str	r3, [r7, #16]
   return(result);
 80177d8:	693b      	ldr	r3, [r7, #16]
 80177da:	f023 0301 	bic.w	r3, r3, #1
 80177de:	63bb      	str	r3, [r7, #56]	; 0x38
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	3314      	adds	r3, #20
 80177e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80177e8:	623a      	str	r2, [r7, #32]
 80177ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177ec:	69f9      	ldr	r1, [r7, #28]
 80177ee:	6a3a      	ldr	r2, [r7, #32]
 80177f0:	e841 2300 	strex	r3, r2, [r1]
 80177f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80177f6:	69bb      	ldr	r3, [r7, #24]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d1e5      	bne.n	80177c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	2220      	movs	r2, #32
 8017800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	2220      	movs	r2, #32
 8017808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	2200      	movs	r2, #0
 8017810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8017814:	2303      	movs	r3, #3
 8017816:	e00f      	b.n	8017838 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	681a      	ldr	r2, [r3, #0]
 801781e:	68bb      	ldr	r3, [r7, #8]
 8017820:	4013      	ands	r3, r2
 8017822:	68ba      	ldr	r2, [r7, #8]
 8017824:	429a      	cmp	r2, r3
 8017826:	bf0c      	ite	eq
 8017828:	2301      	moveq	r3, #1
 801782a:	2300      	movne	r3, #0
 801782c:	b2db      	uxtb	r3, r3
 801782e:	461a      	mov	r2, r3
 8017830:	79fb      	ldrb	r3, [r7, #7]
 8017832:	429a      	cmp	r2, r3
 8017834:	d09f      	beq.n	8017776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017836:	2300      	movs	r3, #0
}
 8017838:	4618      	mov	r0, r3
 801783a:	3740      	adds	r7, #64	; 0x40
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017840:	b480      	push	{r7}
 8017842:	b085      	sub	sp, #20
 8017844:	af00      	add	r7, sp, #0
 8017846:	60f8      	str	r0, [r7, #12]
 8017848:	60b9      	str	r1, [r7, #8]
 801784a:	4613      	mov	r3, r2
 801784c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	68ba      	ldr	r2, [r7, #8]
 8017852:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	88fa      	ldrh	r2, [r7, #6]
 8017858:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	88fa      	ldrh	r2, [r7, #6]
 801785e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	2200      	movs	r2, #0
 8017864:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	2222      	movs	r2, #34	; 0x22
 801786a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	2200      	movs	r2, #0
 8017872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	68da      	ldr	r2, [r3, #12]
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017884:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	695a      	ldr	r2, [r3, #20]
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	f042 0201 	orr.w	r2, r2, #1
 8017894:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	68da      	ldr	r2, [r3, #12]
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	f042 0220 	orr.w	r2, r2, #32
 80178a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80178a6:	2300      	movs	r3, #0
}
 80178a8:	4618      	mov	r0, r3
 80178aa:	3714      	adds	r7, #20
 80178ac:	46bd      	mov	sp, r7
 80178ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b2:	4770      	bx	lr

080178b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b098      	sub	sp, #96	; 0x60
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	4613      	mov	r3, r2
 80178c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80178c2:	68ba      	ldr	r2, [r7, #8]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	88fa      	ldrh	r2, [r7, #6]
 80178cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	2200      	movs	r2, #0
 80178d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2222      	movs	r2, #34	; 0x22
 80178d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178e0:	4a3e      	ldr	r2, [pc, #248]	; (80179dc <UART_Start_Receive_DMA+0x128>)
 80178e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178e8:	4a3d      	ldr	r2, [pc, #244]	; (80179e0 <UART_Start_Receive_DMA+0x12c>)
 80178ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178f0:	4a3c      	ldr	r2, [pc, #240]	; (80179e4 <UART_Start_Receive_DMA+0x130>)
 80178f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178f8:	2200      	movs	r2, #0
 80178fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80178fc:	f107 0308 	add.w	r3, r7, #8
 8017900:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	3304      	adds	r3, #4
 801790c:	4619      	mov	r1, r3
 801790e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017910:	681a      	ldr	r2, [r3, #0]
 8017912:	88fb      	ldrh	r3, [r7, #6]
 8017914:	f7f0 fa13 	bl	8007d3e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8017918:	2300      	movs	r3, #0
 801791a:	613b      	str	r3, [r7, #16]
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	613b      	str	r3, [r7, #16]
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	685b      	ldr	r3, [r3, #4]
 801792a:	613b      	str	r3, [r7, #16]
 801792c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	2200      	movs	r2, #0
 8017932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	330c      	adds	r3, #12
 801793c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801793e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017940:	e853 3f00 	ldrex	r3, [r3]
 8017944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801794c:	65bb      	str	r3, [r7, #88]	; 0x58
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	330c      	adds	r3, #12
 8017954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017956:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017958:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801795a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801795c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801795e:	e841 2300 	strex	r3, r2, [r1]
 8017962:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017966:	2b00      	cmp	r3, #0
 8017968:	d1e5      	bne.n	8017936 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	3314      	adds	r3, #20
 8017970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017974:	e853 3f00 	ldrex	r3, [r3]
 8017978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801797c:	f043 0301 	orr.w	r3, r3, #1
 8017980:	657b      	str	r3, [r7, #84]	; 0x54
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	3314      	adds	r3, #20
 8017988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801798a:	63ba      	str	r2, [r7, #56]	; 0x38
 801798c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801798e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017992:	e841 2300 	strex	r3, r2, [r1]
 8017996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1e5      	bne.n	801796a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	3314      	adds	r3, #20
 80179a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179a6:	69bb      	ldr	r3, [r7, #24]
 80179a8:	e853 3f00 	ldrex	r3, [r3]
 80179ac:	617b      	str	r3, [r7, #20]
   return(result);
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179b4:	653b      	str	r3, [r7, #80]	; 0x50
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	3314      	adds	r3, #20
 80179bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80179be:	627a      	str	r2, [r7, #36]	; 0x24
 80179c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179c2:	6a39      	ldr	r1, [r7, #32]
 80179c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179c6:	e841 2300 	strex	r3, r2, [r1]
 80179ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80179cc:	69fb      	ldr	r3, [r7, #28]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d1e5      	bne.n	801799e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80179d2:	2300      	movs	r3, #0
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3760      	adds	r7, #96	; 0x60
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	08017575 	.word	0x08017575
 80179e0:	0801769b 	.word	0x0801769b
 80179e4:	080176d1 	.word	0x080176d1

080179e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80179e8:	b480      	push	{r7}
 80179ea:	b089      	sub	sp, #36	; 0x24
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	330c      	adds	r3, #12
 80179f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	e853 3f00 	ldrex	r3, [r3]
 80179fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8017a06:	61fb      	str	r3, [r7, #28]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	330c      	adds	r3, #12
 8017a0e:	69fa      	ldr	r2, [r7, #28]
 8017a10:	61ba      	str	r2, [r7, #24]
 8017a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a14:	6979      	ldr	r1, [r7, #20]
 8017a16:	69ba      	ldr	r2, [r7, #24]
 8017a18:	e841 2300 	strex	r3, r2, [r1]
 8017a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8017a1e:	693b      	ldr	r3, [r7, #16]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1e5      	bne.n	80179f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	2220      	movs	r2, #32
 8017a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8017a2c:	bf00      	nop
 8017a2e:	3724      	adds	r7, #36	; 0x24
 8017a30:	46bd      	mov	sp, r7
 8017a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a36:	4770      	bx	lr

08017a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017a38:	b480      	push	{r7}
 8017a3a:	b095      	sub	sp, #84	; 0x54
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	330c      	adds	r3, #12
 8017a46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a4a:	e853 3f00 	ldrex	r3, [r3]
 8017a4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	330c      	adds	r3, #12
 8017a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a60:	643a      	str	r2, [r7, #64]	; 0x40
 8017a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017a68:	e841 2300 	strex	r3, r2, [r1]
 8017a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d1e5      	bne.n	8017a40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	3314      	adds	r3, #20
 8017a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a7c:	6a3b      	ldr	r3, [r7, #32]
 8017a7e:	e853 3f00 	ldrex	r3, [r3]
 8017a82:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a84:	69fb      	ldr	r3, [r7, #28]
 8017a86:	f023 0301 	bic.w	r3, r3, #1
 8017a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	3314      	adds	r3, #20
 8017a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017a94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a9c:	e841 2300 	strex	r3, r2, [r1]
 8017aa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d1e5      	bne.n	8017a74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	d119      	bne.n	8017ae4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	330c      	adds	r3, #12
 8017ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	e853 3f00 	ldrex	r3, [r3]
 8017abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8017ac0:	68bb      	ldr	r3, [r7, #8]
 8017ac2:	f023 0310 	bic.w	r3, r3, #16
 8017ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	330c      	adds	r3, #12
 8017ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ad0:	61ba      	str	r2, [r7, #24]
 8017ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ad4:	6979      	ldr	r1, [r7, #20]
 8017ad6:	69ba      	ldr	r2, [r7, #24]
 8017ad8:	e841 2300 	strex	r3, r2, [r1]
 8017adc:	613b      	str	r3, [r7, #16]
   return(result);
 8017ade:	693b      	ldr	r3, [r7, #16]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d1e5      	bne.n	8017ab0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2220      	movs	r2, #32
 8017ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2200      	movs	r2, #0
 8017af0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017af2:	bf00      	nop
 8017af4:	3754      	adds	r7, #84	; 0x54
 8017af6:	46bd      	mov	sp, r7
 8017af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afc:	4770      	bx	lr

08017afe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017afe:	b580      	push	{r7, lr}
 8017b00:	b084      	sub	sp, #16
 8017b02:	af00      	add	r7, sp, #0
 8017b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	2200      	movs	r2, #0
 8017b10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	2200      	movs	r2, #0
 8017b16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017b18:	68f8      	ldr	r0, [r7, #12]
 8017b1a:	f7ff fb56 	bl	80171ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b1e:	bf00      	nop
 8017b20:	3710      	adds	r7, #16
 8017b22:	46bd      	mov	sp, r7
 8017b24:	bd80      	pop	{r7, pc}

08017b26 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017b26:	b580      	push	{r7, lr}
 8017b28:	b084      	sub	sp, #16
 8017b2a:	af00      	add	r7, sp, #0
 8017b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b32:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b38:	2200      	movs	r2, #0
 8017b3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d004      	beq.n	8017b4e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d117      	bne.n	8017b7e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	2200      	movs	r2, #0
 8017b52:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	2200      	movs	r2, #0
 8017b58:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	2220      	movs	r2, #32
 8017b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2220      	movs	r2, #32
 8017b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	2200      	movs	r2, #0
 8017b74:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017b76:	68f8      	ldr	r0, [r7, #12]
 8017b78:	f7ff fb31 	bl	80171de <HAL_UART_AbortCpltCallback>
 8017b7c:	e000      	b.n	8017b80 <UART_DMATxAbortCallback+0x5a>
      return;
 8017b7e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b80:	3710      	adds	r7, #16
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}

08017b86 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017b86:	b580      	push	{r7, lr}
 8017b88:	b084      	sub	sp, #16
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b92:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b98:	2200      	movs	r2, #0
 8017b9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d004      	beq.n	8017bae <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d117      	bne.n	8017bde <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	2220      	movs	r2, #32
 8017bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	2220      	movs	r2, #32
 8017bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	f7ff fb01 	bl	80171de <HAL_UART_AbortCpltCallback>
 8017bdc:	e000      	b.n	8017be0 <UART_DMARxAbortCallback+0x5a>
      return;
 8017bde:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017be0:	3710      	adds	r7, #16
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}

08017be6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017be6:	b580      	push	{r7, lr}
 8017be8:	b084      	sub	sp, #16
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bf2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	2220      	movs	r2, #32
 8017bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8017c02:	68f8      	ldr	r0, [r7, #12]
 8017c04:	f7ff faf5 	bl	80171f2 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017c08:	bf00      	nop
 8017c0a:	3710      	adds	r7, #16
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b084      	sub	sp, #16
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c1c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	2200      	movs	r2, #0
 8017c22:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	2220      	movs	r2, #32
 8017c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	2200      	movs	r2, #0
 8017c30:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8017c32:	68f8      	ldr	r0, [r7, #12]
 8017c34:	f7ff fae7 	bl	8017206 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017c38:	bf00      	nop
 8017c3a:	3710      	adds	r7, #16
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}

08017c40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017c40:	b480      	push	{r7}
 8017c42:	b085      	sub	sp, #20
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017c4e:	b2db      	uxtb	r3, r3
 8017c50:	2b21      	cmp	r3, #33	; 0x21
 8017c52:	d13e      	bne.n	8017cd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	689b      	ldr	r3, [r3, #8]
 8017c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c5c:	d114      	bne.n	8017c88 <UART_Transmit_IT+0x48>
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	691b      	ldr	r3, [r3, #16]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d110      	bne.n	8017c88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	6a1b      	ldr	r3, [r3, #32]
 8017c6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	881b      	ldrh	r3, [r3, #0]
 8017c70:	461a      	mov	r2, r3
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017c7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6a1b      	ldr	r3, [r3, #32]
 8017c80:	1c9a      	adds	r2, r3, #2
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	621a      	str	r2, [r3, #32]
 8017c86:	e008      	b.n	8017c9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	6a1b      	ldr	r3, [r3, #32]
 8017c8c:	1c59      	adds	r1, r3, #1
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	6211      	str	r1, [r2, #32]
 8017c92:	781a      	ldrb	r2, [r3, #0]
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	3b01      	subs	r3, #1
 8017ca2:	b29b      	uxth	r3, r3
 8017ca4:	687a      	ldr	r2, [r7, #4]
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d10f      	bne.n	8017cce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	68da      	ldr	r2, [r3, #12]
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017cbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	68da      	ldr	r2, [r3, #12]
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017ccc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	e000      	b.n	8017cd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017cd2:	2302      	movs	r3, #2
  }
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3714      	adds	r7, #20
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cde:	4770      	bx	lr

08017ce0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b082      	sub	sp, #8
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	68da      	ldr	r2, [r3, #12]
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017cf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2220      	movs	r2, #32
 8017cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	f7ff fa44 	bl	801718e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017d06:	2300      	movs	r3, #0
}
 8017d08:	4618      	mov	r0, r3
 8017d0a:	3708      	adds	r7, #8
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}

08017d10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b08c      	sub	sp, #48	; 0x30
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017d1e:	b2db      	uxtb	r3, r3
 8017d20:	2b22      	cmp	r3, #34	; 0x22
 8017d22:	f040 80ab 	bne.w	8017e7c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	689b      	ldr	r3, [r3, #8]
 8017d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d2e:	d117      	bne.n	8017d60 <UART_Receive_IT+0x50>
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	691b      	ldr	r3, [r3, #16]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d113      	bne.n	8017d60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d40:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	685b      	ldr	r3, [r3, #4]
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d58:	1c9a      	adds	r2, r3, #2
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8017d5e:	e026      	b.n	8017dae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017d66:	2300      	movs	r3, #0
 8017d68:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	689b      	ldr	r3, [r3, #8]
 8017d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017d72:	d007      	beq.n	8017d84 <UART_Receive_IT+0x74>
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	689b      	ldr	r3, [r3, #8]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d10a      	bne.n	8017d92 <UART_Receive_IT+0x82>
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	691b      	ldr	r3, [r3, #16]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d106      	bne.n	8017d92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	685b      	ldr	r3, [r3, #4]
 8017d8a:	b2da      	uxtb	r2, r3
 8017d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8e:	701a      	strb	r2, [r3, #0]
 8017d90:	e008      	b.n	8017da4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	685b      	ldr	r3, [r3, #4]
 8017d98:	b2db      	uxtb	r3, r3
 8017d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d9e:	b2da      	uxtb	r2, r3
 8017da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017da8:	1c5a      	adds	r2, r3, #1
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	3b01      	subs	r3, #1
 8017db6:	b29b      	uxth	r3, r3
 8017db8:	687a      	ldr	r2, [r7, #4]
 8017dba:	4619      	mov	r1, r3
 8017dbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d15a      	bne.n	8017e78 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	68da      	ldr	r2, [r3, #12]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f022 0220 	bic.w	r2, r2, #32
 8017dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	68da      	ldr	r2, [r3, #12]
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	695a      	ldr	r2, [r3, #20]
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f022 0201 	bic.w	r2, r2, #1
 8017df0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	2220      	movs	r2, #32
 8017df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dfe:	2b01      	cmp	r3, #1
 8017e00:	d135      	bne.n	8017e6e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	2200      	movs	r2, #0
 8017e06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	330c      	adds	r3, #12
 8017e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	e853 3f00 	ldrex	r3, [r3]
 8017e16:	613b      	str	r3, [r7, #16]
   return(result);
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	f023 0310 	bic.w	r3, r3, #16
 8017e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	330c      	adds	r3, #12
 8017e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e28:	623a      	str	r2, [r7, #32]
 8017e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e2c:	69f9      	ldr	r1, [r7, #28]
 8017e2e:	6a3a      	ldr	r2, [r7, #32]
 8017e30:	e841 2300 	strex	r3, r2, [r1]
 8017e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8017e36:	69bb      	ldr	r3, [r7, #24]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d1e5      	bne.n	8017e08 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	f003 0310 	and.w	r3, r3, #16
 8017e46:	2b10      	cmp	r3, #16
 8017e48:	d10a      	bne.n	8017e60 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	60fb      	str	r3, [r7, #12]
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	60fb      	str	r3, [r7, #12]
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	685b      	ldr	r3, [r3, #4]
 8017e5c:	60fb      	str	r3, [r7, #12]
 8017e5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017e64:	4619      	mov	r1, r3
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f7ff f9d7 	bl	801721a <HAL_UARTEx_RxEventCallback>
 8017e6c:	e002      	b.n	8017e74 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8017e6e:	6878      	ldr	r0, [r7, #4]
 8017e70:	f7e9 fd4a 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8017e74:	2300      	movs	r3, #0
 8017e76:	e002      	b.n	8017e7e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	e000      	b.n	8017e7e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8017e7c:	2302      	movs	r3, #2
  }
}
 8017e7e:	4618      	mov	r0, r3
 8017e80:	3730      	adds	r7, #48	; 0x30
 8017e82:	46bd      	mov	sp, r7
 8017e84:	bd80      	pop	{r7, pc}

08017e86 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017e86:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017e8a:	b0c0      	sub	sp, #256	; 0x100
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	691b      	ldr	r3, [r3, #16]
 8017e9a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ea2:	68d9      	ldr	r1, [r3, #12]
 8017ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ea8:	681a      	ldr	r2, [r3, #0]
 8017eaa:	ea40 0301 	orr.w	r3, r0, r1
 8017eae:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eb4:	689a      	ldr	r2, [r3, #8]
 8017eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eba:	691b      	ldr	r3, [r3, #16]
 8017ebc:	431a      	orrs	r2, r3
 8017ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ec2:	695b      	ldr	r3, [r3, #20]
 8017ec4:	431a      	orrs	r2, r3
 8017ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eca:	69db      	ldr	r3, [r3, #28]
 8017ecc:	4313      	orrs	r3, r2
 8017ece:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8017ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	68db      	ldr	r3, [r3, #12]
 8017eda:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8017ede:	f021 010c 	bic.w	r1, r1, #12
 8017ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017eec:	430b      	orrs	r3, r1
 8017eee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8017ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	695b      	ldr	r3, [r3, #20]
 8017ef8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8017efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f00:	6999      	ldr	r1, [r3, #24]
 8017f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f06:	681a      	ldr	r2, [r3, #0]
 8017f08:	ea40 0301 	orr.w	r3, r0, r1
 8017f0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f12:	681a      	ldr	r2, [r3, #0]
 8017f14:	4b8e      	ldr	r3, [pc, #568]	; (8018150 <UART_SetConfig+0x2ca>)
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d005      	beq.n	8017f26 <UART_SetConfig+0xa0>
 8017f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f1e:	681a      	ldr	r2, [r3, #0]
 8017f20:	4b8c      	ldr	r3, [pc, #560]	; (8018154 <UART_SetConfig+0x2ce>)
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d104      	bne.n	8017f30 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8017f26:	f7fa fa11 	bl	801234c <HAL_RCC_GetPCLK2Freq>
 8017f2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8017f2e:	e003      	b.n	8017f38 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017f30:	f7fa f9f8 	bl	8012324 <HAL_RCC_GetPCLK1Freq>
 8017f34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f3c:	69db      	ldr	r3, [r3, #28]
 8017f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017f42:	f040 810b 	bne.w	801815c <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8017f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017f50:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017f54:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8017f58:	4622      	mov	r2, r4
 8017f5a:	462b      	mov	r3, r5
 8017f5c:	1891      	adds	r1, r2, r2
 8017f5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8017f60:	415b      	adcs	r3, r3
 8017f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017f64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017f68:	4621      	mov	r1, r4
 8017f6a:	eb12 0801 	adds.w	r8, r2, r1
 8017f6e:	4629      	mov	r1, r5
 8017f70:	eb43 0901 	adc.w	r9, r3, r1
 8017f74:	f04f 0200 	mov.w	r2, #0
 8017f78:	f04f 0300 	mov.w	r3, #0
 8017f7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017f80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017f84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017f88:	4690      	mov	r8, r2
 8017f8a:	4699      	mov	r9, r3
 8017f8c:	4623      	mov	r3, r4
 8017f8e:	eb18 0303 	adds.w	r3, r8, r3
 8017f92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017f96:	462b      	mov	r3, r5
 8017f98:	eb49 0303 	adc.w	r3, r9, r3
 8017f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017fa4:	685b      	ldr	r3, [r3, #4]
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017fac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8017fb0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8017fb4:	460b      	mov	r3, r1
 8017fb6:	18db      	adds	r3, r3, r3
 8017fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8017fba:	4613      	mov	r3, r2
 8017fbc:	eb42 0303 	adc.w	r3, r2, r3
 8017fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8017fc2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8017fc6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017fca:	f001 fabb 	bl	8019544 <__aeabi_uldivmod>
 8017fce:	4602      	mov	r2, r0
 8017fd0:	460b      	mov	r3, r1
 8017fd2:	4b61      	ldr	r3, [pc, #388]	; (8018158 <UART_SetConfig+0x2d2>)
 8017fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8017fd8:	095b      	lsrs	r3, r3, #5
 8017fda:	011c      	lsls	r4, r3, #4
 8017fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017fe6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8017fea:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8017fee:	4642      	mov	r2, r8
 8017ff0:	464b      	mov	r3, r9
 8017ff2:	1891      	adds	r1, r2, r2
 8017ff4:	64b9      	str	r1, [r7, #72]	; 0x48
 8017ff6:	415b      	adcs	r3, r3
 8017ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017ffa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017ffe:	4641      	mov	r1, r8
 8018000:	eb12 0a01 	adds.w	sl, r2, r1
 8018004:	4649      	mov	r1, r9
 8018006:	eb43 0b01 	adc.w	fp, r3, r1
 801800a:	f04f 0200 	mov.w	r2, #0
 801800e:	f04f 0300 	mov.w	r3, #0
 8018012:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018016:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801801a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801801e:	4692      	mov	sl, r2
 8018020:	469b      	mov	fp, r3
 8018022:	4643      	mov	r3, r8
 8018024:	eb1a 0303 	adds.w	r3, sl, r3
 8018028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801802c:	464b      	mov	r3, r9
 801802e:	eb4b 0303 	adc.w	r3, fp, r3
 8018032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801803a:	685b      	ldr	r3, [r3, #4]
 801803c:	2200      	movs	r2, #0
 801803e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018042:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018046:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801804a:	460b      	mov	r3, r1
 801804c:	18db      	adds	r3, r3, r3
 801804e:	643b      	str	r3, [r7, #64]	; 0x40
 8018050:	4613      	mov	r3, r2
 8018052:	eb42 0303 	adc.w	r3, r2, r3
 8018056:	647b      	str	r3, [r7, #68]	; 0x44
 8018058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801805c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018060:	f001 fa70 	bl	8019544 <__aeabi_uldivmod>
 8018064:	4602      	mov	r2, r0
 8018066:	460b      	mov	r3, r1
 8018068:	4611      	mov	r1, r2
 801806a:	4b3b      	ldr	r3, [pc, #236]	; (8018158 <UART_SetConfig+0x2d2>)
 801806c:	fba3 2301 	umull	r2, r3, r3, r1
 8018070:	095b      	lsrs	r3, r3, #5
 8018072:	2264      	movs	r2, #100	; 0x64
 8018074:	fb02 f303 	mul.w	r3, r2, r3
 8018078:	1acb      	subs	r3, r1, r3
 801807a:	00db      	lsls	r3, r3, #3
 801807c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8018080:	4b35      	ldr	r3, [pc, #212]	; (8018158 <UART_SetConfig+0x2d2>)
 8018082:	fba3 2302 	umull	r2, r3, r3, r2
 8018086:	095b      	lsrs	r3, r3, #5
 8018088:	005b      	lsls	r3, r3, #1
 801808a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801808e:	441c      	add	r4, r3
 8018090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018094:	2200      	movs	r2, #0
 8018096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801809a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801809e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80180a2:	4642      	mov	r2, r8
 80180a4:	464b      	mov	r3, r9
 80180a6:	1891      	adds	r1, r2, r2
 80180a8:	63b9      	str	r1, [r7, #56]	; 0x38
 80180aa:	415b      	adcs	r3, r3
 80180ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80180ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80180b2:	4641      	mov	r1, r8
 80180b4:	1851      	adds	r1, r2, r1
 80180b6:	6339      	str	r1, [r7, #48]	; 0x30
 80180b8:	4649      	mov	r1, r9
 80180ba:	414b      	adcs	r3, r1
 80180bc:	637b      	str	r3, [r7, #52]	; 0x34
 80180be:	f04f 0200 	mov.w	r2, #0
 80180c2:	f04f 0300 	mov.w	r3, #0
 80180c6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80180ca:	4659      	mov	r1, fp
 80180cc:	00cb      	lsls	r3, r1, #3
 80180ce:	4651      	mov	r1, sl
 80180d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80180d4:	4651      	mov	r1, sl
 80180d6:	00ca      	lsls	r2, r1, #3
 80180d8:	4610      	mov	r0, r2
 80180da:	4619      	mov	r1, r3
 80180dc:	4603      	mov	r3, r0
 80180de:	4642      	mov	r2, r8
 80180e0:	189b      	adds	r3, r3, r2
 80180e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80180e6:	464b      	mov	r3, r9
 80180e8:	460a      	mov	r2, r1
 80180ea:	eb42 0303 	adc.w	r3, r2, r3
 80180ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80180f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180f6:	685b      	ldr	r3, [r3, #4]
 80180f8:	2200      	movs	r2, #0
 80180fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80180fe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8018102:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8018106:	460b      	mov	r3, r1
 8018108:	18db      	adds	r3, r3, r3
 801810a:	62bb      	str	r3, [r7, #40]	; 0x28
 801810c:	4613      	mov	r3, r2
 801810e:	eb42 0303 	adc.w	r3, r2, r3
 8018112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018114:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018118:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801811c:	f001 fa12 	bl	8019544 <__aeabi_uldivmod>
 8018120:	4602      	mov	r2, r0
 8018122:	460b      	mov	r3, r1
 8018124:	4b0c      	ldr	r3, [pc, #48]	; (8018158 <UART_SetConfig+0x2d2>)
 8018126:	fba3 1302 	umull	r1, r3, r3, r2
 801812a:	095b      	lsrs	r3, r3, #5
 801812c:	2164      	movs	r1, #100	; 0x64
 801812e:	fb01 f303 	mul.w	r3, r1, r3
 8018132:	1ad3      	subs	r3, r2, r3
 8018134:	00db      	lsls	r3, r3, #3
 8018136:	3332      	adds	r3, #50	; 0x32
 8018138:	4a07      	ldr	r2, [pc, #28]	; (8018158 <UART_SetConfig+0x2d2>)
 801813a:	fba2 2303 	umull	r2, r3, r2, r3
 801813e:	095b      	lsrs	r3, r3, #5
 8018140:	f003 0207 	and.w	r2, r3, #7
 8018144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	4422      	add	r2, r4
 801814c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801814e:	e104      	b.n	801835a <UART_SetConfig+0x4d4>
 8018150:	40011000 	.word	0x40011000
 8018154:	40011400 	.word	0x40011400
 8018158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801815c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018160:	2200      	movs	r2, #0
 8018162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018166:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801816a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801816e:	4642      	mov	r2, r8
 8018170:	464b      	mov	r3, r9
 8018172:	1891      	adds	r1, r2, r2
 8018174:	6239      	str	r1, [r7, #32]
 8018176:	415b      	adcs	r3, r3
 8018178:	627b      	str	r3, [r7, #36]	; 0x24
 801817a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801817e:	4641      	mov	r1, r8
 8018180:	1854      	adds	r4, r2, r1
 8018182:	4649      	mov	r1, r9
 8018184:	eb43 0501 	adc.w	r5, r3, r1
 8018188:	f04f 0200 	mov.w	r2, #0
 801818c:	f04f 0300 	mov.w	r3, #0
 8018190:	00eb      	lsls	r3, r5, #3
 8018192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018196:	00e2      	lsls	r2, r4, #3
 8018198:	4614      	mov	r4, r2
 801819a:	461d      	mov	r5, r3
 801819c:	4643      	mov	r3, r8
 801819e:	18e3      	adds	r3, r4, r3
 80181a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80181a4:	464b      	mov	r3, r9
 80181a6:	eb45 0303 	adc.w	r3, r5, r3
 80181aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80181ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	2200      	movs	r2, #0
 80181b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80181ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80181be:	f04f 0200 	mov.w	r2, #0
 80181c2:	f04f 0300 	mov.w	r3, #0
 80181c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80181ca:	4629      	mov	r1, r5
 80181cc:	008b      	lsls	r3, r1, #2
 80181ce:	4621      	mov	r1, r4
 80181d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80181d4:	4621      	mov	r1, r4
 80181d6:	008a      	lsls	r2, r1, #2
 80181d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80181dc:	f001 f9b2 	bl	8019544 <__aeabi_uldivmod>
 80181e0:	4602      	mov	r2, r0
 80181e2:	460b      	mov	r3, r1
 80181e4:	4b60      	ldr	r3, [pc, #384]	; (8018368 <UART_SetConfig+0x4e2>)
 80181e6:	fba3 2302 	umull	r2, r3, r3, r2
 80181ea:	095b      	lsrs	r3, r3, #5
 80181ec:	011c      	lsls	r4, r3, #4
 80181ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80181f2:	2200      	movs	r2, #0
 80181f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80181f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80181fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8018200:	4642      	mov	r2, r8
 8018202:	464b      	mov	r3, r9
 8018204:	1891      	adds	r1, r2, r2
 8018206:	61b9      	str	r1, [r7, #24]
 8018208:	415b      	adcs	r3, r3
 801820a:	61fb      	str	r3, [r7, #28]
 801820c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018210:	4641      	mov	r1, r8
 8018212:	1851      	adds	r1, r2, r1
 8018214:	6139      	str	r1, [r7, #16]
 8018216:	4649      	mov	r1, r9
 8018218:	414b      	adcs	r3, r1
 801821a:	617b      	str	r3, [r7, #20]
 801821c:	f04f 0200 	mov.w	r2, #0
 8018220:	f04f 0300 	mov.w	r3, #0
 8018224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018228:	4659      	mov	r1, fp
 801822a:	00cb      	lsls	r3, r1, #3
 801822c:	4651      	mov	r1, sl
 801822e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018232:	4651      	mov	r1, sl
 8018234:	00ca      	lsls	r2, r1, #3
 8018236:	4610      	mov	r0, r2
 8018238:	4619      	mov	r1, r3
 801823a:	4603      	mov	r3, r0
 801823c:	4642      	mov	r2, r8
 801823e:	189b      	adds	r3, r3, r2
 8018240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018244:	464b      	mov	r3, r9
 8018246:	460a      	mov	r2, r1
 8018248:	eb42 0303 	adc.w	r3, r2, r3
 801824c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018254:	685b      	ldr	r3, [r3, #4]
 8018256:	2200      	movs	r2, #0
 8018258:	67bb      	str	r3, [r7, #120]	; 0x78
 801825a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801825c:	f04f 0200 	mov.w	r2, #0
 8018260:	f04f 0300 	mov.w	r3, #0
 8018264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018268:	4649      	mov	r1, r9
 801826a:	008b      	lsls	r3, r1, #2
 801826c:	4641      	mov	r1, r8
 801826e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018272:	4641      	mov	r1, r8
 8018274:	008a      	lsls	r2, r1, #2
 8018276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801827a:	f001 f963 	bl	8019544 <__aeabi_uldivmod>
 801827e:	4602      	mov	r2, r0
 8018280:	460b      	mov	r3, r1
 8018282:	4b39      	ldr	r3, [pc, #228]	; (8018368 <UART_SetConfig+0x4e2>)
 8018284:	fba3 1302 	umull	r1, r3, r3, r2
 8018288:	095b      	lsrs	r3, r3, #5
 801828a:	2164      	movs	r1, #100	; 0x64
 801828c:	fb01 f303 	mul.w	r3, r1, r3
 8018290:	1ad3      	subs	r3, r2, r3
 8018292:	011b      	lsls	r3, r3, #4
 8018294:	3332      	adds	r3, #50	; 0x32
 8018296:	4a34      	ldr	r2, [pc, #208]	; (8018368 <UART_SetConfig+0x4e2>)
 8018298:	fba2 2303 	umull	r2, r3, r2, r3
 801829c:	095b      	lsrs	r3, r3, #5
 801829e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182a2:	441c      	add	r4, r3
 80182a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80182a8:	2200      	movs	r2, #0
 80182aa:	673b      	str	r3, [r7, #112]	; 0x70
 80182ac:	677a      	str	r2, [r7, #116]	; 0x74
 80182ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80182b2:	4642      	mov	r2, r8
 80182b4:	464b      	mov	r3, r9
 80182b6:	1891      	adds	r1, r2, r2
 80182b8:	60b9      	str	r1, [r7, #8]
 80182ba:	415b      	adcs	r3, r3
 80182bc:	60fb      	str	r3, [r7, #12]
 80182be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80182c2:	4641      	mov	r1, r8
 80182c4:	1851      	adds	r1, r2, r1
 80182c6:	6039      	str	r1, [r7, #0]
 80182c8:	4649      	mov	r1, r9
 80182ca:	414b      	adcs	r3, r1
 80182cc:	607b      	str	r3, [r7, #4]
 80182ce:	f04f 0200 	mov.w	r2, #0
 80182d2:	f04f 0300 	mov.w	r3, #0
 80182d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80182da:	4659      	mov	r1, fp
 80182dc:	00cb      	lsls	r3, r1, #3
 80182de:	4651      	mov	r1, sl
 80182e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80182e4:	4651      	mov	r1, sl
 80182e6:	00ca      	lsls	r2, r1, #3
 80182e8:	4610      	mov	r0, r2
 80182ea:	4619      	mov	r1, r3
 80182ec:	4603      	mov	r3, r0
 80182ee:	4642      	mov	r2, r8
 80182f0:	189b      	adds	r3, r3, r2
 80182f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80182f4:	464b      	mov	r3, r9
 80182f6:	460a      	mov	r2, r1
 80182f8:	eb42 0303 	adc.w	r3, r2, r3
 80182fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80182fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018302:	685b      	ldr	r3, [r3, #4]
 8018304:	2200      	movs	r2, #0
 8018306:	663b      	str	r3, [r7, #96]	; 0x60
 8018308:	667a      	str	r2, [r7, #100]	; 0x64
 801830a:	f04f 0200 	mov.w	r2, #0
 801830e:	f04f 0300 	mov.w	r3, #0
 8018312:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8018316:	4649      	mov	r1, r9
 8018318:	008b      	lsls	r3, r1, #2
 801831a:	4641      	mov	r1, r8
 801831c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018320:	4641      	mov	r1, r8
 8018322:	008a      	lsls	r2, r1, #2
 8018324:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8018328:	f001 f90c 	bl	8019544 <__aeabi_uldivmod>
 801832c:	4602      	mov	r2, r0
 801832e:	460b      	mov	r3, r1
 8018330:	4b0d      	ldr	r3, [pc, #52]	; (8018368 <UART_SetConfig+0x4e2>)
 8018332:	fba3 1302 	umull	r1, r3, r3, r2
 8018336:	095b      	lsrs	r3, r3, #5
 8018338:	2164      	movs	r1, #100	; 0x64
 801833a:	fb01 f303 	mul.w	r3, r1, r3
 801833e:	1ad3      	subs	r3, r2, r3
 8018340:	011b      	lsls	r3, r3, #4
 8018342:	3332      	adds	r3, #50	; 0x32
 8018344:	4a08      	ldr	r2, [pc, #32]	; (8018368 <UART_SetConfig+0x4e2>)
 8018346:	fba2 2303 	umull	r2, r3, r2, r3
 801834a:	095b      	lsrs	r3, r3, #5
 801834c:	f003 020f 	and.w	r2, r3, #15
 8018350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	4422      	add	r2, r4
 8018358:	609a      	str	r2, [r3, #8]
}
 801835a:	bf00      	nop
 801835c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018360:	46bd      	mov	sp, r7
 8018362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018366:	bf00      	nop
 8018368:	51eb851f 	.word	0x51eb851f

0801836c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 801836c:	b480      	push	{r7}
 801836e:	b085      	sub	sp, #20
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018376:	2300      	movs	r3, #0
 8018378:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018384:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8018386:	68fa      	ldr	r2, [r7, #12]
 8018388:	4b20      	ldr	r3, [pc, #128]	; (801840c <FSMC_NORSRAM_Init+0xa0>)
 801838a:	4013      	ands	r3, r2
 801838c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801838e:	683b      	ldr	r3, [r7, #0]
 8018390:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8018392:	683b      	ldr	r3, [r7, #0]
 8018394:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018396:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 801839c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80183a2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80183a8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80183aa:	683b      	ldr	r3, [r7, #0]
 80183ac:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80183ae:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80183b4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80183ba:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80183c0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80183c6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80183cc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80183ce:	683b      	ldr	r3, [r7, #0]
 80183d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80183d2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80183d8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80183da:	68fa      	ldr	r2, [r7, #12]
 80183dc:	4313      	orrs	r3, r2
 80183de:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80183e0:	683b      	ldr	r3, [r7, #0]
 80183e2:	689b      	ldr	r3, [r3, #8]
 80183e4:	2b08      	cmp	r3, #8
 80183e6:	d103      	bne.n	80183f0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183ee:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80183f0:	683b      	ldr	r3, [r7, #0]
 80183f2:	681a      	ldr	r2, [r3, #0]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	68f9      	ldr	r1, [r7, #12]
 80183f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80183fc:	2300      	movs	r3, #0
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3714      	adds	r7, #20
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr
 801840a:	bf00      	nop
 801840c:	fff00080 	.word	0xfff00080

08018410 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 8018410:	b480      	push	{r7}
 8018412:	b085      	sub	sp, #20
 8018414:	af00      	add	r7, sp, #0
 8018416:	60f8      	str	r0, [r7, #12]
 8018418:	60b9      	str	r1, [r7, #8]
 801841a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	687a      	ldr	r2, [r7, #4]
 8018420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018424:	f023 0101 	bic.w	r1, r3, #1
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d106      	bne.n	8018444 <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	687a      	ldr	r2, [r7, #4]
 801843a:	f243 01db 	movw	r1, #12507	; 0x30db
 801843e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018442:	e005      	b.n	8018450 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	687a      	ldr	r2, [r7, #4]
 8018448:	f243 01d2 	movw	r1, #12498	; 0x30d2
 801844c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	1c5a      	adds	r2, r3, #1
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801845a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 801845e:	68bb      	ldr	r3, [r7, #8]
 8018460:	687a      	ldr	r2, [r7, #4]
 8018462:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 801846a:	2300      	movs	r3, #0
}
 801846c:	4618      	mov	r0, r3
 801846e:	3714      	adds	r7, #20
 8018470:	46bd      	mov	sp, r7
 8018472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018476:	4770      	bx	lr

08018478 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018478:	b480      	push	{r7}
 801847a:	b087      	sub	sp, #28
 801847c:	af00      	add	r7, sp, #0
 801847e:	60f8      	str	r0, [r7, #12]
 8018480:	60b9      	str	r1, [r7, #8]
 8018482:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8018484:	2300      	movs	r3, #0
 8018486:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	1c5a      	adds	r2, r3, #1
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018492:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801849a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	685b      	ldr	r3, [r3, #4]
 80184a4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184a6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	689b      	ldr	r3, [r3, #8]
 80184ac:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80184ae:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	68db      	ldr	r3, [r3, #12]
 80184b4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80184b6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	691b      	ldr	r3, [r3, #16]
 80184bc:	3b01      	subs	r3, #1
 80184be:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80184c0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	695b      	ldr	r3, [r3, #20]
 80184c6:	3b02      	subs	r3, #2
 80184c8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80184ca:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80184d0:	4313      	orrs	r3, r2
 80184d2:	697a      	ldr	r2, [r7, #20]
 80184d4:	4313      	orrs	r3, r2
 80184d6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	1c5a      	adds	r2, r3, #1
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	6979      	ldr	r1, [r7, #20]
 80184e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80184e4:	2300      	movs	r3, #0
}
 80184e6:	4618      	mov	r0, r3
 80184e8:	371c      	adds	r7, #28
 80184ea:	46bd      	mov	sp, r7
 80184ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f0:	4770      	bx	lr

080184f2 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80184f2:	b480      	push	{r7}
 80184f4:	b087      	sub	sp, #28
 80184f6:	af00      	add	r7, sp, #0
 80184f8:	60f8      	str	r0, [r7, #12]
 80184fa:	60b9      	str	r1, [r7, #8]
 80184fc:	607a      	str	r2, [r7, #4]
 80184fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8018500:	2300      	movs	r3, #0
 8018502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801850a:	d122      	bne.n	8018552 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018514:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8018516:	697a      	ldr	r2, [r7, #20]
 8018518:	4b14      	ldr	r3, [pc, #80]	; (801856c <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 801851a:	4013      	ands	r3, r2
 801851c:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 801851e:	68bb      	ldr	r3, [r7, #8]
 8018520:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018522:	68bb      	ldr	r3, [r7, #8]
 8018524:	685b      	ldr	r3, [r3, #4]
 8018526:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018528:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 801852a:	68bb      	ldr	r3, [r7, #8]
 801852c:	689b      	ldr	r3, [r3, #8]
 801852e:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018530:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018532:	68bb      	ldr	r3, [r7, #8]
 8018534:	68db      	ldr	r3, [r3, #12]
 8018536:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8018538:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 801853e:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018540:	697a      	ldr	r2, [r7, #20]
 8018542:	4313      	orrs	r3, r2
 8018544:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	687a      	ldr	r2, [r7, #4]
 801854a:	6979      	ldr	r1, [r7, #20]
 801854c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018550:	e005      	b.n	801855e <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	687a      	ldr	r2, [r7, #4]
 8018556:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801855a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 801855e:	2300      	movs	r3, #0
}
 8018560:	4618      	mov	r0, r3
 8018562:	371c      	adds	r7, #28
 8018564:	46bd      	mov	sp, r7
 8018566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856a:	4770      	bx	lr
 801856c:	cff00000 	.word	0xcff00000

08018570 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018570:	b480      	push	{r7}
 8018572:	b083      	sub	sp, #12
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
 8018578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	683a      	ldr	r2, [r7, #0]
 801857e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018582:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	683a      	ldr	r2, [r7, #0]
 801858a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 801858e:	2300      	movs	r3, #0
}
 8018590:	4618      	mov	r0, r3
 8018592:	370c      	adds	r7, #12
 8018594:	46bd      	mov	sp, r7
 8018596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859a:	4770      	bx	lr

0801859c <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 801859c:	b480      	push	{r7}
 801859e:	b083      	sub	sp, #12
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	683a      	ldr	r2, [r7, #0]
 80185aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	683a      	ldr	r2, [r7, #0]
 80185b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 80185ba:	2300      	movs	r3, #0
}
 80185bc:	4618      	mov	r0, r3
 80185be:	370c      	adds	r7, #12
 80185c0:	46bd      	mov	sp, r7
 80185c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c6:	4770      	bx	lr

080185c8 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 80185c8:	b480      	push	{r7}
 80185ca:	b085      	sub	sp, #20
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 80185d2:	2300      	movs	r3, #0
 80185d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 80185d6:	683b      	ldr	r3, [r7, #0]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	2b10      	cmp	r3, #16
 80185dc:	d103      	bne.n	80185e6 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	60fb      	str	r3, [r7, #12]
 80185e4:	e002      	b.n	80185ec <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6a1b      	ldr	r3, [r3, #32]
 80185ea:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80185ec:	68fa      	ldr	r2, [r7, #12]
 80185ee:	4b16      	ldr	r3, [pc, #88]	; (8018648 <FSMC_NAND_Init+0x80>)
 80185f0:	4013      	ands	r3, r2
 80185f2:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80185fc:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8018602:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8018608:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	695b      	ldr	r3, [r3, #20]
 801860e:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8018610:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	699b      	ldr	r3, [r3, #24]
 8018616:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8018618:	431a      	orrs	r2, r3
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	4313      	orrs	r3, r2
 801861e:	f043 0308 	orr.w	r3, r3, #8
 8018622:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	2b10      	cmp	r3, #16
 801862a:	d103      	bne.n	8018634 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	68fa      	ldr	r2, [r7, #12]
 8018630:	601a      	str	r2, [r3, #0]
 8018632:	e002      	b.n	801863a <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	68fa      	ldr	r2, [r7, #12]
 8018638:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 801863a:	2300      	movs	r3, #0
}
 801863c:	4618      	mov	r0, r3
 801863e:	3714      	adds	r7, #20
 8018640:	46bd      	mov	sp, r7
 8018642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018646:	4770      	bx	lr
 8018648:	fff00181 	.word	0xfff00181

0801864c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801864c:	b480      	push	{r7}
 801864e:	b087      	sub	sp, #28
 8018650:	af00      	add	r7, sp, #0
 8018652:	60f8      	str	r0, [r7, #12]
 8018654:	60b9      	str	r1, [r7, #8]
 8018656:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018658:	2300      	movs	r3, #0
 801865a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2b10      	cmp	r3, #16
 8018660:	d103      	bne.n	801866a <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	689b      	ldr	r3, [r3, #8]
 8018666:	617b      	str	r3, [r7, #20]
 8018668:	e002      	b.n	8018670 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801866e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018670:	2300      	movs	r3, #0
 8018672:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018678:	68bb      	ldr	r3, [r7, #8]
 801867a:	685b      	ldr	r3, [r3, #4]
 801867c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 801867e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	689b      	ldr	r3, [r3, #8]
 8018684:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018686:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	68db      	ldr	r3, [r3, #12]
 801868c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 801868e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018690:	697a      	ldr	r2, [r7, #20]
 8018692:	4313      	orrs	r3, r2
 8018694:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	2b10      	cmp	r3, #16
 801869a:	d103      	bne.n	80186a4 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	697a      	ldr	r2, [r7, #20]
 80186a0:	609a      	str	r2, [r3, #8]
 80186a2:	e002      	b.n	80186aa <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	697a      	ldr	r2, [r7, #20]
 80186a8:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 80186aa:	2300      	movs	r3, #0
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	371c      	adds	r7, #28
 80186b0:	46bd      	mov	sp, r7
 80186b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b6:	4770      	bx	lr

080186b8 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80186b8:	b480      	push	{r7}
 80186ba:	b087      	sub	sp, #28
 80186bc:	af00      	add	r7, sp, #0
 80186be:	60f8      	str	r0, [r7, #12]
 80186c0:	60b9      	str	r1, [r7, #8]
 80186c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 80186c4:	2300      	movs	r3, #0
 80186c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	2b10      	cmp	r3, #16
 80186cc:	d103      	bne.n	80186d6 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	68db      	ldr	r3, [r3, #12]
 80186d2:	617b      	str	r3, [r7, #20]
 80186d4:	e002      	b.n	80186dc <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186da:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 80186dc:	2300      	movs	r3, #0
 80186de:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186e0:	68bb      	ldr	r3, [r7, #8]
 80186e2:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	685b      	ldr	r3, [r3, #4]
 80186e8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186ea:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	689b      	ldr	r3, [r3, #8]
 80186f0:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80186f2:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	68db      	ldr	r3, [r3, #12]
 80186f8:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80186fa:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80186fc:	697a      	ldr	r2, [r7, #20]
 80186fe:	4313      	orrs	r3, r2
 8018700:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2b10      	cmp	r3, #16
 8018706:	d103      	bne.n	8018710 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	697a      	ldr	r2, [r7, #20]
 801870c:	60da      	str	r2, [r3, #12]
 801870e:	e002      	b.n	8018716 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	697a      	ldr	r2, [r7, #20]
 8018714:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8018716:	2300      	movs	r3, #0
}
 8018718:	4618      	mov	r0, r3
 801871a:	371c      	adds	r7, #28
 801871c:	46bd      	mov	sp, r7
 801871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018722:	4770      	bx	lr

08018724 <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018724:	b480      	push	{r7}
 8018726:	b083      	sub	sp, #12
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
 801872c:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	2b10      	cmp	r3, #16
 8018732:	d106      	bne.n	8018742 <FSMC_NAND_DeInit+0x1e>
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	f023 0204 	bic.w	r2, r3, #4
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	601a      	str	r2, [r3, #0]
 8018740:	e005      	b.n	801874e <FSMC_NAND_DeInit+0x2a>
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	6a1b      	ldr	r3, [r3, #32]
 8018746:	f023 0204 	bic.w	r2, r3, #4
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 801874e:	683b      	ldr	r3, [r7, #0]
 8018750:	2b10      	cmp	r3, #16
 8018752:	d10e      	bne.n	8018772 <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2218      	movs	r2, #24
 8018758:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	2240      	movs	r2, #64	; 0x40
 801875e:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018766:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801876e:	60da      	str	r2, [r3, #12]
 8018770:	e00d      	b.n	801878e <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	2218      	movs	r2, #24
 8018776:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	2240      	movs	r2, #64	; 0x40
 801877c:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018784:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801878c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 801878e:	2300      	movs	r3, #0
}
 8018790:	4618      	mov	r0, r3
 8018792:	370c      	adds	r7, #12
 8018794:	46bd      	mov	sp, r7
 8018796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879a:	4770      	bx	lr

0801879c <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 801879c:	b480      	push	{r7}
 801879e:	b083      	sub	sp, #12
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	2b10      	cmp	r3, #16
 80187aa:	d106      	bne.n	80187ba <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	601a      	str	r2, [r3, #0]
 80187b8:	e005      	b.n	80187c6 <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	6a1b      	ldr	r3, [r3, #32]
 80187be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 80187c6:	2300      	movs	r3, #0
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	370c      	adds	r7, #12
 80187cc:	46bd      	mov	sp, r7
 80187ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d2:	4770      	bx	lr

080187d4 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 80187d4:	b480      	push	{r7}
 80187d6:	b083      	sub	sp, #12
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 80187de:	683b      	ldr	r3, [r7, #0]
 80187e0:	2b10      	cmp	r3, #16
 80187e2:	d106      	bne.n	80187f2 <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	601a      	str	r2, [r3, #0]
 80187f0:	e005      	b.n	80187fe <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6a1b      	ldr	r3, [r3, #32]
 80187f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 80187fe:	2300      	movs	r3, #0
}
 8018800:	4618      	mov	r0, r3
 8018802:	370c      	adds	r7, #12
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr

0801880c <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b086      	sub	sp, #24
 8018810:	af00      	add	r7, sp, #0
 8018812:	60f8      	str	r0, [r7, #12]
 8018814:	60b9      	str	r1, [r7, #8]
 8018816:	607a      	str	r2, [r7, #4]
 8018818:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 801881a:	2300      	movs	r3, #0
 801881c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 801881e:	f7ee f825 	bl	800686c <HAL_GetTick>
 8018822:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018824:	e010      	b.n	8018848 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8018826:	683b      	ldr	r3, [r7, #0]
 8018828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801882c:	d00c      	beq.n	8018848 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d007      	beq.n	8018844 <FSMC_NAND_GetECC+0x38>
 8018834:	f7ee f81a 	bl	800686c <HAL_GetTick>
 8018838:	4602      	mov	r2, r0
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	1ad3      	subs	r3, r2, r3
 801883e:	683a      	ldr	r2, [r7, #0]
 8018840:	429a      	cmp	r2, r3
 8018842:	d201      	bcs.n	8018848 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 8018844:	2303      	movs	r3, #3
 8018846:	e024      	b.n	8018892 <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2b10      	cmp	r3, #16
 801884c:	d109      	bne.n	8018862 <FSMC_NAND_GetECC+0x56>
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	685b      	ldr	r3, [r3, #4]
 8018852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018856:	2b40      	cmp	r3, #64	; 0x40
 8018858:	bf14      	ite	ne
 801885a:	2301      	movne	r3, #1
 801885c:	2300      	moveq	r3, #0
 801885e:	b2db      	uxtb	r3, r3
 8018860:	e008      	b.n	8018874 <FSMC_NAND_GetECC+0x68>
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801886a:	2b40      	cmp	r3, #64	; 0x40
 801886c:	bf14      	ite	ne
 801886e:	2301      	movne	r3, #1
 8018870:	2300      	moveq	r3, #0
 8018872:	b2db      	uxtb	r3, r3
 8018874:	2b00      	cmp	r3, #0
 8018876:	d1d6      	bne.n	8018826 <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2b10      	cmp	r3, #16
 801887c:	d104      	bne.n	8018888 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	695a      	ldr	r2, [r3, #20]
 8018882:	68bb      	ldr	r3, [r7, #8]
 8018884:	601a      	str	r2, [r3, #0]
 8018886:	e003      	b.n	8018890 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801888c:	68bb      	ldr	r3, [r7, #8]
 801888e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018890:	2300      	movs	r3, #0
}
 8018892:	4618      	mov	r0, r3
 8018894:	3718      	adds	r7, #24
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 801889a:	b480      	push	{r7}
 801889c:	b085      	sub	sp, #20
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
 80188a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80188a4:	2300      	movs	r3, #0
 80188a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80188b4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80188b8:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 80188ba:	683b      	ldr	r3, [r7, #0]
 80188bc:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 80188c4:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	689b      	ldr	r3, [r3, #8]
 80188ca:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 80188cc:	431a      	orrs	r2, r3
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	4313      	orrs	r3, r2
 80188d2:	f043 0310 	orr.w	r3, r3, #16
 80188d6:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	68fa      	ldr	r2, [r7, #12]
 80188dc:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80188de:	2300      	movs	r3, #0
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3714      	adds	r7, #20
 80188e4:	46bd      	mov	sp, r7
 80188e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ea:	4770      	bx	lr

080188ec <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80188ec:	b480      	push	{r7}
 80188ee:	b085      	sub	sp, #20
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80188f6:	2300      	movs	r3, #0
 80188f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	689b      	ldr	r3, [r3, #8]
 80188fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 8018900:	2300      	movs	r3, #0
 8018902:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018904:	683b      	ldr	r3, [r7, #0]
 8018906:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	685b      	ldr	r3, [r3, #4]
 801890c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 801890e:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 8018910:	683b      	ldr	r3, [r7, #0]
 8018912:	689b      	ldr	r3, [r3, #8]
 8018914:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018916:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 801891e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018920:	68fa      	ldr	r2, [r7, #12]
 8018922:	4313      	orrs	r3, r2
 8018924:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	68fa      	ldr	r2, [r7, #12]
 801892a:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 801892c:	2300      	movs	r3, #0
}
 801892e:	4618      	mov	r0, r3
 8018930:	3714      	adds	r7, #20
 8018932:	46bd      	mov	sp, r7
 8018934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018938:	4770      	bx	lr

0801893a <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 801893a:	b480      	push	{r7}
 801893c:	b085      	sub	sp, #20
 801893e:	af00      	add	r7, sp, #0
 8018940:	6078      	str	r0, [r7, #4]
 8018942:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018944:	2300      	movs	r3, #0
 8018946:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 801894e:	2300      	movs	r3, #0
 8018950:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018956:	683b      	ldr	r3, [r7, #0]
 8018958:	685b      	ldr	r3, [r3, #4]
 801895a:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801895c:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 801895e:	683b      	ldr	r3, [r7, #0]
 8018960:	689b      	ldr	r3, [r3, #8]
 8018962:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018964:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8018966:	683b      	ldr	r3, [r7, #0]
 8018968:	68db      	ldr	r3, [r3, #12]
 801896a:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 801896c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801896e:	68fa      	ldr	r2, [r7, #12]
 8018970:	4313      	orrs	r3, r2
 8018972:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	68fa      	ldr	r2, [r7, #12]
 8018978:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 801897a:	2300      	movs	r3, #0
}
 801897c:	4618      	mov	r0, r3
 801897e:	3714      	adds	r7, #20
 8018980:	46bd      	mov	sp, r7
 8018982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018986:	4770      	bx	lr

08018988 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018988:	b480      	push	{r7}
 801898a:	b085      	sub	sp, #20
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
 8018990:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018992:	2300      	movs	r3, #0
 8018994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	691b      	ldr	r3, [r3, #16]
 801899a:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 801899c:	2300      	movs	r3, #0
 801899e:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 80189a4:	683b      	ldr	r3, [r7, #0]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80189aa:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 80189ac:	683b      	ldr	r3, [r7, #0]
 80189ae:	689b      	ldr	r3, [r3, #8]
 80189b0:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 80189b2:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	68db      	ldr	r3, [r3, #12]
 80189b8:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 80189ba:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80189bc:	68fa      	ldr	r2, [r7, #12]
 80189be:	4313      	orrs	r3, r2
 80189c0:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	68fa      	ldr	r2, [r7, #12]
 80189c6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80189c8:	2300      	movs	r3, #0
}
 80189ca:	4618      	mov	r0, r3
 80189cc:	3714      	adds	r7, #20
 80189ce:	46bd      	mov	sp, r7
 80189d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d4:	4770      	bx	lr

080189d6 <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 80189d6:	b480      	push	{r7}
 80189d8:	b083      	sub	sp, #12
 80189da:	af00      	add	r7, sp, #0
 80189dc:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	f023 0204 	bic.w	r2, r3, #4
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2218      	movs	r2, #24
 80189ee:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	2200      	movs	r2, #0
 80189f4:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80189fc:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018a04:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018a0c:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018a0e:	2300      	movs	r3, #0
}
 8018a10:	4618      	mov	r0, r3
 8018a12:	370c      	adds	r7, #12
 8018a14:	46bd      	mov	sp, r7
 8018a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1a:	4770      	bx	lr

08018a1c <strlen>:
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a22:	2a00      	cmp	r2, #0
 8018a24:	d1fb      	bne.n	8018a1e <strlen+0x2>
 8018a26:	1a18      	subs	r0, r3, r0
 8018a28:	3801      	subs	r0, #1
 8018a2a:	4770      	bx	lr
 8018a2c:	0000      	movs	r0, r0
	...

08018a30 <memchr>:
 8018a30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018a34:	2a10      	cmp	r2, #16
 8018a36:	db2b      	blt.n	8018a90 <memchr+0x60>
 8018a38:	f010 0f07 	tst.w	r0, #7
 8018a3c:	d008      	beq.n	8018a50 <memchr+0x20>
 8018a3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a42:	3a01      	subs	r2, #1
 8018a44:	428b      	cmp	r3, r1
 8018a46:	d02d      	beq.n	8018aa4 <memchr+0x74>
 8018a48:	f010 0f07 	tst.w	r0, #7
 8018a4c:	b342      	cbz	r2, 8018aa0 <memchr+0x70>
 8018a4e:	d1f6      	bne.n	8018a3e <memchr+0xe>
 8018a50:	b4f0      	push	{r4, r5, r6, r7}
 8018a52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8018a56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8018a5a:	f022 0407 	bic.w	r4, r2, #7
 8018a5e:	f07f 0700 	mvns.w	r7, #0
 8018a62:	2300      	movs	r3, #0
 8018a64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8018a68:	3c08      	subs	r4, #8
 8018a6a:	ea85 0501 	eor.w	r5, r5, r1
 8018a6e:	ea86 0601 	eor.w	r6, r6, r1
 8018a72:	fa85 f547 	uadd8	r5, r5, r7
 8018a76:	faa3 f587 	sel	r5, r3, r7
 8018a7a:	fa86 f647 	uadd8	r6, r6, r7
 8018a7e:	faa5 f687 	sel	r6, r5, r7
 8018a82:	b98e      	cbnz	r6, 8018aa8 <memchr+0x78>
 8018a84:	d1ee      	bne.n	8018a64 <memchr+0x34>
 8018a86:	bcf0      	pop	{r4, r5, r6, r7}
 8018a88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018a8c:	f002 0207 	and.w	r2, r2, #7
 8018a90:	b132      	cbz	r2, 8018aa0 <memchr+0x70>
 8018a92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a96:	3a01      	subs	r2, #1
 8018a98:	ea83 0301 	eor.w	r3, r3, r1
 8018a9c:	b113      	cbz	r3, 8018aa4 <memchr+0x74>
 8018a9e:	d1f8      	bne.n	8018a92 <memchr+0x62>
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	4770      	bx	lr
 8018aa4:	3801      	subs	r0, #1
 8018aa6:	4770      	bx	lr
 8018aa8:	2d00      	cmp	r5, #0
 8018aaa:	bf06      	itte	eq
 8018aac:	4635      	moveq	r5, r6
 8018aae:	3803      	subeq	r0, #3
 8018ab0:	3807      	subne	r0, #7
 8018ab2:	f015 0f01 	tst.w	r5, #1
 8018ab6:	d107      	bne.n	8018ac8 <memchr+0x98>
 8018ab8:	3001      	adds	r0, #1
 8018aba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8018abe:	bf02      	ittt	eq
 8018ac0:	3001      	addeq	r0, #1
 8018ac2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018ac6:	3001      	addeq	r0, #1
 8018ac8:	bcf0      	pop	{r4, r5, r6, r7}
 8018aca:	3801      	subs	r0, #1
 8018acc:	4770      	bx	lr
 8018ace:	bf00      	nop

08018ad0 <__aeabi_drsub>:
 8018ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018ad4:	e002      	b.n	8018adc <__adddf3>
 8018ad6:	bf00      	nop

08018ad8 <__aeabi_dsub>:
 8018ad8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08018adc <__adddf3>:
 8018adc:	b530      	push	{r4, r5, lr}
 8018ade:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8018ae2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8018ae6:	ea94 0f05 	teq	r4, r5
 8018aea:	bf08      	it	eq
 8018aec:	ea90 0f02 	teqeq	r0, r2
 8018af0:	bf1f      	itttt	ne
 8018af2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8018af6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8018afa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8018afe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018b02:	f000 80e2 	beq.w	8018cca <__adddf3+0x1ee>
 8018b06:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8018b0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8018b0e:	bfb8      	it	lt
 8018b10:	426d      	neglt	r5, r5
 8018b12:	dd0c      	ble.n	8018b2e <__adddf3+0x52>
 8018b14:	442c      	add	r4, r5
 8018b16:	ea80 0202 	eor.w	r2, r0, r2
 8018b1a:	ea81 0303 	eor.w	r3, r1, r3
 8018b1e:	ea82 0000 	eor.w	r0, r2, r0
 8018b22:	ea83 0101 	eor.w	r1, r3, r1
 8018b26:	ea80 0202 	eor.w	r2, r0, r2
 8018b2a:	ea81 0303 	eor.w	r3, r1, r3
 8018b2e:	2d36      	cmp	r5, #54	; 0x36
 8018b30:	bf88      	it	hi
 8018b32:	bd30      	pophi	{r4, r5, pc}
 8018b34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018b38:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018b3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8018b40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8018b44:	d002      	beq.n	8018b4c <__adddf3+0x70>
 8018b46:	4240      	negs	r0, r0
 8018b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018b4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8018b50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018b54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8018b58:	d002      	beq.n	8018b60 <__adddf3+0x84>
 8018b5a:	4252      	negs	r2, r2
 8018b5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8018b60:	ea94 0f05 	teq	r4, r5
 8018b64:	f000 80a7 	beq.w	8018cb6 <__adddf3+0x1da>
 8018b68:	f1a4 0401 	sub.w	r4, r4, #1
 8018b6c:	f1d5 0e20 	rsbs	lr, r5, #32
 8018b70:	db0d      	blt.n	8018b8e <__adddf3+0xb2>
 8018b72:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018b76:	fa22 f205 	lsr.w	r2, r2, r5
 8018b7a:	1880      	adds	r0, r0, r2
 8018b7c:	f141 0100 	adc.w	r1, r1, #0
 8018b80:	fa03 f20e 	lsl.w	r2, r3, lr
 8018b84:	1880      	adds	r0, r0, r2
 8018b86:	fa43 f305 	asr.w	r3, r3, r5
 8018b8a:	4159      	adcs	r1, r3
 8018b8c:	e00e      	b.n	8018bac <__adddf3+0xd0>
 8018b8e:	f1a5 0520 	sub.w	r5, r5, #32
 8018b92:	f10e 0e20 	add.w	lr, lr, #32
 8018b96:	2a01      	cmp	r2, #1
 8018b98:	fa03 fc0e 	lsl.w	ip, r3, lr
 8018b9c:	bf28      	it	cs
 8018b9e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018ba2:	fa43 f305 	asr.w	r3, r3, r5
 8018ba6:	18c0      	adds	r0, r0, r3
 8018ba8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8018bac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018bb0:	d507      	bpl.n	8018bc2 <__adddf3+0xe6>
 8018bb2:	f04f 0e00 	mov.w	lr, #0
 8018bb6:	f1dc 0c00 	rsbs	ip, ip, #0
 8018bba:	eb7e 0000 	sbcs.w	r0, lr, r0
 8018bbe:	eb6e 0101 	sbc.w	r1, lr, r1
 8018bc2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018bc6:	d31b      	bcc.n	8018c00 <__adddf3+0x124>
 8018bc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8018bcc:	d30c      	bcc.n	8018be8 <__adddf3+0x10c>
 8018bce:	0849      	lsrs	r1, r1, #1
 8018bd0:	ea5f 0030 	movs.w	r0, r0, rrx
 8018bd4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018bd8:	f104 0401 	add.w	r4, r4, #1
 8018bdc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018be0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018be4:	f080 809a 	bcs.w	8018d1c <__adddf3+0x240>
 8018be8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8018bec:	bf08      	it	eq
 8018bee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018bf2:	f150 0000 	adcs.w	r0, r0, #0
 8018bf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018bfa:	ea41 0105 	orr.w	r1, r1, r5
 8018bfe:	bd30      	pop	{r4, r5, pc}
 8018c00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018c04:	4140      	adcs	r0, r0
 8018c06:	eb41 0101 	adc.w	r1, r1, r1
 8018c0a:	3c01      	subs	r4, #1
 8018c0c:	bf28      	it	cs
 8018c0e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8018c12:	d2e9      	bcs.n	8018be8 <__adddf3+0x10c>
 8018c14:	f091 0f00 	teq	r1, #0
 8018c18:	bf04      	itt	eq
 8018c1a:	4601      	moveq	r1, r0
 8018c1c:	2000      	moveq	r0, #0
 8018c1e:	fab1 f381 	clz	r3, r1
 8018c22:	bf08      	it	eq
 8018c24:	3320      	addeq	r3, #32
 8018c26:	f1a3 030b 	sub.w	r3, r3, #11
 8018c2a:	f1b3 0220 	subs.w	r2, r3, #32
 8018c2e:	da0c      	bge.n	8018c4a <__adddf3+0x16e>
 8018c30:	320c      	adds	r2, #12
 8018c32:	dd08      	ble.n	8018c46 <__adddf3+0x16a>
 8018c34:	f102 0c14 	add.w	ip, r2, #20
 8018c38:	f1c2 020c 	rsb	r2, r2, #12
 8018c3c:	fa01 f00c 	lsl.w	r0, r1, ip
 8018c40:	fa21 f102 	lsr.w	r1, r1, r2
 8018c44:	e00c      	b.n	8018c60 <__adddf3+0x184>
 8018c46:	f102 0214 	add.w	r2, r2, #20
 8018c4a:	bfd8      	it	le
 8018c4c:	f1c2 0c20 	rsble	ip, r2, #32
 8018c50:	fa01 f102 	lsl.w	r1, r1, r2
 8018c54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018c58:	bfdc      	itt	le
 8018c5a:	ea41 010c 	orrle.w	r1, r1, ip
 8018c5e:	4090      	lslle	r0, r2
 8018c60:	1ae4      	subs	r4, r4, r3
 8018c62:	bfa2      	ittt	ge
 8018c64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8018c68:	4329      	orrge	r1, r5
 8018c6a:	bd30      	popge	{r4, r5, pc}
 8018c6c:	ea6f 0404 	mvn.w	r4, r4
 8018c70:	3c1f      	subs	r4, #31
 8018c72:	da1c      	bge.n	8018cae <__adddf3+0x1d2>
 8018c74:	340c      	adds	r4, #12
 8018c76:	dc0e      	bgt.n	8018c96 <__adddf3+0x1ba>
 8018c78:	f104 0414 	add.w	r4, r4, #20
 8018c7c:	f1c4 0220 	rsb	r2, r4, #32
 8018c80:	fa20 f004 	lsr.w	r0, r0, r4
 8018c84:	fa01 f302 	lsl.w	r3, r1, r2
 8018c88:	ea40 0003 	orr.w	r0, r0, r3
 8018c8c:	fa21 f304 	lsr.w	r3, r1, r4
 8018c90:	ea45 0103 	orr.w	r1, r5, r3
 8018c94:	bd30      	pop	{r4, r5, pc}
 8018c96:	f1c4 040c 	rsb	r4, r4, #12
 8018c9a:	f1c4 0220 	rsb	r2, r4, #32
 8018c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8018ca2:	fa01 f304 	lsl.w	r3, r1, r4
 8018ca6:	ea40 0003 	orr.w	r0, r0, r3
 8018caa:	4629      	mov	r1, r5
 8018cac:	bd30      	pop	{r4, r5, pc}
 8018cae:	fa21 f004 	lsr.w	r0, r1, r4
 8018cb2:	4629      	mov	r1, r5
 8018cb4:	bd30      	pop	{r4, r5, pc}
 8018cb6:	f094 0f00 	teq	r4, #0
 8018cba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8018cbe:	bf06      	itte	eq
 8018cc0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018cc4:	3401      	addeq	r4, #1
 8018cc6:	3d01      	subne	r5, #1
 8018cc8:	e74e      	b.n	8018b68 <__adddf3+0x8c>
 8018cca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018cce:	bf18      	it	ne
 8018cd0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018cd4:	d029      	beq.n	8018d2a <__adddf3+0x24e>
 8018cd6:	ea94 0f05 	teq	r4, r5
 8018cda:	bf08      	it	eq
 8018cdc:	ea90 0f02 	teqeq	r0, r2
 8018ce0:	d005      	beq.n	8018cee <__adddf3+0x212>
 8018ce2:	ea54 0c00 	orrs.w	ip, r4, r0
 8018ce6:	bf04      	itt	eq
 8018ce8:	4619      	moveq	r1, r3
 8018cea:	4610      	moveq	r0, r2
 8018cec:	bd30      	pop	{r4, r5, pc}
 8018cee:	ea91 0f03 	teq	r1, r3
 8018cf2:	bf1e      	ittt	ne
 8018cf4:	2100      	movne	r1, #0
 8018cf6:	2000      	movne	r0, #0
 8018cf8:	bd30      	popne	{r4, r5, pc}
 8018cfa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8018cfe:	d105      	bne.n	8018d0c <__adddf3+0x230>
 8018d00:	0040      	lsls	r0, r0, #1
 8018d02:	4149      	adcs	r1, r1
 8018d04:	bf28      	it	cs
 8018d06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8018d0a:	bd30      	pop	{r4, r5, pc}
 8018d0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8018d10:	bf3c      	itt	cc
 8018d12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8018d16:	bd30      	popcc	{r4, r5, pc}
 8018d18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018d1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8018d20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018d24:	f04f 0000 	mov.w	r0, #0
 8018d28:	bd30      	pop	{r4, r5, pc}
 8018d2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018d2e:	bf1a      	itte	ne
 8018d30:	4619      	movne	r1, r3
 8018d32:	4610      	movne	r0, r2
 8018d34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8018d38:	bf1c      	itt	ne
 8018d3a:	460b      	movne	r3, r1
 8018d3c:	4602      	movne	r2, r0
 8018d3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018d42:	bf06      	itte	eq
 8018d44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8018d48:	ea91 0f03 	teqeq	r1, r3
 8018d4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8018d50:	bd30      	pop	{r4, r5, pc}
 8018d52:	bf00      	nop

08018d54 <__aeabi_ui2d>:
 8018d54:	f090 0f00 	teq	r0, #0
 8018d58:	bf04      	itt	eq
 8018d5a:	2100      	moveq	r1, #0
 8018d5c:	4770      	bxeq	lr
 8018d5e:	b530      	push	{r4, r5, lr}
 8018d60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d68:	f04f 0500 	mov.w	r5, #0
 8018d6c:	f04f 0100 	mov.w	r1, #0
 8018d70:	e750      	b.n	8018c14 <__adddf3+0x138>
 8018d72:	bf00      	nop

08018d74 <__aeabi_i2d>:
 8018d74:	f090 0f00 	teq	r0, #0
 8018d78:	bf04      	itt	eq
 8018d7a:	2100      	moveq	r1, #0
 8018d7c:	4770      	bxeq	lr
 8018d7e:	b530      	push	{r4, r5, lr}
 8018d80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018d84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018d88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8018d8c:	bf48      	it	mi
 8018d8e:	4240      	negmi	r0, r0
 8018d90:	f04f 0100 	mov.w	r1, #0
 8018d94:	e73e      	b.n	8018c14 <__adddf3+0x138>
 8018d96:	bf00      	nop

08018d98 <__aeabi_f2d>:
 8018d98:	0042      	lsls	r2, r0, #1
 8018d9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8018d9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8018da2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018da6:	bf1f      	itttt	ne
 8018da8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8018dac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018db0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018db4:	4770      	bxne	lr
 8018db6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8018dba:	bf08      	it	eq
 8018dbc:	4770      	bxeq	lr
 8018dbe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018dc2:	bf04      	itt	eq
 8018dc4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018dc8:	4770      	bxeq	lr
 8018dca:	b530      	push	{r4, r5, lr}
 8018dcc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8018dd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018dd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018dd8:	e71c      	b.n	8018c14 <__adddf3+0x138>
 8018dda:	bf00      	nop

08018ddc <__aeabi_ul2d>:
 8018ddc:	ea50 0201 	orrs.w	r2, r0, r1
 8018de0:	bf08      	it	eq
 8018de2:	4770      	bxeq	lr
 8018de4:	b530      	push	{r4, r5, lr}
 8018de6:	f04f 0500 	mov.w	r5, #0
 8018dea:	e00a      	b.n	8018e02 <__aeabi_l2d+0x16>

08018dec <__aeabi_l2d>:
 8018dec:	ea50 0201 	orrs.w	r2, r0, r1
 8018df0:	bf08      	it	eq
 8018df2:	4770      	bxeq	lr
 8018df4:	b530      	push	{r4, r5, lr}
 8018df6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8018dfa:	d502      	bpl.n	8018e02 <__aeabi_l2d+0x16>
 8018dfc:	4240      	negs	r0, r0
 8018dfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018e02:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018e06:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018e0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8018e0e:	f43f aed8 	beq.w	8018bc2 <__adddf3+0xe6>
 8018e12:	f04f 0203 	mov.w	r2, #3
 8018e16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018e1a:	bf18      	it	ne
 8018e1c:	3203      	addne	r2, #3
 8018e1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018e22:	bf18      	it	ne
 8018e24:	3203      	addne	r2, #3
 8018e26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8018e2a:	f1c2 0320 	rsb	r3, r2, #32
 8018e2e:	fa00 fc03 	lsl.w	ip, r0, r3
 8018e32:	fa20 f002 	lsr.w	r0, r0, r2
 8018e36:	fa01 fe03 	lsl.w	lr, r1, r3
 8018e3a:	ea40 000e 	orr.w	r0, r0, lr
 8018e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8018e42:	4414      	add	r4, r2
 8018e44:	e6bd      	b.n	8018bc2 <__adddf3+0xe6>
 8018e46:	bf00      	nop

08018e48 <__aeabi_dmul>:
 8018e48:	b570      	push	{r4, r5, r6, lr}
 8018e4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018e4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018e52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018e56:	bf1d      	ittte	ne
 8018e58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018e5c:	ea94 0f0c 	teqne	r4, ip
 8018e60:	ea95 0f0c 	teqne	r5, ip
 8018e64:	f000 f8de 	bleq	8019024 <__aeabi_dmul+0x1dc>
 8018e68:	442c      	add	r4, r5
 8018e6a:	ea81 0603 	eor.w	r6, r1, r3
 8018e6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8018e72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8018e76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8018e7a:	bf18      	it	ne
 8018e7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018e80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e88:	d038      	beq.n	8018efc <__aeabi_dmul+0xb4>
 8018e8a:	fba0 ce02 	umull	ip, lr, r0, r2
 8018e8e:	f04f 0500 	mov.w	r5, #0
 8018e92:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018e96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8018e9a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8018e9e:	f04f 0600 	mov.w	r6, #0
 8018ea2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018ea6:	f09c 0f00 	teq	ip, #0
 8018eaa:	bf18      	it	ne
 8018eac:	f04e 0e01 	orrne.w	lr, lr, #1
 8018eb0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018eb4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018eb8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8018ebc:	d204      	bcs.n	8018ec8 <__aeabi_dmul+0x80>
 8018ebe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018ec2:	416d      	adcs	r5, r5
 8018ec4:	eb46 0606 	adc.w	r6, r6, r6
 8018ec8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8018ecc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8018ed0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018ed4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018ed8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8018edc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018ee0:	bf88      	it	hi
 8018ee2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018ee6:	d81e      	bhi.n	8018f26 <__aeabi_dmul+0xde>
 8018ee8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8018eec:	bf08      	it	eq
 8018eee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8018ef2:	f150 0000 	adcs.w	r0, r0, #0
 8018ef6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018efa:	bd70      	pop	{r4, r5, r6, pc}
 8018efc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8018f00:	ea46 0101 	orr.w	r1, r6, r1
 8018f04:	ea40 0002 	orr.w	r0, r0, r2
 8018f08:	ea81 0103 	eor.w	r1, r1, r3
 8018f0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8018f10:	bfc2      	ittt	gt
 8018f12:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018f16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018f1a:	bd70      	popgt	{r4, r5, r6, pc}
 8018f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018f20:	f04f 0e00 	mov.w	lr, #0
 8018f24:	3c01      	subs	r4, #1
 8018f26:	f300 80ab 	bgt.w	8019080 <__aeabi_dmul+0x238>
 8018f2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8018f2e:	bfde      	ittt	le
 8018f30:	2000      	movle	r0, #0
 8018f32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8018f36:	bd70      	pople	{r4, r5, r6, pc}
 8018f38:	f1c4 0400 	rsb	r4, r4, #0
 8018f3c:	3c20      	subs	r4, #32
 8018f3e:	da35      	bge.n	8018fac <__aeabi_dmul+0x164>
 8018f40:	340c      	adds	r4, #12
 8018f42:	dc1b      	bgt.n	8018f7c <__aeabi_dmul+0x134>
 8018f44:	f104 0414 	add.w	r4, r4, #20
 8018f48:	f1c4 0520 	rsb	r5, r4, #32
 8018f4c:	fa00 f305 	lsl.w	r3, r0, r5
 8018f50:	fa20 f004 	lsr.w	r0, r0, r4
 8018f54:	fa01 f205 	lsl.w	r2, r1, r5
 8018f58:	ea40 0002 	orr.w	r0, r0, r2
 8018f5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8018f60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018f64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018f68:	fa21 f604 	lsr.w	r6, r1, r4
 8018f6c:	eb42 0106 	adc.w	r1, r2, r6
 8018f70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018f74:	bf08      	it	eq
 8018f76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018f7a:	bd70      	pop	{r4, r5, r6, pc}
 8018f7c:	f1c4 040c 	rsb	r4, r4, #12
 8018f80:	f1c4 0520 	rsb	r5, r4, #32
 8018f84:	fa00 f304 	lsl.w	r3, r0, r4
 8018f88:	fa20 f005 	lsr.w	r0, r0, r5
 8018f8c:	fa01 f204 	lsl.w	r2, r1, r4
 8018f90:	ea40 0002 	orr.w	r0, r0, r2
 8018f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018f98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018f9c:	f141 0100 	adc.w	r1, r1, #0
 8018fa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018fa4:	bf08      	it	eq
 8018fa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018faa:	bd70      	pop	{r4, r5, r6, pc}
 8018fac:	f1c4 0520 	rsb	r5, r4, #32
 8018fb0:	fa00 f205 	lsl.w	r2, r0, r5
 8018fb4:	ea4e 0e02 	orr.w	lr, lr, r2
 8018fb8:	fa20 f304 	lsr.w	r3, r0, r4
 8018fbc:	fa01 f205 	lsl.w	r2, r1, r5
 8018fc0:	ea43 0302 	orr.w	r3, r3, r2
 8018fc4:	fa21 f004 	lsr.w	r0, r1, r4
 8018fc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018fcc:	fa21 f204 	lsr.w	r2, r1, r4
 8018fd0:	ea20 0002 	bic.w	r0, r0, r2
 8018fd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018fd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018fdc:	bf08      	it	eq
 8018fde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018fe2:	bd70      	pop	{r4, r5, r6, pc}
 8018fe4:	f094 0f00 	teq	r4, #0
 8018fe8:	d10f      	bne.n	801900a <__aeabi_dmul+0x1c2>
 8018fea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8018fee:	0040      	lsls	r0, r0, #1
 8018ff0:	eb41 0101 	adc.w	r1, r1, r1
 8018ff4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018ff8:	bf08      	it	eq
 8018ffa:	3c01      	subeq	r4, #1
 8018ffc:	d0f7      	beq.n	8018fee <__aeabi_dmul+0x1a6>
 8018ffe:	ea41 0106 	orr.w	r1, r1, r6
 8019002:	f095 0f00 	teq	r5, #0
 8019006:	bf18      	it	ne
 8019008:	4770      	bxne	lr
 801900a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801900e:	0052      	lsls	r2, r2, #1
 8019010:	eb43 0303 	adc.w	r3, r3, r3
 8019014:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8019018:	bf08      	it	eq
 801901a:	3d01      	subeq	r5, #1
 801901c:	d0f7      	beq.n	801900e <__aeabi_dmul+0x1c6>
 801901e:	ea43 0306 	orr.w	r3, r3, r6
 8019022:	4770      	bx	lr
 8019024:	ea94 0f0c 	teq	r4, ip
 8019028:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801902c:	bf18      	it	ne
 801902e:	ea95 0f0c 	teqne	r5, ip
 8019032:	d00c      	beq.n	801904e <__aeabi_dmul+0x206>
 8019034:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019038:	bf18      	it	ne
 801903a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801903e:	d1d1      	bne.n	8018fe4 <__aeabi_dmul+0x19c>
 8019040:	ea81 0103 	eor.w	r1, r1, r3
 8019044:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019048:	f04f 0000 	mov.w	r0, #0
 801904c:	bd70      	pop	{r4, r5, r6, pc}
 801904e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019052:	bf06      	itte	eq
 8019054:	4610      	moveq	r0, r2
 8019056:	4619      	moveq	r1, r3
 8019058:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801905c:	d019      	beq.n	8019092 <__aeabi_dmul+0x24a>
 801905e:	ea94 0f0c 	teq	r4, ip
 8019062:	d102      	bne.n	801906a <__aeabi_dmul+0x222>
 8019064:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019068:	d113      	bne.n	8019092 <__aeabi_dmul+0x24a>
 801906a:	ea95 0f0c 	teq	r5, ip
 801906e:	d105      	bne.n	801907c <__aeabi_dmul+0x234>
 8019070:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019074:	bf1c      	itt	ne
 8019076:	4610      	movne	r0, r2
 8019078:	4619      	movne	r1, r3
 801907a:	d10a      	bne.n	8019092 <__aeabi_dmul+0x24a>
 801907c:	ea81 0103 	eor.w	r1, r1, r3
 8019080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019084:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019088:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801908c:	f04f 0000 	mov.w	r0, #0
 8019090:	bd70      	pop	{r4, r5, r6, pc}
 8019092:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019096:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801909a:	bd70      	pop	{r4, r5, r6, pc}

0801909c <__aeabi_ddiv>:
 801909c:	b570      	push	{r4, r5, r6, lr}
 801909e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80190a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80190a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80190aa:	bf1d      	ittte	ne
 80190ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80190b0:	ea94 0f0c 	teqne	r4, ip
 80190b4:	ea95 0f0c 	teqne	r5, ip
 80190b8:	f000 f8a7 	bleq	801920a <__aeabi_ddiv+0x16e>
 80190bc:	eba4 0405 	sub.w	r4, r4, r5
 80190c0:	ea81 0e03 	eor.w	lr, r1, r3
 80190c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80190c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80190cc:	f000 8088 	beq.w	80191e0 <__aeabi_ddiv+0x144>
 80190d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80190d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80190d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80190dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80190e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80190e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80190e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80190ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80190f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80190f4:	429d      	cmp	r5, r3
 80190f6:	bf08      	it	eq
 80190f8:	4296      	cmpeq	r6, r2
 80190fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80190fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8019102:	d202      	bcs.n	801910a <__aeabi_ddiv+0x6e>
 8019104:	085b      	lsrs	r3, r3, #1
 8019106:	ea4f 0232 	mov.w	r2, r2, rrx
 801910a:	1ab6      	subs	r6, r6, r2
 801910c:	eb65 0503 	sbc.w	r5, r5, r3
 8019110:	085b      	lsrs	r3, r3, #1
 8019112:	ea4f 0232 	mov.w	r2, r2, rrx
 8019116:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801911a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801911e:	ebb6 0e02 	subs.w	lr, r6, r2
 8019122:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019126:	bf22      	ittt	cs
 8019128:	1ab6      	subcs	r6, r6, r2
 801912a:	4675      	movcs	r5, lr
 801912c:	ea40 000c 	orrcs.w	r0, r0, ip
 8019130:	085b      	lsrs	r3, r3, #1
 8019132:	ea4f 0232 	mov.w	r2, r2, rrx
 8019136:	ebb6 0e02 	subs.w	lr, r6, r2
 801913a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801913e:	bf22      	ittt	cs
 8019140:	1ab6      	subcs	r6, r6, r2
 8019142:	4675      	movcs	r5, lr
 8019144:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8019148:	085b      	lsrs	r3, r3, #1
 801914a:	ea4f 0232 	mov.w	r2, r2, rrx
 801914e:	ebb6 0e02 	subs.w	lr, r6, r2
 8019152:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019156:	bf22      	ittt	cs
 8019158:	1ab6      	subcs	r6, r6, r2
 801915a:	4675      	movcs	r5, lr
 801915c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019160:	085b      	lsrs	r3, r3, #1
 8019162:	ea4f 0232 	mov.w	r2, r2, rrx
 8019166:	ebb6 0e02 	subs.w	lr, r6, r2
 801916a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801916e:	bf22      	ittt	cs
 8019170:	1ab6      	subcs	r6, r6, r2
 8019172:	4675      	movcs	r5, lr
 8019174:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019178:	ea55 0e06 	orrs.w	lr, r5, r6
 801917c:	d018      	beq.n	80191b0 <__aeabi_ddiv+0x114>
 801917e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019182:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019186:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801918a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801918e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019192:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019196:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801919a:	d1c0      	bne.n	801911e <__aeabi_ddiv+0x82>
 801919c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80191a0:	d10b      	bne.n	80191ba <__aeabi_ddiv+0x11e>
 80191a2:	ea41 0100 	orr.w	r1, r1, r0
 80191a6:	f04f 0000 	mov.w	r0, #0
 80191aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80191ae:	e7b6      	b.n	801911e <__aeabi_ddiv+0x82>
 80191b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80191b4:	bf04      	itt	eq
 80191b6:	4301      	orreq	r1, r0
 80191b8:	2000      	moveq	r0, #0
 80191ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80191be:	bf88      	it	hi
 80191c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80191c4:	f63f aeaf 	bhi.w	8018f26 <__aeabi_dmul+0xde>
 80191c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80191cc:	bf04      	itt	eq
 80191ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80191d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80191d6:	f150 0000 	adcs.w	r0, r0, #0
 80191da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80191de:	bd70      	pop	{r4, r5, r6, pc}
 80191e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80191e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80191e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80191ec:	bfc2      	ittt	gt
 80191ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80191f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80191f6:	bd70      	popgt	{r4, r5, r6, pc}
 80191f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80191fc:	f04f 0e00 	mov.w	lr, #0
 8019200:	3c01      	subs	r4, #1
 8019202:	e690      	b.n	8018f26 <__aeabi_dmul+0xde>
 8019204:	ea45 0e06 	orr.w	lr, r5, r6
 8019208:	e68d      	b.n	8018f26 <__aeabi_dmul+0xde>
 801920a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801920e:	ea94 0f0c 	teq	r4, ip
 8019212:	bf08      	it	eq
 8019214:	ea95 0f0c 	teqeq	r5, ip
 8019218:	f43f af3b 	beq.w	8019092 <__aeabi_dmul+0x24a>
 801921c:	ea94 0f0c 	teq	r4, ip
 8019220:	d10a      	bne.n	8019238 <__aeabi_ddiv+0x19c>
 8019222:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8019226:	f47f af34 	bne.w	8019092 <__aeabi_dmul+0x24a>
 801922a:	ea95 0f0c 	teq	r5, ip
 801922e:	f47f af25 	bne.w	801907c <__aeabi_dmul+0x234>
 8019232:	4610      	mov	r0, r2
 8019234:	4619      	mov	r1, r3
 8019236:	e72c      	b.n	8019092 <__aeabi_dmul+0x24a>
 8019238:	ea95 0f0c 	teq	r5, ip
 801923c:	d106      	bne.n	801924c <__aeabi_ddiv+0x1b0>
 801923e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019242:	f43f aefd 	beq.w	8019040 <__aeabi_dmul+0x1f8>
 8019246:	4610      	mov	r0, r2
 8019248:	4619      	mov	r1, r3
 801924a:	e722      	b.n	8019092 <__aeabi_dmul+0x24a>
 801924c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019250:	bf18      	it	ne
 8019252:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019256:	f47f aec5 	bne.w	8018fe4 <__aeabi_dmul+0x19c>
 801925a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801925e:	f47f af0d 	bne.w	801907c <__aeabi_dmul+0x234>
 8019262:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019266:	f47f aeeb 	bne.w	8019040 <__aeabi_dmul+0x1f8>
 801926a:	e712      	b.n	8019092 <__aeabi_dmul+0x24a>

0801926c <__gedf2>:
 801926c:	f04f 3cff 	mov.w	ip, #4294967295
 8019270:	e006      	b.n	8019280 <__cmpdf2+0x4>
 8019272:	bf00      	nop

08019274 <__ledf2>:
 8019274:	f04f 0c01 	mov.w	ip, #1
 8019278:	e002      	b.n	8019280 <__cmpdf2+0x4>
 801927a:	bf00      	nop

0801927c <__cmpdf2>:
 801927c:	f04f 0c01 	mov.w	ip, #1
 8019280:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019284:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019288:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801928c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019290:	bf18      	it	ne
 8019292:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019296:	d01b      	beq.n	80192d0 <__cmpdf2+0x54>
 8019298:	b001      	add	sp, #4
 801929a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801929e:	bf0c      	ite	eq
 80192a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80192a4:	ea91 0f03 	teqne	r1, r3
 80192a8:	bf02      	ittt	eq
 80192aa:	ea90 0f02 	teqeq	r0, r2
 80192ae:	2000      	moveq	r0, #0
 80192b0:	4770      	bxeq	lr
 80192b2:	f110 0f00 	cmn.w	r0, #0
 80192b6:	ea91 0f03 	teq	r1, r3
 80192ba:	bf58      	it	pl
 80192bc:	4299      	cmppl	r1, r3
 80192be:	bf08      	it	eq
 80192c0:	4290      	cmpeq	r0, r2
 80192c2:	bf2c      	ite	cs
 80192c4:	17d8      	asrcs	r0, r3, #31
 80192c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80192ca:	f040 0001 	orr.w	r0, r0, #1
 80192ce:	4770      	bx	lr
 80192d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80192d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80192d8:	d102      	bne.n	80192e0 <__cmpdf2+0x64>
 80192da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80192de:	d107      	bne.n	80192f0 <__cmpdf2+0x74>
 80192e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80192e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80192e8:	d1d6      	bne.n	8019298 <__cmpdf2+0x1c>
 80192ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80192ee:	d0d3      	beq.n	8019298 <__cmpdf2+0x1c>
 80192f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80192f4:	4770      	bx	lr
 80192f6:	bf00      	nop

080192f8 <__aeabi_cdrcmple>:
 80192f8:	4684      	mov	ip, r0
 80192fa:	4610      	mov	r0, r2
 80192fc:	4662      	mov	r2, ip
 80192fe:	468c      	mov	ip, r1
 8019300:	4619      	mov	r1, r3
 8019302:	4663      	mov	r3, ip
 8019304:	e000      	b.n	8019308 <__aeabi_cdcmpeq>
 8019306:	bf00      	nop

08019308 <__aeabi_cdcmpeq>:
 8019308:	b501      	push	{r0, lr}
 801930a:	f7ff ffb7 	bl	801927c <__cmpdf2>
 801930e:	2800      	cmp	r0, #0
 8019310:	bf48      	it	mi
 8019312:	f110 0f00 	cmnmi.w	r0, #0
 8019316:	bd01      	pop	{r0, pc}

08019318 <__aeabi_dcmpeq>:
 8019318:	f84d ed08 	str.w	lr, [sp, #-8]!
 801931c:	f7ff fff4 	bl	8019308 <__aeabi_cdcmpeq>
 8019320:	bf0c      	ite	eq
 8019322:	2001      	moveq	r0, #1
 8019324:	2000      	movne	r0, #0
 8019326:	f85d fb08 	ldr.w	pc, [sp], #8
 801932a:	bf00      	nop

0801932c <__aeabi_dcmplt>:
 801932c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019330:	f7ff ffea 	bl	8019308 <__aeabi_cdcmpeq>
 8019334:	bf34      	ite	cc
 8019336:	2001      	movcc	r0, #1
 8019338:	2000      	movcs	r0, #0
 801933a:	f85d fb08 	ldr.w	pc, [sp], #8
 801933e:	bf00      	nop

08019340 <__aeabi_dcmple>:
 8019340:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019344:	f7ff ffe0 	bl	8019308 <__aeabi_cdcmpeq>
 8019348:	bf94      	ite	ls
 801934a:	2001      	movls	r0, #1
 801934c:	2000      	movhi	r0, #0
 801934e:	f85d fb08 	ldr.w	pc, [sp], #8
 8019352:	bf00      	nop

08019354 <__aeabi_dcmpge>:
 8019354:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019358:	f7ff ffce 	bl	80192f8 <__aeabi_cdrcmple>
 801935c:	bf94      	ite	ls
 801935e:	2001      	movls	r0, #1
 8019360:	2000      	movhi	r0, #0
 8019362:	f85d fb08 	ldr.w	pc, [sp], #8
 8019366:	bf00      	nop

08019368 <__aeabi_dcmpgt>:
 8019368:	f84d ed08 	str.w	lr, [sp, #-8]!
 801936c:	f7ff ffc4 	bl	80192f8 <__aeabi_cdrcmple>
 8019370:	bf34      	ite	cc
 8019372:	2001      	movcc	r0, #1
 8019374:	2000      	movcs	r0, #0
 8019376:	f85d fb08 	ldr.w	pc, [sp], #8
 801937a:	bf00      	nop

0801937c <__aeabi_dcmpun>:
 801937c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019384:	d102      	bne.n	801938c <__aeabi_dcmpun+0x10>
 8019386:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801938a:	d10a      	bne.n	80193a2 <__aeabi_dcmpun+0x26>
 801938c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019394:	d102      	bne.n	801939c <__aeabi_dcmpun+0x20>
 8019396:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801939a:	d102      	bne.n	80193a2 <__aeabi_dcmpun+0x26>
 801939c:	f04f 0000 	mov.w	r0, #0
 80193a0:	4770      	bx	lr
 80193a2:	f04f 0001 	mov.w	r0, #1
 80193a6:	4770      	bx	lr

080193a8 <__aeabi_d2iz>:
 80193a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80193ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80193b0:	d215      	bcs.n	80193de <__aeabi_d2iz+0x36>
 80193b2:	d511      	bpl.n	80193d8 <__aeabi_d2iz+0x30>
 80193b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80193b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80193bc:	d912      	bls.n	80193e4 <__aeabi_d2iz+0x3c>
 80193be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80193c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80193c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80193ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80193ce:	fa23 f002 	lsr.w	r0, r3, r2
 80193d2:	bf18      	it	ne
 80193d4:	4240      	negne	r0, r0
 80193d6:	4770      	bx	lr
 80193d8:	f04f 0000 	mov.w	r0, #0
 80193dc:	4770      	bx	lr
 80193de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80193e2:	d105      	bne.n	80193f0 <__aeabi_d2iz+0x48>
 80193e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80193e8:	bf08      	it	eq
 80193ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80193ee:	4770      	bx	lr
 80193f0:	f04f 0000 	mov.w	r0, #0
 80193f4:	4770      	bx	lr
 80193f6:	bf00      	nop

080193f8 <__aeabi_d2uiz>:
 80193f8:	004a      	lsls	r2, r1, #1
 80193fa:	d211      	bcs.n	8019420 <__aeabi_d2uiz+0x28>
 80193fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019400:	d211      	bcs.n	8019426 <__aeabi_d2uiz+0x2e>
 8019402:	d50d      	bpl.n	8019420 <__aeabi_d2uiz+0x28>
 8019404:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019408:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801940c:	d40e      	bmi.n	801942c <__aeabi_d2uiz+0x34>
 801940e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019416:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801941a:	fa23 f002 	lsr.w	r0, r3, r2
 801941e:	4770      	bx	lr
 8019420:	f04f 0000 	mov.w	r0, #0
 8019424:	4770      	bx	lr
 8019426:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801942a:	d102      	bne.n	8019432 <__aeabi_d2uiz+0x3a>
 801942c:	f04f 30ff 	mov.w	r0, #4294967295
 8019430:	4770      	bx	lr
 8019432:	f04f 0000 	mov.w	r0, #0
 8019436:	4770      	bx	lr

08019438 <__aeabi_d2f>:
 8019438:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801943c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019440:	bf24      	itt	cs
 8019442:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019446:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801944a:	d90d      	bls.n	8019468 <__aeabi_d2f+0x30>
 801944c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019450:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019454:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019458:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801945c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019460:	bf08      	it	eq
 8019462:	f020 0001 	biceq.w	r0, r0, #1
 8019466:	4770      	bx	lr
 8019468:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801946c:	d121      	bne.n	80194b2 <__aeabi_d2f+0x7a>
 801946e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019472:	bfbc      	itt	lt
 8019474:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019478:	4770      	bxlt	lr
 801947a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801947e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019482:	f1c2 0218 	rsb	r2, r2, #24
 8019486:	f1c2 0c20 	rsb	ip, r2, #32
 801948a:	fa10 f30c 	lsls.w	r3, r0, ip
 801948e:	fa20 f002 	lsr.w	r0, r0, r2
 8019492:	bf18      	it	ne
 8019494:	f040 0001 	orrne.w	r0, r0, #1
 8019498:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801949c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80194a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80194a4:	ea40 000c 	orr.w	r0, r0, ip
 80194a8:	fa23 f302 	lsr.w	r3, r3, r2
 80194ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80194b0:	e7cc      	b.n	801944c <__aeabi_d2f+0x14>
 80194b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80194b6:	d107      	bne.n	80194c8 <__aeabi_d2f+0x90>
 80194b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80194bc:	bf1e      	ittt	ne
 80194be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80194c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80194c6:	4770      	bxne	lr
 80194c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80194cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80194d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80194d4:	4770      	bx	lr
 80194d6:	bf00      	nop

080194d8 <__aeabi_d2lz>:
 80194d8:	b538      	push	{r3, r4, r5, lr}
 80194da:	2200      	movs	r2, #0
 80194dc:	2300      	movs	r3, #0
 80194de:	4604      	mov	r4, r0
 80194e0:	460d      	mov	r5, r1
 80194e2:	f7ff ff23 	bl	801932c <__aeabi_dcmplt>
 80194e6:	b928      	cbnz	r0, 80194f4 <__aeabi_d2lz+0x1c>
 80194e8:	4620      	mov	r0, r4
 80194ea:	4629      	mov	r1, r5
 80194ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194f0:	f000 b80a 	b.w	8019508 <__aeabi_d2ulz>
 80194f4:	4620      	mov	r0, r4
 80194f6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80194fa:	f000 f805 	bl	8019508 <__aeabi_d2ulz>
 80194fe:	4240      	negs	r0, r0
 8019500:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019504:	bd38      	pop	{r3, r4, r5, pc}
 8019506:	bf00      	nop

08019508 <__aeabi_d2ulz>:
 8019508:	b5d0      	push	{r4, r6, r7, lr}
 801950a:	4b0c      	ldr	r3, [pc, #48]	; (801953c <__aeabi_d2ulz+0x34>)
 801950c:	2200      	movs	r2, #0
 801950e:	4606      	mov	r6, r0
 8019510:	460f      	mov	r7, r1
 8019512:	f7ff fc99 	bl	8018e48 <__aeabi_dmul>
 8019516:	f7ff ff6f 	bl	80193f8 <__aeabi_d2uiz>
 801951a:	4604      	mov	r4, r0
 801951c:	f7ff fc1a 	bl	8018d54 <__aeabi_ui2d>
 8019520:	4b07      	ldr	r3, [pc, #28]	; (8019540 <__aeabi_d2ulz+0x38>)
 8019522:	2200      	movs	r2, #0
 8019524:	f7ff fc90 	bl	8018e48 <__aeabi_dmul>
 8019528:	4602      	mov	r2, r0
 801952a:	460b      	mov	r3, r1
 801952c:	4630      	mov	r0, r6
 801952e:	4639      	mov	r1, r7
 8019530:	f7ff fad2 	bl	8018ad8 <__aeabi_dsub>
 8019534:	f7ff ff60 	bl	80193f8 <__aeabi_d2uiz>
 8019538:	4621      	mov	r1, r4
 801953a:	bdd0      	pop	{r4, r6, r7, pc}
 801953c:	3df00000 	.word	0x3df00000
 8019540:	41f00000 	.word	0x41f00000

08019544 <__aeabi_uldivmod>:
 8019544:	b953      	cbnz	r3, 801955c <__aeabi_uldivmod+0x18>
 8019546:	b94a      	cbnz	r2, 801955c <__aeabi_uldivmod+0x18>
 8019548:	2900      	cmp	r1, #0
 801954a:	bf08      	it	eq
 801954c:	2800      	cmpeq	r0, #0
 801954e:	bf1c      	itt	ne
 8019550:	f04f 31ff 	movne.w	r1, #4294967295
 8019554:	f04f 30ff 	movne.w	r0, #4294967295
 8019558:	f000 b974 	b.w	8019844 <__aeabi_idiv0>
 801955c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019564:	f000 f806 	bl	8019574 <__udivmoddi4>
 8019568:	f8dd e004 	ldr.w	lr, [sp, #4]
 801956c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019570:	b004      	add	sp, #16
 8019572:	4770      	bx	lr

08019574 <__udivmoddi4>:
 8019574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019578:	9d08      	ldr	r5, [sp, #32]
 801957a:	4604      	mov	r4, r0
 801957c:	468e      	mov	lr, r1
 801957e:	2b00      	cmp	r3, #0
 8019580:	d14d      	bne.n	801961e <__udivmoddi4+0xaa>
 8019582:	428a      	cmp	r2, r1
 8019584:	4694      	mov	ip, r2
 8019586:	d969      	bls.n	801965c <__udivmoddi4+0xe8>
 8019588:	fab2 f282 	clz	r2, r2
 801958c:	b152      	cbz	r2, 80195a4 <__udivmoddi4+0x30>
 801958e:	fa01 f302 	lsl.w	r3, r1, r2
 8019592:	f1c2 0120 	rsb	r1, r2, #32
 8019596:	fa20 f101 	lsr.w	r1, r0, r1
 801959a:	fa0c fc02 	lsl.w	ip, ip, r2
 801959e:	ea41 0e03 	orr.w	lr, r1, r3
 80195a2:	4094      	lsls	r4, r2
 80195a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80195a8:	0c21      	lsrs	r1, r4, #16
 80195aa:	fbbe f6f8 	udiv	r6, lr, r8
 80195ae:	fa1f f78c 	uxth.w	r7, ip
 80195b2:	fb08 e316 	mls	r3, r8, r6, lr
 80195b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80195ba:	fb06 f107 	mul.w	r1, r6, r7
 80195be:	4299      	cmp	r1, r3
 80195c0:	d90a      	bls.n	80195d8 <__udivmoddi4+0x64>
 80195c2:	eb1c 0303 	adds.w	r3, ip, r3
 80195c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80195ca:	f080 811f 	bcs.w	801980c <__udivmoddi4+0x298>
 80195ce:	4299      	cmp	r1, r3
 80195d0:	f240 811c 	bls.w	801980c <__udivmoddi4+0x298>
 80195d4:	3e02      	subs	r6, #2
 80195d6:	4463      	add	r3, ip
 80195d8:	1a5b      	subs	r3, r3, r1
 80195da:	b2a4      	uxth	r4, r4
 80195dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80195e0:	fb08 3310 	mls	r3, r8, r0, r3
 80195e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80195e8:	fb00 f707 	mul.w	r7, r0, r7
 80195ec:	42a7      	cmp	r7, r4
 80195ee:	d90a      	bls.n	8019606 <__udivmoddi4+0x92>
 80195f0:	eb1c 0404 	adds.w	r4, ip, r4
 80195f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80195f8:	f080 810a 	bcs.w	8019810 <__udivmoddi4+0x29c>
 80195fc:	42a7      	cmp	r7, r4
 80195fe:	f240 8107 	bls.w	8019810 <__udivmoddi4+0x29c>
 8019602:	4464      	add	r4, ip
 8019604:	3802      	subs	r0, #2
 8019606:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801960a:	1be4      	subs	r4, r4, r7
 801960c:	2600      	movs	r6, #0
 801960e:	b11d      	cbz	r5, 8019618 <__udivmoddi4+0xa4>
 8019610:	40d4      	lsrs	r4, r2
 8019612:	2300      	movs	r3, #0
 8019614:	e9c5 4300 	strd	r4, r3, [r5]
 8019618:	4631      	mov	r1, r6
 801961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801961e:	428b      	cmp	r3, r1
 8019620:	d909      	bls.n	8019636 <__udivmoddi4+0xc2>
 8019622:	2d00      	cmp	r5, #0
 8019624:	f000 80ef 	beq.w	8019806 <__udivmoddi4+0x292>
 8019628:	2600      	movs	r6, #0
 801962a:	e9c5 0100 	strd	r0, r1, [r5]
 801962e:	4630      	mov	r0, r6
 8019630:	4631      	mov	r1, r6
 8019632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019636:	fab3 f683 	clz	r6, r3
 801963a:	2e00      	cmp	r6, #0
 801963c:	d14a      	bne.n	80196d4 <__udivmoddi4+0x160>
 801963e:	428b      	cmp	r3, r1
 8019640:	d302      	bcc.n	8019648 <__udivmoddi4+0xd4>
 8019642:	4282      	cmp	r2, r0
 8019644:	f200 80f9 	bhi.w	801983a <__udivmoddi4+0x2c6>
 8019648:	1a84      	subs	r4, r0, r2
 801964a:	eb61 0303 	sbc.w	r3, r1, r3
 801964e:	2001      	movs	r0, #1
 8019650:	469e      	mov	lr, r3
 8019652:	2d00      	cmp	r5, #0
 8019654:	d0e0      	beq.n	8019618 <__udivmoddi4+0xa4>
 8019656:	e9c5 4e00 	strd	r4, lr, [r5]
 801965a:	e7dd      	b.n	8019618 <__udivmoddi4+0xa4>
 801965c:	b902      	cbnz	r2, 8019660 <__udivmoddi4+0xec>
 801965e:	deff      	udf	#255	; 0xff
 8019660:	fab2 f282 	clz	r2, r2
 8019664:	2a00      	cmp	r2, #0
 8019666:	f040 8092 	bne.w	801978e <__udivmoddi4+0x21a>
 801966a:	eba1 010c 	sub.w	r1, r1, ip
 801966e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019672:	fa1f fe8c 	uxth.w	lr, ip
 8019676:	2601      	movs	r6, #1
 8019678:	0c20      	lsrs	r0, r4, #16
 801967a:	fbb1 f3f7 	udiv	r3, r1, r7
 801967e:	fb07 1113 	mls	r1, r7, r3, r1
 8019682:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019686:	fb0e f003 	mul.w	r0, lr, r3
 801968a:	4288      	cmp	r0, r1
 801968c:	d908      	bls.n	80196a0 <__udivmoddi4+0x12c>
 801968e:	eb1c 0101 	adds.w	r1, ip, r1
 8019692:	f103 38ff 	add.w	r8, r3, #4294967295
 8019696:	d202      	bcs.n	801969e <__udivmoddi4+0x12a>
 8019698:	4288      	cmp	r0, r1
 801969a:	f200 80cb 	bhi.w	8019834 <__udivmoddi4+0x2c0>
 801969e:	4643      	mov	r3, r8
 80196a0:	1a09      	subs	r1, r1, r0
 80196a2:	b2a4      	uxth	r4, r4
 80196a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80196a8:	fb07 1110 	mls	r1, r7, r0, r1
 80196ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80196b0:	fb0e fe00 	mul.w	lr, lr, r0
 80196b4:	45a6      	cmp	lr, r4
 80196b6:	d908      	bls.n	80196ca <__udivmoddi4+0x156>
 80196b8:	eb1c 0404 	adds.w	r4, ip, r4
 80196bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80196c0:	d202      	bcs.n	80196c8 <__udivmoddi4+0x154>
 80196c2:	45a6      	cmp	lr, r4
 80196c4:	f200 80bb 	bhi.w	801983e <__udivmoddi4+0x2ca>
 80196c8:	4608      	mov	r0, r1
 80196ca:	eba4 040e 	sub.w	r4, r4, lr
 80196ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80196d2:	e79c      	b.n	801960e <__udivmoddi4+0x9a>
 80196d4:	f1c6 0720 	rsb	r7, r6, #32
 80196d8:	40b3      	lsls	r3, r6
 80196da:	fa22 fc07 	lsr.w	ip, r2, r7
 80196de:	ea4c 0c03 	orr.w	ip, ip, r3
 80196e2:	fa20 f407 	lsr.w	r4, r0, r7
 80196e6:	fa01 f306 	lsl.w	r3, r1, r6
 80196ea:	431c      	orrs	r4, r3
 80196ec:	40f9      	lsrs	r1, r7
 80196ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80196f2:	fa00 f306 	lsl.w	r3, r0, r6
 80196f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80196fa:	0c20      	lsrs	r0, r4, #16
 80196fc:	fa1f fe8c 	uxth.w	lr, ip
 8019700:	fb09 1118 	mls	r1, r9, r8, r1
 8019704:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019708:	fb08 f00e 	mul.w	r0, r8, lr
 801970c:	4288      	cmp	r0, r1
 801970e:	fa02 f206 	lsl.w	r2, r2, r6
 8019712:	d90b      	bls.n	801972c <__udivmoddi4+0x1b8>
 8019714:	eb1c 0101 	adds.w	r1, ip, r1
 8019718:	f108 3aff 	add.w	sl, r8, #4294967295
 801971c:	f080 8088 	bcs.w	8019830 <__udivmoddi4+0x2bc>
 8019720:	4288      	cmp	r0, r1
 8019722:	f240 8085 	bls.w	8019830 <__udivmoddi4+0x2bc>
 8019726:	f1a8 0802 	sub.w	r8, r8, #2
 801972a:	4461      	add	r1, ip
 801972c:	1a09      	subs	r1, r1, r0
 801972e:	b2a4      	uxth	r4, r4
 8019730:	fbb1 f0f9 	udiv	r0, r1, r9
 8019734:	fb09 1110 	mls	r1, r9, r0, r1
 8019738:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 801973c:	fb00 fe0e 	mul.w	lr, r0, lr
 8019740:	458e      	cmp	lr, r1
 8019742:	d908      	bls.n	8019756 <__udivmoddi4+0x1e2>
 8019744:	eb1c 0101 	adds.w	r1, ip, r1
 8019748:	f100 34ff 	add.w	r4, r0, #4294967295
 801974c:	d26c      	bcs.n	8019828 <__udivmoddi4+0x2b4>
 801974e:	458e      	cmp	lr, r1
 8019750:	d96a      	bls.n	8019828 <__udivmoddi4+0x2b4>
 8019752:	3802      	subs	r0, #2
 8019754:	4461      	add	r1, ip
 8019756:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801975a:	fba0 9402 	umull	r9, r4, r0, r2
 801975e:	eba1 010e 	sub.w	r1, r1, lr
 8019762:	42a1      	cmp	r1, r4
 8019764:	46c8      	mov	r8, r9
 8019766:	46a6      	mov	lr, r4
 8019768:	d356      	bcc.n	8019818 <__udivmoddi4+0x2a4>
 801976a:	d053      	beq.n	8019814 <__udivmoddi4+0x2a0>
 801976c:	b15d      	cbz	r5, 8019786 <__udivmoddi4+0x212>
 801976e:	ebb3 0208 	subs.w	r2, r3, r8
 8019772:	eb61 010e 	sbc.w	r1, r1, lr
 8019776:	fa01 f707 	lsl.w	r7, r1, r7
 801977a:	fa22 f306 	lsr.w	r3, r2, r6
 801977e:	40f1      	lsrs	r1, r6
 8019780:	431f      	orrs	r7, r3
 8019782:	e9c5 7100 	strd	r7, r1, [r5]
 8019786:	2600      	movs	r6, #0
 8019788:	4631      	mov	r1, r6
 801978a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801978e:	f1c2 0320 	rsb	r3, r2, #32
 8019792:	40d8      	lsrs	r0, r3
 8019794:	fa0c fc02 	lsl.w	ip, ip, r2
 8019798:	fa21 f303 	lsr.w	r3, r1, r3
 801979c:	4091      	lsls	r1, r2
 801979e:	4301      	orrs	r1, r0
 80197a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80197a4:	fa1f fe8c 	uxth.w	lr, ip
 80197a8:	fbb3 f0f7 	udiv	r0, r3, r7
 80197ac:	fb07 3610 	mls	r6, r7, r0, r3
 80197b0:	0c0b      	lsrs	r3, r1, #16
 80197b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80197b6:	fb00 f60e 	mul.w	r6, r0, lr
 80197ba:	429e      	cmp	r6, r3
 80197bc:	fa04 f402 	lsl.w	r4, r4, r2
 80197c0:	d908      	bls.n	80197d4 <__udivmoddi4+0x260>
 80197c2:	eb1c 0303 	adds.w	r3, ip, r3
 80197c6:	f100 38ff 	add.w	r8, r0, #4294967295
 80197ca:	d22f      	bcs.n	801982c <__udivmoddi4+0x2b8>
 80197cc:	429e      	cmp	r6, r3
 80197ce:	d92d      	bls.n	801982c <__udivmoddi4+0x2b8>
 80197d0:	3802      	subs	r0, #2
 80197d2:	4463      	add	r3, ip
 80197d4:	1b9b      	subs	r3, r3, r6
 80197d6:	b289      	uxth	r1, r1
 80197d8:	fbb3 f6f7 	udiv	r6, r3, r7
 80197dc:	fb07 3316 	mls	r3, r7, r6, r3
 80197e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80197e4:	fb06 f30e 	mul.w	r3, r6, lr
 80197e8:	428b      	cmp	r3, r1
 80197ea:	d908      	bls.n	80197fe <__udivmoddi4+0x28a>
 80197ec:	eb1c 0101 	adds.w	r1, ip, r1
 80197f0:	f106 38ff 	add.w	r8, r6, #4294967295
 80197f4:	d216      	bcs.n	8019824 <__udivmoddi4+0x2b0>
 80197f6:	428b      	cmp	r3, r1
 80197f8:	d914      	bls.n	8019824 <__udivmoddi4+0x2b0>
 80197fa:	3e02      	subs	r6, #2
 80197fc:	4461      	add	r1, ip
 80197fe:	1ac9      	subs	r1, r1, r3
 8019800:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8019804:	e738      	b.n	8019678 <__udivmoddi4+0x104>
 8019806:	462e      	mov	r6, r5
 8019808:	4628      	mov	r0, r5
 801980a:	e705      	b.n	8019618 <__udivmoddi4+0xa4>
 801980c:	4606      	mov	r6, r0
 801980e:	e6e3      	b.n	80195d8 <__udivmoddi4+0x64>
 8019810:	4618      	mov	r0, r3
 8019812:	e6f8      	b.n	8019606 <__udivmoddi4+0x92>
 8019814:	454b      	cmp	r3, r9
 8019816:	d2a9      	bcs.n	801976c <__udivmoddi4+0x1f8>
 8019818:	ebb9 0802 	subs.w	r8, r9, r2
 801981c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8019820:	3801      	subs	r0, #1
 8019822:	e7a3      	b.n	801976c <__udivmoddi4+0x1f8>
 8019824:	4646      	mov	r6, r8
 8019826:	e7ea      	b.n	80197fe <__udivmoddi4+0x28a>
 8019828:	4620      	mov	r0, r4
 801982a:	e794      	b.n	8019756 <__udivmoddi4+0x1e2>
 801982c:	4640      	mov	r0, r8
 801982e:	e7d1      	b.n	80197d4 <__udivmoddi4+0x260>
 8019830:	46d0      	mov	r8, sl
 8019832:	e77b      	b.n	801972c <__udivmoddi4+0x1b8>
 8019834:	3b02      	subs	r3, #2
 8019836:	4461      	add	r1, ip
 8019838:	e732      	b.n	80196a0 <__udivmoddi4+0x12c>
 801983a:	4630      	mov	r0, r6
 801983c:	e709      	b.n	8019652 <__udivmoddi4+0xde>
 801983e:	4464      	add	r4, ip
 8019840:	3802      	subs	r0, #2
 8019842:	e742      	b.n	80196ca <__udivmoddi4+0x156>

08019844 <__aeabi_idiv0>:
 8019844:	4770      	bx	lr
 8019846:	bf00      	nop

08019848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019880 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801984c:	480d      	ldr	r0, [pc, #52]	; (8019884 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801984e:	490e      	ldr	r1, [pc, #56]	; (8019888 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019850:	4a0e      	ldr	r2, [pc, #56]	; (801988c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019854:	e002      	b.n	801985c <LoopCopyDataInit>

08019856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801985a:	3304      	adds	r3, #4

0801985c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801985c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801985e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019860:	d3f9      	bcc.n	8019856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019862:	4a0b      	ldr	r2, [pc, #44]	; (8019890 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019864:	4c0b      	ldr	r4, [pc, #44]	; (8019894 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019868:	e001      	b.n	801986e <LoopFillZerobss>

0801986a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801986a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801986c:	3204      	adds	r2, #4

0801986e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801986e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019870:	d3fb      	bcc.n	801986a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019872:	f7ec fcfd 	bl	8006270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019876:	f000 f81b 	bl	80198b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801987a:	f7e8 f86d 	bl	8001958 <main>
  bx  lr    
 801987e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019888:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 801988c:	080526e8 	.word	0x080526e8
  ldr r2, =_sbss
 8019890:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019894:	20000dcc 	.word	0x20000dcc

08019898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019898:	e7fe      	b.n	8019898 <ADC_IRQHandler>

0801989a <atoi>:
 801989a:	220a      	movs	r2, #10
 801989c:	2100      	movs	r1, #0
 801989e:	f001 bd7f 	b.w	801b3a0 <strtol>
	...

080198a4 <__errno>:
 80198a4:	4b01      	ldr	r3, [pc, #4]	; (80198ac <__errno+0x8>)
 80198a6:	6818      	ldr	r0, [r3, #0]
 80198a8:	4770      	bx	lr
 80198aa:	bf00      	nop
 80198ac:	20000064 	.word	0x20000064

080198b0 <__libc_init_array>:
 80198b0:	b570      	push	{r4, r5, r6, lr}
 80198b2:	4d0d      	ldr	r5, [pc, #52]	; (80198e8 <__libc_init_array+0x38>)
 80198b4:	4c0d      	ldr	r4, [pc, #52]	; (80198ec <__libc_init_array+0x3c>)
 80198b6:	1b64      	subs	r4, r4, r5
 80198b8:	10a4      	asrs	r4, r4, #2
 80198ba:	2600      	movs	r6, #0
 80198bc:	42a6      	cmp	r6, r4
 80198be:	d109      	bne.n	80198d4 <__libc_init_array+0x24>
 80198c0:	4d0b      	ldr	r5, [pc, #44]	; (80198f0 <__libc_init_array+0x40>)
 80198c2:	4c0c      	ldr	r4, [pc, #48]	; (80198f4 <__libc_init_array+0x44>)
 80198c4:	f005 fc46 	bl	801f154 <_init>
 80198c8:	1b64      	subs	r4, r4, r5
 80198ca:	10a4      	asrs	r4, r4, #2
 80198cc:	2600      	movs	r6, #0
 80198ce:	42a6      	cmp	r6, r4
 80198d0:	d105      	bne.n	80198de <__libc_init_array+0x2e>
 80198d2:	bd70      	pop	{r4, r5, r6, pc}
 80198d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80198d8:	4798      	blx	r3
 80198da:	3601      	adds	r6, #1
 80198dc:	e7ee      	b.n	80198bc <__libc_init_array+0xc>
 80198de:	f855 3b04 	ldr.w	r3, [r5], #4
 80198e2:	4798      	blx	r3
 80198e4:	3601      	adds	r6, #1
 80198e6:	e7f2      	b.n	80198ce <__libc_init_array+0x1e>
 80198e8:	080526e0 	.word	0x080526e0
 80198ec:	080526e0 	.word	0x080526e0
 80198f0:	080526e0 	.word	0x080526e0
 80198f4:	080526e4 	.word	0x080526e4

080198f8 <memset>:
 80198f8:	4402      	add	r2, r0
 80198fa:	4603      	mov	r3, r0
 80198fc:	4293      	cmp	r3, r2
 80198fe:	d100      	bne.n	8019902 <memset+0xa>
 8019900:	4770      	bx	lr
 8019902:	f803 1b01 	strb.w	r1, [r3], #1
 8019906:	e7f9      	b.n	80198fc <memset+0x4>

08019908 <__cvt>:
 8019908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801990c:	ec55 4b10 	vmov	r4, r5, d0
 8019910:	2d00      	cmp	r5, #0
 8019912:	460e      	mov	r6, r1
 8019914:	4619      	mov	r1, r3
 8019916:	462b      	mov	r3, r5
 8019918:	bfbb      	ittet	lt
 801991a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801991e:	461d      	movlt	r5, r3
 8019920:	2300      	movge	r3, #0
 8019922:	232d      	movlt	r3, #45	; 0x2d
 8019924:	700b      	strb	r3, [r1, #0]
 8019926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019928:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801992c:	4691      	mov	r9, r2
 801992e:	f023 0820 	bic.w	r8, r3, #32
 8019932:	bfbc      	itt	lt
 8019934:	4622      	movlt	r2, r4
 8019936:	4614      	movlt	r4, r2
 8019938:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801993c:	d005      	beq.n	801994a <__cvt+0x42>
 801993e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019942:	d100      	bne.n	8019946 <__cvt+0x3e>
 8019944:	3601      	adds	r6, #1
 8019946:	2102      	movs	r1, #2
 8019948:	e000      	b.n	801994c <__cvt+0x44>
 801994a:	2103      	movs	r1, #3
 801994c:	ab03      	add	r3, sp, #12
 801994e:	9301      	str	r3, [sp, #4]
 8019950:	ab02      	add	r3, sp, #8
 8019952:	9300      	str	r3, [sp, #0]
 8019954:	ec45 4b10 	vmov	d0, r4, r5
 8019958:	4653      	mov	r3, sl
 801995a:	4632      	mov	r2, r6
 801995c:	f001 fdb8 	bl	801b4d0 <_dtoa_r>
 8019960:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019964:	4607      	mov	r7, r0
 8019966:	d102      	bne.n	801996e <__cvt+0x66>
 8019968:	f019 0f01 	tst.w	r9, #1
 801996c:	d022      	beq.n	80199b4 <__cvt+0xac>
 801996e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019972:	eb07 0906 	add.w	r9, r7, r6
 8019976:	d110      	bne.n	801999a <__cvt+0x92>
 8019978:	783b      	ldrb	r3, [r7, #0]
 801997a:	2b30      	cmp	r3, #48	; 0x30
 801997c:	d10a      	bne.n	8019994 <__cvt+0x8c>
 801997e:	2200      	movs	r2, #0
 8019980:	2300      	movs	r3, #0
 8019982:	4620      	mov	r0, r4
 8019984:	4629      	mov	r1, r5
 8019986:	f7ff fcc7 	bl	8019318 <__aeabi_dcmpeq>
 801998a:	b918      	cbnz	r0, 8019994 <__cvt+0x8c>
 801998c:	f1c6 0601 	rsb	r6, r6, #1
 8019990:	f8ca 6000 	str.w	r6, [sl]
 8019994:	f8da 3000 	ldr.w	r3, [sl]
 8019998:	4499      	add	r9, r3
 801999a:	2200      	movs	r2, #0
 801999c:	2300      	movs	r3, #0
 801999e:	4620      	mov	r0, r4
 80199a0:	4629      	mov	r1, r5
 80199a2:	f7ff fcb9 	bl	8019318 <__aeabi_dcmpeq>
 80199a6:	b108      	cbz	r0, 80199ac <__cvt+0xa4>
 80199a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80199ac:	2230      	movs	r2, #48	; 0x30
 80199ae:	9b03      	ldr	r3, [sp, #12]
 80199b0:	454b      	cmp	r3, r9
 80199b2:	d307      	bcc.n	80199c4 <__cvt+0xbc>
 80199b4:	9b03      	ldr	r3, [sp, #12]
 80199b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80199b8:	1bdb      	subs	r3, r3, r7
 80199ba:	4638      	mov	r0, r7
 80199bc:	6013      	str	r3, [r2, #0]
 80199be:	b004      	add	sp, #16
 80199c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199c4:	1c59      	adds	r1, r3, #1
 80199c6:	9103      	str	r1, [sp, #12]
 80199c8:	701a      	strb	r2, [r3, #0]
 80199ca:	e7f0      	b.n	80199ae <__cvt+0xa6>

080199cc <__exponent>:
 80199cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199ce:	4603      	mov	r3, r0
 80199d0:	2900      	cmp	r1, #0
 80199d2:	bfb8      	it	lt
 80199d4:	4249      	neglt	r1, r1
 80199d6:	f803 2b02 	strb.w	r2, [r3], #2
 80199da:	bfb4      	ite	lt
 80199dc:	222d      	movlt	r2, #45	; 0x2d
 80199de:	222b      	movge	r2, #43	; 0x2b
 80199e0:	2909      	cmp	r1, #9
 80199e2:	7042      	strb	r2, [r0, #1]
 80199e4:	dd2a      	ble.n	8019a3c <__exponent+0x70>
 80199e6:	f10d 0407 	add.w	r4, sp, #7
 80199ea:	46a4      	mov	ip, r4
 80199ec:	270a      	movs	r7, #10
 80199ee:	46a6      	mov	lr, r4
 80199f0:	460a      	mov	r2, r1
 80199f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80199f6:	fb07 1516 	mls	r5, r7, r6, r1
 80199fa:	3530      	adds	r5, #48	; 0x30
 80199fc:	2a63      	cmp	r2, #99	; 0x63
 80199fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8019a02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019a06:	4631      	mov	r1, r6
 8019a08:	dcf1      	bgt.n	80199ee <__exponent+0x22>
 8019a0a:	3130      	adds	r1, #48	; 0x30
 8019a0c:	f1ae 0502 	sub.w	r5, lr, #2
 8019a10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019a14:	1c44      	adds	r4, r0, #1
 8019a16:	4629      	mov	r1, r5
 8019a18:	4561      	cmp	r1, ip
 8019a1a:	d30a      	bcc.n	8019a32 <__exponent+0x66>
 8019a1c:	f10d 0209 	add.w	r2, sp, #9
 8019a20:	eba2 020e 	sub.w	r2, r2, lr
 8019a24:	4565      	cmp	r5, ip
 8019a26:	bf88      	it	hi
 8019a28:	2200      	movhi	r2, #0
 8019a2a:	4413      	add	r3, r2
 8019a2c:	1a18      	subs	r0, r3, r0
 8019a2e:	b003      	add	sp, #12
 8019a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019a3a:	e7ed      	b.n	8019a18 <__exponent+0x4c>
 8019a3c:	2330      	movs	r3, #48	; 0x30
 8019a3e:	3130      	adds	r1, #48	; 0x30
 8019a40:	7083      	strb	r3, [r0, #2]
 8019a42:	70c1      	strb	r1, [r0, #3]
 8019a44:	1d03      	adds	r3, r0, #4
 8019a46:	e7f1      	b.n	8019a2c <__exponent+0x60>

08019a48 <_printf_float>:
 8019a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a4c:	ed2d 8b02 	vpush	{d8}
 8019a50:	b08d      	sub	sp, #52	; 0x34
 8019a52:	460c      	mov	r4, r1
 8019a54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019a58:	4616      	mov	r6, r2
 8019a5a:	461f      	mov	r7, r3
 8019a5c:	4605      	mov	r5, r0
 8019a5e:	f002 fe95 	bl	801c78c <_localeconv_r>
 8019a62:	f8d0 a000 	ldr.w	sl, [r0]
 8019a66:	4650      	mov	r0, sl
 8019a68:	f7fe ffd8 	bl	8018a1c <strlen>
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8019a70:	6823      	ldr	r3, [r4, #0]
 8019a72:	9305      	str	r3, [sp, #20]
 8019a74:	f8d8 3000 	ldr.w	r3, [r8]
 8019a78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019a7c:	3307      	adds	r3, #7
 8019a7e:	f023 0307 	bic.w	r3, r3, #7
 8019a82:	f103 0208 	add.w	r2, r3, #8
 8019a86:	f8c8 2000 	str.w	r2, [r8]
 8019a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019a92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019a96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019a9a:	9307      	str	r3, [sp, #28]
 8019a9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019aa0:	ee08 0a10 	vmov	s16, r0
 8019aa4:	4b9f      	ldr	r3, [pc, #636]	; (8019d24 <_printf_float+0x2dc>)
 8019aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8019aae:	f7ff fc65 	bl	801937c <__aeabi_dcmpun>
 8019ab2:	bb88      	cbnz	r0, 8019b18 <_printf_float+0xd0>
 8019ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019ab8:	4b9a      	ldr	r3, [pc, #616]	; (8019d24 <_printf_float+0x2dc>)
 8019aba:	f04f 32ff 	mov.w	r2, #4294967295
 8019abe:	f7ff fc3f 	bl	8019340 <__aeabi_dcmple>
 8019ac2:	bb48      	cbnz	r0, 8019b18 <_printf_float+0xd0>
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	4640      	mov	r0, r8
 8019aca:	4649      	mov	r1, r9
 8019acc:	f7ff fc2e 	bl	801932c <__aeabi_dcmplt>
 8019ad0:	b110      	cbz	r0, 8019ad8 <_printf_float+0x90>
 8019ad2:	232d      	movs	r3, #45	; 0x2d
 8019ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ad8:	4b93      	ldr	r3, [pc, #588]	; (8019d28 <_printf_float+0x2e0>)
 8019ada:	4894      	ldr	r0, [pc, #592]	; (8019d2c <_printf_float+0x2e4>)
 8019adc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019ae0:	bf94      	ite	ls
 8019ae2:	4698      	movls	r8, r3
 8019ae4:	4680      	movhi	r8, r0
 8019ae6:	2303      	movs	r3, #3
 8019ae8:	6123      	str	r3, [r4, #16]
 8019aea:	9b05      	ldr	r3, [sp, #20]
 8019aec:	f023 0204 	bic.w	r2, r3, #4
 8019af0:	6022      	str	r2, [r4, #0]
 8019af2:	f04f 0900 	mov.w	r9, #0
 8019af6:	9700      	str	r7, [sp, #0]
 8019af8:	4633      	mov	r3, r6
 8019afa:	aa0b      	add	r2, sp, #44	; 0x2c
 8019afc:	4621      	mov	r1, r4
 8019afe:	4628      	mov	r0, r5
 8019b00:	f000 f9d8 	bl	8019eb4 <_printf_common>
 8019b04:	3001      	adds	r0, #1
 8019b06:	f040 8090 	bne.w	8019c2a <_printf_float+0x1e2>
 8019b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8019b0e:	b00d      	add	sp, #52	; 0x34
 8019b10:	ecbd 8b02 	vpop	{d8}
 8019b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b18:	4642      	mov	r2, r8
 8019b1a:	464b      	mov	r3, r9
 8019b1c:	4640      	mov	r0, r8
 8019b1e:	4649      	mov	r1, r9
 8019b20:	f7ff fc2c 	bl	801937c <__aeabi_dcmpun>
 8019b24:	b140      	cbz	r0, 8019b38 <_printf_float+0xf0>
 8019b26:	464b      	mov	r3, r9
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	bfbc      	itt	lt
 8019b2c:	232d      	movlt	r3, #45	; 0x2d
 8019b2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019b32:	487f      	ldr	r0, [pc, #508]	; (8019d30 <_printf_float+0x2e8>)
 8019b34:	4b7f      	ldr	r3, [pc, #508]	; (8019d34 <_printf_float+0x2ec>)
 8019b36:	e7d1      	b.n	8019adc <_printf_float+0x94>
 8019b38:	6863      	ldr	r3, [r4, #4]
 8019b3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019b3e:	9206      	str	r2, [sp, #24]
 8019b40:	1c5a      	adds	r2, r3, #1
 8019b42:	d13f      	bne.n	8019bc4 <_printf_float+0x17c>
 8019b44:	2306      	movs	r3, #6
 8019b46:	6063      	str	r3, [r4, #4]
 8019b48:	9b05      	ldr	r3, [sp, #20]
 8019b4a:	6861      	ldr	r1, [r4, #4]
 8019b4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019b50:	2300      	movs	r3, #0
 8019b52:	9303      	str	r3, [sp, #12]
 8019b54:	ab0a      	add	r3, sp, #40	; 0x28
 8019b56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019b5a:	ab09      	add	r3, sp, #36	; 0x24
 8019b5c:	ec49 8b10 	vmov	d0, r8, r9
 8019b60:	9300      	str	r3, [sp, #0]
 8019b62:	6022      	str	r2, [r4, #0]
 8019b64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019b68:	4628      	mov	r0, r5
 8019b6a:	f7ff fecd 	bl	8019908 <__cvt>
 8019b6e:	9b06      	ldr	r3, [sp, #24]
 8019b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b72:	2b47      	cmp	r3, #71	; 0x47
 8019b74:	4680      	mov	r8, r0
 8019b76:	d108      	bne.n	8019b8a <_printf_float+0x142>
 8019b78:	1cc8      	adds	r0, r1, #3
 8019b7a:	db02      	blt.n	8019b82 <_printf_float+0x13a>
 8019b7c:	6863      	ldr	r3, [r4, #4]
 8019b7e:	4299      	cmp	r1, r3
 8019b80:	dd41      	ble.n	8019c06 <_printf_float+0x1be>
 8019b82:	f1ab 0b02 	sub.w	fp, fp, #2
 8019b86:	fa5f fb8b 	uxtb.w	fp, fp
 8019b8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019b8e:	d820      	bhi.n	8019bd2 <_printf_float+0x18a>
 8019b90:	3901      	subs	r1, #1
 8019b92:	465a      	mov	r2, fp
 8019b94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019b98:	9109      	str	r1, [sp, #36]	; 0x24
 8019b9a:	f7ff ff17 	bl	80199cc <__exponent>
 8019b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ba0:	1813      	adds	r3, r2, r0
 8019ba2:	2a01      	cmp	r2, #1
 8019ba4:	4681      	mov	r9, r0
 8019ba6:	6123      	str	r3, [r4, #16]
 8019ba8:	dc02      	bgt.n	8019bb0 <_printf_float+0x168>
 8019baa:	6822      	ldr	r2, [r4, #0]
 8019bac:	07d2      	lsls	r2, r2, #31
 8019bae:	d501      	bpl.n	8019bb4 <_printf_float+0x16c>
 8019bb0:	3301      	adds	r3, #1
 8019bb2:	6123      	str	r3, [r4, #16]
 8019bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d09c      	beq.n	8019af6 <_printf_float+0xae>
 8019bbc:	232d      	movs	r3, #45	; 0x2d
 8019bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019bc2:	e798      	b.n	8019af6 <_printf_float+0xae>
 8019bc4:	9a06      	ldr	r2, [sp, #24]
 8019bc6:	2a47      	cmp	r2, #71	; 0x47
 8019bc8:	d1be      	bne.n	8019b48 <_printf_float+0x100>
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d1bc      	bne.n	8019b48 <_printf_float+0x100>
 8019bce:	2301      	movs	r3, #1
 8019bd0:	e7b9      	b.n	8019b46 <_printf_float+0xfe>
 8019bd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019bd6:	d118      	bne.n	8019c0a <_printf_float+0x1c2>
 8019bd8:	2900      	cmp	r1, #0
 8019bda:	6863      	ldr	r3, [r4, #4]
 8019bdc:	dd0b      	ble.n	8019bf6 <_printf_float+0x1ae>
 8019bde:	6121      	str	r1, [r4, #16]
 8019be0:	b913      	cbnz	r3, 8019be8 <_printf_float+0x1a0>
 8019be2:	6822      	ldr	r2, [r4, #0]
 8019be4:	07d0      	lsls	r0, r2, #31
 8019be6:	d502      	bpl.n	8019bee <_printf_float+0x1a6>
 8019be8:	3301      	adds	r3, #1
 8019bea:	440b      	add	r3, r1
 8019bec:	6123      	str	r3, [r4, #16]
 8019bee:	65a1      	str	r1, [r4, #88]	; 0x58
 8019bf0:	f04f 0900 	mov.w	r9, #0
 8019bf4:	e7de      	b.n	8019bb4 <_printf_float+0x16c>
 8019bf6:	b913      	cbnz	r3, 8019bfe <_printf_float+0x1b6>
 8019bf8:	6822      	ldr	r2, [r4, #0]
 8019bfa:	07d2      	lsls	r2, r2, #31
 8019bfc:	d501      	bpl.n	8019c02 <_printf_float+0x1ba>
 8019bfe:	3302      	adds	r3, #2
 8019c00:	e7f4      	b.n	8019bec <_printf_float+0x1a4>
 8019c02:	2301      	movs	r3, #1
 8019c04:	e7f2      	b.n	8019bec <_printf_float+0x1a4>
 8019c06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c0c:	4299      	cmp	r1, r3
 8019c0e:	db05      	blt.n	8019c1c <_printf_float+0x1d4>
 8019c10:	6823      	ldr	r3, [r4, #0]
 8019c12:	6121      	str	r1, [r4, #16]
 8019c14:	07d8      	lsls	r0, r3, #31
 8019c16:	d5ea      	bpl.n	8019bee <_printf_float+0x1a6>
 8019c18:	1c4b      	adds	r3, r1, #1
 8019c1a:	e7e7      	b.n	8019bec <_printf_float+0x1a4>
 8019c1c:	2900      	cmp	r1, #0
 8019c1e:	bfd4      	ite	le
 8019c20:	f1c1 0202 	rsble	r2, r1, #2
 8019c24:	2201      	movgt	r2, #1
 8019c26:	4413      	add	r3, r2
 8019c28:	e7e0      	b.n	8019bec <_printf_float+0x1a4>
 8019c2a:	6823      	ldr	r3, [r4, #0]
 8019c2c:	055a      	lsls	r2, r3, #21
 8019c2e:	d407      	bmi.n	8019c40 <_printf_float+0x1f8>
 8019c30:	6923      	ldr	r3, [r4, #16]
 8019c32:	4642      	mov	r2, r8
 8019c34:	4631      	mov	r1, r6
 8019c36:	4628      	mov	r0, r5
 8019c38:	47b8      	blx	r7
 8019c3a:	3001      	adds	r0, #1
 8019c3c:	d12c      	bne.n	8019c98 <_printf_float+0x250>
 8019c3e:	e764      	b.n	8019b0a <_printf_float+0xc2>
 8019c40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019c44:	f240 80e0 	bls.w	8019e08 <_printf_float+0x3c0>
 8019c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	2300      	movs	r3, #0
 8019c50:	f7ff fb62 	bl	8019318 <__aeabi_dcmpeq>
 8019c54:	2800      	cmp	r0, #0
 8019c56:	d034      	beq.n	8019cc2 <_printf_float+0x27a>
 8019c58:	4a37      	ldr	r2, [pc, #220]	; (8019d38 <_printf_float+0x2f0>)
 8019c5a:	2301      	movs	r3, #1
 8019c5c:	4631      	mov	r1, r6
 8019c5e:	4628      	mov	r0, r5
 8019c60:	47b8      	blx	r7
 8019c62:	3001      	adds	r0, #1
 8019c64:	f43f af51 	beq.w	8019b0a <_printf_float+0xc2>
 8019c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c6c:	429a      	cmp	r2, r3
 8019c6e:	db02      	blt.n	8019c76 <_printf_float+0x22e>
 8019c70:	6823      	ldr	r3, [r4, #0]
 8019c72:	07d8      	lsls	r0, r3, #31
 8019c74:	d510      	bpl.n	8019c98 <_printf_float+0x250>
 8019c76:	ee18 3a10 	vmov	r3, s16
 8019c7a:	4652      	mov	r2, sl
 8019c7c:	4631      	mov	r1, r6
 8019c7e:	4628      	mov	r0, r5
 8019c80:	47b8      	blx	r7
 8019c82:	3001      	adds	r0, #1
 8019c84:	f43f af41 	beq.w	8019b0a <_printf_float+0xc2>
 8019c88:	f04f 0800 	mov.w	r8, #0
 8019c8c:	f104 091a 	add.w	r9, r4, #26
 8019c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c92:	3b01      	subs	r3, #1
 8019c94:	4543      	cmp	r3, r8
 8019c96:	dc09      	bgt.n	8019cac <_printf_float+0x264>
 8019c98:	6823      	ldr	r3, [r4, #0]
 8019c9a:	079b      	lsls	r3, r3, #30
 8019c9c:	f100 8105 	bmi.w	8019eaa <_printf_float+0x462>
 8019ca0:	68e0      	ldr	r0, [r4, #12]
 8019ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019ca4:	4298      	cmp	r0, r3
 8019ca6:	bfb8      	it	lt
 8019ca8:	4618      	movlt	r0, r3
 8019caa:	e730      	b.n	8019b0e <_printf_float+0xc6>
 8019cac:	2301      	movs	r3, #1
 8019cae:	464a      	mov	r2, r9
 8019cb0:	4631      	mov	r1, r6
 8019cb2:	4628      	mov	r0, r5
 8019cb4:	47b8      	blx	r7
 8019cb6:	3001      	adds	r0, #1
 8019cb8:	f43f af27 	beq.w	8019b0a <_printf_float+0xc2>
 8019cbc:	f108 0801 	add.w	r8, r8, #1
 8019cc0:	e7e6      	b.n	8019c90 <_printf_float+0x248>
 8019cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	dc39      	bgt.n	8019d3c <_printf_float+0x2f4>
 8019cc8:	4a1b      	ldr	r2, [pc, #108]	; (8019d38 <_printf_float+0x2f0>)
 8019cca:	2301      	movs	r3, #1
 8019ccc:	4631      	mov	r1, r6
 8019cce:	4628      	mov	r0, r5
 8019cd0:	47b8      	blx	r7
 8019cd2:	3001      	adds	r0, #1
 8019cd4:	f43f af19 	beq.w	8019b0a <_printf_float+0xc2>
 8019cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019cdc:	4313      	orrs	r3, r2
 8019cde:	d102      	bne.n	8019ce6 <_printf_float+0x29e>
 8019ce0:	6823      	ldr	r3, [r4, #0]
 8019ce2:	07d9      	lsls	r1, r3, #31
 8019ce4:	d5d8      	bpl.n	8019c98 <_printf_float+0x250>
 8019ce6:	ee18 3a10 	vmov	r3, s16
 8019cea:	4652      	mov	r2, sl
 8019cec:	4631      	mov	r1, r6
 8019cee:	4628      	mov	r0, r5
 8019cf0:	47b8      	blx	r7
 8019cf2:	3001      	adds	r0, #1
 8019cf4:	f43f af09 	beq.w	8019b0a <_printf_float+0xc2>
 8019cf8:	f04f 0900 	mov.w	r9, #0
 8019cfc:	f104 0a1a 	add.w	sl, r4, #26
 8019d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d02:	425b      	negs	r3, r3
 8019d04:	454b      	cmp	r3, r9
 8019d06:	dc01      	bgt.n	8019d0c <_printf_float+0x2c4>
 8019d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d0a:	e792      	b.n	8019c32 <_printf_float+0x1ea>
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	4652      	mov	r2, sl
 8019d10:	4631      	mov	r1, r6
 8019d12:	4628      	mov	r0, r5
 8019d14:	47b8      	blx	r7
 8019d16:	3001      	adds	r0, #1
 8019d18:	f43f aef7 	beq.w	8019b0a <_printf_float+0xc2>
 8019d1c:	f109 0901 	add.w	r9, r9, #1
 8019d20:	e7ee      	b.n	8019d00 <_printf_float+0x2b8>
 8019d22:	bf00      	nop
 8019d24:	7fefffff 	.word	0x7fefffff
 8019d28:	08052204 	.word	0x08052204
 8019d2c:	08052208 	.word	0x08052208
 8019d30:	08052210 	.word	0x08052210
 8019d34:	0805220c 	.word	0x0805220c
 8019d38:	08052214 	.word	0x08052214
 8019d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d40:	429a      	cmp	r2, r3
 8019d42:	bfa8      	it	ge
 8019d44:	461a      	movge	r2, r3
 8019d46:	2a00      	cmp	r2, #0
 8019d48:	4691      	mov	r9, r2
 8019d4a:	dc37      	bgt.n	8019dbc <_printf_float+0x374>
 8019d4c:	f04f 0b00 	mov.w	fp, #0
 8019d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d54:	f104 021a 	add.w	r2, r4, #26
 8019d58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d5a:	9305      	str	r3, [sp, #20]
 8019d5c:	eba3 0309 	sub.w	r3, r3, r9
 8019d60:	455b      	cmp	r3, fp
 8019d62:	dc33      	bgt.n	8019dcc <_printf_float+0x384>
 8019d64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d68:	429a      	cmp	r2, r3
 8019d6a:	db3b      	blt.n	8019de4 <_printf_float+0x39c>
 8019d6c:	6823      	ldr	r3, [r4, #0]
 8019d6e:	07da      	lsls	r2, r3, #31
 8019d70:	d438      	bmi.n	8019de4 <_printf_float+0x39c>
 8019d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d74:	9a05      	ldr	r2, [sp, #20]
 8019d76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d78:	1a9a      	subs	r2, r3, r2
 8019d7a:	eba3 0901 	sub.w	r9, r3, r1
 8019d7e:	4591      	cmp	r9, r2
 8019d80:	bfa8      	it	ge
 8019d82:	4691      	movge	r9, r2
 8019d84:	f1b9 0f00 	cmp.w	r9, #0
 8019d88:	dc35      	bgt.n	8019df6 <_printf_float+0x3ae>
 8019d8a:	f04f 0800 	mov.w	r8, #0
 8019d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d92:	f104 0a1a 	add.w	sl, r4, #26
 8019d96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d9a:	1a9b      	subs	r3, r3, r2
 8019d9c:	eba3 0309 	sub.w	r3, r3, r9
 8019da0:	4543      	cmp	r3, r8
 8019da2:	f77f af79 	ble.w	8019c98 <_printf_float+0x250>
 8019da6:	2301      	movs	r3, #1
 8019da8:	4652      	mov	r2, sl
 8019daa:	4631      	mov	r1, r6
 8019dac:	4628      	mov	r0, r5
 8019dae:	47b8      	blx	r7
 8019db0:	3001      	adds	r0, #1
 8019db2:	f43f aeaa 	beq.w	8019b0a <_printf_float+0xc2>
 8019db6:	f108 0801 	add.w	r8, r8, #1
 8019dba:	e7ec      	b.n	8019d96 <_printf_float+0x34e>
 8019dbc:	4613      	mov	r3, r2
 8019dbe:	4631      	mov	r1, r6
 8019dc0:	4642      	mov	r2, r8
 8019dc2:	4628      	mov	r0, r5
 8019dc4:	47b8      	blx	r7
 8019dc6:	3001      	adds	r0, #1
 8019dc8:	d1c0      	bne.n	8019d4c <_printf_float+0x304>
 8019dca:	e69e      	b.n	8019b0a <_printf_float+0xc2>
 8019dcc:	2301      	movs	r3, #1
 8019dce:	4631      	mov	r1, r6
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	9205      	str	r2, [sp, #20]
 8019dd4:	47b8      	blx	r7
 8019dd6:	3001      	adds	r0, #1
 8019dd8:	f43f ae97 	beq.w	8019b0a <_printf_float+0xc2>
 8019ddc:	9a05      	ldr	r2, [sp, #20]
 8019dde:	f10b 0b01 	add.w	fp, fp, #1
 8019de2:	e7b9      	b.n	8019d58 <_printf_float+0x310>
 8019de4:	ee18 3a10 	vmov	r3, s16
 8019de8:	4652      	mov	r2, sl
 8019dea:	4631      	mov	r1, r6
 8019dec:	4628      	mov	r0, r5
 8019dee:	47b8      	blx	r7
 8019df0:	3001      	adds	r0, #1
 8019df2:	d1be      	bne.n	8019d72 <_printf_float+0x32a>
 8019df4:	e689      	b.n	8019b0a <_printf_float+0xc2>
 8019df6:	9a05      	ldr	r2, [sp, #20]
 8019df8:	464b      	mov	r3, r9
 8019dfa:	4442      	add	r2, r8
 8019dfc:	4631      	mov	r1, r6
 8019dfe:	4628      	mov	r0, r5
 8019e00:	47b8      	blx	r7
 8019e02:	3001      	adds	r0, #1
 8019e04:	d1c1      	bne.n	8019d8a <_printf_float+0x342>
 8019e06:	e680      	b.n	8019b0a <_printf_float+0xc2>
 8019e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e0a:	2a01      	cmp	r2, #1
 8019e0c:	dc01      	bgt.n	8019e12 <_printf_float+0x3ca>
 8019e0e:	07db      	lsls	r3, r3, #31
 8019e10:	d538      	bpl.n	8019e84 <_printf_float+0x43c>
 8019e12:	2301      	movs	r3, #1
 8019e14:	4642      	mov	r2, r8
 8019e16:	4631      	mov	r1, r6
 8019e18:	4628      	mov	r0, r5
 8019e1a:	47b8      	blx	r7
 8019e1c:	3001      	adds	r0, #1
 8019e1e:	f43f ae74 	beq.w	8019b0a <_printf_float+0xc2>
 8019e22:	ee18 3a10 	vmov	r3, s16
 8019e26:	4652      	mov	r2, sl
 8019e28:	4631      	mov	r1, r6
 8019e2a:	4628      	mov	r0, r5
 8019e2c:	47b8      	blx	r7
 8019e2e:	3001      	adds	r0, #1
 8019e30:	f43f ae6b 	beq.w	8019b0a <_printf_float+0xc2>
 8019e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019e38:	2200      	movs	r2, #0
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	f7ff fa6c 	bl	8019318 <__aeabi_dcmpeq>
 8019e40:	b9d8      	cbnz	r0, 8019e7a <_printf_float+0x432>
 8019e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e44:	f108 0201 	add.w	r2, r8, #1
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	4631      	mov	r1, r6
 8019e4c:	4628      	mov	r0, r5
 8019e4e:	47b8      	blx	r7
 8019e50:	3001      	adds	r0, #1
 8019e52:	d10e      	bne.n	8019e72 <_printf_float+0x42a>
 8019e54:	e659      	b.n	8019b0a <_printf_float+0xc2>
 8019e56:	2301      	movs	r3, #1
 8019e58:	4652      	mov	r2, sl
 8019e5a:	4631      	mov	r1, r6
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	47b8      	blx	r7
 8019e60:	3001      	adds	r0, #1
 8019e62:	f43f ae52 	beq.w	8019b0a <_printf_float+0xc2>
 8019e66:	f108 0801 	add.w	r8, r8, #1
 8019e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e6c:	3b01      	subs	r3, #1
 8019e6e:	4543      	cmp	r3, r8
 8019e70:	dcf1      	bgt.n	8019e56 <_printf_float+0x40e>
 8019e72:	464b      	mov	r3, r9
 8019e74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019e78:	e6dc      	b.n	8019c34 <_printf_float+0x1ec>
 8019e7a:	f04f 0800 	mov.w	r8, #0
 8019e7e:	f104 0a1a 	add.w	sl, r4, #26
 8019e82:	e7f2      	b.n	8019e6a <_printf_float+0x422>
 8019e84:	2301      	movs	r3, #1
 8019e86:	4642      	mov	r2, r8
 8019e88:	e7df      	b.n	8019e4a <_printf_float+0x402>
 8019e8a:	2301      	movs	r3, #1
 8019e8c:	464a      	mov	r2, r9
 8019e8e:	4631      	mov	r1, r6
 8019e90:	4628      	mov	r0, r5
 8019e92:	47b8      	blx	r7
 8019e94:	3001      	adds	r0, #1
 8019e96:	f43f ae38 	beq.w	8019b0a <_printf_float+0xc2>
 8019e9a:	f108 0801 	add.w	r8, r8, #1
 8019e9e:	68e3      	ldr	r3, [r4, #12]
 8019ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019ea2:	1a5b      	subs	r3, r3, r1
 8019ea4:	4543      	cmp	r3, r8
 8019ea6:	dcf0      	bgt.n	8019e8a <_printf_float+0x442>
 8019ea8:	e6fa      	b.n	8019ca0 <_printf_float+0x258>
 8019eaa:	f04f 0800 	mov.w	r8, #0
 8019eae:	f104 0919 	add.w	r9, r4, #25
 8019eb2:	e7f4      	b.n	8019e9e <_printf_float+0x456>

08019eb4 <_printf_common>:
 8019eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019eb8:	4616      	mov	r6, r2
 8019eba:	4699      	mov	r9, r3
 8019ebc:	688a      	ldr	r2, [r1, #8]
 8019ebe:	690b      	ldr	r3, [r1, #16]
 8019ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ec4:	4293      	cmp	r3, r2
 8019ec6:	bfb8      	it	lt
 8019ec8:	4613      	movlt	r3, r2
 8019eca:	6033      	str	r3, [r6, #0]
 8019ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019ed0:	4607      	mov	r7, r0
 8019ed2:	460c      	mov	r4, r1
 8019ed4:	b10a      	cbz	r2, 8019eda <_printf_common+0x26>
 8019ed6:	3301      	adds	r3, #1
 8019ed8:	6033      	str	r3, [r6, #0]
 8019eda:	6823      	ldr	r3, [r4, #0]
 8019edc:	0699      	lsls	r1, r3, #26
 8019ede:	bf42      	ittt	mi
 8019ee0:	6833      	ldrmi	r3, [r6, #0]
 8019ee2:	3302      	addmi	r3, #2
 8019ee4:	6033      	strmi	r3, [r6, #0]
 8019ee6:	6825      	ldr	r5, [r4, #0]
 8019ee8:	f015 0506 	ands.w	r5, r5, #6
 8019eec:	d106      	bne.n	8019efc <_printf_common+0x48>
 8019eee:	f104 0a19 	add.w	sl, r4, #25
 8019ef2:	68e3      	ldr	r3, [r4, #12]
 8019ef4:	6832      	ldr	r2, [r6, #0]
 8019ef6:	1a9b      	subs	r3, r3, r2
 8019ef8:	42ab      	cmp	r3, r5
 8019efa:	dc26      	bgt.n	8019f4a <_printf_common+0x96>
 8019efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f00:	1e13      	subs	r3, r2, #0
 8019f02:	6822      	ldr	r2, [r4, #0]
 8019f04:	bf18      	it	ne
 8019f06:	2301      	movne	r3, #1
 8019f08:	0692      	lsls	r2, r2, #26
 8019f0a:	d42b      	bmi.n	8019f64 <_printf_common+0xb0>
 8019f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f10:	4649      	mov	r1, r9
 8019f12:	4638      	mov	r0, r7
 8019f14:	47c0      	blx	r8
 8019f16:	3001      	adds	r0, #1
 8019f18:	d01e      	beq.n	8019f58 <_printf_common+0xa4>
 8019f1a:	6823      	ldr	r3, [r4, #0]
 8019f1c:	68e5      	ldr	r5, [r4, #12]
 8019f1e:	6832      	ldr	r2, [r6, #0]
 8019f20:	f003 0306 	and.w	r3, r3, #6
 8019f24:	2b04      	cmp	r3, #4
 8019f26:	bf08      	it	eq
 8019f28:	1aad      	subeq	r5, r5, r2
 8019f2a:	68a3      	ldr	r3, [r4, #8]
 8019f2c:	6922      	ldr	r2, [r4, #16]
 8019f2e:	bf0c      	ite	eq
 8019f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f34:	2500      	movne	r5, #0
 8019f36:	4293      	cmp	r3, r2
 8019f38:	bfc4      	itt	gt
 8019f3a:	1a9b      	subgt	r3, r3, r2
 8019f3c:	18ed      	addgt	r5, r5, r3
 8019f3e:	2600      	movs	r6, #0
 8019f40:	341a      	adds	r4, #26
 8019f42:	42b5      	cmp	r5, r6
 8019f44:	d11a      	bne.n	8019f7c <_printf_common+0xc8>
 8019f46:	2000      	movs	r0, #0
 8019f48:	e008      	b.n	8019f5c <_printf_common+0xa8>
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	4652      	mov	r2, sl
 8019f4e:	4649      	mov	r1, r9
 8019f50:	4638      	mov	r0, r7
 8019f52:	47c0      	blx	r8
 8019f54:	3001      	adds	r0, #1
 8019f56:	d103      	bne.n	8019f60 <_printf_common+0xac>
 8019f58:	f04f 30ff 	mov.w	r0, #4294967295
 8019f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f60:	3501      	adds	r5, #1
 8019f62:	e7c6      	b.n	8019ef2 <_printf_common+0x3e>
 8019f64:	18e1      	adds	r1, r4, r3
 8019f66:	1c5a      	adds	r2, r3, #1
 8019f68:	2030      	movs	r0, #48	; 0x30
 8019f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019f6e:	4422      	add	r2, r4
 8019f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019f78:	3302      	adds	r3, #2
 8019f7a:	e7c7      	b.n	8019f0c <_printf_common+0x58>
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	4622      	mov	r2, r4
 8019f80:	4649      	mov	r1, r9
 8019f82:	4638      	mov	r0, r7
 8019f84:	47c0      	blx	r8
 8019f86:	3001      	adds	r0, #1
 8019f88:	d0e6      	beq.n	8019f58 <_printf_common+0xa4>
 8019f8a:	3601      	adds	r6, #1
 8019f8c:	e7d9      	b.n	8019f42 <_printf_common+0x8e>
	...

08019f90 <_printf_i>:
 8019f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f94:	7e0f      	ldrb	r7, [r1, #24]
 8019f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019f98:	2f78      	cmp	r7, #120	; 0x78
 8019f9a:	4691      	mov	r9, r2
 8019f9c:	4680      	mov	r8, r0
 8019f9e:	460c      	mov	r4, r1
 8019fa0:	469a      	mov	sl, r3
 8019fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019fa6:	d807      	bhi.n	8019fb8 <_printf_i+0x28>
 8019fa8:	2f62      	cmp	r7, #98	; 0x62
 8019faa:	d80a      	bhi.n	8019fc2 <_printf_i+0x32>
 8019fac:	2f00      	cmp	r7, #0
 8019fae:	f000 80d8 	beq.w	801a162 <_printf_i+0x1d2>
 8019fb2:	2f58      	cmp	r7, #88	; 0x58
 8019fb4:	f000 80a3 	beq.w	801a0fe <_printf_i+0x16e>
 8019fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019fc0:	e03a      	b.n	801a038 <_printf_i+0xa8>
 8019fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019fc6:	2b15      	cmp	r3, #21
 8019fc8:	d8f6      	bhi.n	8019fb8 <_printf_i+0x28>
 8019fca:	a101      	add	r1, pc, #4	; (adr r1, 8019fd0 <_printf_i+0x40>)
 8019fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019fd0:	0801a029 	.word	0x0801a029
 8019fd4:	0801a03d 	.word	0x0801a03d
 8019fd8:	08019fb9 	.word	0x08019fb9
 8019fdc:	08019fb9 	.word	0x08019fb9
 8019fe0:	08019fb9 	.word	0x08019fb9
 8019fe4:	08019fb9 	.word	0x08019fb9
 8019fe8:	0801a03d 	.word	0x0801a03d
 8019fec:	08019fb9 	.word	0x08019fb9
 8019ff0:	08019fb9 	.word	0x08019fb9
 8019ff4:	08019fb9 	.word	0x08019fb9
 8019ff8:	08019fb9 	.word	0x08019fb9
 8019ffc:	0801a149 	.word	0x0801a149
 801a000:	0801a06d 	.word	0x0801a06d
 801a004:	0801a12b 	.word	0x0801a12b
 801a008:	08019fb9 	.word	0x08019fb9
 801a00c:	08019fb9 	.word	0x08019fb9
 801a010:	0801a16b 	.word	0x0801a16b
 801a014:	08019fb9 	.word	0x08019fb9
 801a018:	0801a06d 	.word	0x0801a06d
 801a01c:	08019fb9 	.word	0x08019fb9
 801a020:	08019fb9 	.word	0x08019fb9
 801a024:	0801a133 	.word	0x0801a133
 801a028:	682b      	ldr	r3, [r5, #0]
 801a02a:	1d1a      	adds	r2, r3, #4
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	602a      	str	r2, [r5, #0]
 801a030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a038:	2301      	movs	r3, #1
 801a03a:	e0a3      	b.n	801a184 <_printf_i+0x1f4>
 801a03c:	6820      	ldr	r0, [r4, #0]
 801a03e:	6829      	ldr	r1, [r5, #0]
 801a040:	0606      	lsls	r6, r0, #24
 801a042:	f101 0304 	add.w	r3, r1, #4
 801a046:	d50a      	bpl.n	801a05e <_printf_i+0xce>
 801a048:	680e      	ldr	r6, [r1, #0]
 801a04a:	602b      	str	r3, [r5, #0]
 801a04c:	2e00      	cmp	r6, #0
 801a04e:	da03      	bge.n	801a058 <_printf_i+0xc8>
 801a050:	232d      	movs	r3, #45	; 0x2d
 801a052:	4276      	negs	r6, r6
 801a054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a058:	485e      	ldr	r0, [pc, #376]	; (801a1d4 <_printf_i+0x244>)
 801a05a:	230a      	movs	r3, #10
 801a05c:	e019      	b.n	801a092 <_printf_i+0x102>
 801a05e:	680e      	ldr	r6, [r1, #0]
 801a060:	602b      	str	r3, [r5, #0]
 801a062:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a066:	bf18      	it	ne
 801a068:	b236      	sxthne	r6, r6
 801a06a:	e7ef      	b.n	801a04c <_printf_i+0xbc>
 801a06c:	682b      	ldr	r3, [r5, #0]
 801a06e:	6820      	ldr	r0, [r4, #0]
 801a070:	1d19      	adds	r1, r3, #4
 801a072:	6029      	str	r1, [r5, #0]
 801a074:	0601      	lsls	r1, r0, #24
 801a076:	d501      	bpl.n	801a07c <_printf_i+0xec>
 801a078:	681e      	ldr	r6, [r3, #0]
 801a07a:	e002      	b.n	801a082 <_printf_i+0xf2>
 801a07c:	0646      	lsls	r6, r0, #25
 801a07e:	d5fb      	bpl.n	801a078 <_printf_i+0xe8>
 801a080:	881e      	ldrh	r6, [r3, #0]
 801a082:	4854      	ldr	r0, [pc, #336]	; (801a1d4 <_printf_i+0x244>)
 801a084:	2f6f      	cmp	r7, #111	; 0x6f
 801a086:	bf0c      	ite	eq
 801a088:	2308      	moveq	r3, #8
 801a08a:	230a      	movne	r3, #10
 801a08c:	2100      	movs	r1, #0
 801a08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a092:	6865      	ldr	r5, [r4, #4]
 801a094:	60a5      	str	r5, [r4, #8]
 801a096:	2d00      	cmp	r5, #0
 801a098:	bfa2      	ittt	ge
 801a09a:	6821      	ldrge	r1, [r4, #0]
 801a09c:	f021 0104 	bicge.w	r1, r1, #4
 801a0a0:	6021      	strge	r1, [r4, #0]
 801a0a2:	b90e      	cbnz	r6, 801a0a8 <_printf_i+0x118>
 801a0a4:	2d00      	cmp	r5, #0
 801a0a6:	d04d      	beq.n	801a144 <_printf_i+0x1b4>
 801a0a8:	4615      	mov	r5, r2
 801a0aa:	fbb6 f1f3 	udiv	r1, r6, r3
 801a0ae:	fb03 6711 	mls	r7, r3, r1, r6
 801a0b2:	5dc7      	ldrb	r7, [r0, r7]
 801a0b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a0b8:	4637      	mov	r7, r6
 801a0ba:	42bb      	cmp	r3, r7
 801a0bc:	460e      	mov	r6, r1
 801a0be:	d9f4      	bls.n	801a0aa <_printf_i+0x11a>
 801a0c0:	2b08      	cmp	r3, #8
 801a0c2:	d10b      	bne.n	801a0dc <_printf_i+0x14c>
 801a0c4:	6823      	ldr	r3, [r4, #0]
 801a0c6:	07de      	lsls	r6, r3, #31
 801a0c8:	d508      	bpl.n	801a0dc <_printf_i+0x14c>
 801a0ca:	6923      	ldr	r3, [r4, #16]
 801a0cc:	6861      	ldr	r1, [r4, #4]
 801a0ce:	4299      	cmp	r1, r3
 801a0d0:	bfde      	ittt	le
 801a0d2:	2330      	movle	r3, #48	; 0x30
 801a0d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a0d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a0dc:	1b52      	subs	r2, r2, r5
 801a0de:	6122      	str	r2, [r4, #16]
 801a0e0:	f8cd a000 	str.w	sl, [sp]
 801a0e4:	464b      	mov	r3, r9
 801a0e6:	aa03      	add	r2, sp, #12
 801a0e8:	4621      	mov	r1, r4
 801a0ea:	4640      	mov	r0, r8
 801a0ec:	f7ff fee2 	bl	8019eb4 <_printf_common>
 801a0f0:	3001      	adds	r0, #1
 801a0f2:	d14c      	bne.n	801a18e <_printf_i+0x1fe>
 801a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0f8:	b004      	add	sp, #16
 801a0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0fe:	4835      	ldr	r0, [pc, #212]	; (801a1d4 <_printf_i+0x244>)
 801a100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a104:	6829      	ldr	r1, [r5, #0]
 801a106:	6823      	ldr	r3, [r4, #0]
 801a108:	f851 6b04 	ldr.w	r6, [r1], #4
 801a10c:	6029      	str	r1, [r5, #0]
 801a10e:	061d      	lsls	r5, r3, #24
 801a110:	d514      	bpl.n	801a13c <_printf_i+0x1ac>
 801a112:	07df      	lsls	r7, r3, #31
 801a114:	bf44      	itt	mi
 801a116:	f043 0320 	orrmi.w	r3, r3, #32
 801a11a:	6023      	strmi	r3, [r4, #0]
 801a11c:	b91e      	cbnz	r6, 801a126 <_printf_i+0x196>
 801a11e:	6823      	ldr	r3, [r4, #0]
 801a120:	f023 0320 	bic.w	r3, r3, #32
 801a124:	6023      	str	r3, [r4, #0]
 801a126:	2310      	movs	r3, #16
 801a128:	e7b0      	b.n	801a08c <_printf_i+0xfc>
 801a12a:	6823      	ldr	r3, [r4, #0]
 801a12c:	f043 0320 	orr.w	r3, r3, #32
 801a130:	6023      	str	r3, [r4, #0]
 801a132:	2378      	movs	r3, #120	; 0x78
 801a134:	4828      	ldr	r0, [pc, #160]	; (801a1d8 <_printf_i+0x248>)
 801a136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a13a:	e7e3      	b.n	801a104 <_printf_i+0x174>
 801a13c:	0659      	lsls	r1, r3, #25
 801a13e:	bf48      	it	mi
 801a140:	b2b6      	uxthmi	r6, r6
 801a142:	e7e6      	b.n	801a112 <_printf_i+0x182>
 801a144:	4615      	mov	r5, r2
 801a146:	e7bb      	b.n	801a0c0 <_printf_i+0x130>
 801a148:	682b      	ldr	r3, [r5, #0]
 801a14a:	6826      	ldr	r6, [r4, #0]
 801a14c:	6961      	ldr	r1, [r4, #20]
 801a14e:	1d18      	adds	r0, r3, #4
 801a150:	6028      	str	r0, [r5, #0]
 801a152:	0635      	lsls	r5, r6, #24
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	d501      	bpl.n	801a15c <_printf_i+0x1cc>
 801a158:	6019      	str	r1, [r3, #0]
 801a15a:	e002      	b.n	801a162 <_printf_i+0x1d2>
 801a15c:	0670      	lsls	r0, r6, #25
 801a15e:	d5fb      	bpl.n	801a158 <_printf_i+0x1c8>
 801a160:	8019      	strh	r1, [r3, #0]
 801a162:	2300      	movs	r3, #0
 801a164:	6123      	str	r3, [r4, #16]
 801a166:	4615      	mov	r5, r2
 801a168:	e7ba      	b.n	801a0e0 <_printf_i+0x150>
 801a16a:	682b      	ldr	r3, [r5, #0]
 801a16c:	1d1a      	adds	r2, r3, #4
 801a16e:	602a      	str	r2, [r5, #0]
 801a170:	681d      	ldr	r5, [r3, #0]
 801a172:	6862      	ldr	r2, [r4, #4]
 801a174:	2100      	movs	r1, #0
 801a176:	4628      	mov	r0, r5
 801a178:	f7fe fc5a 	bl	8018a30 <memchr>
 801a17c:	b108      	cbz	r0, 801a182 <_printf_i+0x1f2>
 801a17e:	1b40      	subs	r0, r0, r5
 801a180:	6060      	str	r0, [r4, #4]
 801a182:	6863      	ldr	r3, [r4, #4]
 801a184:	6123      	str	r3, [r4, #16]
 801a186:	2300      	movs	r3, #0
 801a188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a18c:	e7a8      	b.n	801a0e0 <_printf_i+0x150>
 801a18e:	6923      	ldr	r3, [r4, #16]
 801a190:	462a      	mov	r2, r5
 801a192:	4649      	mov	r1, r9
 801a194:	4640      	mov	r0, r8
 801a196:	47d0      	blx	sl
 801a198:	3001      	adds	r0, #1
 801a19a:	d0ab      	beq.n	801a0f4 <_printf_i+0x164>
 801a19c:	6823      	ldr	r3, [r4, #0]
 801a19e:	079b      	lsls	r3, r3, #30
 801a1a0:	d413      	bmi.n	801a1ca <_printf_i+0x23a>
 801a1a2:	68e0      	ldr	r0, [r4, #12]
 801a1a4:	9b03      	ldr	r3, [sp, #12]
 801a1a6:	4298      	cmp	r0, r3
 801a1a8:	bfb8      	it	lt
 801a1aa:	4618      	movlt	r0, r3
 801a1ac:	e7a4      	b.n	801a0f8 <_printf_i+0x168>
 801a1ae:	2301      	movs	r3, #1
 801a1b0:	4632      	mov	r2, r6
 801a1b2:	4649      	mov	r1, r9
 801a1b4:	4640      	mov	r0, r8
 801a1b6:	47d0      	blx	sl
 801a1b8:	3001      	adds	r0, #1
 801a1ba:	d09b      	beq.n	801a0f4 <_printf_i+0x164>
 801a1bc:	3501      	adds	r5, #1
 801a1be:	68e3      	ldr	r3, [r4, #12]
 801a1c0:	9903      	ldr	r1, [sp, #12]
 801a1c2:	1a5b      	subs	r3, r3, r1
 801a1c4:	42ab      	cmp	r3, r5
 801a1c6:	dcf2      	bgt.n	801a1ae <_printf_i+0x21e>
 801a1c8:	e7eb      	b.n	801a1a2 <_printf_i+0x212>
 801a1ca:	2500      	movs	r5, #0
 801a1cc:	f104 0619 	add.w	r6, r4, #25
 801a1d0:	e7f5      	b.n	801a1be <_printf_i+0x22e>
 801a1d2:	bf00      	nop
 801a1d4:	08052216 	.word	0x08052216
 801a1d8:	08052227 	.word	0x08052227

0801a1dc <_scanf_float>:
 801a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1e0:	b087      	sub	sp, #28
 801a1e2:	4617      	mov	r7, r2
 801a1e4:	9303      	str	r3, [sp, #12]
 801a1e6:	688b      	ldr	r3, [r1, #8]
 801a1e8:	1e5a      	subs	r2, r3, #1
 801a1ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a1ee:	bf83      	ittte	hi
 801a1f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a1f4:	195b      	addhi	r3, r3, r5
 801a1f6:	9302      	strhi	r3, [sp, #8]
 801a1f8:	2300      	movls	r3, #0
 801a1fa:	bf86      	itte	hi
 801a1fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a200:	608b      	strhi	r3, [r1, #8]
 801a202:	9302      	strls	r3, [sp, #8]
 801a204:	680b      	ldr	r3, [r1, #0]
 801a206:	468b      	mov	fp, r1
 801a208:	2500      	movs	r5, #0
 801a20a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a20e:	f84b 3b1c 	str.w	r3, [fp], #28
 801a212:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a216:	4680      	mov	r8, r0
 801a218:	460c      	mov	r4, r1
 801a21a:	465e      	mov	r6, fp
 801a21c:	46aa      	mov	sl, r5
 801a21e:	46a9      	mov	r9, r5
 801a220:	9501      	str	r5, [sp, #4]
 801a222:	68a2      	ldr	r2, [r4, #8]
 801a224:	b152      	cbz	r2, 801a23c <_scanf_float+0x60>
 801a226:	683b      	ldr	r3, [r7, #0]
 801a228:	781b      	ldrb	r3, [r3, #0]
 801a22a:	2b4e      	cmp	r3, #78	; 0x4e
 801a22c:	d864      	bhi.n	801a2f8 <_scanf_float+0x11c>
 801a22e:	2b40      	cmp	r3, #64	; 0x40
 801a230:	d83c      	bhi.n	801a2ac <_scanf_float+0xd0>
 801a232:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a236:	b2c8      	uxtb	r0, r1
 801a238:	280e      	cmp	r0, #14
 801a23a:	d93a      	bls.n	801a2b2 <_scanf_float+0xd6>
 801a23c:	f1b9 0f00 	cmp.w	r9, #0
 801a240:	d003      	beq.n	801a24a <_scanf_float+0x6e>
 801a242:	6823      	ldr	r3, [r4, #0]
 801a244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a248:	6023      	str	r3, [r4, #0]
 801a24a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a24e:	f1ba 0f01 	cmp.w	sl, #1
 801a252:	f200 8113 	bhi.w	801a47c <_scanf_float+0x2a0>
 801a256:	455e      	cmp	r6, fp
 801a258:	f200 8105 	bhi.w	801a466 <_scanf_float+0x28a>
 801a25c:	2501      	movs	r5, #1
 801a25e:	4628      	mov	r0, r5
 801a260:	b007      	add	sp, #28
 801a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a266:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a26a:	2a0d      	cmp	r2, #13
 801a26c:	d8e6      	bhi.n	801a23c <_scanf_float+0x60>
 801a26e:	a101      	add	r1, pc, #4	; (adr r1, 801a274 <_scanf_float+0x98>)
 801a270:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a274:	0801a3b3 	.word	0x0801a3b3
 801a278:	0801a23d 	.word	0x0801a23d
 801a27c:	0801a23d 	.word	0x0801a23d
 801a280:	0801a23d 	.word	0x0801a23d
 801a284:	0801a413 	.word	0x0801a413
 801a288:	0801a3eb 	.word	0x0801a3eb
 801a28c:	0801a23d 	.word	0x0801a23d
 801a290:	0801a23d 	.word	0x0801a23d
 801a294:	0801a3c1 	.word	0x0801a3c1
 801a298:	0801a23d 	.word	0x0801a23d
 801a29c:	0801a23d 	.word	0x0801a23d
 801a2a0:	0801a23d 	.word	0x0801a23d
 801a2a4:	0801a23d 	.word	0x0801a23d
 801a2a8:	0801a379 	.word	0x0801a379
 801a2ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a2b0:	e7db      	b.n	801a26a <_scanf_float+0x8e>
 801a2b2:	290e      	cmp	r1, #14
 801a2b4:	d8c2      	bhi.n	801a23c <_scanf_float+0x60>
 801a2b6:	a001      	add	r0, pc, #4	; (adr r0, 801a2bc <_scanf_float+0xe0>)
 801a2b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a2bc:	0801a36b 	.word	0x0801a36b
 801a2c0:	0801a23d 	.word	0x0801a23d
 801a2c4:	0801a36b 	.word	0x0801a36b
 801a2c8:	0801a3ff 	.word	0x0801a3ff
 801a2cc:	0801a23d 	.word	0x0801a23d
 801a2d0:	0801a319 	.word	0x0801a319
 801a2d4:	0801a355 	.word	0x0801a355
 801a2d8:	0801a355 	.word	0x0801a355
 801a2dc:	0801a355 	.word	0x0801a355
 801a2e0:	0801a355 	.word	0x0801a355
 801a2e4:	0801a355 	.word	0x0801a355
 801a2e8:	0801a355 	.word	0x0801a355
 801a2ec:	0801a355 	.word	0x0801a355
 801a2f0:	0801a355 	.word	0x0801a355
 801a2f4:	0801a355 	.word	0x0801a355
 801a2f8:	2b6e      	cmp	r3, #110	; 0x6e
 801a2fa:	d809      	bhi.n	801a310 <_scanf_float+0x134>
 801a2fc:	2b60      	cmp	r3, #96	; 0x60
 801a2fe:	d8b2      	bhi.n	801a266 <_scanf_float+0x8a>
 801a300:	2b54      	cmp	r3, #84	; 0x54
 801a302:	d077      	beq.n	801a3f4 <_scanf_float+0x218>
 801a304:	2b59      	cmp	r3, #89	; 0x59
 801a306:	d199      	bne.n	801a23c <_scanf_float+0x60>
 801a308:	2d07      	cmp	r5, #7
 801a30a:	d197      	bne.n	801a23c <_scanf_float+0x60>
 801a30c:	2508      	movs	r5, #8
 801a30e:	e029      	b.n	801a364 <_scanf_float+0x188>
 801a310:	2b74      	cmp	r3, #116	; 0x74
 801a312:	d06f      	beq.n	801a3f4 <_scanf_float+0x218>
 801a314:	2b79      	cmp	r3, #121	; 0x79
 801a316:	e7f6      	b.n	801a306 <_scanf_float+0x12a>
 801a318:	6821      	ldr	r1, [r4, #0]
 801a31a:	05c8      	lsls	r0, r1, #23
 801a31c:	d51a      	bpl.n	801a354 <_scanf_float+0x178>
 801a31e:	9b02      	ldr	r3, [sp, #8]
 801a320:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a324:	6021      	str	r1, [r4, #0]
 801a326:	f109 0901 	add.w	r9, r9, #1
 801a32a:	b11b      	cbz	r3, 801a334 <_scanf_float+0x158>
 801a32c:	3b01      	subs	r3, #1
 801a32e:	3201      	adds	r2, #1
 801a330:	9302      	str	r3, [sp, #8]
 801a332:	60a2      	str	r2, [r4, #8]
 801a334:	68a3      	ldr	r3, [r4, #8]
 801a336:	3b01      	subs	r3, #1
 801a338:	60a3      	str	r3, [r4, #8]
 801a33a:	6923      	ldr	r3, [r4, #16]
 801a33c:	3301      	adds	r3, #1
 801a33e:	6123      	str	r3, [r4, #16]
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	3b01      	subs	r3, #1
 801a344:	2b00      	cmp	r3, #0
 801a346:	607b      	str	r3, [r7, #4]
 801a348:	f340 8084 	ble.w	801a454 <_scanf_float+0x278>
 801a34c:	683b      	ldr	r3, [r7, #0]
 801a34e:	3301      	adds	r3, #1
 801a350:	603b      	str	r3, [r7, #0]
 801a352:	e766      	b.n	801a222 <_scanf_float+0x46>
 801a354:	eb1a 0f05 	cmn.w	sl, r5
 801a358:	f47f af70 	bne.w	801a23c <_scanf_float+0x60>
 801a35c:	6822      	ldr	r2, [r4, #0]
 801a35e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a362:	6022      	str	r2, [r4, #0]
 801a364:	f806 3b01 	strb.w	r3, [r6], #1
 801a368:	e7e4      	b.n	801a334 <_scanf_float+0x158>
 801a36a:	6822      	ldr	r2, [r4, #0]
 801a36c:	0610      	lsls	r0, r2, #24
 801a36e:	f57f af65 	bpl.w	801a23c <_scanf_float+0x60>
 801a372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a376:	e7f4      	b.n	801a362 <_scanf_float+0x186>
 801a378:	f1ba 0f00 	cmp.w	sl, #0
 801a37c:	d10e      	bne.n	801a39c <_scanf_float+0x1c0>
 801a37e:	f1b9 0f00 	cmp.w	r9, #0
 801a382:	d10e      	bne.n	801a3a2 <_scanf_float+0x1c6>
 801a384:	6822      	ldr	r2, [r4, #0]
 801a386:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a38a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a38e:	d108      	bne.n	801a3a2 <_scanf_float+0x1c6>
 801a390:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a394:	6022      	str	r2, [r4, #0]
 801a396:	f04f 0a01 	mov.w	sl, #1
 801a39a:	e7e3      	b.n	801a364 <_scanf_float+0x188>
 801a39c:	f1ba 0f02 	cmp.w	sl, #2
 801a3a0:	d055      	beq.n	801a44e <_scanf_float+0x272>
 801a3a2:	2d01      	cmp	r5, #1
 801a3a4:	d002      	beq.n	801a3ac <_scanf_float+0x1d0>
 801a3a6:	2d04      	cmp	r5, #4
 801a3a8:	f47f af48 	bne.w	801a23c <_scanf_float+0x60>
 801a3ac:	3501      	adds	r5, #1
 801a3ae:	b2ed      	uxtb	r5, r5
 801a3b0:	e7d8      	b.n	801a364 <_scanf_float+0x188>
 801a3b2:	f1ba 0f01 	cmp.w	sl, #1
 801a3b6:	f47f af41 	bne.w	801a23c <_scanf_float+0x60>
 801a3ba:	f04f 0a02 	mov.w	sl, #2
 801a3be:	e7d1      	b.n	801a364 <_scanf_float+0x188>
 801a3c0:	b97d      	cbnz	r5, 801a3e2 <_scanf_float+0x206>
 801a3c2:	f1b9 0f00 	cmp.w	r9, #0
 801a3c6:	f47f af3c 	bne.w	801a242 <_scanf_float+0x66>
 801a3ca:	6822      	ldr	r2, [r4, #0]
 801a3cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a3d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a3d4:	f47f af39 	bne.w	801a24a <_scanf_float+0x6e>
 801a3d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a3dc:	6022      	str	r2, [r4, #0]
 801a3de:	2501      	movs	r5, #1
 801a3e0:	e7c0      	b.n	801a364 <_scanf_float+0x188>
 801a3e2:	2d03      	cmp	r5, #3
 801a3e4:	d0e2      	beq.n	801a3ac <_scanf_float+0x1d0>
 801a3e6:	2d05      	cmp	r5, #5
 801a3e8:	e7de      	b.n	801a3a8 <_scanf_float+0x1cc>
 801a3ea:	2d02      	cmp	r5, #2
 801a3ec:	f47f af26 	bne.w	801a23c <_scanf_float+0x60>
 801a3f0:	2503      	movs	r5, #3
 801a3f2:	e7b7      	b.n	801a364 <_scanf_float+0x188>
 801a3f4:	2d06      	cmp	r5, #6
 801a3f6:	f47f af21 	bne.w	801a23c <_scanf_float+0x60>
 801a3fa:	2507      	movs	r5, #7
 801a3fc:	e7b2      	b.n	801a364 <_scanf_float+0x188>
 801a3fe:	6822      	ldr	r2, [r4, #0]
 801a400:	0591      	lsls	r1, r2, #22
 801a402:	f57f af1b 	bpl.w	801a23c <_scanf_float+0x60>
 801a406:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a40a:	6022      	str	r2, [r4, #0]
 801a40c:	f8cd 9004 	str.w	r9, [sp, #4]
 801a410:	e7a8      	b.n	801a364 <_scanf_float+0x188>
 801a412:	6822      	ldr	r2, [r4, #0]
 801a414:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a418:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a41c:	d006      	beq.n	801a42c <_scanf_float+0x250>
 801a41e:	0550      	lsls	r0, r2, #21
 801a420:	f57f af0c 	bpl.w	801a23c <_scanf_float+0x60>
 801a424:	f1b9 0f00 	cmp.w	r9, #0
 801a428:	f43f af0f 	beq.w	801a24a <_scanf_float+0x6e>
 801a42c:	0591      	lsls	r1, r2, #22
 801a42e:	bf58      	it	pl
 801a430:	9901      	ldrpl	r1, [sp, #4]
 801a432:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a436:	bf58      	it	pl
 801a438:	eba9 0101 	subpl.w	r1, r9, r1
 801a43c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a440:	bf58      	it	pl
 801a442:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a446:	6022      	str	r2, [r4, #0]
 801a448:	f04f 0900 	mov.w	r9, #0
 801a44c:	e78a      	b.n	801a364 <_scanf_float+0x188>
 801a44e:	f04f 0a03 	mov.w	sl, #3
 801a452:	e787      	b.n	801a364 <_scanf_float+0x188>
 801a454:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a458:	4639      	mov	r1, r7
 801a45a:	4640      	mov	r0, r8
 801a45c:	4798      	blx	r3
 801a45e:	2800      	cmp	r0, #0
 801a460:	f43f aedf 	beq.w	801a222 <_scanf_float+0x46>
 801a464:	e6ea      	b.n	801a23c <_scanf_float+0x60>
 801a466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a46e:	463a      	mov	r2, r7
 801a470:	4640      	mov	r0, r8
 801a472:	4798      	blx	r3
 801a474:	6923      	ldr	r3, [r4, #16]
 801a476:	3b01      	subs	r3, #1
 801a478:	6123      	str	r3, [r4, #16]
 801a47a:	e6ec      	b.n	801a256 <_scanf_float+0x7a>
 801a47c:	1e6b      	subs	r3, r5, #1
 801a47e:	2b06      	cmp	r3, #6
 801a480:	d825      	bhi.n	801a4ce <_scanf_float+0x2f2>
 801a482:	2d02      	cmp	r5, #2
 801a484:	d836      	bhi.n	801a4f4 <_scanf_float+0x318>
 801a486:	455e      	cmp	r6, fp
 801a488:	f67f aee8 	bls.w	801a25c <_scanf_float+0x80>
 801a48c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a490:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a494:	463a      	mov	r2, r7
 801a496:	4640      	mov	r0, r8
 801a498:	4798      	blx	r3
 801a49a:	6923      	ldr	r3, [r4, #16]
 801a49c:	3b01      	subs	r3, #1
 801a49e:	6123      	str	r3, [r4, #16]
 801a4a0:	e7f1      	b.n	801a486 <_scanf_float+0x2aa>
 801a4a2:	9802      	ldr	r0, [sp, #8]
 801a4a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a4ac:	9002      	str	r0, [sp, #8]
 801a4ae:	463a      	mov	r2, r7
 801a4b0:	4640      	mov	r0, r8
 801a4b2:	4798      	blx	r3
 801a4b4:	6923      	ldr	r3, [r4, #16]
 801a4b6:	3b01      	subs	r3, #1
 801a4b8:	6123      	str	r3, [r4, #16]
 801a4ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a4be:	fa5f fa8a 	uxtb.w	sl, sl
 801a4c2:	f1ba 0f02 	cmp.w	sl, #2
 801a4c6:	d1ec      	bne.n	801a4a2 <_scanf_float+0x2c6>
 801a4c8:	3d03      	subs	r5, #3
 801a4ca:	b2ed      	uxtb	r5, r5
 801a4cc:	1b76      	subs	r6, r6, r5
 801a4ce:	6823      	ldr	r3, [r4, #0]
 801a4d0:	05da      	lsls	r2, r3, #23
 801a4d2:	d52f      	bpl.n	801a534 <_scanf_float+0x358>
 801a4d4:	055b      	lsls	r3, r3, #21
 801a4d6:	d510      	bpl.n	801a4fa <_scanf_float+0x31e>
 801a4d8:	455e      	cmp	r6, fp
 801a4da:	f67f aebf 	bls.w	801a25c <_scanf_float+0x80>
 801a4de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4e6:	463a      	mov	r2, r7
 801a4e8:	4640      	mov	r0, r8
 801a4ea:	4798      	blx	r3
 801a4ec:	6923      	ldr	r3, [r4, #16]
 801a4ee:	3b01      	subs	r3, #1
 801a4f0:	6123      	str	r3, [r4, #16]
 801a4f2:	e7f1      	b.n	801a4d8 <_scanf_float+0x2fc>
 801a4f4:	46aa      	mov	sl, r5
 801a4f6:	9602      	str	r6, [sp, #8]
 801a4f8:	e7df      	b.n	801a4ba <_scanf_float+0x2de>
 801a4fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a4fe:	6923      	ldr	r3, [r4, #16]
 801a500:	2965      	cmp	r1, #101	; 0x65
 801a502:	f103 33ff 	add.w	r3, r3, #4294967295
 801a506:	f106 35ff 	add.w	r5, r6, #4294967295
 801a50a:	6123      	str	r3, [r4, #16]
 801a50c:	d00c      	beq.n	801a528 <_scanf_float+0x34c>
 801a50e:	2945      	cmp	r1, #69	; 0x45
 801a510:	d00a      	beq.n	801a528 <_scanf_float+0x34c>
 801a512:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a516:	463a      	mov	r2, r7
 801a518:	4640      	mov	r0, r8
 801a51a:	4798      	blx	r3
 801a51c:	6923      	ldr	r3, [r4, #16]
 801a51e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a522:	3b01      	subs	r3, #1
 801a524:	1eb5      	subs	r5, r6, #2
 801a526:	6123      	str	r3, [r4, #16]
 801a528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a52c:	463a      	mov	r2, r7
 801a52e:	4640      	mov	r0, r8
 801a530:	4798      	blx	r3
 801a532:	462e      	mov	r6, r5
 801a534:	6825      	ldr	r5, [r4, #0]
 801a536:	f015 0510 	ands.w	r5, r5, #16
 801a53a:	d159      	bne.n	801a5f0 <_scanf_float+0x414>
 801a53c:	7035      	strb	r5, [r6, #0]
 801a53e:	6823      	ldr	r3, [r4, #0]
 801a540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a548:	d11b      	bne.n	801a582 <_scanf_float+0x3a6>
 801a54a:	9b01      	ldr	r3, [sp, #4]
 801a54c:	454b      	cmp	r3, r9
 801a54e:	eba3 0209 	sub.w	r2, r3, r9
 801a552:	d123      	bne.n	801a59c <_scanf_float+0x3c0>
 801a554:	2200      	movs	r2, #0
 801a556:	4659      	mov	r1, fp
 801a558:	4640      	mov	r0, r8
 801a55a:	f000 fe97 	bl	801b28c <_strtod_r>
 801a55e:	6822      	ldr	r2, [r4, #0]
 801a560:	9b03      	ldr	r3, [sp, #12]
 801a562:	f012 0f02 	tst.w	r2, #2
 801a566:	ec57 6b10 	vmov	r6, r7, d0
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	d021      	beq.n	801a5b2 <_scanf_float+0x3d6>
 801a56e:	9903      	ldr	r1, [sp, #12]
 801a570:	1d1a      	adds	r2, r3, #4
 801a572:	600a      	str	r2, [r1, #0]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	e9c3 6700 	strd	r6, r7, [r3]
 801a57a:	68e3      	ldr	r3, [r4, #12]
 801a57c:	3301      	adds	r3, #1
 801a57e:	60e3      	str	r3, [r4, #12]
 801a580:	e66d      	b.n	801a25e <_scanf_float+0x82>
 801a582:	9b04      	ldr	r3, [sp, #16]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d0e5      	beq.n	801a554 <_scanf_float+0x378>
 801a588:	9905      	ldr	r1, [sp, #20]
 801a58a:	230a      	movs	r3, #10
 801a58c:	462a      	mov	r2, r5
 801a58e:	3101      	adds	r1, #1
 801a590:	4640      	mov	r0, r8
 801a592:	f000 ff03 	bl	801b39c <_strtol_r>
 801a596:	9b04      	ldr	r3, [sp, #16]
 801a598:	9e05      	ldr	r6, [sp, #20]
 801a59a:	1ac2      	subs	r2, r0, r3
 801a59c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a5a0:	429e      	cmp	r6, r3
 801a5a2:	bf28      	it	cs
 801a5a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a5a8:	4912      	ldr	r1, [pc, #72]	; (801a5f4 <_scanf_float+0x418>)
 801a5aa:	4630      	mov	r0, r6
 801a5ac:	f000 f82c 	bl	801a608 <siprintf>
 801a5b0:	e7d0      	b.n	801a554 <_scanf_float+0x378>
 801a5b2:	9903      	ldr	r1, [sp, #12]
 801a5b4:	f012 0f04 	tst.w	r2, #4
 801a5b8:	f103 0204 	add.w	r2, r3, #4
 801a5bc:	600a      	str	r2, [r1, #0]
 801a5be:	d1d9      	bne.n	801a574 <_scanf_float+0x398>
 801a5c0:	f8d3 8000 	ldr.w	r8, [r3]
 801a5c4:	ee10 2a10 	vmov	r2, s0
 801a5c8:	ee10 0a10 	vmov	r0, s0
 801a5cc:	463b      	mov	r3, r7
 801a5ce:	4639      	mov	r1, r7
 801a5d0:	f7fe fed4 	bl	801937c <__aeabi_dcmpun>
 801a5d4:	b128      	cbz	r0, 801a5e2 <_scanf_float+0x406>
 801a5d6:	4808      	ldr	r0, [pc, #32]	; (801a5f8 <_scanf_float+0x41c>)
 801a5d8:	f000 f810 	bl	801a5fc <nanf>
 801a5dc:	ed88 0a00 	vstr	s0, [r8]
 801a5e0:	e7cb      	b.n	801a57a <_scanf_float+0x39e>
 801a5e2:	4630      	mov	r0, r6
 801a5e4:	4639      	mov	r1, r7
 801a5e6:	f7fe ff27 	bl	8019438 <__aeabi_d2f>
 801a5ea:	f8c8 0000 	str.w	r0, [r8]
 801a5ee:	e7c4      	b.n	801a57a <_scanf_float+0x39e>
 801a5f0:	2500      	movs	r5, #0
 801a5f2:	e634      	b.n	801a25e <_scanf_float+0x82>
 801a5f4:	08052238 	.word	0x08052238
 801a5f8:	08052640 	.word	0x08052640

0801a5fc <nanf>:
 801a5fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a604 <nanf+0x8>
 801a600:	4770      	bx	lr
 801a602:	bf00      	nop
 801a604:	7fc00000 	.word	0x7fc00000

0801a608 <siprintf>:
 801a608:	b40e      	push	{r1, r2, r3}
 801a60a:	b500      	push	{lr}
 801a60c:	b09c      	sub	sp, #112	; 0x70
 801a60e:	ab1d      	add	r3, sp, #116	; 0x74
 801a610:	9002      	str	r0, [sp, #8]
 801a612:	9006      	str	r0, [sp, #24]
 801a614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a618:	4809      	ldr	r0, [pc, #36]	; (801a640 <siprintf+0x38>)
 801a61a:	9107      	str	r1, [sp, #28]
 801a61c:	9104      	str	r1, [sp, #16]
 801a61e:	4909      	ldr	r1, [pc, #36]	; (801a644 <siprintf+0x3c>)
 801a620:	f853 2b04 	ldr.w	r2, [r3], #4
 801a624:	9105      	str	r1, [sp, #20]
 801a626:	6800      	ldr	r0, [r0, #0]
 801a628:	9301      	str	r3, [sp, #4]
 801a62a:	a902      	add	r1, sp, #8
 801a62c:	f002 feee 	bl	801d40c <_svfiprintf_r>
 801a630:	9b02      	ldr	r3, [sp, #8]
 801a632:	2200      	movs	r2, #0
 801a634:	701a      	strb	r2, [r3, #0]
 801a636:	b01c      	add	sp, #112	; 0x70
 801a638:	f85d eb04 	ldr.w	lr, [sp], #4
 801a63c:	b003      	add	sp, #12
 801a63e:	4770      	bx	lr
 801a640:	20000064 	.word	0x20000064
 801a644:	ffff0208 	.word	0xffff0208

0801a648 <sulp>:
 801a648:	b570      	push	{r4, r5, r6, lr}
 801a64a:	4604      	mov	r4, r0
 801a64c:	460d      	mov	r5, r1
 801a64e:	ec45 4b10 	vmov	d0, r4, r5
 801a652:	4616      	mov	r6, r2
 801a654:	f002 fc38 	bl	801cec8 <__ulp>
 801a658:	ec51 0b10 	vmov	r0, r1, d0
 801a65c:	b17e      	cbz	r6, 801a67e <sulp+0x36>
 801a65e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a666:	2b00      	cmp	r3, #0
 801a668:	dd09      	ble.n	801a67e <sulp+0x36>
 801a66a:	051b      	lsls	r3, r3, #20
 801a66c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a670:	2400      	movs	r4, #0
 801a672:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a676:	4622      	mov	r2, r4
 801a678:	462b      	mov	r3, r5
 801a67a:	f7fe fbe5 	bl	8018e48 <__aeabi_dmul>
 801a67e:	bd70      	pop	{r4, r5, r6, pc}

0801a680 <_strtod_l>:
 801a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a684:	ed2d 8b02 	vpush	{d8}
 801a688:	b09d      	sub	sp, #116	; 0x74
 801a68a:	461f      	mov	r7, r3
 801a68c:	2300      	movs	r3, #0
 801a68e:	9318      	str	r3, [sp, #96]	; 0x60
 801a690:	4ba2      	ldr	r3, [pc, #648]	; (801a91c <_strtod_l+0x29c>)
 801a692:	9213      	str	r2, [sp, #76]	; 0x4c
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	9305      	str	r3, [sp, #20]
 801a698:	4604      	mov	r4, r0
 801a69a:	4618      	mov	r0, r3
 801a69c:	4688      	mov	r8, r1
 801a69e:	f7fe f9bd 	bl	8018a1c <strlen>
 801a6a2:	f04f 0a00 	mov.w	sl, #0
 801a6a6:	4605      	mov	r5, r0
 801a6a8:	f04f 0b00 	mov.w	fp, #0
 801a6ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a6b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a6b2:	781a      	ldrb	r2, [r3, #0]
 801a6b4:	2a2b      	cmp	r2, #43	; 0x2b
 801a6b6:	d04e      	beq.n	801a756 <_strtod_l+0xd6>
 801a6b8:	d83b      	bhi.n	801a732 <_strtod_l+0xb2>
 801a6ba:	2a0d      	cmp	r2, #13
 801a6bc:	d834      	bhi.n	801a728 <_strtod_l+0xa8>
 801a6be:	2a08      	cmp	r2, #8
 801a6c0:	d834      	bhi.n	801a72c <_strtod_l+0xac>
 801a6c2:	2a00      	cmp	r2, #0
 801a6c4:	d03e      	beq.n	801a744 <_strtod_l+0xc4>
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	930a      	str	r3, [sp, #40]	; 0x28
 801a6ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a6cc:	7833      	ldrb	r3, [r6, #0]
 801a6ce:	2b30      	cmp	r3, #48	; 0x30
 801a6d0:	f040 80b0 	bne.w	801a834 <_strtod_l+0x1b4>
 801a6d4:	7873      	ldrb	r3, [r6, #1]
 801a6d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a6da:	2b58      	cmp	r3, #88	; 0x58
 801a6dc:	d168      	bne.n	801a7b0 <_strtod_l+0x130>
 801a6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6e0:	9301      	str	r3, [sp, #4]
 801a6e2:	ab18      	add	r3, sp, #96	; 0x60
 801a6e4:	9702      	str	r7, [sp, #8]
 801a6e6:	9300      	str	r3, [sp, #0]
 801a6e8:	4a8d      	ldr	r2, [pc, #564]	; (801a920 <_strtod_l+0x2a0>)
 801a6ea:	ab19      	add	r3, sp, #100	; 0x64
 801a6ec:	a917      	add	r1, sp, #92	; 0x5c
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	f001 fd44 	bl	801c17c <__gethex>
 801a6f4:	f010 0707 	ands.w	r7, r0, #7
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	d005      	beq.n	801a708 <_strtod_l+0x88>
 801a6fc:	2f06      	cmp	r7, #6
 801a6fe:	d12c      	bne.n	801a75a <_strtod_l+0xda>
 801a700:	3601      	adds	r6, #1
 801a702:	2300      	movs	r3, #0
 801a704:	9617      	str	r6, [sp, #92]	; 0x5c
 801a706:	930a      	str	r3, [sp, #40]	; 0x28
 801a708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	f040 8590 	bne.w	801b230 <_strtod_l+0xbb0>
 801a710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a712:	b1eb      	cbz	r3, 801a750 <_strtod_l+0xd0>
 801a714:	4652      	mov	r2, sl
 801a716:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a71a:	ec43 2b10 	vmov	d0, r2, r3
 801a71e:	b01d      	add	sp, #116	; 0x74
 801a720:	ecbd 8b02 	vpop	{d8}
 801a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a728:	2a20      	cmp	r2, #32
 801a72a:	d1cc      	bne.n	801a6c6 <_strtod_l+0x46>
 801a72c:	3301      	adds	r3, #1
 801a72e:	9317      	str	r3, [sp, #92]	; 0x5c
 801a730:	e7be      	b.n	801a6b0 <_strtod_l+0x30>
 801a732:	2a2d      	cmp	r2, #45	; 0x2d
 801a734:	d1c7      	bne.n	801a6c6 <_strtod_l+0x46>
 801a736:	2201      	movs	r2, #1
 801a738:	920a      	str	r2, [sp, #40]	; 0x28
 801a73a:	1c5a      	adds	r2, r3, #1
 801a73c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a73e:	785b      	ldrb	r3, [r3, #1]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d1c2      	bne.n	801a6ca <_strtod_l+0x4a>
 801a744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a746:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	f040 856e 	bne.w	801b22c <_strtod_l+0xbac>
 801a750:	4652      	mov	r2, sl
 801a752:	465b      	mov	r3, fp
 801a754:	e7e1      	b.n	801a71a <_strtod_l+0x9a>
 801a756:	2200      	movs	r2, #0
 801a758:	e7ee      	b.n	801a738 <_strtod_l+0xb8>
 801a75a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a75c:	b13a      	cbz	r2, 801a76e <_strtod_l+0xee>
 801a75e:	2135      	movs	r1, #53	; 0x35
 801a760:	a81a      	add	r0, sp, #104	; 0x68
 801a762:	f002 fcbc 	bl	801d0de <__copybits>
 801a766:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a768:	4620      	mov	r0, r4
 801a76a:	f002 f87b 	bl	801c864 <_Bfree>
 801a76e:	3f01      	subs	r7, #1
 801a770:	2f04      	cmp	r7, #4
 801a772:	d806      	bhi.n	801a782 <_strtod_l+0x102>
 801a774:	e8df f007 	tbb	[pc, r7]
 801a778:	1714030a 	.word	0x1714030a
 801a77c:	0a          	.byte	0x0a
 801a77d:	00          	.byte	0x00
 801a77e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a782:	0728      	lsls	r0, r5, #28
 801a784:	d5c0      	bpl.n	801a708 <_strtod_l+0x88>
 801a786:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a78a:	e7bd      	b.n	801a708 <_strtod_l+0x88>
 801a78c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a790:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a796:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a79a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a79e:	e7f0      	b.n	801a782 <_strtod_l+0x102>
 801a7a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a924 <_strtod_l+0x2a4>
 801a7a4:	e7ed      	b.n	801a782 <_strtod_l+0x102>
 801a7a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a7aa:	f04f 3aff 	mov.w	sl, #4294967295
 801a7ae:	e7e8      	b.n	801a782 <_strtod_l+0x102>
 801a7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7b2:	1c5a      	adds	r2, r3, #1
 801a7b4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a7b6:	785b      	ldrb	r3, [r3, #1]
 801a7b8:	2b30      	cmp	r3, #48	; 0x30
 801a7ba:	d0f9      	beq.n	801a7b0 <_strtod_l+0x130>
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d0a3      	beq.n	801a708 <_strtod_l+0x88>
 801a7c0:	2301      	movs	r3, #1
 801a7c2:	f04f 0900 	mov.w	r9, #0
 801a7c6:	9304      	str	r3, [sp, #16]
 801a7c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7ca:	9308      	str	r3, [sp, #32]
 801a7cc:	f8cd 901c 	str.w	r9, [sp, #28]
 801a7d0:	464f      	mov	r7, r9
 801a7d2:	220a      	movs	r2, #10
 801a7d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a7d6:	7806      	ldrb	r6, [r0, #0]
 801a7d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a7dc:	b2d9      	uxtb	r1, r3
 801a7de:	2909      	cmp	r1, #9
 801a7e0:	d92a      	bls.n	801a838 <_strtod_l+0x1b8>
 801a7e2:	9905      	ldr	r1, [sp, #20]
 801a7e4:	462a      	mov	r2, r5
 801a7e6:	f002 ff2b 	bl	801d640 <strncmp>
 801a7ea:	b398      	cbz	r0, 801a854 <_strtod_l+0x1d4>
 801a7ec:	2000      	movs	r0, #0
 801a7ee:	4632      	mov	r2, r6
 801a7f0:	463d      	mov	r5, r7
 801a7f2:	9005      	str	r0, [sp, #20]
 801a7f4:	4603      	mov	r3, r0
 801a7f6:	2a65      	cmp	r2, #101	; 0x65
 801a7f8:	d001      	beq.n	801a7fe <_strtod_l+0x17e>
 801a7fa:	2a45      	cmp	r2, #69	; 0x45
 801a7fc:	d118      	bne.n	801a830 <_strtod_l+0x1b0>
 801a7fe:	b91d      	cbnz	r5, 801a808 <_strtod_l+0x188>
 801a800:	9a04      	ldr	r2, [sp, #16]
 801a802:	4302      	orrs	r2, r0
 801a804:	d09e      	beq.n	801a744 <_strtod_l+0xc4>
 801a806:	2500      	movs	r5, #0
 801a808:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a80c:	f108 0201 	add.w	r2, r8, #1
 801a810:	9217      	str	r2, [sp, #92]	; 0x5c
 801a812:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a816:	2a2b      	cmp	r2, #43	; 0x2b
 801a818:	d075      	beq.n	801a906 <_strtod_l+0x286>
 801a81a:	2a2d      	cmp	r2, #45	; 0x2d
 801a81c:	d07b      	beq.n	801a916 <_strtod_l+0x296>
 801a81e:	f04f 0c00 	mov.w	ip, #0
 801a822:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a826:	2909      	cmp	r1, #9
 801a828:	f240 8082 	bls.w	801a930 <_strtod_l+0x2b0>
 801a82c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a830:	2600      	movs	r6, #0
 801a832:	e09d      	b.n	801a970 <_strtod_l+0x2f0>
 801a834:	2300      	movs	r3, #0
 801a836:	e7c4      	b.n	801a7c2 <_strtod_l+0x142>
 801a838:	2f08      	cmp	r7, #8
 801a83a:	bfd8      	it	le
 801a83c:	9907      	ldrle	r1, [sp, #28]
 801a83e:	f100 0001 	add.w	r0, r0, #1
 801a842:	bfda      	itte	le
 801a844:	fb02 3301 	mlale	r3, r2, r1, r3
 801a848:	9307      	strle	r3, [sp, #28]
 801a84a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a84e:	3701      	adds	r7, #1
 801a850:	9017      	str	r0, [sp, #92]	; 0x5c
 801a852:	e7bf      	b.n	801a7d4 <_strtod_l+0x154>
 801a854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a856:	195a      	adds	r2, r3, r5
 801a858:	9217      	str	r2, [sp, #92]	; 0x5c
 801a85a:	5d5a      	ldrb	r2, [r3, r5]
 801a85c:	2f00      	cmp	r7, #0
 801a85e:	d037      	beq.n	801a8d0 <_strtod_l+0x250>
 801a860:	9005      	str	r0, [sp, #20]
 801a862:	463d      	mov	r5, r7
 801a864:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a868:	2b09      	cmp	r3, #9
 801a86a:	d912      	bls.n	801a892 <_strtod_l+0x212>
 801a86c:	2301      	movs	r3, #1
 801a86e:	e7c2      	b.n	801a7f6 <_strtod_l+0x176>
 801a870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a872:	1c5a      	adds	r2, r3, #1
 801a874:	9217      	str	r2, [sp, #92]	; 0x5c
 801a876:	785a      	ldrb	r2, [r3, #1]
 801a878:	3001      	adds	r0, #1
 801a87a:	2a30      	cmp	r2, #48	; 0x30
 801a87c:	d0f8      	beq.n	801a870 <_strtod_l+0x1f0>
 801a87e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a882:	2b08      	cmp	r3, #8
 801a884:	f200 84d9 	bhi.w	801b23a <_strtod_l+0xbba>
 801a888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a88a:	9005      	str	r0, [sp, #20]
 801a88c:	2000      	movs	r0, #0
 801a88e:	9308      	str	r3, [sp, #32]
 801a890:	4605      	mov	r5, r0
 801a892:	3a30      	subs	r2, #48	; 0x30
 801a894:	f100 0301 	add.w	r3, r0, #1
 801a898:	d014      	beq.n	801a8c4 <_strtod_l+0x244>
 801a89a:	9905      	ldr	r1, [sp, #20]
 801a89c:	4419      	add	r1, r3
 801a89e:	9105      	str	r1, [sp, #20]
 801a8a0:	462b      	mov	r3, r5
 801a8a2:	eb00 0e05 	add.w	lr, r0, r5
 801a8a6:	210a      	movs	r1, #10
 801a8a8:	4573      	cmp	r3, lr
 801a8aa:	d113      	bne.n	801a8d4 <_strtod_l+0x254>
 801a8ac:	182b      	adds	r3, r5, r0
 801a8ae:	2b08      	cmp	r3, #8
 801a8b0:	f105 0501 	add.w	r5, r5, #1
 801a8b4:	4405      	add	r5, r0
 801a8b6:	dc1c      	bgt.n	801a8f2 <_strtod_l+0x272>
 801a8b8:	9907      	ldr	r1, [sp, #28]
 801a8ba:	230a      	movs	r3, #10
 801a8bc:	fb03 2301 	mla	r3, r3, r1, r2
 801a8c0:	9307      	str	r3, [sp, #28]
 801a8c2:	2300      	movs	r3, #0
 801a8c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a8c6:	1c51      	adds	r1, r2, #1
 801a8c8:	9117      	str	r1, [sp, #92]	; 0x5c
 801a8ca:	7852      	ldrb	r2, [r2, #1]
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	e7c9      	b.n	801a864 <_strtod_l+0x1e4>
 801a8d0:	4638      	mov	r0, r7
 801a8d2:	e7d2      	b.n	801a87a <_strtod_l+0x1fa>
 801a8d4:	2b08      	cmp	r3, #8
 801a8d6:	dc04      	bgt.n	801a8e2 <_strtod_l+0x262>
 801a8d8:	9e07      	ldr	r6, [sp, #28]
 801a8da:	434e      	muls	r6, r1
 801a8dc:	9607      	str	r6, [sp, #28]
 801a8de:	3301      	adds	r3, #1
 801a8e0:	e7e2      	b.n	801a8a8 <_strtod_l+0x228>
 801a8e2:	f103 0c01 	add.w	ip, r3, #1
 801a8e6:	f1bc 0f10 	cmp.w	ip, #16
 801a8ea:	bfd8      	it	le
 801a8ec:	fb01 f909 	mulle.w	r9, r1, r9
 801a8f0:	e7f5      	b.n	801a8de <_strtod_l+0x25e>
 801a8f2:	2d10      	cmp	r5, #16
 801a8f4:	bfdc      	itt	le
 801a8f6:	230a      	movle	r3, #10
 801a8f8:	fb03 2909 	mlale	r9, r3, r9, r2
 801a8fc:	e7e1      	b.n	801a8c2 <_strtod_l+0x242>
 801a8fe:	2300      	movs	r3, #0
 801a900:	9305      	str	r3, [sp, #20]
 801a902:	2301      	movs	r3, #1
 801a904:	e77c      	b.n	801a800 <_strtod_l+0x180>
 801a906:	f04f 0c00 	mov.w	ip, #0
 801a90a:	f108 0202 	add.w	r2, r8, #2
 801a90e:	9217      	str	r2, [sp, #92]	; 0x5c
 801a910:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a914:	e785      	b.n	801a822 <_strtod_l+0x1a2>
 801a916:	f04f 0c01 	mov.w	ip, #1
 801a91a:	e7f6      	b.n	801a90a <_strtod_l+0x28a>
 801a91c:	08052488 	.word	0x08052488
 801a920:	08052240 	.word	0x08052240
 801a924:	7ff00000 	.word	0x7ff00000
 801a928:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a92a:	1c51      	adds	r1, r2, #1
 801a92c:	9117      	str	r1, [sp, #92]	; 0x5c
 801a92e:	7852      	ldrb	r2, [r2, #1]
 801a930:	2a30      	cmp	r2, #48	; 0x30
 801a932:	d0f9      	beq.n	801a928 <_strtod_l+0x2a8>
 801a934:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a938:	2908      	cmp	r1, #8
 801a93a:	f63f af79 	bhi.w	801a830 <_strtod_l+0x1b0>
 801a93e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a942:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a944:	9206      	str	r2, [sp, #24]
 801a946:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a948:	1c51      	adds	r1, r2, #1
 801a94a:	9117      	str	r1, [sp, #92]	; 0x5c
 801a94c:	7852      	ldrb	r2, [r2, #1]
 801a94e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a952:	2e09      	cmp	r6, #9
 801a954:	d937      	bls.n	801a9c6 <_strtod_l+0x346>
 801a956:	9e06      	ldr	r6, [sp, #24]
 801a958:	1b89      	subs	r1, r1, r6
 801a95a:	2908      	cmp	r1, #8
 801a95c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a960:	dc02      	bgt.n	801a968 <_strtod_l+0x2e8>
 801a962:	4576      	cmp	r6, lr
 801a964:	bfa8      	it	ge
 801a966:	4676      	movge	r6, lr
 801a968:	f1bc 0f00 	cmp.w	ip, #0
 801a96c:	d000      	beq.n	801a970 <_strtod_l+0x2f0>
 801a96e:	4276      	negs	r6, r6
 801a970:	2d00      	cmp	r5, #0
 801a972:	d14d      	bne.n	801aa10 <_strtod_l+0x390>
 801a974:	9904      	ldr	r1, [sp, #16]
 801a976:	4301      	orrs	r1, r0
 801a978:	f47f aec6 	bne.w	801a708 <_strtod_l+0x88>
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	f47f aee1 	bne.w	801a744 <_strtod_l+0xc4>
 801a982:	2a69      	cmp	r2, #105	; 0x69
 801a984:	d027      	beq.n	801a9d6 <_strtod_l+0x356>
 801a986:	dc24      	bgt.n	801a9d2 <_strtod_l+0x352>
 801a988:	2a49      	cmp	r2, #73	; 0x49
 801a98a:	d024      	beq.n	801a9d6 <_strtod_l+0x356>
 801a98c:	2a4e      	cmp	r2, #78	; 0x4e
 801a98e:	f47f aed9 	bne.w	801a744 <_strtod_l+0xc4>
 801a992:	499f      	ldr	r1, [pc, #636]	; (801ac10 <_strtod_l+0x590>)
 801a994:	a817      	add	r0, sp, #92	; 0x5c
 801a996:	f001 fe49 	bl	801c62c <__match>
 801a99a:	2800      	cmp	r0, #0
 801a99c:	f43f aed2 	beq.w	801a744 <_strtod_l+0xc4>
 801a9a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9a2:	781b      	ldrb	r3, [r3, #0]
 801a9a4:	2b28      	cmp	r3, #40	; 0x28
 801a9a6:	d12d      	bne.n	801aa04 <_strtod_l+0x384>
 801a9a8:	499a      	ldr	r1, [pc, #616]	; (801ac14 <_strtod_l+0x594>)
 801a9aa:	aa1a      	add	r2, sp, #104	; 0x68
 801a9ac:	a817      	add	r0, sp, #92	; 0x5c
 801a9ae:	f001 fe51 	bl	801c654 <__hexnan>
 801a9b2:	2805      	cmp	r0, #5
 801a9b4:	d126      	bne.n	801aa04 <_strtod_l+0x384>
 801a9b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a9b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a9bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a9c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a9c4:	e6a0      	b.n	801a708 <_strtod_l+0x88>
 801a9c6:	210a      	movs	r1, #10
 801a9c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a9cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a9d0:	e7b9      	b.n	801a946 <_strtod_l+0x2c6>
 801a9d2:	2a6e      	cmp	r2, #110	; 0x6e
 801a9d4:	e7db      	b.n	801a98e <_strtod_l+0x30e>
 801a9d6:	4990      	ldr	r1, [pc, #576]	; (801ac18 <_strtod_l+0x598>)
 801a9d8:	a817      	add	r0, sp, #92	; 0x5c
 801a9da:	f001 fe27 	bl	801c62c <__match>
 801a9de:	2800      	cmp	r0, #0
 801a9e0:	f43f aeb0 	beq.w	801a744 <_strtod_l+0xc4>
 801a9e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9e6:	498d      	ldr	r1, [pc, #564]	; (801ac1c <_strtod_l+0x59c>)
 801a9e8:	3b01      	subs	r3, #1
 801a9ea:	a817      	add	r0, sp, #92	; 0x5c
 801a9ec:	9317      	str	r3, [sp, #92]	; 0x5c
 801a9ee:	f001 fe1d 	bl	801c62c <__match>
 801a9f2:	b910      	cbnz	r0, 801a9fa <_strtod_l+0x37a>
 801a9f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9f6:	3301      	adds	r3, #1
 801a9f8:	9317      	str	r3, [sp, #92]	; 0x5c
 801a9fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 801ac2c <_strtod_l+0x5ac>
 801a9fe:	f04f 0a00 	mov.w	sl, #0
 801aa02:	e681      	b.n	801a708 <_strtod_l+0x88>
 801aa04:	4886      	ldr	r0, [pc, #536]	; (801ac20 <_strtod_l+0x5a0>)
 801aa06:	f002 fe03 	bl	801d610 <nan>
 801aa0a:	ec5b ab10 	vmov	sl, fp, d0
 801aa0e:	e67b      	b.n	801a708 <_strtod_l+0x88>
 801aa10:	9b05      	ldr	r3, [sp, #20]
 801aa12:	9807      	ldr	r0, [sp, #28]
 801aa14:	1af3      	subs	r3, r6, r3
 801aa16:	2f00      	cmp	r7, #0
 801aa18:	bf08      	it	eq
 801aa1a:	462f      	moveq	r7, r5
 801aa1c:	2d10      	cmp	r5, #16
 801aa1e:	9306      	str	r3, [sp, #24]
 801aa20:	46a8      	mov	r8, r5
 801aa22:	bfa8      	it	ge
 801aa24:	f04f 0810 	movge.w	r8, #16
 801aa28:	f7fe f994 	bl	8018d54 <__aeabi_ui2d>
 801aa2c:	2d09      	cmp	r5, #9
 801aa2e:	4682      	mov	sl, r0
 801aa30:	468b      	mov	fp, r1
 801aa32:	dd13      	ble.n	801aa5c <_strtod_l+0x3dc>
 801aa34:	4b7b      	ldr	r3, [pc, #492]	; (801ac24 <_strtod_l+0x5a4>)
 801aa36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aa3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aa3e:	f7fe fa03 	bl	8018e48 <__aeabi_dmul>
 801aa42:	4682      	mov	sl, r0
 801aa44:	4648      	mov	r0, r9
 801aa46:	468b      	mov	fp, r1
 801aa48:	f7fe f984 	bl	8018d54 <__aeabi_ui2d>
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	4650      	mov	r0, sl
 801aa52:	4659      	mov	r1, fp
 801aa54:	f7fe f842 	bl	8018adc <__adddf3>
 801aa58:	4682      	mov	sl, r0
 801aa5a:	468b      	mov	fp, r1
 801aa5c:	2d0f      	cmp	r5, #15
 801aa5e:	dc38      	bgt.n	801aad2 <_strtod_l+0x452>
 801aa60:	9b06      	ldr	r3, [sp, #24]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	f43f ae50 	beq.w	801a708 <_strtod_l+0x88>
 801aa68:	dd24      	ble.n	801aab4 <_strtod_l+0x434>
 801aa6a:	2b16      	cmp	r3, #22
 801aa6c:	dc0b      	bgt.n	801aa86 <_strtod_l+0x406>
 801aa6e:	496d      	ldr	r1, [pc, #436]	; (801ac24 <_strtod_l+0x5a4>)
 801aa70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aa74:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa78:	4652      	mov	r2, sl
 801aa7a:	465b      	mov	r3, fp
 801aa7c:	f7fe f9e4 	bl	8018e48 <__aeabi_dmul>
 801aa80:	4682      	mov	sl, r0
 801aa82:	468b      	mov	fp, r1
 801aa84:	e640      	b.n	801a708 <_strtod_l+0x88>
 801aa86:	9a06      	ldr	r2, [sp, #24]
 801aa88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	db20      	blt.n	801aad2 <_strtod_l+0x452>
 801aa90:	4c64      	ldr	r4, [pc, #400]	; (801ac24 <_strtod_l+0x5a4>)
 801aa92:	f1c5 050f 	rsb	r5, r5, #15
 801aa96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801aa9a:	4652      	mov	r2, sl
 801aa9c:	465b      	mov	r3, fp
 801aa9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaa2:	f7fe f9d1 	bl	8018e48 <__aeabi_dmul>
 801aaa6:	9b06      	ldr	r3, [sp, #24]
 801aaa8:	1b5d      	subs	r5, r3, r5
 801aaaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801aaae:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aab2:	e7e3      	b.n	801aa7c <_strtod_l+0x3fc>
 801aab4:	9b06      	ldr	r3, [sp, #24]
 801aab6:	3316      	adds	r3, #22
 801aab8:	db0b      	blt.n	801aad2 <_strtod_l+0x452>
 801aaba:	9b05      	ldr	r3, [sp, #20]
 801aabc:	1b9e      	subs	r6, r3, r6
 801aabe:	4b59      	ldr	r3, [pc, #356]	; (801ac24 <_strtod_l+0x5a4>)
 801aac0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801aac4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801aac8:	4650      	mov	r0, sl
 801aaca:	4659      	mov	r1, fp
 801aacc:	f7fe fae6 	bl	801909c <__aeabi_ddiv>
 801aad0:	e7d6      	b.n	801aa80 <_strtod_l+0x400>
 801aad2:	9b06      	ldr	r3, [sp, #24]
 801aad4:	eba5 0808 	sub.w	r8, r5, r8
 801aad8:	4498      	add	r8, r3
 801aada:	f1b8 0f00 	cmp.w	r8, #0
 801aade:	dd74      	ble.n	801abca <_strtod_l+0x54a>
 801aae0:	f018 030f 	ands.w	r3, r8, #15
 801aae4:	d00a      	beq.n	801aafc <_strtod_l+0x47c>
 801aae6:	494f      	ldr	r1, [pc, #316]	; (801ac24 <_strtod_l+0x5a4>)
 801aae8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aaec:	4652      	mov	r2, sl
 801aaee:	465b      	mov	r3, fp
 801aaf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaf4:	f7fe f9a8 	bl	8018e48 <__aeabi_dmul>
 801aaf8:	4682      	mov	sl, r0
 801aafa:	468b      	mov	fp, r1
 801aafc:	f038 080f 	bics.w	r8, r8, #15
 801ab00:	d04f      	beq.n	801aba2 <_strtod_l+0x522>
 801ab02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ab06:	dd22      	ble.n	801ab4e <_strtod_l+0x4ce>
 801ab08:	2500      	movs	r5, #0
 801ab0a:	462e      	mov	r6, r5
 801ab0c:	9507      	str	r5, [sp, #28]
 801ab0e:	9505      	str	r5, [sp, #20]
 801ab10:	2322      	movs	r3, #34	; 0x22
 801ab12:	f8df b118 	ldr.w	fp, [pc, #280]	; 801ac2c <_strtod_l+0x5ac>
 801ab16:	6023      	str	r3, [r4, #0]
 801ab18:	f04f 0a00 	mov.w	sl, #0
 801ab1c:	9b07      	ldr	r3, [sp, #28]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	f43f adf2 	beq.w	801a708 <_strtod_l+0x88>
 801ab24:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ab26:	4620      	mov	r0, r4
 801ab28:	f001 fe9c 	bl	801c864 <_Bfree>
 801ab2c:	9905      	ldr	r1, [sp, #20]
 801ab2e:	4620      	mov	r0, r4
 801ab30:	f001 fe98 	bl	801c864 <_Bfree>
 801ab34:	4631      	mov	r1, r6
 801ab36:	4620      	mov	r0, r4
 801ab38:	f001 fe94 	bl	801c864 <_Bfree>
 801ab3c:	9907      	ldr	r1, [sp, #28]
 801ab3e:	4620      	mov	r0, r4
 801ab40:	f001 fe90 	bl	801c864 <_Bfree>
 801ab44:	4629      	mov	r1, r5
 801ab46:	4620      	mov	r0, r4
 801ab48:	f001 fe8c 	bl	801c864 <_Bfree>
 801ab4c:	e5dc      	b.n	801a708 <_strtod_l+0x88>
 801ab4e:	4b36      	ldr	r3, [pc, #216]	; (801ac28 <_strtod_l+0x5a8>)
 801ab50:	9304      	str	r3, [sp, #16]
 801ab52:	2300      	movs	r3, #0
 801ab54:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ab58:	4650      	mov	r0, sl
 801ab5a:	4659      	mov	r1, fp
 801ab5c:	4699      	mov	r9, r3
 801ab5e:	f1b8 0f01 	cmp.w	r8, #1
 801ab62:	dc21      	bgt.n	801aba8 <_strtod_l+0x528>
 801ab64:	b10b      	cbz	r3, 801ab6a <_strtod_l+0x4ea>
 801ab66:	4682      	mov	sl, r0
 801ab68:	468b      	mov	fp, r1
 801ab6a:	4b2f      	ldr	r3, [pc, #188]	; (801ac28 <_strtod_l+0x5a8>)
 801ab6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ab70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ab74:	4652      	mov	r2, sl
 801ab76:	465b      	mov	r3, fp
 801ab78:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ab7c:	f7fe f964 	bl	8018e48 <__aeabi_dmul>
 801ab80:	4b2a      	ldr	r3, [pc, #168]	; (801ac2c <_strtod_l+0x5ac>)
 801ab82:	460a      	mov	r2, r1
 801ab84:	400b      	ands	r3, r1
 801ab86:	492a      	ldr	r1, [pc, #168]	; (801ac30 <_strtod_l+0x5b0>)
 801ab88:	428b      	cmp	r3, r1
 801ab8a:	4682      	mov	sl, r0
 801ab8c:	d8bc      	bhi.n	801ab08 <_strtod_l+0x488>
 801ab8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ab92:	428b      	cmp	r3, r1
 801ab94:	bf86      	itte	hi
 801ab96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801ac34 <_strtod_l+0x5b4>
 801ab9a:	f04f 3aff 	movhi.w	sl, #4294967295
 801ab9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801aba2:	2300      	movs	r3, #0
 801aba4:	9304      	str	r3, [sp, #16]
 801aba6:	e084      	b.n	801acb2 <_strtod_l+0x632>
 801aba8:	f018 0f01 	tst.w	r8, #1
 801abac:	d005      	beq.n	801abba <_strtod_l+0x53a>
 801abae:	9b04      	ldr	r3, [sp, #16]
 801abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb4:	f7fe f948 	bl	8018e48 <__aeabi_dmul>
 801abb8:	2301      	movs	r3, #1
 801abba:	9a04      	ldr	r2, [sp, #16]
 801abbc:	3208      	adds	r2, #8
 801abbe:	f109 0901 	add.w	r9, r9, #1
 801abc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801abc6:	9204      	str	r2, [sp, #16]
 801abc8:	e7c9      	b.n	801ab5e <_strtod_l+0x4de>
 801abca:	d0ea      	beq.n	801aba2 <_strtod_l+0x522>
 801abcc:	f1c8 0800 	rsb	r8, r8, #0
 801abd0:	f018 020f 	ands.w	r2, r8, #15
 801abd4:	d00a      	beq.n	801abec <_strtod_l+0x56c>
 801abd6:	4b13      	ldr	r3, [pc, #76]	; (801ac24 <_strtod_l+0x5a4>)
 801abd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801abdc:	4650      	mov	r0, sl
 801abde:	4659      	mov	r1, fp
 801abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe4:	f7fe fa5a 	bl	801909c <__aeabi_ddiv>
 801abe8:	4682      	mov	sl, r0
 801abea:	468b      	mov	fp, r1
 801abec:	ea5f 1828 	movs.w	r8, r8, asr #4
 801abf0:	d0d7      	beq.n	801aba2 <_strtod_l+0x522>
 801abf2:	f1b8 0f1f 	cmp.w	r8, #31
 801abf6:	dd1f      	ble.n	801ac38 <_strtod_l+0x5b8>
 801abf8:	2500      	movs	r5, #0
 801abfa:	462e      	mov	r6, r5
 801abfc:	9507      	str	r5, [sp, #28]
 801abfe:	9505      	str	r5, [sp, #20]
 801ac00:	2322      	movs	r3, #34	; 0x22
 801ac02:	f04f 0a00 	mov.w	sl, #0
 801ac06:	f04f 0b00 	mov.w	fp, #0
 801ac0a:	6023      	str	r3, [r4, #0]
 801ac0c:	e786      	b.n	801ab1c <_strtod_l+0x49c>
 801ac0e:	bf00      	nop
 801ac10:	08052211 	.word	0x08052211
 801ac14:	08052254 	.word	0x08052254
 801ac18:	08052209 	.word	0x08052209
 801ac1c:	08052394 	.word	0x08052394
 801ac20:	08052640 	.word	0x08052640
 801ac24:	08052520 	.word	0x08052520
 801ac28:	080524f8 	.word	0x080524f8
 801ac2c:	7ff00000 	.word	0x7ff00000
 801ac30:	7ca00000 	.word	0x7ca00000
 801ac34:	7fefffff 	.word	0x7fefffff
 801ac38:	f018 0310 	ands.w	r3, r8, #16
 801ac3c:	bf18      	it	ne
 801ac3e:	236a      	movne	r3, #106	; 0x6a
 801ac40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801aff0 <_strtod_l+0x970>
 801ac44:	9304      	str	r3, [sp, #16]
 801ac46:	4650      	mov	r0, sl
 801ac48:	4659      	mov	r1, fp
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	f018 0f01 	tst.w	r8, #1
 801ac50:	d004      	beq.n	801ac5c <_strtod_l+0x5dc>
 801ac52:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ac56:	f7fe f8f7 	bl	8018e48 <__aeabi_dmul>
 801ac5a:	2301      	movs	r3, #1
 801ac5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ac60:	f109 0908 	add.w	r9, r9, #8
 801ac64:	d1f2      	bne.n	801ac4c <_strtod_l+0x5cc>
 801ac66:	b10b      	cbz	r3, 801ac6c <_strtod_l+0x5ec>
 801ac68:	4682      	mov	sl, r0
 801ac6a:	468b      	mov	fp, r1
 801ac6c:	9b04      	ldr	r3, [sp, #16]
 801ac6e:	b1c3      	cbz	r3, 801aca2 <_strtod_l+0x622>
 801ac70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ac74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	4659      	mov	r1, fp
 801ac7c:	dd11      	ble.n	801aca2 <_strtod_l+0x622>
 801ac7e:	2b1f      	cmp	r3, #31
 801ac80:	f340 8124 	ble.w	801aecc <_strtod_l+0x84c>
 801ac84:	2b34      	cmp	r3, #52	; 0x34
 801ac86:	bfde      	ittt	le
 801ac88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ac8c:	f04f 33ff 	movle.w	r3, #4294967295
 801ac90:	fa03 f202 	lslle.w	r2, r3, r2
 801ac94:	f04f 0a00 	mov.w	sl, #0
 801ac98:	bfcc      	ite	gt
 801ac9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ac9e:	ea02 0b01 	andle.w	fp, r2, r1
 801aca2:	2200      	movs	r2, #0
 801aca4:	2300      	movs	r3, #0
 801aca6:	4650      	mov	r0, sl
 801aca8:	4659      	mov	r1, fp
 801acaa:	f7fe fb35 	bl	8019318 <__aeabi_dcmpeq>
 801acae:	2800      	cmp	r0, #0
 801acb0:	d1a2      	bne.n	801abf8 <_strtod_l+0x578>
 801acb2:	9b07      	ldr	r3, [sp, #28]
 801acb4:	9300      	str	r3, [sp, #0]
 801acb6:	9908      	ldr	r1, [sp, #32]
 801acb8:	462b      	mov	r3, r5
 801acba:	463a      	mov	r2, r7
 801acbc:	4620      	mov	r0, r4
 801acbe:	f001 fe39 	bl	801c934 <__s2b>
 801acc2:	9007      	str	r0, [sp, #28]
 801acc4:	2800      	cmp	r0, #0
 801acc6:	f43f af1f 	beq.w	801ab08 <_strtod_l+0x488>
 801acca:	9b05      	ldr	r3, [sp, #20]
 801accc:	1b9e      	subs	r6, r3, r6
 801acce:	9b06      	ldr	r3, [sp, #24]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	bfb4      	ite	lt
 801acd4:	4633      	movlt	r3, r6
 801acd6:	2300      	movge	r3, #0
 801acd8:	930c      	str	r3, [sp, #48]	; 0x30
 801acda:	9b06      	ldr	r3, [sp, #24]
 801acdc:	2500      	movs	r5, #0
 801acde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ace2:	9312      	str	r3, [sp, #72]	; 0x48
 801ace4:	462e      	mov	r6, r5
 801ace6:	9b07      	ldr	r3, [sp, #28]
 801ace8:	4620      	mov	r0, r4
 801acea:	6859      	ldr	r1, [r3, #4]
 801acec:	f001 fd7a 	bl	801c7e4 <_Balloc>
 801acf0:	9005      	str	r0, [sp, #20]
 801acf2:	2800      	cmp	r0, #0
 801acf4:	f43f af0c 	beq.w	801ab10 <_strtod_l+0x490>
 801acf8:	9b07      	ldr	r3, [sp, #28]
 801acfa:	691a      	ldr	r2, [r3, #16]
 801acfc:	3202      	adds	r2, #2
 801acfe:	f103 010c 	add.w	r1, r3, #12
 801ad02:	0092      	lsls	r2, r2, #2
 801ad04:	300c      	adds	r0, #12
 801ad06:	f001 fd5f 	bl	801c7c8 <memcpy>
 801ad0a:	ec4b ab10 	vmov	d0, sl, fp
 801ad0e:	aa1a      	add	r2, sp, #104	; 0x68
 801ad10:	a919      	add	r1, sp, #100	; 0x64
 801ad12:	4620      	mov	r0, r4
 801ad14:	f002 f954 	bl	801cfc0 <__d2b>
 801ad18:	ec4b ab18 	vmov	d8, sl, fp
 801ad1c:	9018      	str	r0, [sp, #96]	; 0x60
 801ad1e:	2800      	cmp	r0, #0
 801ad20:	f43f aef6 	beq.w	801ab10 <_strtod_l+0x490>
 801ad24:	2101      	movs	r1, #1
 801ad26:	4620      	mov	r0, r4
 801ad28:	f001 fe9e 	bl	801ca68 <__i2b>
 801ad2c:	4606      	mov	r6, r0
 801ad2e:	2800      	cmp	r0, #0
 801ad30:	f43f aeee 	beq.w	801ab10 <_strtod_l+0x490>
 801ad34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad36:	9904      	ldr	r1, [sp, #16]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	bfab      	itete	ge
 801ad3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801ad3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ad40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ad42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801ad46:	bfac      	ite	ge
 801ad48:	eb03 0902 	addge.w	r9, r3, r2
 801ad4c:	1ad7      	sublt	r7, r2, r3
 801ad4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ad50:	eba3 0801 	sub.w	r8, r3, r1
 801ad54:	4490      	add	r8, r2
 801ad56:	4ba1      	ldr	r3, [pc, #644]	; (801afdc <_strtod_l+0x95c>)
 801ad58:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad5c:	4598      	cmp	r8, r3
 801ad5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ad62:	f280 80c7 	bge.w	801aef4 <_strtod_l+0x874>
 801ad66:	eba3 0308 	sub.w	r3, r3, r8
 801ad6a:	2b1f      	cmp	r3, #31
 801ad6c:	eba2 0203 	sub.w	r2, r2, r3
 801ad70:	f04f 0101 	mov.w	r1, #1
 801ad74:	f300 80b1 	bgt.w	801aeda <_strtod_l+0x85a>
 801ad78:	fa01 f303 	lsl.w	r3, r1, r3
 801ad7c:	930d      	str	r3, [sp, #52]	; 0x34
 801ad7e:	2300      	movs	r3, #0
 801ad80:	9308      	str	r3, [sp, #32]
 801ad82:	eb09 0802 	add.w	r8, r9, r2
 801ad86:	9b04      	ldr	r3, [sp, #16]
 801ad88:	45c1      	cmp	r9, r8
 801ad8a:	4417      	add	r7, r2
 801ad8c:	441f      	add	r7, r3
 801ad8e:	464b      	mov	r3, r9
 801ad90:	bfa8      	it	ge
 801ad92:	4643      	movge	r3, r8
 801ad94:	42bb      	cmp	r3, r7
 801ad96:	bfa8      	it	ge
 801ad98:	463b      	movge	r3, r7
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	bfc2      	ittt	gt
 801ad9e:	eba8 0803 	subgt.w	r8, r8, r3
 801ada2:	1aff      	subgt	r7, r7, r3
 801ada4:	eba9 0903 	subgt.w	r9, r9, r3
 801ada8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801adaa:	2b00      	cmp	r3, #0
 801adac:	dd17      	ble.n	801adde <_strtod_l+0x75e>
 801adae:	4631      	mov	r1, r6
 801adb0:	461a      	mov	r2, r3
 801adb2:	4620      	mov	r0, r4
 801adb4:	f001 ff18 	bl	801cbe8 <__pow5mult>
 801adb8:	4606      	mov	r6, r0
 801adba:	2800      	cmp	r0, #0
 801adbc:	f43f aea8 	beq.w	801ab10 <_strtod_l+0x490>
 801adc0:	4601      	mov	r1, r0
 801adc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801adc4:	4620      	mov	r0, r4
 801adc6:	f001 fe65 	bl	801ca94 <__multiply>
 801adca:	900b      	str	r0, [sp, #44]	; 0x2c
 801adcc:	2800      	cmp	r0, #0
 801adce:	f43f ae9f 	beq.w	801ab10 <_strtod_l+0x490>
 801add2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801add4:	4620      	mov	r0, r4
 801add6:	f001 fd45 	bl	801c864 <_Bfree>
 801adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801addc:	9318      	str	r3, [sp, #96]	; 0x60
 801adde:	f1b8 0f00 	cmp.w	r8, #0
 801ade2:	f300 808c 	bgt.w	801aefe <_strtod_l+0x87e>
 801ade6:	9b06      	ldr	r3, [sp, #24]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	dd08      	ble.n	801adfe <_strtod_l+0x77e>
 801adec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801adee:	9905      	ldr	r1, [sp, #20]
 801adf0:	4620      	mov	r0, r4
 801adf2:	f001 fef9 	bl	801cbe8 <__pow5mult>
 801adf6:	9005      	str	r0, [sp, #20]
 801adf8:	2800      	cmp	r0, #0
 801adfa:	f43f ae89 	beq.w	801ab10 <_strtod_l+0x490>
 801adfe:	2f00      	cmp	r7, #0
 801ae00:	dd08      	ble.n	801ae14 <_strtod_l+0x794>
 801ae02:	9905      	ldr	r1, [sp, #20]
 801ae04:	463a      	mov	r2, r7
 801ae06:	4620      	mov	r0, r4
 801ae08:	f001 ff48 	bl	801cc9c <__lshift>
 801ae0c:	9005      	str	r0, [sp, #20]
 801ae0e:	2800      	cmp	r0, #0
 801ae10:	f43f ae7e 	beq.w	801ab10 <_strtod_l+0x490>
 801ae14:	f1b9 0f00 	cmp.w	r9, #0
 801ae18:	dd08      	ble.n	801ae2c <_strtod_l+0x7ac>
 801ae1a:	4631      	mov	r1, r6
 801ae1c:	464a      	mov	r2, r9
 801ae1e:	4620      	mov	r0, r4
 801ae20:	f001 ff3c 	bl	801cc9c <__lshift>
 801ae24:	4606      	mov	r6, r0
 801ae26:	2800      	cmp	r0, #0
 801ae28:	f43f ae72 	beq.w	801ab10 <_strtod_l+0x490>
 801ae2c:	9a05      	ldr	r2, [sp, #20]
 801ae2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ae30:	4620      	mov	r0, r4
 801ae32:	f001 ffbf 	bl	801cdb4 <__mdiff>
 801ae36:	4605      	mov	r5, r0
 801ae38:	2800      	cmp	r0, #0
 801ae3a:	f43f ae69 	beq.w	801ab10 <_strtod_l+0x490>
 801ae3e:	68c3      	ldr	r3, [r0, #12]
 801ae40:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae42:	2300      	movs	r3, #0
 801ae44:	60c3      	str	r3, [r0, #12]
 801ae46:	4631      	mov	r1, r6
 801ae48:	f001 ff98 	bl	801cd7c <__mcmp>
 801ae4c:	2800      	cmp	r0, #0
 801ae4e:	da60      	bge.n	801af12 <_strtod_l+0x892>
 801ae50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae52:	ea53 030a 	orrs.w	r3, r3, sl
 801ae56:	f040 8082 	bne.w	801af5e <_strtod_l+0x8de>
 801ae5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d17d      	bne.n	801af5e <_strtod_l+0x8de>
 801ae62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae66:	0d1b      	lsrs	r3, r3, #20
 801ae68:	051b      	lsls	r3, r3, #20
 801ae6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ae6e:	d976      	bls.n	801af5e <_strtod_l+0x8de>
 801ae70:	696b      	ldr	r3, [r5, #20]
 801ae72:	b913      	cbnz	r3, 801ae7a <_strtod_l+0x7fa>
 801ae74:	692b      	ldr	r3, [r5, #16]
 801ae76:	2b01      	cmp	r3, #1
 801ae78:	dd71      	ble.n	801af5e <_strtod_l+0x8de>
 801ae7a:	4629      	mov	r1, r5
 801ae7c:	2201      	movs	r2, #1
 801ae7e:	4620      	mov	r0, r4
 801ae80:	f001 ff0c 	bl	801cc9c <__lshift>
 801ae84:	4631      	mov	r1, r6
 801ae86:	4605      	mov	r5, r0
 801ae88:	f001 ff78 	bl	801cd7c <__mcmp>
 801ae8c:	2800      	cmp	r0, #0
 801ae8e:	dd66      	ble.n	801af5e <_strtod_l+0x8de>
 801ae90:	9904      	ldr	r1, [sp, #16]
 801ae92:	4a53      	ldr	r2, [pc, #332]	; (801afe0 <_strtod_l+0x960>)
 801ae94:	465b      	mov	r3, fp
 801ae96:	2900      	cmp	r1, #0
 801ae98:	f000 8081 	beq.w	801af9e <_strtod_l+0x91e>
 801ae9c:	ea02 010b 	and.w	r1, r2, fp
 801aea0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801aea4:	dc7b      	bgt.n	801af9e <_strtod_l+0x91e>
 801aea6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801aeaa:	f77f aea9 	ble.w	801ac00 <_strtod_l+0x580>
 801aeae:	4b4d      	ldr	r3, [pc, #308]	; (801afe4 <_strtod_l+0x964>)
 801aeb0:	4650      	mov	r0, sl
 801aeb2:	4659      	mov	r1, fp
 801aeb4:	2200      	movs	r2, #0
 801aeb6:	f7fd ffc7 	bl	8018e48 <__aeabi_dmul>
 801aeba:	460b      	mov	r3, r1
 801aebc:	4303      	orrs	r3, r0
 801aebe:	bf08      	it	eq
 801aec0:	2322      	moveq	r3, #34	; 0x22
 801aec2:	4682      	mov	sl, r0
 801aec4:	468b      	mov	fp, r1
 801aec6:	bf08      	it	eq
 801aec8:	6023      	streq	r3, [r4, #0]
 801aeca:	e62b      	b.n	801ab24 <_strtod_l+0x4a4>
 801aecc:	f04f 32ff 	mov.w	r2, #4294967295
 801aed0:	fa02 f303 	lsl.w	r3, r2, r3
 801aed4:	ea03 0a0a 	and.w	sl, r3, sl
 801aed8:	e6e3      	b.n	801aca2 <_strtod_l+0x622>
 801aeda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801aede:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801aee2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801aee6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801aeea:	fa01 f308 	lsl.w	r3, r1, r8
 801aeee:	9308      	str	r3, [sp, #32]
 801aef0:	910d      	str	r1, [sp, #52]	; 0x34
 801aef2:	e746      	b.n	801ad82 <_strtod_l+0x702>
 801aef4:	2300      	movs	r3, #0
 801aef6:	9308      	str	r3, [sp, #32]
 801aef8:	2301      	movs	r3, #1
 801aefa:	930d      	str	r3, [sp, #52]	; 0x34
 801aefc:	e741      	b.n	801ad82 <_strtod_l+0x702>
 801aefe:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af00:	4642      	mov	r2, r8
 801af02:	4620      	mov	r0, r4
 801af04:	f001 feca 	bl	801cc9c <__lshift>
 801af08:	9018      	str	r0, [sp, #96]	; 0x60
 801af0a:	2800      	cmp	r0, #0
 801af0c:	f47f af6b 	bne.w	801ade6 <_strtod_l+0x766>
 801af10:	e5fe      	b.n	801ab10 <_strtod_l+0x490>
 801af12:	465f      	mov	r7, fp
 801af14:	d16e      	bne.n	801aff4 <_strtod_l+0x974>
 801af16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af1c:	b342      	cbz	r2, 801af70 <_strtod_l+0x8f0>
 801af1e:	4a32      	ldr	r2, [pc, #200]	; (801afe8 <_strtod_l+0x968>)
 801af20:	4293      	cmp	r3, r2
 801af22:	d128      	bne.n	801af76 <_strtod_l+0x8f6>
 801af24:	9b04      	ldr	r3, [sp, #16]
 801af26:	4651      	mov	r1, sl
 801af28:	b1eb      	cbz	r3, 801af66 <_strtod_l+0x8e6>
 801af2a:	4b2d      	ldr	r3, [pc, #180]	; (801afe0 <_strtod_l+0x960>)
 801af2c:	403b      	ands	r3, r7
 801af2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801af32:	f04f 32ff 	mov.w	r2, #4294967295
 801af36:	d819      	bhi.n	801af6c <_strtod_l+0x8ec>
 801af38:	0d1b      	lsrs	r3, r3, #20
 801af3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801af3e:	fa02 f303 	lsl.w	r3, r2, r3
 801af42:	4299      	cmp	r1, r3
 801af44:	d117      	bne.n	801af76 <_strtod_l+0x8f6>
 801af46:	4b29      	ldr	r3, [pc, #164]	; (801afec <_strtod_l+0x96c>)
 801af48:	429f      	cmp	r7, r3
 801af4a:	d102      	bne.n	801af52 <_strtod_l+0x8d2>
 801af4c:	3101      	adds	r1, #1
 801af4e:	f43f addf 	beq.w	801ab10 <_strtod_l+0x490>
 801af52:	4b23      	ldr	r3, [pc, #140]	; (801afe0 <_strtod_l+0x960>)
 801af54:	403b      	ands	r3, r7
 801af56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801af5a:	f04f 0a00 	mov.w	sl, #0
 801af5e:	9b04      	ldr	r3, [sp, #16]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d1a4      	bne.n	801aeae <_strtod_l+0x82e>
 801af64:	e5de      	b.n	801ab24 <_strtod_l+0x4a4>
 801af66:	f04f 33ff 	mov.w	r3, #4294967295
 801af6a:	e7ea      	b.n	801af42 <_strtod_l+0x8c2>
 801af6c:	4613      	mov	r3, r2
 801af6e:	e7e8      	b.n	801af42 <_strtod_l+0x8c2>
 801af70:	ea53 030a 	orrs.w	r3, r3, sl
 801af74:	d08c      	beq.n	801ae90 <_strtod_l+0x810>
 801af76:	9b08      	ldr	r3, [sp, #32]
 801af78:	b1db      	cbz	r3, 801afb2 <_strtod_l+0x932>
 801af7a:	423b      	tst	r3, r7
 801af7c:	d0ef      	beq.n	801af5e <_strtod_l+0x8de>
 801af7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af80:	9a04      	ldr	r2, [sp, #16]
 801af82:	4650      	mov	r0, sl
 801af84:	4659      	mov	r1, fp
 801af86:	b1c3      	cbz	r3, 801afba <_strtod_l+0x93a>
 801af88:	f7ff fb5e 	bl	801a648 <sulp>
 801af8c:	4602      	mov	r2, r0
 801af8e:	460b      	mov	r3, r1
 801af90:	ec51 0b18 	vmov	r0, r1, d8
 801af94:	f7fd fda2 	bl	8018adc <__adddf3>
 801af98:	4682      	mov	sl, r0
 801af9a:	468b      	mov	fp, r1
 801af9c:	e7df      	b.n	801af5e <_strtod_l+0x8de>
 801af9e:	4013      	ands	r3, r2
 801afa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801afa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801afa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801afac:	f04f 3aff 	mov.w	sl, #4294967295
 801afb0:	e7d5      	b.n	801af5e <_strtod_l+0x8de>
 801afb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afb4:	ea13 0f0a 	tst.w	r3, sl
 801afb8:	e7e0      	b.n	801af7c <_strtod_l+0x8fc>
 801afba:	f7ff fb45 	bl	801a648 <sulp>
 801afbe:	4602      	mov	r2, r0
 801afc0:	460b      	mov	r3, r1
 801afc2:	ec51 0b18 	vmov	r0, r1, d8
 801afc6:	f7fd fd87 	bl	8018ad8 <__aeabi_dsub>
 801afca:	2200      	movs	r2, #0
 801afcc:	2300      	movs	r3, #0
 801afce:	4682      	mov	sl, r0
 801afd0:	468b      	mov	fp, r1
 801afd2:	f7fe f9a1 	bl	8019318 <__aeabi_dcmpeq>
 801afd6:	2800      	cmp	r0, #0
 801afd8:	d0c1      	beq.n	801af5e <_strtod_l+0x8de>
 801afda:	e611      	b.n	801ac00 <_strtod_l+0x580>
 801afdc:	fffffc02 	.word	0xfffffc02
 801afe0:	7ff00000 	.word	0x7ff00000
 801afe4:	39500000 	.word	0x39500000
 801afe8:	000fffff 	.word	0x000fffff
 801afec:	7fefffff 	.word	0x7fefffff
 801aff0:	08052268 	.word	0x08052268
 801aff4:	4631      	mov	r1, r6
 801aff6:	4628      	mov	r0, r5
 801aff8:	f002 f83e 	bl	801d078 <__ratio>
 801affc:	ec59 8b10 	vmov	r8, r9, d0
 801b000:	ee10 0a10 	vmov	r0, s0
 801b004:	2200      	movs	r2, #0
 801b006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b00a:	4649      	mov	r1, r9
 801b00c:	f7fe f998 	bl	8019340 <__aeabi_dcmple>
 801b010:	2800      	cmp	r0, #0
 801b012:	d07a      	beq.n	801b10a <_strtod_l+0xa8a>
 801b014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b016:	2b00      	cmp	r3, #0
 801b018:	d04a      	beq.n	801b0b0 <_strtod_l+0xa30>
 801b01a:	4b95      	ldr	r3, [pc, #596]	; (801b270 <_strtod_l+0xbf0>)
 801b01c:	2200      	movs	r2, #0
 801b01e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b022:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b270 <_strtod_l+0xbf0>
 801b026:	f04f 0800 	mov.w	r8, #0
 801b02a:	4b92      	ldr	r3, [pc, #584]	; (801b274 <_strtod_l+0xbf4>)
 801b02c:	403b      	ands	r3, r7
 801b02e:	930d      	str	r3, [sp, #52]	; 0x34
 801b030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b032:	4b91      	ldr	r3, [pc, #580]	; (801b278 <_strtod_l+0xbf8>)
 801b034:	429a      	cmp	r2, r3
 801b036:	f040 80b0 	bne.w	801b19a <_strtod_l+0xb1a>
 801b03a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b03e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b042:	ec4b ab10 	vmov	d0, sl, fp
 801b046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b04a:	f001 ff3d 	bl	801cec8 <__ulp>
 801b04e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b052:	ec53 2b10 	vmov	r2, r3, d0
 801b056:	f7fd fef7 	bl	8018e48 <__aeabi_dmul>
 801b05a:	4652      	mov	r2, sl
 801b05c:	465b      	mov	r3, fp
 801b05e:	f7fd fd3d 	bl	8018adc <__adddf3>
 801b062:	460b      	mov	r3, r1
 801b064:	4983      	ldr	r1, [pc, #524]	; (801b274 <_strtod_l+0xbf4>)
 801b066:	4a85      	ldr	r2, [pc, #532]	; (801b27c <_strtod_l+0xbfc>)
 801b068:	4019      	ands	r1, r3
 801b06a:	4291      	cmp	r1, r2
 801b06c:	4682      	mov	sl, r0
 801b06e:	d960      	bls.n	801b132 <_strtod_l+0xab2>
 801b070:	ee18 3a90 	vmov	r3, s17
 801b074:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b078:	4293      	cmp	r3, r2
 801b07a:	d104      	bne.n	801b086 <_strtod_l+0xa06>
 801b07c:	ee18 3a10 	vmov	r3, s16
 801b080:	3301      	adds	r3, #1
 801b082:	f43f ad45 	beq.w	801ab10 <_strtod_l+0x490>
 801b086:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b288 <_strtod_l+0xc08>
 801b08a:	f04f 3aff 	mov.w	sl, #4294967295
 801b08e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b090:	4620      	mov	r0, r4
 801b092:	f001 fbe7 	bl	801c864 <_Bfree>
 801b096:	9905      	ldr	r1, [sp, #20]
 801b098:	4620      	mov	r0, r4
 801b09a:	f001 fbe3 	bl	801c864 <_Bfree>
 801b09e:	4631      	mov	r1, r6
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	f001 fbdf 	bl	801c864 <_Bfree>
 801b0a6:	4629      	mov	r1, r5
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	f001 fbdb 	bl	801c864 <_Bfree>
 801b0ae:	e61a      	b.n	801ace6 <_strtod_l+0x666>
 801b0b0:	f1ba 0f00 	cmp.w	sl, #0
 801b0b4:	d11b      	bne.n	801b0ee <_strtod_l+0xa6e>
 801b0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b0ba:	b9f3      	cbnz	r3, 801b0fa <_strtod_l+0xa7a>
 801b0bc:	4b6c      	ldr	r3, [pc, #432]	; (801b270 <_strtod_l+0xbf0>)
 801b0be:	2200      	movs	r2, #0
 801b0c0:	4640      	mov	r0, r8
 801b0c2:	4649      	mov	r1, r9
 801b0c4:	f7fe f932 	bl	801932c <__aeabi_dcmplt>
 801b0c8:	b9d0      	cbnz	r0, 801b100 <_strtod_l+0xa80>
 801b0ca:	4640      	mov	r0, r8
 801b0cc:	4649      	mov	r1, r9
 801b0ce:	4b6c      	ldr	r3, [pc, #432]	; (801b280 <_strtod_l+0xc00>)
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	f7fd feb9 	bl	8018e48 <__aeabi_dmul>
 801b0d6:	4680      	mov	r8, r0
 801b0d8:	4689      	mov	r9, r1
 801b0da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b0de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b0e2:	9315      	str	r3, [sp, #84]	; 0x54
 801b0e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b0e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0ec:	e79d      	b.n	801b02a <_strtod_l+0x9aa>
 801b0ee:	f1ba 0f01 	cmp.w	sl, #1
 801b0f2:	d102      	bne.n	801b0fa <_strtod_l+0xa7a>
 801b0f4:	2f00      	cmp	r7, #0
 801b0f6:	f43f ad83 	beq.w	801ac00 <_strtod_l+0x580>
 801b0fa:	4b62      	ldr	r3, [pc, #392]	; (801b284 <_strtod_l+0xc04>)
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	e78e      	b.n	801b01e <_strtod_l+0x99e>
 801b100:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b280 <_strtod_l+0xc00>
 801b104:	f04f 0800 	mov.w	r8, #0
 801b108:	e7e7      	b.n	801b0da <_strtod_l+0xa5a>
 801b10a:	4b5d      	ldr	r3, [pc, #372]	; (801b280 <_strtod_l+0xc00>)
 801b10c:	4640      	mov	r0, r8
 801b10e:	4649      	mov	r1, r9
 801b110:	2200      	movs	r2, #0
 801b112:	f7fd fe99 	bl	8018e48 <__aeabi_dmul>
 801b116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b118:	4680      	mov	r8, r0
 801b11a:	4689      	mov	r9, r1
 801b11c:	b933      	cbnz	r3, 801b12c <_strtod_l+0xaac>
 801b11e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b122:	900e      	str	r0, [sp, #56]	; 0x38
 801b124:	930f      	str	r3, [sp, #60]	; 0x3c
 801b126:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b12a:	e7dd      	b.n	801b0e8 <_strtod_l+0xa68>
 801b12c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b130:	e7f9      	b.n	801b126 <_strtod_l+0xaa6>
 801b132:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b136:	9b04      	ldr	r3, [sp, #16]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d1a8      	bne.n	801b08e <_strtod_l+0xa0e>
 801b13c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b142:	0d1b      	lsrs	r3, r3, #20
 801b144:	051b      	lsls	r3, r3, #20
 801b146:	429a      	cmp	r2, r3
 801b148:	d1a1      	bne.n	801b08e <_strtod_l+0xa0e>
 801b14a:	4640      	mov	r0, r8
 801b14c:	4649      	mov	r1, r9
 801b14e:	f7fe f9c3 	bl	80194d8 <__aeabi_d2lz>
 801b152:	f7fd fe4b 	bl	8018dec <__aeabi_l2d>
 801b156:	4602      	mov	r2, r0
 801b158:	460b      	mov	r3, r1
 801b15a:	4640      	mov	r0, r8
 801b15c:	4649      	mov	r1, r9
 801b15e:	f7fd fcbb 	bl	8018ad8 <__aeabi_dsub>
 801b162:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b168:	ea43 030a 	orr.w	r3, r3, sl
 801b16c:	4313      	orrs	r3, r2
 801b16e:	4680      	mov	r8, r0
 801b170:	4689      	mov	r9, r1
 801b172:	d055      	beq.n	801b220 <_strtod_l+0xba0>
 801b174:	a336      	add	r3, pc, #216	; (adr r3, 801b250 <_strtod_l+0xbd0>)
 801b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b17a:	f7fe f8d7 	bl	801932c <__aeabi_dcmplt>
 801b17e:	2800      	cmp	r0, #0
 801b180:	f47f acd0 	bne.w	801ab24 <_strtod_l+0x4a4>
 801b184:	a334      	add	r3, pc, #208	; (adr r3, 801b258 <_strtod_l+0xbd8>)
 801b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b18a:	4640      	mov	r0, r8
 801b18c:	4649      	mov	r1, r9
 801b18e:	f7fe f8eb 	bl	8019368 <__aeabi_dcmpgt>
 801b192:	2800      	cmp	r0, #0
 801b194:	f43f af7b 	beq.w	801b08e <_strtod_l+0xa0e>
 801b198:	e4c4      	b.n	801ab24 <_strtod_l+0x4a4>
 801b19a:	9b04      	ldr	r3, [sp, #16]
 801b19c:	b333      	cbz	r3, 801b1ec <_strtod_l+0xb6c>
 801b19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b1a4:	d822      	bhi.n	801b1ec <_strtod_l+0xb6c>
 801b1a6:	a32e      	add	r3, pc, #184	; (adr r3, 801b260 <_strtod_l+0xbe0>)
 801b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ac:	4640      	mov	r0, r8
 801b1ae:	4649      	mov	r1, r9
 801b1b0:	f7fe f8c6 	bl	8019340 <__aeabi_dcmple>
 801b1b4:	b1a0      	cbz	r0, 801b1e0 <_strtod_l+0xb60>
 801b1b6:	4649      	mov	r1, r9
 801b1b8:	4640      	mov	r0, r8
 801b1ba:	f7fe f91d 	bl	80193f8 <__aeabi_d2uiz>
 801b1be:	2801      	cmp	r0, #1
 801b1c0:	bf38      	it	cc
 801b1c2:	2001      	movcc	r0, #1
 801b1c4:	f7fd fdc6 	bl	8018d54 <__aeabi_ui2d>
 801b1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1ca:	4680      	mov	r8, r0
 801b1cc:	4689      	mov	r9, r1
 801b1ce:	bb23      	cbnz	r3, 801b21a <_strtod_l+0xb9a>
 801b1d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b1d4:	9010      	str	r0, [sp, #64]	; 0x40
 801b1d6:	9311      	str	r3, [sp, #68]	; 0x44
 801b1d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b1dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b1e8:	1a9b      	subs	r3, r3, r2
 801b1ea:	9309      	str	r3, [sp, #36]	; 0x24
 801b1ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b1f0:	eeb0 0a48 	vmov.f32	s0, s16
 801b1f4:	eef0 0a68 	vmov.f32	s1, s17
 801b1f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b1fc:	f001 fe64 	bl	801cec8 <__ulp>
 801b200:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b204:	ec53 2b10 	vmov	r2, r3, d0
 801b208:	f7fd fe1e 	bl	8018e48 <__aeabi_dmul>
 801b20c:	ec53 2b18 	vmov	r2, r3, d8
 801b210:	f7fd fc64 	bl	8018adc <__adddf3>
 801b214:	4682      	mov	sl, r0
 801b216:	468b      	mov	fp, r1
 801b218:	e78d      	b.n	801b136 <_strtod_l+0xab6>
 801b21a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b21e:	e7db      	b.n	801b1d8 <_strtod_l+0xb58>
 801b220:	a311      	add	r3, pc, #68	; (adr r3, 801b268 <_strtod_l+0xbe8>)
 801b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b226:	f7fe f881 	bl	801932c <__aeabi_dcmplt>
 801b22a:	e7b2      	b.n	801b192 <_strtod_l+0xb12>
 801b22c:	2300      	movs	r3, #0
 801b22e:	930a      	str	r3, [sp, #40]	; 0x28
 801b230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b232:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b234:	6013      	str	r3, [r2, #0]
 801b236:	f7ff ba6b 	b.w	801a710 <_strtod_l+0x90>
 801b23a:	2a65      	cmp	r2, #101	; 0x65
 801b23c:	f43f ab5f 	beq.w	801a8fe <_strtod_l+0x27e>
 801b240:	2a45      	cmp	r2, #69	; 0x45
 801b242:	f43f ab5c 	beq.w	801a8fe <_strtod_l+0x27e>
 801b246:	2301      	movs	r3, #1
 801b248:	f7ff bb94 	b.w	801a974 <_strtod_l+0x2f4>
 801b24c:	f3af 8000 	nop.w
 801b250:	94a03595 	.word	0x94a03595
 801b254:	3fdfffff 	.word	0x3fdfffff
 801b258:	35afe535 	.word	0x35afe535
 801b25c:	3fe00000 	.word	0x3fe00000
 801b260:	ffc00000 	.word	0xffc00000
 801b264:	41dfffff 	.word	0x41dfffff
 801b268:	94a03595 	.word	0x94a03595
 801b26c:	3fcfffff 	.word	0x3fcfffff
 801b270:	3ff00000 	.word	0x3ff00000
 801b274:	7ff00000 	.word	0x7ff00000
 801b278:	7fe00000 	.word	0x7fe00000
 801b27c:	7c9fffff 	.word	0x7c9fffff
 801b280:	3fe00000 	.word	0x3fe00000
 801b284:	bff00000 	.word	0xbff00000
 801b288:	7fefffff 	.word	0x7fefffff

0801b28c <_strtod_r>:
 801b28c:	4b01      	ldr	r3, [pc, #4]	; (801b294 <_strtod_r+0x8>)
 801b28e:	f7ff b9f7 	b.w	801a680 <_strtod_l>
 801b292:	bf00      	nop
 801b294:	200000cc 	.word	0x200000cc

0801b298 <_strtol_l.constprop.0>:
 801b298:	2b01      	cmp	r3, #1
 801b29a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b29e:	d001      	beq.n	801b2a4 <_strtol_l.constprop.0+0xc>
 801b2a0:	2b24      	cmp	r3, #36	; 0x24
 801b2a2:	d906      	bls.n	801b2b2 <_strtol_l.constprop.0+0x1a>
 801b2a4:	f7fe fafe 	bl	80198a4 <__errno>
 801b2a8:	2316      	movs	r3, #22
 801b2aa:	6003      	str	r3, [r0, #0]
 801b2ac:	2000      	movs	r0, #0
 801b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b398 <_strtol_l.constprop.0+0x100>
 801b2b6:	460d      	mov	r5, r1
 801b2b8:	462e      	mov	r6, r5
 801b2ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2be:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b2c2:	f017 0708 	ands.w	r7, r7, #8
 801b2c6:	d1f7      	bne.n	801b2b8 <_strtol_l.constprop.0+0x20>
 801b2c8:	2c2d      	cmp	r4, #45	; 0x2d
 801b2ca:	d132      	bne.n	801b332 <_strtol_l.constprop.0+0x9a>
 801b2cc:	782c      	ldrb	r4, [r5, #0]
 801b2ce:	2701      	movs	r7, #1
 801b2d0:	1cb5      	adds	r5, r6, #2
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d05b      	beq.n	801b38e <_strtol_l.constprop.0+0xf6>
 801b2d6:	2b10      	cmp	r3, #16
 801b2d8:	d109      	bne.n	801b2ee <_strtol_l.constprop.0+0x56>
 801b2da:	2c30      	cmp	r4, #48	; 0x30
 801b2dc:	d107      	bne.n	801b2ee <_strtol_l.constprop.0+0x56>
 801b2de:	782c      	ldrb	r4, [r5, #0]
 801b2e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b2e4:	2c58      	cmp	r4, #88	; 0x58
 801b2e6:	d14d      	bne.n	801b384 <_strtol_l.constprop.0+0xec>
 801b2e8:	786c      	ldrb	r4, [r5, #1]
 801b2ea:	2310      	movs	r3, #16
 801b2ec:	3502      	adds	r5, #2
 801b2ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b2f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b2f6:	f04f 0c00 	mov.w	ip, #0
 801b2fa:	fbb8 f9f3 	udiv	r9, r8, r3
 801b2fe:	4666      	mov	r6, ip
 801b300:	fb03 8a19 	mls	sl, r3, r9, r8
 801b304:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b308:	f1be 0f09 	cmp.w	lr, #9
 801b30c:	d816      	bhi.n	801b33c <_strtol_l.constprop.0+0xa4>
 801b30e:	4674      	mov	r4, lr
 801b310:	42a3      	cmp	r3, r4
 801b312:	dd24      	ble.n	801b35e <_strtol_l.constprop.0+0xc6>
 801b314:	f1bc 0f00 	cmp.w	ip, #0
 801b318:	db1e      	blt.n	801b358 <_strtol_l.constprop.0+0xc0>
 801b31a:	45b1      	cmp	r9, r6
 801b31c:	d31c      	bcc.n	801b358 <_strtol_l.constprop.0+0xc0>
 801b31e:	d101      	bne.n	801b324 <_strtol_l.constprop.0+0x8c>
 801b320:	45a2      	cmp	sl, r4
 801b322:	db19      	blt.n	801b358 <_strtol_l.constprop.0+0xc0>
 801b324:	fb06 4603 	mla	r6, r6, r3, r4
 801b328:	f04f 0c01 	mov.w	ip, #1
 801b32c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b330:	e7e8      	b.n	801b304 <_strtol_l.constprop.0+0x6c>
 801b332:	2c2b      	cmp	r4, #43	; 0x2b
 801b334:	bf04      	itt	eq
 801b336:	782c      	ldrbeq	r4, [r5, #0]
 801b338:	1cb5      	addeq	r5, r6, #2
 801b33a:	e7ca      	b.n	801b2d2 <_strtol_l.constprop.0+0x3a>
 801b33c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b340:	f1be 0f19 	cmp.w	lr, #25
 801b344:	d801      	bhi.n	801b34a <_strtol_l.constprop.0+0xb2>
 801b346:	3c37      	subs	r4, #55	; 0x37
 801b348:	e7e2      	b.n	801b310 <_strtol_l.constprop.0+0x78>
 801b34a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b34e:	f1be 0f19 	cmp.w	lr, #25
 801b352:	d804      	bhi.n	801b35e <_strtol_l.constprop.0+0xc6>
 801b354:	3c57      	subs	r4, #87	; 0x57
 801b356:	e7db      	b.n	801b310 <_strtol_l.constprop.0+0x78>
 801b358:	f04f 3cff 	mov.w	ip, #4294967295
 801b35c:	e7e6      	b.n	801b32c <_strtol_l.constprop.0+0x94>
 801b35e:	f1bc 0f00 	cmp.w	ip, #0
 801b362:	da05      	bge.n	801b370 <_strtol_l.constprop.0+0xd8>
 801b364:	2322      	movs	r3, #34	; 0x22
 801b366:	6003      	str	r3, [r0, #0]
 801b368:	4646      	mov	r6, r8
 801b36a:	b942      	cbnz	r2, 801b37e <_strtol_l.constprop.0+0xe6>
 801b36c:	4630      	mov	r0, r6
 801b36e:	e79e      	b.n	801b2ae <_strtol_l.constprop.0+0x16>
 801b370:	b107      	cbz	r7, 801b374 <_strtol_l.constprop.0+0xdc>
 801b372:	4276      	negs	r6, r6
 801b374:	2a00      	cmp	r2, #0
 801b376:	d0f9      	beq.n	801b36c <_strtol_l.constprop.0+0xd4>
 801b378:	f1bc 0f00 	cmp.w	ip, #0
 801b37c:	d000      	beq.n	801b380 <_strtol_l.constprop.0+0xe8>
 801b37e:	1e69      	subs	r1, r5, #1
 801b380:	6011      	str	r1, [r2, #0]
 801b382:	e7f3      	b.n	801b36c <_strtol_l.constprop.0+0xd4>
 801b384:	2430      	movs	r4, #48	; 0x30
 801b386:	2b00      	cmp	r3, #0
 801b388:	d1b1      	bne.n	801b2ee <_strtol_l.constprop.0+0x56>
 801b38a:	2308      	movs	r3, #8
 801b38c:	e7af      	b.n	801b2ee <_strtol_l.constprop.0+0x56>
 801b38e:	2c30      	cmp	r4, #48	; 0x30
 801b390:	d0a5      	beq.n	801b2de <_strtol_l.constprop.0+0x46>
 801b392:	230a      	movs	r3, #10
 801b394:	e7ab      	b.n	801b2ee <_strtol_l.constprop.0+0x56>
 801b396:	bf00      	nop
 801b398:	08052291 	.word	0x08052291

0801b39c <_strtol_r>:
 801b39c:	f7ff bf7c 	b.w	801b298 <_strtol_l.constprop.0>

0801b3a0 <strtol>:
 801b3a0:	4613      	mov	r3, r2
 801b3a2:	460a      	mov	r2, r1
 801b3a4:	4601      	mov	r1, r0
 801b3a6:	4802      	ldr	r0, [pc, #8]	; (801b3b0 <strtol+0x10>)
 801b3a8:	6800      	ldr	r0, [r0, #0]
 801b3aa:	f7ff bf75 	b.w	801b298 <_strtol_l.constprop.0>
 801b3ae:	bf00      	nop
 801b3b0:	20000064 	.word	0x20000064

0801b3b4 <quorem>:
 801b3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b8:	6903      	ldr	r3, [r0, #16]
 801b3ba:	690c      	ldr	r4, [r1, #16]
 801b3bc:	42a3      	cmp	r3, r4
 801b3be:	4607      	mov	r7, r0
 801b3c0:	f2c0 8081 	blt.w	801b4c6 <quorem+0x112>
 801b3c4:	3c01      	subs	r4, #1
 801b3c6:	f101 0814 	add.w	r8, r1, #20
 801b3ca:	f100 0514 	add.w	r5, r0, #20
 801b3ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b3d2:	9301      	str	r3, [sp, #4]
 801b3d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b3d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b3dc:	3301      	adds	r3, #1
 801b3de:	429a      	cmp	r2, r3
 801b3e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b3e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b3e8:	fbb2 f6f3 	udiv	r6, r2, r3
 801b3ec:	d331      	bcc.n	801b452 <quorem+0x9e>
 801b3ee:	f04f 0e00 	mov.w	lr, #0
 801b3f2:	4640      	mov	r0, r8
 801b3f4:	46ac      	mov	ip, r5
 801b3f6:	46f2      	mov	sl, lr
 801b3f8:	f850 2b04 	ldr.w	r2, [r0], #4
 801b3fc:	b293      	uxth	r3, r2
 801b3fe:	fb06 e303 	mla	r3, r6, r3, lr
 801b402:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b406:	b29b      	uxth	r3, r3
 801b408:	ebaa 0303 	sub.w	r3, sl, r3
 801b40c:	f8dc a000 	ldr.w	sl, [ip]
 801b410:	0c12      	lsrs	r2, r2, #16
 801b412:	fa13 f38a 	uxtah	r3, r3, sl
 801b416:	fb06 e202 	mla	r2, r6, r2, lr
 801b41a:	9300      	str	r3, [sp, #0]
 801b41c:	9b00      	ldr	r3, [sp, #0]
 801b41e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b422:	b292      	uxth	r2, r2
 801b424:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b42c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b430:	4581      	cmp	r9, r0
 801b432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b436:	f84c 3b04 	str.w	r3, [ip], #4
 801b43a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b43e:	d2db      	bcs.n	801b3f8 <quorem+0x44>
 801b440:	f855 300b 	ldr.w	r3, [r5, fp]
 801b444:	b92b      	cbnz	r3, 801b452 <quorem+0x9e>
 801b446:	9b01      	ldr	r3, [sp, #4]
 801b448:	3b04      	subs	r3, #4
 801b44a:	429d      	cmp	r5, r3
 801b44c:	461a      	mov	r2, r3
 801b44e:	d32e      	bcc.n	801b4ae <quorem+0xfa>
 801b450:	613c      	str	r4, [r7, #16]
 801b452:	4638      	mov	r0, r7
 801b454:	f001 fc92 	bl	801cd7c <__mcmp>
 801b458:	2800      	cmp	r0, #0
 801b45a:	db24      	blt.n	801b4a6 <quorem+0xf2>
 801b45c:	3601      	adds	r6, #1
 801b45e:	4628      	mov	r0, r5
 801b460:	f04f 0c00 	mov.w	ip, #0
 801b464:	f858 2b04 	ldr.w	r2, [r8], #4
 801b468:	f8d0 e000 	ldr.w	lr, [r0]
 801b46c:	b293      	uxth	r3, r2
 801b46e:	ebac 0303 	sub.w	r3, ip, r3
 801b472:	0c12      	lsrs	r2, r2, #16
 801b474:	fa13 f38e 	uxtah	r3, r3, lr
 801b478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b47c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b480:	b29b      	uxth	r3, r3
 801b482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b486:	45c1      	cmp	r9, r8
 801b488:	f840 3b04 	str.w	r3, [r0], #4
 801b48c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b490:	d2e8      	bcs.n	801b464 <quorem+0xb0>
 801b492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b49a:	b922      	cbnz	r2, 801b4a6 <quorem+0xf2>
 801b49c:	3b04      	subs	r3, #4
 801b49e:	429d      	cmp	r5, r3
 801b4a0:	461a      	mov	r2, r3
 801b4a2:	d30a      	bcc.n	801b4ba <quorem+0x106>
 801b4a4:	613c      	str	r4, [r7, #16]
 801b4a6:	4630      	mov	r0, r6
 801b4a8:	b003      	add	sp, #12
 801b4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4ae:	6812      	ldr	r2, [r2, #0]
 801b4b0:	3b04      	subs	r3, #4
 801b4b2:	2a00      	cmp	r2, #0
 801b4b4:	d1cc      	bne.n	801b450 <quorem+0x9c>
 801b4b6:	3c01      	subs	r4, #1
 801b4b8:	e7c7      	b.n	801b44a <quorem+0x96>
 801b4ba:	6812      	ldr	r2, [r2, #0]
 801b4bc:	3b04      	subs	r3, #4
 801b4be:	2a00      	cmp	r2, #0
 801b4c0:	d1f0      	bne.n	801b4a4 <quorem+0xf0>
 801b4c2:	3c01      	subs	r4, #1
 801b4c4:	e7eb      	b.n	801b49e <quorem+0xea>
 801b4c6:	2000      	movs	r0, #0
 801b4c8:	e7ee      	b.n	801b4a8 <quorem+0xf4>
 801b4ca:	0000      	movs	r0, r0
 801b4cc:	0000      	movs	r0, r0
	...

0801b4d0 <_dtoa_r>:
 801b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d4:	ed2d 8b04 	vpush	{d8-d9}
 801b4d8:	ec57 6b10 	vmov	r6, r7, d0
 801b4dc:	b093      	sub	sp, #76	; 0x4c
 801b4de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b4e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b4e4:	9106      	str	r1, [sp, #24]
 801b4e6:	ee10 aa10 	vmov	sl, s0
 801b4ea:	4604      	mov	r4, r0
 801b4ec:	9209      	str	r2, [sp, #36]	; 0x24
 801b4ee:	930c      	str	r3, [sp, #48]	; 0x30
 801b4f0:	46bb      	mov	fp, r7
 801b4f2:	b975      	cbnz	r5, 801b512 <_dtoa_r+0x42>
 801b4f4:	2010      	movs	r0, #16
 801b4f6:	f001 f94d 	bl	801c794 <malloc>
 801b4fa:	4602      	mov	r2, r0
 801b4fc:	6260      	str	r0, [r4, #36]	; 0x24
 801b4fe:	b920      	cbnz	r0, 801b50a <_dtoa_r+0x3a>
 801b500:	4ba7      	ldr	r3, [pc, #668]	; (801b7a0 <_dtoa_r+0x2d0>)
 801b502:	21ea      	movs	r1, #234	; 0xea
 801b504:	48a7      	ldr	r0, [pc, #668]	; (801b7a4 <_dtoa_r+0x2d4>)
 801b506:	f002 f8bd 	bl	801d684 <__assert_func>
 801b50a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b50e:	6005      	str	r5, [r0, #0]
 801b510:	60c5      	str	r5, [r0, #12]
 801b512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b514:	6819      	ldr	r1, [r3, #0]
 801b516:	b151      	cbz	r1, 801b52e <_dtoa_r+0x5e>
 801b518:	685a      	ldr	r2, [r3, #4]
 801b51a:	604a      	str	r2, [r1, #4]
 801b51c:	2301      	movs	r3, #1
 801b51e:	4093      	lsls	r3, r2
 801b520:	608b      	str	r3, [r1, #8]
 801b522:	4620      	mov	r0, r4
 801b524:	f001 f99e 	bl	801c864 <_Bfree>
 801b528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b52a:	2200      	movs	r2, #0
 801b52c:	601a      	str	r2, [r3, #0]
 801b52e:	1e3b      	subs	r3, r7, #0
 801b530:	bfaa      	itet	ge
 801b532:	2300      	movge	r3, #0
 801b534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b538:	f8c8 3000 	strge.w	r3, [r8]
 801b53c:	4b9a      	ldr	r3, [pc, #616]	; (801b7a8 <_dtoa_r+0x2d8>)
 801b53e:	bfbc      	itt	lt
 801b540:	2201      	movlt	r2, #1
 801b542:	f8c8 2000 	strlt.w	r2, [r8]
 801b546:	ea33 030b 	bics.w	r3, r3, fp
 801b54a:	d11b      	bne.n	801b584 <_dtoa_r+0xb4>
 801b54c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b54e:	f242 730f 	movw	r3, #9999	; 0x270f
 801b552:	6013      	str	r3, [r2, #0]
 801b554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b558:	4333      	orrs	r3, r6
 801b55a:	f000 8592 	beq.w	801c082 <_dtoa_r+0xbb2>
 801b55e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b560:	b963      	cbnz	r3, 801b57c <_dtoa_r+0xac>
 801b562:	4b92      	ldr	r3, [pc, #584]	; (801b7ac <_dtoa_r+0x2dc>)
 801b564:	e022      	b.n	801b5ac <_dtoa_r+0xdc>
 801b566:	4b92      	ldr	r3, [pc, #584]	; (801b7b0 <_dtoa_r+0x2e0>)
 801b568:	9301      	str	r3, [sp, #4]
 801b56a:	3308      	adds	r3, #8
 801b56c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b56e:	6013      	str	r3, [r2, #0]
 801b570:	9801      	ldr	r0, [sp, #4]
 801b572:	b013      	add	sp, #76	; 0x4c
 801b574:	ecbd 8b04 	vpop	{d8-d9}
 801b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b57c:	4b8b      	ldr	r3, [pc, #556]	; (801b7ac <_dtoa_r+0x2dc>)
 801b57e:	9301      	str	r3, [sp, #4]
 801b580:	3303      	adds	r3, #3
 801b582:	e7f3      	b.n	801b56c <_dtoa_r+0x9c>
 801b584:	2200      	movs	r2, #0
 801b586:	2300      	movs	r3, #0
 801b588:	4650      	mov	r0, sl
 801b58a:	4659      	mov	r1, fp
 801b58c:	f7fd fec4 	bl	8019318 <__aeabi_dcmpeq>
 801b590:	ec4b ab19 	vmov	d9, sl, fp
 801b594:	4680      	mov	r8, r0
 801b596:	b158      	cbz	r0, 801b5b0 <_dtoa_r+0xe0>
 801b598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b59a:	2301      	movs	r3, #1
 801b59c:	6013      	str	r3, [r2, #0]
 801b59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	f000 856b 	beq.w	801c07c <_dtoa_r+0xbac>
 801b5a6:	4883      	ldr	r0, [pc, #524]	; (801b7b4 <_dtoa_r+0x2e4>)
 801b5a8:	6018      	str	r0, [r3, #0]
 801b5aa:	1e43      	subs	r3, r0, #1
 801b5ac:	9301      	str	r3, [sp, #4]
 801b5ae:	e7df      	b.n	801b570 <_dtoa_r+0xa0>
 801b5b0:	ec4b ab10 	vmov	d0, sl, fp
 801b5b4:	aa10      	add	r2, sp, #64	; 0x40
 801b5b6:	a911      	add	r1, sp, #68	; 0x44
 801b5b8:	4620      	mov	r0, r4
 801b5ba:	f001 fd01 	bl	801cfc0 <__d2b>
 801b5be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b5c2:	ee08 0a10 	vmov	s16, r0
 801b5c6:	2d00      	cmp	r5, #0
 801b5c8:	f000 8084 	beq.w	801b6d4 <_dtoa_r+0x204>
 801b5cc:	ee19 3a90 	vmov	r3, s19
 801b5d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b5d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b5d8:	4656      	mov	r6, sl
 801b5da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b5de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b5e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b5e6:	4b74      	ldr	r3, [pc, #464]	; (801b7b8 <_dtoa_r+0x2e8>)
 801b5e8:	2200      	movs	r2, #0
 801b5ea:	4630      	mov	r0, r6
 801b5ec:	4639      	mov	r1, r7
 801b5ee:	f7fd fa73 	bl	8018ad8 <__aeabi_dsub>
 801b5f2:	a365      	add	r3, pc, #404	; (adr r3, 801b788 <_dtoa_r+0x2b8>)
 801b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f8:	f7fd fc26 	bl	8018e48 <__aeabi_dmul>
 801b5fc:	a364      	add	r3, pc, #400	; (adr r3, 801b790 <_dtoa_r+0x2c0>)
 801b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b602:	f7fd fa6b 	bl	8018adc <__adddf3>
 801b606:	4606      	mov	r6, r0
 801b608:	4628      	mov	r0, r5
 801b60a:	460f      	mov	r7, r1
 801b60c:	f7fd fbb2 	bl	8018d74 <__aeabi_i2d>
 801b610:	a361      	add	r3, pc, #388	; (adr r3, 801b798 <_dtoa_r+0x2c8>)
 801b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b616:	f7fd fc17 	bl	8018e48 <__aeabi_dmul>
 801b61a:	4602      	mov	r2, r0
 801b61c:	460b      	mov	r3, r1
 801b61e:	4630      	mov	r0, r6
 801b620:	4639      	mov	r1, r7
 801b622:	f7fd fa5b 	bl	8018adc <__adddf3>
 801b626:	4606      	mov	r6, r0
 801b628:	460f      	mov	r7, r1
 801b62a:	f7fd febd 	bl	80193a8 <__aeabi_d2iz>
 801b62e:	2200      	movs	r2, #0
 801b630:	9000      	str	r0, [sp, #0]
 801b632:	2300      	movs	r3, #0
 801b634:	4630      	mov	r0, r6
 801b636:	4639      	mov	r1, r7
 801b638:	f7fd fe78 	bl	801932c <__aeabi_dcmplt>
 801b63c:	b150      	cbz	r0, 801b654 <_dtoa_r+0x184>
 801b63e:	9800      	ldr	r0, [sp, #0]
 801b640:	f7fd fb98 	bl	8018d74 <__aeabi_i2d>
 801b644:	4632      	mov	r2, r6
 801b646:	463b      	mov	r3, r7
 801b648:	f7fd fe66 	bl	8019318 <__aeabi_dcmpeq>
 801b64c:	b910      	cbnz	r0, 801b654 <_dtoa_r+0x184>
 801b64e:	9b00      	ldr	r3, [sp, #0]
 801b650:	3b01      	subs	r3, #1
 801b652:	9300      	str	r3, [sp, #0]
 801b654:	9b00      	ldr	r3, [sp, #0]
 801b656:	2b16      	cmp	r3, #22
 801b658:	d85a      	bhi.n	801b710 <_dtoa_r+0x240>
 801b65a:	9a00      	ldr	r2, [sp, #0]
 801b65c:	4b57      	ldr	r3, [pc, #348]	; (801b7bc <_dtoa_r+0x2ec>)
 801b65e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b666:	ec51 0b19 	vmov	r0, r1, d9
 801b66a:	f7fd fe5f 	bl	801932c <__aeabi_dcmplt>
 801b66e:	2800      	cmp	r0, #0
 801b670:	d050      	beq.n	801b714 <_dtoa_r+0x244>
 801b672:	9b00      	ldr	r3, [sp, #0]
 801b674:	3b01      	subs	r3, #1
 801b676:	9300      	str	r3, [sp, #0]
 801b678:	2300      	movs	r3, #0
 801b67a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b67e:	1b5d      	subs	r5, r3, r5
 801b680:	1e6b      	subs	r3, r5, #1
 801b682:	9305      	str	r3, [sp, #20]
 801b684:	bf45      	ittet	mi
 801b686:	f1c5 0301 	rsbmi	r3, r5, #1
 801b68a:	9304      	strmi	r3, [sp, #16]
 801b68c:	2300      	movpl	r3, #0
 801b68e:	2300      	movmi	r3, #0
 801b690:	bf4c      	ite	mi
 801b692:	9305      	strmi	r3, [sp, #20]
 801b694:	9304      	strpl	r3, [sp, #16]
 801b696:	9b00      	ldr	r3, [sp, #0]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	db3d      	blt.n	801b718 <_dtoa_r+0x248>
 801b69c:	9b05      	ldr	r3, [sp, #20]
 801b69e:	9a00      	ldr	r2, [sp, #0]
 801b6a0:	920a      	str	r2, [sp, #40]	; 0x28
 801b6a2:	4413      	add	r3, r2
 801b6a4:	9305      	str	r3, [sp, #20]
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	9307      	str	r3, [sp, #28]
 801b6aa:	9b06      	ldr	r3, [sp, #24]
 801b6ac:	2b09      	cmp	r3, #9
 801b6ae:	f200 8089 	bhi.w	801b7c4 <_dtoa_r+0x2f4>
 801b6b2:	2b05      	cmp	r3, #5
 801b6b4:	bfc4      	itt	gt
 801b6b6:	3b04      	subgt	r3, #4
 801b6b8:	9306      	strgt	r3, [sp, #24]
 801b6ba:	9b06      	ldr	r3, [sp, #24]
 801b6bc:	f1a3 0302 	sub.w	r3, r3, #2
 801b6c0:	bfcc      	ite	gt
 801b6c2:	2500      	movgt	r5, #0
 801b6c4:	2501      	movle	r5, #1
 801b6c6:	2b03      	cmp	r3, #3
 801b6c8:	f200 8087 	bhi.w	801b7da <_dtoa_r+0x30a>
 801b6cc:	e8df f003 	tbb	[pc, r3]
 801b6d0:	59383a2d 	.word	0x59383a2d
 801b6d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b6d8:	441d      	add	r5, r3
 801b6da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b6de:	2b20      	cmp	r3, #32
 801b6e0:	bfc1      	itttt	gt
 801b6e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b6e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b6ea:	fa0b f303 	lslgt.w	r3, fp, r3
 801b6ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b6f2:	bfda      	itte	le
 801b6f4:	f1c3 0320 	rsble	r3, r3, #32
 801b6f8:	fa06 f003 	lslle.w	r0, r6, r3
 801b6fc:	4318      	orrgt	r0, r3
 801b6fe:	f7fd fb29 	bl	8018d54 <__aeabi_ui2d>
 801b702:	2301      	movs	r3, #1
 801b704:	4606      	mov	r6, r0
 801b706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b70a:	3d01      	subs	r5, #1
 801b70c:	930e      	str	r3, [sp, #56]	; 0x38
 801b70e:	e76a      	b.n	801b5e6 <_dtoa_r+0x116>
 801b710:	2301      	movs	r3, #1
 801b712:	e7b2      	b.n	801b67a <_dtoa_r+0x1aa>
 801b714:	900b      	str	r0, [sp, #44]	; 0x2c
 801b716:	e7b1      	b.n	801b67c <_dtoa_r+0x1ac>
 801b718:	9b04      	ldr	r3, [sp, #16]
 801b71a:	9a00      	ldr	r2, [sp, #0]
 801b71c:	1a9b      	subs	r3, r3, r2
 801b71e:	9304      	str	r3, [sp, #16]
 801b720:	4253      	negs	r3, r2
 801b722:	9307      	str	r3, [sp, #28]
 801b724:	2300      	movs	r3, #0
 801b726:	930a      	str	r3, [sp, #40]	; 0x28
 801b728:	e7bf      	b.n	801b6aa <_dtoa_r+0x1da>
 801b72a:	2300      	movs	r3, #0
 801b72c:	9308      	str	r3, [sp, #32]
 801b72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b730:	2b00      	cmp	r3, #0
 801b732:	dc55      	bgt.n	801b7e0 <_dtoa_r+0x310>
 801b734:	2301      	movs	r3, #1
 801b736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b73a:	461a      	mov	r2, r3
 801b73c:	9209      	str	r2, [sp, #36]	; 0x24
 801b73e:	e00c      	b.n	801b75a <_dtoa_r+0x28a>
 801b740:	2301      	movs	r3, #1
 801b742:	e7f3      	b.n	801b72c <_dtoa_r+0x25c>
 801b744:	2300      	movs	r3, #0
 801b746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b748:	9308      	str	r3, [sp, #32]
 801b74a:	9b00      	ldr	r3, [sp, #0]
 801b74c:	4413      	add	r3, r2
 801b74e:	9302      	str	r3, [sp, #8]
 801b750:	3301      	adds	r3, #1
 801b752:	2b01      	cmp	r3, #1
 801b754:	9303      	str	r3, [sp, #12]
 801b756:	bfb8      	it	lt
 801b758:	2301      	movlt	r3, #1
 801b75a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b75c:	2200      	movs	r2, #0
 801b75e:	6042      	str	r2, [r0, #4]
 801b760:	2204      	movs	r2, #4
 801b762:	f102 0614 	add.w	r6, r2, #20
 801b766:	429e      	cmp	r6, r3
 801b768:	6841      	ldr	r1, [r0, #4]
 801b76a:	d93d      	bls.n	801b7e8 <_dtoa_r+0x318>
 801b76c:	4620      	mov	r0, r4
 801b76e:	f001 f839 	bl	801c7e4 <_Balloc>
 801b772:	9001      	str	r0, [sp, #4]
 801b774:	2800      	cmp	r0, #0
 801b776:	d13b      	bne.n	801b7f0 <_dtoa_r+0x320>
 801b778:	4b11      	ldr	r3, [pc, #68]	; (801b7c0 <_dtoa_r+0x2f0>)
 801b77a:	4602      	mov	r2, r0
 801b77c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b780:	e6c0      	b.n	801b504 <_dtoa_r+0x34>
 801b782:	2301      	movs	r3, #1
 801b784:	e7df      	b.n	801b746 <_dtoa_r+0x276>
 801b786:	bf00      	nop
 801b788:	636f4361 	.word	0x636f4361
 801b78c:	3fd287a7 	.word	0x3fd287a7
 801b790:	8b60c8b3 	.word	0x8b60c8b3
 801b794:	3fc68a28 	.word	0x3fc68a28
 801b798:	509f79fb 	.word	0x509f79fb
 801b79c:	3fd34413 	.word	0x3fd34413
 801b7a0:	0805239e 	.word	0x0805239e
 801b7a4:	080523b5 	.word	0x080523b5
 801b7a8:	7ff00000 	.word	0x7ff00000
 801b7ac:	0805239a 	.word	0x0805239a
 801b7b0:	08052391 	.word	0x08052391
 801b7b4:	08052215 	.word	0x08052215
 801b7b8:	3ff80000 	.word	0x3ff80000
 801b7bc:	08052520 	.word	0x08052520
 801b7c0:	08052410 	.word	0x08052410
 801b7c4:	2501      	movs	r5, #1
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	9306      	str	r3, [sp, #24]
 801b7ca:	9508      	str	r5, [sp, #32]
 801b7cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b7d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b7d4:	2200      	movs	r2, #0
 801b7d6:	2312      	movs	r3, #18
 801b7d8:	e7b0      	b.n	801b73c <_dtoa_r+0x26c>
 801b7da:	2301      	movs	r3, #1
 801b7dc:	9308      	str	r3, [sp, #32]
 801b7de:	e7f5      	b.n	801b7cc <_dtoa_r+0x2fc>
 801b7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b7e6:	e7b8      	b.n	801b75a <_dtoa_r+0x28a>
 801b7e8:	3101      	adds	r1, #1
 801b7ea:	6041      	str	r1, [r0, #4]
 801b7ec:	0052      	lsls	r2, r2, #1
 801b7ee:	e7b8      	b.n	801b762 <_dtoa_r+0x292>
 801b7f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7f2:	9a01      	ldr	r2, [sp, #4]
 801b7f4:	601a      	str	r2, [r3, #0]
 801b7f6:	9b03      	ldr	r3, [sp, #12]
 801b7f8:	2b0e      	cmp	r3, #14
 801b7fa:	f200 809d 	bhi.w	801b938 <_dtoa_r+0x468>
 801b7fe:	2d00      	cmp	r5, #0
 801b800:	f000 809a 	beq.w	801b938 <_dtoa_r+0x468>
 801b804:	9b00      	ldr	r3, [sp, #0]
 801b806:	2b00      	cmp	r3, #0
 801b808:	dd32      	ble.n	801b870 <_dtoa_r+0x3a0>
 801b80a:	4ab7      	ldr	r2, [pc, #732]	; (801bae8 <_dtoa_r+0x618>)
 801b80c:	f003 030f 	and.w	r3, r3, #15
 801b810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b814:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b818:	9b00      	ldr	r3, [sp, #0]
 801b81a:	05d8      	lsls	r0, r3, #23
 801b81c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b820:	d516      	bpl.n	801b850 <_dtoa_r+0x380>
 801b822:	4bb2      	ldr	r3, [pc, #712]	; (801baec <_dtoa_r+0x61c>)
 801b824:	ec51 0b19 	vmov	r0, r1, d9
 801b828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b82c:	f7fd fc36 	bl	801909c <__aeabi_ddiv>
 801b830:	f007 070f 	and.w	r7, r7, #15
 801b834:	4682      	mov	sl, r0
 801b836:	468b      	mov	fp, r1
 801b838:	2503      	movs	r5, #3
 801b83a:	4eac      	ldr	r6, [pc, #688]	; (801baec <_dtoa_r+0x61c>)
 801b83c:	b957      	cbnz	r7, 801b854 <_dtoa_r+0x384>
 801b83e:	4642      	mov	r2, r8
 801b840:	464b      	mov	r3, r9
 801b842:	4650      	mov	r0, sl
 801b844:	4659      	mov	r1, fp
 801b846:	f7fd fc29 	bl	801909c <__aeabi_ddiv>
 801b84a:	4682      	mov	sl, r0
 801b84c:	468b      	mov	fp, r1
 801b84e:	e028      	b.n	801b8a2 <_dtoa_r+0x3d2>
 801b850:	2502      	movs	r5, #2
 801b852:	e7f2      	b.n	801b83a <_dtoa_r+0x36a>
 801b854:	07f9      	lsls	r1, r7, #31
 801b856:	d508      	bpl.n	801b86a <_dtoa_r+0x39a>
 801b858:	4640      	mov	r0, r8
 801b85a:	4649      	mov	r1, r9
 801b85c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b860:	f7fd faf2 	bl	8018e48 <__aeabi_dmul>
 801b864:	3501      	adds	r5, #1
 801b866:	4680      	mov	r8, r0
 801b868:	4689      	mov	r9, r1
 801b86a:	107f      	asrs	r7, r7, #1
 801b86c:	3608      	adds	r6, #8
 801b86e:	e7e5      	b.n	801b83c <_dtoa_r+0x36c>
 801b870:	f000 809b 	beq.w	801b9aa <_dtoa_r+0x4da>
 801b874:	9b00      	ldr	r3, [sp, #0]
 801b876:	4f9d      	ldr	r7, [pc, #628]	; (801baec <_dtoa_r+0x61c>)
 801b878:	425e      	negs	r6, r3
 801b87a:	4b9b      	ldr	r3, [pc, #620]	; (801bae8 <_dtoa_r+0x618>)
 801b87c:	f006 020f 	and.w	r2, r6, #15
 801b880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b888:	ec51 0b19 	vmov	r0, r1, d9
 801b88c:	f7fd fadc 	bl	8018e48 <__aeabi_dmul>
 801b890:	1136      	asrs	r6, r6, #4
 801b892:	4682      	mov	sl, r0
 801b894:	468b      	mov	fp, r1
 801b896:	2300      	movs	r3, #0
 801b898:	2502      	movs	r5, #2
 801b89a:	2e00      	cmp	r6, #0
 801b89c:	d17a      	bne.n	801b994 <_dtoa_r+0x4c4>
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d1d3      	bne.n	801b84a <_dtoa_r+0x37a>
 801b8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	f000 8082 	beq.w	801b9ae <_dtoa_r+0x4de>
 801b8aa:	4b91      	ldr	r3, [pc, #580]	; (801baf0 <_dtoa_r+0x620>)
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	4650      	mov	r0, sl
 801b8b0:	4659      	mov	r1, fp
 801b8b2:	f7fd fd3b 	bl	801932c <__aeabi_dcmplt>
 801b8b6:	2800      	cmp	r0, #0
 801b8b8:	d079      	beq.n	801b9ae <_dtoa_r+0x4de>
 801b8ba:	9b03      	ldr	r3, [sp, #12]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d076      	beq.n	801b9ae <_dtoa_r+0x4de>
 801b8c0:	9b02      	ldr	r3, [sp, #8]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	dd36      	ble.n	801b934 <_dtoa_r+0x464>
 801b8c6:	9b00      	ldr	r3, [sp, #0]
 801b8c8:	4650      	mov	r0, sl
 801b8ca:	4659      	mov	r1, fp
 801b8cc:	1e5f      	subs	r7, r3, #1
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	4b88      	ldr	r3, [pc, #544]	; (801baf4 <_dtoa_r+0x624>)
 801b8d2:	f7fd fab9 	bl	8018e48 <__aeabi_dmul>
 801b8d6:	9e02      	ldr	r6, [sp, #8]
 801b8d8:	4682      	mov	sl, r0
 801b8da:	468b      	mov	fp, r1
 801b8dc:	3501      	adds	r5, #1
 801b8de:	4628      	mov	r0, r5
 801b8e0:	f7fd fa48 	bl	8018d74 <__aeabi_i2d>
 801b8e4:	4652      	mov	r2, sl
 801b8e6:	465b      	mov	r3, fp
 801b8e8:	f7fd faae 	bl	8018e48 <__aeabi_dmul>
 801b8ec:	4b82      	ldr	r3, [pc, #520]	; (801baf8 <_dtoa_r+0x628>)
 801b8ee:	2200      	movs	r2, #0
 801b8f0:	f7fd f8f4 	bl	8018adc <__adddf3>
 801b8f4:	46d0      	mov	r8, sl
 801b8f6:	46d9      	mov	r9, fp
 801b8f8:	4682      	mov	sl, r0
 801b8fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b8fe:	2e00      	cmp	r6, #0
 801b900:	d158      	bne.n	801b9b4 <_dtoa_r+0x4e4>
 801b902:	4b7e      	ldr	r3, [pc, #504]	; (801bafc <_dtoa_r+0x62c>)
 801b904:	2200      	movs	r2, #0
 801b906:	4640      	mov	r0, r8
 801b908:	4649      	mov	r1, r9
 801b90a:	f7fd f8e5 	bl	8018ad8 <__aeabi_dsub>
 801b90e:	4652      	mov	r2, sl
 801b910:	465b      	mov	r3, fp
 801b912:	4680      	mov	r8, r0
 801b914:	4689      	mov	r9, r1
 801b916:	f7fd fd27 	bl	8019368 <__aeabi_dcmpgt>
 801b91a:	2800      	cmp	r0, #0
 801b91c:	f040 8295 	bne.w	801be4a <_dtoa_r+0x97a>
 801b920:	4652      	mov	r2, sl
 801b922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b926:	4640      	mov	r0, r8
 801b928:	4649      	mov	r1, r9
 801b92a:	f7fd fcff 	bl	801932c <__aeabi_dcmplt>
 801b92e:	2800      	cmp	r0, #0
 801b930:	f040 8289 	bne.w	801be46 <_dtoa_r+0x976>
 801b934:	ec5b ab19 	vmov	sl, fp, d9
 801b938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	f2c0 8148 	blt.w	801bbd0 <_dtoa_r+0x700>
 801b940:	9a00      	ldr	r2, [sp, #0]
 801b942:	2a0e      	cmp	r2, #14
 801b944:	f300 8144 	bgt.w	801bbd0 <_dtoa_r+0x700>
 801b948:	4b67      	ldr	r3, [pc, #412]	; (801bae8 <_dtoa_r+0x618>)
 801b94a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b94e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b954:	2b00      	cmp	r3, #0
 801b956:	f280 80d5 	bge.w	801bb04 <_dtoa_r+0x634>
 801b95a:	9b03      	ldr	r3, [sp, #12]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	f300 80d1 	bgt.w	801bb04 <_dtoa_r+0x634>
 801b962:	f040 826f 	bne.w	801be44 <_dtoa_r+0x974>
 801b966:	4b65      	ldr	r3, [pc, #404]	; (801bafc <_dtoa_r+0x62c>)
 801b968:	2200      	movs	r2, #0
 801b96a:	4640      	mov	r0, r8
 801b96c:	4649      	mov	r1, r9
 801b96e:	f7fd fa6b 	bl	8018e48 <__aeabi_dmul>
 801b972:	4652      	mov	r2, sl
 801b974:	465b      	mov	r3, fp
 801b976:	f7fd fced 	bl	8019354 <__aeabi_dcmpge>
 801b97a:	9e03      	ldr	r6, [sp, #12]
 801b97c:	4637      	mov	r7, r6
 801b97e:	2800      	cmp	r0, #0
 801b980:	f040 8245 	bne.w	801be0e <_dtoa_r+0x93e>
 801b984:	9d01      	ldr	r5, [sp, #4]
 801b986:	2331      	movs	r3, #49	; 0x31
 801b988:	f805 3b01 	strb.w	r3, [r5], #1
 801b98c:	9b00      	ldr	r3, [sp, #0]
 801b98e:	3301      	adds	r3, #1
 801b990:	9300      	str	r3, [sp, #0]
 801b992:	e240      	b.n	801be16 <_dtoa_r+0x946>
 801b994:	07f2      	lsls	r2, r6, #31
 801b996:	d505      	bpl.n	801b9a4 <_dtoa_r+0x4d4>
 801b998:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b99c:	f7fd fa54 	bl	8018e48 <__aeabi_dmul>
 801b9a0:	3501      	adds	r5, #1
 801b9a2:	2301      	movs	r3, #1
 801b9a4:	1076      	asrs	r6, r6, #1
 801b9a6:	3708      	adds	r7, #8
 801b9a8:	e777      	b.n	801b89a <_dtoa_r+0x3ca>
 801b9aa:	2502      	movs	r5, #2
 801b9ac:	e779      	b.n	801b8a2 <_dtoa_r+0x3d2>
 801b9ae:	9f00      	ldr	r7, [sp, #0]
 801b9b0:	9e03      	ldr	r6, [sp, #12]
 801b9b2:	e794      	b.n	801b8de <_dtoa_r+0x40e>
 801b9b4:	9901      	ldr	r1, [sp, #4]
 801b9b6:	4b4c      	ldr	r3, [pc, #304]	; (801bae8 <_dtoa_r+0x618>)
 801b9b8:	4431      	add	r1, r6
 801b9ba:	910d      	str	r1, [sp, #52]	; 0x34
 801b9bc:	9908      	ldr	r1, [sp, #32]
 801b9be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b9c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b9c6:	2900      	cmp	r1, #0
 801b9c8:	d043      	beq.n	801ba52 <_dtoa_r+0x582>
 801b9ca:	494d      	ldr	r1, [pc, #308]	; (801bb00 <_dtoa_r+0x630>)
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	f7fd fb65 	bl	801909c <__aeabi_ddiv>
 801b9d2:	4652      	mov	r2, sl
 801b9d4:	465b      	mov	r3, fp
 801b9d6:	f7fd f87f 	bl	8018ad8 <__aeabi_dsub>
 801b9da:	9d01      	ldr	r5, [sp, #4]
 801b9dc:	4682      	mov	sl, r0
 801b9de:	468b      	mov	fp, r1
 801b9e0:	4649      	mov	r1, r9
 801b9e2:	4640      	mov	r0, r8
 801b9e4:	f7fd fce0 	bl	80193a8 <__aeabi_d2iz>
 801b9e8:	4606      	mov	r6, r0
 801b9ea:	f7fd f9c3 	bl	8018d74 <__aeabi_i2d>
 801b9ee:	4602      	mov	r2, r0
 801b9f0:	460b      	mov	r3, r1
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	4649      	mov	r1, r9
 801b9f6:	f7fd f86f 	bl	8018ad8 <__aeabi_dsub>
 801b9fa:	3630      	adds	r6, #48	; 0x30
 801b9fc:	f805 6b01 	strb.w	r6, [r5], #1
 801ba00:	4652      	mov	r2, sl
 801ba02:	465b      	mov	r3, fp
 801ba04:	4680      	mov	r8, r0
 801ba06:	4689      	mov	r9, r1
 801ba08:	f7fd fc90 	bl	801932c <__aeabi_dcmplt>
 801ba0c:	2800      	cmp	r0, #0
 801ba0e:	d163      	bne.n	801bad8 <_dtoa_r+0x608>
 801ba10:	4642      	mov	r2, r8
 801ba12:	464b      	mov	r3, r9
 801ba14:	4936      	ldr	r1, [pc, #216]	; (801baf0 <_dtoa_r+0x620>)
 801ba16:	2000      	movs	r0, #0
 801ba18:	f7fd f85e 	bl	8018ad8 <__aeabi_dsub>
 801ba1c:	4652      	mov	r2, sl
 801ba1e:	465b      	mov	r3, fp
 801ba20:	f7fd fc84 	bl	801932c <__aeabi_dcmplt>
 801ba24:	2800      	cmp	r0, #0
 801ba26:	f040 80b5 	bne.w	801bb94 <_dtoa_r+0x6c4>
 801ba2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba2c:	429d      	cmp	r5, r3
 801ba2e:	d081      	beq.n	801b934 <_dtoa_r+0x464>
 801ba30:	4b30      	ldr	r3, [pc, #192]	; (801baf4 <_dtoa_r+0x624>)
 801ba32:	2200      	movs	r2, #0
 801ba34:	4650      	mov	r0, sl
 801ba36:	4659      	mov	r1, fp
 801ba38:	f7fd fa06 	bl	8018e48 <__aeabi_dmul>
 801ba3c:	4b2d      	ldr	r3, [pc, #180]	; (801baf4 <_dtoa_r+0x624>)
 801ba3e:	4682      	mov	sl, r0
 801ba40:	468b      	mov	fp, r1
 801ba42:	4640      	mov	r0, r8
 801ba44:	4649      	mov	r1, r9
 801ba46:	2200      	movs	r2, #0
 801ba48:	f7fd f9fe 	bl	8018e48 <__aeabi_dmul>
 801ba4c:	4680      	mov	r8, r0
 801ba4e:	4689      	mov	r9, r1
 801ba50:	e7c6      	b.n	801b9e0 <_dtoa_r+0x510>
 801ba52:	4650      	mov	r0, sl
 801ba54:	4659      	mov	r1, fp
 801ba56:	f7fd f9f7 	bl	8018e48 <__aeabi_dmul>
 801ba5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba5c:	9d01      	ldr	r5, [sp, #4]
 801ba5e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba60:	4682      	mov	sl, r0
 801ba62:	468b      	mov	fp, r1
 801ba64:	4649      	mov	r1, r9
 801ba66:	4640      	mov	r0, r8
 801ba68:	f7fd fc9e 	bl	80193a8 <__aeabi_d2iz>
 801ba6c:	4606      	mov	r6, r0
 801ba6e:	f7fd f981 	bl	8018d74 <__aeabi_i2d>
 801ba72:	3630      	adds	r6, #48	; 0x30
 801ba74:	4602      	mov	r2, r0
 801ba76:	460b      	mov	r3, r1
 801ba78:	4640      	mov	r0, r8
 801ba7a:	4649      	mov	r1, r9
 801ba7c:	f7fd f82c 	bl	8018ad8 <__aeabi_dsub>
 801ba80:	f805 6b01 	strb.w	r6, [r5], #1
 801ba84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba86:	429d      	cmp	r5, r3
 801ba88:	4680      	mov	r8, r0
 801ba8a:	4689      	mov	r9, r1
 801ba8c:	f04f 0200 	mov.w	r2, #0
 801ba90:	d124      	bne.n	801badc <_dtoa_r+0x60c>
 801ba92:	4b1b      	ldr	r3, [pc, #108]	; (801bb00 <_dtoa_r+0x630>)
 801ba94:	4650      	mov	r0, sl
 801ba96:	4659      	mov	r1, fp
 801ba98:	f7fd f820 	bl	8018adc <__adddf3>
 801ba9c:	4602      	mov	r2, r0
 801ba9e:	460b      	mov	r3, r1
 801baa0:	4640      	mov	r0, r8
 801baa2:	4649      	mov	r1, r9
 801baa4:	f7fd fc60 	bl	8019368 <__aeabi_dcmpgt>
 801baa8:	2800      	cmp	r0, #0
 801baaa:	d173      	bne.n	801bb94 <_dtoa_r+0x6c4>
 801baac:	4652      	mov	r2, sl
 801baae:	465b      	mov	r3, fp
 801bab0:	4913      	ldr	r1, [pc, #76]	; (801bb00 <_dtoa_r+0x630>)
 801bab2:	2000      	movs	r0, #0
 801bab4:	f7fd f810 	bl	8018ad8 <__aeabi_dsub>
 801bab8:	4602      	mov	r2, r0
 801baba:	460b      	mov	r3, r1
 801babc:	4640      	mov	r0, r8
 801babe:	4649      	mov	r1, r9
 801bac0:	f7fd fc34 	bl	801932c <__aeabi_dcmplt>
 801bac4:	2800      	cmp	r0, #0
 801bac6:	f43f af35 	beq.w	801b934 <_dtoa_r+0x464>
 801baca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bacc:	1e6b      	subs	r3, r5, #1
 801bace:	930f      	str	r3, [sp, #60]	; 0x3c
 801bad0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bad4:	2b30      	cmp	r3, #48	; 0x30
 801bad6:	d0f8      	beq.n	801baca <_dtoa_r+0x5fa>
 801bad8:	9700      	str	r7, [sp, #0]
 801bada:	e049      	b.n	801bb70 <_dtoa_r+0x6a0>
 801badc:	4b05      	ldr	r3, [pc, #20]	; (801baf4 <_dtoa_r+0x624>)
 801bade:	f7fd f9b3 	bl	8018e48 <__aeabi_dmul>
 801bae2:	4680      	mov	r8, r0
 801bae4:	4689      	mov	r9, r1
 801bae6:	e7bd      	b.n	801ba64 <_dtoa_r+0x594>
 801bae8:	08052520 	.word	0x08052520
 801baec:	080524f8 	.word	0x080524f8
 801baf0:	3ff00000 	.word	0x3ff00000
 801baf4:	40240000 	.word	0x40240000
 801baf8:	401c0000 	.word	0x401c0000
 801bafc:	40140000 	.word	0x40140000
 801bb00:	3fe00000 	.word	0x3fe00000
 801bb04:	9d01      	ldr	r5, [sp, #4]
 801bb06:	4656      	mov	r6, sl
 801bb08:	465f      	mov	r7, fp
 801bb0a:	4642      	mov	r2, r8
 801bb0c:	464b      	mov	r3, r9
 801bb0e:	4630      	mov	r0, r6
 801bb10:	4639      	mov	r1, r7
 801bb12:	f7fd fac3 	bl	801909c <__aeabi_ddiv>
 801bb16:	f7fd fc47 	bl	80193a8 <__aeabi_d2iz>
 801bb1a:	4682      	mov	sl, r0
 801bb1c:	f7fd f92a 	bl	8018d74 <__aeabi_i2d>
 801bb20:	4642      	mov	r2, r8
 801bb22:	464b      	mov	r3, r9
 801bb24:	f7fd f990 	bl	8018e48 <__aeabi_dmul>
 801bb28:	4602      	mov	r2, r0
 801bb2a:	460b      	mov	r3, r1
 801bb2c:	4630      	mov	r0, r6
 801bb2e:	4639      	mov	r1, r7
 801bb30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bb34:	f7fc ffd0 	bl	8018ad8 <__aeabi_dsub>
 801bb38:	f805 6b01 	strb.w	r6, [r5], #1
 801bb3c:	9e01      	ldr	r6, [sp, #4]
 801bb3e:	9f03      	ldr	r7, [sp, #12]
 801bb40:	1bae      	subs	r6, r5, r6
 801bb42:	42b7      	cmp	r7, r6
 801bb44:	4602      	mov	r2, r0
 801bb46:	460b      	mov	r3, r1
 801bb48:	d135      	bne.n	801bbb6 <_dtoa_r+0x6e6>
 801bb4a:	f7fc ffc7 	bl	8018adc <__adddf3>
 801bb4e:	4642      	mov	r2, r8
 801bb50:	464b      	mov	r3, r9
 801bb52:	4606      	mov	r6, r0
 801bb54:	460f      	mov	r7, r1
 801bb56:	f7fd fc07 	bl	8019368 <__aeabi_dcmpgt>
 801bb5a:	b9d0      	cbnz	r0, 801bb92 <_dtoa_r+0x6c2>
 801bb5c:	4642      	mov	r2, r8
 801bb5e:	464b      	mov	r3, r9
 801bb60:	4630      	mov	r0, r6
 801bb62:	4639      	mov	r1, r7
 801bb64:	f7fd fbd8 	bl	8019318 <__aeabi_dcmpeq>
 801bb68:	b110      	cbz	r0, 801bb70 <_dtoa_r+0x6a0>
 801bb6a:	f01a 0f01 	tst.w	sl, #1
 801bb6e:	d110      	bne.n	801bb92 <_dtoa_r+0x6c2>
 801bb70:	4620      	mov	r0, r4
 801bb72:	ee18 1a10 	vmov	r1, s16
 801bb76:	f000 fe75 	bl	801c864 <_Bfree>
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	9800      	ldr	r0, [sp, #0]
 801bb7e:	702b      	strb	r3, [r5, #0]
 801bb80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb82:	3001      	adds	r0, #1
 801bb84:	6018      	str	r0, [r3, #0]
 801bb86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	f43f acf1 	beq.w	801b570 <_dtoa_r+0xa0>
 801bb8e:	601d      	str	r5, [r3, #0]
 801bb90:	e4ee      	b.n	801b570 <_dtoa_r+0xa0>
 801bb92:	9f00      	ldr	r7, [sp, #0]
 801bb94:	462b      	mov	r3, r5
 801bb96:	461d      	mov	r5, r3
 801bb98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bb9c:	2a39      	cmp	r2, #57	; 0x39
 801bb9e:	d106      	bne.n	801bbae <_dtoa_r+0x6de>
 801bba0:	9a01      	ldr	r2, [sp, #4]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	d1f7      	bne.n	801bb96 <_dtoa_r+0x6c6>
 801bba6:	9901      	ldr	r1, [sp, #4]
 801bba8:	2230      	movs	r2, #48	; 0x30
 801bbaa:	3701      	adds	r7, #1
 801bbac:	700a      	strb	r2, [r1, #0]
 801bbae:	781a      	ldrb	r2, [r3, #0]
 801bbb0:	3201      	adds	r2, #1
 801bbb2:	701a      	strb	r2, [r3, #0]
 801bbb4:	e790      	b.n	801bad8 <_dtoa_r+0x608>
 801bbb6:	4ba6      	ldr	r3, [pc, #664]	; (801be50 <_dtoa_r+0x980>)
 801bbb8:	2200      	movs	r2, #0
 801bbba:	f7fd f945 	bl	8018e48 <__aeabi_dmul>
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	4606      	mov	r6, r0
 801bbc4:	460f      	mov	r7, r1
 801bbc6:	f7fd fba7 	bl	8019318 <__aeabi_dcmpeq>
 801bbca:	2800      	cmp	r0, #0
 801bbcc:	d09d      	beq.n	801bb0a <_dtoa_r+0x63a>
 801bbce:	e7cf      	b.n	801bb70 <_dtoa_r+0x6a0>
 801bbd0:	9a08      	ldr	r2, [sp, #32]
 801bbd2:	2a00      	cmp	r2, #0
 801bbd4:	f000 80d7 	beq.w	801bd86 <_dtoa_r+0x8b6>
 801bbd8:	9a06      	ldr	r2, [sp, #24]
 801bbda:	2a01      	cmp	r2, #1
 801bbdc:	f300 80ba 	bgt.w	801bd54 <_dtoa_r+0x884>
 801bbe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bbe2:	2a00      	cmp	r2, #0
 801bbe4:	f000 80b2 	beq.w	801bd4c <_dtoa_r+0x87c>
 801bbe8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bbec:	9e07      	ldr	r6, [sp, #28]
 801bbee:	9d04      	ldr	r5, [sp, #16]
 801bbf0:	9a04      	ldr	r2, [sp, #16]
 801bbf2:	441a      	add	r2, r3
 801bbf4:	9204      	str	r2, [sp, #16]
 801bbf6:	9a05      	ldr	r2, [sp, #20]
 801bbf8:	2101      	movs	r1, #1
 801bbfa:	441a      	add	r2, r3
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	9205      	str	r2, [sp, #20]
 801bc00:	f000 ff32 	bl	801ca68 <__i2b>
 801bc04:	4607      	mov	r7, r0
 801bc06:	2d00      	cmp	r5, #0
 801bc08:	dd0c      	ble.n	801bc24 <_dtoa_r+0x754>
 801bc0a:	9b05      	ldr	r3, [sp, #20]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	dd09      	ble.n	801bc24 <_dtoa_r+0x754>
 801bc10:	42ab      	cmp	r3, r5
 801bc12:	9a04      	ldr	r2, [sp, #16]
 801bc14:	bfa8      	it	ge
 801bc16:	462b      	movge	r3, r5
 801bc18:	1ad2      	subs	r2, r2, r3
 801bc1a:	9204      	str	r2, [sp, #16]
 801bc1c:	9a05      	ldr	r2, [sp, #20]
 801bc1e:	1aed      	subs	r5, r5, r3
 801bc20:	1ad3      	subs	r3, r2, r3
 801bc22:	9305      	str	r3, [sp, #20]
 801bc24:	9b07      	ldr	r3, [sp, #28]
 801bc26:	b31b      	cbz	r3, 801bc70 <_dtoa_r+0x7a0>
 801bc28:	9b08      	ldr	r3, [sp, #32]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	f000 80af 	beq.w	801bd8e <_dtoa_r+0x8be>
 801bc30:	2e00      	cmp	r6, #0
 801bc32:	dd13      	ble.n	801bc5c <_dtoa_r+0x78c>
 801bc34:	4639      	mov	r1, r7
 801bc36:	4632      	mov	r2, r6
 801bc38:	4620      	mov	r0, r4
 801bc3a:	f000 ffd5 	bl	801cbe8 <__pow5mult>
 801bc3e:	ee18 2a10 	vmov	r2, s16
 801bc42:	4601      	mov	r1, r0
 801bc44:	4607      	mov	r7, r0
 801bc46:	4620      	mov	r0, r4
 801bc48:	f000 ff24 	bl	801ca94 <__multiply>
 801bc4c:	ee18 1a10 	vmov	r1, s16
 801bc50:	4680      	mov	r8, r0
 801bc52:	4620      	mov	r0, r4
 801bc54:	f000 fe06 	bl	801c864 <_Bfree>
 801bc58:	ee08 8a10 	vmov	s16, r8
 801bc5c:	9b07      	ldr	r3, [sp, #28]
 801bc5e:	1b9a      	subs	r2, r3, r6
 801bc60:	d006      	beq.n	801bc70 <_dtoa_r+0x7a0>
 801bc62:	ee18 1a10 	vmov	r1, s16
 801bc66:	4620      	mov	r0, r4
 801bc68:	f000 ffbe 	bl	801cbe8 <__pow5mult>
 801bc6c:	ee08 0a10 	vmov	s16, r0
 801bc70:	2101      	movs	r1, #1
 801bc72:	4620      	mov	r0, r4
 801bc74:	f000 fef8 	bl	801ca68 <__i2b>
 801bc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	4606      	mov	r6, r0
 801bc7e:	f340 8088 	ble.w	801bd92 <_dtoa_r+0x8c2>
 801bc82:	461a      	mov	r2, r3
 801bc84:	4601      	mov	r1, r0
 801bc86:	4620      	mov	r0, r4
 801bc88:	f000 ffae 	bl	801cbe8 <__pow5mult>
 801bc8c:	9b06      	ldr	r3, [sp, #24]
 801bc8e:	2b01      	cmp	r3, #1
 801bc90:	4606      	mov	r6, r0
 801bc92:	f340 8081 	ble.w	801bd98 <_dtoa_r+0x8c8>
 801bc96:	f04f 0800 	mov.w	r8, #0
 801bc9a:	6933      	ldr	r3, [r6, #16]
 801bc9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bca0:	6918      	ldr	r0, [r3, #16]
 801bca2:	f000 fe91 	bl	801c9c8 <__hi0bits>
 801bca6:	f1c0 0020 	rsb	r0, r0, #32
 801bcaa:	9b05      	ldr	r3, [sp, #20]
 801bcac:	4418      	add	r0, r3
 801bcae:	f010 001f 	ands.w	r0, r0, #31
 801bcb2:	f000 8092 	beq.w	801bdda <_dtoa_r+0x90a>
 801bcb6:	f1c0 0320 	rsb	r3, r0, #32
 801bcba:	2b04      	cmp	r3, #4
 801bcbc:	f340 808a 	ble.w	801bdd4 <_dtoa_r+0x904>
 801bcc0:	f1c0 001c 	rsb	r0, r0, #28
 801bcc4:	9b04      	ldr	r3, [sp, #16]
 801bcc6:	4403      	add	r3, r0
 801bcc8:	9304      	str	r3, [sp, #16]
 801bcca:	9b05      	ldr	r3, [sp, #20]
 801bccc:	4403      	add	r3, r0
 801bcce:	4405      	add	r5, r0
 801bcd0:	9305      	str	r3, [sp, #20]
 801bcd2:	9b04      	ldr	r3, [sp, #16]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	dd07      	ble.n	801bce8 <_dtoa_r+0x818>
 801bcd8:	ee18 1a10 	vmov	r1, s16
 801bcdc:	461a      	mov	r2, r3
 801bcde:	4620      	mov	r0, r4
 801bce0:	f000 ffdc 	bl	801cc9c <__lshift>
 801bce4:	ee08 0a10 	vmov	s16, r0
 801bce8:	9b05      	ldr	r3, [sp, #20]
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	dd05      	ble.n	801bcfa <_dtoa_r+0x82a>
 801bcee:	4631      	mov	r1, r6
 801bcf0:	461a      	mov	r2, r3
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	f000 ffd2 	bl	801cc9c <__lshift>
 801bcf8:	4606      	mov	r6, r0
 801bcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d06e      	beq.n	801bdde <_dtoa_r+0x90e>
 801bd00:	ee18 0a10 	vmov	r0, s16
 801bd04:	4631      	mov	r1, r6
 801bd06:	f001 f839 	bl	801cd7c <__mcmp>
 801bd0a:	2800      	cmp	r0, #0
 801bd0c:	da67      	bge.n	801bdde <_dtoa_r+0x90e>
 801bd0e:	9b00      	ldr	r3, [sp, #0]
 801bd10:	3b01      	subs	r3, #1
 801bd12:	ee18 1a10 	vmov	r1, s16
 801bd16:	9300      	str	r3, [sp, #0]
 801bd18:	220a      	movs	r2, #10
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	4620      	mov	r0, r4
 801bd1e:	f000 fdc3 	bl	801c8a8 <__multadd>
 801bd22:	9b08      	ldr	r3, [sp, #32]
 801bd24:	ee08 0a10 	vmov	s16, r0
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	f000 81b1 	beq.w	801c090 <_dtoa_r+0xbc0>
 801bd2e:	2300      	movs	r3, #0
 801bd30:	4639      	mov	r1, r7
 801bd32:	220a      	movs	r2, #10
 801bd34:	4620      	mov	r0, r4
 801bd36:	f000 fdb7 	bl	801c8a8 <__multadd>
 801bd3a:	9b02      	ldr	r3, [sp, #8]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	4607      	mov	r7, r0
 801bd40:	f300 808e 	bgt.w	801be60 <_dtoa_r+0x990>
 801bd44:	9b06      	ldr	r3, [sp, #24]
 801bd46:	2b02      	cmp	r3, #2
 801bd48:	dc51      	bgt.n	801bdee <_dtoa_r+0x91e>
 801bd4a:	e089      	b.n	801be60 <_dtoa_r+0x990>
 801bd4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bd52:	e74b      	b.n	801bbec <_dtoa_r+0x71c>
 801bd54:	9b03      	ldr	r3, [sp, #12]
 801bd56:	1e5e      	subs	r6, r3, #1
 801bd58:	9b07      	ldr	r3, [sp, #28]
 801bd5a:	42b3      	cmp	r3, r6
 801bd5c:	bfbf      	itttt	lt
 801bd5e:	9b07      	ldrlt	r3, [sp, #28]
 801bd60:	9607      	strlt	r6, [sp, #28]
 801bd62:	1af2      	sublt	r2, r6, r3
 801bd64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bd66:	bfb6      	itet	lt
 801bd68:	189b      	addlt	r3, r3, r2
 801bd6a:	1b9e      	subge	r6, r3, r6
 801bd6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bd6e:	9b03      	ldr	r3, [sp, #12]
 801bd70:	bfb8      	it	lt
 801bd72:	2600      	movlt	r6, #0
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	bfb7      	itett	lt
 801bd78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bd7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bd80:	1a9d      	sublt	r5, r3, r2
 801bd82:	2300      	movlt	r3, #0
 801bd84:	e734      	b.n	801bbf0 <_dtoa_r+0x720>
 801bd86:	9e07      	ldr	r6, [sp, #28]
 801bd88:	9d04      	ldr	r5, [sp, #16]
 801bd8a:	9f08      	ldr	r7, [sp, #32]
 801bd8c:	e73b      	b.n	801bc06 <_dtoa_r+0x736>
 801bd8e:	9a07      	ldr	r2, [sp, #28]
 801bd90:	e767      	b.n	801bc62 <_dtoa_r+0x792>
 801bd92:	9b06      	ldr	r3, [sp, #24]
 801bd94:	2b01      	cmp	r3, #1
 801bd96:	dc18      	bgt.n	801bdca <_dtoa_r+0x8fa>
 801bd98:	f1ba 0f00 	cmp.w	sl, #0
 801bd9c:	d115      	bne.n	801bdca <_dtoa_r+0x8fa>
 801bd9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bda2:	b993      	cbnz	r3, 801bdca <_dtoa_r+0x8fa>
 801bda4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bda8:	0d1b      	lsrs	r3, r3, #20
 801bdaa:	051b      	lsls	r3, r3, #20
 801bdac:	b183      	cbz	r3, 801bdd0 <_dtoa_r+0x900>
 801bdae:	9b04      	ldr	r3, [sp, #16]
 801bdb0:	3301      	adds	r3, #1
 801bdb2:	9304      	str	r3, [sp, #16]
 801bdb4:	9b05      	ldr	r3, [sp, #20]
 801bdb6:	3301      	adds	r3, #1
 801bdb8:	9305      	str	r3, [sp, #20]
 801bdba:	f04f 0801 	mov.w	r8, #1
 801bdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	f47f af6a 	bne.w	801bc9a <_dtoa_r+0x7ca>
 801bdc6:	2001      	movs	r0, #1
 801bdc8:	e76f      	b.n	801bcaa <_dtoa_r+0x7da>
 801bdca:	f04f 0800 	mov.w	r8, #0
 801bdce:	e7f6      	b.n	801bdbe <_dtoa_r+0x8ee>
 801bdd0:	4698      	mov	r8, r3
 801bdd2:	e7f4      	b.n	801bdbe <_dtoa_r+0x8ee>
 801bdd4:	f43f af7d 	beq.w	801bcd2 <_dtoa_r+0x802>
 801bdd8:	4618      	mov	r0, r3
 801bdda:	301c      	adds	r0, #28
 801bddc:	e772      	b.n	801bcc4 <_dtoa_r+0x7f4>
 801bdde:	9b03      	ldr	r3, [sp, #12]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	dc37      	bgt.n	801be54 <_dtoa_r+0x984>
 801bde4:	9b06      	ldr	r3, [sp, #24]
 801bde6:	2b02      	cmp	r3, #2
 801bde8:	dd34      	ble.n	801be54 <_dtoa_r+0x984>
 801bdea:	9b03      	ldr	r3, [sp, #12]
 801bdec:	9302      	str	r3, [sp, #8]
 801bdee:	9b02      	ldr	r3, [sp, #8]
 801bdf0:	b96b      	cbnz	r3, 801be0e <_dtoa_r+0x93e>
 801bdf2:	4631      	mov	r1, r6
 801bdf4:	2205      	movs	r2, #5
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	f000 fd56 	bl	801c8a8 <__multadd>
 801bdfc:	4601      	mov	r1, r0
 801bdfe:	4606      	mov	r6, r0
 801be00:	ee18 0a10 	vmov	r0, s16
 801be04:	f000 ffba 	bl	801cd7c <__mcmp>
 801be08:	2800      	cmp	r0, #0
 801be0a:	f73f adbb 	bgt.w	801b984 <_dtoa_r+0x4b4>
 801be0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be10:	9d01      	ldr	r5, [sp, #4]
 801be12:	43db      	mvns	r3, r3
 801be14:	9300      	str	r3, [sp, #0]
 801be16:	f04f 0800 	mov.w	r8, #0
 801be1a:	4631      	mov	r1, r6
 801be1c:	4620      	mov	r0, r4
 801be1e:	f000 fd21 	bl	801c864 <_Bfree>
 801be22:	2f00      	cmp	r7, #0
 801be24:	f43f aea4 	beq.w	801bb70 <_dtoa_r+0x6a0>
 801be28:	f1b8 0f00 	cmp.w	r8, #0
 801be2c:	d005      	beq.n	801be3a <_dtoa_r+0x96a>
 801be2e:	45b8      	cmp	r8, r7
 801be30:	d003      	beq.n	801be3a <_dtoa_r+0x96a>
 801be32:	4641      	mov	r1, r8
 801be34:	4620      	mov	r0, r4
 801be36:	f000 fd15 	bl	801c864 <_Bfree>
 801be3a:	4639      	mov	r1, r7
 801be3c:	4620      	mov	r0, r4
 801be3e:	f000 fd11 	bl	801c864 <_Bfree>
 801be42:	e695      	b.n	801bb70 <_dtoa_r+0x6a0>
 801be44:	2600      	movs	r6, #0
 801be46:	4637      	mov	r7, r6
 801be48:	e7e1      	b.n	801be0e <_dtoa_r+0x93e>
 801be4a:	9700      	str	r7, [sp, #0]
 801be4c:	4637      	mov	r7, r6
 801be4e:	e599      	b.n	801b984 <_dtoa_r+0x4b4>
 801be50:	40240000 	.word	0x40240000
 801be54:	9b08      	ldr	r3, [sp, #32]
 801be56:	2b00      	cmp	r3, #0
 801be58:	f000 80ca 	beq.w	801bff0 <_dtoa_r+0xb20>
 801be5c:	9b03      	ldr	r3, [sp, #12]
 801be5e:	9302      	str	r3, [sp, #8]
 801be60:	2d00      	cmp	r5, #0
 801be62:	dd05      	ble.n	801be70 <_dtoa_r+0x9a0>
 801be64:	4639      	mov	r1, r7
 801be66:	462a      	mov	r2, r5
 801be68:	4620      	mov	r0, r4
 801be6a:	f000 ff17 	bl	801cc9c <__lshift>
 801be6e:	4607      	mov	r7, r0
 801be70:	f1b8 0f00 	cmp.w	r8, #0
 801be74:	d05b      	beq.n	801bf2e <_dtoa_r+0xa5e>
 801be76:	6879      	ldr	r1, [r7, #4]
 801be78:	4620      	mov	r0, r4
 801be7a:	f000 fcb3 	bl	801c7e4 <_Balloc>
 801be7e:	4605      	mov	r5, r0
 801be80:	b928      	cbnz	r0, 801be8e <_dtoa_r+0x9be>
 801be82:	4b87      	ldr	r3, [pc, #540]	; (801c0a0 <_dtoa_r+0xbd0>)
 801be84:	4602      	mov	r2, r0
 801be86:	f240 21ea 	movw	r1, #746	; 0x2ea
 801be8a:	f7ff bb3b 	b.w	801b504 <_dtoa_r+0x34>
 801be8e:	693a      	ldr	r2, [r7, #16]
 801be90:	3202      	adds	r2, #2
 801be92:	0092      	lsls	r2, r2, #2
 801be94:	f107 010c 	add.w	r1, r7, #12
 801be98:	300c      	adds	r0, #12
 801be9a:	f000 fc95 	bl	801c7c8 <memcpy>
 801be9e:	2201      	movs	r2, #1
 801bea0:	4629      	mov	r1, r5
 801bea2:	4620      	mov	r0, r4
 801bea4:	f000 fefa 	bl	801cc9c <__lshift>
 801bea8:	9b01      	ldr	r3, [sp, #4]
 801beaa:	f103 0901 	add.w	r9, r3, #1
 801beae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801beb2:	4413      	add	r3, r2
 801beb4:	9305      	str	r3, [sp, #20]
 801beb6:	f00a 0301 	and.w	r3, sl, #1
 801beba:	46b8      	mov	r8, r7
 801bebc:	9304      	str	r3, [sp, #16]
 801bebe:	4607      	mov	r7, r0
 801bec0:	4631      	mov	r1, r6
 801bec2:	ee18 0a10 	vmov	r0, s16
 801bec6:	f7ff fa75 	bl	801b3b4 <quorem>
 801beca:	4641      	mov	r1, r8
 801becc:	9002      	str	r0, [sp, #8]
 801bece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bed2:	ee18 0a10 	vmov	r0, s16
 801bed6:	f000 ff51 	bl	801cd7c <__mcmp>
 801beda:	463a      	mov	r2, r7
 801bedc:	9003      	str	r0, [sp, #12]
 801bede:	4631      	mov	r1, r6
 801bee0:	4620      	mov	r0, r4
 801bee2:	f000 ff67 	bl	801cdb4 <__mdiff>
 801bee6:	68c2      	ldr	r2, [r0, #12]
 801bee8:	f109 3bff 	add.w	fp, r9, #4294967295
 801beec:	4605      	mov	r5, r0
 801beee:	bb02      	cbnz	r2, 801bf32 <_dtoa_r+0xa62>
 801bef0:	4601      	mov	r1, r0
 801bef2:	ee18 0a10 	vmov	r0, s16
 801bef6:	f000 ff41 	bl	801cd7c <__mcmp>
 801befa:	4602      	mov	r2, r0
 801befc:	4629      	mov	r1, r5
 801befe:	4620      	mov	r0, r4
 801bf00:	9207      	str	r2, [sp, #28]
 801bf02:	f000 fcaf 	bl	801c864 <_Bfree>
 801bf06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bf0a:	ea43 0102 	orr.w	r1, r3, r2
 801bf0e:	9b04      	ldr	r3, [sp, #16]
 801bf10:	430b      	orrs	r3, r1
 801bf12:	464d      	mov	r5, r9
 801bf14:	d10f      	bne.n	801bf36 <_dtoa_r+0xa66>
 801bf16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf1a:	d02a      	beq.n	801bf72 <_dtoa_r+0xaa2>
 801bf1c:	9b03      	ldr	r3, [sp, #12]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	dd02      	ble.n	801bf28 <_dtoa_r+0xa58>
 801bf22:	9b02      	ldr	r3, [sp, #8]
 801bf24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bf28:	f88b a000 	strb.w	sl, [fp]
 801bf2c:	e775      	b.n	801be1a <_dtoa_r+0x94a>
 801bf2e:	4638      	mov	r0, r7
 801bf30:	e7ba      	b.n	801bea8 <_dtoa_r+0x9d8>
 801bf32:	2201      	movs	r2, #1
 801bf34:	e7e2      	b.n	801befc <_dtoa_r+0xa2c>
 801bf36:	9b03      	ldr	r3, [sp, #12]
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	db04      	blt.n	801bf46 <_dtoa_r+0xa76>
 801bf3c:	9906      	ldr	r1, [sp, #24]
 801bf3e:	430b      	orrs	r3, r1
 801bf40:	9904      	ldr	r1, [sp, #16]
 801bf42:	430b      	orrs	r3, r1
 801bf44:	d122      	bne.n	801bf8c <_dtoa_r+0xabc>
 801bf46:	2a00      	cmp	r2, #0
 801bf48:	ddee      	ble.n	801bf28 <_dtoa_r+0xa58>
 801bf4a:	ee18 1a10 	vmov	r1, s16
 801bf4e:	2201      	movs	r2, #1
 801bf50:	4620      	mov	r0, r4
 801bf52:	f000 fea3 	bl	801cc9c <__lshift>
 801bf56:	4631      	mov	r1, r6
 801bf58:	ee08 0a10 	vmov	s16, r0
 801bf5c:	f000 ff0e 	bl	801cd7c <__mcmp>
 801bf60:	2800      	cmp	r0, #0
 801bf62:	dc03      	bgt.n	801bf6c <_dtoa_r+0xa9c>
 801bf64:	d1e0      	bne.n	801bf28 <_dtoa_r+0xa58>
 801bf66:	f01a 0f01 	tst.w	sl, #1
 801bf6a:	d0dd      	beq.n	801bf28 <_dtoa_r+0xa58>
 801bf6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf70:	d1d7      	bne.n	801bf22 <_dtoa_r+0xa52>
 801bf72:	2339      	movs	r3, #57	; 0x39
 801bf74:	f88b 3000 	strb.w	r3, [fp]
 801bf78:	462b      	mov	r3, r5
 801bf7a:	461d      	mov	r5, r3
 801bf7c:	3b01      	subs	r3, #1
 801bf7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bf82:	2a39      	cmp	r2, #57	; 0x39
 801bf84:	d071      	beq.n	801c06a <_dtoa_r+0xb9a>
 801bf86:	3201      	adds	r2, #1
 801bf88:	701a      	strb	r2, [r3, #0]
 801bf8a:	e746      	b.n	801be1a <_dtoa_r+0x94a>
 801bf8c:	2a00      	cmp	r2, #0
 801bf8e:	dd07      	ble.n	801bfa0 <_dtoa_r+0xad0>
 801bf90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf94:	d0ed      	beq.n	801bf72 <_dtoa_r+0xaa2>
 801bf96:	f10a 0301 	add.w	r3, sl, #1
 801bf9a:	f88b 3000 	strb.w	r3, [fp]
 801bf9e:	e73c      	b.n	801be1a <_dtoa_r+0x94a>
 801bfa0:	9b05      	ldr	r3, [sp, #20]
 801bfa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801bfa6:	4599      	cmp	r9, r3
 801bfa8:	d047      	beq.n	801c03a <_dtoa_r+0xb6a>
 801bfaa:	ee18 1a10 	vmov	r1, s16
 801bfae:	2300      	movs	r3, #0
 801bfb0:	220a      	movs	r2, #10
 801bfb2:	4620      	mov	r0, r4
 801bfb4:	f000 fc78 	bl	801c8a8 <__multadd>
 801bfb8:	45b8      	cmp	r8, r7
 801bfba:	ee08 0a10 	vmov	s16, r0
 801bfbe:	f04f 0300 	mov.w	r3, #0
 801bfc2:	f04f 020a 	mov.w	r2, #10
 801bfc6:	4641      	mov	r1, r8
 801bfc8:	4620      	mov	r0, r4
 801bfca:	d106      	bne.n	801bfda <_dtoa_r+0xb0a>
 801bfcc:	f000 fc6c 	bl	801c8a8 <__multadd>
 801bfd0:	4680      	mov	r8, r0
 801bfd2:	4607      	mov	r7, r0
 801bfd4:	f109 0901 	add.w	r9, r9, #1
 801bfd8:	e772      	b.n	801bec0 <_dtoa_r+0x9f0>
 801bfda:	f000 fc65 	bl	801c8a8 <__multadd>
 801bfde:	4639      	mov	r1, r7
 801bfe0:	4680      	mov	r8, r0
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	220a      	movs	r2, #10
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	f000 fc5e 	bl	801c8a8 <__multadd>
 801bfec:	4607      	mov	r7, r0
 801bfee:	e7f1      	b.n	801bfd4 <_dtoa_r+0xb04>
 801bff0:	9b03      	ldr	r3, [sp, #12]
 801bff2:	9302      	str	r3, [sp, #8]
 801bff4:	9d01      	ldr	r5, [sp, #4]
 801bff6:	ee18 0a10 	vmov	r0, s16
 801bffa:	4631      	mov	r1, r6
 801bffc:	f7ff f9da 	bl	801b3b4 <quorem>
 801c000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c004:	9b01      	ldr	r3, [sp, #4]
 801c006:	f805 ab01 	strb.w	sl, [r5], #1
 801c00a:	1aea      	subs	r2, r5, r3
 801c00c:	9b02      	ldr	r3, [sp, #8]
 801c00e:	4293      	cmp	r3, r2
 801c010:	dd09      	ble.n	801c026 <_dtoa_r+0xb56>
 801c012:	ee18 1a10 	vmov	r1, s16
 801c016:	2300      	movs	r3, #0
 801c018:	220a      	movs	r2, #10
 801c01a:	4620      	mov	r0, r4
 801c01c:	f000 fc44 	bl	801c8a8 <__multadd>
 801c020:	ee08 0a10 	vmov	s16, r0
 801c024:	e7e7      	b.n	801bff6 <_dtoa_r+0xb26>
 801c026:	9b02      	ldr	r3, [sp, #8]
 801c028:	2b00      	cmp	r3, #0
 801c02a:	bfc8      	it	gt
 801c02c:	461d      	movgt	r5, r3
 801c02e:	9b01      	ldr	r3, [sp, #4]
 801c030:	bfd8      	it	le
 801c032:	2501      	movle	r5, #1
 801c034:	441d      	add	r5, r3
 801c036:	f04f 0800 	mov.w	r8, #0
 801c03a:	ee18 1a10 	vmov	r1, s16
 801c03e:	2201      	movs	r2, #1
 801c040:	4620      	mov	r0, r4
 801c042:	f000 fe2b 	bl	801cc9c <__lshift>
 801c046:	4631      	mov	r1, r6
 801c048:	ee08 0a10 	vmov	s16, r0
 801c04c:	f000 fe96 	bl	801cd7c <__mcmp>
 801c050:	2800      	cmp	r0, #0
 801c052:	dc91      	bgt.n	801bf78 <_dtoa_r+0xaa8>
 801c054:	d102      	bne.n	801c05c <_dtoa_r+0xb8c>
 801c056:	f01a 0f01 	tst.w	sl, #1
 801c05a:	d18d      	bne.n	801bf78 <_dtoa_r+0xaa8>
 801c05c:	462b      	mov	r3, r5
 801c05e:	461d      	mov	r5, r3
 801c060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c064:	2a30      	cmp	r2, #48	; 0x30
 801c066:	d0fa      	beq.n	801c05e <_dtoa_r+0xb8e>
 801c068:	e6d7      	b.n	801be1a <_dtoa_r+0x94a>
 801c06a:	9a01      	ldr	r2, [sp, #4]
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d184      	bne.n	801bf7a <_dtoa_r+0xaaa>
 801c070:	9b00      	ldr	r3, [sp, #0]
 801c072:	3301      	adds	r3, #1
 801c074:	9300      	str	r3, [sp, #0]
 801c076:	2331      	movs	r3, #49	; 0x31
 801c078:	7013      	strb	r3, [r2, #0]
 801c07a:	e6ce      	b.n	801be1a <_dtoa_r+0x94a>
 801c07c:	4b09      	ldr	r3, [pc, #36]	; (801c0a4 <_dtoa_r+0xbd4>)
 801c07e:	f7ff ba95 	b.w	801b5ac <_dtoa_r+0xdc>
 801c082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c084:	2b00      	cmp	r3, #0
 801c086:	f47f aa6e 	bne.w	801b566 <_dtoa_r+0x96>
 801c08a:	4b07      	ldr	r3, [pc, #28]	; (801c0a8 <_dtoa_r+0xbd8>)
 801c08c:	f7ff ba8e 	b.w	801b5ac <_dtoa_r+0xdc>
 801c090:	9b02      	ldr	r3, [sp, #8]
 801c092:	2b00      	cmp	r3, #0
 801c094:	dcae      	bgt.n	801bff4 <_dtoa_r+0xb24>
 801c096:	9b06      	ldr	r3, [sp, #24]
 801c098:	2b02      	cmp	r3, #2
 801c09a:	f73f aea8 	bgt.w	801bdee <_dtoa_r+0x91e>
 801c09e:	e7a9      	b.n	801bff4 <_dtoa_r+0xb24>
 801c0a0:	08052410 	.word	0x08052410
 801c0a4:	08052214 	.word	0x08052214
 801c0a8:	08052391 	.word	0x08052391

0801c0ac <rshift>:
 801c0ac:	6903      	ldr	r3, [r0, #16]
 801c0ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c0b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c0b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c0ba:	f100 0414 	add.w	r4, r0, #20
 801c0be:	dd45      	ble.n	801c14c <rshift+0xa0>
 801c0c0:	f011 011f 	ands.w	r1, r1, #31
 801c0c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c0c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c0cc:	d10c      	bne.n	801c0e8 <rshift+0x3c>
 801c0ce:	f100 0710 	add.w	r7, r0, #16
 801c0d2:	4629      	mov	r1, r5
 801c0d4:	42b1      	cmp	r1, r6
 801c0d6:	d334      	bcc.n	801c142 <rshift+0x96>
 801c0d8:	1a9b      	subs	r3, r3, r2
 801c0da:	009b      	lsls	r3, r3, #2
 801c0dc:	1eea      	subs	r2, r5, #3
 801c0de:	4296      	cmp	r6, r2
 801c0e0:	bf38      	it	cc
 801c0e2:	2300      	movcc	r3, #0
 801c0e4:	4423      	add	r3, r4
 801c0e6:	e015      	b.n	801c114 <rshift+0x68>
 801c0e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c0ec:	f1c1 0820 	rsb	r8, r1, #32
 801c0f0:	40cf      	lsrs	r7, r1
 801c0f2:	f105 0e04 	add.w	lr, r5, #4
 801c0f6:	46a1      	mov	r9, r4
 801c0f8:	4576      	cmp	r6, lr
 801c0fa:	46f4      	mov	ip, lr
 801c0fc:	d815      	bhi.n	801c12a <rshift+0x7e>
 801c0fe:	1a9a      	subs	r2, r3, r2
 801c100:	0092      	lsls	r2, r2, #2
 801c102:	3a04      	subs	r2, #4
 801c104:	3501      	adds	r5, #1
 801c106:	42ae      	cmp	r6, r5
 801c108:	bf38      	it	cc
 801c10a:	2200      	movcc	r2, #0
 801c10c:	18a3      	adds	r3, r4, r2
 801c10e:	50a7      	str	r7, [r4, r2]
 801c110:	b107      	cbz	r7, 801c114 <rshift+0x68>
 801c112:	3304      	adds	r3, #4
 801c114:	1b1a      	subs	r2, r3, r4
 801c116:	42a3      	cmp	r3, r4
 801c118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c11c:	bf08      	it	eq
 801c11e:	2300      	moveq	r3, #0
 801c120:	6102      	str	r2, [r0, #16]
 801c122:	bf08      	it	eq
 801c124:	6143      	streq	r3, [r0, #20]
 801c126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c12a:	f8dc c000 	ldr.w	ip, [ip]
 801c12e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c132:	ea4c 0707 	orr.w	r7, ip, r7
 801c136:	f849 7b04 	str.w	r7, [r9], #4
 801c13a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c13e:	40cf      	lsrs	r7, r1
 801c140:	e7da      	b.n	801c0f8 <rshift+0x4c>
 801c142:	f851 cb04 	ldr.w	ip, [r1], #4
 801c146:	f847 cf04 	str.w	ip, [r7, #4]!
 801c14a:	e7c3      	b.n	801c0d4 <rshift+0x28>
 801c14c:	4623      	mov	r3, r4
 801c14e:	e7e1      	b.n	801c114 <rshift+0x68>

0801c150 <__hexdig_fun>:
 801c150:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c154:	2b09      	cmp	r3, #9
 801c156:	d802      	bhi.n	801c15e <__hexdig_fun+0xe>
 801c158:	3820      	subs	r0, #32
 801c15a:	b2c0      	uxtb	r0, r0
 801c15c:	4770      	bx	lr
 801c15e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c162:	2b05      	cmp	r3, #5
 801c164:	d801      	bhi.n	801c16a <__hexdig_fun+0x1a>
 801c166:	3847      	subs	r0, #71	; 0x47
 801c168:	e7f7      	b.n	801c15a <__hexdig_fun+0xa>
 801c16a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c16e:	2b05      	cmp	r3, #5
 801c170:	d801      	bhi.n	801c176 <__hexdig_fun+0x26>
 801c172:	3827      	subs	r0, #39	; 0x27
 801c174:	e7f1      	b.n	801c15a <__hexdig_fun+0xa>
 801c176:	2000      	movs	r0, #0
 801c178:	4770      	bx	lr
	...

0801c17c <__gethex>:
 801c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c180:	ed2d 8b02 	vpush	{d8}
 801c184:	b089      	sub	sp, #36	; 0x24
 801c186:	ee08 0a10 	vmov	s16, r0
 801c18a:	9304      	str	r3, [sp, #16]
 801c18c:	4bb4      	ldr	r3, [pc, #720]	; (801c460 <__gethex+0x2e4>)
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	9301      	str	r3, [sp, #4]
 801c192:	4618      	mov	r0, r3
 801c194:	468b      	mov	fp, r1
 801c196:	4690      	mov	r8, r2
 801c198:	f7fc fc40 	bl	8018a1c <strlen>
 801c19c:	9b01      	ldr	r3, [sp, #4]
 801c19e:	f8db 2000 	ldr.w	r2, [fp]
 801c1a2:	4403      	add	r3, r0
 801c1a4:	4682      	mov	sl, r0
 801c1a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c1aa:	9305      	str	r3, [sp, #20]
 801c1ac:	1c93      	adds	r3, r2, #2
 801c1ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c1b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c1b6:	32fe      	adds	r2, #254	; 0xfe
 801c1b8:	18d1      	adds	r1, r2, r3
 801c1ba:	461f      	mov	r7, r3
 801c1bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c1c0:	9100      	str	r1, [sp, #0]
 801c1c2:	2830      	cmp	r0, #48	; 0x30
 801c1c4:	d0f8      	beq.n	801c1b8 <__gethex+0x3c>
 801c1c6:	f7ff ffc3 	bl	801c150 <__hexdig_fun>
 801c1ca:	4604      	mov	r4, r0
 801c1cc:	2800      	cmp	r0, #0
 801c1ce:	d13a      	bne.n	801c246 <__gethex+0xca>
 801c1d0:	9901      	ldr	r1, [sp, #4]
 801c1d2:	4652      	mov	r2, sl
 801c1d4:	4638      	mov	r0, r7
 801c1d6:	f001 fa33 	bl	801d640 <strncmp>
 801c1da:	4605      	mov	r5, r0
 801c1dc:	2800      	cmp	r0, #0
 801c1de:	d168      	bne.n	801c2b2 <__gethex+0x136>
 801c1e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c1e4:	eb07 060a 	add.w	r6, r7, sl
 801c1e8:	f7ff ffb2 	bl	801c150 <__hexdig_fun>
 801c1ec:	2800      	cmp	r0, #0
 801c1ee:	d062      	beq.n	801c2b6 <__gethex+0x13a>
 801c1f0:	4633      	mov	r3, r6
 801c1f2:	7818      	ldrb	r0, [r3, #0]
 801c1f4:	2830      	cmp	r0, #48	; 0x30
 801c1f6:	461f      	mov	r7, r3
 801c1f8:	f103 0301 	add.w	r3, r3, #1
 801c1fc:	d0f9      	beq.n	801c1f2 <__gethex+0x76>
 801c1fe:	f7ff ffa7 	bl	801c150 <__hexdig_fun>
 801c202:	2301      	movs	r3, #1
 801c204:	fab0 f480 	clz	r4, r0
 801c208:	0964      	lsrs	r4, r4, #5
 801c20a:	4635      	mov	r5, r6
 801c20c:	9300      	str	r3, [sp, #0]
 801c20e:	463a      	mov	r2, r7
 801c210:	4616      	mov	r6, r2
 801c212:	3201      	adds	r2, #1
 801c214:	7830      	ldrb	r0, [r6, #0]
 801c216:	f7ff ff9b 	bl	801c150 <__hexdig_fun>
 801c21a:	2800      	cmp	r0, #0
 801c21c:	d1f8      	bne.n	801c210 <__gethex+0x94>
 801c21e:	9901      	ldr	r1, [sp, #4]
 801c220:	4652      	mov	r2, sl
 801c222:	4630      	mov	r0, r6
 801c224:	f001 fa0c 	bl	801d640 <strncmp>
 801c228:	b980      	cbnz	r0, 801c24c <__gethex+0xd0>
 801c22a:	b94d      	cbnz	r5, 801c240 <__gethex+0xc4>
 801c22c:	eb06 050a 	add.w	r5, r6, sl
 801c230:	462a      	mov	r2, r5
 801c232:	4616      	mov	r6, r2
 801c234:	3201      	adds	r2, #1
 801c236:	7830      	ldrb	r0, [r6, #0]
 801c238:	f7ff ff8a 	bl	801c150 <__hexdig_fun>
 801c23c:	2800      	cmp	r0, #0
 801c23e:	d1f8      	bne.n	801c232 <__gethex+0xb6>
 801c240:	1bad      	subs	r5, r5, r6
 801c242:	00ad      	lsls	r5, r5, #2
 801c244:	e004      	b.n	801c250 <__gethex+0xd4>
 801c246:	2400      	movs	r4, #0
 801c248:	4625      	mov	r5, r4
 801c24a:	e7e0      	b.n	801c20e <__gethex+0x92>
 801c24c:	2d00      	cmp	r5, #0
 801c24e:	d1f7      	bne.n	801c240 <__gethex+0xc4>
 801c250:	7833      	ldrb	r3, [r6, #0]
 801c252:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c256:	2b50      	cmp	r3, #80	; 0x50
 801c258:	d13b      	bne.n	801c2d2 <__gethex+0x156>
 801c25a:	7873      	ldrb	r3, [r6, #1]
 801c25c:	2b2b      	cmp	r3, #43	; 0x2b
 801c25e:	d02c      	beq.n	801c2ba <__gethex+0x13e>
 801c260:	2b2d      	cmp	r3, #45	; 0x2d
 801c262:	d02e      	beq.n	801c2c2 <__gethex+0x146>
 801c264:	1c71      	adds	r1, r6, #1
 801c266:	f04f 0900 	mov.w	r9, #0
 801c26a:	7808      	ldrb	r0, [r1, #0]
 801c26c:	f7ff ff70 	bl	801c150 <__hexdig_fun>
 801c270:	1e43      	subs	r3, r0, #1
 801c272:	b2db      	uxtb	r3, r3
 801c274:	2b18      	cmp	r3, #24
 801c276:	d82c      	bhi.n	801c2d2 <__gethex+0x156>
 801c278:	f1a0 0210 	sub.w	r2, r0, #16
 801c27c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c280:	f7ff ff66 	bl	801c150 <__hexdig_fun>
 801c284:	1e43      	subs	r3, r0, #1
 801c286:	b2db      	uxtb	r3, r3
 801c288:	2b18      	cmp	r3, #24
 801c28a:	d91d      	bls.n	801c2c8 <__gethex+0x14c>
 801c28c:	f1b9 0f00 	cmp.w	r9, #0
 801c290:	d000      	beq.n	801c294 <__gethex+0x118>
 801c292:	4252      	negs	r2, r2
 801c294:	4415      	add	r5, r2
 801c296:	f8cb 1000 	str.w	r1, [fp]
 801c29a:	b1e4      	cbz	r4, 801c2d6 <__gethex+0x15a>
 801c29c:	9b00      	ldr	r3, [sp, #0]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	bf14      	ite	ne
 801c2a2:	2700      	movne	r7, #0
 801c2a4:	2706      	moveq	r7, #6
 801c2a6:	4638      	mov	r0, r7
 801c2a8:	b009      	add	sp, #36	; 0x24
 801c2aa:	ecbd 8b02 	vpop	{d8}
 801c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b2:	463e      	mov	r6, r7
 801c2b4:	4625      	mov	r5, r4
 801c2b6:	2401      	movs	r4, #1
 801c2b8:	e7ca      	b.n	801c250 <__gethex+0xd4>
 801c2ba:	f04f 0900 	mov.w	r9, #0
 801c2be:	1cb1      	adds	r1, r6, #2
 801c2c0:	e7d3      	b.n	801c26a <__gethex+0xee>
 801c2c2:	f04f 0901 	mov.w	r9, #1
 801c2c6:	e7fa      	b.n	801c2be <__gethex+0x142>
 801c2c8:	230a      	movs	r3, #10
 801c2ca:	fb03 0202 	mla	r2, r3, r2, r0
 801c2ce:	3a10      	subs	r2, #16
 801c2d0:	e7d4      	b.n	801c27c <__gethex+0x100>
 801c2d2:	4631      	mov	r1, r6
 801c2d4:	e7df      	b.n	801c296 <__gethex+0x11a>
 801c2d6:	1bf3      	subs	r3, r6, r7
 801c2d8:	3b01      	subs	r3, #1
 801c2da:	4621      	mov	r1, r4
 801c2dc:	2b07      	cmp	r3, #7
 801c2de:	dc0b      	bgt.n	801c2f8 <__gethex+0x17c>
 801c2e0:	ee18 0a10 	vmov	r0, s16
 801c2e4:	f000 fa7e 	bl	801c7e4 <_Balloc>
 801c2e8:	4604      	mov	r4, r0
 801c2ea:	b940      	cbnz	r0, 801c2fe <__gethex+0x182>
 801c2ec:	4b5d      	ldr	r3, [pc, #372]	; (801c464 <__gethex+0x2e8>)
 801c2ee:	4602      	mov	r2, r0
 801c2f0:	21de      	movs	r1, #222	; 0xde
 801c2f2:	485d      	ldr	r0, [pc, #372]	; (801c468 <__gethex+0x2ec>)
 801c2f4:	f001 f9c6 	bl	801d684 <__assert_func>
 801c2f8:	3101      	adds	r1, #1
 801c2fa:	105b      	asrs	r3, r3, #1
 801c2fc:	e7ee      	b.n	801c2dc <__gethex+0x160>
 801c2fe:	f100 0914 	add.w	r9, r0, #20
 801c302:	f04f 0b00 	mov.w	fp, #0
 801c306:	f1ca 0301 	rsb	r3, sl, #1
 801c30a:	f8cd 9008 	str.w	r9, [sp, #8]
 801c30e:	f8cd b000 	str.w	fp, [sp]
 801c312:	9306      	str	r3, [sp, #24]
 801c314:	42b7      	cmp	r7, r6
 801c316:	d340      	bcc.n	801c39a <__gethex+0x21e>
 801c318:	9802      	ldr	r0, [sp, #8]
 801c31a:	9b00      	ldr	r3, [sp, #0]
 801c31c:	f840 3b04 	str.w	r3, [r0], #4
 801c320:	eba0 0009 	sub.w	r0, r0, r9
 801c324:	1080      	asrs	r0, r0, #2
 801c326:	0146      	lsls	r6, r0, #5
 801c328:	6120      	str	r0, [r4, #16]
 801c32a:	4618      	mov	r0, r3
 801c32c:	f000 fb4c 	bl	801c9c8 <__hi0bits>
 801c330:	1a30      	subs	r0, r6, r0
 801c332:	f8d8 6000 	ldr.w	r6, [r8]
 801c336:	42b0      	cmp	r0, r6
 801c338:	dd63      	ble.n	801c402 <__gethex+0x286>
 801c33a:	1b87      	subs	r7, r0, r6
 801c33c:	4639      	mov	r1, r7
 801c33e:	4620      	mov	r0, r4
 801c340:	f000 fef0 	bl	801d124 <__any_on>
 801c344:	4682      	mov	sl, r0
 801c346:	b1a8      	cbz	r0, 801c374 <__gethex+0x1f8>
 801c348:	1e7b      	subs	r3, r7, #1
 801c34a:	1159      	asrs	r1, r3, #5
 801c34c:	f003 021f 	and.w	r2, r3, #31
 801c350:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c354:	f04f 0a01 	mov.w	sl, #1
 801c358:	fa0a f202 	lsl.w	r2, sl, r2
 801c35c:	420a      	tst	r2, r1
 801c35e:	d009      	beq.n	801c374 <__gethex+0x1f8>
 801c360:	4553      	cmp	r3, sl
 801c362:	dd05      	ble.n	801c370 <__gethex+0x1f4>
 801c364:	1eb9      	subs	r1, r7, #2
 801c366:	4620      	mov	r0, r4
 801c368:	f000 fedc 	bl	801d124 <__any_on>
 801c36c:	2800      	cmp	r0, #0
 801c36e:	d145      	bne.n	801c3fc <__gethex+0x280>
 801c370:	f04f 0a02 	mov.w	sl, #2
 801c374:	4639      	mov	r1, r7
 801c376:	4620      	mov	r0, r4
 801c378:	f7ff fe98 	bl	801c0ac <rshift>
 801c37c:	443d      	add	r5, r7
 801c37e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c382:	42ab      	cmp	r3, r5
 801c384:	da4c      	bge.n	801c420 <__gethex+0x2a4>
 801c386:	ee18 0a10 	vmov	r0, s16
 801c38a:	4621      	mov	r1, r4
 801c38c:	f000 fa6a 	bl	801c864 <_Bfree>
 801c390:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c392:	2300      	movs	r3, #0
 801c394:	6013      	str	r3, [r2, #0]
 801c396:	27a3      	movs	r7, #163	; 0xa3
 801c398:	e785      	b.n	801c2a6 <__gethex+0x12a>
 801c39a:	1e73      	subs	r3, r6, #1
 801c39c:	9a05      	ldr	r2, [sp, #20]
 801c39e:	9303      	str	r3, [sp, #12]
 801c3a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c3a4:	4293      	cmp	r3, r2
 801c3a6:	d019      	beq.n	801c3dc <__gethex+0x260>
 801c3a8:	f1bb 0f20 	cmp.w	fp, #32
 801c3ac:	d107      	bne.n	801c3be <__gethex+0x242>
 801c3ae:	9b02      	ldr	r3, [sp, #8]
 801c3b0:	9a00      	ldr	r2, [sp, #0]
 801c3b2:	f843 2b04 	str.w	r2, [r3], #4
 801c3b6:	9302      	str	r3, [sp, #8]
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	9300      	str	r3, [sp, #0]
 801c3bc:	469b      	mov	fp, r3
 801c3be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c3c2:	f7ff fec5 	bl	801c150 <__hexdig_fun>
 801c3c6:	9b00      	ldr	r3, [sp, #0]
 801c3c8:	f000 000f 	and.w	r0, r0, #15
 801c3cc:	fa00 f00b 	lsl.w	r0, r0, fp
 801c3d0:	4303      	orrs	r3, r0
 801c3d2:	9300      	str	r3, [sp, #0]
 801c3d4:	f10b 0b04 	add.w	fp, fp, #4
 801c3d8:	9b03      	ldr	r3, [sp, #12]
 801c3da:	e00d      	b.n	801c3f8 <__gethex+0x27c>
 801c3dc:	9b03      	ldr	r3, [sp, #12]
 801c3de:	9a06      	ldr	r2, [sp, #24]
 801c3e0:	4413      	add	r3, r2
 801c3e2:	42bb      	cmp	r3, r7
 801c3e4:	d3e0      	bcc.n	801c3a8 <__gethex+0x22c>
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	9901      	ldr	r1, [sp, #4]
 801c3ea:	9307      	str	r3, [sp, #28]
 801c3ec:	4652      	mov	r2, sl
 801c3ee:	f001 f927 	bl	801d640 <strncmp>
 801c3f2:	9b07      	ldr	r3, [sp, #28]
 801c3f4:	2800      	cmp	r0, #0
 801c3f6:	d1d7      	bne.n	801c3a8 <__gethex+0x22c>
 801c3f8:	461e      	mov	r6, r3
 801c3fa:	e78b      	b.n	801c314 <__gethex+0x198>
 801c3fc:	f04f 0a03 	mov.w	sl, #3
 801c400:	e7b8      	b.n	801c374 <__gethex+0x1f8>
 801c402:	da0a      	bge.n	801c41a <__gethex+0x29e>
 801c404:	1a37      	subs	r7, r6, r0
 801c406:	4621      	mov	r1, r4
 801c408:	ee18 0a10 	vmov	r0, s16
 801c40c:	463a      	mov	r2, r7
 801c40e:	f000 fc45 	bl	801cc9c <__lshift>
 801c412:	1bed      	subs	r5, r5, r7
 801c414:	4604      	mov	r4, r0
 801c416:	f100 0914 	add.w	r9, r0, #20
 801c41a:	f04f 0a00 	mov.w	sl, #0
 801c41e:	e7ae      	b.n	801c37e <__gethex+0x202>
 801c420:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c424:	42a8      	cmp	r0, r5
 801c426:	dd72      	ble.n	801c50e <__gethex+0x392>
 801c428:	1b45      	subs	r5, r0, r5
 801c42a:	42ae      	cmp	r6, r5
 801c42c:	dc36      	bgt.n	801c49c <__gethex+0x320>
 801c42e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c432:	2b02      	cmp	r3, #2
 801c434:	d02a      	beq.n	801c48c <__gethex+0x310>
 801c436:	2b03      	cmp	r3, #3
 801c438:	d02c      	beq.n	801c494 <__gethex+0x318>
 801c43a:	2b01      	cmp	r3, #1
 801c43c:	d11c      	bne.n	801c478 <__gethex+0x2fc>
 801c43e:	42ae      	cmp	r6, r5
 801c440:	d11a      	bne.n	801c478 <__gethex+0x2fc>
 801c442:	2e01      	cmp	r6, #1
 801c444:	d112      	bne.n	801c46c <__gethex+0x2f0>
 801c446:	9a04      	ldr	r2, [sp, #16]
 801c448:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c44c:	6013      	str	r3, [r2, #0]
 801c44e:	2301      	movs	r3, #1
 801c450:	6123      	str	r3, [r4, #16]
 801c452:	f8c9 3000 	str.w	r3, [r9]
 801c456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c458:	2762      	movs	r7, #98	; 0x62
 801c45a:	601c      	str	r4, [r3, #0]
 801c45c:	e723      	b.n	801c2a6 <__gethex+0x12a>
 801c45e:	bf00      	nop
 801c460:	08052488 	.word	0x08052488
 801c464:	08052410 	.word	0x08052410
 801c468:	08052421 	.word	0x08052421
 801c46c:	1e71      	subs	r1, r6, #1
 801c46e:	4620      	mov	r0, r4
 801c470:	f000 fe58 	bl	801d124 <__any_on>
 801c474:	2800      	cmp	r0, #0
 801c476:	d1e6      	bne.n	801c446 <__gethex+0x2ca>
 801c478:	ee18 0a10 	vmov	r0, s16
 801c47c:	4621      	mov	r1, r4
 801c47e:	f000 f9f1 	bl	801c864 <_Bfree>
 801c482:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c484:	2300      	movs	r3, #0
 801c486:	6013      	str	r3, [r2, #0]
 801c488:	2750      	movs	r7, #80	; 0x50
 801c48a:	e70c      	b.n	801c2a6 <__gethex+0x12a>
 801c48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d1f2      	bne.n	801c478 <__gethex+0x2fc>
 801c492:	e7d8      	b.n	801c446 <__gethex+0x2ca>
 801c494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c496:	2b00      	cmp	r3, #0
 801c498:	d1d5      	bne.n	801c446 <__gethex+0x2ca>
 801c49a:	e7ed      	b.n	801c478 <__gethex+0x2fc>
 801c49c:	1e6f      	subs	r7, r5, #1
 801c49e:	f1ba 0f00 	cmp.w	sl, #0
 801c4a2:	d131      	bne.n	801c508 <__gethex+0x38c>
 801c4a4:	b127      	cbz	r7, 801c4b0 <__gethex+0x334>
 801c4a6:	4639      	mov	r1, r7
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	f000 fe3b 	bl	801d124 <__any_on>
 801c4ae:	4682      	mov	sl, r0
 801c4b0:	117b      	asrs	r3, r7, #5
 801c4b2:	2101      	movs	r1, #1
 801c4b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c4b8:	f007 071f 	and.w	r7, r7, #31
 801c4bc:	fa01 f707 	lsl.w	r7, r1, r7
 801c4c0:	421f      	tst	r7, r3
 801c4c2:	4629      	mov	r1, r5
 801c4c4:	4620      	mov	r0, r4
 801c4c6:	bf18      	it	ne
 801c4c8:	f04a 0a02 	orrne.w	sl, sl, #2
 801c4cc:	1b76      	subs	r6, r6, r5
 801c4ce:	f7ff fded 	bl	801c0ac <rshift>
 801c4d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c4d6:	2702      	movs	r7, #2
 801c4d8:	f1ba 0f00 	cmp.w	sl, #0
 801c4dc:	d048      	beq.n	801c570 <__gethex+0x3f4>
 801c4de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c4e2:	2b02      	cmp	r3, #2
 801c4e4:	d015      	beq.n	801c512 <__gethex+0x396>
 801c4e6:	2b03      	cmp	r3, #3
 801c4e8:	d017      	beq.n	801c51a <__gethex+0x39e>
 801c4ea:	2b01      	cmp	r3, #1
 801c4ec:	d109      	bne.n	801c502 <__gethex+0x386>
 801c4ee:	f01a 0f02 	tst.w	sl, #2
 801c4f2:	d006      	beq.n	801c502 <__gethex+0x386>
 801c4f4:	f8d9 0000 	ldr.w	r0, [r9]
 801c4f8:	ea4a 0a00 	orr.w	sl, sl, r0
 801c4fc:	f01a 0f01 	tst.w	sl, #1
 801c500:	d10e      	bne.n	801c520 <__gethex+0x3a4>
 801c502:	f047 0710 	orr.w	r7, r7, #16
 801c506:	e033      	b.n	801c570 <__gethex+0x3f4>
 801c508:	f04f 0a01 	mov.w	sl, #1
 801c50c:	e7d0      	b.n	801c4b0 <__gethex+0x334>
 801c50e:	2701      	movs	r7, #1
 801c510:	e7e2      	b.n	801c4d8 <__gethex+0x35c>
 801c512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c514:	f1c3 0301 	rsb	r3, r3, #1
 801c518:	9315      	str	r3, [sp, #84]	; 0x54
 801c51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d0f0      	beq.n	801c502 <__gethex+0x386>
 801c520:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c524:	f104 0314 	add.w	r3, r4, #20
 801c528:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c52c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c530:	f04f 0c00 	mov.w	ip, #0
 801c534:	4618      	mov	r0, r3
 801c536:	f853 2b04 	ldr.w	r2, [r3], #4
 801c53a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c53e:	d01c      	beq.n	801c57a <__gethex+0x3fe>
 801c540:	3201      	adds	r2, #1
 801c542:	6002      	str	r2, [r0, #0]
 801c544:	2f02      	cmp	r7, #2
 801c546:	f104 0314 	add.w	r3, r4, #20
 801c54a:	d13f      	bne.n	801c5cc <__gethex+0x450>
 801c54c:	f8d8 2000 	ldr.w	r2, [r8]
 801c550:	3a01      	subs	r2, #1
 801c552:	42b2      	cmp	r2, r6
 801c554:	d10a      	bne.n	801c56c <__gethex+0x3f0>
 801c556:	1171      	asrs	r1, r6, #5
 801c558:	2201      	movs	r2, #1
 801c55a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c55e:	f006 061f 	and.w	r6, r6, #31
 801c562:	fa02 f606 	lsl.w	r6, r2, r6
 801c566:	421e      	tst	r6, r3
 801c568:	bf18      	it	ne
 801c56a:	4617      	movne	r7, r2
 801c56c:	f047 0720 	orr.w	r7, r7, #32
 801c570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c572:	601c      	str	r4, [r3, #0]
 801c574:	9b04      	ldr	r3, [sp, #16]
 801c576:	601d      	str	r5, [r3, #0]
 801c578:	e695      	b.n	801c2a6 <__gethex+0x12a>
 801c57a:	4299      	cmp	r1, r3
 801c57c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c580:	d8d8      	bhi.n	801c534 <__gethex+0x3b8>
 801c582:	68a3      	ldr	r3, [r4, #8]
 801c584:	459b      	cmp	fp, r3
 801c586:	db19      	blt.n	801c5bc <__gethex+0x440>
 801c588:	6861      	ldr	r1, [r4, #4]
 801c58a:	ee18 0a10 	vmov	r0, s16
 801c58e:	3101      	adds	r1, #1
 801c590:	f000 f928 	bl	801c7e4 <_Balloc>
 801c594:	4681      	mov	r9, r0
 801c596:	b918      	cbnz	r0, 801c5a0 <__gethex+0x424>
 801c598:	4b1a      	ldr	r3, [pc, #104]	; (801c604 <__gethex+0x488>)
 801c59a:	4602      	mov	r2, r0
 801c59c:	2184      	movs	r1, #132	; 0x84
 801c59e:	e6a8      	b.n	801c2f2 <__gethex+0x176>
 801c5a0:	6922      	ldr	r2, [r4, #16]
 801c5a2:	3202      	adds	r2, #2
 801c5a4:	f104 010c 	add.w	r1, r4, #12
 801c5a8:	0092      	lsls	r2, r2, #2
 801c5aa:	300c      	adds	r0, #12
 801c5ac:	f000 f90c 	bl	801c7c8 <memcpy>
 801c5b0:	4621      	mov	r1, r4
 801c5b2:	ee18 0a10 	vmov	r0, s16
 801c5b6:	f000 f955 	bl	801c864 <_Bfree>
 801c5ba:	464c      	mov	r4, r9
 801c5bc:	6923      	ldr	r3, [r4, #16]
 801c5be:	1c5a      	adds	r2, r3, #1
 801c5c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c5c4:	6122      	str	r2, [r4, #16]
 801c5c6:	2201      	movs	r2, #1
 801c5c8:	615a      	str	r2, [r3, #20]
 801c5ca:	e7bb      	b.n	801c544 <__gethex+0x3c8>
 801c5cc:	6922      	ldr	r2, [r4, #16]
 801c5ce:	455a      	cmp	r2, fp
 801c5d0:	dd0b      	ble.n	801c5ea <__gethex+0x46e>
 801c5d2:	2101      	movs	r1, #1
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	f7ff fd69 	bl	801c0ac <rshift>
 801c5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c5de:	3501      	adds	r5, #1
 801c5e0:	42ab      	cmp	r3, r5
 801c5e2:	f6ff aed0 	blt.w	801c386 <__gethex+0x20a>
 801c5e6:	2701      	movs	r7, #1
 801c5e8:	e7c0      	b.n	801c56c <__gethex+0x3f0>
 801c5ea:	f016 061f 	ands.w	r6, r6, #31
 801c5ee:	d0fa      	beq.n	801c5e6 <__gethex+0x46a>
 801c5f0:	4453      	add	r3, sl
 801c5f2:	f1c6 0620 	rsb	r6, r6, #32
 801c5f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c5fa:	f000 f9e5 	bl	801c9c8 <__hi0bits>
 801c5fe:	42b0      	cmp	r0, r6
 801c600:	dbe7      	blt.n	801c5d2 <__gethex+0x456>
 801c602:	e7f0      	b.n	801c5e6 <__gethex+0x46a>
 801c604:	08052410 	.word	0x08052410

0801c608 <L_shift>:
 801c608:	f1c2 0208 	rsb	r2, r2, #8
 801c60c:	0092      	lsls	r2, r2, #2
 801c60e:	b570      	push	{r4, r5, r6, lr}
 801c610:	f1c2 0620 	rsb	r6, r2, #32
 801c614:	6843      	ldr	r3, [r0, #4]
 801c616:	6804      	ldr	r4, [r0, #0]
 801c618:	fa03 f506 	lsl.w	r5, r3, r6
 801c61c:	432c      	orrs	r4, r5
 801c61e:	40d3      	lsrs	r3, r2
 801c620:	6004      	str	r4, [r0, #0]
 801c622:	f840 3f04 	str.w	r3, [r0, #4]!
 801c626:	4288      	cmp	r0, r1
 801c628:	d3f4      	bcc.n	801c614 <L_shift+0xc>
 801c62a:	bd70      	pop	{r4, r5, r6, pc}

0801c62c <__match>:
 801c62c:	b530      	push	{r4, r5, lr}
 801c62e:	6803      	ldr	r3, [r0, #0]
 801c630:	3301      	adds	r3, #1
 801c632:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c636:	b914      	cbnz	r4, 801c63e <__match+0x12>
 801c638:	6003      	str	r3, [r0, #0]
 801c63a:	2001      	movs	r0, #1
 801c63c:	bd30      	pop	{r4, r5, pc}
 801c63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c646:	2d19      	cmp	r5, #25
 801c648:	bf98      	it	ls
 801c64a:	3220      	addls	r2, #32
 801c64c:	42a2      	cmp	r2, r4
 801c64e:	d0f0      	beq.n	801c632 <__match+0x6>
 801c650:	2000      	movs	r0, #0
 801c652:	e7f3      	b.n	801c63c <__match+0x10>

0801c654 <__hexnan>:
 801c654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c658:	680b      	ldr	r3, [r1, #0]
 801c65a:	115e      	asrs	r6, r3, #5
 801c65c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c660:	f013 031f 	ands.w	r3, r3, #31
 801c664:	b087      	sub	sp, #28
 801c666:	bf18      	it	ne
 801c668:	3604      	addne	r6, #4
 801c66a:	2500      	movs	r5, #0
 801c66c:	1f37      	subs	r7, r6, #4
 801c66e:	4690      	mov	r8, r2
 801c670:	6802      	ldr	r2, [r0, #0]
 801c672:	9301      	str	r3, [sp, #4]
 801c674:	4682      	mov	sl, r0
 801c676:	f846 5c04 	str.w	r5, [r6, #-4]
 801c67a:	46b9      	mov	r9, r7
 801c67c:	463c      	mov	r4, r7
 801c67e:	9502      	str	r5, [sp, #8]
 801c680:	46ab      	mov	fp, r5
 801c682:	7851      	ldrb	r1, [r2, #1]
 801c684:	1c53      	adds	r3, r2, #1
 801c686:	9303      	str	r3, [sp, #12]
 801c688:	b341      	cbz	r1, 801c6dc <__hexnan+0x88>
 801c68a:	4608      	mov	r0, r1
 801c68c:	9205      	str	r2, [sp, #20]
 801c68e:	9104      	str	r1, [sp, #16]
 801c690:	f7ff fd5e 	bl	801c150 <__hexdig_fun>
 801c694:	2800      	cmp	r0, #0
 801c696:	d14f      	bne.n	801c738 <__hexnan+0xe4>
 801c698:	9904      	ldr	r1, [sp, #16]
 801c69a:	9a05      	ldr	r2, [sp, #20]
 801c69c:	2920      	cmp	r1, #32
 801c69e:	d818      	bhi.n	801c6d2 <__hexnan+0x7e>
 801c6a0:	9b02      	ldr	r3, [sp, #8]
 801c6a2:	459b      	cmp	fp, r3
 801c6a4:	dd13      	ble.n	801c6ce <__hexnan+0x7a>
 801c6a6:	454c      	cmp	r4, r9
 801c6a8:	d206      	bcs.n	801c6b8 <__hexnan+0x64>
 801c6aa:	2d07      	cmp	r5, #7
 801c6ac:	dc04      	bgt.n	801c6b8 <__hexnan+0x64>
 801c6ae:	462a      	mov	r2, r5
 801c6b0:	4649      	mov	r1, r9
 801c6b2:	4620      	mov	r0, r4
 801c6b4:	f7ff ffa8 	bl	801c608 <L_shift>
 801c6b8:	4544      	cmp	r4, r8
 801c6ba:	d950      	bls.n	801c75e <__hexnan+0x10a>
 801c6bc:	2300      	movs	r3, #0
 801c6be:	f1a4 0904 	sub.w	r9, r4, #4
 801c6c2:	f844 3c04 	str.w	r3, [r4, #-4]
 801c6c6:	f8cd b008 	str.w	fp, [sp, #8]
 801c6ca:	464c      	mov	r4, r9
 801c6cc:	461d      	mov	r5, r3
 801c6ce:	9a03      	ldr	r2, [sp, #12]
 801c6d0:	e7d7      	b.n	801c682 <__hexnan+0x2e>
 801c6d2:	2929      	cmp	r1, #41	; 0x29
 801c6d4:	d156      	bne.n	801c784 <__hexnan+0x130>
 801c6d6:	3202      	adds	r2, #2
 801c6d8:	f8ca 2000 	str.w	r2, [sl]
 801c6dc:	f1bb 0f00 	cmp.w	fp, #0
 801c6e0:	d050      	beq.n	801c784 <__hexnan+0x130>
 801c6e2:	454c      	cmp	r4, r9
 801c6e4:	d206      	bcs.n	801c6f4 <__hexnan+0xa0>
 801c6e6:	2d07      	cmp	r5, #7
 801c6e8:	dc04      	bgt.n	801c6f4 <__hexnan+0xa0>
 801c6ea:	462a      	mov	r2, r5
 801c6ec:	4649      	mov	r1, r9
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f7ff ff8a 	bl	801c608 <L_shift>
 801c6f4:	4544      	cmp	r4, r8
 801c6f6:	d934      	bls.n	801c762 <__hexnan+0x10e>
 801c6f8:	f1a8 0204 	sub.w	r2, r8, #4
 801c6fc:	4623      	mov	r3, r4
 801c6fe:	f853 1b04 	ldr.w	r1, [r3], #4
 801c702:	f842 1f04 	str.w	r1, [r2, #4]!
 801c706:	429f      	cmp	r7, r3
 801c708:	d2f9      	bcs.n	801c6fe <__hexnan+0xaa>
 801c70a:	1b3b      	subs	r3, r7, r4
 801c70c:	f023 0303 	bic.w	r3, r3, #3
 801c710:	3304      	adds	r3, #4
 801c712:	3401      	adds	r4, #1
 801c714:	3e03      	subs	r6, #3
 801c716:	42b4      	cmp	r4, r6
 801c718:	bf88      	it	hi
 801c71a:	2304      	movhi	r3, #4
 801c71c:	4443      	add	r3, r8
 801c71e:	2200      	movs	r2, #0
 801c720:	f843 2b04 	str.w	r2, [r3], #4
 801c724:	429f      	cmp	r7, r3
 801c726:	d2fb      	bcs.n	801c720 <__hexnan+0xcc>
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	b91b      	cbnz	r3, 801c734 <__hexnan+0xe0>
 801c72c:	4547      	cmp	r7, r8
 801c72e:	d127      	bne.n	801c780 <__hexnan+0x12c>
 801c730:	2301      	movs	r3, #1
 801c732:	603b      	str	r3, [r7, #0]
 801c734:	2005      	movs	r0, #5
 801c736:	e026      	b.n	801c786 <__hexnan+0x132>
 801c738:	3501      	adds	r5, #1
 801c73a:	2d08      	cmp	r5, #8
 801c73c:	f10b 0b01 	add.w	fp, fp, #1
 801c740:	dd06      	ble.n	801c750 <__hexnan+0xfc>
 801c742:	4544      	cmp	r4, r8
 801c744:	d9c3      	bls.n	801c6ce <__hexnan+0x7a>
 801c746:	2300      	movs	r3, #0
 801c748:	f844 3c04 	str.w	r3, [r4, #-4]
 801c74c:	2501      	movs	r5, #1
 801c74e:	3c04      	subs	r4, #4
 801c750:	6822      	ldr	r2, [r4, #0]
 801c752:	f000 000f 	and.w	r0, r0, #15
 801c756:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c75a:	6022      	str	r2, [r4, #0]
 801c75c:	e7b7      	b.n	801c6ce <__hexnan+0x7a>
 801c75e:	2508      	movs	r5, #8
 801c760:	e7b5      	b.n	801c6ce <__hexnan+0x7a>
 801c762:	9b01      	ldr	r3, [sp, #4]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d0df      	beq.n	801c728 <__hexnan+0xd4>
 801c768:	f04f 32ff 	mov.w	r2, #4294967295
 801c76c:	f1c3 0320 	rsb	r3, r3, #32
 801c770:	fa22 f303 	lsr.w	r3, r2, r3
 801c774:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c778:	401a      	ands	r2, r3
 801c77a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c77e:	e7d3      	b.n	801c728 <__hexnan+0xd4>
 801c780:	3f04      	subs	r7, #4
 801c782:	e7d1      	b.n	801c728 <__hexnan+0xd4>
 801c784:	2004      	movs	r0, #4
 801c786:	b007      	add	sp, #28
 801c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c78c <_localeconv_r>:
 801c78c:	4800      	ldr	r0, [pc, #0]	; (801c790 <_localeconv_r+0x4>)
 801c78e:	4770      	bx	lr
 801c790:	200001bc 	.word	0x200001bc

0801c794 <malloc>:
 801c794:	4b02      	ldr	r3, [pc, #8]	; (801c7a0 <malloc+0xc>)
 801c796:	4601      	mov	r1, r0
 801c798:	6818      	ldr	r0, [r3, #0]
 801c79a:	f000 bd67 	b.w	801d26c <_malloc_r>
 801c79e:	bf00      	nop
 801c7a0:	20000064 	.word	0x20000064

0801c7a4 <__ascii_mbtowc>:
 801c7a4:	b082      	sub	sp, #8
 801c7a6:	b901      	cbnz	r1, 801c7aa <__ascii_mbtowc+0x6>
 801c7a8:	a901      	add	r1, sp, #4
 801c7aa:	b142      	cbz	r2, 801c7be <__ascii_mbtowc+0x1a>
 801c7ac:	b14b      	cbz	r3, 801c7c2 <__ascii_mbtowc+0x1e>
 801c7ae:	7813      	ldrb	r3, [r2, #0]
 801c7b0:	600b      	str	r3, [r1, #0]
 801c7b2:	7812      	ldrb	r2, [r2, #0]
 801c7b4:	1e10      	subs	r0, r2, #0
 801c7b6:	bf18      	it	ne
 801c7b8:	2001      	movne	r0, #1
 801c7ba:	b002      	add	sp, #8
 801c7bc:	4770      	bx	lr
 801c7be:	4610      	mov	r0, r2
 801c7c0:	e7fb      	b.n	801c7ba <__ascii_mbtowc+0x16>
 801c7c2:	f06f 0001 	mvn.w	r0, #1
 801c7c6:	e7f8      	b.n	801c7ba <__ascii_mbtowc+0x16>

0801c7c8 <memcpy>:
 801c7c8:	440a      	add	r2, r1
 801c7ca:	4291      	cmp	r1, r2
 801c7cc:	f100 33ff 	add.w	r3, r0, #4294967295
 801c7d0:	d100      	bne.n	801c7d4 <memcpy+0xc>
 801c7d2:	4770      	bx	lr
 801c7d4:	b510      	push	{r4, lr}
 801c7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c7da:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c7de:	4291      	cmp	r1, r2
 801c7e0:	d1f9      	bne.n	801c7d6 <memcpy+0xe>
 801c7e2:	bd10      	pop	{r4, pc}

0801c7e4 <_Balloc>:
 801c7e4:	b570      	push	{r4, r5, r6, lr}
 801c7e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c7e8:	4604      	mov	r4, r0
 801c7ea:	460d      	mov	r5, r1
 801c7ec:	b976      	cbnz	r6, 801c80c <_Balloc+0x28>
 801c7ee:	2010      	movs	r0, #16
 801c7f0:	f7ff ffd0 	bl	801c794 <malloc>
 801c7f4:	4602      	mov	r2, r0
 801c7f6:	6260      	str	r0, [r4, #36]	; 0x24
 801c7f8:	b920      	cbnz	r0, 801c804 <_Balloc+0x20>
 801c7fa:	4b18      	ldr	r3, [pc, #96]	; (801c85c <_Balloc+0x78>)
 801c7fc:	4818      	ldr	r0, [pc, #96]	; (801c860 <_Balloc+0x7c>)
 801c7fe:	2166      	movs	r1, #102	; 0x66
 801c800:	f000 ff40 	bl	801d684 <__assert_func>
 801c804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c808:	6006      	str	r6, [r0, #0]
 801c80a:	60c6      	str	r6, [r0, #12]
 801c80c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c80e:	68f3      	ldr	r3, [r6, #12]
 801c810:	b183      	cbz	r3, 801c834 <_Balloc+0x50>
 801c812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c814:	68db      	ldr	r3, [r3, #12]
 801c816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c81a:	b9b8      	cbnz	r0, 801c84c <_Balloc+0x68>
 801c81c:	2101      	movs	r1, #1
 801c81e:	fa01 f605 	lsl.w	r6, r1, r5
 801c822:	1d72      	adds	r2, r6, #5
 801c824:	0092      	lsls	r2, r2, #2
 801c826:	4620      	mov	r0, r4
 801c828:	f000 fc9d 	bl	801d166 <_calloc_r>
 801c82c:	b160      	cbz	r0, 801c848 <_Balloc+0x64>
 801c82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c832:	e00e      	b.n	801c852 <_Balloc+0x6e>
 801c834:	2221      	movs	r2, #33	; 0x21
 801c836:	2104      	movs	r1, #4
 801c838:	4620      	mov	r0, r4
 801c83a:	f000 fc94 	bl	801d166 <_calloc_r>
 801c83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c840:	60f0      	str	r0, [r6, #12]
 801c842:	68db      	ldr	r3, [r3, #12]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d1e4      	bne.n	801c812 <_Balloc+0x2e>
 801c848:	2000      	movs	r0, #0
 801c84a:	bd70      	pop	{r4, r5, r6, pc}
 801c84c:	6802      	ldr	r2, [r0, #0]
 801c84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c852:	2300      	movs	r3, #0
 801c854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c858:	e7f7      	b.n	801c84a <_Balloc+0x66>
 801c85a:	bf00      	nop
 801c85c:	0805239e 	.word	0x0805239e
 801c860:	0805249c 	.word	0x0805249c

0801c864 <_Bfree>:
 801c864:	b570      	push	{r4, r5, r6, lr}
 801c866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c868:	4605      	mov	r5, r0
 801c86a:	460c      	mov	r4, r1
 801c86c:	b976      	cbnz	r6, 801c88c <_Bfree+0x28>
 801c86e:	2010      	movs	r0, #16
 801c870:	f7ff ff90 	bl	801c794 <malloc>
 801c874:	4602      	mov	r2, r0
 801c876:	6268      	str	r0, [r5, #36]	; 0x24
 801c878:	b920      	cbnz	r0, 801c884 <_Bfree+0x20>
 801c87a:	4b09      	ldr	r3, [pc, #36]	; (801c8a0 <_Bfree+0x3c>)
 801c87c:	4809      	ldr	r0, [pc, #36]	; (801c8a4 <_Bfree+0x40>)
 801c87e:	218a      	movs	r1, #138	; 0x8a
 801c880:	f000 ff00 	bl	801d684 <__assert_func>
 801c884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c888:	6006      	str	r6, [r0, #0]
 801c88a:	60c6      	str	r6, [r0, #12]
 801c88c:	b13c      	cbz	r4, 801c89e <_Bfree+0x3a>
 801c88e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c890:	6862      	ldr	r2, [r4, #4]
 801c892:	68db      	ldr	r3, [r3, #12]
 801c894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c898:	6021      	str	r1, [r4, #0]
 801c89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c89e:	bd70      	pop	{r4, r5, r6, pc}
 801c8a0:	0805239e 	.word	0x0805239e
 801c8a4:	0805249c 	.word	0x0805249c

0801c8a8 <__multadd>:
 801c8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8ac:	690d      	ldr	r5, [r1, #16]
 801c8ae:	4607      	mov	r7, r0
 801c8b0:	460c      	mov	r4, r1
 801c8b2:	461e      	mov	r6, r3
 801c8b4:	f101 0c14 	add.w	ip, r1, #20
 801c8b8:	2000      	movs	r0, #0
 801c8ba:	f8dc 3000 	ldr.w	r3, [ip]
 801c8be:	b299      	uxth	r1, r3
 801c8c0:	fb02 6101 	mla	r1, r2, r1, r6
 801c8c4:	0c1e      	lsrs	r6, r3, #16
 801c8c6:	0c0b      	lsrs	r3, r1, #16
 801c8c8:	fb02 3306 	mla	r3, r2, r6, r3
 801c8cc:	b289      	uxth	r1, r1
 801c8ce:	3001      	adds	r0, #1
 801c8d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c8d4:	4285      	cmp	r5, r0
 801c8d6:	f84c 1b04 	str.w	r1, [ip], #4
 801c8da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c8de:	dcec      	bgt.n	801c8ba <__multadd+0x12>
 801c8e0:	b30e      	cbz	r6, 801c926 <__multadd+0x7e>
 801c8e2:	68a3      	ldr	r3, [r4, #8]
 801c8e4:	42ab      	cmp	r3, r5
 801c8e6:	dc19      	bgt.n	801c91c <__multadd+0x74>
 801c8e8:	6861      	ldr	r1, [r4, #4]
 801c8ea:	4638      	mov	r0, r7
 801c8ec:	3101      	adds	r1, #1
 801c8ee:	f7ff ff79 	bl	801c7e4 <_Balloc>
 801c8f2:	4680      	mov	r8, r0
 801c8f4:	b928      	cbnz	r0, 801c902 <__multadd+0x5a>
 801c8f6:	4602      	mov	r2, r0
 801c8f8:	4b0c      	ldr	r3, [pc, #48]	; (801c92c <__multadd+0x84>)
 801c8fa:	480d      	ldr	r0, [pc, #52]	; (801c930 <__multadd+0x88>)
 801c8fc:	21b5      	movs	r1, #181	; 0xb5
 801c8fe:	f000 fec1 	bl	801d684 <__assert_func>
 801c902:	6922      	ldr	r2, [r4, #16]
 801c904:	3202      	adds	r2, #2
 801c906:	f104 010c 	add.w	r1, r4, #12
 801c90a:	0092      	lsls	r2, r2, #2
 801c90c:	300c      	adds	r0, #12
 801c90e:	f7ff ff5b 	bl	801c7c8 <memcpy>
 801c912:	4621      	mov	r1, r4
 801c914:	4638      	mov	r0, r7
 801c916:	f7ff ffa5 	bl	801c864 <_Bfree>
 801c91a:	4644      	mov	r4, r8
 801c91c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c920:	3501      	adds	r5, #1
 801c922:	615e      	str	r6, [r3, #20]
 801c924:	6125      	str	r5, [r4, #16]
 801c926:	4620      	mov	r0, r4
 801c928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c92c:	08052410 	.word	0x08052410
 801c930:	0805249c 	.word	0x0805249c

0801c934 <__s2b>:
 801c934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c938:	460c      	mov	r4, r1
 801c93a:	4615      	mov	r5, r2
 801c93c:	461f      	mov	r7, r3
 801c93e:	2209      	movs	r2, #9
 801c940:	3308      	adds	r3, #8
 801c942:	4606      	mov	r6, r0
 801c944:	fb93 f3f2 	sdiv	r3, r3, r2
 801c948:	2100      	movs	r1, #0
 801c94a:	2201      	movs	r2, #1
 801c94c:	429a      	cmp	r2, r3
 801c94e:	db09      	blt.n	801c964 <__s2b+0x30>
 801c950:	4630      	mov	r0, r6
 801c952:	f7ff ff47 	bl	801c7e4 <_Balloc>
 801c956:	b940      	cbnz	r0, 801c96a <__s2b+0x36>
 801c958:	4602      	mov	r2, r0
 801c95a:	4b19      	ldr	r3, [pc, #100]	; (801c9c0 <__s2b+0x8c>)
 801c95c:	4819      	ldr	r0, [pc, #100]	; (801c9c4 <__s2b+0x90>)
 801c95e:	21ce      	movs	r1, #206	; 0xce
 801c960:	f000 fe90 	bl	801d684 <__assert_func>
 801c964:	0052      	lsls	r2, r2, #1
 801c966:	3101      	adds	r1, #1
 801c968:	e7f0      	b.n	801c94c <__s2b+0x18>
 801c96a:	9b08      	ldr	r3, [sp, #32]
 801c96c:	6143      	str	r3, [r0, #20]
 801c96e:	2d09      	cmp	r5, #9
 801c970:	f04f 0301 	mov.w	r3, #1
 801c974:	6103      	str	r3, [r0, #16]
 801c976:	dd16      	ble.n	801c9a6 <__s2b+0x72>
 801c978:	f104 0909 	add.w	r9, r4, #9
 801c97c:	46c8      	mov	r8, r9
 801c97e:	442c      	add	r4, r5
 801c980:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c984:	4601      	mov	r1, r0
 801c986:	3b30      	subs	r3, #48	; 0x30
 801c988:	220a      	movs	r2, #10
 801c98a:	4630      	mov	r0, r6
 801c98c:	f7ff ff8c 	bl	801c8a8 <__multadd>
 801c990:	45a0      	cmp	r8, r4
 801c992:	d1f5      	bne.n	801c980 <__s2b+0x4c>
 801c994:	f1a5 0408 	sub.w	r4, r5, #8
 801c998:	444c      	add	r4, r9
 801c99a:	1b2d      	subs	r5, r5, r4
 801c99c:	1963      	adds	r3, r4, r5
 801c99e:	42bb      	cmp	r3, r7
 801c9a0:	db04      	blt.n	801c9ac <__s2b+0x78>
 801c9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9a6:	340a      	adds	r4, #10
 801c9a8:	2509      	movs	r5, #9
 801c9aa:	e7f6      	b.n	801c99a <__s2b+0x66>
 801c9ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c9b0:	4601      	mov	r1, r0
 801c9b2:	3b30      	subs	r3, #48	; 0x30
 801c9b4:	220a      	movs	r2, #10
 801c9b6:	4630      	mov	r0, r6
 801c9b8:	f7ff ff76 	bl	801c8a8 <__multadd>
 801c9bc:	e7ee      	b.n	801c99c <__s2b+0x68>
 801c9be:	bf00      	nop
 801c9c0:	08052410 	.word	0x08052410
 801c9c4:	0805249c 	.word	0x0805249c

0801c9c8 <__hi0bits>:
 801c9c8:	0c03      	lsrs	r3, r0, #16
 801c9ca:	041b      	lsls	r3, r3, #16
 801c9cc:	b9d3      	cbnz	r3, 801ca04 <__hi0bits+0x3c>
 801c9ce:	0400      	lsls	r0, r0, #16
 801c9d0:	2310      	movs	r3, #16
 801c9d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c9d6:	bf04      	itt	eq
 801c9d8:	0200      	lsleq	r0, r0, #8
 801c9da:	3308      	addeq	r3, #8
 801c9dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c9e0:	bf04      	itt	eq
 801c9e2:	0100      	lsleq	r0, r0, #4
 801c9e4:	3304      	addeq	r3, #4
 801c9e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c9ea:	bf04      	itt	eq
 801c9ec:	0080      	lsleq	r0, r0, #2
 801c9ee:	3302      	addeq	r3, #2
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	db05      	blt.n	801ca00 <__hi0bits+0x38>
 801c9f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c9f8:	f103 0301 	add.w	r3, r3, #1
 801c9fc:	bf08      	it	eq
 801c9fe:	2320      	moveq	r3, #32
 801ca00:	4618      	mov	r0, r3
 801ca02:	4770      	bx	lr
 801ca04:	2300      	movs	r3, #0
 801ca06:	e7e4      	b.n	801c9d2 <__hi0bits+0xa>

0801ca08 <__lo0bits>:
 801ca08:	6803      	ldr	r3, [r0, #0]
 801ca0a:	f013 0207 	ands.w	r2, r3, #7
 801ca0e:	4601      	mov	r1, r0
 801ca10:	d00b      	beq.n	801ca2a <__lo0bits+0x22>
 801ca12:	07da      	lsls	r2, r3, #31
 801ca14:	d423      	bmi.n	801ca5e <__lo0bits+0x56>
 801ca16:	0798      	lsls	r0, r3, #30
 801ca18:	bf49      	itett	mi
 801ca1a:	085b      	lsrmi	r3, r3, #1
 801ca1c:	089b      	lsrpl	r3, r3, #2
 801ca1e:	2001      	movmi	r0, #1
 801ca20:	600b      	strmi	r3, [r1, #0]
 801ca22:	bf5c      	itt	pl
 801ca24:	600b      	strpl	r3, [r1, #0]
 801ca26:	2002      	movpl	r0, #2
 801ca28:	4770      	bx	lr
 801ca2a:	b298      	uxth	r0, r3
 801ca2c:	b9a8      	cbnz	r0, 801ca5a <__lo0bits+0x52>
 801ca2e:	0c1b      	lsrs	r3, r3, #16
 801ca30:	2010      	movs	r0, #16
 801ca32:	b2da      	uxtb	r2, r3
 801ca34:	b90a      	cbnz	r2, 801ca3a <__lo0bits+0x32>
 801ca36:	3008      	adds	r0, #8
 801ca38:	0a1b      	lsrs	r3, r3, #8
 801ca3a:	071a      	lsls	r2, r3, #28
 801ca3c:	bf04      	itt	eq
 801ca3e:	091b      	lsreq	r3, r3, #4
 801ca40:	3004      	addeq	r0, #4
 801ca42:	079a      	lsls	r2, r3, #30
 801ca44:	bf04      	itt	eq
 801ca46:	089b      	lsreq	r3, r3, #2
 801ca48:	3002      	addeq	r0, #2
 801ca4a:	07da      	lsls	r2, r3, #31
 801ca4c:	d403      	bmi.n	801ca56 <__lo0bits+0x4e>
 801ca4e:	085b      	lsrs	r3, r3, #1
 801ca50:	f100 0001 	add.w	r0, r0, #1
 801ca54:	d005      	beq.n	801ca62 <__lo0bits+0x5a>
 801ca56:	600b      	str	r3, [r1, #0]
 801ca58:	4770      	bx	lr
 801ca5a:	4610      	mov	r0, r2
 801ca5c:	e7e9      	b.n	801ca32 <__lo0bits+0x2a>
 801ca5e:	2000      	movs	r0, #0
 801ca60:	4770      	bx	lr
 801ca62:	2020      	movs	r0, #32
 801ca64:	4770      	bx	lr
	...

0801ca68 <__i2b>:
 801ca68:	b510      	push	{r4, lr}
 801ca6a:	460c      	mov	r4, r1
 801ca6c:	2101      	movs	r1, #1
 801ca6e:	f7ff feb9 	bl	801c7e4 <_Balloc>
 801ca72:	4602      	mov	r2, r0
 801ca74:	b928      	cbnz	r0, 801ca82 <__i2b+0x1a>
 801ca76:	4b05      	ldr	r3, [pc, #20]	; (801ca8c <__i2b+0x24>)
 801ca78:	4805      	ldr	r0, [pc, #20]	; (801ca90 <__i2b+0x28>)
 801ca7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ca7e:	f000 fe01 	bl	801d684 <__assert_func>
 801ca82:	2301      	movs	r3, #1
 801ca84:	6144      	str	r4, [r0, #20]
 801ca86:	6103      	str	r3, [r0, #16]
 801ca88:	bd10      	pop	{r4, pc}
 801ca8a:	bf00      	nop
 801ca8c:	08052410 	.word	0x08052410
 801ca90:	0805249c 	.word	0x0805249c

0801ca94 <__multiply>:
 801ca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca98:	4691      	mov	r9, r2
 801ca9a:	690a      	ldr	r2, [r1, #16]
 801ca9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801caa0:	429a      	cmp	r2, r3
 801caa2:	bfb8      	it	lt
 801caa4:	460b      	movlt	r3, r1
 801caa6:	460c      	mov	r4, r1
 801caa8:	bfbc      	itt	lt
 801caaa:	464c      	movlt	r4, r9
 801caac:	4699      	movlt	r9, r3
 801caae:	6927      	ldr	r7, [r4, #16]
 801cab0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cab4:	68a3      	ldr	r3, [r4, #8]
 801cab6:	6861      	ldr	r1, [r4, #4]
 801cab8:	eb07 060a 	add.w	r6, r7, sl
 801cabc:	42b3      	cmp	r3, r6
 801cabe:	b085      	sub	sp, #20
 801cac0:	bfb8      	it	lt
 801cac2:	3101      	addlt	r1, #1
 801cac4:	f7ff fe8e 	bl	801c7e4 <_Balloc>
 801cac8:	b930      	cbnz	r0, 801cad8 <__multiply+0x44>
 801caca:	4602      	mov	r2, r0
 801cacc:	4b44      	ldr	r3, [pc, #272]	; (801cbe0 <__multiply+0x14c>)
 801cace:	4845      	ldr	r0, [pc, #276]	; (801cbe4 <__multiply+0x150>)
 801cad0:	f240 115d 	movw	r1, #349	; 0x15d
 801cad4:	f000 fdd6 	bl	801d684 <__assert_func>
 801cad8:	f100 0514 	add.w	r5, r0, #20
 801cadc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cae0:	462b      	mov	r3, r5
 801cae2:	2200      	movs	r2, #0
 801cae4:	4543      	cmp	r3, r8
 801cae6:	d321      	bcc.n	801cb2c <__multiply+0x98>
 801cae8:	f104 0314 	add.w	r3, r4, #20
 801caec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801caf0:	f109 0314 	add.w	r3, r9, #20
 801caf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801caf8:	9202      	str	r2, [sp, #8]
 801cafa:	1b3a      	subs	r2, r7, r4
 801cafc:	3a15      	subs	r2, #21
 801cafe:	f022 0203 	bic.w	r2, r2, #3
 801cb02:	3204      	adds	r2, #4
 801cb04:	f104 0115 	add.w	r1, r4, #21
 801cb08:	428f      	cmp	r7, r1
 801cb0a:	bf38      	it	cc
 801cb0c:	2204      	movcc	r2, #4
 801cb0e:	9201      	str	r2, [sp, #4]
 801cb10:	9a02      	ldr	r2, [sp, #8]
 801cb12:	9303      	str	r3, [sp, #12]
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d80c      	bhi.n	801cb32 <__multiply+0x9e>
 801cb18:	2e00      	cmp	r6, #0
 801cb1a:	dd03      	ble.n	801cb24 <__multiply+0x90>
 801cb1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d05a      	beq.n	801cbda <__multiply+0x146>
 801cb24:	6106      	str	r6, [r0, #16]
 801cb26:	b005      	add	sp, #20
 801cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb2c:	f843 2b04 	str.w	r2, [r3], #4
 801cb30:	e7d8      	b.n	801cae4 <__multiply+0x50>
 801cb32:	f8b3 a000 	ldrh.w	sl, [r3]
 801cb36:	f1ba 0f00 	cmp.w	sl, #0
 801cb3a:	d024      	beq.n	801cb86 <__multiply+0xf2>
 801cb3c:	f104 0e14 	add.w	lr, r4, #20
 801cb40:	46a9      	mov	r9, r5
 801cb42:	f04f 0c00 	mov.w	ip, #0
 801cb46:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cb4a:	f8d9 1000 	ldr.w	r1, [r9]
 801cb4e:	fa1f fb82 	uxth.w	fp, r2
 801cb52:	b289      	uxth	r1, r1
 801cb54:	fb0a 110b 	mla	r1, sl, fp, r1
 801cb58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cb5c:	f8d9 2000 	ldr.w	r2, [r9]
 801cb60:	4461      	add	r1, ip
 801cb62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb66:	fb0a c20b 	mla	r2, sl, fp, ip
 801cb6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cb6e:	b289      	uxth	r1, r1
 801cb70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cb74:	4577      	cmp	r7, lr
 801cb76:	f849 1b04 	str.w	r1, [r9], #4
 801cb7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cb7e:	d8e2      	bhi.n	801cb46 <__multiply+0xb2>
 801cb80:	9a01      	ldr	r2, [sp, #4]
 801cb82:	f845 c002 	str.w	ip, [r5, r2]
 801cb86:	9a03      	ldr	r2, [sp, #12]
 801cb88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cb8c:	3304      	adds	r3, #4
 801cb8e:	f1b9 0f00 	cmp.w	r9, #0
 801cb92:	d020      	beq.n	801cbd6 <__multiply+0x142>
 801cb94:	6829      	ldr	r1, [r5, #0]
 801cb96:	f104 0c14 	add.w	ip, r4, #20
 801cb9a:	46ae      	mov	lr, r5
 801cb9c:	f04f 0a00 	mov.w	sl, #0
 801cba0:	f8bc b000 	ldrh.w	fp, [ip]
 801cba4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cba8:	fb09 220b 	mla	r2, r9, fp, r2
 801cbac:	4492      	add	sl, r2
 801cbae:	b289      	uxth	r1, r1
 801cbb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cbb4:	f84e 1b04 	str.w	r1, [lr], #4
 801cbb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cbbc:	f8be 1000 	ldrh.w	r1, [lr]
 801cbc0:	0c12      	lsrs	r2, r2, #16
 801cbc2:	fb09 1102 	mla	r1, r9, r2, r1
 801cbc6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cbca:	4567      	cmp	r7, ip
 801cbcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cbd0:	d8e6      	bhi.n	801cba0 <__multiply+0x10c>
 801cbd2:	9a01      	ldr	r2, [sp, #4]
 801cbd4:	50a9      	str	r1, [r5, r2]
 801cbd6:	3504      	adds	r5, #4
 801cbd8:	e79a      	b.n	801cb10 <__multiply+0x7c>
 801cbda:	3e01      	subs	r6, #1
 801cbdc:	e79c      	b.n	801cb18 <__multiply+0x84>
 801cbde:	bf00      	nop
 801cbe0:	08052410 	.word	0x08052410
 801cbe4:	0805249c 	.word	0x0805249c

0801cbe8 <__pow5mult>:
 801cbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbec:	4615      	mov	r5, r2
 801cbee:	f012 0203 	ands.w	r2, r2, #3
 801cbf2:	4606      	mov	r6, r0
 801cbf4:	460f      	mov	r7, r1
 801cbf6:	d007      	beq.n	801cc08 <__pow5mult+0x20>
 801cbf8:	4c25      	ldr	r4, [pc, #148]	; (801cc90 <__pow5mult+0xa8>)
 801cbfa:	3a01      	subs	r2, #1
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cc02:	f7ff fe51 	bl	801c8a8 <__multadd>
 801cc06:	4607      	mov	r7, r0
 801cc08:	10ad      	asrs	r5, r5, #2
 801cc0a:	d03d      	beq.n	801cc88 <__pow5mult+0xa0>
 801cc0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cc0e:	b97c      	cbnz	r4, 801cc30 <__pow5mult+0x48>
 801cc10:	2010      	movs	r0, #16
 801cc12:	f7ff fdbf 	bl	801c794 <malloc>
 801cc16:	4602      	mov	r2, r0
 801cc18:	6270      	str	r0, [r6, #36]	; 0x24
 801cc1a:	b928      	cbnz	r0, 801cc28 <__pow5mult+0x40>
 801cc1c:	4b1d      	ldr	r3, [pc, #116]	; (801cc94 <__pow5mult+0xac>)
 801cc1e:	481e      	ldr	r0, [pc, #120]	; (801cc98 <__pow5mult+0xb0>)
 801cc20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cc24:	f000 fd2e 	bl	801d684 <__assert_func>
 801cc28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cc2c:	6004      	str	r4, [r0, #0]
 801cc2e:	60c4      	str	r4, [r0, #12]
 801cc30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cc34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cc38:	b94c      	cbnz	r4, 801cc4e <__pow5mult+0x66>
 801cc3a:	f240 2171 	movw	r1, #625	; 0x271
 801cc3e:	4630      	mov	r0, r6
 801cc40:	f7ff ff12 	bl	801ca68 <__i2b>
 801cc44:	2300      	movs	r3, #0
 801cc46:	f8c8 0008 	str.w	r0, [r8, #8]
 801cc4a:	4604      	mov	r4, r0
 801cc4c:	6003      	str	r3, [r0, #0]
 801cc4e:	f04f 0900 	mov.w	r9, #0
 801cc52:	07eb      	lsls	r3, r5, #31
 801cc54:	d50a      	bpl.n	801cc6c <__pow5mult+0x84>
 801cc56:	4639      	mov	r1, r7
 801cc58:	4622      	mov	r2, r4
 801cc5a:	4630      	mov	r0, r6
 801cc5c:	f7ff ff1a 	bl	801ca94 <__multiply>
 801cc60:	4639      	mov	r1, r7
 801cc62:	4680      	mov	r8, r0
 801cc64:	4630      	mov	r0, r6
 801cc66:	f7ff fdfd 	bl	801c864 <_Bfree>
 801cc6a:	4647      	mov	r7, r8
 801cc6c:	106d      	asrs	r5, r5, #1
 801cc6e:	d00b      	beq.n	801cc88 <__pow5mult+0xa0>
 801cc70:	6820      	ldr	r0, [r4, #0]
 801cc72:	b938      	cbnz	r0, 801cc84 <__pow5mult+0x9c>
 801cc74:	4622      	mov	r2, r4
 801cc76:	4621      	mov	r1, r4
 801cc78:	4630      	mov	r0, r6
 801cc7a:	f7ff ff0b 	bl	801ca94 <__multiply>
 801cc7e:	6020      	str	r0, [r4, #0]
 801cc80:	f8c0 9000 	str.w	r9, [r0]
 801cc84:	4604      	mov	r4, r0
 801cc86:	e7e4      	b.n	801cc52 <__pow5mult+0x6a>
 801cc88:	4638      	mov	r0, r7
 801cc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc8e:	bf00      	nop
 801cc90:	080525e8 	.word	0x080525e8
 801cc94:	0805239e 	.word	0x0805239e
 801cc98:	0805249c 	.word	0x0805249c

0801cc9c <__lshift>:
 801cc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cca0:	460c      	mov	r4, r1
 801cca2:	6849      	ldr	r1, [r1, #4]
 801cca4:	6923      	ldr	r3, [r4, #16]
 801cca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ccaa:	68a3      	ldr	r3, [r4, #8]
 801ccac:	4607      	mov	r7, r0
 801ccae:	4691      	mov	r9, r2
 801ccb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ccb4:	f108 0601 	add.w	r6, r8, #1
 801ccb8:	42b3      	cmp	r3, r6
 801ccba:	db0b      	blt.n	801ccd4 <__lshift+0x38>
 801ccbc:	4638      	mov	r0, r7
 801ccbe:	f7ff fd91 	bl	801c7e4 <_Balloc>
 801ccc2:	4605      	mov	r5, r0
 801ccc4:	b948      	cbnz	r0, 801ccda <__lshift+0x3e>
 801ccc6:	4602      	mov	r2, r0
 801ccc8:	4b2a      	ldr	r3, [pc, #168]	; (801cd74 <__lshift+0xd8>)
 801ccca:	482b      	ldr	r0, [pc, #172]	; (801cd78 <__lshift+0xdc>)
 801cccc:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ccd0:	f000 fcd8 	bl	801d684 <__assert_func>
 801ccd4:	3101      	adds	r1, #1
 801ccd6:	005b      	lsls	r3, r3, #1
 801ccd8:	e7ee      	b.n	801ccb8 <__lshift+0x1c>
 801ccda:	2300      	movs	r3, #0
 801ccdc:	f100 0114 	add.w	r1, r0, #20
 801cce0:	f100 0210 	add.w	r2, r0, #16
 801cce4:	4618      	mov	r0, r3
 801cce6:	4553      	cmp	r3, sl
 801cce8:	db37      	blt.n	801cd5a <__lshift+0xbe>
 801ccea:	6920      	ldr	r0, [r4, #16]
 801ccec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ccf0:	f104 0314 	add.w	r3, r4, #20
 801ccf4:	f019 091f 	ands.w	r9, r9, #31
 801ccf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ccfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cd00:	d02f      	beq.n	801cd62 <__lshift+0xc6>
 801cd02:	f1c9 0e20 	rsb	lr, r9, #32
 801cd06:	468a      	mov	sl, r1
 801cd08:	f04f 0c00 	mov.w	ip, #0
 801cd0c:	681a      	ldr	r2, [r3, #0]
 801cd0e:	fa02 f209 	lsl.w	r2, r2, r9
 801cd12:	ea42 020c 	orr.w	r2, r2, ip
 801cd16:	f84a 2b04 	str.w	r2, [sl], #4
 801cd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd1e:	4298      	cmp	r0, r3
 801cd20:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cd24:	d8f2      	bhi.n	801cd0c <__lshift+0x70>
 801cd26:	1b03      	subs	r3, r0, r4
 801cd28:	3b15      	subs	r3, #21
 801cd2a:	f023 0303 	bic.w	r3, r3, #3
 801cd2e:	3304      	adds	r3, #4
 801cd30:	f104 0215 	add.w	r2, r4, #21
 801cd34:	4290      	cmp	r0, r2
 801cd36:	bf38      	it	cc
 801cd38:	2304      	movcc	r3, #4
 801cd3a:	f841 c003 	str.w	ip, [r1, r3]
 801cd3e:	f1bc 0f00 	cmp.w	ip, #0
 801cd42:	d001      	beq.n	801cd48 <__lshift+0xac>
 801cd44:	f108 0602 	add.w	r6, r8, #2
 801cd48:	3e01      	subs	r6, #1
 801cd4a:	4638      	mov	r0, r7
 801cd4c:	612e      	str	r6, [r5, #16]
 801cd4e:	4621      	mov	r1, r4
 801cd50:	f7ff fd88 	bl	801c864 <_Bfree>
 801cd54:	4628      	mov	r0, r5
 801cd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd5a:	f842 0f04 	str.w	r0, [r2, #4]!
 801cd5e:	3301      	adds	r3, #1
 801cd60:	e7c1      	b.n	801cce6 <__lshift+0x4a>
 801cd62:	3904      	subs	r1, #4
 801cd64:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd68:	f841 2f04 	str.w	r2, [r1, #4]!
 801cd6c:	4298      	cmp	r0, r3
 801cd6e:	d8f9      	bhi.n	801cd64 <__lshift+0xc8>
 801cd70:	e7ea      	b.n	801cd48 <__lshift+0xac>
 801cd72:	bf00      	nop
 801cd74:	08052410 	.word	0x08052410
 801cd78:	0805249c 	.word	0x0805249c

0801cd7c <__mcmp>:
 801cd7c:	b530      	push	{r4, r5, lr}
 801cd7e:	6902      	ldr	r2, [r0, #16]
 801cd80:	690c      	ldr	r4, [r1, #16]
 801cd82:	1b12      	subs	r2, r2, r4
 801cd84:	d10e      	bne.n	801cda4 <__mcmp+0x28>
 801cd86:	f100 0314 	add.w	r3, r0, #20
 801cd8a:	3114      	adds	r1, #20
 801cd8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cd90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cd94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cd98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cd9c:	42a5      	cmp	r5, r4
 801cd9e:	d003      	beq.n	801cda8 <__mcmp+0x2c>
 801cda0:	d305      	bcc.n	801cdae <__mcmp+0x32>
 801cda2:	2201      	movs	r2, #1
 801cda4:	4610      	mov	r0, r2
 801cda6:	bd30      	pop	{r4, r5, pc}
 801cda8:	4283      	cmp	r3, r0
 801cdaa:	d3f3      	bcc.n	801cd94 <__mcmp+0x18>
 801cdac:	e7fa      	b.n	801cda4 <__mcmp+0x28>
 801cdae:	f04f 32ff 	mov.w	r2, #4294967295
 801cdb2:	e7f7      	b.n	801cda4 <__mcmp+0x28>

0801cdb4 <__mdiff>:
 801cdb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb8:	460c      	mov	r4, r1
 801cdba:	4606      	mov	r6, r0
 801cdbc:	4611      	mov	r1, r2
 801cdbe:	4620      	mov	r0, r4
 801cdc0:	4690      	mov	r8, r2
 801cdc2:	f7ff ffdb 	bl	801cd7c <__mcmp>
 801cdc6:	1e05      	subs	r5, r0, #0
 801cdc8:	d110      	bne.n	801cdec <__mdiff+0x38>
 801cdca:	4629      	mov	r1, r5
 801cdcc:	4630      	mov	r0, r6
 801cdce:	f7ff fd09 	bl	801c7e4 <_Balloc>
 801cdd2:	b930      	cbnz	r0, 801cde2 <__mdiff+0x2e>
 801cdd4:	4b3a      	ldr	r3, [pc, #232]	; (801cec0 <__mdiff+0x10c>)
 801cdd6:	4602      	mov	r2, r0
 801cdd8:	f240 2132 	movw	r1, #562	; 0x232
 801cddc:	4839      	ldr	r0, [pc, #228]	; (801cec4 <__mdiff+0x110>)
 801cdde:	f000 fc51 	bl	801d684 <__assert_func>
 801cde2:	2301      	movs	r3, #1
 801cde4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cde8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdec:	bfa4      	itt	ge
 801cdee:	4643      	movge	r3, r8
 801cdf0:	46a0      	movge	r8, r4
 801cdf2:	4630      	mov	r0, r6
 801cdf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cdf8:	bfa6      	itte	ge
 801cdfa:	461c      	movge	r4, r3
 801cdfc:	2500      	movge	r5, #0
 801cdfe:	2501      	movlt	r5, #1
 801ce00:	f7ff fcf0 	bl	801c7e4 <_Balloc>
 801ce04:	b920      	cbnz	r0, 801ce10 <__mdiff+0x5c>
 801ce06:	4b2e      	ldr	r3, [pc, #184]	; (801cec0 <__mdiff+0x10c>)
 801ce08:	4602      	mov	r2, r0
 801ce0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ce0e:	e7e5      	b.n	801cddc <__mdiff+0x28>
 801ce10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ce14:	6926      	ldr	r6, [r4, #16]
 801ce16:	60c5      	str	r5, [r0, #12]
 801ce18:	f104 0914 	add.w	r9, r4, #20
 801ce1c:	f108 0514 	add.w	r5, r8, #20
 801ce20:	f100 0e14 	add.w	lr, r0, #20
 801ce24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ce28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ce2c:	f108 0210 	add.w	r2, r8, #16
 801ce30:	46f2      	mov	sl, lr
 801ce32:	2100      	movs	r1, #0
 801ce34:	f859 3b04 	ldr.w	r3, [r9], #4
 801ce38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ce3c:	fa1f f883 	uxth.w	r8, r3
 801ce40:	fa11 f18b 	uxtah	r1, r1, fp
 801ce44:	0c1b      	lsrs	r3, r3, #16
 801ce46:	eba1 0808 	sub.w	r8, r1, r8
 801ce4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ce4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ce52:	fa1f f888 	uxth.w	r8, r8
 801ce56:	1419      	asrs	r1, r3, #16
 801ce58:	454e      	cmp	r6, r9
 801ce5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ce5e:	f84a 3b04 	str.w	r3, [sl], #4
 801ce62:	d8e7      	bhi.n	801ce34 <__mdiff+0x80>
 801ce64:	1b33      	subs	r3, r6, r4
 801ce66:	3b15      	subs	r3, #21
 801ce68:	f023 0303 	bic.w	r3, r3, #3
 801ce6c:	3304      	adds	r3, #4
 801ce6e:	3415      	adds	r4, #21
 801ce70:	42a6      	cmp	r6, r4
 801ce72:	bf38      	it	cc
 801ce74:	2304      	movcc	r3, #4
 801ce76:	441d      	add	r5, r3
 801ce78:	4473      	add	r3, lr
 801ce7a:	469e      	mov	lr, r3
 801ce7c:	462e      	mov	r6, r5
 801ce7e:	4566      	cmp	r6, ip
 801ce80:	d30e      	bcc.n	801cea0 <__mdiff+0xec>
 801ce82:	f10c 0203 	add.w	r2, ip, #3
 801ce86:	1b52      	subs	r2, r2, r5
 801ce88:	f022 0203 	bic.w	r2, r2, #3
 801ce8c:	3d03      	subs	r5, #3
 801ce8e:	45ac      	cmp	ip, r5
 801ce90:	bf38      	it	cc
 801ce92:	2200      	movcc	r2, #0
 801ce94:	441a      	add	r2, r3
 801ce96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ce9a:	b17b      	cbz	r3, 801cebc <__mdiff+0x108>
 801ce9c:	6107      	str	r7, [r0, #16]
 801ce9e:	e7a3      	b.n	801cde8 <__mdiff+0x34>
 801cea0:	f856 8b04 	ldr.w	r8, [r6], #4
 801cea4:	fa11 f288 	uxtah	r2, r1, r8
 801cea8:	1414      	asrs	r4, r2, #16
 801ceaa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ceae:	b292      	uxth	r2, r2
 801ceb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ceb4:	f84e 2b04 	str.w	r2, [lr], #4
 801ceb8:	1421      	asrs	r1, r4, #16
 801ceba:	e7e0      	b.n	801ce7e <__mdiff+0xca>
 801cebc:	3f01      	subs	r7, #1
 801cebe:	e7ea      	b.n	801ce96 <__mdiff+0xe2>
 801cec0:	08052410 	.word	0x08052410
 801cec4:	0805249c 	.word	0x0805249c

0801cec8 <__ulp>:
 801cec8:	b082      	sub	sp, #8
 801ceca:	ed8d 0b00 	vstr	d0, [sp]
 801cece:	9b01      	ldr	r3, [sp, #4]
 801ced0:	4912      	ldr	r1, [pc, #72]	; (801cf1c <__ulp+0x54>)
 801ced2:	4019      	ands	r1, r3
 801ced4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ced8:	2900      	cmp	r1, #0
 801ceda:	dd05      	ble.n	801cee8 <__ulp+0x20>
 801cedc:	2200      	movs	r2, #0
 801cede:	460b      	mov	r3, r1
 801cee0:	ec43 2b10 	vmov	d0, r2, r3
 801cee4:	b002      	add	sp, #8
 801cee6:	4770      	bx	lr
 801cee8:	4249      	negs	r1, r1
 801ceea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ceee:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cef2:	f04f 0200 	mov.w	r2, #0
 801cef6:	f04f 0300 	mov.w	r3, #0
 801cefa:	da04      	bge.n	801cf06 <__ulp+0x3e>
 801cefc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cf00:	fa41 f300 	asr.w	r3, r1, r0
 801cf04:	e7ec      	b.n	801cee0 <__ulp+0x18>
 801cf06:	f1a0 0114 	sub.w	r1, r0, #20
 801cf0a:	291e      	cmp	r1, #30
 801cf0c:	bfda      	itte	le
 801cf0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cf12:	fa20 f101 	lsrle.w	r1, r0, r1
 801cf16:	2101      	movgt	r1, #1
 801cf18:	460a      	mov	r2, r1
 801cf1a:	e7e1      	b.n	801cee0 <__ulp+0x18>
 801cf1c:	7ff00000 	.word	0x7ff00000

0801cf20 <__b2d>:
 801cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf22:	6905      	ldr	r5, [r0, #16]
 801cf24:	f100 0714 	add.w	r7, r0, #20
 801cf28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cf2c:	1f2e      	subs	r6, r5, #4
 801cf2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cf32:	4620      	mov	r0, r4
 801cf34:	f7ff fd48 	bl	801c9c8 <__hi0bits>
 801cf38:	f1c0 0320 	rsb	r3, r0, #32
 801cf3c:	280a      	cmp	r0, #10
 801cf3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cfbc <__b2d+0x9c>
 801cf42:	600b      	str	r3, [r1, #0]
 801cf44:	dc14      	bgt.n	801cf70 <__b2d+0x50>
 801cf46:	f1c0 0e0b 	rsb	lr, r0, #11
 801cf4a:	fa24 f10e 	lsr.w	r1, r4, lr
 801cf4e:	42b7      	cmp	r7, r6
 801cf50:	ea41 030c 	orr.w	r3, r1, ip
 801cf54:	bf34      	ite	cc
 801cf56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf5a:	2100      	movcs	r1, #0
 801cf5c:	3015      	adds	r0, #21
 801cf5e:	fa04 f000 	lsl.w	r0, r4, r0
 801cf62:	fa21 f10e 	lsr.w	r1, r1, lr
 801cf66:	ea40 0201 	orr.w	r2, r0, r1
 801cf6a:	ec43 2b10 	vmov	d0, r2, r3
 801cf6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf70:	42b7      	cmp	r7, r6
 801cf72:	bf3a      	itte	cc
 801cf74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cf78:	f1a5 0608 	subcc.w	r6, r5, #8
 801cf7c:	2100      	movcs	r1, #0
 801cf7e:	380b      	subs	r0, #11
 801cf80:	d017      	beq.n	801cfb2 <__b2d+0x92>
 801cf82:	f1c0 0c20 	rsb	ip, r0, #32
 801cf86:	fa04 f500 	lsl.w	r5, r4, r0
 801cf8a:	42be      	cmp	r6, r7
 801cf8c:	fa21 f40c 	lsr.w	r4, r1, ip
 801cf90:	ea45 0504 	orr.w	r5, r5, r4
 801cf94:	bf8c      	ite	hi
 801cf96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cf9a:	2400      	movls	r4, #0
 801cf9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cfa0:	fa01 f000 	lsl.w	r0, r1, r0
 801cfa4:	fa24 f40c 	lsr.w	r4, r4, ip
 801cfa8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cfac:	ea40 0204 	orr.w	r2, r0, r4
 801cfb0:	e7db      	b.n	801cf6a <__b2d+0x4a>
 801cfb2:	ea44 030c 	orr.w	r3, r4, ip
 801cfb6:	460a      	mov	r2, r1
 801cfb8:	e7d7      	b.n	801cf6a <__b2d+0x4a>
 801cfba:	bf00      	nop
 801cfbc:	3ff00000 	.word	0x3ff00000

0801cfc0 <__d2b>:
 801cfc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cfc4:	4689      	mov	r9, r1
 801cfc6:	2101      	movs	r1, #1
 801cfc8:	ec57 6b10 	vmov	r6, r7, d0
 801cfcc:	4690      	mov	r8, r2
 801cfce:	f7ff fc09 	bl	801c7e4 <_Balloc>
 801cfd2:	4604      	mov	r4, r0
 801cfd4:	b930      	cbnz	r0, 801cfe4 <__d2b+0x24>
 801cfd6:	4602      	mov	r2, r0
 801cfd8:	4b25      	ldr	r3, [pc, #148]	; (801d070 <__d2b+0xb0>)
 801cfda:	4826      	ldr	r0, [pc, #152]	; (801d074 <__d2b+0xb4>)
 801cfdc:	f240 310a 	movw	r1, #778	; 0x30a
 801cfe0:	f000 fb50 	bl	801d684 <__assert_func>
 801cfe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cfe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cfec:	bb35      	cbnz	r5, 801d03c <__d2b+0x7c>
 801cfee:	2e00      	cmp	r6, #0
 801cff0:	9301      	str	r3, [sp, #4]
 801cff2:	d028      	beq.n	801d046 <__d2b+0x86>
 801cff4:	4668      	mov	r0, sp
 801cff6:	9600      	str	r6, [sp, #0]
 801cff8:	f7ff fd06 	bl	801ca08 <__lo0bits>
 801cffc:	9900      	ldr	r1, [sp, #0]
 801cffe:	b300      	cbz	r0, 801d042 <__d2b+0x82>
 801d000:	9a01      	ldr	r2, [sp, #4]
 801d002:	f1c0 0320 	rsb	r3, r0, #32
 801d006:	fa02 f303 	lsl.w	r3, r2, r3
 801d00a:	430b      	orrs	r3, r1
 801d00c:	40c2      	lsrs	r2, r0
 801d00e:	6163      	str	r3, [r4, #20]
 801d010:	9201      	str	r2, [sp, #4]
 801d012:	9b01      	ldr	r3, [sp, #4]
 801d014:	61a3      	str	r3, [r4, #24]
 801d016:	2b00      	cmp	r3, #0
 801d018:	bf14      	ite	ne
 801d01a:	2202      	movne	r2, #2
 801d01c:	2201      	moveq	r2, #1
 801d01e:	6122      	str	r2, [r4, #16]
 801d020:	b1d5      	cbz	r5, 801d058 <__d2b+0x98>
 801d022:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d026:	4405      	add	r5, r0
 801d028:	f8c9 5000 	str.w	r5, [r9]
 801d02c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d030:	f8c8 0000 	str.w	r0, [r8]
 801d034:	4620      	mov	r0, r4
 801d036:	b003      	add	sp, #12
 801d038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d03c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d040:	e7d5      	b.n	801cfee <__d2b+0x2e>
 801d042:	6161      	str	r1, [r4, #20]
 801d044:	e7e5      	b.n	801d012 <__d2b+0x52>
 801d046:	a801      	add	r0, sp, #4
 801d048:	f7ff fcde 	bl	801ca08 <__lo0bits>
 801d04c:	9b01      	ldr	r3, [sp, #4]
 801d04e:	6163      	str	r3, [r4, #20]
 801d050:	2201      	movs	r2, #1
 801d052:	6122      	str	r2, [r4, #16]
 801d054:	3020      	adds	r0, #32
 801d056:	e7e3      	b.n	801d020 <__d2b+0x60>
 801d058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d05c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d060:	f8c9 0000 	str.w	r0, [r9]
 801d064:	6918      	ldr	r0, [r3, #16]
 801d066:	f7ff fcaf 	bl	801c9c8 <__hi0bits>
 801d06a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d06e:	e7df      	b.n	801d030 <__d2b+0x70>
 801d070:	08052410 	.word	0x08052410
 801d074:	0805249c 	.word	0x0805249c

0801d078 <__ratio>:
 801d078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d07c:	4688      	mov	r8, r1
 801d07e:	4669      	mov	r1, sp
 801d080:	4681      	mov	r9, r0
 801d082:	f7ff ff4d 	bl	801cf20 <__b2d>
 801d086:	a901      	add	r1, sp, #4
 801d088:	4640      	mov	r0, r8
 801d08a:	ec55 4b10 	vmov	r4, r5, d0
 801d08e:	f7ff ff47 	bl	801cf20 <__b2d>
 801d092:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d096:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d09a:	eba3 0c02 	sub.w	ip, r3, r2
 801d09e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d0a2:	1a9b      	subs	r3, r3, r2
 801d0a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d0a8:	ec51 0b10 	vmov	r0, r1, d0
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	bfd6      	itet	le
 801d0b0:	460a      	movle	r2, r1
 801d0b2:	462a      	movgt	r2, r5
 801d0b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d0b8:	468b      	mov	fp, r1
 801d0ba:	462f      	mov	r7, r5
 801d0bc:	bfd4      	ite	le
 801d0be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d0c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	ee10 2a10 	vmov	r2, s0
 801d0cc:	465b      	mov	r3, fp
 801d0ce:	4639      	mov	r1, r7
 801d0d0:	f7fb ffe4 	bl	801909c <__aeabi_ddiv>
 801d0d4:	ec41 0b10 	vmov	d0, r0, r1
 801d0d8:	b003      	add	sp, #12
 801d0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0de <__copybits>:
 801d0de:	3901      	subs	r1, #1
 801d0e0:	b570      	push	{r4, r5, r6, lr}
 801d0e2:	1149      	asrs	r1, r1, #5
 801d0e4:	6914      	ldr	r4, [r2, #16]
 801d0e6:	3101      	adds	r1, #1
 801d0e8:	f102 0314 	add.w	r3, r2, #20
 801d0ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d0f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d0f4:	1f05      	subs	r5, r0, #4
 801d0f6:	42a3      	cmp	r3, r4
 801d0f8:	d30c      	bcc.n	801d114 <__copybits+0x36>
 801d0fa:	1aa3      	subs	r3, r4, r2
 801d0fc:	3b11      	subs	r3, #17
 801d0fe:	f023 0303 	bic.w	r3, r3, #3
 801d102:	3211      	adds	r2, #17
 801d104:	42a2      	cmp	r2, r4
 801d106:	bf88      	it	hi
 801d108:	2300      	movhi	r3, #0
 801d10a:	4418      	add	r0, r3
 801d10c:	2300      	movs	r3, #0
 801d10e:	4288      	cmp	r0, r1
 801d110:	d305      	bcc.n	801d11e <__copybits+0x40>
 801d112:	bd70      	pop	{r4, r5, r6, pc}
 801d114:	f853 6b04 	ldr.w	r6, [r3], #4
 801d118:	f845 6f04 	str.w	r6, [r5, #4]!
 801d11c:	e7eb      	b.n	801d0f6 <__copybits+0x18>
 801d11e:	f840 3b04 	str.w	r3, [r0], #4
 801d122:	e7f4      	b.n	801d10e <__copybits+0x30>

0801d124 <__any_on>:
 801d124:	f100 0214 	add.w	r2, r0, #20
 801d128:	6900      	ldr	r0, [r0, #16]
 801d12a:	114b      	asrs	r3, r1, #5
 801d12c:	4298      	cmp	r0, r3
 801d12e:	b510      	push	{r4, lr}
 801d130:	db11      	blt.n	801d156 <__any_on+0x32>
 801d132:	dd0a      	ble.n	801d14a <__any_on+0x26>
 801d134:	f011 011f 	ands.w	r1, r1, #31
 801d138:	d007      	beq.n	801d14a <__any_on+0x26>
 801d13a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d13e:	fa24 f001 	lsr.w	r0, r4, r1
 801d142:	fa00 f101 	lsl.w	r1, r0, r1
 801d146:	428c      	cmp	r4, r1
 801d148:	d10b      	bne.n	801d162 <__any_on+0x3e>
 801d14a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d14e:	4293      	cmp	r3, r2
 801d150:	d803      	bhi.n	801d15a <__any_on+0x36>
 801d152:	2000      	movs	r0, #0
 801d154:	bd10      	pop	{r4, pc}
 801d156:	4603      	mov	r3, r0
 801d158:	e7f7      	b.n	801d14a <__any_on+0x26>
 801d15a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d15e:	2900      	cmp	r1, #0
 801d160:	d0f5      	beq.n	801d14e <__any_on+0x2a>
 801d162:	2001      	movs	r0, #1
 801d164:	e7f6      	b.n	801d154 <__any_on+0x30>

0801d166 <_calloc_r>:
 801d166:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d168:	fba1 2402 	umull	r2, r4, r1, r2
 801d16c:	b94c      	cbnz	r4, 801d182 <_calloc_r+0x1c>
 801d16e:	4611      	mov	r1, r2
 801d170:	9201      	str	r2, [sp, #4]
 801d172:	f000 f87b 	bl	801d26c <_malloc_r>
 801d176:	9a01      	ldr	r2, [sp, #4]
 801d178:	4605      	mov	r5, r0
 801d17a:	b930      	cbnz	r0, 801d18a <_calloc_r+0x24>
 801d17c:	4628      	mov	r0, r5
 801d17e:	b003      	add	sp, #12
 801d180:	bd30      	pop	{r4, r5, pc}
 801d182:	220c      	movs	r2, #12
 801d184:	6002      	str	r2, [r0, #0]
 801d186:	2500      	movs	r5, #0
 801d188:	e7f8      	b.n	801d17c <_calloc_r+0x16>
 801d18a:	4621      	mov	r1, r4
 801d18c:	f7fc fbb4 	bl	80198f8 <memset>
 801d190:	e7f4      	b.n	801d17c <_calloc_r+0x16>
	...

0801d194 <_free_r>:
 801d194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d196:	2900      	cmp	r1, #0
 801d198:	d044      	beq.n	801d224 <_free_r+0x90>
 801d19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d19e:	9001      	str	r0, [sp, #4]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	f1a1 0404 	sub.w	r4, r1, #4
 801d1a6:	bfb8      	it	lt
 801d1a8:	18e4      	addlt	r4, r4, r3
 801d1aa:	f000 fab5 	bl	801d718 <__malloc_lock>
 801d1ae:	4a1e      	ldr	r2, [pc, #120]	; (801d228 <_free_r+0x94>)
 801d1b0:	9801      	ldr	r0, [sp, #4]
 801d1b2:	6813      	ldr	r3, [r2, #0]
 801d1b4:	b933      	cbnz	r3, 801d1c4 <_free_r+0x30>
 801d1b6:	6063      	str	r3, [r4, #4]
 801d1b8:	6014      	str	r4, [r2, #0]
 801d1ba:	b003      	add	sp, #12
 801d1bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d1c0:	f000 bab0 	b.w	801d724 <__malloc_unlock>
 801d1c4:	42a3      	cmp	r3, r4
 801d1c6:	d908      	bls.n	801d1da <_free_r+0x46>
 801d1c8:	6825      	ldr	r5, [r4, #0]
 801d1ca:	1961      	adds	r1, r4, r5
 801d1cc:	428b      	cmp	r3, r1
 801d1ce:	bf01      	itttt	eq
 801d1d0:	6819      	ldreq	r1, [r3, #0]
 801d1d2:	685b      	ldreq	r3, [r3, #4]
 801d1d4:	1949      	addeq	r1, r1, r5
 801d1d6:	6021      	streq	r1, [r4, #0]
 801d1d8:	e7ed      	b.n	801d1b6 <_free_r+0x22>
 801d1da:	461a      	mov	r2, r3
 801d1dc:	685b      	ldr	r3, [r3, #4]
 801d1de:	b10b      	cbz	r3, 801d1e4 <_free_r+0x50>
 801d1e0:	42a3      	cmp	r3, r4
 801d1e2:	d9fa      	bls.n	801d1da <_free_r+0x46>
 801d1e4:	6811      	ldr	r1, [r2, #0]
 801d1e6:	1855      	adds	r5, r2, r1
 801d1e8:	42a5      	cmp	r5, r4
 801d1ea:	d10b      	bne.n	801d204 <_free_r+0x70>
 801d1ec:	6824      	ldr	r4, [r4, #0]
 801d1ee:	4421      	add	r1, r4
 801d1f0:	1854      	adds	r4, r2, r1
 801d1f2:	42a3      	cmp	r3, r4
 801d1f4:	6011      	str	r1, [r2, #0]
 801d1f6:	d1e0      	bne.n	801d1ba <_free_r+0x26>
 801d1f8:	681c      	ldr	r4, [r3, #0]
 801d1fa:	685b      	ldr	r3, [r3, #4]
 801d1fc:	6053      	str	r3, [r2, #4]
 801d1fe:	4421      	add	r1, r4
 801d200:	6011      	str	r1, [r2, #0]
 801d202:	e7da      	b.n	801d1ba <_free_r+0x26>
 801d204:	d902      	bls.n	801d20c <_free_r+0x78>
 801d206:	230c      	movs	r3, #12
 801d208:	6003      	str	r3, [r0, #0]
 801d20a:	e7d6      	b.n	801d1ba <_free_r+0x26>
 801d20c:	6825      	ldr	r5, [r4, #0]
 801d20e:	1961      	adds	r1, r4, r5
 801d210:	428b      	cmp	r3, r1
 801d212:	bf04      	itt	eq
 801d214:	6819      	ldreq	r1, [r3, #0]
 801d216:	685b      	ldreq	r3, [r3, #4]
 801d218:	6063      	str	r3, [r4, #4]
 801d21a:	bf04      	itt	eq
 801d21c:	1949      	addeq	r1, r1, r5
 801d21e:	6021      	streq	r1, [r4, #0]
 801d220:	6054      	str	r4, [r2, #4]
 801d222:	e7ca      	b.n	801d1ba <_free_r+0x26>
 801d224:	b003      	add	sp, #12
 801d226:	bd30      	pop	{r4, r5, pc}
 801d228:	20000dbc 	.word	0x20000dbc

0801d22c <sbrk_aligned>:
 801d22c:	b570      	push	{r4, r5, r6, lr}
 801d22e:	4e0e      	ldr	r6, [pc, #56]	; (801d268 <sbrk_aligned+0x3c>)
 801d230:	460c      	mov	r4, r1
 801d232:	6831      	ldr	r1, [r6, #0]
 801d234:	4605      	mov	r5, r0
 801d236:	b911      	cbnz	r1, 801d23e <sbrk_aligned+0x12>
 801d238:	f000 f9f2 	bl	801d620 <_sbrk_r>
 801d23c:	6030      	str	r0, [r6, #0]
 801d23e:	4621      	mov	r1, r4
 801d240:	4628      	mov	r0, r5
 801d242:	f000 f9ed 	bl	801d620 <_sbrk_r>
 801d246:	1c43      	adds	r3, r0, #1
 801d248:	d00a      	beq.n	801d260 <sbrk_aligned+0x34>
 801d24a:	1cc4      	adds	r4, r0, #3
 801d24c:	f024 0403 	bic.w	r4, r4, #3
 801d250:	42a0      	cmp	r0, r4
 801d252:	d007      	beq.n	801d264 <sbrk_aligned+0x38>
 801d254:	1a21      	subs	r1, r4, r0
 801d256:	4628      	mov	r0, r5
 801d258:	f000 f9e2 	bl	801d620 <_sbrk_r>
 801d25c:	3001      	adds	r0, #1
 801d25e:	d101      	bne.n	801d264 <sbrk_aligned+0x38>
 801d260:	f04f 34ff 	mov.w	r4, #4294967295
 801d264:	4620      	mov	r0, r4
 801d266:	bd70      	pop	{r4, r5, r6, pc}
 801d268:	20000dc0 	.word	0x20000dc0

0801d26c <_malloc_r>:
 801d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d270:	1ccd      	adds	r5, r1, #3
 801d272:	f025 0503 	bic.w	r5, r5, #3
 801d276:	3508      	adds	r5, #8
 801d278:	2d0c      	cmp	r5, #12
 801d27a:	bf38      	it	cc
 801d27c:	250c      	movcc	r5, #12
 801d27e:	2d00      	cmp	r5, #0
 801d280:	4607      	mov	r7, r0
 801d282:	db01      	blt.n	801d288 <_malloc_r+0x1c>
 801d284:	42a9      	cmp	r1, r5
 801d286:	d905      	bls.n	801d294 <_malloc_r+0x28>
 801d288:	230c      	movs	r3, #12
 801d28a:	603b      	str	r3, [r7, #0]
 801d28c:	2600      	movs	r6, #0
 801d28e:	4630      	mov	r0, r6
 801d290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d294:	4e2e      	ldr	r6, [pc, #184]	; (801d350 <_malloc_r+0xe4>)
 801d296:	f000 fa3f 	bl	801d718 <__malloc_lock>
 801d29a:	6833      	ldr	r3, [r6, #0]
 801d29c:	461c      	mov	r4, r3
 801d29e:	bb34      	cbnz	r4, 801d2ee <_malloc_r+0x82>
 801d2a0:	4629      	mov	r1, r5
 801d2a2:	4638      	mov	r0, r7
 801d2a4:	f7ff ffc2 	bl	801d22c <sbrk_aligned>
 801d2a8:	1c43      	adds	r3, r0, #1
 801d2aa:	4604      	mov	r4, r0
 801d2ac:	d14d      	bne.n	801d34a <_malloc_r+0xde>
 801d2ae:	6834      	ldr	r4, [r6, #0]
 801d2b0:	4626      	mov	r6, r4
 801d2b2:	2e00      	cmp	r6, #0
 801d2b4:	d140      	bne.n	801d338 <_malloc_r+0xcc>
 801d2b6:	6823      	ldr	r3, [r4, #0]
 801d2b8:	4631      	mov	r1, r6
 801d2ba:	4638      	mov	r0, r7
 801d2bc:	eb04 0803 	add.w	r8, r4, r3
 801d2c0:	f000 f9ae 	bl	801d620 <_sbrk_r>
 801d2c4:	4580      	cmp	r8, r0
 801d2c6:	d13a      	bne.n	801d33e <_malloc_r+0xd2>
 801d2c8:	6821      	ldr	r1, [r4, #0]
 801d2ca:	3503      	adds	r5, #3
 801d2cc:	1a6d      	subs	r5, r5, r1
 801d2ce:	f025 0503 	bic.w	r5, r5, #3
 801d2d2:	3508      	adds	r5, #8
 801d2d4:	2d0c      	cmp	r5, #12
 801d2d6:	bf38      	it	cc
 801d2d8:	250c      	movcc	r5, #12
 801d2da:	4629      	mov	r1, r5
 801d2dc:	4638      	mov	r0, r7
 801d2de:	f7ff ffa5 	bl	801d22c <sbrk_aligned>
 801d2e2:	3001      	adds	r0, #1
 801d2e4:	d02b      	beq.n	801d33e <_malloc_r+0xd2>
 801d2e6:	6823      	ldr	r3, [r4, #0]
 801d2e8:	442b      	add	r3, r5
 801d2ea:	6023      	str	r3, [r4, #0]
 801d2ec:	e00e      	b.n	801d30c <_malloc_r+0xa0>
 801d2ee:	6822      	ldr	r2, [r4, #0]
 801d2f0:	1b52      	subs	r2, r2, r5
 801d2f2:	d41e      	bmi.n	801d332 <_malloc_r+0xc6>
 801d2f4:	2a0b      	cmp	r2, #11
 801d2f6:	d916      	bls.n	801d326 <_malloc_r+0xba>
 801d2f8:	1961      	adds	r1, r4, r5
 801d2fa:	42a3      	cmp	r3, r4
 801d2fc:	6025      	str	r5, [r4, #0]
 801d2fe:	bf18      	it	ne
 801d300:	6059      	strne	r1, [r3, #4]
 801d302:	6863      	ldr	r3, [r4, #4]
 801d304:	bf08      	it	eq
 801d306:	6031      	streq	r1, [r6, #0]
 801d308:	5162      	str	r2, [r4, r5]
 801d30a:	604b      	str	r3, [r1, #4]
 801d30c:	4638      	mov	r0, r7
 801d30e:	f104 060b 	add.w	r6, r4, #11
 801d312:	f000 fa07 	bl	801d724 <__malloc_unlock>
 801d316:	f026 0607 	bic.w	r6, r6, #7
 801d31a:	1d23      	adds	r3, r4, #4
 801d31c:	1af2      	subs	r2, r6, r3
 801d31e:	d0b6      	beq.n	801d28e <_malloc_r+0x22>
 801d320:	1b9b      	subs	r3, r3, r6
 801d322:	50a3      	str	r3, [r4, r2]
 801d324:	e7b3      	b.n	801d28e <_malloc_r+0x22>
 801d326:	6862      	ldr	r2, [r4, #4]
 801d328:	42a3      	cmp	r3, r4
 801d32a:	bf0c      	ite	eq
 801d32c:	6032      	streq	r2, [r6, #0]
 801d32e:	605a      	strne	r2, [r3, #4]
 801d330:	e7ec      	b.n	801d30c <_malloc_r+0xa0>
 801d332:	4623      	mov	r3, r4
 801d334:	6864      	ldr	r4, [r4, #4]
 801d336:	e7b2      	b.n	801d29e <_malloc_r+0x32>
 801d338:	4634      	mov	r4, r6
 801d33a:	6876      	ldr	r6, [r6, #4]
 801d33c:	e7b9      	b.n	801d2b2 <_malloc_r+0x46>
 801d33e:	230c      	movs	r3, #12
 801d340:	603b      	str	r3, [r7, #0]
 801d342:	4638      	mov	r0, r7
 801d344:	f000 f9ee 	bl	801d724 <__malloc_unlock>
 801d348:	e7a1      	b.n	801d28e <_malloc_r+0x22>
 801d34a:	6025      	str	r5, [r4, #0]
 801d34c:	e7de      	b.n	801d30c <_malloc_r+0xa0>
 801d34e:	bf00      	nop
 801d350:	20000dbc 	.word	0x20000dbc

0801d354 <__ssputs_r>:
 801d354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d358:	688e      	ldr	r6, [r1, #8]
 801d35a:	429e      	cmp	r6, r3
 801d35c:	4682      	mov	sl, r0
 801d35e:	460c      	mov	r4, r1
 801d360:	4690      	mov	r8, r2
 801d362:	461f      	mov	r7, r3
 801d364:	d838      	bhi.n	801d3d8 <__ssputs_r+0x84>
 801d366:	898a      	ldrh	r2, [r1, #12]
 801d368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d36c:	d032      	beq.n	801d3d4 <__ssputs_r+0x80>
 801d36e:	6825      	ldr	r5, [r4, #0]
 801d370:	6909      	ldr	r1, [r1, #16]
 801d372:	eba5 0901 	sub.w	r9, r5, r1
 801d376:	6965      	ldr	r5, [r4, #20]
 801d378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d380:	3301      	adds	r3, #1
 801d382:	444b      	add	r3, r9
 801d384:	106d      	asrs	r5, r5, #1
 801d386:	429d      	cmp	r5, r3
 801d388:	bf38      	it	cc
 801d38a:	461d      	movcc	r5, r3
 801d38c:	0553      	lsls	r3, r2, #21
 801d38e:	d531      	bpl.n	801d3f4 <__ssputs_r+0xa0>
 801d390:	4629      	mov	r1, r5
 801d392:	f7ff ff6b 	bl	801d26c <_malloc_r>
 801d396:	4606      	mov	r6, r0
 801d398:	b950      	cbnz	r0, 801d3b0 <__ssputs_r+0x5c>
 801d39a:	230c      	movs	r3, #12
 801d39c:	f8ca 3000 	str.w	r3, [sl]
 801d3a0:	89a3      	ldrh	r3, [r4, #12]
 801d3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3a6:	81a3      	strh	r3, [r4, #12]
 801d3a8:	f04f 30ff 	mov.w	r0, #4294967295
 801d3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3b0:	6921      	ldr	r1, [r4, #16]
 801d3b2:	464a      	mov	r2, r9
 801d3b4:	f7ff fa08 	bl	801c7c8 <memcpy>
 801d3b8:	89a3      	ldrh	r3, [r4, #12]
 801d3ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d3c2:	81a3      	strh	r3, [r4, #12]
 801d3c4:	6126      	str	r6, [r4, #16]
 801d3c6:	6165      	str	r5, [r4, #20]
 801d3c8:	444e      	add	r6, r9
 801d3ca:	eba5 0509 	sub.w	r5, r5, r9
 801d3ce:	6026      	str	r6, [r4, #0]
 801d3d0:	60a5      	str	r5, [r4, #8]
 801d3d2:	463e      	mov	r6, r7
 801d3d4:	42be      	cmp	r6, r7
 801d3d6:	d900      	bls.n	801d3da <__ssputs_r+0x86>
 801d3d8:	463e      	mov	r6, r7
 801d3da:	6820      	ldr	r0, [r4, #0]
 801d3dc:	4632      	mov	r2, r6
 801d3de:	4641      	mov	r1, r8
 801d3e0:	f000 f980 	bl	801d6e4 <memmove>
 801d3e4:	68a3      	ldr	r3, [r4, #8]
 801d3e6:	1b9b      	subs	r3, r3, r6
 801d3e8:	60a3      	str	r3, [r4, #8]
 801d3ea:	6823      	ldr	r3, [r4, #0]
 801d3ec:	4433      	add	r3, r6
 801d3ee:	6023      	str	r3, [r4, #0]
 801d3f0:	2000      	movs	r0, #0
 801d3f2:	e7db      	b.n	801d3ac <__ssputs_r+0x58>
 801d3f4:	462a      	mov	r2, r5
 801d3f6:	f000 f99b 	bl	801d730 <_realloc_r>
 801d3fa:	4606      	mov	r6, r0
 801d3fc:	2800      	cmp	r0, #0
 801d3fe:	d1e1      	bne.n	801d3c4 <__ssputs_r+0x70>
 801d400:	6921      	ldr	r1, [r4, #16]
 801d402:	4650      	mov	r0, sl
 801d404:	f7ff fec6 	bl	801d194 <_free_r>
 801d408:	e7c7      	b.n	801d39a <__ssputs_r+0x46>
	...

0801d40c <_svfiprintf_r>:
 801d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d410:	4698      	mov	r8, r3
 801d412:	898b      	ldrh	r3, [r1, #12]
 801d414:	061b      	lsls	r3, r3, #24
 801d416:	b09d      	sub	sp, #116	; 0x74
 801d418:	4607      	mov	r7, r0
 801d41a:	460d      	mov	r5, r1
 801d41c:	4614      	mov	r4, r2
 801d41e:	d50e      	bpl.n	801d43e <_svfiprintf_r+0x32>
 801d420:	690b      	ldr	r3, [r1, #16]
 801d422:	b963      	cbnz	r3, 801d43e <_svfiprintf_r+0x32>
 801d424:	2140      	movs	r1, #64	; 0x40
 801d426:	f7ff ff21 	bl	801d26c <_malloc_r>
 801d42a:	6028      	str	r0, [r5, #0]
 801d42c:	6128      	str	r0, [r5, #16]
 801d42e:	b920      	cbnz	r0, 801d43a <_svfiprintf_r+0x2e>
 801d430:	230c      	movs	r3, #12
 801d432:	603b      	str	r3, [r7, #0]
 801d434:	f04f 30ff 	mov.w	r0, #4294967295
 801d438:	e0d1      	b.n	801d5de <_svfiprintf_r+0x1d2>
 801d43a:	2340      	movs	r3, #64	; 0x40
 801d43c:	616b      	str	r3, [r5, #20]
 801d43e:	2300      	movs	r3, #0
 801d440:	9309      	str	r3, [sp, #36]	; 0x24
 801d442:	2320      	movs	r3, #32
 801d444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d448:	f8cd 800c 	str.w	r8, [sp, #12]
 801d44c:	2330      	movs	r3, #48	; 0x30
 801d44e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d5f8 <_svfiprintf_r+0x1ec>
 801d452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d456:	f04f 0901 	mov.w	r9, #1
 801d45a:	4623      	mov	r3, r4
 801d45c:	469a      	mov	sl, r3
 801d45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d462:	b10a      	cbz	r2, 801d468 <_svfiprintf_r+0x5c>
 801d464:	2a25      	cmp	r2, #37	; 0x25
 801d466:	d1f9      	bne.n	801d45c <_svfiprintf_r+0x50>
 801d468:	ebba 0b04 	subs.w	fp, sl, r4
 801d46c:	d00b      	beq.n	801d486 <_svfiprintf_r+0x7a>
 801d46e:	465b      	mov	r3, fp
 801d470:	4622      	mov	r2, r4
 801d472:	4629      	mov	r1, r5
 801d474:	4638      	mov	r0, r7
 801d476:	f7ff ff6d 	bl	801d354 <__ssputs_r>
 801d47a:	3001      	adds	r0, #1
 801d47c:	f000 80aa 	beq.w	801d5d4 <_svfiprintf_r+0x1c8>
 801d480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d482:	445a      	add	r2, fp
 801d484:	9209      	str	r2, [sp, #36]	; 0x24
 801d486:	f89a 3000 	ldrb.w	r3, [sl]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	f000 80a2 	beq.w	801d5d4 <_svfiprintf_r+0x1c8>
 801d490:	2300      	movs	r3, #0
 801d492:	f04f 32ff 	mov.w	r2, #4294967295
 801d496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d49a:	f10a 0a01 	add.w	sl, sl, #1
 801d49e:	9304      	str	r3, [sp, #16]
 801d4a0:	9307      	str	r3, [sp, #28]
 801d4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d4a6:	931a      	str	r3, [sp, #104]	; 0x68
 801d4a8:	4654      	mov	r4, sl
 801d4aa:	2205      	movs	r2, #5
 801d4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4b0:	4851      	ldr	r0, [pc, #324]	; (801d5f8 <_svfiprintf_r+0x1ec>)
 801d4b2:	f7fb fabd 	bl	8018a30 <memchr>
 801d4b6:	9a04      	ldr	r2, [sp, #16]
 801d4b8:	b9d8      	cbnz	r0, 801d4f2 <_svfiprintf_r+0xe6>
 801d4ba:	06d0      	lsls	r0, r2, #27
 801d4bc:	bf44      	itt	mi
 801d4be:	2320      	movmi	r3, #32
 801d4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4c4:	0711      	lsls	r1, r2, #28
 801d4c6:	bf44      	itt	mi
 801d4c8:	232b      	movmi	r3, #43	; 0x2b
 801d4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d4ce:	f89a 3000 	ldrb.w	r3, [sl]
 801d4d2:	2b2a      	cmp	r3, #42	; 0x2a
 801d4d4:	d015      	beq.n	801d502 <_svfiprintf_r+0xf6>
 801d4d6:	9a07      	ldr	r2, [sp, #28]
 801d4d8:	4654      	mov	r4, sl
 801d4da:	2000      	movs	r0, #0
 801d4dc:	f04f 0c0a 	mov.w	ip, #10
 801d4e0:	4621      	mov	r1, r4
 801d4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d4e6:	3b30      	subs	r3, #48	; 0x30
 801d4e8:	2b09      	cmp	r3, #9
 801d4ea:	d94e      	bls.n	801d58a <_svfiprintf_r+0x17e>
 801d4ec:	b1b0      	cbz	r0, 801d51c <_svfiprintf_r+0x110>
 801d4ee:	9207      	str	r2, [sp, #28]
 801d4f0:	e014      	b.n	801d51c <_svfiprintf_r+0x110>
 801d4f2:	eba0 0308 	sub.w	r3, r0, r8
 801d4f6:	fa09 f303 	lsl.w	r3, r9, r3
 801d4fa:	4313      	orrs	r3, r2
 801d4fc:	9304      	str	r3, [sp, #16]
 801d4fe:	46a2      	mov	sl, r4
 801d500:	e7d2      	b.n	801d4a8 <_svfiprintf_r+0x9c>
 801d502:	9b03      	ldr	r3, [sp, #12]
 801d504:	1d19      	adds	r1, r3, #4
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	9103      	str	r1, [sp, #12]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	bfbb      	ittet	lt
 801d50e:	425b      	neglt	r3, r3
 801d510:	f042 0202 	orrlt.w	r2, r2, #2
 801d514:	9307      	strge	r3, [sp, #28]
 801d516:	9307      	strlt	r3, [sp, #28]
 801d518:	bfb8      	it	lt
 801d51a:	9204      	strlt	r2, [sp, #16]
 801d51c:	7823      	ldrb	r3, [r4, #0]
 801d51e:	2b2e      	cmp	r3, #46	; 0x2e
 801d520:	d10c      	bne.n	801d53c <_svfiprintf_r+0x130>
 801d522:	7863      	ldrb	r3, [r4, #1]
 801d524:	2b2a      	cmp	r3, #42	; 0x2a
 801d526:	d135      	bne.n	801d594 <_svfiprintf_r+0x188>
 801d528:	9b03      	ldr	r3, [sp, #12]
 801d52a:	1d1a      	adds	r2, r3, #4
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	9203      	str	r2, [sp, #12]
 801d530:	2b00      	cmp	r3, #0
 801d532:	bfb8      	it	lt
 801d534:	f04f 33ff 	movlt.w	r3, #4294967295
 801d538:	3402      	adds	r4, #2
 801d53a:	9305      	str	r3, [sp, #20]
 801d53c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d608 <_svfiprintf_r+0x1fc>
 801d540:	7821      	ldrb	r1, [r4, #0]
 801d542:	2203      	movs	r2, #3
 801d544:	4650      	mov	r0, sl
 801d546:	f7fb fa73 	bl	8018a30 <memchr>
 801d54a:	b140      	cbz	r0, 801d55e <_svfiprintf_r+0x152>
 801d54c:	2340      	movs	r3, #64	; 0x40
 801d54e:	eba0 000a 	sub.w	r0, r0, sl
 801d552:	fa03 f000 	lsl.w	r0, r3, r0
 801d556:	9b04      	ldr	r3, [sp, #16]
 801d558:	4303      	orrs	r3, r0
 801d55a:	3401      	adds	r4, #1
 801d55c:	9304      	str	r3, [sp, #16]
 801d55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d562:	4826      	ldr	r0, [pc, #152]	; (801d5fc <_svfiprintf_r+0x1f0>)
 801d564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d568:	2206      	movs	r2, #6
 801d56a:	f7fb fa61 	bl	8018a30 <memchr>
 801d56e:	2800      	cmp	r0, #0
 801d570:	d038      	beq.n	801d5e4 <_svfiprintf_r+0x1d8>
 801d572:	4b23      	ldr	r3, [pc, #140]	; (801d600 <_svfiprintf_r+0x1f4>)
 801d574:	bb1b      	cbnz	r3, 801d5be <_svfiprintf_r+0x1b2>
 801d576:	9b03      	ldr	r3, [sp, #12]
 801d578:	3307      	adds	r3, #7
 801d57a:	f023 0307 	bic.w	r3, r3, #7
 801d57e:	3308      	adds	r3, #8
 801d580:	9303      	str	r3, [sp, #12]
 801d582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d584:	4433      	add	r3, r6
 801d586:	9309      	str	r3, [sp, #36]	; 0x24
 801d588:	e767      	b.n	801d45a <_svfiprintf_r+0x4e>
 801d58a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d58e:	460c      	mov	r4, r1
 801d590:	2001      	movs	r0, #1
 801d592:	e7a5      	b.n	801d4e0 <_svfiprintf_r+0xd4>
 801d594:	2300      	movs	r3, #0
 801d596:	3401      	adds	r4, #1
 801d598:	9305      	str	r3, [sp, #20]
 801d59a:	4619      	mov	r1, r3
 801d59c:	f04f 0c0a 	mov.w	ip, #10
 801d5a0:	4620      	mov	r0, r4
 801d5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5a6:	3a30      	subs	r2, #48	; 0x30
 801d5a8:	2a09      	cmp	r2, #9
 801d5aa:	d903      	bls.n	801d5b4 <_svfiprintf_r+0x1a8>
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d0c5      	beq.n	801d53c <_svfiprintf_r+0x130>
 801d5b0:	9105      	str	r1, [sp, #20]
 801d5b2:	e7c3      	b.n	801d53c <_svfiprintf_r+0x130>
 801d5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 801d5b8:	4604      	mov	r4, r0
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	e7f0      	b.n	801d5a0 <_svfiprintf_r+0x194>
 801d5be:	ab03      	add	r3, sp, #12
 801d5c0:	9300      	str	r3, [sp, #0]
 801d5c2:	462a      	mov	r2, r5
 801d5c4:	4b0f      	ldr	r3, [pc, #60]	; (801d604 <_svfiprintf_r+0x1f8>)
 801d5c6:	a904      	add	r1, sp, #16
 801d5c8:	4638      	mov	r0, r7
 801d5ca:	f7fc fa3d 	bl	8019a48 <_printf_float>
 801d5ce:	1c42      	adds	r2, r0, #1
 801d5d0:	4606      	mov	r6, r0
 801d5d2:	d1d6      	bne.n	801d582 <_svfiprintf_r+0x176>
 801d5d4:	89ab      	ldrh	r3, [r5, #12]
 801d5d6:	065b      	lsls	r3, r3, #25
 801d5d8:	f53f af2c 	bmi.w	801d434 <_svfiprintf_r+0x28>
 801d5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d5de:	b01d      	add	sp, #116	; 0x74
 801d5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5e4:	ab03      	add	r3, sp, #12
 801d5e6:	9300      	str	r3, [sp, #0]
 801d5e8:	462a      	mov	r2, r5
 801d5ea:	4b06      	ldr	r3, [pc, #24]	; (801d604 <_svfiprintf_r+0x1f8>)
 801d5ec:	a904      	add	r1, sp, #16
 801d5ee:	4638      	mov	r0, r7
 801d5f0:	f7fc fcce 	bl	8019f90 <_printf_i>
 801d5f4:	e7eb      	b.n	801d5ce <_svfiprintf_r+0x1c2>
 801d5f6:	bf00      	nop
 801d5f8:	080525f4 	.word	0x080525f4
 801d5fc:	080525fe 	.word	0x080525fe
 801d600:	08019a49 	.word	0x08019a49
 801d604:	0801d355 	.word	0x0801d355
 801d608:	080525fa 	.word	0x080525fa
 801d60c:	00000000 	.word	0x00000000

0801d610 <nan>:
 801d610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d618 <nan+0x8>
 801d614:	4770      	bx	lr
 801d616:	bf00      	nop
 801d618:	00000000 	.word	0x00000000
 801d61c:	7ff80000 	.word	0x7ff80000

0801d620 <_sbrk_r>:
 801d620:	b538      	push	{r3, r4, r5, lr}
 801d622:	4d06      	ldr	r5, [pc, #24]	; (801d63c <_sbrk_r+0x1c>)
 801d624:	2300      	movs	r3, #0
 801d626:	4604      	mov	r4, r0
 801d628:	4608      	mov	r0, r1
 801d62a:	602b      	str	r3, [r5, #0]
 801d62c:	f7e8 fdea 	bl	8006204 <_sbrk>
 801d630:	1c43      	adds	r3, r0, #1
 801d632:	d102      	bne.n	801d63a <_sbrk_r+0x1a>
 801d634:	682b      	ldr	r3, [r5, #0]
 801d636:	b103      	cbz	r3, 801d63a <_sbrk_r+0x1a>
 801d638:	6023      	str	r3, [r4, #0]
 801d63a:	bd38      	pop	{r3, r4, r5, pc}
 801d63c:	20000dc4 	.word	0x20000dc4

0801d640 <strncmp>:
 801d640:	b510      	push	{r4, lr}
 801d642:	b17a      	cbz	r2, 801d664 <strncmp+0x24>
 801d644:	4603      	mov	r3, r0
 801d646:	3901      	subs	r1, #1
 801d648:	1884      	adds	r4, r0, r2
 801d64a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d64e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d652:	4290      	cmp	r0, r2
 801d654:	d101      	bne.n	801d65a <strncmp+0x1a>
 801d656:	42a3      	cmp	r3, r4
 801d658:	d101      	bne.n	801d65e <strncmp+0x1e>
 801d65a:	1a80      	subs	r0, r0, r2
 801d65c:	bd10      	pop	{r4, pc}
 801d65e:	2800      	cmp	r0, #0
 801d660:	d1f3      	bne.n	801d64a <strncmp+0xa>
 801d662:	e7fa      	b.n	801d65a <strncmp+0x1a>
 801d664:	4610      	mov	r0, r2
 801d666:	e7f9      	b.n	801d65c <strncmp+0x1c>

0801d668 <__ascii_wctomb>:
 801d668:	b149      	cbz	r1, 801d67e <__ascii_wctomb+0x16>
 801d66a:	2aff      	cmp	r2, #255	; 0xff
 801d66c:	bf85      	ittet	hi
 801d66e:	238a      	movhi	r3, #138	; 0x8a
 801d670:	6003      	strhi	r3, [r0, #0]
 801d672:	700a      	strbls	r2, [r1, #0]
 801d674:	f04f 30ff 	movhi.w	r0, #4294967295
 801d678:	bf98      	it	ls
 801d67a:	2001      	movls	r0, #1
 801d67c:	4770      	bx	lr
 801d67e:	4608      	mov	r0, r1
 801d680:	4770      	bx	lr
	...

0801d684 <__assert_func>:
 801d684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d686:	4614      	mov	r4, r2
 801d688:	461a      	mov	r2, r3
 801d68a:	4b09      	ldr	r3, [pc, #36]	; (801d6b0 <__assert_func+0x2c>)
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	4605      	mov	r5, r0
 801d690:	68d8      	ldr	r0, [r3, #12]
 801d692:	b14c      	cbz	r4, 801d6a8 <__assert_func+0x24>
 801d694:	4b07      	ldr	r3, [pc, #28]	; (801d6b4 <__assert_func+0x30>)
 801d696:	9100      	str	r1, [sp, #0]
 801d698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d69c:	4906      	ldr	r1, [pc, #24]	; (801d6b8 <__assert_func+0x34>)
 801d69e:	462b      	mov	r3, r5
 801d6a0:	f000 f80e 	bl	801d6c0 <fiprintf>
 801d6a4:	f000 fa8c 	bl	801dbc0 <abort>
 801d6a8:	4b04      	ldr	r3, [pc, #16]	; (801d6bc <__assert_func+0x38>)
 801d6aa:	461c      	mov	r4, r3
 801d6ac:	e7f3      	b.n	801d696 <__assert_func+0x12>
 801d6ae:	bf00      	nop
 801d6b0:	20000064 	.word	0x20000064
 801d6b4:	08052605 	.word	0x08052605
 801d6b8:	08052612 	.word	0x08052612
 801d6bc:	08052640 	.word	0x08052640

0801d6c0 <fiprintf>:
 801d6c0:	b40e      	push	{r1, r2, r3}
 801d6c2:	b503      	push	{r0, r1, lr}
 801d6c4:	4601      	mov	r1, r0
 801d6c6:	ab03      	add	r3, sp, #12
 801d6c8:	4805      	ldr	r0, [pc, #20]	; (801d6e0 <fiprintf+0x20>)
 801d6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6ce:	6800      	ldr	r0, [r0, #0]
 801d6d0:	9301      	str	r3, [sp, #4]
 801d6d2:	f000 f885 	bl	801d7e0 <_vfiprintf_r>
 801d6d6:	b002      	add	sp, #8
 801d6d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d6dc:	b003      	add	sp, #12
 801d6de:	4770      	bx	lr
 801d6e0:	20000064 	.word	0x20000064

0801d6e4 <memmove>:
 801d6e4:	4288      	cmp	r0, r1
 801d6e6:	b510      	push	{r4, lr}
 801d6e8:	eb01 0402 	add.w	r4, r1, r2
 801d6ec:	d902      	bls.n	801d6f4 <memmove+0x10>
 801d6ee:	4284      	cmp	r4, r0
 801d6f0:	4623      	mov	r3, r4
 801d6f2:	d807      	bhi.n	801d704 <memmove+0x20>
 801d6f4:	1e43      	subs	r3, r0, #1
 801d6f6:	42a1      	cmp	r1, r4
 801d6f8:	d008      	beq.n	801d70c <memmove+0x28>
 801d6fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d6fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d702:	e7f8      	b.n	801d6f6 <memmove+0x12>
 801d704:	4402      	add	r2, r0
 801d706:	4601      	mov	r1, r0
 801d708:	428a      	cmp	r2, r1
 801d70a:	d100      	bne.n	801d70e <memmove+0x2a>
 801d70c:	bd10      	pop	{r4, pc}
 801d70e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d716:	e7f7      	b.n	801d708 <memmove+0x24>

0801d718 <__malloc_lock>:
 801d718:	4801      	ldr	r0, [pc, #4]	; (801d720 <__malloc_lock+0x8>)
 801d71a:	f000 bc11 	b.w	801df40 <__retarget_lock_acquire_recursive>
 801d71e:	bf00      	nop
 801d720:	20000dc8 	.word	0x20000dc8

0801d724 <__malloc_unlock>:
 801d724:	4801      	ldr	r0, [pc, #4]	; (801d72c <__malloc_unlock+0x8>)
 801d726:	f000 bc0c 	b.w	801df42 <__retarget_lock_release_recursive>
 801d72a:	bf00      	nop
 801d72c:	20000dc8 	.word	0x20000dc8

0801d730 <_realloc_r>:
 801d730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d734:	4680      	mov	r8, r0
 801d736:	4614      	mov	r4, r2
 801d738:	460e      	mov	r6, r1
 801d73a:	b921      	cbnz	r1, 801d746 <_realloc_r+0x16>
 801d73c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d740:	4611      	mov	r1, r2
 801d742:	f7ff bd93 	b.w	801d26c <_malloc_r>
 801d746:	b92a      	cbnz	r2, 801d754 <_realloc_r+0x24>
 801d748:	f7ff fd24 	bl	801d194 <_free_r>
 801d74c:	4625      	mov	r5, r4
 801d74e:	4628      	mov	r0, r5
 801d750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d754:	f000 fc5c 	bl	801e010 <_malloc_usable_size_r>
 801d758:	4284      	cmp	r4, r0
 801d75a:	4607      	mov	r7, r0
 801d75c:	d802      	bhi.n	801d764 <_realloc_r+0x34>
 801d75e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d762:	d812      	bhi.n	801d78a <_realloc_r+0x5a>
 801d764:	4621      	mov	r1, r4
 801d766:	4640      	mov	r0, r8
 801d768:	f7ff fd80 	bl	801d26c <_malloc_r>
 801d76c:	4605      	mov	r5, r0
 801d76e:	2800      	cmp	r0, #0
 801d770:	d0ed      	beq.n	801d74e <_realloc_r+0x1e>
 801d772:	42bc      	cmp	r4, r7
 801d774:	4622      	mov	r2, r4
 801d776:	4631      	mov	r1, r6
 801d778:	bf28      	it	cs
 801d77a:	463a      	movcs	r2, r7
 801d77c:	f7ff f824 	bl	801c7c8 <memcpy>
 801d780:	4631      	mov	r1, r6
 801d782:	4640      	mov	r0, r8
 801d784:	f7ff fd06 	bl	801d194 <_free_r>
 801d788:	e7e1      	b.n	801d74e <_realloc_r+0x1e>
 801d78a:	4635      	mov	r5, r6
 801d78c:	e7df      	b.n	801d74e <_realloc_r+0x1e>

0801d78e <__sfputc_r>:
 801d78e:	6893      	ldr	r3, [r2, #8]
 801d790:	3b01      	subs	r3, #1
 801d792:	2b00      	cmp	r3, #0
 801d794:	b410      	push	{r4}
 801d796:	6093      	str	r3, [r2, #8]
 801d798:	da08      	bge.n	801d7ac <__sfputc_r+0x1e>
 801d79a:	6994      	ldr	r4, [r2, #24]
 801d79c:	42a3      	cmp	r3, r4
 801d79e:	db01      	blt.n	801d7a4 <__sfputc_r+0x16>
 801d7a0:	290a      	cmp	r1, #10
 801d7a2:	d103      	bne.n	801d7ac <__sfputc_r+0x1e>
 801d7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7a8:	f000 b94a 	b.w	801da40 <__swbuf_r>
 801d7ac:	6813      	ldr	r3, [r2, #0]
 801d7ae:	1c58      	adds	r0, r3, #1
 801d7b0:	6010      	str	r0, [r2, #0]
 801d7b2:	7019      	strb	r1, [r3, #0]
 801d7b4:	4608      	mov	r0, r1
 801d7b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7ba:	4770      	bx	lr

0801d7bc <__sfputs_r>:
 801d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7be:	4606      	mov	r6, r0
 801d7c0:	460f      	mov	r7, r1
 801d7c2:	4614      	mov	r4, r2
 801d7c4:	18d5      	adds	r5, r2, r3
 801d7c6:	42ac      	cmp	r4, r5
 801d7c8:	d101      	bne.n	801d7ce <__sfputs_r+0x12>
 801d7ca:	2000      	movs	r0, #0
 801d7cc:	e007      	b.n	801d7de <__sfputs_r+0x22>
 801d7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7d2:	463a      	mov	r2, r7
 801d7d4:	4630      	mov	r0, r6
 801d7d6:	f7ff ffda 	bl	801d78e <__sfputc_r>
 801d7da:	1c43      	adds	r3, r0, #1
 801d7dc:	d1f3      	bne.n	801d7c6 <__sfputs_r+0xa>
 801d7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d7e0 <_vfiprintf_r>:
 801d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e4:	460d      	mov	r5, r1
 801d7e6:	b09d      	sub	sp, #116	; 0x74
 801d7e8:	4614      	mov	r4, r2
 801d7ea:	4698      	mov	r8, r3
 801d7ec:	4606      	mov	r6, r0
 801d7ee:	b118      	cbz	r0, 801d7f8 <_vfiprintf_r+0x18>
 801d7f0:	6983      	ldr	r3, [r0, #24]
 801d7f2:	b90b      	cbnz	r3, 801d7f8 <_vfiprintf_r+0x18>
 801d7f4:	f000 fb06 	bl	801de04 <__sinit>
 801d7f8:	4b89      	ldr	r3, [pc, #548]	; (801da20 <_vfiprintf_r+0x240>)
 801d7fa:	429d      	cmp	r5, r3
 801d7fc:	d11b      	bne.n	801d836 <_vfiprintf_r+0x56>
 801d7fe:	6875      	ldr	r5, [r6, #4]
 801d800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d802:	07d9      	lsls	r1, r3, #31
 801d804:	d405      	bmi.n	801d812 <_vfiprintf_r+0x32>
 801d806:	89ab      	ldrh	r3, [r5, #12]
 801d808:	059a      	lsls	r2, r3, #22
 801d80a:	d402      	bmi.n	801d812 <_vfiprintf_r+0x32>
 801d80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d80e:	f000 fb97 	bl	801df40 <__retarget_lock_acquire_recursive>
 801d812:	89ab      	ldrh	r3, [r5, #12]
 801d814:	071b      	lsls	r3, r3, #28
 801d816:	d501      	bpl.n	801d81c <_vfiprintf_r+0x3c>
 801d818:	692b      	ldr	r3, [r5, #16]
 801d81a:	b9eb      	cbnz	r3, 801d858 <_vfiprintf_r+0x78>
 801d81c:	4629      	mov	r1, r5
 801d81e:	4630      	mov	r0, r6
 801d820:	f000 f960 	bl	801dae4 <__swsetup_r>
 801d824:	b1c0      	cbz	r0, 801d858 <_vfiprintf_r+0x78>
 801d826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d828:	07dc      	lsls	r4, r3, #31
 801d82a:	d50e      	bpl.n	801d84a <_vfiprintf_r+0x6a>
 801d82c:	f04f 30ff 	mov.w	r0, #4294967295
 801d830:	b01d      	add	sp, #116	; 0x74
 801d832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d836:	4b7b      	ldr	r3, [pc, #492]	; (801da24 <_vfiprintf_r+0x244>)
 801d838:	429d      	cmp	r5, r3
 801d83a:	d101      	bne.n	801d840 <_vfiprintf_r+0x60>
 801d83c:	68b5      	ldr	r5, [r6, #8]
 801d83e:	e7df      	b.n	801d800 <_vfiprintf_r+0x20>
 801d840:	4b79      	ldr	r3, [pc, #484]	; (801da28 <_vfiprintf_r+0x248>)
 801d842:	429d      	cmp	r5, r3
 801d844:	bf08      	it	eq
 801d846:	68f5      	ldreq	r5, [r6, #12]
 801d848:	e7da      	b.n	801d800 <_vfiprintf_r+0x20>
 801d84a:	89ab      	ldrh	r3, [r5, #12]
 801d84c:	0598      	lsls	r0, r3, #22
 801d84e:	d4ed      	bmi.n	801d82c <_vfiprintf_r+0x4c>
 801d850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d852:	f000 fb76 	bl	801df42 <__retarget_lock_release_recursive>
 801d856:	e7e9      	b.n	801d82c <_vfiprintf_r+0x4c>
 801d858:	2300      	movs	r3, #0
 801d85a:	9309      	str	r3, [sp, #36]	; 0x24
 801d85c:	2320      	movs	r3, #32
 801d85e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d862:	f8cd 800c 	str.w	r8, [sp, #12]
 801d866:	2330      	movs	r3, #48	; 0x30
 801d868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801da2c <_vfiprintf_r+0x24c>
 801d86c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d870:	f04f 0901 	mov.w	r9, #1
 801d874:	4623      	mov	r3, r4
 801d876:	469a      	mov	sl, r3
 801d878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d87c:	b10a      	cbz	r2, 801d882 <_vfiprintf_r+0xa2>
 801d87e:	2a25      	cmp	r2, #37	; 0x25
 801d880:	d1f9      	bne.n	801d876 <_vfiprintf_r+0x96>
 801d882:	ebba 0b04 	subs.w	fp, sl, r4
 801d886:	d00b      	beq.n	801d8a0 <_vfiprintf_r+0xc0>
 801d888:	465b      	mov	r3, fp
 801d88a:	4622      	mov	r2, r4
 801d88c:	4629      	mov	r1, r5
 801d88e:	4630      	mov	r0, r6
 801d890:	f7ff ff94 	bl	801d7bc <__sfputs_r>
 801d894:	3001      	adds	r0, #1
 801d896:	f000 80aa 	beq.w	801d9ee <_vfiprintf_r+0x20e>
 801d89a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d89c:	445a      	add	r2, fp
 801d89e:	9209      	str	r2, [sp, #36]	; 0x24
 801d8a0:	f89a 3000 	ldrb.w	r3, [sl]
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	f000 80a2 	beq.w	801d9ee <_vfiprintf_r+0x20e>
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	f04f 32ff 	mov.w	r2, #4294967295
 801d8b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d8b4:	f10a 0a01 	add.w	sl, sl, #1
 801d8b8:	9304      	str	r3, [sp, #16]
 801d8ba:	9307      	str	r3, [sp, #28]
 801d8bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d8c0:	931a      	str	r3, [sp, #104]	; 0x68
 801d8c2:	4654      	mov	r4, sl
 801d8c4:	2205      	movs	r2, #5
 801d8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8ca:	4858      	ldr	r0, [pc, #352]	; (801da2c <_vfiprintf_r+0x24c>)
 801d8cc:	f7fb f8b0 	bl	8018a30 <memchr>
 801d8d0:	9a04      	ldr	r2, [sp, #16]
 801d8d2:	b9d8      	cbnz	r0, 801d90c <_vfiprintf_r+0x12c>
 801d8d4:	06d1      	lsls	r1, r2, #27
 801d8d6:	bf44      	itt	mi
 801d8d8:	2320      	movmi	r3, #32
 801d8da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d8de:	0713      	lsls	r3, r2, #28
 801d8e0:	bf44      	itt	mi
 801d8e2:	232b      	movmi	r3, #43	; 0x2b
 801d8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d8e8:	f89a 3000 	ldrb.w	r3, [sl]
 801d8ec:	2b2a      	cmp	r3, #42	; 0x2a
 801d8ee:	d015      	beq.n	801d91c <_vfiprintf_r+0x13c>
 801d8f0:	9a07      	ldr	r2, [sp, #28]
 801d8f2:	4654      	mov	r4, sl
 801d8f4:	2000      	movs	r0, #0
 801d8f6:	f04f 0c0a 	mov.w	ip, #10
 801d8fa:	4621      	mov	r1, r4
 801d8fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d900:	3b30      	subs	r3, #48	; 0x30
 801d902:	2b09      	cmp	r3, #9
 801d904:	d94e      	bls.n	801d9a4 <_vfiprintf_r+0x1c4>
 801d906:	b1b0      	cbz	r0, 801d936 <_vfiprintf_r+0x156>
 801d908:	9207      	str	r2, [sp, #28]
 801d90a:	e014      	b.n	801d936 <_vfiprintf_r+0x156>
 801d90c:	eba0 0308 	sub.w	r3, r0, r8
 801d910:	fa09 f303 	lsl.w	r3, r9, r3
 801d914:	4313      	orrs	r3, r2
 801d916:	9304      	str	r3, [sp, #16]
 801d918:	46a2      	mov	sl, r4
 801d91a:	e7d2      	b.n	801d8c2 <_vfiprintf_r+0xe2>
 801d91c:	9b03      	ldr	r3, [sp, #12]
 801d91e:	1d19      	adds	r1, r3, #4
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	9103      	str	r1, [sp, #12]
 801d924:	2b00      	cmp	r3, #0
 801d926:	bfbb      	ittet	lt
 801d928:	425b      	neglt	r3, r3
 801d92a:	f042 0202 	orrlt.w	r2, r2, #2
 801d92e:	9307      	strge	r3, [sp, #28]
 801d930:	9307      	strlt	r3, [sp, #28]
 801d932:	bfb8      	it	lt
 801d934:	9204      	strlt	r2, [sp, #16]
 801d936:	7823      	ldrb	r3, [r4, #0]
 801d938:	2b2e      	cmp	r3, #46	; 0x2e
 801d93a:	d10c      	bne.n	801d956 <_vfiprintf_r+0x176>
 801d93c:	7863      	ldrb	r3, [r4, #1]
 801d93e:	2b2a      	cmp	r3, #42	; 0x2a
 801d940:	d135      	bne.n	801d9ae <_vfiprintf_r+0x1ce>
 801d942:	9b03      	ldr	r3, [sp, #12]
 801d944:	1d1a      	adds	r2, r3, #4
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	9203      	str	r2, [sp, #12]
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	bfb8      	it	lt
 801d94e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d952:	3402      	adds	r4, #2
 801d954:	9305      	str	r3, [sp, #20]
 801d956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801da3c <_vfiprintf_r+0x25c>
 801d95a:	7821      	ldrb	r1, [r4, #0]
 801d95c:	2203      	movs	r2, #3
 801d95e:	4650      	mov	r0, sl
 801d960:	f7fb f866 	bl	8018a30 <memchr>
 801d964:	b140      	cbz	r0, 801d978 <_vfiprintf_r+0x198>
 801d966:	2340      	movs	r3, #64	; 0x40
 801d968:	eba0 000a 	sub.w	r0, r0, sl
 801d96c:	fa03 f000 	lsl.w	r0, r3, r0
 801d970:	9b04      	ldr	r3, [sp, #16]
 801d972:	4303      	orrs	r3, r0
 801d974:	3401      	adds	r4, #1
 801d976:	9304      	str	r3, [sp, #16]
 801d978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d97c:	482c      	ldr	r0, [pc, #176]	; (801da30 <_vfiprintf_r+0x250>)
 801d97e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d982:	2206      	movs	r2, #6
 801d984:	f7fb f854 	bl	8018a30 <memchr>
 801d988:	2800      	cmp	r0, #0
 801d98a:	d03f      	beq.n	801da0c <_vfiprintf_r+0x22c>
 801d98c:	4b29      	ldr	r3, [pc, #164]	; (801da34 <_vfiprintf_r+0x254>)
 801d98e:	bb1b      	cbnz	r3, 801d9d8 <_vfiprintf_r+0x1f8>
 801d990:	9b03      	ldr	r3, [sp, #12]
 801d992:	3307      	adds	r3, #7
 801d994:	f023 0307 	bic.w	r3, r3, #7
 801d998:	3308      	adds	r3, #8
 801d99a:	9303      	str	r3, [sp, #12]
 801d99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d99e:	443b      	add	r3, r7
 801d9a0:	9309      	str	r3, [sp, #36]	; 0x24
 801d9a2:	e767      	b.n	801d874 <_vfiprintf_r+0x94>
 801d9a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d9a8:	460c      	mov	r4, r1
 801d9aa:	2001      	movs	r0, #1
 801d9ac:	e7a5      	b.n	801d8fa <_vfiprintf_r+0x11a>
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	3401      	adds	r4, #1
 801d9b2:	9305      	str	r3, [sp, #20]
 801d9b4:	4619      	mov	r1, r3
 801d9b6:	f04f 0c0a 	mov.w	ip, #10
 801d9ba:	4620      	mov	r0, r4
 801d9bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d9c0:	3a30      	subs	r2, #48	; 0x30
 801d9c2:	2a09      	cmp	r2, #9
 801d9c4:	d903      	bls.n	801d9ce <_vfiprintf_r+0x1ee>
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d0c5      	beq.n	801d956 <_vfiprintf_r+0x176>
 801d9ca:	9105      	str	r1, [sp, #20]
 801d9cc:	e7c3      	b.n	801d956 <_vfiprintf_r+0x176>
 801d9ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801d9d2:	4604      	mov	r4, r0
 801d9d4:	2301      	movs	r3, #1
 801d9d6:	e7f0      	b.n	801d9ba <_vfiprintf_r+0x1da>
 801d9d8:	ab03      	add	r3, sp, #12
 801d9da:	9300      	str	r3, [sp, #0]
 801d9dc:	462a      	mov	r2, r5
 801d9de:	4b16      	ldr	r3, [pc, #88]	; (801da38 <_vfiprintf_r+0x258>)
 801d9e0:	a904      	add	r1, sp, #16
 801d9e2:	4630      	mov	r0, r6
 801d9e4:	f7fc f830 	bl	8019a48 <_printf_float>
 801d9e8:	4607      	mov	r7, r0
 801d9ea:	1c78      	adds	r0, r7, #1
 801d9ec:	d1d6      	bne.n	801d99c <_vfiprintf_r+0x1bc>
 801d9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d9f0:	07d9      	lsls	r1, r3, #31
 801d9f2:	d405      	bmi.n	801da00 <_vfiprintf_r+0x220>
 801d9f4:	89ab      	ldrh	r3, [r5, #12]
 801d9f6:	059a      	lsls	r2, r3, #22
 801d9f8:	d402      	bmi.n	801da00 <_vfiprintf_r+0x220>
 801d9fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d9fc:	f000 faa1 	bl	801df42 <__retarget_lock_release_recursive>
 801da00:	89ab      	ldrh	r3, [r5, #12]
 801da02:	065b      	lsls	r3, r3, #25
 801da04:	f53f af12 	bmi.w	801d82c <_vfiprintf_r+0x4c>
 801da08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da0a:	e711      	b.n	801d830 <_vfiprintf_r+0x50>
 801da0c:	ab03      	add	r3, sp, #12
 801da0e:	9300      	str	r3, [sp, #0]
 801da10:	462a      	mov	r2, r5
 801da12:	4b09      	ldr	r3, [pc, #36]	; (801da38 <_vfiprintf_r+0x258>)
 801da14:	a904      	add	r1, sp, #16
 801da16:	4630      	mov	r0, r6
 801da18:	f7fc faba 	bl	8019f90 <_printf_i>
 801da1c:	e7e4      	b.n	801d9e8 <_vfiprintf_r+0x208>
 801da1e:	bf00      	nop
 801da20:	08052664 	.word	0x08052664
 801da24:	08052684 	.word	0x08052684
 801da28:	08052644 	.word	0x08052644
 801da2c:	080525f4 	.word	0x080525f4
 801da30:	080525fe 	.word	0x080525fe
 801da34:	08019a49 	.word	0x08019a49
 801da38:	0801d7bd 	.word	0x0801d7bd
 801da3c:	080525fa 	.word	0x080525fa

0801da40 <__swbuf_r>:
 801da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da42:	460e      	mov	r6, r1
 801da44:	4614      	mov	r4, r2
 801da46:	4605      	mov	r5, r0
 801da48:	b118      	cbz	r0, 801da52 <__swbuf_r+0x12>
 801da4a:	6983      	ldr	r3, [r0, #24]
 801da4c:	b90b      	cbnz	r3, 801da52 <__swbuf_r+0x12>
 801da4e:	f000 f9d9 	bl	801de04 <__sinit>
 801da52:	4b21      	ldr	r3, [pc, #132]	; (801dad8 <__swbuf_r+0x98>)
 801da54:	429c      	cmp	r4, r3
 801da56:	d12b      	bne.n	801dab0 <__swbuf_r+0x70>
 801da58:	686c      	ldr	r4, [r5, #4]
 801da5a:	69a3      	ldr	r3, [r4, #24]
 801da5c:	60a3      	str	r3, [r4, #8]
 801da5e:	89a3      	ldrh	r3, [r4, #12]
 801da60:	071a      	lsls	r2, r3, #28
 801da62:	d52f      	bpl.n	801dac4 <__swbuf_r+0x84>
 801da64:	6923      	ldr	r3, [r4, #16]
 801da66:	b36b      	cbz	r3, 801dac4 <__swbuf_r+0x84>
 801da68:	6923      	ldr	r3, [r4, #16]
 801da6a:	6820      	ldr	r0, [r4, #0]
 801da6c:	1ac0      	subs	r0, r0, r3
 801da6e:	6963      	ldr	r3, [r4, #20]
 801da70:	b2f6      	uxtb	r6, r6
 801da72:	4283      	cmp	r3, r0
 801da74:	4637      	mov	r7, r6
 801da76:	dc04      	bgt.n	801da82 <__swbuf_r+0x42>
 801da78:	4621      	mov	r1, r4
 801da7a:	4628      	mov	r0, r5
 801da7c:	f000 f92e 	bl	801dcdc <_fflush_r>
 801da80:	bb30      	cbnz	r0, 801dad0 <__swbuf_r+0x90>
 801da82:	68a3      	ldr	r3, [r4, #8]
 801da84:	3b01      	subs	r3, #1
 801da86:	60a3      	str	r3, [r4, #8]
 801da88:	6823      	ldr	r3, [r4, #0]
 801da8a:	1c5a      	adds	r2, r3, #1
 801da8c:	6022      	str	r2, [r4, #0]
 801da8e:	701e      	strb	r6, [r3, #0]
 801da90:	6963      	ldr	r3, [r4, #20]
 801da92:	3001      	adds	r0, #1
 801da94:	4283      	cmp	r3, r0
 801da96:	d004      	beq.n	801daa2 <__swbuf_r+0x62>
 801da98:	89a3      	ldrh	r3, [r4, #12]
 801da9a:	07db      	lsls	r3, r3, #31
 801da9c:	d506      	bpl.n	801daac <__swbuf_r+0x6c>
 801da9e:	2e0a      	cmp	r6, #10
 801daa0:	d104      	bne.n	801daac <__swbuf_r+0x6c>
 801daa2:	4621      	mov	r1, r4
 801daa4:	4628      	mov	r0, r5
 801daa6:	f000 f919 	bl	801dcdc <_fflush_r>
 801daaa:	b988      	cbnz	r0, 801dad0 <__swbuf_r+0x90>
 801daac:	4638      	mov	r0, r7
 801daae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dab0:	4b0a      	ldr	r3, [pc, #40]	; (801dadc <__swbuf_r+0x9c>)
 801dab2:	429c      	cmp	r4, r3
 801dab4:	d101      	bne.n	801daba <__swbuf_r+0x7a>
 801dab6:	68ac      	ldr	r4, [r5, #8]
 801dab8:	e7cf      	b.n	801da5a <__swbuf_r+0x1a>
 801daba:	4b09      	ldr	r3, [pc, #36]	; (801dae0 <__swbuf_r+0xa0>)
 801dabc:	429c      	cmp	r4, r3
 801dabe:	bf08      	it	eq
 801dac0:	68ec      	ldreq	r4, [r5, #12]
 801dac2:	e7ca      	b.n	801da5a <__swbuf_r+0x1a>
 801dac4:	4621      	mov	r1, r4
 801dac6:	4628      	mov	r0, r5
 801dac8:	f000 f80c 	bl	801dae4 <__swsetup_r>
 801dacc:	2800      	cmp	r0, #0
 801dace:	d0cb      	beq.n	801da68 <__swbuf_r+0x28>
 801dad0:	f04f 37ff 	mov.w	r7, #4294967295
 801dad4:	e7ea      	b.n	801daac <__swbuf_r+0x6c>
 801dad6:	bf00      	nop
 801dad8:	08052664 	.word	0x08052664
 801dadc:	08052684 	.word	0x08052684
 801dae0:	08052644 	.word	0x08052644

0801dae4 <__swsetup_r>:
 801dae4:	4b32      	ldr	r3, [pc, #200]	; (801dbb0 <__swsetup_r+0xcc>)
 801dae6:	b570      	push	{r4, r5, r6, lr}
 801dae8:	681d      	ldr	r5, [r3, #0]
 801daea:	4606      	mov	r6, r0
 801daec:	460c      	mov	r4, r1
 801daee:	b125      	cbz	r5, 801dafa <__swsetup_r+0x16>
 801daf0:	69ab      	ldr	r3, [r5, #24]
 801daf2:	b913      	cbnz	r3, 801dafa <__swsetup_r+0x16>
 801daf4:	4628      	mov	r0, r5
 801daf6:	f000 f985 	bl	801de04 <__sinit>
 801dafa:	4b2e      	ldr	r3, [pc, #184]	; (801dbb4 <__swsetup_r+0xd0>)
 801dafc:	429c      	cmp	r4, r3
 801dafe:	d10f      	bne.n	801db20 <__swsetup_r+0x3c>
 801db00:	686c      	ldr	r4, [r5, #4]
 801db02:	89a3      	ldrh	r3, [r4, #12]
 801db04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db08:	0719      	lsls	r1, r3, #28
 801db0a:	d42c      	bmi.n	801db66 <__swsetup_r+0x82>
 801db0c:	06dd      	lsls	r5, r3, #27
 801db0e:	d411      	bmi.n	801db34 <__swsetup_r+0x50>
 801db10:	2309      	movs	r3, #9
 801db12:	6033      	str	r3, [r6, #0]
 801db14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801db18:	81a3      	strh	r3, [r4, #12]
 801db1a:	f04f 30ff 	mov.w	r0, #4294967295
 801db1e:	e03e      	b.n	801db9e <__swsetup_r+0xba>
 801db20:	4b25      	ldr	r3, [pc, #148]	; (801dbb8 <__swsetup_r+0xd4>)
 801db22:	429c      	cmp	r4, r3
 801db24:	d101      	bne.n	801db2a <__swsetup_r+0x46>
 801db26:	68ac      	ldr	r4, [r5, #8]
 801db28:	e7eb      	b.n	801db02 <__swsetup_r+0x1e>
 801db2a:	4b24      	ldr	r3, [pc, #144]	; (801dbbc <__swsetup_r+0xd8>)
 801db2c:	429c      	cmp	r4, r3
 801db2e:	bf08      	it	eq
 801db30:	68ec      	ldreq	r4, [r5, #12]
 801db32:	e7e6      	b.n	801db02 <__swsetup_r+0x1e>
 801db34:	0758      	lsls	r0, r3, #29
 801db36:	d512      	bpl.n	801db5e <__swsetup_r+0x7a>
 801db38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db3a:	b141      	cbz	r1, 801db4e <__swsetup_r+0x6a>
 801db3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801db40:	4299      	cmp	r1, r3
 801db42:	d002      	beq.n	801db4a <__swsetup_r+0x66>
 801db44:	4630      	mov	r0, r6
 801db46:	f7ff fb25 	bl	801d194 <_free_r>
 801db4a:	2300      	movs	r3, #0
 801db4c:	6363      	str	r3, [r4, #52]	; 0x34
 801db4e:	89a3      	ldrh	r3, [r4, #12]
 801db50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801db54:	81a3      	strh	r3, [r4, #12]
 801db56:	2300      	movs	r3, #0
 801db58:	6063      	str	r3, [r4, #4]
 801db5a:	6923      	ldr	r3, [r4, #16]
 801db5c:	6023      	str	r3, [r4, #0]
 801db5e:	89a3      	ldrh	r3, [r4, #12]
 801db60:	f043 0308 	orr.w	r3, r3, #8
 801db64:	81a3      	strh	r3, [r4, #12]
 801db66:	6923      	ldr	r3, [r4, #16]
 801db68:	b94b      	cbnz	r3, 801db7e <__swsetup_r+0x9a>
 801db6a:	89a3      	ldrh	r3, [r4, #12]
 801db6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801db70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801db74:	d003      	beq.n	801db7e <__swsetup_r+0x9a>
 801db76:	4621      	mov	r1, r4
 801db78:	4630      	mov	r0, r6
 801db7a:	f000 fa09 	bl	801df90 <__smakebuf_r>
 801db7e:	89a0      	ldrh	r0, [r4, #12]
 801db80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db84:	f010 0301 	ands.w	r3, r0, #1
 801db88:	d00a      	beq.n	801dba0 <__swsetup_r+0xbc>
 801db8a:	2300      	movs	r3, #0
 801db8c:	60a3      	str	r3, [r4, #8]
 801db8e:	6963      	ldr	r3, [r4, #20]
 801db90:	425b      	negs	r3, r3
 801db92:	61a3      	str	r3, [r4, #24]
 801db94:	6923      	ldr	r3, [r4, #16]
 801db96:	b943      	cbnz	r3, 801dbaa <__swsetup_r+0xc6>
 801db98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801db9c:	d1ba      	bne.n	801db14 <__swsetup_r+0x30>
 801db9e:	bd70      	pop	{r4, r5, r6, pc}
 801dba0:	0781      	lsls	r1, r0, #30
 801dba2:	bf58      	it	pl
 801dba4:	6963      	ldrpl	r3, [r4, #20]
 801dba6:	60a3      	str	r3, [r4, #8]
 801dba8:	e7f4      	b.n	801db94 <__swsetup_r+0xb0>
 801dbaa:	2000      	movs	r0, #0
 801dbac:	e7f7      	b.n	801db9e <__swsetup_r+0xba>
 801dbae:	bf00      	nop
 801dbb0:	20000064 	.word	0x20000064
 801dbb4:	08052664 	.word	0x08052664
 801dbb8:	08052684 	.word	0x08052684
 801dbbc:	08052644 	.word	0x08052644

0801dbc0 <abort>:
 801dbc0:	b508      	push	{r3, lr}
 801dbc2:	2006      	movs	r0, #6
 801dbc4:	f000 fa54 	bl	801e070 <raise>
 801dbc8:	2001      	movs	r0, #1
 801dbca:	f7e8 fa30 	bl	800602e <_exit>
	...

0801dbd0 <__sflush_r>:
 801dbd0:	898a      	ldrh	r2, [r1, #12]
 801dbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbd6:	4605      	mov	r5, r0
 801dbd8:	0710      	lsls	r0, r2, #28
 801dbda:	460c      	mov	r4, r1
 801dbdc:	d458      	bmi.n	801dc90 <__sflush_r+0xc0>
 801dbde:	684b      	ldr	r3, [r1, #4]
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	dc05      	bgt.n	801dbf0 <__sflush_r+0x20>
 801dbe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	dc02      	bgt.n	801dbf0 <__sflush_r+0x20>
 801dbea:	2000      	movs	r0, #0
 801dbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbf2:	2e00      	cmp	r6, #0
 801dbf4:	d0f9      	beq.n	801dbea <__sflush_r+0x1a>
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbfc:	682f      	ldr	r7, [r5, #0]
 801dbfe:	602b      	str	r3, [r5, #0]
 801dc00:	d032      	beq.n	801dc68 <__sflush_r+0x98>
 801dc02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc04:	89a3      	ldrh	r3, [r4, #12]
 801dc06:	075a      	lsls	r2, r3, #29
 801dc08:	d505      	bpl.n	801dc16 <__sflush_r+0x46>
 801dc0a:	6863      	ldr	r3, [r4, #4]
 801dc0c:	1ac0      	subs	r0, r0, r3
 801dc0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc10:	b10b      	cbz	r3, 801dc16 <__sflush_r+0x46>
 801dc12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc14:	1ac0      	subs	r0, r0, r3
 801dc16:	2300      	movs	r3, #0
 801dc18:	4602      	mov	r2, r0
 801dc1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc1c:	6a21      	ldr	r1, [r4, #32]
 801dc1e:	4628      	mov	r0, r5
 801dc20:	47b0      	blx	r6
 801dc22:	1c43      	adds	r3, r0, #1
 801dc24:	89a3      	ldrh	r3, [r4, #12]
 801dc26:	d106      	bne.n	801dc36 <__sflush_r+0x66>
 801dc28:	6829      	ldr	r1, [r5, #0]
 801dc2a:	291d      	cmp	r1, #29
 801dc2c:	d82c      	bhi.n	801dc88 <__sflush_r+0xb8>
 801dc2e:	4a2a      	ldr	r2, [pc, #168]	; (801dcd8 <__sflush_r+0x108>)
 801dc30:	40ca      	lsrs	r2, r1
 801dc32:	07d6      	lsls	r6, r2, #31
 801dc34:	d528      	bpl.n	801dc88 <__sflush_r+0xb8>
 801dc36:	2200      	movs	r2, #0
 801dc38:	6062      	str	r2, [r4, #4]
 801dc3a:	04d9      	lsls	r1, r3, #19
 801dc3c:	6922      	ldr	r2, [r4, #16]
 801dc3e:	6022      	str	r2, [r4, #0]
 801dc40:	d504      	bpl.n	801dc4c <__sflush_r+0x7c>
 801dc42:	1c42      	adds	r2, r0, #1
 801dc44:	d101      	bne.n	801dc4a <__sflush_r+0x7a>
 801dc46:	682b      	ldr	r3, [r5, #0]
 801dc48:	b903      	cbnz	r3, 801dc4c <__sflush_r+0x7c>
 801dc4a:	6560      	str	r0, [r4, #84]	; 0x54
 801dc4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc4e:	602f      	str	r7, [r5, #0]
 801dc50:	2900      	cmp	r1, #0
 801dc52:	d0ca      	beq.n	801dbea <__sflush_r+0x1a>
 801dc54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc58:	4299      	cmp	r1, r3
 801dc5a:	d002      	beq.n	801dc62 <__sflush_r+0x92>
 801dc5c:	4628      	mov	r0, r5
 801dc5e:	f7ff fa99 	bl	801d194 <_free_r>
 801dc62:	2000      	movs	r0, #0
 801dc64:	6360      	str	r0, [r4, #52]	; 0x34
 801dc66:	e7c1      	b.n	801dbec <__sflush_r+0x1c>
 801dc68:	6a21      	ldr	r1, [r4, #32]
 801dc6a:	2301      	movs	r3, #1
 801dc6c:	4628      	mov	r0, r5
 801dc6e:	47b0      	blx	r6
 801dc70:	1c41      	adds	r1, r0, #1
 801dc72:	d1c7      	bne.n	801dc04 <__sflush_r+0x34>
 801dc74:	682b      	ldr	r3, [r5, #0]
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d0c4      	beq.n	801dc04 <__sflush_r+0x34>
 801dc7a:	2b1d      	cmp	r3, #29
 801dc7c:	d001      	beq.n	801dc82 <__sflush_r+0xb2>
 801dc7e:	2b16      	cmp	r3, #22
 801dc80:	d101      	bne.n	801dc86 <__sflush_r+0xb6>
 801dc82:	602f      	str	r7, [r5, #0]
 801dc84:	e7b1      	b.n	801dbea <__sflush_r+0x1a>
 801dc86:	89a3      	ldrh	r3, [r4, #12]
 801dc88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc8c:	81a3      	strh	r3, [r4, #12]
 801dc8e:	e7ad      	b.n	801dbec <__sflush_r+0x1c>
 801dc90:	690f      	ldr	r7, [r1, #16]
 801dc92:	2f00      	cmp	r7, #0
 801dc94:	d0a9      	beq.n	801dbea <__sflush_r+0x1a>
 801dc96:	0793      	lsls	r3, r2, #30
 801dc98:	680e      	ldr	r6, [r1, #0]
 801dc9a:	bf08      	it	eq
 801dc9c:	694b      	ldreq	r3, [r1, #20]
 801dc9e:	600f      	str	r7, [r1, #0]
 801dca0:	bf18      	it	ne
 801dca2:	2300      	movne	r3, #0
 801dca4:	eba6 0807 	sub.w	r8, r6, r7
 801dca8:	608b      	str	r3, [r1, #8]
 801dcaa:	f1b8 0f00 	cmp.w	r8, #0
 801dcae:	dd9c      	ble.n	801dbea <__sflush_r+0x1a>
 801dcb0:	6a21      	ldr	r1, [r4, #32]
 801dcb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dcb4:	4643      	mov	r3, r8
 801dcb6:	463a      	mov	r2, r7
 801dcb8:	4628      	mov	r0, r5
 801dcba:	47b0      	blx	r6
 801dcbc:	2800      	cmp	r0, #0
 801dcbe:	dc06      	bgt.n	801dcce <__sflush_r+0xfe>
 801dcc0:	89a3      	ldrh	r3, [r4, #12]
 801dcc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcc6:	81a3      	strh	r3, [r4, #12]
 801dcc8:	f04f 30ff 	mov.w	r0, #4294967295
 801dccc:	e78e      	b.n	801dbec <__sflush_r+0x1c>
 801dcce:	4407      	add	r7, r0
 801dcd0:	eba8 0800 	sub.w	r8, r8, r0
 801dcd4:	e7e9      	b.n	801dcaa <__sflush_r+0xda>
 801dcd6:	bf00      	nop
 801dcd8:	20400001 	.word	0x20400001

0801dcdc <_fflush_r>:
 801dcdc:	b538      	push	{r3, r4, r5, lr}
 801dcde:	690b      	ldr	r3, [r1, #16]
 801dce0:	4605      	mov	r5, r0
 801dce2:	460c      	mov	r4, r1
 801dce4:	b913      	cbnz	r3, 801dcec <_fflush_r+0x10>
 801dce6:	2500      	movs	r5, #0
 801dce8:	4628      	mov	r0, r5
 801dcea:	bd38      	pop	{r3, r4, r5, pc}
 801dcec:	b118      	cbz	r0, 801dcf6 <_fflush_r+0x1a>
 801dcee:	6983      	ldr	r3, [r0, #24]
 801dcf0:	b90b      	cbnz	r3, 801dcf6 <_fflush_r+0x1a>
 801dcf2:	f000 f887 	bl	801de04 <__sinit>
 801dcf6:	4b14      	ldr	r3, [pc, #80]	; (801dd48 <_fflush_r+0x6c>)
 801dcf8:	429c      	cmp	r4, r3
 801dcfa:	d11b      	bne.n	801dd34 <_fflush_r+0x58>
 801dcfc:	686c      	ldr	r4, [r5, #4]
 801dcfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d0ef      	beq.n	801dce6 <_fflush_r+0xa>
 801dd06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd08:	07d0      	lsls	r0, r2, #31
 801dd0a:	d404      	bmi.n	801dd16 <_fflush_r+0x3a>
 801dd0c:	0599      	lsls	r1, r3, #22
 801dd0e:	d402      	bmi.n	801dd16 <_fflush_r+0x3a>
 801dd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd12:	f000 f915 	bl	801df40 <__retarget_lock_acquire_recursive>
 801dd16:	4628      	mov	r0, r5
 801dd18:	4621      	mov	r1, r4
 801dd1a:	f7ff ff59 	bl	801dbd0 <__sflush_r>
 801dd1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd20:	07da      	lsls	r2, r3, #31
 801dd22:	4605      	mov	r5, r0
 801dd24:	d4e0      	bmi.n	801dce8 <_fflush_r+0xc>
 801dd26:	89a3      	ldrh	r3, [r4, #12]
 801dd28:	059b      	lsls	r3, r3, #22
 801dd2a:	d4dd      	bmi.n	801dce8 <_fflush_r+0xc>
 801dd2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd2e:	f000 f908 	bl	801df42 <__retarget_lock_release_recursive>
 801dd32:	e7d9      	b.n	801dce8 <_fflush_r+0xc>
 801dd34:	4b05      	ldr	r3, [pc, #20]	; (801dd4c <_fflush_r+0x70>)
 801dd36:	429c      	cmp	r4, r3
 801dd38:	d101      	bne.n	801dd3e <_fflush_r+0x62>
 801dd3a:	68ac      	ldr	r4, [r5, #8]
 801dd3c:	e7df      	b.n	801dcfe <_fflush_r+0x22>
 801dd3e:	4b04      	ldr	r3, [pc, #16]	; (801dd50 <_fflush_r+0x74>)
 801dd40:	429c      	cmp	r4, r3
 801dd42:	bf08      	it	eq
 801dd44:	68ec      	ldreq	r4, [r5, #12]
 801dd46:	e7da      	b.n	801dcfe <_fflush_r+0x22>
 801dd48:	08052664 	.word	0x08052664
 801dd4c:	08052684 	.word	0x08052684
 801dd50:	08052644 	.word	0x08052644

0801dd54 <std>:
 801dd54:	2300      	movs	r3, #0
 801dd56:	b510      	push	{r4, lr}
 801dd58:	4604      	mov	r4, r0
 801dd5a:	e9c0 3300 	strd	r3, r3, [r0]
 801dd5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd62:	6083      	str	r3, [r0, #8]
 801dd64:	8181      	strh	r1, [r0, #12]
 801dd66:	6643      	str	r3, [r0, #100]	; 0x64
 801dd68:	81c2      	strh	r2, [r0, #14]
 801dd6a:	6183      	str	r3, [r0, #24]
 801dd6c:	4619      	mov	r1, r3
 801dd6e:	2208      	movs	r2, #8
 801dd70:	305c      	adds	r0, #92	; 0x5c
 801dd72:	f7fb fdc1 	bl	80198f8 <memset>
 801dd76:	4b05      	ldr	r3, [pc, #20]	; (801dd8c <std+0x38>)
 801dd78:	6263      	str	r3, [r4, #36]	; 0x24
 801dd7a:	4b05      	ldr	r3, [pc, #20]	; (801dd90 <std+0x3c>)
 801dd7c:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd7e:	4b05      	ldr	r3, [pc, #20]	; (801dd94 <std+0x40>)
 801dd80:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd82:	4b05      	ldr	r3, [pc, #20]	; (801dd98 <std+0x44>)
 801dd84:	6224      	str	r4, [r4, #32]
 801dd86:	6323      	str	r3, [r4, #48]	; 0x30
 801dd88:	bd10      	pop	{r4, pc}
 801dd8a:	bf00      	nop
 801dd8c:	0801e0a9 	.word	0x0801e0a9
 801dd90:	0801e0cb 	.word	0x0801e0cb
 801dd94:	0801e103 	.word	0x0801e103
 801dd98:	0801e127 	.word	0x0801e127

0801dd9c <_cleanup_r>:
 801dd9c:	4901      	ldr	r1, [pc, #4]	; (801dda4 <_cleanup_r+0x8>)
 801dd9e:	f000 b8af 	b.w	801df00 <_fwalk_reent>
 801dda2:	bf00      	nop
 801dda4:	0801dcdd 	.word	0x0801dcdd

0801dda8 <__sfmoreglue>:
 801dda8:	b570      	push	{r4, r5, r6, lr}
 801ddaa:	2268      	movs	r2, #104	; 0x68
 801ddac:	1e4d      	subs	r5, r1, #1
 801ddae:	4355      	muls	r5, r2
 801ddb0:	460e      	mov	r6, r1
 801ddb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ddb6:	f7ff fa59 	bl	801d26c <_malloc_r>
 801ddba:	4604      	mov	r4, r0
 801ddbc:	b140      	cbz	r0, 801ddd0 <__sfmoreglue+0x28>
 801ddbe:	2100      	movs	r1, #0
 801ddc0:	e9c0 1600 	strd	r1, r6, [r0]
 801ddc4:	300c      	adds	r0, #12
 801ddc6:	60a0      	str	r0, [r4, #8]
 801ddc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ddcc:	f7fb fd94 	bl	80198f8 <memset>
 801ddd0:	4620      	mov	r0, r4
 801ddd2:	bd70      	pop	{r4, r5, r6, pc}

0801ddd4 <__sfp_lock_acquire>:
 801ddd4:	4801      	ldr	r0, [pc, #4]	; (801dddc <__sfp_lock_acquire+0x8>)
 801ddd6:	f000 b8b3 	b.w	801df40 <__retarget_lock_acquire_recursive>
 801ddda:	bf00      	nop
 801dddc:	20000dc9 	.word	0x20000dc9

0801dde0 <__sfp_lock_release>:
 801dde0:	4801      	ldr	r0, [pc, #4]	; (801dde8 <__sfp_lock_release+0x8>)
 801dde2:	f000 b8ae 	b.w	801df42 <__retarget_lock_release_recursive>
 801dde6:	bf00      	nop
 801dde8:	20000dc9 	.word	0x20000dc9

0801ddec <__sinit_lock_acquire>:
 801ddec:	4801      	ldr	r0, [pc, #4]	; (801ddf4 <__sinit_lock_acquire+0x8>)
 801ddee:	f000 b8a7 	b.w	801df40 <__retarget_lock_acquire_recursive>
 801ddf2:	bf00      	nop
 801ddf4:	20000dca 	.word	0x20000dca

0801ddf8 <__sinit_lock_release>:
 801ddf8:	4801      	ldr	r0, [pc, #4]	; (801de00 <__sinit_lock_release+0x8>)
 801ddfa:	f000 b8a2 	b.w	801df42 <__retarget_lock_release_recursive>
 801ddfe:	bf00      	nop
 801de00:	20000dca 	.word	0x20000dca

0801de04 <__sinit>:
 801de04:	b510      	push	{r4, lr}
 801de06:	4604      	mov	r4, r0
 801de08:	f7ff fff0 	bl	801ddec <__sinit_lock_acquire>
 801de0c:	69a3      	ldr	r3, [r4, #24]
 801de0e:	b11b      	cbz	r3, 801de18 <__sinit+0x14>
 801de10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de14:	f7ff bff0 	b.w	801ddf8 <__sinit_lock_release>
 801de18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de1c:	6523      	str	r3, [r4, #80]	; 0x50
 801de1e:	4b13      	ldr	r3, [pc, #76]	; (801de6c <__sinit+0x68>)
 801de20:	4a13      	ldr	r2, [pc, #76]	; (801de70 <__sinit+0x6c>)
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	62a2      	str	r2, [r4, #40]	; 0x28
 801de26:	42a3      	cmp	r3, r4
 801de28:	bf04      	itt	eq
 801de2a:	2301      	moveq	r3, #1
 801de2c:	61a3      	streq	r3, [r4, #24]
 801de2e:	4620      	mov	r0, r4
 801de30:	f000 f820 	bl	801de74 <__sfp>
 801de34:	6060      	str	r0, [r4, #4]
 801de36:	4620      	mov	r0, r4
 801de38:	f000 f81c 	bl	801de74 <__sfp>
 801de3c:	60a0      	str	r0, [r4, #8]
 801de3e:	4620      	mov	r0, r4
 801de40:	f000 f818 	bl	801de74 <__sfp>
 801de44:	2200      	movs	r2, #0
 801de46:	60e0      	str	r0, [r4, #12]
 801de48:	2104      	movs	r1, #4
 801de4a:	6860      	ldr	r0, [r4, #4]
 801de4c:	f7ff ff82 	bl	801dd54 <std>
 801de50:	68a0      	ldr	r0, [r4, #8]
 801de52:	2201      	movs	r2, #1
 801de54:	2109      	movs	r1, #9
 801de56:	f7ff ff7d 	bl	801dd54 <std>
 801de5a:	68e0      	ldr	r0, [r4, #12]
 801de5c:	2202      	movs	r2, #2
 801de5e:	2112      	movs	r1, #18
 801de60:	f7ff ff78 	bl	801dd54 <std>
 801de64:	2301      	movs	r3, #1
 801de66:	61a3      	str	r3, [r4, #24]
 801de68:	e7d2      	b.n	801de10 <__sinit+0xc>
 801de6a:	bf00      	nop
 801de6c:	08052200 	.word	0x08052200
 801de70:	0801dd9d 	.word	0x0801dd9d

0801de74 <__sfp>:
 801de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de76:	4607      	mov	r7, r0
 801de78:	f7ff ffac 	bl	801ddd4 <__sfp_lock_acquire>
 801de7c:	4b1e      	ldr	r3, [pc, #120]	; (801def8 <__sfp+0x84>)
 801de7e:	681e      	ldr	r6, [r3, #0]
 801de80:	69b3      	ldr	r3, [r6, #24]
 801de82:	b913      	cbnz	r3, 801de8a <__sfp+0x16>
 801de84:	4630      	mov	r0, r6
 801de86:	f7ff ffbd 	bl	801de04 <__sinit>
 801de8a:	3648      	adds	r6, #72	; 0x48
 801de8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801de90:	3b01      	subs	r3, #1
 801de92:	d503      	bpl.n	801de9c <__sfp+0x28>
 801de94:	6833      	ldr	r3, [r6, #0]
 801de96:	b30b      	cbz	r3, 801dedc <__sfp+0x68>
 801de98:	6836      	ldr	r6, [r6, #0]
 801de9a:	e7f7      	b.n	801de8c <__sfp+0x18>
 801de9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dea0:	b9d5      	cbnz	r5, 801ded8 <__sfp+0x64>
 801dea2:	4b16      	ldr	r3, [pc, #88]	; (801defc <__sfp+0x88>)
 801dea4:	60e3      	str	r3, [r4, #12]
 801dea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801deaa:	6665      	str	r5, [r4, #100]	; 0x64
 801deac:	f000 f847 	bl	801df3e <__retarget_lock_init_recursive>
 801deb0:	f7ff ff96 	bl	801dde0 <__sfp_lock_release>
 801deb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801deb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801debc:	6025      	str	r5, [r4, #0]
 801debe:	61a5      	str	r5, [r4, #24]
 801dec0:	2208      	movs	r2, #8
 801dec2:	4629      	mov	r1, r5
 801dec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dec8:	f7fb fd16 	bl	80198f8 <memset>
 801decc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ded0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ded4:	4620      	mov	r0, r4
 801ded6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ded8:	3468      	adds	r4, #104	; 0x68
 801deda:	e7d9      	b.n	801de90 <__sfp+0x1c>
 801dedc:	2104      	movs	r1, #4
 801dede:	4638      	mov	r0, r7
 801dee0:	f7ff ff62 	bl	801dda8 <__sfmoreglue>
 801dee4:	4604      	mov	r4, r0
 801dee6:	6030      	str	r0, [r6, #0]
 801dee8:	2800      	cmp	r0, #0
 801deea:	d1d5      	bne.n	801de98 <__sfp+0x24>
 801deec:	f7ff ff78 	bl	801dde0 <__sfp_lock_release>
 801def0:	230c      	movs	r3, #12
 801def2:	603b      	str	r3, [r7, #0]
 801def4:	e7ee      	b.n	801ded4 <__sfp+0x60>
 801def6:	bf00      	nop
 801def8:	08052200 	.word	0x08052200
 801defc:	ffff0001 	.word	0xffff0001

0801df00 <_fwalk_reent>:
 801df00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df04:	4606      	mov	r6, r0
 801df06:	4688      	mov	r8, r1
 801df08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df0c:	2700      	movs	r7, #0
 801df0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df12:	f1b9 0901 	subs.w	r9, r9, #1
 801df16:	d505      	bpl.n	801df24 <_fwalk_reent+0x24>
 801df18:	6824      	ldr	r4, [r4, #0]
 801df1a:	2c00      	cmp	r4, #0
 801df1c:	d1f7      	bne.n	801df0e <_fwalk_reent+0xe>
 801df1e:	4638      	mov	r0, r7
 801df20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df24:	89ab      	ldrh	r3, [r5, #12]
 801df26:	2b01      	cmp	r3, #1
 801df28:	d907      	bls.n	801df3a <_fwalk_reent+0x3a>
 801df2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df2e:	3301      	adds	r3, #1
 801df30:	d003      	beq.n	801df3a <_fwalk_reent+0x3a>
 801df32:	4629      	mov	r1, r5
 801df34:	4630      	mov	r0, r6
 801df36:	47c0      	blx	r8
 801df38:	4307      	orrs	r7, r0
 801df3a:	3568      	adds	r5, #104	; 0x68
 801df3c:	e7e9      	b.n	801df12 <_fwalk_reent+0x12>

0801df3e <__retarget_lock_init_recursive>:
 801df3e:	4770      	bx	lr

0801df40 <__retarget_lock_acquire_recursive>:
 801df40:	4770      	bx	lr

0801df42 <__retarget_lock_release_recursive>:
 801df42:	4770      	bx	lr

0801df44 <__swhatbuf_r>:
 801df44:	b570      	push	{r4, r5, r6, lr}
 801df46:	460e      	mov	r6, r1
 801df48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df4c:	2900      	cmp	r1, #0
 801df4e:	b096      	sub	sp, #88	; 0x58
 801df50:	4614      	mov	r4, r2
 801df52:	461d      	mov	r5, r3
 801df54:	da08      	bge.n	801df68 <__swhatbuf_r+0x24>
 801df56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801df5a:	2200      	movs	r2, #0
 801df5c:	602a      	str	r2, [r5, #0]
 801df5e:	061a      	lsls	r2, r3, #24
 801df60:	d410      	bmi.n	801df84 <__swhatbuf_r+0x40>
 801df62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801df66:	e00e      	b.n	801df86 <__swhatbuf_r+0x42>
 801df68:	466a      	mov	r2, sp
 801df6a:	f000 f903 	bl	801e174 <_fstat_r>
 801df6e:	2800      	cmp	r0, #0
 801df70:	dbf1      	blt.n	801df56 <__swhatbuf_r+0x12>
 801df72:	9a01      	ldr	r2, [sp, #4]
 801df74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801df78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801df7c:	425a      	negs	r2, r3
 801df7e:	415a      	adcs	r2, r3
 801df80:	602a      	str	r2, [r5, #0]
 801df82:	e7ee      	b.n	801df62 <__swhatbuf_r+0x1e>
 801df84:	2340      	movs	r3, #64	; 0x40
 801df86:	2000      	movs	r0, #0
 801df88:	6023      	str	r3, [r4, #0]
 801df8a:	b016      	add	sp, #88	; 0x58
 801df8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801df90 <__smakebuf_r>:
 801df90:	898b      	ldrh	r3, [r1, #12]
 801df92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801df94:	079d      	lsls	r5, r3, #30
 801df96:	4606      	mov	r6, r0
 801df98:	460c      	mov	r4, r1
 801df9a:	d507      	bpl.n	801dfac <__smakebuf_r+0x1c>
 801df9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dfa0:	6023      	str	r3, [r4, #0]
 801dfa2:	6123      	str	r3, [r4, #16]
 801dfa4:	2301      	movs	r3, #1
 801dfa6:	6163      	str	r3, [r4, #20]
 801dfa8:	b002      	add	sp, #8
 801dfaa:	bd70      	pop	{r4, r5, r6, pc}
 801dfac:	ab01      	add	r3, sp, #4
 801dfae:	466a      	mov	r2, sp
 801dfb0:	f7ff ffc8 	bl	801df44 <__swhatbuf_r>
 801dfb4:	9900      	ldr	r1, [sp, #0]
 801dfb6:	4605      	mov	r5, r0
 801dfb8:	4630      	mov	r0, r6
 801dfba:	f7ff f957 	bl	801d26c <_malloc_r>
 801dfbe:	b948      	cbnz	r0, 801dfd4 <__smakebuf_r+0x44>
 801dfc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfc4:	059a      	lsls	r2, r3, #22
 801dfc6:	d4ef      	bmi.n	801dfa8 <__smakebuf_r+0x18>
 801dfc8:	f023 0303 	bic.w	r3, r3, #3
 801dfcc:	f043 0302 	orr.w	r3, r3, #2
 801dfd0:	81a3      	strh	r3, [r4, #12]
 801dfd2:	e7e3      	b.n	801df9c <__smakebuf_r+0xc>
 801dfd4:	4b0d      	ldr	r3, [pc, #52]	; (801e00c <__smakebuf_r+0x7c>)
 801dfd6:	62b3      	str	r3, [r6, #40]	; 0x28
 801dfd8:	89a3      	ldrh	r3, [r4, #12]
 801dfda:	6020      	str	r0, [r4, #0]
 801dfdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfe0:	81a3      	strh	r3, [r4, #12]
 801dfe2:	9b00      	ldr	r3, [sp, #0]
 801dfe4:	6163      	str	r3, [r4, #20]
 801dfe6:	9b01      	ldr	r3, [sp, #4]
 801dfe8:	6120      	str	r0, [r4, #16]
 801dfea:	b15b      	cbz	r3, 801e004 <__smakebuf_r+0x74>
 801dfec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dff0:	4630      	mov	r0, r6
 801dff2:	f000 f8d1 	bl	801e198 <_isatty_r>
 801dff6:	b128      	cbz	r0, 801e004 <__smakebuf_r+0x74>
 801dff8:	89a3      	ldrh	r3, [r4, #12]
 801dffa:	f023 0303 	bic.w	r3, r3, #3
 801dffe:	f043 0301 	orr.w	r3, r3, #1
 801e002:	81a3      	strh	r3, [r4, #12]
 801e004:	89a0      	ldrh	r0, [r4, #12]
 801e006:	4305      	orrs	r5, r0
 801e008:	81a5      	strh	r5, [r4, #12]
 801e00a:	e7cd      	b.n	801dfa8 <__smakebuf_r+0x18>
 801e00c:	0801dd9d 	.word	0x0801dd9d

0801e010 <_malloc_usable_size_r>:
 801e010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e014:	1f18      	subs	r0, r3, #4
 801e016:	2b00      	cmp	r3, #0
 801e018:	bfbc      	itt	lt
 801e01a:	580b      	ldrlt	r3, [r1, r0]
 801e01c:	18c0      	addlt	r0, r0, r3
 801e01e:	4770      	bx	lr

0801e020 <_raise_r>:
 801e020:	291f      	cmp	r1, #31
 801e022:	b538      	push	{r3, r4, r5, lr}
 801e024:	4604      	mov	r4, r0
 801e026:	460d      	mov	r5, r1
 801e028:	d904      	bls.n	801e034 <_raise_r+0x14>
 801e02a:	2316      	movs	r3, #22
 801e02c:	6003      	str	r3, [r0, #0]
 801e02e:	f04f 30ff 	mov.w	r0, #4294967295
 801e032:	bd38      	pop	{r3, r4, r5, pc}
 801e034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e036:	b112      	cbz	r2, 801e03e <_raise_r+0x1e>
 801e038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e03c:	b94b      	cbnz	r3, 801e052 <_raise_r+0x32>
 801e03e:	4620      	mov	r0, r4
 801e040:	f000 f830 	bl	801e0a4 <_getpid_r>
 801e044:	462a      	mov	r2, r5
 801e046:	4601      	mov	r1, r0
 801e048:	4620      	mov	r0, r4
 801e04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e04e:	f000 b817 	b.w	801e080 <_kill_r>
 801e052:	2b01      	cmp	r3, #1
 801e054:	d00a      	beq.n	801e06c <_raise_r+0x4c>
 801e056:	1c59      	adds	r1, r3, #1
 801e058:	d103      	bne.n	801e062 <_raise_r+0x42>
 801e05a:	2316      	movs	r3, #22
 801e05c:	6003      	str	r3, [r0, #0]
 801e05e:	2001      	movs	r0, #1
 801e060:	e7e7      	b.n	801e032 <_raise_r+0x12>
 801e062:	2400      	movs	r4, #0
 801e064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e068:	4628      	mov	r0, r5
 801e06a:	4798      	blx	r3
 801e06c:	2000      	movs	r0, #0
 801e06e:	e7e0      	b.n	801e032 <_raise_r+0x12>

0801e070 <raise>:
 801e070:	4b02      	ldr	r3, [pc, #8]	; (801e07c <raise+0xc>)
 801e072:	4601      	mov	r1, r0
 801e074:	6818      	ldr	r0, [r3, #0]
 801e076:	f7ff bfd3 	b.w	801e020 <_raise_r>
 801e07a:	bf00      	nop
 801e07c:	20000064 	.word	0x20000064

0801e080 <_kill_r>:
 801e080:	b538      	push	{r3, r4, r5, lr}
 801e082:	4d07      	ldr	r5, [pc, #28]	; (801e0a0 <_kill_r+0x20>)
 801e084:	2300      	movs	r3, #0
 801e086:	4604      	mov	r4, r0
 801e088:	4608      	mov	r0, r1
 801e08a:	4611      	mov	r1, r2
 801e08c:	602b      	str	r3, [r5, #0]
 801e08e:	f7e7 ffbe 	bl	800600e <_kill>
 801e092:	1c43      	adds	r3, r0, #1
 801e094:	d102      	bne.n	801e09c <_kill_r+0x1c>
 801e096:	682b      	ldr	r3, [r5, #0]
 801e098:	b103      	cbz	r3, 801e09c <_kill_r+0x1c>
 801e09a:	6023      	str	r3, [r4, #0]
 801e09c:	bd38      	pop	{r3, r4, r5, pc}
 801e09e:	bf00      	nop
 801e0a0:	20000dc4 	.word	0x20000dc4

0801e0a4 <_getpid_r>:
 801e0a4:	f7e7 bfab 	b.w	8005ffe <_getpid>

0801e0a8 <__sread>:
 801e0a8:	b510      	push	{r4, lr}
 801e0aa:	460c      	mov	r4, r1
 801e0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0b0:	f000 f894 	bl	801e1dc <_read_r>
 801e0b4:	2800      	cmp	r0, #0
 801e0b6:	bfab      	itete	ge
 801e0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e0ba:	89a3      	ldrhlt	r3, [r4, #12]
 801e0bc:	181b      	addge	r3, r3, r0
 801e0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e0c2:	bfac      	ite	ge
 801e0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801e0c6:	81a3      	strhlt	r3, [r4, #12]
 801e0c8:	bd10      	pop	{r4, pc}

0801e0ca <__swrite>:
 801e0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0ce:	461f      	mov	r7, r3
 801e0d0:	898b      	ldrh	r3, [r1, #12]
 801e0d2:	05db      	lsls	r3, r3, #23
 801e0d4:	4605      	mov	r5, r0
 801e0d6:	460c      	mov	r4, r1
 801e0d8:	4616      	mov	r6, r2
 801e0da:	d505      	bpl.n	801e0e8 <__swrite+0x1e>
 801e0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0e0:	2302      	movs	r3, #2
 801e0e2:	2200      	movs	r2, #0
 801e0e4:	f000 f868 	bl	801e1b8 <_lseek_r>
 801e0e8:	89a3      	ldrh	r3, [r4, #12]
 801e0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e0f2:	81a3      	strh	r3, [r4, #12]
 801e0f4:	4632      	mov	r2, r6
 801e0f6:	463b      	mov	r3, r7
 801e0f8:	4628      	mov	r0, r5
 801e0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0fe:	f000 b817 	b.w	801e130 <_write_r>

0801e102 <__sseek>:
 801e102:	b510      	push	{r4, lr}
 801e104:	460c      	mov	r4, r1
 801e106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e10a:	f000 f855 	bl	801e1b8 <_lseek_r>
 801e10e:	1c43      	adds	r3, r0, #1
 801e110:	89a3      	ldrh	r3, [r4, #12]
 801e112:	bf15      	itete	ne
 801e114:	6560      	strne	r0, [r4, #84]	; 0x54
 801e116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e11e:	81a3      	strheq	r3, [r4, #12]
 801e120:	bf18      	it	ne
 801e122:	81a3      	strhne	r3, [r4, #12]
 801e124:	bd10      	pop	{r4, pc}

0801e126 <__sclose>:
 801e126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e12a:	f000 b813 	b.w	801e154 <_close_r>
	...

0801e130 <_write_r>:
 801e130:	b538      	push	{r3, r4, r5, lr}
 801e132:	4d07      	ldr	r5, [pc, #28]	; (801e150 <_write_r+0x20>)
 801e134:	4604      	mov	r4, r0
 801e136:	4608      	mov	r0, r1
 801e138:	4611      	mov	r1, r2
 801e13a:	2200      	movs	r2, #0
 801e13c:	602a      	str	r2, [r5, #0]
 801e13e:	461a      	mov	r2, r3
 801e140:	f7e7 ff9c 	bl	800607c <_write>
 801e144:	1c43      	adds	r3, r0, #1
 801e146:	d102      	bne.n	801e14e <_write_r+0x1e>
 801e148:	682b      	ldr	r3, [r5, #0]
 801e14a:	b103      	cbz	r3, 801e14e <_write_r+0x1e>
 801e14c:	6023      	str	r3, [r4, #0]
 801e14e:	bd38      	pop	{r3, r4, r5, pc}
 801e150:	20000dc4 	.word	0x20000dc4

0801e154 <_close_r>:
 801e154:	b538      	push	{r3, r4, r5, lr}
 801e156:	4d06      	ldr	r5, [pc, #24]	; (801e170 <_close_r+0x1c>)
 801e158:	2300      	movs	r3, #0
 801e15a:	4604      	mov	r4, r0
 801e15c:	4608      	mov	r0, r1
 801e15e:	602b      	str	r3, [r5, #0]
 801e160:	f7e7 ffa8 	bl	80060b4 <_close>
 801e164:	1c43      	adds	r3, r0, #1
 801e166:	d102      	bne.n	801e16e <_close_r+0x1a>
 801e168:	682b      	ldr	r3, [r5, #0]
 801e16a:	b103      	cbz	r3, 801e16e <_close_r+0x1a>
 801e16c:	6023      	str	r3, [r4, #0]
 801e16e:	bd38      	pop	{r3, r4, r5, pc}
 801e170:	20000dc4 	.word	0x20000dc4

0801e174 <_fstat_r>:
 801e174:	b538      	push	{r3, r4, r5, lr}
 801e176:	4d07      	ldr	r5, [pc, #28]	; (801e194 <_fstat_r+0x20>)
 801e178:	2300      	movs	r3, #0
 801e17a:	4604      	mov	r4, r0
 801e17c:	4608      	mov	r0, r1
 801e17e:	4611      	mov	r1, r2
 801e180:	602b      	str	r3, [r5, #0]
 801e182:	f7e7 ffa3 	bl	80060cc <_fstat>
 801e186:	1c43      	adds	r3, r0, #1
 801e188:	d102      	bne.n	801e190 <_fstat_r+0x1c>
 801e18a:	682b      	ldr	r3, [r5, #0]
 801e18c:	b103      	cbz	r3, 801e190 <_fstat_r+0x1c>
 801e18e:	6023      	str	r3, [r4, #0]
 801e190:	bd38      	pop	{r3, r4, r5, pc}
 801e192:	bf00      	nop
 801e194:	20000dc4 	.word	0x20000dc4

0801e198 <_isatty_r>:
 801e198:	b538      	push	{r3, r4, r5, lr}
 801e19a:	4d06      	ldr	r5, [pc, #24]	; (801e1b4 <_isatty_r+0x1c>)
 801e19c:	2300      	movs	r3, #0
 801e19e:	4604      	mov	r4, r0
 801e1a0:	4608      	mov	r0, r1
 801e1a2:	602b      	str	r3, [r5, #0]
 801e1a4:	f7e7 ffa2 	bl	80060ec <_isatty>
 801e1a8:	1c43      	adds	r3, r0, #1
 801e1aa:	d102      	bne.n	801e1b2 <_isatty_r+0x1a>
 801e1ac:	682b      	ldr	r3, [r5, #0]
 801e1ae:	b103      	cbz	r3, 801e1b2 <_isatty_r+0x1a>
 801e1b0:	6023      	str	r3, [r4, #0]
 801e1b2:	bd38      	pop	{r3, r4, r5, pc}
 801e1b4:	20000dc4 	.word	0x20000dc4

0801e1b8 <_lseek_r>:
 801e1b8:	b538      	push	{r3, r4, r5, lr}
 801e1ba:	4d07      	ldr	r5, [pc, #28]	; (801e1d8 <_lseek_r+0x20>)
 801e1bc:	4604      	mov	r4, r0
 801e1be:	4608      	mov	r0, r1
 801e1c0:	4611      	mov	r1, r2
 801e1c2:	2200      	movs	r2, #0
 801e1c4:	602a      	str	r2, [r5, #0]
 801e1c6:	461a      	mov	r2, r3
 801e1c8:	f7e7 ff9b 	bl	8006102 <_lseek>
 801e1cc:	1c43      	adds	r3, r0, #1
 801e1ce:	d102      	bne.n	801e1d6 <_lseek_r+0x1e>
 801e1d0:	682b      	ldr	r3, [r5, #0]
 801e1d2:	b103      	cbz	r3, 801e1d6 <_lseek_r+0x1e>
 801e1d4:	6023      	str	r3, [r4, #0]
 801e1d6:	bd38      	pop	{r3, r4, r5, pc}
 801e1d8:	20000dc4 	.word	0x20000dc4

0801e1dc <_read_r>:
 801e1dc:	b538      	push	{r3, r4, r5, lr}
 801e1de:	4d07      	ldr	r5, [pc, #28]	; (801e1fc <_read_r+0x20>)
 801e1e0:	4604      	mov	r4, r0
 801e1e2:	4608      	mov	r0, r1
 801e1e4:	4611      	mov	r1, r2
 801e1e6:	2200      	movs	r2, #0
 801e1e8:	602a      	str	r2, [r5, #0]
 801e1ea:	461a      	mov	r2, r3
 801e1ec:	f7e7 ff29 	bl	8006042 <_read>
 801e1f0:	1c43      	adds	r3, r0, #1
 801e1f2:	d102      	bne.n	801e1fa <_read_r+0x1e>
 801e1f4:	682b      	ldr	r3, [r5, #0]
 801e1f6:	b103      	cbz	r3, 801e1fa <_read_r+0x1e>
 801e1f8:	6023      	str	r3, [r4, #0]
 801e1fa:	bd38      	pop	{r3, r4, r5, pc}
 801e1fc:	20000dc4 	.word	0x20000dc4

0801e200 <memcmp>:
 801e200:	b510      	push	{r4, lr}
 801e202:	3901      	subs	r1, #1
 801e204:	4402      	add	r2, r0
 801e206:	4290      	cmp	r0, r2
 801e208:	d101      	bne.n	801e20e <memcmp+0xe>
 801e20a:	2000      	movs	r0, #0
 801e20c:	e005      	b.n	801e21a <memcmp+0x1a>
 801e20e:	7803      	ldrb	r3, [r0, #0]
 801e210:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e214:	42a3      	cmp	r3, r4
 801e216:	d001      	beq.n	801e21c <memcmp+0x1c>
 801e218:	1b18      	subs	r0, r3, r4
 801e21a:	bd10      	pop	{r4, pc}
 801e21c:	3001      	adds	r0, #1
 801e21e:	e7f2      	b.n	801e206 <memcmp+0x6>

0801e220 <floor>:
 801e220:	ec51 0b10 	vmov	r0, r1, d0
 801e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e228:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e22c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e230:	2e13      	cmp	r6, #19
 801e232:	ee10 5a10 	vmov	r5, s0
 801e236:	ee10 8a10 	vmov	r8, s0
 801e23a:	460c      	mov	r4, r1
 801e23c:	dc32      	bgt.n	801e2a4 <floor+0x84>
 801e23e:	2e00      	cmp	r6, #0
 801e240:	da14      	bge.n	801e26c <floor+0x4c>
 801e242:	a333      	add	r3, pc, #204	; (adr r3, 801e310 <floor+0xf0>)
 801e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e248:	f7fa fc48 	bl	8018adc <__adddf3>
 801e24c:	2200      	movs	r2, #0
 801e24e:	2300      	movs	r3, #0
 801e250:	f7fb f88a 	bl	8019368 <__aeabi_dcmpgt>
 801e254:	b138      	cbz	r0, 801e266 <floor+0x46>
 801e256:	2c00      	cmp	r4, #0
 801e258:	da57      	bge.n	801e30a <floor+0xea>
 801e25a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e25e:	431d      	orrs	r5, r3
 801e260:	d001      	beq.n	801e266 <floor+0x46>
 801e262:	4c2d      	ldr	r4, [pc, #180]	; (801e318 <floor+0xf8>)
 801e264:	2500      	movs	r5, #0
 801e266:	4621      	mov	r1, r4
 801e268:	4628      	mov	r0, r5
 801e26a:	e025      	b.n	801e2b8 <floor+0x98>
 801e26c:	4f2b      	ldr	r7, [pc, #172]	; (801e31c <floor+0xfc>)
 801e26e:	4137      	asrs	r7, r6
 801e270:	ea01 0307 	and.w	r3, r1, r7
 801e274:	4303      	orrs	r3, r0
 801e276:	d01f      	beq.n	801e2b8 <floor+0x98>
 801e278:	a325      	add	r3, pc, #148	; (adr r3, 801e310 <floor+0xf0>)
 801e27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e27e:	f7fa fc2d 	bl	8018adc <__adddf3>
 801e282:	2200      	movs	r2, #0
 801e284:	2300      	movs	r3, #0
 801e286:	f7fb f86f 	bl	8019368 <__aeabi_dcmpgt>
 801e28a:	2800      	cmp	r0, #0
 801e28c:	d0eb      	beq.n	801e266 <floor+0x46>
 801e28e:	2c00      	cmp	r4, #0
 801e290:	bfbe      	ittt	lt
 801e292:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e296:	fa43 f606 	asrlt.w	r6, r3, r6
 801e29a:	19a4      	addlt	r4, r4, r6
 801e29c:	ea24 0407 	bic.w	r4, r4, r7
 801e2a0:	2500      	movs	r5, #0
 801e2a2:	e7e0      	b.n	801e266 <floor+0x46>
 801e2a4:	2e33      	cmp	r6, #51	; 0x33
 801e2a6:	dd0b      	ble.n	801e2c0 <floor+0xa0>
 801e2a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e2ac:	d104      	bne.n	801e2b8 <floor+0x98>
 801e2ae:	ee10 2a10 	vmov	r2, s0
 801e2b2:	460b      	mov	r3, r1
 801e2b4:	f7fa fc12 	bl	8018adc <__adddf3>
 801e2b8:	ec41 0b10 	vmov	d0, r0, r1
 801e2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e2c4:	f04f 33ff 	mov.w	r3, #4294967295
 801e2c8:	fa23 f707 	lsr.w	r7, r3, r7
 801e2cc:	4207      	tst	r7, r0
 801e2ce:	d0f3      	beq.n	801e2b8 <floor+0x98>
 801e2d0:	a30f      	add	r3, pc, #60	; (adr r3, 801e310 <floor+0xf0>)
 801e2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2d6:	f7fa fc01 	bl	8018adc <__adddf3>
 801e2da:	2200      	movs	r2, #0
 801e2dc:	2300      	movs	r3, #0
 801e2de:	f7fb f843 	bl	8019368 <__aeabi_dcmpgt>
 801e2e2:	2800      	cmp	r0, #0
 801e2e4:	d0bf      	beq.n	801e266 <floor+0x46>
 801e2e6:	2c00      	cmp	r4, #0
 801e2e8:	da02      	bge.n	801e2f0 <floor+0xd0>
 801e2ea:	2e14      	cmp	r6, #20
 801e2ec:	d103      	bne.n	801e2f6 <floor+0xd6>
 801e2ee:	3401      	adds	r4, #1
 801e2f0:	ea25 0507 	bic.w	r5, r5, r7
 801e2f4:	e7b7      	b.n	801e266 <floor+0x46>
 801e2f6:	2301      	movs	r3, #1
 801e2f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e2fc:	fa03 f606 	lsl.w	r6, r3, r6
 801e300:	4435      	add	r5, r6
 801e302:	4545      	cmp	r5, r8
 801e304:	bf38      	it	cc
 801e306:	18e4      	addcc	r4, r4, r3
 801e308:	e7f2      	b.n	801e2f0 <floor+0xd0>
 801e30a:	2500      	movs	r5, #0
 801e30c:	462c      	mov	r4, r5
 801e30e:	e7aa      	b.n	801e266 <floor+0x46>
 801e310:	8800759c 	.word	0x8800759c
 801e314:	7e37e43c 	.word	0x7e37e43c
 801e318:	bff00000 	.word	0xbff00000
 801e31c:	000fffff 	.word	0x000fffff

0801e320 <pow>:
 801e320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e322:	ed2d 8b02 	vpush	{d8}
 801e326:	eeb0 8a40 	vmov.f32	s16, s0
 801e32a:	eef0 8a60 	vmov.f32	s17, s1
 801e32e:	ec55 4b11 	vmov	r4, r5, d1
 801e332:	f000 f865 	bl	801e400 <__ieee754_pow>
 801e336:	4622      	mov	r2, r4
 801e338:	462b      	mov	r3, r5
 801e33a:	4620      	mov	r0, r4
 801e33c:	4629      	mov	r1, r5
 801e33e:	ec57 6b10 	vmov	r6, r7, d0
 801e342:	f7fb f81b 	bl	801937c <__aeabi_dcmpun>
 801e346:	2800      	cmp	r0, #0
 801e348:	d13b      	bne.n	801e3c2 <pow+0xa2>
 801e34a:	ec51 0b18 	vmov	r0, r1, d8
 801e34e:	2200      	movs	r2, #0
 801e350:	2300      	movs	r3, #0
 801e352:	f7fa ffe1 	bl	8019318 <__aeabi_dcmpeq>
 801e356:	b1b8      	cbz	r0, 801e388 <pow+0x68>
 801e358:	2200      	movs	r2, #0
 801e35a:	2300      	movs	r3, #0
 801e35c:	4620      	mov	r0, r4
 801e35e:	4629      	mov	r1, r5
 801e360:	f7fa ffda 	bl	8019318 <__aeabi_dcmpeq>
 801e364:	2800      	cmp	r0, #0
 801e366:	d146      	bne.n	801e3f6 <pow+0xd6>
 801e368:	ec45 4b10 	vmov	d0, r4, r5
 801e36c:	f000 fe61 	bl	801f032 <finite>
 801e370:	b338      	cbz	r0, 801e3c2 <pow+0xa2>
 801e372:	2200      	movs	r2, #0
 801e374:	2300      	movs	r3, #0
 801e376:	4620      	mov	r0, r4
 801e378:	4629      	mov	r1, r5
 801e37a:	f7fa ffd7 	bl	801932c <__aeabi_dcmplt>
 801e37e:	b300      	cbz	r0, 801e3c2 <pow+0xa2>
 801e380:	f7fb fa90 	bl	80198a4 <__errno>
 801e384:	2322      	movs	r3, #34	; 0x22
 801e386:	e01b      	b.n	801e3c0 <pow+0xa0>
 801e388:	ec47 6b10 	vmov	d0, r6, r7
 801e38c:	f000 fe51 	bl	801f032 <finite>
 801e390:	b9e0      	cbnz	r0, 801e3cc <pow+0xac>
 801e392:	eeb0 0a48 	vmov.f32	s0, s16
 801e396:	eef0 0a68 	vmov.f32	s1, s17
 801e39a:	f000 fe4a 	bl	801f032 <finite>
 801e39e:	b1a8      	cbz	r0, 801e3cc <pow+0xac>
 801e3a0:	ec45 4b10 	vmov	d0, r4, r5
 801e3a4:	f000 fe45 	bl	801f032 <finite>
 801e3a8:	b180      	cbz	r0, 801e3cc <pow+0xac>
 801e3aa:	4632      	mov	r2, r6
 801e3ac:	463b      	mov	r3, r7
 801e3ae:	4630      	mov	r0, r6
 801e3b0:	4639      	mov	r1, r7
 801e3b2:	f7fa ffe3 	bl	801937c <__aeabi_dcmpun>
 801e3b6:	2800      	cmp	r0, #0
 801e3b8:	d0e2      	beq.n	801e380 <pow+0x60>
 801e3ba:	f7fb fa73 	bl	80198a4 <__errno>
 801e3be:	2321      	movs	r3, #33	; 0x21
 801e3c0:	6003      	str	r3, [r0, #0]
 801e3c2:	ecbd 8b02 	vpop	{d8}
 801e3c6:	ec47 6b10 	vmov	d0, r6, r7
 801e3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3cc:	2200      	movs	r2, #0
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	4630      	mov	r0, r6
 801e3d2:	4639      	mov	r1, r7
 801e3d4:	f7fa ffa0 	bl	8019318 <__aeabi_dcmpeq>
 801e3d8:	2800      	cmp	r0, #0
 801e3da:	d0f2      	beq.n	801e3c2 <pow+0xa2>
 801e3dc:	eeb0 0a48 	vmov.f32	s0, s16
 801e3e0:	eef0 0a68 	vmov.f32	s1, s17
 801e3e4:	f000 fe25 	bl	801f032 <finite>
 801e3e8:	2800      	cmp	r0, #0
 801e3ea:	d0ea      	beq.n	801e3c2 <pow+0xa2>
 801e3ec:	ec45 4b10 	vmov	d0, r4, r5
 801e3f0:	f000 fe1f 	bl	801f032 <finite>
 801e3f4:	e7c3      	b.n	801e37e <pow+0x5e>
 801e3f6:	4f01      	ldr	r7, [pc, #4]	; (801e3fc <pow+0xdc>)
 801e3f8:	2600      	movs	r6, #0
 801e3fa:	e7e2      	b.n	801e3c2 <pow+0xa2>
 801e3fc:	3ff00000 	.word	0x3ff00000

0801e400 <__ieee754_pow>:
 801e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e404:	ed2d 8b06 	vpush	{d8-d10}
 801e408:	b089      	sub	sp, #36	; 0x24
 801e40a:	ed8d 1b00 	vstr	d1, [sp]
 801e40e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801e412:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801e416:	ea58 0102 	orrs.w	r1, r8, r2
 801e41a:	ec57 6b10 	vmov	r6, r7, d0
 801e41e:	d115      	bne.n	801e44c <__ieee754_pow+0x4c>
 801e420:	19b3      	adds	r3, r6, r6
 801e422:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801e426:	4152      	adcs	r2, r2
 801e428:	4299      	cmp	r1, r3
 801e42a:	4b89      	ldr	r3, [pc, #548]	; (801e650 <__ieee754_pow+0x250>)
 801e42c:	4193      	sbcs	r3, r2
 801e42e:	f080 84d2 	bcs.w	801edd6 <__ieee754_pow+0x9d6>
 801e432:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e436:	4630      	mov	r0, r6
 801e438:	4639      	mov	r1, r7
 801e43a:	f7fa fb4f 	bl	8018adc <__adddf3>
 801e43e:	ec41 0b10 	vmov	d0, r0, r1
 801e442:	b009      	add	sp, #36	; 0x24
 801e444:	ecbd 8b06 	vpop	{d8-d10}
 801e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e44c:	4b81      	ldr	r3, [pc, #516]	; (801e654 <__ieee754_pow+0x254>)
 801e44e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801e452:	429c      	cmp	r4, r3
 801e454:	ee10 aa10 	vmov	sl, s0
 801e458:	463d      	mov	r5, r7
 801e45a:	dc06      	bgt.n	801e46a <__ieee754_pow+0x6a>
 801e45c:	d101      	bne.n	801e462 <__ieee754_pow+0x62>
 801e45e:	2e00      	cmp	r6, #0
 801e460:	d1e7      	bne.n	801e432 <__ieee754_pow+0x32>
 801e462:	4598      	cmp	r8, r3
 801e464:	dc01      	bgt.n	801e46a <__ieee754_pow+0x6a>
 801e466:	d10f      	bne.n	801e488 <__ieee754_pow+0x88>
 801e468:	b172      	cbz	r2, 801e488 <__ieee754_pow+0x88>
 801e46a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e46e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e472:	ea55 050a 	orrs.w	r5, r5, sl
 801e476:	d1dc      	bne.n	801e432 <__ieee754_pow+0x32>
 801e478:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e47c:	18db      	adds	r3, r3, r3
 801e47e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e482:	4152      	adcs	r2, r2
 801e484:	429d      	cmp	r5, r3
 801e486:	e7d0      	b.n	801e42a <__ieee754_pow+0x2a>
 801e488:	2d00      	cmp	r5, #0
 801e48a:	da3b      	bge.n	801e504 <__ieee754_pow+0x104>
 801e48c:	4b72      	ldr	r3, [pc, #456]	; (801e658 <__ieee754_pow+0x258>)
 801e48e:	4598      	cmp	r8, r3
 801e490:	dc51      	bgt.n	801e536 <__ieee754_pow+0x136>
 801e492:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e496:	4598      	cmp	r8, r3
 801e498:	f340 84ac 	ble.w	801edf4 <__ieee754_pow+0x9f4>
 801e49c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e4a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e4a4:	2b14      	cmp	r3, #20
 801e4a6:	dd0f      	ble.n	801e4c8 <__ieee754_pow+0xc8>
 801e4a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e4ac:	fa22 f103 	lsr.w	r1, r2, r3
 801e4b0:	fa01 f303 	lsl.w	r3, r1, r3
 801e4b4:	4293      	cmp	r3, r2
 801e4b6:	f040 849d 	bne.w	801edf4 <__ieee754_pow+0x9f4>
 801e4ba:	f001 0101 	and.w	r1, r1, #1
 801e4be:	f1c1 0302 	rsb	r3, r1, #2
 801e4c2:	9304      	str	r3, [sp, #16]
 801e4c4:	b182      	cbz	r2, 801e4e8 <__ieee754_pow+0xe8>
 801e4c6:	e05f      	b.n	801e588 <__ieee754_pow+0x188>
 801e4c8:	2a00      	cmp	r2, #0
 801e4ca:	d15b      	bne.n	801e584 <__ieee754_pow+0x184>
 801e4cc:	f1c3 0314 	rsb	r3, r3, #20
 801e4d0:	fa48 f103 	asr.w	r1, r8, r3
 801e4d4:	fa01 f303 	lsl.w	r3, r1, r3
 801e4d8:	4543      	cmp	r3, r8
 801e4da:	f040 8488 	bne.w	801edee <__ieee754_pow+0x9ee>
 801e4de:	f001 0101 	and.w	r1, r1, #1
 801e4e2:	f1c1 0302 	rsb	r3, r1, #2
 801e4e6:	9304      	str	r3, [sp, #16]
 801e4e8:	4b5c      	ldr	r3, [pc, #368]	; (801e65c <__ieee754_pow+0x25c>)
 801e4ea:	4598      	cmp	r8, r3
 801e4ec:	d132      	bne.n	801e554 <__ieee754_pow+0x154>
 801e4ee:	f1b9 0f00 	cmp.w	r9, #0
 801e4f2:	f280 8478 	bge.w	801ede6 <__ieee754_pow+0x9e6>
 801e4f6:	4959      	ldr	r1, [pc, #356]	; (801e65c <__ieee754_pow+0x25c>)
 801e4f8:	4632      	mov	r2, r6
 801e4fa:	463b      	mov	r3, r7
 801e4fc:	2000      	movs	r0, #0
 801e4fe:	f7fa fdcd 	bl	801909c <__aeabi_ddiv>
 801e502:	e79c      	b.n	801e43e <__ieee754_pow+0x3e>
 801e504:	2300      	movs	r3, #0
 801e506:	9304      	str	r3, [sp, #16]
 801e508:	2a00      	cmp	r2, #0
 801e50a:	d13d      	bne.n	801e588 <__ieee754_pow+0x188>
 801e50c:	4b51      	ldr	r3, [pc, #324]	; (801e654 <__ieee754_pow+0x254>)
 801e50e:	4598      	cmp	r8, r3
 801e510:	d1ea      	bne.n	801e4e8 <__ieee754_pow+0xe8>
 801e512:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e516:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e51a:	ea53 030a 	orrs.w	r3, r3, sl
 801e51e:	f000 845a 	beq.w	801edd6 <__ieee754_pow+0x9d6>
 801e522:	4b4f      	ldr	r3, [pc, #316]	; (801e660 <__ieee754_pow+0x260>)
 801e524:	429c      	cmp	r4, r3
 801e526:	dd08      	ble.n	801e53a <__ieee754_pow+0x13a>
 801e528:	f1b9 0f00 	cmp.w	r9, #0
 801e52c:	f2c0 8457 	blt.w	801edde <__ieee754_pow+0x9de>
 801e530:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e534:	e783      	b.n	801e43e <__ieee754_pow+0x3e>
 801e536:	2302      	movs	r3, #2
 801e538:	e7e5      	b.n	801e506 <__ieee754_pow+0x106>
 801e53a:	f1b9 0f00 	cmp.w	r9, #0
 801e53e:	f04f 0000 	mov.w	r0, #0
 801e542:	f04f 0100 	mov.w	r1, #0
 801e546:	f6bf af7a 	bge.w	801e43e <__ieee754_pow+0x3e>
 801e54a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e54e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e552:	e774      	b.n	801e43e <__ieee754_pow+0x3e>
 801e554:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e558:	d106      	bne.n	801e568 <__ieee754_pow+0x168>
 801e55a:	4632      	mov	r2, r6
 801e55c:	463b      	mov	r3, r7
 801e55e:	4630      	mov	r0, r6
 801e560:	4639      	mov	r1, r7
 801e562:	f7fa fc71 	bl	8018e48 <__aeabi_dmul>
 801e566:	e76a      	b.n	801e43e <__ieee754_pow+0x3e>
 801e568:	4b3e      	ldr	r3, [pc, #248]	; (801e664 <__ieee754_pow+0x264>)
 801e56a:	4599      	cmp	r9, r3
 801e56c:	d10c      	bne.n	801e588 <__ieee754_pow+0x188>
 801e56e:	2d00      	cmp	r5, #0
 801e570:	db0a      	blt.n	801e588 <__ieee754_pow+0x188>
 801e572:	ec47 6b10 	vmov	d0, r6, r7
 801e576:	b009      	add	sp, #36	; 0x24
 801e578:	ecbd 8b06 	vpop	{d8-d10}
 801e57c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e580:	f000 bc6c 	b.w	801ee5c <__ieee754_sqrt>
 801e584:	2300      	movs	r3, #0
 801e586:	9304      	str	r3, [sp, #16]
 801e588:	ec47 6b10 	vmov	d0, r6, r7
 801e58c:	f000 fd48 	bl	801f020 <fabs>
 801e590:	ec51 0b10 	vmov	r0, r1, d0
 801e594:	f1ba 0f00 	cmp.w	sl, #0
 801e598:	d129      	bne.n	801e5ee <__ieee754_pow+0x1ee>
 801e59a:	b124      	cbz	r4, 801e5a6 <__ieee754_pow+0x1a6>
 801e59c:	4b2f      	ldr	r3, [pc, #188]	; (801e65c <__ieee754_pow+0x25c>)
 801e59e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e5a2:	429a      	cmp	r2, r3
 801e5a4:	d123      	bne.n	801e5ee <__ieee754_pow+0x1ee>
 801e5a6:	f1b9 0f00 	cmp.w	r9, #0
 801e5aa:	da05      	bge.n	801e5b8 <__ieee754_pow+0x1b8>
 801e5ac:	4602      	mov	r2, r0
 801e5ae:	460b      	mov	r3, r1
 801e5b0:	2000      	movs	r0, #0
 801e5b2:	492a      	ldr	r1, [pc, #168]	; (801e65c <__ieee754_pow+0x25c>)
 801e5b4:	f7fa fd72 	bl	801909c <__aeabi_ddiv>
 801e5b8:	2d00      	cmp	r5, #0
 801e5ba:	f6bf af40 	bge.w	801e43e <__ieee754_pow+0x3e>
 801e5be:	9b04      	ldr	r3, [sp, #16]
 801e5c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e5c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e5c8:	4323      	orrs	r3, r4
 801e5ca:	d108      	bne.n	801e5de <__ieee754_pow+0x1de>
 801e5cc:	4602      	mov	r2, r0
 801e5ce:	460b      	mov	r3, r1
 801e5d0:	4610      	mov	r0, r2
 801e5d2:	4619      	mov	r1, r3
 801e5d4:	f7fa fa80 	bl	8018ad8 <__aeabi_dsub>
 801e5d8:	4602      	mov	r2, r0
 801e5da:	460b      	mov	r3, r1
 801e5dc:	e78f      	b.n	801e4fe <__ieee754_pow+0xfe>
 801e5de:	9b04      	ldr	r3, [sp, #16]
 801e5e0:	2b01      	cmp	r3, #1
 801e5e2:	f47f af2c 	bne.w	801e43e <__ieee754_pow+0x3e>
 801e5e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e5ea:	4619      	mov	r1, r3
 801e5ec:	e727      	b.n	801e43e <__ieee754_pow+0x3e>
 801e5ee:	0feb      	lsrs	r3, r5, #31
 801e5f0:	3b01      	subs	r3, #1
 801e5f2:	9306      	str	r3, [sp, #24]
 801e5f4:	9a06      	ldr	r2, [sp, #24]
 801e5f6:	9b04      	ldr	r3, [sp, #16]
 801e5f8:	4313      	orrs	r3, r2
 801e5fa:	d102      	bne.n	801e602 <__ieee754_pow+0x202>
 801e5fc:	4632      	mov	r2, r6
 801e5fe:	463b      	mov	r3, r7
 801e600:	e7e6      	b.n	801e5d0 <__ieee754_pow+0x1d0>
 801e602:	4b19      	ldr	r3, [pc, #100]	; (801e668 <__ieee754_pow+0x268>)
 801e604:	4598      	cmp	r8, r3
 801e606:	f340 80fb 	ble.w	801e800 <__ieee754_pow+0x400>
 801e60a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e60e:	4598      	cmp	r8, r3
 801e610:	4b13      	ldr	r3, [pc, #76]	; (801e660 <__ieee754_pow+0x260>)
 801e612:	dd0c      	ble.n	801e62e <__ieee754_pow+0x22e>
 801e614:	429c      	cmp	r4, r3
 801e616:	dc0f      	bgt.n	801e638 <__ieee754_pow+0x238>
 801e618:	f1b9 0f00 	cmp.w	r9, #0
 801e61c:	da0f      	bge.n	801e63e <__ieee754_pow+0x23e>
 801e61e:	2000      	movs	r0, #0
 801e620:	b009      	add	sp, #36	; 0x24
 801e622:	ecbd 8b06 	vpop	{d8-d10}
 801e626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e62a:	f000 bcf0 	b.w	801f00e <__math_oflow>
 801e62e:	429c      	cmp	r4, r3
 801e630:	dbf2      	blt.n	801e618 <__ieee754_pow+0x218>
 801e632:	4b0a      	ldr	r3, [pc, #40]	; (801e65c <__ieee754_pow+0x25c>)
 801e634:	429c      	cmp	r4, r3
 801e636:	dd19      	ble.n	801e66c <__ieee754_pow+0x26c>
 801e638:	f1b9 0f00 	cmp.w	r9, #0
 801e63c:	dcef      	bgt.n	801e61e <__ieee754_pow+0x21e>
 801e63e:	2000      	movs	r0, #0
 801e640:	b009      	add	sp, #36	; 0x24
 801e642:	ecbd 8b06 	vpop	{d8-d10}
 801e646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e64a:	f000 bcd7 	b.w	801effc <__math_uflow>
 801e64e:	bf00      	nop
 801e650:	fff00000 	.word	0xfff00000
 801e654:	7ff00000 	.word	0x7ff00000
 801e658:	433fffff 	.word	0x433fffff
 801e65c:	3ff00000 	.word	0x3ff00000
 801e660:	3fefffff 	.word	0x3fefffff
 801e664:	3fe00000 	.word	0x3fe00000
 801e668:	41e00000 	.word	0x41e00000
 801e66c:	4b60      	ldr	r3, [pc, #384]	; (801e7f0 <__ieee754_pow+0x3f0>)
 801e66e:	2200      	movs	r2, #0
 801e670:	f7fa fa32 	bl	8018ad8 <__aeabi_dsub>
 801e674:	a354      	add	r3, pc, #336	; (adr r3, 801e7c8 <__ieee754_pow+0x3c8>)
 801e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e67a:	4604      	mov	r4, r0
 801e67c:	460d      	mov	r5, r1
 801e67e:	f7fa fbe3 	bl	8018e48 <__aeabi_dmul>
 801e682:	a353      	add	r3, pc, #332	; (adr r3, 801e7d0 <__ieee754_pow+0x3d0>)
 801e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e688:	4606      	mov	r6, r0
 801e68a:	460f      	mov	r7, r1
 801e68c:	4620      	mov	r0, r4
 801e68e:	4629      	mov	r1, r5
 801e690:	f7fa fbda 	bl	8018e48 <__aeabi_dmul>
 801e694:	4b57      	ldr	r3, [pc, #348]	; (801e7f4 <__ieee754_pow+0x3f4>)
 801e696:	4682      	mov	sl, r0
 801e698:	468b      	mov	fp, r1
 801e69a:	2200      	movs	r2, #0
 801e69c:	4620      	mov	r0, r4
 801e69e:	4629      	mov	r1, r5
 801e6a0:	f7fa fbd2 	bl	8018e48 <__aeabi_dmul>
 801e6a4:	4602      	mov	r2, r0
 801e6a6:	460b      	mov	r3, r1
 801e6a8:	a14b      	add	r1, pc, #300	; (adr r1, 801e7d8 <__ieee754_pow+0x3d8>)
 801e6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e6ae:	f7fa fa13 	bl	8018ad8 <__aeabi_dsub>
 801e6b2:	4622      	mov	r2, r4
 801e6b4:	462b      	mov	r3, r5
 801e6b6:	f7fa fbc7 	bl	8018e48 <__aeabi_dmul>
 801e6ba:	4602      	mov	r2, r0
 801e6bc:	460b      	mov	r3, r1
 801e6be:	2000      	movs	r0, #0
 801e6c0:	494d      	ldr	r1, [pc, #308]	; (801e7f8 <__ieee754_pow+0x3f8>)
 801e6c2:	f7fa fa09 	bl	8018ad8 <__aeabi_dsub>
 801e6c6:	4622      	mov	r2, r4
 801e6c8:	4680      	mov	r8, r0
 801e6ca:	4689      	mov	r9, r1
 801e6cc:	462b      	mov	r3, r5
 801e6ce:	4620      	mov	r0, r4
 801e6d0:	4629      	mov	r1, r5
 801e6d2:	f7fa fbb9 	bl	8018e48 <__aeabi_dmul>
 801e6d6:	4602      	mov	r2, r0
 801e6d8:	460b      	mov	r3, r1
 801e6da:	4640      	mov	r0, r8
 801e6dc:	4649      	mov	r1, r9
 801e6de:	f7fa fbb3 	bl	8018e48 <__aeabi_dmul>
 801e6e2:	a33f      	add	r3, pc, #252	; (adr r3, 801e7e0 <__ieee754_pow+0x3e0>)
 801e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e8:	f7fa fbae 	bl	8018e48 <__aeabi_dmul>
 801e6ec:	4602      	mov	r2, r0
 801e6ee:	460b      	mov	r3, r1
 801e6f0:	4650      	mov	r0, sl
 801e6f2:	4659      	mov	r1, fp
 801e6f4:	f7fa f9f0 	bl	8018ad8 <__aeabi_dsub>
 801e6f8:	4602      	mov	r2, r0
 801e6fa:	460b      	mov	r3, r1
 801e6fc:	4680      	mov	r8, r0
 801e6fe:	4689      	mov	r9, r1
 801e700:	4630      	mov	r0, r6
 801e702:	4639      	mov	r1, r7
 801e704:	f7fa f9ea 	bl	8018adc <__adddf3>
 801e708:	2000      	movs	r0, #0
 801e70a:	4632      	mov	r2, r6
 801e70c:	463b      	mov	r3, r7
 801e70e:	4604      	mov	r4, r0
 801e710:	460d      	mov	r5, r1
 801e712:	f7fa f9e1 	bl	8018ad8 <__aeabi_dsub>
 801e716:	4602      	mov	r2, r0
 801e718:	460b      	mov	r3, r1
 801e71a:	4640      	mov	r0, r8
 801e71c:	4649      	mov	r1, r9
 801e71e:	f7fa f9db 	bl	8018ad8 <__aeabi_dsub>
 801e722:	9b04      	ldr	r3, [sp, #16]
 801e724:	9a06      	ldr	r2, [sp, #24]
 801e726:	3b01      	subs	r3, #1
 801e728:	4313      	orrs	r3, r2
 801e72a:	4682      	mov	sl, r0
 801e72c:	468b      	mov	fp, r1
 801e72e:	f040 81e7 	bne.w	801eb00 <__ieee754_pow+0x700>
 801e732:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801e7e8 <__ieee754_pow+0x3e8>
 801e736:	eeb0 8a47 	vmov.f32	s16, s14
 801e73a:	eef0 8a67 	vmov.f32	s17, s15
 801e73e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801e742:	2600      	movs	r6, #0
 801e744:	4632      	mov	r2, r6
 801e746:	463b      	mov	r3, r7
 801e748:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e74c:	f7fa f9c4 	bl	8018ad8 <__aeabi_dsub>
 801e750:	4622      	mov	r2, r4
 801e752:	462b      	mov	r3, r5
 801e754:	f7fa fb78 	bl	8018e48 <__aeabi_dmul>
 801e758:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e75c:	4680      	mov	r8, r0
 801e75e:	4689      	mov	r9, r1
 801e760:	4650      	mov	r0, sl
 801e762:	4659      	mov	r1, fp
 801e764:	f7fa fb70 	bl	8018e48 <__aeabi_dmul>
 801e768:	4602      	mov	r2, r0
 801e76a:	460b      	mov	r3, r1
 801e76c:	4640      	mov	r0, r8
 801e76e:	4649      	mov	r1, r9
 801e770:	f7fa f9b4 	bl	8018adc <__adddf3>
 801e774:	4632      	mov	r2, r6
 801e776:	463b      	mov	r3, r7
 801e778:	4680      	mov	r8, r0
 801e77a:	4689      	mov	r9, r1
 801e77c:	4620      	mov	r0, r4
 801e77e:	4629      	mov	r1, r5
 801e780:	f7fa fb62 	bl	8018e48 <__aeabi_dmul>
 801e784:	460b      	mov	r3, r1
 801e786:	4604      	mov	r4, r0
 801e788:	460d      	mov	r5, r1
 801e78a:	4602      	mov	r2, r0
 801e78c:	4649      	mov	r1, r9
 801e78e:	4640      	mov	r0, r8
 801e790:	f7fa f9a4 	bl	8018adc <__adddf3>
 801e794:	4b19      	ldr	r3, [pc, #100]	; (801e7fc <__ieee754_pow+0x3fc>)
 801e796:	4299      	cmp	r1, r3
 801e798:	ec45 4b19 	vmov	d9, r4, r5
 801e79c:	4606      	mov	r6, r0
 801e79e:	460f      	mov	r7, r1
 801e7a0:	468b      	mov	fp, r1
 801e7a2:	f340 82f1 	ble.w	801ed88 <__ieee754_pow+0x988>
 801e7a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e7aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e7ae:	4303      	orrs	r3, r0
 801e7b0:	f000 81e4 	beq.w	801eb7c <__ieee754_pow+0x77c>
 801e7b4:	ec51 0b18 	vmov	r0, r1, d8
 801e7b8:	2200      	movs	r2, #0
 801e7ba:	2300      	movs	r3, #0
 801e7bc:	f7fa fdb6 	bl	801932c <__aeabi_dcmplt>
 801e7c0:	3800      	subs	r0, #0
 801e7c2:	bf18      	it	ne
 801e7c4:	2001      	movne	r0, #1
 801e7c6:	e72b      	b.n	801e620 <__ieee754_pow+0x220>
 801e7c8:	60000000 	.word	0x60000000
 801e7cc:	3ff71547 	.word	0x3ff71547
 801e7d0:	f85ddf44 	.word	0xf85ddf44
 801e7d4:	3e54ae0b 	.word	0x3e54ae0b
 801e7d8:	55555555 	.word	0x55555555
 801e7dc:	3fd55555 	.word	0x3fd55555
 801e7e0:	652b82fe 	.word	0x652b82fe
 801e7e4:	3ff71547 	.word	0x3ff71547
 801e7e8:	00000000 	.word	0x00000000
 801e7ec:	bff00000 	.word	0xbff00000
 801e7f0:	3ff00000 	.word	0x3ff00000
 801e7f4:	3fd00000 	.word	0x3fd00000
 801e7f8:	3fe00000 	.word	0x3fe00000
 801e7fc:	408fffff 	.word	0x408fffff
 801e800:	4bd5      	ldr	r3, [pc, #852]	; (801eb58 <__ieee754_pow+0x758>)
 801e802:	402b      	ands	r3, r5
 801e804:	2200      	movs	r2, #0
 801e806:	b92b      	cbnz	r3, 801e814 <__ieee754_pow+0x414>
 801e808:	4bd4      	ldr	r3, [pc, #848]	; (801eb5c <__ieee754_pow+0x75c>)
 801e80a:	f7fa fb1d 	bl	8018e48 <__aeabi_dmul>
 801e80e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e812:	460c      	mov	r4, r1
 801e814:	1523      	asrs	r3, r4, #20
 801e816:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e81a:	4413      	add	r3, r2
 801e81c:	9305      	str	r3, [sp, #20]
 801e81e:	4bd0      	ldr	r3, [pc, #832]	; (801eb60 <__ieee754_pow+0x760>)
 801e820:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e824:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e828:	429c      	cmp	r4, r3
 801e82a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e82e:	dd08      	ble.n	801e842 <__ieee754_pow+0x442>
 801e830:	4bcc      	ldr	r3, [pc, #816]	; (801eb64 <__ieee754_pow+0x764>)
 801e832:	429c      	cmp	r4, r3
 801e834:	f340 8162 	ble.w	801eafc <__ieee754_pow+0x6fc>
 801e838:	9b05      	ldr	r3, [sp, #20]
 801e83a:	3301      	adds	r3, #1
 801e83c:	9305      	str	r3, [sp, #20]
 801e83e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e842:	2400      	movs	r4, #0
 801e844:	00e3      	lsls	r3, r4, #3
 801e846:	9307      	str	r3, [sp, #28]
 801e848:	4bc7      	ldr	r3, [pc, #796]	; (801eb68 <__ieee754_pow+0x768>)
 801e84a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e84e:	ed93 7b00 	vldr	d7, [r3]
 801e852:	4629      	mov	r1, r5
 801e854:	ec53 2b17 	vmov	r2, r3, d7
 801e858:	eeb0 9a47 	vmov.f32	s18, s14
 801e85c:	eef0 9a67 	vmov.f32	s19, s15
 801e860:	4682      	mov	sl, r0
 801e862:	f7fa f939 	bl	8018ad8 <__aeabi_dsub>
 801e866:	4652      	mov	r2, sl
 801e868:	4606      	mov	r6, r0
 801e86a:	460f      	mov	r7, r1
 801e86c:	462b      	mov	r3, r5
 801e86e:	ec51 0b19 	vmov	r0, r1, d9
 801e872:	f7fa f933 	bl	8018adc <__adddf3>
 801e876:	4602      	mov	r2, r0
 801e878:	460b      	mov	r3, r1
 801e87a:	2000      	movs	r0, #0
 801e87c:	49bb      	ldr	r1, [pc, #748]	; (801eb6c <__ieee754_pow+0x76c>)
 801e87e:	f7fa fc0d 	bl	801909c <__aeabi_ddiv>
 801e882:	ec41 0b1a 	vmov	d10, r0, r1
 801e886:	4602      	mov	r2, r0
 801e888:	460b      	mov	r3, r1
 801e88a:	4630      	mov	r0, r6
 801e88c:	4639      	mov	r1, r7
 801e88e:	f7fa fadb 	bl	8018e48 <__aeabi_dmul>
 801e892:	2300      	movs	r3, #0
 801e894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e898:	9302      	str	r3, [sp, #8]
 801e89a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e89e:	46ab      	mov	fp, r5
 801e8a0:	106d      	asrs	r5, r5, #1
 801e8a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e8a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e8aa:	ec41 0b18 	vmov	d8, r0, r1
 801e8ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	4640      	mov	r0, r8
 801e8b6:	4649      	mov	r1, r9
 801e8b8:	4614      	mov	r4, r2
 801e8ba:	461d      	mov	r5, r3
 801e8bc:	f7fa fac4 	bl	8018e48 <__aeabi_dmul>
 801e8c0:	4602      	mov	r2, r0
 801e8c2:	460b      	mov	r3, r1
 801e8c4:	4630      	mov	r0, r6
 801e8c6:	4639      	mov	r1, r7
 801e8c8:	f7fa f906 	bl	8018ad8 <__aeabi_dsub>
 801e8cc:	ec53 2b19 	vmov	r2, r3, d9
 801e8d0:	4606      	mov	r6, r0
 801e8d2:	460f      	mov	r7, r1
 801e8d4:	4620      	mov	r0, r4
 801e8d6:	4629      	mov	r1, r5
 801e8d8:	f7fa f8fe 	bl	8018ad8 <__aeabi_dsub>
 801e8dc:	4602      	mov	r2, r0
 801e8de:	460b      	mov	r3, r1
 801e8e0:	4650      	mov	r0, sl
 801e8e2:	4659      	mov	r1, fp
 801e8e4:	f7fa f8f8 	bl	8018ad8 <__aeabi_dsub>
 801e8e8:	4642      	mov	r2, r8
 801e8ea:	464b      	mov	r3, r9
 801e8ec:	f7fa faac 	bl	8018e48 <__aeabi_dmul>
 801e8f0:	4602      	mov	r2, r0
 801e8f2:	460b      	mov	r3, r1
 801e8f4:	4630      	mov	r0, r6
 801e8f6:	4639      	mov	r1, r7
 801e8f8:	f7fa f8ee 	bl	8018ad8 <__aeabi_dsub>
 801e8fc:	ec53 2b1a 	vmov	r2, r3, d10
 801e900:	f7fa faa2 	bl	8018e48 <__aeabi_dmul>
 801e904:	ec53 2b18 	vmov	r2, r3, d8
 801e908:	ec41 0b19 	vmov	d9, r0, r1
 801e90c:	ec51 0b18 	vmov	r0, r1, d8
 801e910:	f7fa fa9a 	bl	8018e48 <__aeabi_dmul>
 801e914:	a37c      	add	r3, pc, #496	; (adr r3, 801eb08 <__ieee754_pow+0x708>)
 801e916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91a:	4604      	mov	r4, r0
 801e91c:	460d      	mov	r5, r1
 801e91e:	f7fa fa93 	bl	8018e48 <__aeabi_dmul>
 801e922:	a37b      	add	r3, pc, #492	; (adr r3, 801eb10 <__ieee754_pow+0x710>)
 801e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e928:	f7fa f8d8 	bl	8018adc <__adddf3>
 801e92c:	4622      	mov	r2, r4
 801e92e:	462b      	mov	r3, r5
 801e930:	f7fa fa8a 	bl	8018e48 <__aeabi_dmul>
 801e934:	a378      	add	r3, pc, #480	; (adr r3, 801eb18 <__ieee754_pow+0x718>)
 801e936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e93a:	f7fa f8cf 	bl	8018adc <__adddf3>
 801e93e:	4622      	mov	r2, r4
 801e940:	462b      	mov	r3, r5
 801e942:	f7fa fa81 	bl	8018e48 <__aeabi_dmul>
 801e946:	a376      	add	r3, pc, #472	; (adr r3, 801eb20 <__ieee754_pow+0x720>)
 801e948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e94c:	f7fa f8c6 	bl	8018adc <__adddf3>
 801e950:	4622      	mov	r2, r4
 801e952:	462b      	mov	r3, r5
 801e954:	f7fa fa78 	bl	8018e48 <__aeabi_dmul>
 801e958:	a373      	add	r3, pc, #460	; (adr r3, 801eb28 <__ieee754_pow+0x728>)
 801e95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e95e:	f7fa f8bd 	bl	8018adc <__adddf3>
 801e962:	4622      	mov	r2, r4
 801e964:	462b      	mov	r3, r5
 801e966:	f7fa fa6f 	bl	8018e48 <__aeabi_dmul>
 801e96a:	a371      	add	r3, pc, #452	; (adr r3, 801eb30 <__ieee754_pow+0x730>)
 801e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e970:	f7fa f8b4 	bl	8018adc <__adddf3>
 801e974:	4622      	mov	r2, r4
 801e976:	4606      	mov	r6, r0
 801e978:	460f      	mov	r7, r1
 801e97a:	462b      	mov	r3, r5
 801e97c:	4620      	mov	r0, r4
 801e97e:	4629      	mov	r1, r5
 801e980:	f7fa fa62 	bl	8018e48 <__aeabi_dmul>
 801e984:	4602      	mov	r2, r0
 801e986:	460b      	mov	r3, r1
 801e988:	4630      	mov	r0, r6
 801e98a:	4639      	mov	r1, r7
 801e98c:	f7fa fa5c 	bl	8018e48 <__aeabi_dmul>
 801e990:	4642      	mov	r2, r8
 801e992:	4604      	mov	r4, r0
 801e994:	460d      	mov	r5, r1
 801e996:	464b      	mov	r3, r9
 801e998:	ec51 0b18 	vmov	r0, r1, d8
 801e99c:	f7fa f89e 	bl	8018adc <__adddf3>
 801e9a0:	ec53 2b19 	vmov	r2, r3, d9
 801e9a4:	f7fa fa50 	bl	8018e48 <__aeabi_dmul>
 801e9a8:	4622      	mov	r2, r4
 801e9aa:	462b      	mov	r3, r5
 801e9ac:	f7fa f896 	bl	8018adc <__adddf3>
 801e9b0:	4642      	mov	r2, r8
 801e9b2:	4682      	mov	sl, r0
 801e9b4:	468b      	mov	fp, r1
 801e9b6:	464b      	mov	r3, r9
 801e9b8:	4640      	mov	r0, r8
 801e9ba:	4649      	mov	r1, r9
 801e9bc:	f7fa fa44 	bl	8018e48 <__aeabi_dmul>
 801e9c0:	4b6b      	ldr	r3, [pc, #428]	; (801eb70 <__ieee754_pow+0x770>)
 801e9c2:	2200      	movs	r2, #0
 801e9c4:	4606      	mov	r6, r0
 801e9c6:	460f      	mov	r7, r1
 801e9c8:	f7fa f888 	bl	8018adc <__adddf3>
 801e9cc:	4652      	mov	r2, sl
 801e9ce:	465b      	mov	r3, fp
 801e9d0:	f7fa f884 	bl	8018adc <__adddf3>
 801e9d4:	2000      	movs	r0, #0
 801e9d6:	4604      	mov	r4, r0
 801e9d8:	460d      	mov	r5, r1
 801e9da:	4602      	mov	r2, r0
 801e9dc:	460b      	mov	r3, r1
 801e9de:	4640      	mov	r0, r8
 801e9e0:	4649      	mov	r1, r9
 801e9e2:	f7fa fa31 	bl	8018e48 <__aeabi_dmul>
 801e9e6:	4b62      	ldr	r3, [pc, #392]	; (801eb70 <__ieee754_pow+0x770>)
 801e9e8:	4680      	mov	r8, r0
 801e9ea:	4689      	mov	r9, r1
 801e9ec:	2200      	movs	r2, #0
 801e9ee:	4620      	mov	r0, r4
 801e9f0:	4629      	mov	r1, r5
 801e9f2:	f7fa f871 	bl	8018ad8 <__aeabi_dsub>
 801e9f6:	4632      	mov	r2, r6
 801e9f8:	463b      	mov	r3, r7
 801e9fa:	f7fa f86d 	bl	8018ad8 <__aeabi_dsub>
 801e9fe:	4602      	mov	r2, r0
 801ea00:	460b      	mov	r3, r1
 801ea02:	4650      	mov	r0, sl
 801ea04:	4659      	mov	r1, fp
 801ea06:	f7fa f867 	bl	8018ad8 <__aeabi_dsub>
 801ea0a:	ec53 2b18 	vmov	r2, r3, d8
 801ea0e:	f7fa fa1b 	bl	8018e48 <__aeabi_dmul>
 801ea12:	4622      	mov	r2, r4
 801ea14:	4606      	mov	r6, r0
 801ea16:	460f      	mov	r7, r1
 801ea18:	462b      	mov	r3, r5
 801ea1a:	ec51 0b19 	vmov	r0, r1, d9
 801ea1e:	f7fa fa13 	bl	8018e48 <__aeabi_dmul>
 801ea22:	4602      	mov	r2, r0
 801ea24:	460b      	mov	r3, r1
 801ea26:	4630      	mov	r0, r6
 801ea28:	4639      	mov	r1, r7
 801ea2a:	f7fa f857 	bl	8018adc <__adddf3>
 801ea2e:	4606      	mov	r6, r0
 801ea30:	460f      	mov	r7, r1
 801ea32:	4602      	mov	r2, r0
 801ea34:	460b      	mov	r3, r1
 801ea36:	4640      	mov	r0, r8
 801ea38:	4649      	mov	r1, r9
 801ea3a:	f7fa f84f 	bl	8018adc <__adddf3>
 801ea3e:	a33e      	add	r3, pc, #248	; (adr r3, 801eb38 <__ieee754_pow+0x738>)
 801ea40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea44:	2000      	movs	r0, #0
 801ea46:	4604      	mov	r4, r0
 801ea48:	460d      	mov	r5, r1
 801ea4a:	f7fa f9fd 	bl	8018e48 <__aeabi_dmul>
 801ea4e:	4642      	mov	r2, r8
 801ea50:	ec41 0b18 	vmov	d8, r0, r1
 801ea54:	464b      	mov	r3, r9
 801ea56:	4620      	mov	r0, r4
 801ea58:	4629      	mov	r1, r5
 801ea5a:	f7fa f83d 	bl	8018ad8 <__aeabi_dsub>
 801ea5e:	4602      	mov	r2, r0
 801ea60:	460b      	mov	r3, r1
 801ea62:	4630      	mov	r0, r6
 801ea64:	4639      	mov	r1, r7
 801ea66:	f7fa f837 	bl	8018ad8 <__aeabi_dsub>
 801ea6a:	a335      	add	r3, pc, #212	; (adr r3, 801eb40 <__ieee754_pow+0x740>)
 801ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea70:	f7fa f9ea 	bl	8018e48 <__aeabi_dmul>
 801ea74:	a334      	add	r3, pc, #208	; (adr r3, 801eb48 <__ieee754_pow+0x748>)
 801ea76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea7a:	4606      	mov	r6, r0
 801ea7c:	460f      	mov	r7, r1
 801ea7e:	4620      	mov	r0, r4
 801ea80:	4629      	mov	r1, r5
 801ea82:	f7fa f9e1 	bl	8018e48 <__aeabi_dmul>
 801ea86:	4602      	mov	r2, r0
 801ea88:	460b      	mov	r3, r1
 801ea8a:	4630      	mov	r0, r6
 801ea8c:	4639      	mov	r1, r7
 801ea8e:	f7fa f825 	bl	8018adc <__adddf3>
 801ea92:	9a07      	ldr	r2, [sp, #28]
 801ea94:	4b37      	ldr	r3, [pc, #220]	; (801eb74 <__ieee754_pow+0x774>)
 801ea96:	4413      	add	r3, r2
 801ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea9c:	f7fa f81e 	bl	8018adc <__adddf3>
 801eaa0:	4682      	mov	sl, r0
 801eaa2:	9805      	ldr	r0, [sp, #20]
 801eaa4:	468b      	mov	fp, r1
 801eaa6:	f7fa f965 	bl	8018d74 <__aeabi_i2d>
 801eaaa:	9a07      	ldr	r2, [sp, #28]
 801eaac:	4b32      	ldr	r3, [pc, #200]	; (801eb78 <__ieee754_pow+0x778>)
 801eaae:	4413      	add	r3, r2
 801eab0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801eab4:	4606      	mov	r6, r0
 801eab6:	460f      	mov	r7, r1
 801eab8:	4652      	mov	r2, sl
 801eaba:	465b      	mov	r3, fp
 801eabc:	ec51 0b18 	vmov	r0, r1, d8
 801eac0:	f7fa f80c 	bl	8018adc <__adddf3>
 801eac4:	4642      	mov	r2, r8
 801eac6:	464b      	mov	r3, r9
 801eac8:	f7fa f808 	bl	8018adc <__adddf3>
 801eacc:	4632      	mov	r2, r6
 801eace:	463b      	mov	r3, r7
 801ead0:	f7fa f804 	bl	8018adc <__adddf3>
 801ead4:	2000      	movs	r0, #0
 801ead6:	4632      	mov	r2, r6
 801ead8:	463b      	mov	r3, r7
 801eada:	4604      	mov	r4, r0
 801eadc:	460d      	mov	r5, r1
 801eade:	f7f9 fffb 	bl	8018ad8 <__aeabi_dsub>
 801eae2:	4642      	mov	r2, r8
 801eae4:	464b      	mov	r3, r9
 801eae6:	f7f9 fff7 	bl	8018ad8 <__aeabi_dsub>
 801eaea:	ec53 2b18 	vmov	r2, r3, d8
 801eaee:	f7f9 fff3 	bl	8018ad8 <__aeabi_dsub>
 801eaf2:	4602      	mov	r2, r0
 801eaf4:	460b      	mov	r3, r1
 801eaf6:	4650      	mov	r0, sl
 801eaf8:	4659      	mov	r1, fp
 801eafa:	e610      	b.n	801e71e <__ieee754_pow+0x31e>
 801eafc:	2401      	movs	r4, #1
 801eafe:	e6a1      	b.n	801e844 <__ieee754_pow+0x444>
 801eb00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801eb50 <__ieee754_pow+0x750>
 801eb04:	e617      	b.n	801e736 <__ieee754_pow+0x336>
 801eb06:	bf00      	nop
 801eb08:	4a454eef 	.word	0x4a454eef
 801eb0c:	3fca7e28 	.word	0x3fca7e28
 801eb10:	93c9db65 	.word	0x93c9db65
 801eb14:	3fcd864a 	.word	0x3fcd864a
 801eb18:	a91d4101 	.word	0xa91d4101
 801eb1c:	3fd17460 	.word	0x3fd17460
 801eb20:	518f264d 	.word	0x518f264d
 801eb24:	3fd55555 	.word	0x3fd55555
 801eb28:	db6fabff 	.word	0xdb6fabff
 801eb2c:	3fdb6db6 	.word	0x3fdb6db6
 801eb30:	33333303 	.word	0x33333303
 801eb34:	3fe33333 	.word	0x3fe33333
 801eb38:	e0000000 	.word	0xe0000000
 801eb3c:	3feec709 	.word	0x3feec709
 801eb40:	dc3a03fd 	.word	0xdc3a03fd
 801eb44:	3feec709 	.word	0x3feec709
 801eb48:	145b01f5 	.word	0x145b01f5
 801eb4c:	be3e2fe0 	.word	0xbe3e2fe0
 801eb50:	00000000 	.word	0x00000000
 801eb54:	3ff00000 	.word	0x3ff00000
 801eb58:	7ff00000 	.word	0x7ff00000
 801eb5c:	43400000 	.word	0x43400000
 801eb60:	0003988e 	.word	0x0003988e
 801eb64:	000bb679 	.word	0x000bb679
 801eb68:	080526a8 	.word	0x080526a8
 801eb6c:	3ff00000 	.word	0x3ff00000
 801eb70:	40080000 	.word	0x40080000
 801eb74:	080526c8 	.word	0x080526c8
 801eb78:	080526b8 	.word	0x080526b8
 801eb7c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ee54 <__ieee754_pow+0xa54>)
 801eb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb82:	4640      	mov	r0, r8
 801eb84:	4649      	mov	r1, r9
 801eb86:	f7f9 ffa9 	bl	8018adc <__adddf3>
 801eb8a:	4622      	mov	r2, r4
 801eb8c:	ec41 0b1a 	vmov	d10, r0, r1
 801eb90:	462b      	mov	r3, r5
 801eb92:	4630      	mov	r0, r6
 801eb94:	4639      	mov	r1, r7
 801eb96:	f7f9 ff9f 	bl	8018ad8 <__aeabi_dsub>
 801eb9a:	4602      	mov	r2, r0
 801eb9c:	460b      	mov	r3, r1
 801eb9e:	ec51 0b1a 	vmov	r0, r1, d10
 801eba2:	f7fa fbe1 	bl	8019368 <__aeabi_dcmpgt>
 801eba6:	2800      	cmp	r0, #0
 801eba8:	f47f ae04 	bne.w	801e7b4 <__ieee754_pow+0x3b4>
 801ebac:	4aa4      	ldr	r2, [pc, #656]	; (801ee40 <__ieee754_pow+0xa40>)
 801ebae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ebb2:	4293      	cmp	r3, r2
 801ebb4:	f340 8108 	ble.w	801edc8 <__ieee754_pow+0x9c8>
 801ebb8:	151b      	asrs	r3, r3, #20
 801ebba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ebbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ebc2:	fa4a f303 	asr.w	r3, sl, r3
 801ebc6:	445b      	add	r3, fp
 801ebc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ebcc:	4e9d      	ldr	r6, [pc, #628]	; (801ee44 <__ieee754_pow+0xa44>)
 801ebce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ebd2:	4116      	asrs	r6, r2
 801ebd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ebd8:	2000      	movs	r0, #0
 801ebda:	ea23 0106 	bic.w	r1, r3, r6
 801ebde:	f1c2 0214 	rsb	r2, r2, #20
 801ebe2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ebe6:	fa4a fa02 	asr.w	sl, sl, r2
 801ebea:	f1bb 0f00 	cmp.w	fp, #0
 801ebee:	4602      	mov	r2, r0
 801ebf0:	460b      	mov	r3, r1
 801ebf2:	4620      	mov	r0, r4
 801ebf4:	4629      	mov	r1, r5
 801ebf6:	bfb8      	it	lt
 801ebf8:	f1ca 0a00 	rsblt	sl, sl, #0
 801ebfc:	f7f9 ff6c 	bl	8018ad8 <__aeabi_dsub>
 801ec00:	ec41 0b19 	vmov	d9, r0, r1
 801ec04:	4642      	mov	r2, r8
 801ec06:	464b      	mov	r3, r9
 801ec08:	ec51 0b19 	vmov	r0, r1, d9
 801ec0c:	f7f9 ff66 	bl	8018adc <__adddf3>
 801ec10:	a37b      	add	r3, pc, #492	; (adr r3, 801ee00 <__ieee754_pow+0xa00>)
 801ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec16:	2000      	movs	r0, #0
 801ec18:	4604      	mov	r4, r0
 801ec1a:	460d      	mov	r5, r1
 801ec1c:	f7fa f914 	bl	8018e48 <__aeabi_dmul>
 801ec20:	ec53 2b19 	vmov	r2, r3, d9
 801ec24:	4606      	mov	r6, r0
 801ec26:	460f      	mov	r7, r1
 801ec28:	4620      	mov	r0, r4
 801ec2a:	4629      	mov	r1, r5
 801ec2c:	f7f9 ff54 	bl	8018ad8 <__aeabi_dsub>
 801ec30:	4602      	mov	r2, r0
 801ec32:	460b      	mov	r3, r1
 801ec34:	4640      	mov	r0, r8
 801ec36:	4649      	mov	r1, r9
 801ec38:	f7f9 ff4e 	bl	8018ad8 <__aeabi_dsub>
 801ec3c:	a372      	add	r3, pc, #456	; (adr r3, 801ee08 <__ieee754_pow+0xa08>)
 801ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec42:	f7fa f901 	bl	8018e48 <__aeabi_dmul>
 801ec46:	a372      	add	r3, pc, #456	; (adr r3, 801ee10 <__ieee754_pow+0xa10>)
 801ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec4c:	4680      	mov	r8, r0
 801ec4e:	4689      	mov	r9, r1
 801ec50:	4620      	mov	r0, r4
 801ec52:	4629      	mov	r1, r5
 801ec54:	f7fa f8f8 	bl	8018e48 <__aeabi_dmul>
 801ec58:	4602      	mov	r2, r0
 801ec5a:	460b      	mov	r3, r1
 801ec5c:	4640      	mov	r0, r8
 801ec5e:	4649      	mov	r1, r9
 801ec60:	f7f9 ff3c 	bl	8018adc <__adddf3>
 801ec64:	4604      	mov	r4, r0
 801ec66:	460d      	mov	r5, r1
 801ec68:	4602      	mov	r2, r0
 801ec6a:	460b      	mov	r3, r1
 801ec6c:	4630      	mov	r0, r6
 801ec6e:	4639      	mov	r1, r7
 801ec70:	f7f9 ff34 	bl	8018adc <__adddf3>
 801ec74:	4632      	mov	r2, r6
 801ec76:	463b      	mov	r3, r7
 801ec78:	4680      	mov	r8, r0
 801ec7a:	4689      	mov	r9, r1
 801ec7c:	f7f9 ff2c 	bl	8018ad8 <__aeabi_dsub>
 801ec80:	4602      	mov	r2, r0
 801ec82:	460b      	mov	r3, r1
 801ec84:	4620      	mov	r0, r4
 801ec86:	4629      	mov	r1, r5
 801ec88:	f7f9 ff26 	bl	8018ad8 <__aeabi_dsub>
 801ec8c:	4642      	mov	r2, r8
 801ec8e:	4606      	mov	r6, r0
 801ec90:	460f      	mov	r7, r1
 801ec92:	464b      	mov	r3, r9
 801ec94:	4640      	mov	r0, r8
 801ec96:	4649      	mov	r1, r9
 801ec98:	f7fa f8d6 	bl	8018e48 <__aeabi_dmul>
 801ec9c:	a35e      	add	r3, pc, #376	; (adr r3, 801ee18 <__ieee754_pow+0xa18>)
 801ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eca2:	4604      	mov	r4, r0
 801eca4:	460d      	mov	r5, r1
 801eca6:	f7fa f8cf 	bl	8018e48 <__aeabi_dmul>
 801ecaa:	a35d      	add	r3, pc, #372	; (adr r3, 801ee20 <__ieee754_pow+0xa20>)
 801ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecb0:	f7f9 ff12 	bl	8018ad8 <__aeabi_dsub>
 801ecb4:	4622      	mov	r2, r4
 801ecb6:	462b      	mov	r3, r5
 801ecb8:	f7fa f8c6 	bl	8018e48 <__aeabi_dmul>
 801ecbc:	a35a      	add	r3, pc, #360	; (adr r3, 801ee28 <__ieee754_pow+0xa28>)
 801ecbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecc2:	f7f9 ff0b 	bl	8018adc <__adddf3>
 801ecc6:	4622      	mov	r2, r4
 801ecc8:	462b      	mov	r3, r5
 801ecca:	f7fa f8bd 	bl	8018e48 <__aeabi_dmul>
 801ecce:	a358      	add	r3, pc, #352	; (adr r3, 801ee30 <__ieee754_pow+0xa30>)
 801ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecd4:	f7f9 ff00 	bl	8018ad8 <__aeabi_dsub>
 801ecd8:	4622      	mov	r2, r4
 801ecda:	462b      	mov	r3, r5
 801ecdc:	f7fa f8b4 	bl	8018e48 <__aeabi_dmul>
 801ece0:	a355      	add	r3, pc, #340	; (adr r3, 801ee38 <__ieee754_pow+0xa38>)
 801ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ece6:	f7f9 fef9 	bl	8018adc <__adddf3>
 801ecea:	4622      	mov	r2, r4
 801ecec:	462b      	mov	r3, r5
 801ecee:	f7fa f8ab 	bl	8018e48 <__aeabi_dmul>
 801ecf2:	4602      	mov	r2, r0
 801ecf4:	460b      	mov	r3, r1
 801ecf6:	4640      	mov	r0, r8
 801ecf8:	4649      	mov	r1, r9
 801ecfa:	f7f9 feed 	bl	8018ad8 <__aeabi_dsub>
 801ecfe:	4604      	mov	r4, r0
 801ed00:	460d      	mov	r5, r1
 801ed02:	4602      	mov	r2, r0
 801ed04:	460b      	mov	r3, r1
 801ed06:	4640      	mov	r0, r8
 801ed08:	4649      	mov	r1, r9
 801ed0a:	f7fa f89d 	bl	8018e48 <__aeabi_dmul>
 801ed0e:	2200      	movs	r2, #0
 801ed10:	ec41 0b19 	vmov	d9, r0, r1
 801ed14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ed18:	4620      	mov	r0, r4
 801ed1a:	4629      	mov	r1, r5
 801ed1c:	f7f9 fedc 	bl	8018ad8 <__aeabi_dsub>
 801ed20:	4602      	mov	r2, r0
 801ed22:	460b      	mov	r3, r1
 801ed24:	ec51 0b19 	vmov	r0, r1, d9
 801ed28:	f7fa f9b8 	bl	801909c <__aeabi_ddiv>
 801ed2c:	4632      	mov	r2, r6
 801ed2e:	4604      	mov	r4, r0
 801ed30:	460d      	mov	r5, r1
 801ed32:	463b      	mov	r3, r7
 801ed34:	4640      	mov	r0, r8
 801ed36:	4649      	mov	r1, r9
 801ed38:	f7fa f886 	bl	8018e48 <__aeabi_dmul>
 801ed3c:	4632      	mov	r2, r6
 801ed3e:	463b      	mov	r3, r7
 801ed40:	f7f9 fecc 	bl	8018adc <__adddf3>
 801ed44:	4602      	mov	r2, r0
 801ed46:	460b      	mov	r3, r1
 801ed48:	4620      	mov	r0, r4
 801ed4a:	4629      	mov	r1, r5
 801ed4c:	f7f9 fec4 	bl	8018ad8 <__aeabi_dsub>
 801ed50:	4642      	mov	r2, r8
 801ed52:	464b      	mov	r3, r9
 801ed54:	f7f9 fec0 	bl	8018ad8 <__aeabi_dsub>
 801ed58:	460b      	mov	r3, r1
 801ed5a:	4602      	mov	r2, r0
 801ed5c:	493a      	ldr	r1, [pc, #232]	; (801ee48 <__ieee754_pow+0xa48>)
 801ed5e:	2000      	movs	r0, #0
 801ed60:	f7f9 feba 	bl	8018ad8 <__aeabi_dsub>
 801ed64:	ec41 0b10 	vmov	d0, r0, r1
 801ed68:	ee10 3a90 	vmov	r3, s1
 801ed6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ed70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ed74:	da2b      	bge.n	801edce <__ieee754_pow+0x9ce>
 801ed76:	4650      	mov	r0, sl
 801ed78:	f000 f966 	bl	801f048 <scalbn>
 801ed7c:	ec51 0b10 	vmov	r0, r1, d0
 801ed80:	ec53 2b18 	vmov	r2, r3, d8
 801ed84:	f7ff bbed 	b.w	801e562 <__ieee754_pow+0x162>
 801ed88:	4b30      	ldr	r3, [pc, #192]	; (801ee4c <__ieee754_pow+0xa4c>)
 801ed8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ed8e:	429e      	cmp	r6, r3
 801ed90:	f77f af0c 	ble.w	801ebac <__ieee754_pow+0x7ac>
 801ed94:	4b2e      	ldr	r3, [pc, #184]	; (801ee50 <__ieee754_pow+0xa50>)
 801ed96:	440b      	add	r3, r1
 801ed98:	4303      	orrs	r3, r0
 801ed9a:	d009      	beq.n	801edb0 <__ieee754_pow+0x9b0>
 801ed9c:	ec51 0b18 	vmov	r0, r1, d8
 801eda0:	2200      	movs	r2, #0
 801eda2:	2300      	movs	r3, #0
 801eda4:	f7fa fac2 	bl	801932c <__aeabi_dcmplt>
 801eda8:	3800      	subs	r0, #0
 801edaa:	bf18      	it	ne
 801edac:	2001      	movne	r0, #1
 801edae:	e447      	b.n	801e640 <__ieee754_pow+0x240>
 801edb0:	4622      	mov	r2, r4
 801edb2:	462b      	mov	r3, r5
 801edb4:	f7f9 fe90 	bl	8018ad8 <__aeabi_dsub>
 801edb8:	4642      	mov	r2, r8
 801edba:	464b      	mov	r3, r9
 801edbc:	f7fa faca 	bl	8019354 <__aeabi_dcmpge>
 801edc0:	2800      	cmp	r0, #0
 801edc2:	f43f aef3 	beq.w	801ebac <__ieee754_pow+0x7ac>
 801edc6:	e7e9      	b.n	801ed9c <__ieee754_pow+0x99c>
 801edc8:	f04f 0a00 	mov.w	sl, #0
 801edcc:	e71a      	b.n	801ec04 <__ieee754_pow+0x804>
 801edce:	ec51 0b10 	vmov	r0, r1, d0
 801edd2:	4619      	mov	r1, r3
 801edd4:	e7d4      	b.n	801ed80 <__ieee754_pow+0x980>
 801edd6:	491c      	ldr	r1, [pc, #112]	; (801ee48 <__ieee754_pow+0xa48>)
 801edd8:	2000      	movs	r0, #0
 801edda:	f7ff bb30 	b.w	801e43e <__ieee754_pow+0x3e>
 801edde:	2000      	movs	r0, #0
 801ede0:	2100      	movs	r1, #0
 801ede2:	f7ff bb2c 	b.w	801e43e <__ieee754_pow+0x3e>
 801ede6:	4630      	mov	r0, r6
 801ede8:	4639      	mov	r1, r7
 801edea:	f7ff bb28 	b.w	801e43e <__ieee754_pow+0x3e>
 801edee:	9204      	str	r2, [sp, #16]
 801edf0:	f7ff bb7a 	b.w	801e4e8 <__ieee754_pow+0xe8>
 801edf4:	2300      	movs	r3, #0
 801edf6:	f7ff bb64 	b.w	801e4c2 <__ieee754_pow+0xc2>
 801edfa:	bf00      	nop
 801edfc:	f3af 8000 	nop.w
 801ee00:	00000000 	.word	0x00000000
 801ee04:	3fe62e43 	.word	0x3fe62e43
 801ee08:	fefa39ef 	.word	0xfefa39ef
 801ee0c:	3fe62e42 	.word	0x3fe62e42
 801ee10:	0ca86c39 	.word	0x0ca86c39
 801ee14:	be205c61 	.word	0xbe205c61
 801ee18:	72bea4d0 	.word	0x72bea4d0
 801ee1c:	3e663769 	.word	0x3e663769
 801ee20:	c5d26bf1 	.word	0xc5d26bf1
 801ee24:	3ebbbd41 	.word	0x3ebbbd41
 801ee28:	af25de2c 	.word	0xaf25de2c
 801ee2c:	3f11566a 	.word	0x3f11566a
 801ee30:	16bebd93 	.word	0x16bebd93
 801ee34:	3f66c16c 	.word	0x3f66c16c
 801ee38:	5555553e 	.word	0x5555553e
 801ee3c:	3fc55555 	.word	0x3fc55555
 801ee40:	3fe00000 	.word	0x3fe00000
 801ee44:	000fffff 	.word	0x000fffff
 801ee48:	3ff00000 	.word	0x3ff00000
 801ee4c:	4090cbff 	.word	0x4090cbff
 801ee50:	3f6f3400 	.word	0x3f6f3400
 801ee54:	652b82fe 	.word	0x652b82fe
 801ee58:	3c971547 	.word	0x3c971547

0801ee5c <__ieee754_sqrt>:
 801ee5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee60:	ec55 4b10 	vmov	r4, r5, d0
 801ee64:	4e55      	ldr	r6, [pc, #340]	; (801efbc <__ieee754_sqrt+0x160>)
 801ee66:	43ae      	bics	r6, r5
 801ee68:	ee10 0a10 	vmov	r0, s0
 801ee6c:	ee10 3a10 	vmov	r3, s0
 801ee70:	462a      	mov	r2, r5
 801ee72:	4629      	mov	r1, r5
 801ee74:	d110      	bne.n	801ee98 <__ieee754_sqrt+0x3c>
 801ee76:	ee10 2a10 	vmov	r2, s0
 801ee7a:	462b      	mov	r3, r5
 801ee7c:	f7f9 ffe4 	bl	8018e48 <__aeabi_dmul>
 801ee80:	4602      	mov	r2, r0
 801ee82:	460b      	mov	r3, r1
 801ee84:	4620      	mov	r0, r4
 801ee86:	4629      	mov	r1, r5
 801ee88:	f7f9 fe28 	bl	8018adc <__adddf3>
 801ee8c:	4604      	mov	r4, r0
 801ee8e:	460d      	mov	r5, r1
 801ee90:	ec45 4b10 	vmov	d0, r4, r5
 801ee94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee98:	2d00      	cmp	r5, #0
 801ee9a:	dc10      	bgt.n	801eebe <__ieee754_sqrt+0x62>
 801ee9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801eea0:	4330      	orrs	r0, r6
 801eea2:	d0f5      	beq.n	801ee90 <__ieee754_sqrt+0x34>
 801eea4:	b15d      	cbz	r5, 801eebe <__ieee754_sqrt+0x62>
 801eea6:	ee10 2a10 	vmov	r2, s0
 801eeaa:	462b      	mov	r3, r5
 801eeac:	ee10 0a10 	vmov	r0, s0
 801eeb0:	f7f9 fe12 	bl	8018ad8 <__aeabi_dsub>
 801eeb4:	4602      	mov	r2, r0
 801eeb6:	460b      	mov	r3, r1
 801eeb8:	f7fa f8f0 	bl	801909c <__aeabi_ddiv>
 801eebc:	e7e6      	b.n	801ee8c <__ieee754_sqrt+0x30>
 801eebe:	1512      	asrs	r2, r2, #20
 801eec0:	d074      	beq.n	801efac <__ieee754_sqrt+0x150>
 801eec2:	07d4      	lsls	r4, r2, #31
 801eec4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801eec8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801eecc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801eed0:	bf5e      	ittt	pl
 801eed2:	0fda      	lsrpl	r2, r3, #31
 801eed4:	005b      	lslpl	r3, r3, #1
 801eed6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801eeda:	2400      	movs	r4, #0
 801eedc:	0fda      	lsrs	r2, r3, #31
 801eede:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801eee2:	107f      	asrs	r7, r7, #1
 801eee4:	005b      	lsls	r3, r3, #1
 801eee6:	2516      	movs	r5, #22
 801eee8:	4620      	mov	r0, r4
 801eeea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801eeee:	1886      	adds	r6, r0, r2
 801eef0:	428e      	cmp	r6, r1
 801eef2:	bfde      	ittt	le
 801eef4:	1b89      	suble	r1, r1, r6
 801eef6:	18b0      	addle	r0, r6, r2
 801eef8:	18a4      	addle	r4, r4, r2
 801eefa:	0049      	lsls	r1, r1, #1
 801eefc:	3d01      	subs	r5, #1
 801eefe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801ef02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801ef06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ef0a:	d1f0      	bne.n	801eeee <__ieee754_sqrt+0x92>
 801ef0c:	462a      	mov	r2, r5
 801ef0e:	f04f 0e20 	mov.w	lr, #32
 801ef12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ef16:	4281      	cmp	r1, r0
 801ef18:	eb06 0c05 	add.w	ip, r6, r5
 801ef1c:	dc02      	bgt.n	801ef24 <__ieee754_sqrt+0xc8>
 801ef1e:	d113      	bne.n	801ef48 <__ieee754_sqrt+0xec>
 801ef20:	459c      	cmp	ip, r3
 801ef22:	d811      	bhi.n	801ef48 <__ieee754_sqrt+0xec>
 801ef24:	f1bc 0f00 	cmp.w	ip, #0
 801ef28:	eb0c 0506 	add.w	r5, ip, r6
 801ef2c:	da43      	bge.n	801efb6 <__ieee754_sqrt+0x15a>
 801ef2e:	2d00      	cmp	r5, #0
 801ef30:	db41      	blt.n	801efb6 <__ieee754_sqrt+0x15a>
 801ef32:	f100 0801 	add.w	r8, r0, #1
 801ef36:	1a09      	subs	r1, r1, r0
 801ef38:	459c      	cmp	ip, r3
 801ef3a:	bf88      	it	hi
 801ef3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ef40:	eba3 030c 	sub.w	r3, r3, ip
 801ef44:	4432      	add	r2, r6
 801ef46:	4640      	mov	r0, r8
 801ef48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ef4c:	f1be 0e01 	subs.w	lr, lr, #1
 801ef50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ef54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ef58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ef5c:	d1db      	bne.n	801ef16 <__ieee754_sqrt+0xba>
 801ef5e:	430b      	orrs	r3, r1
 801ef60:	d006      	beq.n	801ef70 <__ieee754_sqrt+0x114>
 801ef62:	1c50      	adds	r0, r2, #1
 801ef64:	bf13      	iteet	ne
 801ef66:	3201      	addne	r2, #1
 801ef68:	3401      	addeq	r4, #1
 801ef6a:	4672      	moveq	r2, lr
 801ef6c:	f022 0201 	bicne.w	r2, r2, #1
 801ef70:	1063      	asrs	r3, r4, #1
 801ef72:	0852      	lsrs	r2, r2, #1
 801ef74:	07e1      	lsls	r1, r4, #31
 801ef76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ef7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ef7e:	bf48      	it	mi
 801ef80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ef84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ef88:	4614      	mov	r4, r2
 801ef8a:	e781      	b.n	801ee90 <__ieee754_sqrt+0x34>
 801ef8c:	0ad9      	lsrs	r1, r3, #11
 801ef8e:	3815      	subs	r0, #21
 801ef90:	055b      	lsls	r3, r3, #21
 801ef92:	2900      	cmp	r1, #0
 801ef94:	d0fa      	beq.n	801ef8c <__ieee754_sqrt+0x130>
 801ef96:	02cd      	lsls	r5, r1, #11
 801ef98:	d50a      	bpl.n	801efb0 <__ieee754_sqrt+0x154>
 801ef9a:	f1c2 0420 	rsb	r4, r2, #32
 801ef9e:	fa23 f404 	lsr.w	r4, r3, r4
 801efa2:	1e55      	subs	r5, r2, #1
 801efa4:	4093      	lsls	r3, r2
 801efa6:	4321      	orrs	r1, r4
 801efa8:	1b42      	subs	r2, r0, r5
 801efaa:	e78a      	b.n	801eec2 <__ieee754_sqrt+0x66>
 801efac:	4610      	mov	r0, r2
 801efae:	e7f0      	b.n	801ef92 <__ieee754_sqrt+0x136>
 801efb0:	0049      	lsls	r1, r1, #1
 801efb2:	3201      	adds	r2, #1
 801efb4:	e7ef      	b.n	801ef96 <__ieee754_sqrt+0x13a>
 801efb6:	4680      	mov	r8, r0
 801efb8:	e7bd      	b.n	801ef36 <__ieee754_sqrt+0xda>
 801efba:	bf00      	nop
 801efbc:	7ff00000 	.word	0x7ff00000

0801efc0 <with_errno>:
 801efc0:	b570      	push	{r4, r5, r6, lr}
 801efc2:	4604      	mov	r4, r0
 801efc4:	460d      	mov	r5, r1
 801efc6:	4616      	mov	r6, r2
 801efc8:	f7fa fc6c 	bl	80198a4 <__errno>
 801efcc:	4629      	mov	r1, r5
 801efce:	6006      	str	r6, [r0, #0]
 801efd0:	4620      	mov	r0, r4
 801efd2:	bd70      	pop	{r4, r5, r6, pc}

0801efd4 <xflow>:
 801efd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801efd6:	4614      	mov	r4, r2
 801efd8:	461d      	mov	r5, r3
 801efda:	b108      	cbz	r0, 801efe0 <xflow+0xc>
 801efdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801efe0:	e9cd 2300 	strd	r2, r3, [sp]
 801efe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801efe8:	4620      	mov	r0, r4
 801efea:	4629      	mov	r1, r5
 801efec:	f7f9 ff2c 	bl	8018e48 <__aeabi_dmul>
 801eff0:	2222      	movs	r2, #34	; 0x22
 801eff2:	b003      	add	sp, #12
 801eff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eff8:	f7ff bfe2 	b.w	801efc0 <with_errno>

0801effc <__math_uflow>:
 801effc:	b508      	push	{r3, lr}
 801effe:	2200      	movs	r2, #0
 801f000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f004:	f7ff ffe6 	bl	801efd4 <xflow>
 801f008:	ec41 0b10 	vmov	d0, r0, r1
 801f00c:	bd08      	pop	{r3, pc}

0801f00e <__math_oflow>:
 801f00e:	b508      	push	{r3, lr}
 801f010:	2200      	movs	r2, #0
 801f012:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801f016:	f7ff ffdd 	bl	801efd4 <xflow>
 801f01a:	ec41 0b10 	vmov	d0, r0, r1
 801f01e:	bd08      	pop	{r3, pc}

0801f020 <fabs>:
 801f020:	ec51 0b10 	vmov	r0, r1, d0
 801f024:	ee10 2a10 	vmov	r2, s0
 801f028:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f02c:	ec43 2b10 	vmov	d0, r2, r3
 801f030:	4770      	bx	lr

0801f032 <finite>:
 801f032:	b082      	sub	sp, #8
 801f034:	ed8d 0b00 	vstr	d0, [sp]
 801f038:	9801      	ldr	r0, [sp, #4]
 801f03a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f03e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f042:	0fc0      	lsrs	r0, r0, #31
 801f044:	b002      	add	sp, #8
 801f046:	4770      	bx	lr

0801f048 <scalbn>:
 801f048:	b570      	push	{r4, r5, r6, lr}
 801f04a:	ec55 4b10 	vmov	r4, r5, d0
 801f04e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f052:	4606      	mov	r6, r0
 801f054:	462b      	mov	r3, r5
 801f056:	b99a      	cbnz	r2, 801f080 <scalbn+0x38>
 801f058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f05c:	4323      	orrs	r3, r4
 801f05e:	d036      	beq.n	801f0ce <scalbn+0x86>
 801f060:	4b39      	ldr	r3, [pc, #228]	; (801f148 <scalbn+0x100>)
 801f062:	4629      	mov	r1, r5
 801f064:	ee10 0a10 	vmov	r0, s0
 801f068:	2200      	movs	r2, #0
 801f06a:	f7f9 feed 	bl	8018e48 <__aeabi_dmul>
 801f06e:	4b37      	ldr	r3, [pc, #220]	; (801f14c <scalbn+0x104>)
 801f070:	429e      	cmp	r6, r3
 801f072:	4604      	mov	r4, r0
 801f074:	460d      	mov	r5, r1
 801f076:	da10      	bge.n	801f09a <scalbn+0x52>
 801f078:	a32b      	add	r3, pc, #172	; (adr r3, 801f128 <scalbn+0xe0>)
 801f07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f07e:	e03a      	b.n	801f0f6 <scalbn+0xae>
 801f080:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f084:	428a      	cmp	r2, r1
 801f086:	d10c      	bne.n	801f0a2 <scalbn+0x5a>
 801f088:	ee10 2a10 	vmov	r2, s0
 801f08c:	4620      	mov	r0, r4
 801f08e:	4629      	mov	r1, r5
 801f090:	f7f9 fd24 	bl	8018adc <__adddf3>
 801f094:	4604      	mov	r4, r0
 801f096:	460d      	mov	r5, r1
 801f098:	e019      	b.n	801f0ce <scalbn+0x86>
 801f09a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f09e:	460b      	mov	r3, r1
 801f0a0:	3a36      	subs	r2, #54	; 0x36
 801f0a2:	4432      	add	r2, r6
 801f0a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f0a8:	428a      	cmp	r2, r1
 801f0aa:	dd08      	ble.n	801f0be <scalbn+0x76>
 801f0ac:	2d00      	cmp	r5, #0
 801f0ae:	a120      	add	r1, pc, #128	; (adr r1, 801f130 <scalbn+0xe8>)
 801f0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0b4:	da1c      	bge.n	801f0f0 <scalbn+0xa8>
 801f0b6:	a120      	add	r1, pc, #128	; (adr r1, 801f138 <scalbn+0xf0>)
 801f0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0bc:	e018      	b.n	801f0f0 <scalbn+0xa8>
 801f0be:	2a00      	cmp	r2, #0
 801f0c0:	dd08      	ble.n	801f0d4 <scalbn+0x8c>
 801f0c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f0c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f0ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f0ce:	ec45 4b10 	vmov	d0, r4, r5
 801f0d2:	bd70      	pop	{r4, r5, r6, pc}
 801f0d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f0d8:	da19      	bge.n	801f10e <scalbn+0xc6>
 801f0da:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f0de:	429e      	cmp	r6, r3
 801f0e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f0e4:	dd0a      	ble.n	801f0fc <scalbn+0xb4>
 801f0e6:	a112      	add	r1, pc, #72	; (adr r1, 801f130 <scalbn+0xe8>)
 801f0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d1e2      	bne.n	801f0b6 <scalbn+0x6e>
 801f0f0:	a30f      	add	r3, pc, #60	; (adr r3, 801f130 <scalbn+0xe8>)
 801f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f6:	f7f9 fea7 	bl	8018e48 <__aeabi_dmul>
 801f0fa:	e7cb      	b.n	801f094 <scalbn+0x4c>
 801f0fc:	a10a      	add	r1, pc, #40	; (adr r1, 801f128 <scalbn+0xe0>)
 801f0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f102:	2b00      	cmp	r3, #0
 801f104:	d0b8      	beq.n	801f078 <scalbn+0x30>
 801f106:	a10e      	add	r1, pc, #56	; (adr r1, 801f140 <scalbn+0xf8>)
 801f108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f10c:	e7b4      	b.n	801f078 <scalbn+0x30>
 801f10e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f112:	3236      	adds	r2, #54	; 0x36
 801f114:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f118:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f11c:	4620      	mov	r0, r4
 801f11e:	4b0c      	ldr	r3, [pc, #48]	; (801f150 <scalbn+0x108>)
 801f120:	2200      	movs	r2, #0
 801f122:	e7e8      	b.n	801f0f6 <scalbn+0xae>
 801f124:	f3af 8000 	nop.w
 801f128:	c2f8f359 	.word	0xc2f8f359
 801f12c:	01a56e1f 	.word	0x01a56e1f
 801f130:	8800759c 	.word	0x8800759c
 801f134:	7e37e43c 	.word	0x7e37e43c
 801f138:	8800759c 	.word	0x8800759c
 801f13c:	fe37e43c 	.word	0xfe37e43c
 801f140:	c2f8f359 	.word	0xc2f8f359
 801f144:	81a56e1f 	.word	0x81a56e1f
 801f148:	43500000 	.word	0x43500000
 801f14c:	ffff3cb0 	.word	0xffff3cb0
 801f150:	3c900000 	.word	0x3c900000

0801f154 <_init>:
 801f154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f156:	bf00      	nop
 801f158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f15a:	bc08      	pop	{r3}
 801f15c:	469e      	mov	lr, r3
 801f15e:	4770      	bx	lr

0801f160 <_fini>:
 801f160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f162:	bf00      	nop
 801f164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f166:	bc08      	pop	{r3}
 801f168:	469e      	mov	lr, r3
 801f16a:	4770      	bx	lr
